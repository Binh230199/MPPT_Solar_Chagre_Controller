/*
 * Lcd.cpp
 *
 *  Created on: May 16, 2024
 *      Author: This PC
 */

#include "Lcd.h"

namespace blib
{

    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
            address)
    {
        init();
    }
    Lcd::~Lcd()
    {

    }
    void Lcd::sendCmd(uint8_t command)
    {
        uint8_t dataHigh = 0, dataLow = 0;
        uint8_t data[4];
        dataHigh = (cmd & 0xF0);
        dataLow = ((cmd << 4) & 0xF0);
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
        data[2] = dataLow | 0x0C;
        data[3] = dataLow | 0x08;
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
    }
    void Lcd::sendData(uint8_t data)
    {
        uint8_t dataHigh = 0, dataLow = 0;
        uint8_t data[4];
        dataHigh = (dat & 0xF0);
        dataLow = ((dat << 4) & 0xF0);
        data[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
        data[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
        data[2] = dataLow | 0x0D;
        data[3] = dataLow | 0x09;
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
    }
    void Lcd::setCursor(uint8_t row, uint8_t col)
    {
        uint8_t command = 0;

        switch (mLcdType)
        {
            case LcdType::LCD_TYPE_1602:
                // Implement later
                break;
            case LcdType::LCD_TYPE_2004:
                switch (row)
                {
                    case 0:
                        command = 0x80 | (col + 0x00);
                        break;
                    case 1:
                        command = 0x80 | (col + 0x14);
                        break;
                    case 2:
                        command = 0x80 | (col + 0x40);
                        break;
                    case 3:
                        command = 0x80 | (col + 0x54);
                        break;
                }
                break;
            default:
                break;
        }

        sendCmd(command);
    }
    void Lcd::rollData()
    {

    }
    void Lcd::pushData()
    {

    }
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
        uint8_t command = 0;

        switch (mLcdType)
        {
            case LcdType::LCD_TYPE_1602:
                break;
            case LcdType::LCD_TYPE_2004:
                switch (row)
                {
                    case 0:
                        command = 0x80 | (col + 0x00);
                        break;
                    case 1:
                        command = 0x80 | (col + 0x40);
                        break;
                    case 2:
                        command = 0x80 | (col + 0x14);
                        break;
                    case 3:
                        command = 0x80 | (col + 0x54);
                        break;
                    default:
                        break;
                }
                break;
            default:
                break;
        }

        sendCmd(command);

        while (*string)
        {
            sendData(*string);
            string++;
        }
    }
    void Lcd::clearDisplay()
    {
        sendCmd(0x00);
        for (uint8_t i = 0; i < 100; i++)
        {
            sendData(' ');
        }
    }
    void Lcd::init()
    {
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_BLACKLIGHT;

        HAL_Delay(50);
        LCD_SendCommand(lcd, 0x30);
        HAL_Delay(5);
        LCD_SendCommand(lcd, 0x30);
        HAL_Delay(1);
        LCD_SendCommand(lcd, 0x30);
        HAL_Delay(10);
        LCD_SendCommand(lcd, 0x20);
        HAL_Delay(10);

        LCD_SendCommand(lcd, lcd->functionSet);
        HAL_Delay(1);
        LCD_SendCommand(lcd, lcd->displayControl);
        HAL_Delay(1);
        LCD_SendCommand(lcd, 0x01);    //clear display
        HAL_Delay(2);
        LCD_SendCommand(lcd, lcd->entryMode);
        HAL_Delay(1);
        LCD_SendCommand(lcd, lcd->displayControl | LCD_DISPLAY_D_ON);
        HAL_Delay(1);
    }
    void Lcd::makeCustomCharacter(uint8_t location, uint8_t *byte)
    {

    }

}    // namespace blib

