/*
 * ChargeControl.cpp
 *
 *  Created on: May 15, 2024
 *      Author: binhhv.23.1.99@gmail.com
 */

#include "ChargeControl.h"
#include "Monitor.h"
#include "Analog.h"
#include "DeviceProtection.h"

extern TIM_HandleTypeDef htim2;

namespace blib
{
    template<typename T>
    T constrainValue(T value, T minVal, T maxVal)
    {
        if (value < minVal)
        {
            return minVal;    // Nếu giá trị nhỏ hơn minVal, trả về minVal
        }
        else if (value > maxVal)
        {
            return maxVal;    // Nếu giá trị lớn hơn maxVal, trả về maxVal
        }
        else
        {
            return value;    // Nếu giá trị nằm trong khoảng, trả về giá trị ban đầu
        }
    }

    ChargeControl::ChargeControl()
    {
        mHtim = &htim2;
        buckDisable();
        mChargeState = false;
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
    }
    ChargeControl::~ChargeControl()
    {

    }
    void ChargeControl::run()
    {
        auto &analog = Analog::getInstance();
        auto &devProtection = DeviceProtection::getInstance();

        if (devProtection.mERR > 0 || mChargePause == true)
        {
            buckDisable();
        }
        else
        {
            if (/* Recovery == true */false)
            {
//                recovery = false;
                buckDisable();

                Monitor::getInstance().impl_DisplayDetectPowerSource();
                analog.readAnalog();
                mPwm = (uint32_t) predictPwm();
//                Monitor::getInstance().impl_DisplayOff();
            }
            else
            {
                if (mMpptMode == false)
                {
                    if (analog.mIout > k_current_charging_max)
                    {
                        mPwm--;
                    }
                    else if (analog.mVout > k_voltage_battery_max)
                    {
                        mPwm--;
                    }
                    else if (analog.mVout < k_voltage_battery_max)
                    {
                        mPwm++;
                    }
                    else
                    {

                    }

                    pwmWrite();
                }
                else
                {
                    static float powerInputPrev = 0;
                    static float voltageInputPrev = 0;

                    if (analog.mIout > k_current_charging_max)
                    {
                        mPwm--;
                    }
                    else if (analog.mVout > k_voltage_battery_max)
                    {
                        mPwm--;
                    }
                    else
                    {
                        if (analog.mPout > powerInputPrev && analog.mVin > voltageInputPrev)
                        {
                            mPwm--;
                        }
                        else if (analog.mPin > powerInputPrev && analog.mVin < voltageInputPrev)
                        {
                            mPwm++;
                        }    //  ↑P ↓V ; MPP←  //D++
                        else if (analog.mPin < powerInputPrev && analog.mVin > voltageInputPrev)
                        {
                            mPwm++;
                        }    //  ↓P ↑V ; MPP→  //D++
                        else if (analog.mPin < powerInputPrev && analog.mVin < voltageInputPrev)
                        {
                            mPwm--;
                        }    //  ↓P ↓V ; ←MPP  //D--
                        else if (analog.mVout < k_voltage_battery_max)
                        {
                            mPwm++;
                        }

                        powerInputPrev = analog.mPin;
                        voltageInputPrev = analog.mVin;
                    }

                    pwmWrite();
                }
            }
        }
    }

    void ChargeControl::setBuckEnable(const bool val)
    {
        mBuckEnable = val;
    }
    bool ChargeControl::getBuckEnable() const
    {
        return mBuckEnable;
    }
    void ChargeControl::setMpptMode(const bool val)
    {
        mMpptMode = val;
    }
    bool ChargeControl::getMpptMode() const
    {
        return mMpptMode;
    }

    // Enable Mppt Buck converter
    void ChargeControl::buckEnable()
    {
        LOGI();
        setBuckEnable(true);
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
    }

    // Disable Mppt Buck converter
    void ChargeControl::buckDisable()
    {
        LOGI();
        setBuckEnable(false);
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
        mPwm = 0;
    }
    uint32_t ChargeControl::predictPwm()
    {
        auto &analog = Analog::getInstance();

        uint32_t predictPwm = 0;

        if (analog.mVin < 0.0f)
        {
            predictPwm = 0;
        }
        else
        {
            predictPwm = (k_predict_pwm_margin * k_pwm_max * analog.mVout) / (100.0f * analog.mVin);
        }

        predictPwm = constrainValue(predictPwm, 0, k_pwm_max_limited);

        return predictPwm;
    }
    void ChargeControl::generatePwm(uint32_t val)
    {
        __HAL_TIM_SET_COMPARE(mHtim, TIM_CHANNEL_1, val);
    }

    void ChargeControl::pwmInit(uint32_t frequency, uint32_t dutyCycle)
    {
        TIM_OC_InitTypeDef sConfigOC;

        mHtim->Instance->PSC = (HAL_RCC_GetPCLK1Freq() / frequency) - 1;    // Tính toán giá trị prescaler dựa trên tần số mong muốn
        mHtim->Instance->ARR = dutyCycle;    // Giá trị duty cycle (0-ARR)
        mHtim->Instance->CCR1 = dutyCycle;    // Giá trị sử dụng cho kênh PWM

        sConfigOC.OCMode = TIM_OCMODE_PWM1;
        sConfigOC.Pulse = 8;
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
        sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
        if (HAL_TIM_PWM_ConfigChannel(mHtim, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
        {
            Error_Handler();
        }

        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
    }

    void ChargeControl::pwmWrite()
    {
        if (mOutputMode == OutputMode::PSU)
        {
            mPwm = constrainValue(mPwm, (uint32_t) 0, k_pwm_max_limited);
        }
        else
        {
            uint32_t pPwm = (uint32_t) predictPwm();
            mPwm = constrainValue(mPwm, pPwm, k_pwm_max_limited);
        }

        buckEnable();

        uint32_t channel = TIM_CHANNEL_1;    // xxx: Set as Default

        if (channel == TIM_CHANNEL_1)
        {
            mHtim->Instance->CCR1 = mPwm;
        }
        else if (channel == TIM_CHANNEL_2)
        {
            mHtim->Instance->CCR2 = mPwm;
        }
        else if (channel == TIM_CHANNEL_3)
        {
            mHtim->Instance->CCR3 = mPwm;
        }
        else if (channel == TIM_CHANNEL_4)
        {
            mHtim->Instance->CCR4 = mPwm;
        }
    }
}    // namespace blib

