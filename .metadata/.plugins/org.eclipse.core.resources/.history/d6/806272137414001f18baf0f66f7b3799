/*
 * TestLcd.h
 *
 *  Created on: May 17, 2024
 *      Author: This PC
 */

#ifndef TESTLCD_H_
#define TESTLCD_H_

// Add design patterns template library
#include "Singleton.h"
#include "StateMachineBase.h"
#include "Analog.h"
#include "DeviceProtection.h"
#include "ChargeControl.h"
#include "Button.h"
// Add log library
#include "Log.h"

#include "Lcd.h"

extern I2C_HandleTypeDef hi2c1;
namespace blib
{
    class LcdSimulate;

    using Callback = void (LcdSimulate::*)();

    class LcdSimulate : public dp::Singleton<LcdSimulate>
    {
        public:
            LcdSimulate() : mLcd(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
            {
                mCallback = &LcdSimulate::impl_1_HomeScreen;
            }
            virtual ~LcdSimulate()
            {

            }
            void run()
            {
                (LcdSimulate::getInstance().*mCallback)();
            }
            void impl_1_HomeScreen()
            {
                mLcd.clearDisplay();
                mLcd.displayLine(0, 2, "HOME SCREEN");
                mLcd.displayLine(1, 2, "HOME SCREEN");
                mLcd.displayLine(2, 2, "HOME SCREEN");
                mLcd.displayLine(3, 2, "Press any button");

                // Nhan nut bat ky thi se chuyen sang man hinh menu
                if (button.getLatestPressedButton() == Button::ButtonName::UP
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
                {
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
                    button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
                }
            }

            void impl_2_MenuScreen()
            {
                auto &button = Button::getInstance();

                if (button.getLatestPressedButton() == Button::ButtonName::UNDEFINED)
                {
                    return;
                }

                static int arrowLine = 0;

                mLcd.clearDisplay();
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
                mLcd.displayLine(1, 1, "2 SETTING MODE");
                mLcd.displayLine(2, 1, "3 ABOUT");
                mLcd.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");

                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
                {
                    if (arrowLine == 0)
                    {
                        arrowLine = 2;
                    }
                    else
                    {
                        arrowLine--;
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
                {
                    if (arrowLine == 2)
                    {
                        arrowLine = 0;
                    }
                    else
                    {
                        arrowLine++;
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
                {
                    mCallback = &LcdSimulate::impl_1_HomeScreen;
                }
                else
                {
                    if (arrowLine == 0)
                    {

                    }
                }

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
            }

            void impl_3_DisplayScreen()
            {
                mLcd.clearDisplay();
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
                mLcd.displayLine(1, 1, "2 SETTING MODE");
                mLcd.displayLine(2, 1, "3 ABOUT");
                mLcd.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
            }

            void impl_3_SettingScreen()
            {
                mLcd.clearDisplay();
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
                mLcd.displayLine(1, 1, "2 SETTING MODE");
                mLcd.displayLine(2, 1, "3 ABOUT");
                mLcd.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
            }

            void impl_3_AboutScreen()
            {
                mLcd.clearDisplay();
                mLcd.displayLine(0, 0, "MPPT SOLAR CHARGER");
                mLcd.displayLine(1, 0, "FIRMWARE VER: 1.0.0");
                mLcd.displayLine(2, 0, "CONTACT:09123123123");
                mLcd.displayLine(3, 15, "4BACK");
            }
#if 0
            void impl_3_DisplayScroll()
            {
                const int COL = 21;
                const int ROW = 5;

                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
                        "3 DISPLAY VIEW 3", "4 DISPLAY VIEW 4" };

                if (mIndexLine == 1)
                {
                    mLcdDisplay.displayLine(0, 1, list[mIndexLine]);
                    mLcdDisplay.displayLine(1, 1, list[mIndexLine + 1]);
                    mLcdDisplay.displayLine(2, 1, list[mIndexLine + 2]);
                }
                else if (mIndexLine == ROW - 1)
                {
                    mLcdDisplay.displayLine(0, 1, list[mIndexLine - 2]);
                    mLcdDisplay.displayLine(1, 1, list[mIndexLine - 1]);
                    mLcdDisplay.displayLine(2, 1, list[mIndexLine]);
                }
                else
                {
                    mLcdDisplay.displayLine(0, 1, list[mIndexLine - 1]);
                    mLcdDisplay.displayLine(1, 1, list[mIndexLine]);
                    mLcdDisplay.displayLine(2, 1, list[mIndexLine + 1]);
                }

                mLcdDisplay.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
            }

            void impl_3_SettingScroll()
            {
                const int COL = 21;
                const int ROW = 13;

                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
                        "4 MIN BATTERY VOLT", "5 CHARGING CURRENT", "6 COOLING FAN",
                        "7 FAN TRIGGER TEMP", "8 SHUTDOWN TEMP", "9 AUTOLOAD", "10BACKLIGHT SLEEP",
                        "11FACTORY RESET" };

                if (mIndexLine == 1)
                {
                    mLcdDisplay.displayLine(0, 1, list[mIndexLine]);
                    mLcdDisplay.displayLine(1, 1, list[mIndexLine + 1]);
                    mLcdDisplay.displayLine(2, 1, list[mIndexLine + 2]);
                }
                else if (mIndexLine == ROW - 1)
                {
                    mLcdDisplay.displayLine(0, 1, list[mIndexLine - 2]);
                    mLcdDisplay.displayLine(1, 1, list[mIndexLine - 1]);
                    mLcdDisplay.displayLine(2, 1, list[mIndexLine]);
                }
                else
                {
                    mLcdDisplay.displayLine(0, 1, list[mIndexLine - 1]);
                    mLcdDisplay.displayLine(1, 1, list[mIndexLine]);
                    mLcdDisplay.displayLine(2, 1, list[mIndexLine + 1]);
                }

                mLcdDisplay.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
            }

            void impl_3_1_DisplayConfig1()
            {
                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };

                snprintf(line0, 21, "%03.1W %04.2fWh ", 25.1);    //P:025.1W A:0003.4Wh

                if (isBatteryPlugin)
                {
                    snprintf(line1, 21, "Bat: %03.1%%");    // Bat:100.0%
                }
                else
                {
                    snprintf(line1, 21, "Bat: NOBAT");    // Bat: NOBAT
                }

                snprintf(line2, 21, "Iout: %03.1fA", 5.1f);    // Iout: 005.1A

                mLcd.clearDisplay();
                mLcd.displayLine(0, 0, line0);
                mLcd.displayLine(1, 0, line1);
                mLcd.displayLine(2, 0, line2);
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
            }

            void impl_3_1_DisplayConfig2()
            {
                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };

                snprintf(line0, 21, "%03.1W %04.2fWh ", 25.1);    //P:025.1W A:0003.4Wh
                snprintf(line2, 21, "Iout: %03.1fA", 5.1f);    // Iout: 005.1A

                mLcd.clearDisplay();
                mLcd.displayLine(0, 0, line0);
                mLcd.displayLine(1, 0, line1);
                mLcd.displayLine(2, 0, line2);
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
            }

            void impl_3_1_DisplayConfig3()
            {

            }

            void impl_3_1_DisplayConfig4()
            {
                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };

                snprintf(line0, 21, "%s", "Temp: %.2f\u00B0C", Analog::getInstance().getTemp());    //Temperature
                snprintf(line1, 21, "%s", "Fan: %s", (isFanStatus == RUN) ? "RUN" : "OFF");    //Fan: RUN
                snprintf(line2, 21, "Thres:[%.2f-%.2f]", 60, 90);

                mLcd.clearDisplay();
                mLcd.displayLine(0, 0, line0);
                mLcd.displayLine(1, 0, line1);
                mLcd.displayLine(2, 0, line2);
                mLcd.displayLine(3, 15, "4BACK");
            }

            void impl_3_2_SupplyAlgorithm()
            {
                auto &button = Button::getInstance();
                static int supplyAlgorithm = 0;    // MPPT+CC-CV va CC-CV Only

                mLcd.clearDisplay();
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");

                if (button.getLatestPressedButton() == Button::ButtonName::UP
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
                {
                    supplyAlgorithm = !supplyAlgorithm;
                }

                if (supplyAlgorithm == 0)
                {
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
                }
                else if (supplyAlgorithm == 1)
                {
                    mLcd.displayLine(1, 0, "CC-CV Only");
                }
                else
                {
                    mLcd.displayLine(1, 0, "Error");
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
                {
                    if (supplyAlgorithm == 0)
                    {
                        mLcd.displayLine(2, 0, "> MPPT+CC-CV");
                    }
                    else if (supplyAlgorithm == 1)
                    {
                        mLcd.displayLine(2, 0, "> CC-CV Only");
                    }
                    else
                    {
                        mLcd.displayLine(2, 0, "Error alogrithm");
                    }

                    // TODO: phai set va luu lai vao flash
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
            }

            void impl_3_2_ChargeMode()
            {
                auto &button = Button::getInstance();
                static int chargeMode = 0;    // PSU

                mLcd.clearDisplay();
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
                {
                    if (chargeMode == 0)
                    {
                        chargeMode = 3;
                    }
                    else
                    {
                        chargeMode--;
                    }
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
                {
                    if (chargeMode == 2)
                    {
                        chargeMode == 0;
                    }
                    else
                    {
                        chargeMode++;
                    }
                }

                if (chargeMode == 0)
                {
                    mLcd.displayLine(1, 0, "PSU");
                }
                else if (chargeMode == 1)
                {
                    mLcd.displayLine(1, 0, "Charger");
                }
                else if (chargeMode == 2)
                {
                    mLcd.displayLine(1, 0, "Inverter");
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
                {
                    if (chargeMode == 0)
                    {
                        mLcd.displayLine(2, 0, "PSU");
                    }
                    else if (chargeMode == 1)
                    {
                        mLcd.displayLine(2, 0, "Charger");
                    }
                    else if (chargeMode == 2)
                    {
                        mLcd.displayLine(2, 0, "Inverter");
                    }
                    else
                    {
                        mLcd.displayLine(2, 0, "Error mode");
                    }

                    // TODO: phai set va luu lai vao flash
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
            }

            void impl_3_2_MaxBatteryVolt()
            {

            }

            void impl_3_2_MinBatteryVolt()
            {

            }

            void impl_3_2_ChargingCurrent()
            {

            }

            void impl_3_2_CoolingFan()
            {

            }

            void impl_3_2_FanTriggerTemp()
            {

            }

            void impl_3_2_ShutdownTemp()
            {

            }

            void impl_3_2_AutoloadCfg()
            {

            }

            void impl_3_2_Backlight()
            {

            }

            void impl_3_2_FactoryReset()
            {

            }
#endif
        private:

            Callback mCallback;

            Lcd mLcd;    // lcd display monitor
    };

}    // namespace blib

#endif /* TESTLCD_H_ */
