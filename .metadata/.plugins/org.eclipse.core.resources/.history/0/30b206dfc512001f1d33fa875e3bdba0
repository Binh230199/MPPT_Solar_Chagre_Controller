/*
 * SystemManager.h
 *
 *  Created on: May 15, 2024
 *      Author: This PC
 */

#ifndef SYSTEMMANAGER_H_
#define SYSTEMMANAGER_H_

#include <string>

// Add design patterns template library
#include "Singleton.h"

// Add libraries
#include "Log.h"
#include "SerialMonitor.h"
#include "ChargeControl.h"
#include "Analog.h"
#include "Monitor.h"

// Add main header
#include "main.h"

namespace blib
{
    class SystemManager : public dp::Singleton<SystemManager>
    {
        public:
            SystemManager();
            virtual ~SystemManager();

        private:
            bool mMpptMode = true;    //
            bool mOutputMode = true;    // false: PSU mode, true: Charger mode
            bool mDisableFlashAutoLoad = false;    // false: PSU mode, true: Charger mode
            bool mEnablePPWM = true;    // true: enables predictive PWM, this accelerates regulation speed (only applicable for battery charging application)
            bool mEnableFan = true;    // true: Enable Cooling Fan
            bool mEnableLcd = true;    // true: Enable LCD display
            bool mEnableLcdBacklight = true;    // true: Enable LCD display's backlight
            bool mOverrideFan = false;    // true: fan always on, false: fan always off
            bool mEnableDynamicCooling = false;    // true: pwm cooling control, false: no use pwm control

            SerialMonitor::SerialLevel mSerialLevel = SerialMonitor::SerialLevel::SERIAL_LEVEL_1;

            int mPwmResolution = 11;          //  USER PARAMETER - PWM Bit Resolution 
            int mpwmFrequency = 39000;    //  USER PARAMETER - PWM Switching Frequency - Hz (For Buck)
            int mtemperatureFan = 60;    //  USER PARAMETER - Temperature threshold for fan to turn on
            int mtemperatureMax = 90;    //  USER PARAMETER - Overtemperature; System Shudown When Exceeded (deg C)
            int mtelemCounterReset = 0;    //  USER PARAMETER - Reset Telem Data Every (0 = Never; 1 = Day; 2 = Week; 3 = Month; 4 = Year) 
            int merrorTimeLimit = 1000;    //  USER PARAMETER - Time interval for reseting error counter (milliseconds)  
            int merrorCountLimit = 5;           //  USER PARAMETER - Maximum number of errors  
            int mmillisRoutineInterval = 250;    //  USER PARAMETER - Time Interval Refresh Rate For Routine Functions (ms)
            int mmillisSerialInterval = 1;    //  USER PARAMETER - Time Interval Refresh Rate For USB Serial Datafeed (ms)
            int mmillisLCDInterval = 1000;    //  USER PARAMETER - Time Interval Refresh Rate For LCD Display (ms)
            int mmillisWiFiInterval = 2000;    //  USER PARAMETER - Time Interval Refresh Rate For WiFi Telemetry (ms)
            int mmillisLCDBackLInterval = 2000;    //  USER PARAMETER - Time Interval Refresh Rate For WiFi Telemetry (ms)
            int mbacklightSleepMode = 0;    //  USER PARAMETER - 0 = Never; 1 = 10secs; 2 = 5mins; 3 = 1hr; 4 = 6 hrs; 5 = 12hrs; 6 = 1 day; 7 = 3 days; 8 = 1wk; 9 = 1month
            int mbaudRate = 500000;      //  USER PARAMETER - USB Serial Baud Rate (bps)
    };
}    // namespace blib

#endif /* SYSTEMMANAGER_H_ */
