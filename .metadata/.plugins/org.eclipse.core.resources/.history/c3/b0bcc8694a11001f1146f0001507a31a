/*
 * Monitor.h
 *
 *  Created on: May 13, 2024
 *      Author: This PC
 */

#ifndef MONITOR_H_
#define MONITOR_H_

#include <string>

// Add design patterns template library
#include "Singleton.h"
#include "StateMachineBase.h"

// Add log library
#include "Log.h"

namespace blib
{
    // Monitor is a derived state machine
    class Monitor : public blib::dp::Singleton<Monitor>
    {
        public:
            enum class DisplayLevel
            {
                DISPLAY_LEVEL_CONFIG_1 = 0,
                DISPLAY_LEVEL_CONFIG_1 = 1,
                DISPLAY_LEVEL_CONFIG_1 = 2,
                DISPLAY_LEVEL_CONFIG_1 = 3,
                DISPLAY_LEVEL_CONFIG_1 = 4,
                DISPLAY_LEVEL_CONFIG_1 = 5,
            };

            Monitor();
            virtual ~Monitor();

            void showMenu();
            void showInit();

            void setSettingMode(const bool val);
            bool getSetttingMode() const;

            void setSettingLevel(const uint8_t val);
            uint8_t getSettingLevel() const;

            void setDisplayLevel(const uint8_t val);
            uint8_t getDisplayLevel() const;
        private:
            void showDisplayLevel1();
            void showDisplayLevel2();
            void showDisplayLevel3();
            void showDisplayLevel4();
            void showScreenChooseSettingMode();

        private:
            bool mSettingMode = 0;    // 0 - display mode, 1 - setting mode
            uint8_t mSettingLevel = 0;    //
            uint8_t mDisplayLevel = 0;
    };

}

#endif /* MONITOR_H_ */
