
MPPT_Solar_Charge_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007164  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000714  080072f8  080072f8  000172f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a0c  08007a0c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08007a0c  08007a0c  00017a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a14  08007a14  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a14  08007a14  00017a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a18  08007a18  00017a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08007a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000007fc  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009d4  200009d4  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002ee16  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005b9a  00000000  00000000  0004f061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000c1fa  00000000  00000000  00054bfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012a0  00000000  00000000  00060df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001252  00000000  00000000  00062098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a54a  00000000  00000000  000632ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000271d7  00000000  00000000  0008d834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ed8f1  00000000  00000000  000b4a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004abc  00000000  00000000  001a22fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000078  00000000  00000000  001a6db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072dc 	.word	0x080072dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080072dc 	.word	0x080072dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <_ZN4blib6AnalogD1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
    {
        sampling();
    }

    Analog::~Analog()
 8000f44:	b510      	push	{r4, lr}
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <_ZN4blib6AnalogD1Ev+0x14>)
 8000f48:	6003      	str	r3, [r0, #0]
 8000f4a:	4604      	mov	r4, r0
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000f4c:	6980      	ldr	r0, [r0, #24]
 8000f4e:	f001 f9eb 	bl	8002328 <HAL_ADC_Stop_DMA>
    }
 8000f52:	4620      	mov	r0, r4
 8000f54:	bd10      	pop	{r4, pc}
 8000f56:	bf00      	nop
 8000f58:	08007318 	.word	0x08007318

08000f5c <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	4604      	mov	r4, r0
    }
 8000f60:	f7ff fff0 	bl	8000f44 <_ZN4blib6AnalogD1Ev>
 8000f64:	4620      	mov	r0, r4
 8000f66:	2134      	movs	r1, #52	; 0x34
 8000f68:	f003 faf6 	bl	8004558 <_ZdlPvj>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000f70:	1d01      	adds	r1, r0, #4
 8000f72:	2205      	movs	r2, #5
 8000f74:	6980      	ldr	r0, [r0, #24]
 8000f76:	f001 b929 	b.w	80021cc <HAL_ADC_Start_DMA>
	...

08000f7c <_ZN4blib6AnalogC1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_ZN4blib6AnalogC1Ev+0x24>)
 8000f80:	4604      	mov	r4, r0
 8000f82:	2214      	movs	r2, #20
 8000f84:	2100      	movs	r1, #0
 8000f86:	f840 3b04 	str.w	r3, [r0], #4
 8000f8a:	f004 f966 	bl	800525a <memset>
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <_ZN4blib6AnalogC1Ev+0x28>)
 8000f90:	61a3      	str	r3, [r4, #24]
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <_ZN4blib6AnalogC1Ev+0x2c>)
 8000f94:	61e3      	str	r3, [r4, #28]
        sampling();
 8000f96:	4620      	mov	r0, r4
 8000f98:	f7ff ffea 	bl	8000f70 <_ZN4blib6Analog8samplingEv>
    }
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	bd10      	pop	{r4, pc}
 8000fa0:	08007318 	.word	0x08007318
 8000fa4:	20000204 	.word	0x20000204
 8000fa8:	2000024c 	.word	0x2000024c

08000fac <_ZNK4blib6Analog6getSolarVoltageEv>:
    }

    float Analog::getSolarVoltage() const
    {
        return mVin;
    }
 8000fac:	ed90 0a08 	vldr	s0, [r0, #32]
 8000fb0:	4770      	bx	lr

08000fb2 <_ZNK4blib6Analog6getIinEv>:
    float Analog::getIin() const
    {
        return mIin;
    }
 8000fb2:	ed90 0a09 	vldr	s0, [r0, #36]	; 0x24
 8000fb6:	4770      	bx	lr

08000fb8 <_ZNK4blib6Analog7getVoutEv>:
    float Analog::getVout() const
    {
        return mVout;
    }
 8000fb8:	ed90 0a0a 	vldr	s0, [r0, #40]	; 0x28
 8000fbc:	4770      	bx	lr

08000fbe <_ZNK4blib6Analog7getIoutEv>:
    float Analog::getIout() const
    {
        return mIout;
    }
 8000fbe:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8000fc2:	4770      	bx	lr
 8000fc4:	0000      	movs	r0, r0
	...

08000fc8 <_ZN4blib6Analog18convertAdcChannel2Em>:
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
    }

    float Analog::convertAdcChannel2(uint32_t adcValue)    // Convert adcValue -> Iin
    {
        float voltage = CHANNEL_2_RATIO * ((float) adcValue / 4095) * 3.3;
 8000fc8:	ee07 1a90 	vmov	s15, r1
 8000fcc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001028 <_ZN4blib6Analog18convertAdcChannel2Em+0x60>
 8000fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    {
 8000fd4:	b508      	push	{r3, lr}
        float voltage = CHANNEL_2_RATIO * ((float) adcValue / 4095) * 3.3;
 8000fd6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fda:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8000fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe2:	ee17 0a90 	vmov	r0, s15
 8000fe6:	f7ff faaf 	bl	8000548 <__aeabi_f2d>
 8000fea:	a30b      	add	r3, pc, #44	; (adr r3, 8001018 <_ZN4blib6Analog18convertAdcChannel2Em+0x50>)
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	f7ff fb02 	bl	80005f8 <__aeabi_dmul>
 8000ff4:	f7ff fdd8 	bl	8000ba8 <__aeabi_d2f>
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <_ZN4blib6Analog18convertAdcChannel2Em+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff f942 	bl	8000288 <__aeabi_dsub>
 8001004:	a306      	add	r3, pc, #24	; (adr r3, 8001020 <_ZN4blib6Analog18convertAdcChannel2Em+0x58>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fc1f 	bl	800084c <__aeabi_ddiv>
 800100e:	f7ff fdcb 	bl	8000ba8 <__aeabi_d2f>

        return current;
    }
 8001012:	ee00 0a10 	vmov	s0, r0
 8001016:	bd08      	pop	{r3, pc}
 8001018:	66666666 	.word	0x66666666
 800101c:	400a6666 	.word	0x400a6666
 8001020:	a0000000 	.word	0xa0000000
 8001024:	3fb99999 	.word	0x3fb99999
 8001028:	457ff000 	.word	0x457ff000
 800102c:	40040000 	.word	0x40040000

08001030 <_ZN4blib6Analog18convertAdcChannel4Em>:
    {
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
    }
    float Analog::convertAdcChannel4(uint32_t adcValue)    // Convert adcValue -> Iout
    {
        float voltage = CHANNEL_4_RATIO * ((float) adcValue / 4095) * 3.3;
 8001030:	ee07 1a90 	vmov	s15, r1
 8001034:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001090 <_ZN4blib6Analog18convertAdcChannel4Em+0x60>
 8001038:	eef8 7a67 	vcvt.f32.u32	s15, s15
    {
 800103c:	b508      	push	{r3, lr}
        float voltage = CHANNEL_4_RATIO * ((float) adcValue / 4095) * 3.3;
 800103e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001042:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	ee17 0a90 	vmov	r0, s15
 800104e:	f7ff fa7b 	bl	8000548 <__aeabi_f2d>
 8001052:	a30b      	add	r3, pc, #44	; (adr r3, 8001080 <_ZN4blib6Analog18convertAdcChannel4Em+0x50>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff face 	bl	80005f8 <__aeabi_dmul>
 800105c:	f7ff fda4 	bl	8000ba8 <__aeabi_d2f>
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8001060:	f7ff fa72 	bl	8000548 <__aeabi_f2d>
 8001064:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <_ZN4blib6Analog18convertAdcChannel4Em+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	f7ff f90e 	bl	8000288 <__aeabi_dsub>
 800106c:	a306      	add	r3, pc, #24	; (adr r3, 8001088 <_ZN4blib6Analog18convertAdcChannel4Em+0x58>)
 800106e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001072:	f7ff fbeb 	bl	800084c <__aeabi_ddiv>
 8001076:	f7ff fd97 	bl	8000ba8 <__aeabi_d2f>

        return current;
    }
 800107a:	ee00 0a10 	vmov	s0, r0
 800107e:	bd08      	pop	{r3, pc}
 8001080:	66666666 	.word	0x66666666
 8001084:	400a6666 	.word	0x400a6666
 8001088:	a0000000 	.word	0xa0000000
 800108c:	3fb99999 	.word	0x3fb99999
 8001090:	457ff000 	.word	0x457ff000
 8001094:	40040000 	.word	0x40040000

08001098 <_ZN4blib6Analog10readAnalogEv>:
    {
 8001098:	b510      	push	{r4, lr}
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 800109a:	edd0 7a01 	vldr	s15, [r0, #4]
    {
 800109e:	ed2d 8b02 	vpush	{d8}
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 80010a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a6:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 8001150 <_ZN4blib6Analog10readAnalogEv+0xb8>
 80010aa:	ee87 7a88 	vdiv.f32	s14, s15, s16
    {
 80010ae:	4604      	mov	r4, r0
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 80010b0:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 80010b4:	ee67 7a28 	vmul.f32	s15, s14, s17
 80010b8:	ee17 0a90 	vmov	r0, s15
 80010bc:	f7ff fa44 	bl	8000548 <__aeabi_f2d>
 80010c0:	a321      	add	r3, pc, #132	; (adr r3, 8001148 <_ZN4blib6Analog10readAnalogEv+0xb0>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa97 	bl	80005f8 <__aeabi_dmul>
 80010ca:	f7ff fd6d 	bl	8000ba8 <__aeabi_d2f>
        mIin = convertAdcChannel2(mAdcValues[1]);
 80010ce:	68a1      	ldr	r1, [r4, #8]
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 80010d0:	6220      	str	r0, [r4, #32]
        mIin = convertAdcChannel2(mAdcValues[1]);
 80010d2:	4620      	mov	r0, r4
 80010d4:	f7ff ff78 	bl	8000fc8 <_ZN4blib6Analog18convertAdcChannel2Em>
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 80010d8:	edd4 7a03 	vldr	s15, [r4, #12]
        mIin = convertAdcChannel2(mAdcValues[1]);
 80010dc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 80010e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 80010e8:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80010ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f0:	ee17 0a90 	vmov	r0, s15
 80010f4:	f7ff fa28 	bl	8000548 <__aeabi_f2d>
 80010f8:	a313      	add	r3, pc, #76	; (adr r3, 8001148 <_ZN4blib6Analog10readAnalogEv+0xb0>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff fa7b 	bl	80005f8 <__aeabi_dmul>
 8001102:	f7ff fd51 	bl	8000ba8 <__aeabi_d2f>
        mIout = convertAdcChannel4(mAdcValues[3]);
 8001106:	6921      	ldr	r1, [r4, #16]
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 8001108:	62a0      	str	r0, [r4, #40]	; 0x28
        mIout = convertAdcChannel4(mAdcValues[3]);
 800110a:	4620      	mov	r0, r4
 800110c:	f7ff ff90 	bl	8001030 <_ZN4blib6Analog18convertAdcChannel4Em>
    float Analog::convertAdcChannel5(uint32_t adcValue)    // Convert adcValue -> Temperature NTC 10k
    {
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 8001110:	edd4 7a05 	vldr	s15, [r4, #20]
        mIout = convertAdcChannel4(mAdcValues[3]);
 8001114:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 8001118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800111c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8001120:	ee67 7a28 	vmul.f32	s15, s14, s17
 8001124:	ee17 0a90 	vmov	r0, s15
 8001128:	f7ff fa0e 	bl	8000548 <__aeabi_f2d>
 800112c:	a306      	add	r3, pc, #24	; (adr r3, 8001148 <_ZN4blib6Analog10readAnalogEv+0xb0>)
 800112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001132:	f7ff fa61 	bl	80005f8 <__aeabi_dmul>
 8001136:	f7ff fd37 	bl	8000ba8 <__aeabi_d2f>
    }
 800113a:	ecbd 8b02 	vpop	{d8}
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 800113e:	6320      	str	r0, [r4, #48]	; 0x30
    }
 8001140:	bd10      	pop	{r4, pc}
 8001142:	bf00      	nop
 8001144:	f3af 8000 	nop.w
 8001148:	66666666 	.word	0x66666666
 800114c:	400a6666 	.word	0x400a6666
 8001150:	457ff000 	.word	0x457ff000

08001154 <_ZN4blib13ChargeControlD1Ev>:

    }
    ChargeControl::~ChargeControl()
    {

    }
 8001154:	4770      	bx	lr

08001156 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 8001156:	b510      	push	{r4, lr}
    }
 8001158:	210c      	movs	r1, #12
    ChargeControl::~ChargeControl()
 800115a:	4604      	mov	r4, r0
    }
 800115c:	f003 f9fc 	bl	8004558 <_ZdlPvj>
 8001160:	4620      	mov	r0, r4
 8001162:	bd10      	pop	{r4, pc}

08001164 <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8001164:	b507      	push	{r0, r1, r2, lr}
 8001166:	9001      	str	r0, [sp, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8001168:	f7ff f882 	bl	8000270 <strlen>
 800116c:	b282      	uxth	r2, r0
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <_ZN4blib6Logger5printEPKc+0x20>)
 8001170:	9901      	ldr	r1, [sp, #4]
 8001172:	6800      	ldr	r0, [r0, #0]
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            }
 8001178:	b003      	add	sp, #12
 800117a:	f85d eb04 	ldr.w	lr, [sp], #4
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 800117e:	f003 b8b9 	b.w	80042f4 <HAL_UART_Transmit>
 8001182:	bf00      	nop
 8001184:	2000000c 	.word	0x2000000c

08001188 <_ZN4blib13ChargeControlC1Ev>:
    ChargeControl::ChargeControl()
 8001188:	4a02      	ldr	r2, [pc, #8]	; (8001194 <_ZN4blib13ChargeControlC1Ev+0xc>)
 800118a:	6002      	str	r2, [r0, #0]
 800118c:	2200      	movs	r2, #0
 800118e:	8082      	strh	r2, [r0, #4]
    }
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	08007330 	.word	0x08007330

08001198 <_ZN4blib13ChargeControl3runEv>:
    void ChargeControl::run()
    {

    }
 8001198:	4770      	bx	lr
	...

0800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 800119c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 80011a0:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80011e0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>
            static void Log(const char *message, Args ... args)
 80011a4:	460d      	mov	r5, r1
 80011a6:	4616      	mov	r6, r2
 80011a8:	461f      	mov	r7, r3
 80011aa:	4604      	mov	r4, r0
                print("[>]  ");
 80011ac:	480a      	ldr	r0, [pc, #40]	; (80011d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x3c>)
 80011ae:	f7ff ffd9 	bl	8001164 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 80011b2:	462b      	mov	r3, r5
 80011b4:	4622      	mov	r2, r4
 80011b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ba:	e9cd 6700 	strd	r6, r7, [sp]
 80011be:	4640      	mov	r0, r8
 80011c0:	f003 ffd4 	bl	800516c <sniprintf>
                print(mBuffer);
 80011c4:	4640      	mov	r0, r8
 80011c6:	f7ff ffcd 	bl	8001164 <_ZN4blib6Logger5printEPKc>
                print("\n");
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 80011cc:	f7ff ffca 	bl	8001164 <_ZN4blib6Logger5printEPKc>
            }
 80011d0:	b002      	add	sp, #8
 80011d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011d6:	bf00      	nop
 80011d8:	08007320 	.word	0x08007320
 80011dc:	08007907 	.word	0x08007907
 80011e0:	20000484 	.word	0x20000484

080011e4 <_ZN4blib7Monitor16isNeedRefreshLcdEv>:
        }
    }

    Monitor::ScreenLevel Monitor::getScreenLevel() const
    {
        return mScreenLevel;
 80011e4:	6843      	ldr	r3, [r0, #4]
    bool Monitor::isNeedRefreshLcd()
    {
        static ScreenLevel lastScreenLevel = ScreenLevel::HOME_SCREEN;
        static uint8_t lastArrLine = 0;

        if (lastScreenLevel != getScreenLevel() || lastArrLine != getArrowLine())
 80011e6:	b923      	cbnz	r3, 80011f2 <_ZN4blib7Monitor16isNeedRefreshLcdEv+0xe>
        return mArrowLine;
 80011e8:	7a40      	ldrb	r0, [r0, #9]
        if (lastScreenLevel != getScreenLevel() || lastArrLine != getArrowLine())
 80011ea:	3800      	subs	r0, #0
 80011ec:	bf18      	it	ne
 80011ee:	2001      	movne	r0, #1
 80011f0:	4770      	bx	lr
        {
            return true;
 80011f2:	2001      	movs	r0, #1
        }

        return false;
    }
 80011f4:	4770      	bx	lr
	...

080011f8 <_ZN4blib7Monitor9showArrowEv>:
    void Monitor::showArrow()
    {
        mLcdDisplay.displayLine(mArrowLine, 0, ">");
 80011f8:	7a41      	ldrb	r1, [r0, #9]
 80011fa:	4b02      	ldr	r3, [pc, #8]	; (8001204 <_ZN4blib7Monitor9showArrowEv+0xc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	3014      	adds	r0, #20
 8001200:	f003 b915 	b.w	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
 8001204:	08007338 	.word	0x08007338

08001208 <_ZN4blib7Monitor10menuScreenEv>:
    {
 8001208:	b513      	push	{r0, r1, r4, lr}
 800120a:	4604      	mov	r4, r0
        if (isNeedRefreshLcd())
 800120c:	f7ff ffea 	bl	80011e4 <_ZN4blib7Monitor16isNeedRefreshLcdEv>
 8001210:	b310      	cbz	r0, 8001258 <_ZN4blib7Monitor10menuScreenEv+0x50>
            mLcdDisplay.clearDisplay();
 8001212:	f104 0014 	add.w	r0, r4, #20
 8001216:	9001      	str	r0, [sp, #4]
 8001218:	f003 f931 	bl	800447e <_ZN4blib3Lcd12clearDisplayEv>
            mLcdDisplay.displayLine(0, 1, "DISPLAY MODE");
 800121c:	9801      	ldr	r0, [sp, #4]
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <_ZN4blib7Monitor10menuScreenEv+0x54>)
 8001220:	2201      	movs	r2, #1
 8001222:	2100      	movs	r1, #0
 8001224:	f003 f903 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
            mLcdDisplay.displayLine(1, 1, "SETTING MODE");
 8001228:	2201      	movs	r2, #1
 800122a:	9801      	ldr	r0, [sp, #4]
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <_ZN4blib7Monitor10menuScreenEv+0x58>)
 800122e:	4611      	mov	r1, r2
 8001230:	f003 f8fd 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
            mLcdDisplay.displayLine(2, 1, "ABOUT");
 8001234:	9801      	ldr	r0, [sp, #4]
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <_ZN4blib7Monitor10menuScreenEv+0x5c>)
 8001238:	2201      	movs	r2, #1
 800123a:	2102      	movs	r1, #2
 800123c:	f003 f8f7 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
            mLcdDisplay.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
 8001240:	9801      	ldr	r0, [sp, #4]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <_ZN4blib7Monitor10menuScreenEv+0x60>)
 8001244:	2201      	movs	r2, #1
 8001246:	2103      	movs	r1, #3
 8001248:	f003 f8f1 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
            showArrow();
 800124c:	4620      	mov	r0, r4
    }
 800124e:	b002      	add	sp, #8
 8001250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            showArrow();
 8001254:	f7ff bfd0 	b.w	80011f8 <_ZN4blib7Monitor9showArrowEv>
    }
 8001258:	b002      	add	sp, #8
 800125a:	bd10      	pop	{r4, pc}
 800125c:	0800733a 	.word	0x0800733a
 8001260:	08007347 	.word	0x08007347
 8001264:	08007354 	.word	0x08007354
 8001268:	0800735a 	.word	0x0800735a

0800126c <_ZN4blib7Monitor8showInitEv>:
    {
 800126c:	b513      	push	{r0, r1, r4, lr}
        LOGI();
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <_ZN4blib7Monitor8showInitEv+0x50>)
 8001270:	4913      	ldr	r1, [pc, #76]	; (80012c0 <_ZN4blib7Monitor8showInitEv+0x54>)
    {
 8001272:	4604      	mov	r4, r0
        LOGI();
 8001274:	221b      	movs	r2, #27
 8001276:	4813      	ldr	r0, [pc, #76]	; (80012c4 <_ZN4blib7Monitor8showInitEv+0x58>)
 8001278:	f7ff ff90 	bl	800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        mLcdDisplay.clearDisplay();
 800127c:	f104 0014 	add.w	r0, r4, #20
 8001280:	9001      	str	r0, [sp, #4]
 8001282:	f003 f8fc 	bl	800447e <_ZN4blib3Lcd12clearDisplayEv>
        mLcdDisplay.displayLine(0, 2, "DO AN TOT NGHIEP");
 8001286:	9801      	ldr	r0, [sp, #4]
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <_ZN4blib7Monitor8showInitEv+0x5c>)
 800128a:	2202      	movs	r2, #2
 800128c:	2100      	movs	r1, #0
 800128e:	f003 f8ce 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(1, 2, "NAM HOC: 2023-2024");
 8001292:	9801      	ldr	r0, [sp, #4]
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <_ZN4blib7Monitor8showInitEv+0x60>)
 8001296:	2202      	movs	r2, #2
 8001298:	2101      	movs	r1, #1
 800129a:	f003 f8c8 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(2, 2, "LOP: DTD61DH");
 800129e:	2202      	movs	r2, #2
 80012a0:	9801      	ldr	r0, [sp, #4]
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <_ZN4blib7Monitor8showInitEv+0x64>)
 80012a4:	4611      	mov	r1, r2
 80012a6:	f003 f8c2 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(3, 1, "DAI HOC HANG HAI VN");
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <_ZN4blib7Monitor8showInitEv+0x68>)
 80012ac:	9801      	ldr	r0, [sp, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	2103      	movs	r1, #3
    }
 80012b2:	b002      	add	sp, #8
 80012b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mLcdDisplay.displayLine(3, 1, "DAI HOC HANG HAI VN");
 80012b8:	f003 b8b9 	b.w	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
 80012bc:	0800736f 	.word	0x0800736f
 80012c0:	08007417 	.word	0x08007417
 80012c4:	08007378 	.word	0x08007378
 80012c8:	08007386 	.word	0x08007386
 80012cc:	08007397 	.word	0x08007397
 80012d0:	080073aa 	.word	0x080073aa
 80012d4:	080073b7 	.word	0x080073b7

080012d8 <_ZN4blib7MonitorC1Ev>:
    Monitor::Monitor() : mLcdDisplay(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 80012d8:	b510      	push	{r4, lr}
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <_ZN4blib7MonitorC1Ev+0x34>)
 80012dc:	6003      	str	r3, [r0, #0]
 80012de:	2300      	movs	r3, #0
 80012e0:	6043      	str	r3, [r0, #4]
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <_ZN4blib7MonitorC1Ev+0x38>)
 80012e4:	7203      	strb	r3, [r0, #8]
 80012e6:	4604      	mov	r4, r0
 80012e8:	7243      	strb	r3, [r0, #9]
 80012ea:	2101      	movs	r1, #1
 80012ec:	60c3      	str	r3, [r0, #12]
 80012ee:	6103      	str	r3, [r0, #16]
 80012f0:	234e      	movs	r3, #78	; 0x4e
 80012f2:	3014      	adds	r0, #20
 80012f4:	f003 f922 	bl	800453c <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh>
        showInit();
 80012f8:	4620      	mov	r0, r4
 80012fa:	f7ff ffb7 	bl	800126c <_ZN4blib7Monitor8showInitEv>
        HAL_Delay(1500);
 80012fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001302:	f000 fea9 	bl	8002058 <HAL_Delay>
    }
 8001306:	4620      	mov	r0, r4
 8001308:	bd10      	pop	{r4, pc}
 800130a:	bf00      	nop
 800130c:	080073fc 	.word	0x080073fc
 8001310:	200002ac 	.word	0x200002ac

08001314 <_ZN4blib7Monitor10homeScreenEv>:
    {
 8001314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001318:	ed2d 8b02 	vpush	{d8}
        char line0[COL] = { 0 };
 800131c:	2400      	movs	r4, #0
    {
 800131e:	b0a0      	sub	sp, #128	; 0x80
        LOGI();
 8001320:	4b57      	ldr	r3, [pc, #348]	; (8001480 <_ZN4blib7Monitor10homeScreenEv+0x16c>)
 8001322:	4958      	ldr	r1, [pc, #352]	; (8001484 <_ZN4blib7Monitor10homeScreenEv+0x170>)
 8001324:	2225      	movs	r2, #37	; 0x25
    {
 8001326:	4605      	mov	r5, r0
        LOGI();
 8001328:	4857      	ldr	r0, [pc, #348]	; (8001488 <_ZN4blib7Monitor10homeScreenEv+0x174>)
 800132a:	f7ff ff37 	bl	800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        char line0[COL] = { 0 };
 800132e:	2211      	movs	r2, #17
 8001330:	4621      	mov	r1, r4
 8001332:	a809      	add	r0, sp, #36	; 0x24
 8001334:	9408      	str	r4, [sp, #32]
 8001336:	f003 ff90 	bl	800525a <memset>
        char line1[COL] = { 0 };
 800133a:	2211      	movs	r2, #17
 800133c:	4621      	mov	r1, r4
 800133e:	a80f      	add	r0, sp, #60	; 0x3c
 8001340:	940e      	str	r4, [sp, #56]	; 0x38
 8001342:	f003 ff8a 	bl	800525a <memset>
        char line2[COL] = { 0 };
 8001346:	2211      	movs	r2, #17
 8001348:	4621      	mov	r1, r4
 800134a:	a815      	add	r0, sp, #84	; 0x54
 800134c:	9414      	str	r4, [sp, #80]	; 0x50
 800134e:	f003 ff84 	bl	800525a <memset>
        char line3[COL] = "Press any button";
 8001352:	4b4e      	ldr	r3, [pc, #312]	; (800148c <_ZN4blib7Monitor10homeScreenEv+0x178>)
 8001354:	aa1a      	add	r2, sp, #104	; 0x68
 8001356:	f103 0610 	add.w	r6, r3, #16
 800135a:	4617      	mov	r7, r2
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	6859      	ldr	r1, [r3, #4]
 8001360:	4614      	mov	r4, r2
 8001362:	c403      	stmia	r4!, {r0, r1}
 8001364:	3308      	adds	r3, #8
 8001366:	42b3      	cmp	r3, r6
 8001368:	4622      	mov	r2, r4
 800136a:	d1f7      	bne.n	800135c <_ZN4blib7Monitor10homeScreenEv+0x48>
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	7023      	strb	r3, [r4, #0]
        class Singleton
        {
            public:
                static T& getInstance()
                {
                    if (mInstance == nullptr)
 8001370:	4c47      	ldr	r4, [pc, #284]	; (8001490 <_ZN4blib7Monitor10homeScreenEv+0x17c>)
 8001372:	2300      	movs	r3, #0
 8001374:	f8cd 3079 	str.w	r3, [sp, #121]	; 0x79
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	b933      	cbnz	r3, 800138a <_ZN4blib7Monitor10homeScreenEv+0x76>
                    {
                        mInstance = new T();
 800137c:	2034      	movs	r0, #52	; 0x34
 800137e:	f003 f8ed 	bl	800455c <_Znwj>
 8001382:	4606      	mov	r6, r0
 8001384:	f7ff fdfa 	bl	8000f7c <_ZN4blib6AnalogC1Ev>
 8001388:	6026      	str	r6, [r4, #0]
                    }

                    return *mInstance;
 800138a:	6824      	ldr	r4, [r4, #0]
        snprintf(line0, COL, "%02.1fV %02.1fA %02.1fW", analog.getSolarVoltage(), analog.getIin(),
 800138c:	4620      	mov	r0, r4
 800138e:	f7ff fe0d 	bl	8000fac <_ZNK4blib6Analog6getSolarVoltageEv>
 8001392:	4620      	mov	r0, r4
 8001394:	ee10 6a10 	vmov	r6, s0
 8001398:	f7ff fe0b 	bl	8000fb2 <_ZNK4blib6Analog6getIinEv>
                analog.getSolarVoltage() * analog.getIin());
 800139c:	4620      	mov	r0, r4
        snprintf(line0, COL, "%02.1fV %02.1fA %02.1fW", analog.getSolarVoltage(), analog.getIin(),
 800139e:	ee10 8a10 	vmov	r8, s0
                analog.getSolarVoltage() * analog.getIin());
 80013a2:	f7ff fe03 	bl	8000fac <_ZNK4blib6Analog6getSolarVoltageEv>
 80013a6:	4620      	mov	r0, r4
 80013a8:	eeb0 8a40 	vmov.f32	s16, s0
 80013ac:	f7ff fe01 	bl	8000fb2 <_ZNK4blib6Analog6getIinEv>
        snprintf(line0, COL, "%02.1fV %02.1fA %02.1fW", analog.getSolarVoltage(), analog.getIin(),
 80013b0:	ee68 7a00 	vmul.f32	s15, s16, s0
 80013b4:	ee17 0a90 	vmov	r0, s15
 80013b8:	f7ff f8c6 	bl	8000548 <__aeabi_f2d>
 80013bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013c0:	4640      	mov	r0, r8
 80013c2:	f7ff f8c1 	bl	8000548 <__aeabi_f2d>
 80013c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013ca:	4630      	mov	r0, r6
 80013cc:	f7ff f8bc 	bl	8000548 <__aeabi_f2d>
 80013d0:	4a30      	ldr	r2, [pc, #192]	; (8001494 <_ZN4blib7Monitor10homeScreenEv+0x180>)
 80013d2:	e9cd 0100 	strd	r0, r1, [sp]
 80013d6:	2115      	movs	r1, #21
 80013d8:	a808      	add	r0, sp, #32
 80013da:	f003 fec7 	bl	800516c <sniprintf>
        snprintf(line1, COL, "%02.1fV %02.1fA %02.1fW", analog.getVout(), analog.getIout(),
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff fdea 	bl	8000fb8 <_ZNK4blib6Analog7getVoutEv>
 80013e4:	4620      	mov	r0, r4
 80013e6:	ee10 6a10 	vmov	r6, s0
 80013ea:	f7ff fde8 	bl	8000fbe <_ZNK4blib6Analog7getIoutEv>
                analog.getVout() * analog.getIout());
 80013ee:	4620      	mov	r0, r4
        snprintf(line1, COL, "%02.1fV %02.1fA %02.1fW", analog.getVout(), analog.getIout(),
 80013f0:	ee10 8a10 	vmov	r8, s0
                analog.getVout() * analog.getIout());
 80013f4:	f7ff fde0 	bl	8000fb8 <_ZNK4blib6Analog7getVoutEv>
 80013f8:	4620      	mov	r0, r4
 80013fa:	eeb0 8a40 	vmov.f32	s16, s0
 80013fe:	f7ff fdde 	bl	8000fbe <_ZNK4blib6Analog7getIoutEv>
        snprintf(line1, COL, "%02.1fV %02.1fA %02.1fW", analog.getVout(), analog.getIout(),
 8001402:	ee68 7a00 	vmul.f32	s15, s16, s0
 8001406:	ee17 0a90 	vmov	r0, s15
 800140a:	f7ff f89d 	bl	8000548 <__aeabi_f2d>
 800140e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001412:	4640      	mov	r0, r8
 8001414:	f7ff f898 	bl	8000548 <__aeabi_f2d>
 8001418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800141c:	4630      	mov	r0, r6
 800141e:	f7ff f893 	bl	8000548 <__aeabi_f2d>
 8001422:	4a1c      	ldr	r2, [pc, #112]	; (8001494 <_ZN4blib7Monitor10homeScreenEv+0x180>)
 8001424:	e9cd 0100 	strd	r0, r1, [sp]
 8001428:	2115      	movs	r1, #21
 800142a:	a80e      	add	r0, sp, #56	; 0x38
 800142c:	f003 fe9e 	bl	800516c <sniprintf>
        snprintf(line2, COL, "%d", 1);
 8001430:	4a19      	ldr	r2, [pc, #100]	; (8001498 <_ZN4blib7Monitor10homeScreenEv+0x184>)
 8001432:	2301      	movs	r3, #1
 8001434:	2115      	movs	r1, #21
 8001436:	a814      	add	r0, sp, #80	; 0x50
 8001438:	f003 fe98 	bl	800516c <sniprintf>
        mLcdDisplay.clearDisplay();
 800143c:	f105 0014 	add.w	r0, r5, #20
 8001440:	9007      	str	r0, [sp, #28]
 8001442:	f003 f81c 	bl	800447e <_ZN4blib3Lcd12clearDisplayEv>
        mLcdDisplay.displayLine(0, 2, line0);
 8001446:	9807      	ldr	r0, [sp, #28]
 8001448:	ab08      	add	r3, sp, #32
 800144a:	2202      	movs	r2, #2
 800144c:	2100      	movs	r1, #0
 800144e:	f002 ffee 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(1, 2, line1);
 8001452:	9807      	ldr	r0, [sp, #28]
 8001454:	ab0e      	add	r3, sp, #56	; 0x38
 8001456:	2202      	movs	r2, #2
 8001458:	2101      	movs	r1, #1
 800145a:	f002 ffe8 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(2, 2, line2);
 800145e:	2202      	movs	r2, #2
 8001460:	9807      	ldr	r0, [sp, #28]
 8001462:	ab14      	add	r3, sp, #80	; 0x50
 8001464:	4611      	mov	r1, r2
 8001466:	f002 ffe2 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(3, 1, line3);
 800146a:	9807      	ldr	r0, [sp, #28]
 800146c:	463b      	mov	r3, r7
 800146e:	2201      	movs	r2, #1
 8001470:	2103      	movs	r1, #3
 8001472:	f002 ffdc 	bl	800442e <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 8001476:	b020      	add	sp, #128	; 0x80
 8001478:	ecbd 8b02 	vpop	{d8}
 800147c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001480:	080073cb 	.word	0x080073cb
 8001484:	08007417 	.word	0x08007417
 8001488:	08007378 	.word	0x08007378
 800148c:	080072f8 	.word	0x080072f8
 8001490:	200001f4 	.word	0x200001f4
 8001494:	080073d6 	.word	0x080073d6
 8001498:	080073ee 	.word	0x080073ee

0800149c <_ZN4blib7Monitor8showMenuEv>:
        if (mScreenLevel == Monitor::ScreenLevel::HOME_SCREEN)
 800149c:	6842      	ldr	r2, [r0, #4]
 800149e:	b90a      	cbnz	r2, 80014a4 <_ZN4blib7Monitor8showMenuEv+0x8>
            homeScreen();
 80014a0:	f7ff bf38 	b.w	8001314 <_ZN4blib7Monitor10homeScreenEv>
        else if (mScreenLevel == Monitor::ScreenLevel::MENUS)
 80014a4:	6843      	ldr	r3, [r0, #4]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <_ZN4blib7Monitor8showMenuEv+0x12>
            menuScreen();
 80014aa:	f7ff bead 	b.w	8001208 <_ZN4blib7Monitor10menuScreenEv>
    }
 80014ae:	4770      	bx	lr

080014b0 <_ZN4blib7MonitorD1Ev>:
    Monitor::~Monitor()
 80014b0:	b510      	push	{r4, lr}
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <_ZN4blib7MonitorD1Ev+0x14>)
 80014b4:	4604      	mov	r4, r0
 80014b6:	f840 3b14 	str.w	r3, [r0], #20
 80014ba:	f002 ff70 	bl	800439e <_ZN4blib3LcdD1Ev>
    }
 80014be:	4620      	mov	r0, r4
 80014c0:	bd10      	pop	{r4, pc}
 80014c2:	bf00      	nop
 80014c4:	080073fc 	.word	0x080073fc

080014c8 <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 80014c8:	b510      	push	{r4, lr}
 80014ca:	4604      	mov	r4, r0
    }
 80014cc:	f7ff fff0 	bl	80014b0 <_ZN4blib7MonitorD1Ev>
 80014d0:	4620      	mov	r0, r4
 80014d2:	2128      	movs	r1, #40	; 0x28
 80014d4:	f003 f840 	bl	8004558 <_ZdlPvj>
 80014d8:	4620      	mov	r0, r4
 80014da:	bd10      	pop	{r4, pc}

080014dc <_ZN4blib13SerialMonitorD1Ev>:
        setSerialLevel(SerialLevel::SERIAL_LEVEL_1);    // TODO: test
    }
    SerialMonitor::~SerialMonitor()
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_0);
    }
 80014dc:	4770      	bx	lr

080014de <_ZN4blib13SerialMonitorD0Ev>:
    SerialMonitor::~SerialMonitor()
 80014de:	b510      	push	{r4, lr}
    }
 80014e0:	2108      	movs	r1, #8
    SerialMonitor::~SerialMonitor()
 80014e2:	4604      	mov	r4, r0
    }
 80014e4:	f003 f838 	bl	8004558 <_ZdlPvj>
 80014e8:	4620      	mov	r0, r4
 80014ea:	bd10      	pop	{r4, pc}

080014ec <_ZN4blib13SerialMonitorC1Ev>:
    SerialMonitor::SerialMonitor()
 80014ec:	4a02      	ldr	r2, [pc, #8]	; (80014f8 <_ZN4blib13SerialMonitorC1Ev+0xc>)
 80014ee:	6002      	str	r2, [r0, #0]
        else if (u8SerialLevel >= (uint8_t) SerialLevel::SERIAL_LEVEL_MAX)
        {
            u8SerialLevel = 0;
        }

        mSerialLevel = (SerialLevel) u8SerialLevel;
 80014f0:	2201      	movs	r2, #1
 80014f2:	6042      	str	r2, [r0, #4]
    }
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	08007540 	.word	0x08007540

080014fc <_ZN4blib13SerialMonitor12serialLevel1Ev>:
    {
        return mSerialLevel;
    }

    void SerialMonitor::serialLevel1()
    {
 80014fc:	b508      	push	{r3, lr}
        LOGI(
 80014fe:	4903      	ldr	r1, [pc, #12]	; (800150c <_ZN4blib13SerialMonitor12serialLevel1Ev+0x10>)
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x14>)
 8001502:	4804      	ldr	r0, [pc, #16]	; (8001514 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x18>)
 8001504:	2242      	movs	r2, #66	; 0x42
 8001506:	f7ff fe49 	bl	800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " ERR:" " FLV:" " BNC:" " IUV:" " IOC:" " OOV:" " OOC:" " OTE:" " REC:" " MPPTA:" " CM:"

                " " " BYP:" " EN:" " FAN:" " WiFi:" " " " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " " " CSMPV:" " CSV:" " VO%Dev:" " SOC:" " T:" " LoopT:");
    }
 800150a:	bd08      	pop	{r3, pc}
 800150c:	08007411 	.word	0x08007411
 8001510:	08007404 	.word	0x08007404
 8001514:	08007423 	.word	0x08007423

08001518 <_ZN4blib13SerialMonitor12serialLevel2Ev>:
    void SerialMonitor::serialLevel2()
    {
 8001518:	b508      	push	{r3, lr}
        LOGI(
 800151a:	4903      	ldr	r1, [pc, #12]	; (8001528 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x10>)
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <_ZN4blib13SerialMonitor12serialLevel2Ev+0x14>)
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x18>)
 8001520:	2249      	movs	r2, #73	; 0x49
 8001522:	f7ff fe3b 	bl	800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " EN:" " FAN:" " SOC:" " T:" " LoopT:" "");
    }
 8001526:	bd08      	pop	{r3, pc}
 8001528:	08007411 	.word	0x08007411
 800152c:	080074cc 	.word	0x080074cc
 8001530:	080074d9 	.word	0x080074d9

08001534 <_ZN4blib13SerialMonitor12serialLevel3Ev>:
    void SerialMonitor::serialLevel3()
    {
 8001534:	b508      	push	{r3, lr}
        LOGI();
 8001536:	4903      	ldr	r1, [pc, #12]	; (8001544 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x10>)
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x14>)
 800153a:	4804      	ldr	r0, [pc, #16]	; (800154c <_ZN4blib13SerialMonitor12serialLevel3Ev+0x18>)
 800153c:	224e      	movs	r2, #78	; 0x4e
 800153e:	f7ff fe2d 	bl	800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001542:	bd08      	pop	{r3, pc}
 8001544:	08007411 	.word	0x08007411
 8001548:	08007528 	.word	0x08007528
 800154c:	08007378 	.word	0x08007378

08001550 <_ZN4blib13SerialMonitor4showEv>:
        return mSerialLevel;
 8001550:	6843      	ldr	r3, [r0, #4]
        switch (getSerialLevel())
 8001552:	2b02      	cmp	r3, #2
 8001554:	d005      	beq.n	8001562 <_ZN4blib13SerialMonitor4showEv+0x12>
 8001556:	2b03      	cmp	r3, #3
 8001558:	d005      	beq.n	8001566 <_ZN4blib13SerialMonitor4showEv+0x16>
 800155a:	2b01      	cmp	r3, #1
 800155c:	d105      	bne.n	800156a <_ZN4blib13SerialMonitor4showEv+0x1a>
                serialLevel1();
 800155e:	f7ff bfcd 	b.w	80014fc <_ZN4blib13SerialMonitor12serialLevel1Ev>
                serialLevel2();
 8001562:	f7ff bfd9 	b.w	8001518 <_ZN4blib13SerialMonitor12serialLevel2Ev>
                serialLevel3();
 8001566:	f7ff bfe5 	b.w	8001534 <_ZN4blib13SerialMonitor12serialLevel3Ev>
    }
 800156a:	4770      	bx	lr

0800156c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800156c:	b510      	push	{r4, lr}
 800156e:	b094      	sub	sp, #80	; 0x50
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001570:	2214      	movs	r2, #20
 8001572:	2100      	movs	r1, #0
 8001574:	a809      	add	r0, sp, #36	; 0x24
 8001576:	f003 fe70 	bl	800525a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800157a:	2214      	movs	r2, #20
 800157c:	2100      	movs	r1, #0
 800157e:	a803      	add	r0, sp, #12
 8001580:	f003 fe6b 	bl	800525a <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	4a20      	ldr	r2, [pc, #128]	; (8001608 <_Z18SystemClock_Configv+0x9c>)
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800158c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001590:	6411      	str	r1, [r2, #64]	; 0x40
 8001592:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001594:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001598:	9201      	str	r2, [sp, #4]
 800159a:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <_Z18SystemClock_Configv+0xa0>)
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	6811      	ldr	r1, [r2, #0]
 80015a2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80015a6:	6011      	str	r1, [r2, #0]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015ae:	9202      	str	r2, [sp, #8]
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b0:	2402      	movs	r4, #2
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b2:	9a02      	ldr	r2, [sp, #8]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 100;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b4:	9412      	str	r4, [sp, #72]	; 0x48
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 80015b6:	2206      	movs	r2, #6
    RCC_OscInitStruct.PLL.PLLN = 100;
 80015b8:	2008      	movs	r0, #8
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ba:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE;
 80015be:	9208      	str	r2, [sp, #32]
    RCC_OscInitStruct.PLL.PLLN = 100;
 80015c0:	2364      	movs	r3, #100	; 0x64
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015c2:	2201      	movs	r2, #1
    RCC_OscInitStruct.PLL.PLLN = 100;
 80015c4:	e9cd 0310 	strd	r0, r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c8:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80015cc:	2304      	movs	r3, #4
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015ce:	2210      	movs	r2, #16
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d2:	920c      	str	r2, [sp, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d4:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f001 fd1d 	bl	8003014 <HAL_RCC_OscConfig>
 80015da:	b108      	cbz	r0, 80015e0 <_Z18SystemClock_Configv+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80015de:	e7fe      	b.n	80015de <_Z18SystemClock_Configv+0x72>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80015e0:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e2:	e9cd 3403 	strd	r3, r4, [sp, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	9005      	str	r0, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015e8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015f0:	2103      	movs	r1, #3
 80015f2:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80015f8:	f001 fee6 	bl	80033c8 <HAL_RCC_ClockConfig>
 80015fc:	b108      	cbz	r0, 8001602 <_Z18SystemClock_Configv+0x96>
 80015fe:	b672      	cpsid	i
    while (1)
 8001600:	e7fe      	b.n	8001600 <_Z18SystemClock_Configv+0x94>
}
 8001602:	b014      	add	sp, #80	; 0x50
 8001604:	bd10      	pop	{r4, pc}
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <Error_Handler>:
 8001610:	b672      	cpsid	i
    while (1)
 8001612:	e7fe      	b.n	8001612 <Error_Handler+0x2>

08001614 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 8001614:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 8001616:	4c06      	ldr	r4, [pc, #24]	; (8001630 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x1c>)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	b933      	cbnz	r3, 800162a <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x16>
                        mInstance = new T();
 800161c:	2034      	movs	r0, #52	; 0x34
 800161e:	f002 ff9d 	bl	800455c <_Znwj>
 8001622:	4605      	mov	r5, r0
 8001624:	f7ff fcaa 	bl	8000f7c <_ZN4blib6AnalogC1Ev>
 8001628:	6025      	str	r5, [r4, #0]
                }
 800162a:	6820      	ldr	r0, [r4, #0]
 800162c:	bd38      	pop	{r3, r4, r5, pc}
 800162e:	bf00      	nop
 8001630:	200001f4 	.word	0x200001f4

08001634 <HAL_ADC_ConvCpltCallback>:
{
 8001634:	b508      	push	{r3, lr}
    blib::Analog::getInstance().sampling();
 8001636:	f7ff ffed 	bl	8001614 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
}
 800163a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    blib::Analog::getInstance().sampling();
 800163e:	f7ff bc97 	b.w	8000f70 <_ZN4blib6Analog8samplingEv>
	...

08001644 <main>:
{
 8001644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001648:	b098      	sub	sp, #96	; 0x60
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164a:	2400      	movs	r4, #0
 800164c:	4da5      	ldr	r5, [pc, #660]	; (80018e4 <main+0x2a0>)
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800164e:	4fa6      	ldr	r7, [pc, #664]	; (80018e8 <main+0x2a4>)
    HAL_Init();
 8001650:	f000 fcd6 	bl	8002000 <HAL_Init>
    SystemClock_Config();
 8001654:	f7ff ff8a 	bl	800156c <_Z18SystemClock_Configv>
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001658:	2214      	movs	r2, #20
 800165a:	2100      	movs	r1, #0
 800165c:	a80e      	add	r0, sp, #56	; 0x38
 800165e:	f003 fdfc 	bl	800525a <memset>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001662:	9402      	str	r4, [sp, #8]
 8001664:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 8001666:	48a1      	ldr	r0, [pc, #644]	; (80018ec <main+0x2a8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	632b      	str	r3, [r5, #48]	; 0x30
 800166e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	9302      	str	r3, [sp, #8]
 8001676:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001678:	9403      	str	r4, [sp, #12]
 800167a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	632b      	str	r3, [r5, #48]	; 0x30
 8001682:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001688:	9303      	str	r3, [sp, #12]
 800168a:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168c:	9404      	str	r4, [sp, #16]
 800168e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	632b      	str	r3, [r5, #48]	; 0x30
 8001696:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	9304      	str	r3, [sp, #16]
 800169e:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	9405      	str	r4, [sp, #20]
 80016a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	632b      	str	r3, [r5, #48]	; 0x30
 80016aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	9305      	str	r3, [sp, #20]
 80016b2:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	9406      	str	r4, [sp, #24]
 80016b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	632b      	str	r3, [r5, #48]	; 0x30
 80016be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 80016c6:	4622      	mov	r2, r4
 80016c8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016cc:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOA, LOAD_Pin | ENA_INVERTER_Pin | BCCU_Pin, GPIO_PIN_RESET);
 80016ce:	f001 fa49 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin,
 80016d2:	4887      	ldr	r0, [pc, #540]	; (80018f0 <main+0x2ac>)
 80016d4:	4622      	mov	r2, r4
 80016d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80016da:	f001 fa43 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO2_Pin | GPIO15_Pin, GPIO_PIN_RESET);
 80016de:	4622      	mov	r2, r4
 80016e0:	4884      	ldr	r0, [pc, #528]	; (80018f4 <main+0x2b0>)
 80016e2:	21c0      	movs	r1, #192	; 0xc0
 80016e4:	f001 fa3e 	bl	8002b64 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e8:	260f      	movs	r6, #15
 80016ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ee:	4881      	ldr	r0, [pc, #516]	; (80018f4 <main+0x2b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	9410      	str	r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f4:	e9cd 630e 	strd	r6, r3, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f8:	f001 f95a 	bl	80029b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2601      	movs	r6, #1
 80016fe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	487a      	ldr	r0, [pc, #488]	; (80018ec <main+0x2a8>)
 8001704:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f001 f94f 	bl	80029b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_INDICATE_Pin | FAN_Pin | BUCK_ENABLE_Pin | ANTI_BACKFLOW_Pin;
 8001712:	f44f 4370 	mov.w	r3, #61440	; 0xf000
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001716:	4876      	ldr	r0, [pc, #472]	; (80018f0 <main+0x2ac>)
 8001718:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001722:	f001 f945 	bl	80029b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO2_Pin | GPIO15_Pin;
 8001726:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001728:	4872      	ldr	r0, [pc, #456]	; (80018f4 <main+0x2b0>)
 800172a:	a90e      	add	r1, sp, #56	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	f001 f93c 	bl	80029b0 <HAL_GPIO_Init>
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001738:	9401      	str	r4, [sp, #4]
 800173a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800173c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001740:	632b      	str	r3, [r5, #48]	; 0x30
 8001742:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    hadc1.Instance = ADC1;
 8001744:	4d6c      	ldr	r5, [pc, #432]	; (80018f8 <main+0x2b4>)
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800174a:	4622      	mov	r2, r4
 800174c:	4621      	mov	r1, r4
    __HAL_RCC_DMA2_CLK_ENABLE();
 800174e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001750:	2038      	movs	r0, #56	; 0x38
    __HAL_RCC_DMA2_CLK_ENABLE();
 8001752:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001754:	f000 ff0c 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001758:	2038      	movs	r0, #56	; 0x38
 800175a:	f000 ff3b 	bl	80025d4 <HAL_NVIC_EnableIRQ>
    ADC_ChannelConfTypeDef sConfig = { 0 };
 800175e:	2210      	movs	r2, #16
 8001760:	4621      	mov	r1, r4
 8001762:	a80e      	add	r0, sp, #56	; 0x38
 8001764:	f003 fd79 	bl	800525a <memset>
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001768:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800176c:	e9c5 7300 	strd	r7, r3, [r5]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001770:	4628      	mov	r0, r5
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001772:	4b62      	ldr	r3, [pc, #392]	; (80018fc <main+0x2b8>)
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001774:	60ac      	str	r4, [r5, #8]
    hadc1.Init.NbrOfConversion = 5;
 8001776:	2705      	movs	r7, #5
    hadc1.Init.ScanConvMode = ENABLE;
 8001778:	612e      	str	r6, [r5, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800177a:	762e      	strb	r6, [r5, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800177c:	f885 4020 	strb.w	r4, [r5, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001780:	62ec      	str	r4, [r5, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001782:	62ab      	str	r3, [r5, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001784:	60ec      	str	r4, [r5, #12]
    hadc1.Init.NbrOfConversion = 5;
 8001786:	61ef      	str	r7, [r5, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001788:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800178c:	616e      	str	r6, [r5, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800178e:	f000 fc77 	bl	8002080 <HAL_ADC_Init>
 8001792:	b108      	cbz	r0, 8001798 <main+0x154>
 8001794:	b672      	cpsid	i
    while (1)
 8001796:	e7fe      	b.n	8001796 <main+0x152>
    sConfig.Rank = 1;
 8001798:	e9cd 060e 	strd	r0, r6, [sp, #56]	; 0x38
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800179c:	2307      	movs	r3, #7
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179e:	a90e      	add	r1, sp, #56	; 0x38
 80017a0:	4628      	mov	r0, r5
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017a2:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a4:	f000 fe42 	bl	800242c <HAL_ADC_ConfigChannel>
 80017a8:	b108      	cbz	r0, 80017ae <main+0x16a>
 80017aa:	b672      	cpsid	i
    while (1)
 80017ac:	e7fe      	b.n	80017ac <main+0x168>
    sConfig.Rank = 2;
 80017ae:	2402      	movs	r4, #2
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b0:	a90e      	add	r1, sp, #56	; 0x38
 80017b2:	4628      	mov	r0, r5
    sConfig.Channel = ADC_CHANNEL_1;
 80017b4:	960e      	str	r6, [sp, #56]	; 0x38
    sConfig.Rank = 2;
 80017b6:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b8:	f000 fe38 	bl	800242c <HAL_ADC_ConfigChannel>
 80017bc:	b108      	cbz	r0, 80017c2 <main+0x17e>
 80017be:	b672      	cpsid	i
    while (1)
 80017c0:	e7fe      	b.n	80017c0 <main+0x17c>
    sConfig.Channel = ADC_CHANNEL_2;
 80017c2:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c4:	a90e      	add	r1, sp, #56	; 0x38
    sConfig.Rank = 3;
 80017c6:	2403      	movs	r4, #3
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c8:	4628      	mov	r0, r5
    sConfig.Rank = 3;
 80017ca:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	f000 fe2e 	bl	800242c <HAL_ADC_ConfigChannel>
 80017d0:	b108      	cbz	r0, 80017d6 <main+0x192>
 80017d2:	b672      	cpsid	i
    while (1)
 80017d4:	e7fe      	b.n	80017d4 <main+0x190>
    sConfig.Channel = ADC_CHANNEL_3;
 80017d6:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d8:	a90e      	add	r1, sp, #56	; 0x38
    sConfig.Rank = 4;
 80017da:	2404      	movs	r4, #4
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017dc:	4628      	mov	r0, r5
    sConfig.Rank = 4;
 80017de:	940f      	str	r4, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e0:	f000 fe24 	bl	800242c <HAL_ADC_ConfigChannel>
 80017e4:	b108      	cbz	r0, 80017ea <main+0x1a6>
 80017e6:	b672      	cpsid	i
    while (1)
 80017e8:	e7fe      	b.n	80017e8 <main+0x1a4>
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ea:	a90e      	add	r1, sp, #56	; 0x38
 80017ec:	4628      	mov	r0, r5
    sConfig.Rank = 5;
 80017ee:	e9cd 470e 	strd	r4, r7, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017f2:	f000 fe1b 	bl	800242c <HAL_ADC_ConfigChannel>
 80017f6:	b108      	cbz	r0, 80017fc <main+0x1b8>
 80017f8:	b672      	cpsid	i
    while (1)
 80017fa:	e7fe      	b.n	80017fa <main+0x1b6>
    hi2c1.Instance = I2C1;
 80017fc:	4b40      	ldr	r3, [pc, #256]	; (8001900 <main+0x2bc>)
    hi2c1.Init.ClockSpeed = 100000;
 80017fe:	4a41      	ldr	r2, [pc, #260]	; (8001904 <main+0x2c0>)
 8001800:	4c41      	ldr	r4, [pc, #260]	; (8001908 <main+0x2c4>)
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001802:	6218      	str	r0, [r3, #32]
    hi2c1.Init.ClockSpeed = 100000;
 8001804:	e9c3 4200 	strd	r4, r2, [r3]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c1.Init.OwnAddress1 = 0;
 800180c:	e9c3 0002 	strd	r0, r0, [r3, #8]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	e9c3 2004 	strd	r2, r0, [r3, #16]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001814:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001818:	4618      	mov	r0, r3
 800181a:	f001 fa7b 	bl	8002d14 <HAL_I2C_Init>
 800181e:	4605      	mov	r5, r0
 8001820:	b108      	cbz	r0, 8001826 <main+0x1e2>
 8001822:	b672      	cpsid	i
    while (1)
 8001824:	e7fe      	b.n	8001824 <main+0x1e0>
    RTC_TimeTypeDef sTime = { 0 };
 8001826:	4601      	mov	r1, r0
 8001828:	2214      	movs	r2, #20
 800182a:	a809      	add	r0, sp, #36	; 0x24
 800182c:	f003 fd15 	bl	800525a <memset>
    RTC_AlarmTypeDef sAlarm = { 0 };
 8001830:	2228      	movs	r2, #40	; 0x28
 8001832:	4629      	mov	r1, r5
 8001834:	a80e      	add	r0, sp, #56	; 0x38
    hrtc.Instance = RTC;
 8001836:	4c35      	ldr	r4, [pc, #212]	; (800190c <main+0x2c8>)
    RTC_DateTypeDef sDate = { 0 };
 8001838:	9507      	str	r5, [sp, #28]
    RTC_AlarmTypeDef sAlarm = { 0 };
 800183a:	f003 fd0e 	bl	800525a <memset>
    hrtc.Instance = RTC;
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <main+0x2cc>)
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001840:	61a5      	str	r5, [r4, #24]
    hrtc.Init.SynchPrediv = 255;
 8001842:	207f      	movs	r0, #127	; 0x7f
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001844:	e9c4 3500 	strd	r3, r5, [r4]
    hrtc.Init.SynchPrediv = 255;
 8001848:	23ff      	movs	r3, #255	; 0xff
 800184a:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800184e:	4620      	mov	r0, r4
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001850:	e9c4 5504 	strd	r5, r5, [r4, #16]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001854:	f001 ff83 	bl	800375e <HAL_RTC_Init>
 8001858:	b108      	cbz	r0, 800185e <main+0x21a>
 800185a:	b672      	cpsid	i
    while (1)
 800185c:	e7fe      	b.n	800185c <main+0x218>
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800185e:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
    sTime.Hours = 0x0;
 8001862:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    sTime.Seconds = 0x0;
 8001866:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800186a:	4632      	mov	r2, r6
 800186c:	a909      	add	r1, sp, #36	; 0x24
 800186e:	4620      	mov	r0, r4
 8001870:	f001 ffc3 	bl	80037fa <HAL_RTC_SetTime>
 8001874:	b108      	cbz	r0, 800187a <main+0x236>
 8001876:	b672      	cpsid	i
    while (1)
 8001878:	e7fe      	b.n	8001878 <main+0x234>
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800187a:	4b26      	ldr	r3, [pc, #152]	; (8001914 <main+0x2d0>)
 800187c:	9307      	str	r3, [sp, #28]
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800187e:	4632      	mov	r2, r6
 8001880:	a907      	add	r1, sp, #28
 8001882:	4620      	mov	r0, r4
 8001884:	f002 f813 	bl	80038ae <HAL_RTC_SetDate>
 8001888:	b108      	cbz	r0, 800188e <main+0x24a>
 800188a:	b672      	cpsid	i
    while (1)
 800188c:	e7fe      	b.n	800188c <main+0x248>
    sAlarm.AlarmTime.Hours = 0x0;
 800188e:	2300      	movs	r3, #0
    sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001890:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
    sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001894:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
    sAlarm.AlarmTime.Hours = 0x0;
 8001898:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    sAlarm.AlarmTime.Seconds = 0x0;
 800189c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    sAlarm.AlarmTime.SubSeconds = 0x0;
 80018a0:	930f      	str	r3, [sp, #60]	; 0x3c
    sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80018a2:	9315      	str	r3, [sp, #84]	; 0x54
    sAlarm.AlarmDateWeekDay = 0x1;
 80018a4:	2201      	movs	r2, #1
    sAlarm.Alarm = RTC_ALARM_A;
 80018a6:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018aa:	4818      	ldr	r0, [pc, #96]	; (800190c <main+0x2c8>)
    sAlarm.AlarmDateWeekDay = 0x1;
 80018ac:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018b0:	a90e      	add	r1, sp, #56	; 0x38
    sAlarm.Alarm = RTC_ALARM_A;
 80018b2:	9317      	str	r3, [sp, #92]	; 0x5c
    if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80018b4:	f002 f844 	bl	8003940 <HAL_RTC_SetAlarm_IT>
 80018b8:	b108      	cbz	r0, 80018be <main+0x27a>
 80018ba:	b672      	cpsid	i
    while (1)
 80018bc:	e7fe      	b.n	80018bc <main+0x278>
    huart2.Instance = USART2;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <main+0x2d4>)
    huart2.Init.BaudRate = 115200;
 80018c0:	4a16      	ldr	r2, [pc, #88]	; (800191c <main+0x2d8>)
    huart2.Init.Parity = UART_PARITY_NONE;
 80018c2:	6118      	str	r0, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	240c      	movs	r4, #12
    huart2.Init.StopBits = UART_STOPBITS_1;
 80018c6:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	e9c3 4005 	strd	r4, r0, [r3, #20]
    huart2.Init.BaudRate = 115200;
 80018ce:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d2:	61d8      	str	r0, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d4:	4618      	mov	r0, r3
    huart2.Init.BaudRate = 115200;
 80018d6:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80018da:	f002 fcdd 	bl	8004298 <HAL_UART_Init>
 80018de:	b1f8      	cbz	r0, 8001920 <main+0x2dc>
 80018e0:	b672      	cpsid	i
    while (1)
 80018e2:	e7fe      	b.n	80018e2 <main+0x29e>
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40012000 	.word	0x40012000
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020c00 	.word	0x40020c00
 80018f4:	40020800 	.word	0x40020800
 80018f8:	20000204 	.word	0x20000204
 80018fc:	0f000001 	.word	0x0f000001
 8001900:	200002ac 	.word	0x200002ac
 8001904:	000186a0 	.word	0x000186a0
 8001908:	40005400 	.word	0x40005400
 800190c:	20000300 	.word	0x20000300
 8001910:	40002800 	.word	0x40002800
 8001914:	00010101 	.word	0x00010101
 8001918:	200003f4 	.word	0x200003f4
 800191c:	40004400 	.word	0x40004400
    huart1.Instance = USART1;
 8001920:	4b64      	ldr	r3, [pc, #400]	; (8001ab4 <main+0x470>)
 8001922:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <main+0x474>)
    huart1.Init.StopBits = UART_STOPBITS_1;
 8001924:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	e9c3 0404 	strd	r0, r4, [r3, #16]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001930:	4618      	mov	r0, r3
    huart1.Init.BaudRate = 115200;
 8001932:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8001936:	f002 fcaf 	bl	8004298 <HAL_UART_Init>
 800193a:	b108      	cbz	r0, 8001940 <main+0x2fc>
 800193c:	b672      	cpsid	i
    while (1)
 800193e:	e7fe      	b.n	800193e <main+0x2fa>
    huart3.Instance = USART3;
 8001940:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <main+0x478>)
 8001942:	4a5f      	ldr	r2, [pc, #380]	; (8001ac0 <main+0x47c>)
    huart3.Init.StopBits = UART_STOPBITS_1;
 8001944:	e9c3 0002 	strd	r0, r0, [r3, #8]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8001948:	e9c3 0404 	strd	r0, r4, [r3, #16]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800194c:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8001950:	4618      	mov	r0, r3
    huart3.Init.BaudRate = 115200;
 8001952:	e9c3 2500 	strd	r2, r5, [r3]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 8001956:	f002 fc9f 	bl	8004298 <HAL_UART_Init>
 800195a:	4605      	mov	r5, r0
 800195c:	b108      	cbz	r0, 8001962 <main+0x31e>
 800195e:	b672      	cpsid	i
    while (1)
 8001960:	e7fe      	b.n	8001960 <main+0x31c>
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001962:	4601      	mov	r1, r0
 8001964:	2210      	movs	r2, #16
 8001966:	a809      	add	r0, sp, #36	; 0x24
 8001968:	f003 fc77 	bl	800525a <memset>
    htim2.Instance = TIM2;
 800196c:	4c55      	ldr	r4, [pc, #340]	; (8001ac4 <main+0x480>)
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 800196e:	221c      	movs	r2, #28
 8001970:	4629      	mov	r1, r5
 8001972:	a80e      	add	r0, sp, #56	; 0x38
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001974:	e9cd 5507 	strd	r5, r5, [sp, #28]
    htim2.Init.Prescaler = 49;
 8001978:	2631      	movs	r6, #49	; 0x31
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 800197a:	f003 fc6e 	bl	800525a <memset>
    htim2.Init.Prescaler = 49;
 800197e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001982:	e9c4 3600 	strd	r3, r6, [r4]
    htim2.Init.Period = 500;
 8001986:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800198e:	4620      	mov	r0, r4
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001990:	2380      	movs	r3, #128	; 0x80
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001992:	60a5      	str	r5, [r4, #8]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001994:	61a3      	str	r3, [r4, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001996:	f002 fa21 	bl	8003ddc <HAL_TIM_Base_Init>
 800199a:	b108      	cbz	r0, 80019a0 <main+0x35c>
 800199c:	b672      	cpsid	i
    while (1)
 800199e:	e7fe      	b.n	800199e <main+0x35a>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a4:	a909      	add	r1, sp, #36	; 0x24
 80019a6:	4620      	mov	r0, r4
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a8:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019aa:	f002 fb08 	bl	8003fbe <HAL_TIM_ConfigClockSource>
 80019ae:	b108      	cbz	r0, 80019b4 <main+0x370>
 80019b0:	b672      	cpsid	i
    while (1)
 80019b2:	e7fe      	b.n	80019b2 <main+0x36e>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019b4:	4620      	mov	r0, r4
 80019b6:	f002 fa3d 	bl	8003e34 <HAL_TIM_PWM_Init>
 80019ba:	b108      	cbz	r0, 80019c0 <main+0x37c>
 80019bc:	b672      	cpsid	i
    while (1)
 80019be:	e7fe      	b.n	80019be <main+0x37a>
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c4:	a907      	add	r1, sp, #28
 80019c6:	4620      	mov	r0, r4
 80019c8:	f002 fb92 	bl	80040f0 <HAL_TIMEx_MasterConfigSynchronization>
 80019cc:	4602      	mov	r2, r0
 80019ce:	b108      	cbz	r0, 80019d4 <main+0x390>
 80019d0:	b672      	cpsid	i
    while (1)
 80019d2:	e7fe      	b.n	80019d2 <main+0x38e>
    sConfigOC.Pulse = 250;
 80019d4:	2160      	movs	r1, #96	; 0x60
 80019d6:	23fa      	movs	r3, #250	; 0xfa
 80019d8:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019dc:	9010      	str	r0, [sp, #64]	; 0x40
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019de:	9012      	str	r0, [sp, #72]	; 0x48
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e0:	a90e      	add	r1, sp, #56	; 0x38
 80019e2:	4620      	mov	r0, r4
 80019e4:	f002 fa88 	bl	8003ef8 <HAL_TIM_PWM_ConfigChannel>
 80019e8:	4605      	mov	r5, r0
 80019ea:	b108      	cbz	r0, 80019f0 <main+0x3ac>
 80019ec:	b672      	cpsid	i
    while (1)
 80019ee:	e7fe      	b.n	80019ee <main+0x3aa>
    HAL_TIM_MspPostInit(&htim2);
 80019f0:	4620      	mov	r0, r4
 80019f2:	f000 f981 	bl	8001cf8 <HAL_TIM_MspPostInit>
    htim6.Instance = TIM6;
 80019f6:	4834      	ldr	r0, [pc, #208]	; (8001ac8 <main+0x484>)
 80019f8:	4b34      	ldr	r3, [pc, #208]	; (8001acc <main+0x488>)
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	6085      	str	r5, [r0, #8]
    htim6.Init.Prescaler = 49;
 80019fc:	e9c0 3600 	strd	r3, r6, [r0]
    htim6.Init.Period = 999;
 8001a00:	f240 33e7 	movw	r3, #999	; 0x3e7
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a04:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
    htim6.Init.Period = 999;
 8001a08:	60c3      	str	r3, [r0, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	6185      	str	r5, [r0, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a0c:	f002 f9e6 	bl	8003ddc <HAL_TIM_Base_Init>
 8001a10:	b108      	cbz	r0, 8001a16 <main+0x3d2>
 8001a12:	b672      	cpsid	i
    while (1)
 8001a14:	e7fe      	b.n	8001a14 <main+0x3d0>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a18:	482b      	ldr	r0, [pc, #172]	; (8001ac8 <main+0x484>)
 8001a1a:	a90e      	add	r1, sp, #56	; 0x38
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1c:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a20:	f002 fb66 	bl	80040f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a24:	b108      	cbz	r0, 8001a2a <main+0x3e6>
 8001a26:	b672      	cpsid	i
    while (1)
 8001a28:	e7fe      	b.n	8001a28 <main+0x3e4>
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8001a2a:	4b29      	ldr	r3, [pc, #164]	; (8001ad0 <main+0x48c>)
 8001a2c:	4929      	ldr	r1, [pc, #164]	; (8001ad4 <main+0x490>)
 8001a2e:	482a      	ldr	r0, [pc, #168]	; (8001ad8 <main+0x494>)
                    if (mInstance == nullptr)
 8001a30:	4d2a      	ldr	r5, [pc, #168]	; (8001adc <main+0x498>)
 8001a32:	22b6      	movs	r2, #182	; 0xb6
 8001a34:	f7ff fbb2 	bl	800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 8001a38:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <main+0x48c>)
 8001a3a:	4926      	ldr	r1, [pc, #152]	; (8001ad4 <main+0x490>)
 8001a3c:	4828      	ldr	r0, [pc, #160]	; (8001ae0 <main+0x49c>)
 8001a3e:	22b7      	movs	r2, #183	; 0xb7
 8001a40:	f7ff fbac 	bl	800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <main+0x48c>)
 8001a46:	4923      	ldr	r1, [pc, #140]	; (8001ad4 <main+0x490>)
 8001a48:	4826      	ldr	r0, [pc, #152]	; (8001ae4 <main+0x4a0>)
 8001a4a:	22b8      	movs	r2, #184	; 0xb8
 8001a4c:	f7ff fba6 	bl	800119c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    auto &analog = blib::Analog::getInstance();
 8001a50:	f7ff fde0 	bl	8001614 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	4604      	mov	r4, r0
 8001a58:	b933      	cbnz	r3, 8001a68 <main+0x424>
                        mInstance = new T();
 8001a5a:	2028      	movs	r0, #40	; 0x28
 8001a5c:	f002 fd7e 	bl	800455c <_Znwj>
 8001a60:	4606      	mov	r6, r0
 8001a62:	f7ff fc39 	bl	80012d8 <_ZN4blib7MonitorC1Ev>
 8001a66:	602e      	str	r6, [r5, #0]
                    return *mInstance;
 8001a68:	682f      	ldr	r7, [r5, #0]
                    if (mInstance == nullptr)
 8001a6a:	4d1f      	ldr	r5, [pc, #124]	; (8001ae8 <main+0x4a4>)
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	b933      	cbnz	r3, 8001a7e <main+0x43a>
                        mInstance = new T();
 8001a70:	200c      	movs	r0, #12
 8001a72:	f002 fd73 	bl	800455c <_Znwj>
 8001a76:	4606      	mov	r6, r0
 8001a78:	f7ff fb86 	bl	8001188 <_ZN4blib13ChargeControlC1Ev>
 8001a7c:	602e      	str	r6, [r5, #0]
                    return *mInstance;
 8001a7e:	f8d5 8000 	ldr.w	r8, [r5]
                    if (mInstance == nullptr)
 8001a82:	4d1a      	ldr	r5, [pc, #104]	; (8001aec <main+0x4a8>)
 8001a84:	682b      	ldr	r3, [r5, #0]
 8001a86:	b933      	cbnz	r3, 8001a96 <main+0x452>
                        mInstance = new T();
 8001a88:	2008      	movs	r0, #8
 8001a8a:	f002 fd67 	bl	800455c <_Znwj>
 8001a8e:	4606      	mov	r6, r0
 8001a90:	f7ff fd2c 	bl	80014ec <_ZN4blib13SerialMonitorC1Ev>
 8001a94:	602e      	str	r6, [r5, #0]
                    return *mInstance;
 8001a96:	682d      	ldr	r5, [r5, #0]
        analog.readAnalog();
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7ff fafd 	bl	8001098 <_ZN4blib6Analog10readAnalogEv>
        chargeCtrl.run();
 8001a9e:	4640      	mov	r0, r8
 8001aa0:	f7ff fb7a 	bl	8001198 <_ZN4blib13ChargeControl3runEv>
        serialMnt.show();
 8001aa4:	4628      	mov	r0, r5
 8001aa6:	f7ff fd53 	bl	8001550 <_ZN4blib13SerialMonitor4showEv>
        monitor.showMenu();
 8001aaa:	4638      	mov	r0, r7
 8001aac:	f7ff fcf6 	bl	800149c <_ZN4blib7Monitor8showMenuEv>
    while (1)
 8001ab0:	e7f2      	b.n	8001a98 <main+0x454>
 8001ab2:	bf00      	nop
 8001ab4:	200003b0 	.word	0x200003b0
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	20000438 	.word	0x20000438
 8001ac0:	40004800 	.word	0x40004800
 8001ac4:	20000320 	.word	0x20000320
 8001ac8:	20000368 	.word	0x20000368
 8001acc:	40001000 	.word	0x40001000
 8001ad0:	08007602 	.word	0x08007602
 8001ad4:	0800755f 	.word	0x0800755f
 8001ad8:	08007607 	.word	0x08007607
 8001adc:	20000200 	.word	0x20000200
 8001ae0:	08007631 	.word	0x08007631
 8001ae4:	0800764b 	.word	0x0800764b
 8001ae8:	200001fc 	.word	0x200001fc
 8001aec:	200001f8 	.word	0x200001f8

08001af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_MspInit+0x34>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	9100      	str	r1, [sp, #0]
 8001af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001afe:	645a      	str	r2, [r3, #68]	; 0x44
 8001b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b06:	9200      	str	r2, [sp, #0]
 8001b08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	9101      	str	r1, [sp, #4]
 8001b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b1e:	b002      	add	sp, #8
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b28:	b570      	push	{r4, r5, r6, lr}
 8001b2a:	4606      	mov	r6, r0
 8001b2c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	2214      	movs	r2, #20
 8001b30:	2100      	movs	r1, #0
 8001b32:	a803      	add	r0, sp, #12
 8001b34:	f003 fb91 	bl	800525a <memset>
  if(hadc->Instance==ADC1)
 8001b38:	6832      	ldr	r2, [r6, #0]
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_ADC_MspInit+0x94>)
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d13a      	bne.n	8001bb6 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b40:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001b44:	2500      	movs	r5, #0
 8001b46:	9501      	str	r5, [sp, #4]
 8001b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = VIN_Pin|IIN_Pin|VOUT_Pin|IOUT_Pin
                          |TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	481d      	ldr	r0, [pc, #116]	; (8001bc0 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b4c:	4c1d      	ldr	r4, [pc, #116]	; (8001bc4 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
 8001b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b56:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001b5a:	9201      	str	r2, [sp, #4]
 8001b5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5e:	9502      	str	r5, [sp, #8]
 8001b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	631a      	str	r2, [r3, #48]	; 0x30
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b72:	221f      	movs	r2, #31
 8001b74:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b78:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f000 ff18 	bl	80029b0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001b80:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b86:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b92:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b9a:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b9e:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba0:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba4:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ba8:	f000 fd4c 	bl	8002644 <HAL_DMA_Init>
 8001bac:	b108      	cbz	r0, 8001bb2 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8001bae:	f7ff fd2f 	bl	8001610 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bb2:	63b4      	str	r4, [r6, #56]	; 0x38
 8001bb4:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001bb6:	b008      	add	sp, #32
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	bf00      	nop
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	2000024c 	.word	0x2000024c
 8001bc8:	40026410 	.word	0x40026410

08001bcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bcc:	b530      	push	{r4, r5, lr}
 8001bce:	4604      	mov	r4, r0
 8001bd0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	2214      	movs	r2, #20
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	a803      	add	r0, sp, #12
 8001bd8:	f003 fb3f 	bl	800525a <memset>
  if(hi2c->Instance==I2C1)
 8001bdc:	6822      	ldr	r2, [r4, #0]
 8001bde:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_I2C_MspInit+0x60>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d121      	bne.n	8001c28 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4c12      	ldr	r4, [pc, #72]	; (8001c30 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	4813      	ldr	r0, [pc, #76]	; (8001c34 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be8:	2500      	movs	r5, #0
 8001bea:	9501      	str	r5, [sp, #4]
 8001bec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bee:	f043 0302 	orr.w	r3, r3, #2
 8001bf2:	6323      	str	r3, [r4, #48]	; 0x30
 8001bf4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfe:	22c0      	movs	r2, #192	; 0xc0
 8001c00:	2312      	movs	r3, #18
 8001c02:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c06:	2103      	movs	r1, #3
 8001c08:	2304      	movs	r3, #4
 8001c0a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0e:	a903      	add	r1, sp, #12
 8001c10:	f000 fece 	bl	80029b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c14:	9502      	str	r5, [sp, #8]
 8001c16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1c:	6423      	str	r3, [r4, #64]	; 0x40
 8001c1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	9302      	str	r3, [sp, #8]
 8001c26:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c28:	b009      	add	sp, #36	; 0x24
 8001c2a:	bd30      	pop	{r4, r5, pc}
 8001c2c:	40005400 	.word	0x40005400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020400 	.word	0x40020400

08001c38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c3a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4668      	mov	r0, sp
 8001c42:	f003 fb0a 	bl	800525a <memset>
  if(hrtc->Instance==RTC)
 8001c46:	6822      	ldr	r2, [r4, #0]
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_RTC_MspInit+0x48>)
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d116      	bne.n	8001c7c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c52:	4668      	mov	r0, sp
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c58:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5a:	f001 fc6f 	bl	800353c <HAL_RCCEx_PeriphCLKConfig>
 8001c5e:	b108      	cbz	r0, 8001c64 <HAL_RTC_MspInit+0x2c>
    {
      Error_Handler();
 8001c60:	f7ff fcd6 	bl	8001610 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c64:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_RTC_MspInit+0x4c>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2029      	movs	r0, #41	; 0x29
 8001c70:	4611      	mov	r1, r2
 8001c72:	f000 fc7d 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001c76:	2029      	movs	r0, #41	; 0x29
 8001c78:	f000 fcac 	bl	80025d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c7c:	b004      	add	sp, #16
 8001c7e:	bd10      	pop	{r4, pc}
 8001c80:	40002800 	.word	0x40002800
 8001c84:	42470000 	.word	0x42470000

08001c88 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8001c88:	6803      	ldr	r3, [r0, #0]
 8001c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001c8e:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001c90:	d116      	bne.n	8001cc0 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c92:	2200      	movs	r2, #0
 8001c94:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001c98:	9200      	str	r2, [sp, #0]
 8001c9a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c9c:	f041 0101 	orr.w	r1, r1, #1
 8001ca0:	6419      	str	r1, [r3, #64]	; 0x40
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	9300      	str	r3, [sp, #0]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001caa:	201c      	movs	r0, #28
 8001cac:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cae:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cb0:	f000 fc5e 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cb4:	201c      	movs	r0, #28
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001cb6:	b003      	add	sp, #12
 8001cb8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cbc:	f000 bc8a 	b.w	80025d4 <HAL_NVIC_EnableIRQ>
  else if(htim_base->Instance==TIM6)
 8001cc0:	4a0b      	ldr	r2, [pc, #44]	; (8001cf0 <HAL_TIM_Base_MspInit+0x68>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d111      	bne.n	8001cea <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_TIM_Base_MspInit+0x6c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001cce:	f041 0110 	orr.w	r1, r1, #16
 8001cd2:	6419      	str	r1, [r3, #64]	; 0x40
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001cdc:	2036      	movs	r0, #54	; 0x36
 8001cde:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ce0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ce2:	f000 fc45 	bl	8002570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ce6:	2036      	movs	r0, #54	; 0x36
 8001ce8:	e7e5      	b.n	8001cb6 <HAL_TIM_Base_MspInit+0x2e>
}
 8001cea:	b003      	add	sp, #12
 8001cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cf0:	40001000 	.word	0x40001000
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf8:	b510      	push	{r4, lr}
 8001cfa:	4604      	mov	r4, r0
 8001cfc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfe:	2214      	movs	r2, #20
 8001d00:	2100      	movs	r1, #0
 8001d02:	a801      	add	r0, sp, #4
 8001d04:	f003 faa9 	bl	800525a <memset>
  if(htim->Instance==TIM2)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0e:	d115      	bne.n	8001d3c <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_OUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d32:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d34:	2301      	movs	r3, #1
 8001d36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f000 fe3a 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d3c:	b006      	add	sp, #24
 8001d3e:	bd10      	pop	{r4, pc}
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020000 	.word	0x40020000

08001d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d48:	b510      	push	{r4, lr}
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4e:	2214      	movs	r2, #20
 8001d50:	2100      	movs	r1, #0
 8001d52:	a807      	add	r0, sp, #28
 8001d54:	f003 fa81 	bl	800525a <memset>
  if(huart->Instance==USART1)
 8001d58:	6823      	ldr	r3, [r4, #0]
 8001d5a:	4a39      	ldr	r2, [pc, #228]	; (8001e40 <HAL_UART_MspInit+0xf8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d125      	bne.n	8001dac <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <HAL_UART_MspInit+0xfc>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	4839      	ldr	r0, [pc, #228]	; (8001e48 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d64:	2100      	movs	r1, #0
 8001d66:	9101      	str	r1, [sp, #4]
 8001d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d6a:	f042 0210 	orr.w	r2, r2, #16
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
 8001d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d72:	f002 0210 	and.w	r2, r2, #16
 8001d76:	9201      	str	r2, [sp, #4]
 8001d78:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	9102      	str	r1, [sp, #8]
 8001d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	9302      	str	r3, [sp, #8]
 8001d8c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	f44f 6cc0 	mov.w	ip, #1536	; 0x600
 8001d92:	2302      	movs	r3, #2
 8001d94:	e9cd c307 	strd	ip, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d98:	f04f 0e03 	mov.w	lr, #3
 8001d9c:	2307      	movs	r3, #7
 8001d9e:	e9cd e30a 	strd	lr, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f000 fe04 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001da8:	b00c      	add	sp, #48	; 0x30
 8001daa:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001dac:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <HAL_UART_MspInit+0x104>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d120      	bne.n	8001df4 <HAL_UART_MspInit+0xac>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_UART_MspInit+0xfc>)
 8001db4:	2100      	movs	r1, #0
 8001db6:	9103      	str	r1, [sp, #12]
 8001db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dbe:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001dc6:	9203      	str	r2, [sp, #12]
 8001dc8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	9104      	str	r1, [sp, #16]
 8001dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dce:	f042 0208 	orr.w	r2, r2, #8
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2060      	movs	r0, #96	; 0x60
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dde:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	e9cd 0307 	strd	r0, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de6:	2403      	movs	r4, #3
 8001de8:	2307      	movs	r3, #7
 8001dea:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dee:	4818      	ldr	r0, [pc, #96]	; (8001e50 <HAL_UART_MspInit+0x108>)
 8001df0:	a907      	add	r1, sp, #28
 8001df2:	e7d7      	b.n	8001da4 <HAL_UART_MspInit+0x5c>
  else if(huart->Instance==USART3)
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_UART_MspInit+0x10c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d1d6      	bne.n	8001da8 <HAL_UART_MspInit+0x60>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_UART_MspInit+0xfc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	4816      	ldr	r0, [pc, #88]	; (8001e58 <HAL_UART_MspInit+0x110>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dfe:	2100      	movs	r1, #0
 8001e00:	9105      	str	r1, [sp, #20]
 8001e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e04:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001e10:	9205      	str	r2, [sp, #20]
 8001e12:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e14:	9106      	str	r1, [sp, #24]
 8001e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e18:	f042 0202 	orr.w	r2, r2, #2
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	9306      	str	r3, [sp, #24]
 8001e26:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8001e2c:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e2e:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	e9cd 2307 	strd	r2, r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e34:	2307      	movs	r3, #7
 8001e36:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3a:	a907      	add	r1, sp, #28
 8001e3c:	e7b2      	b.n	8001da4 <HAL_UART_MspInit+0x5c>
 8001e3e:	bf00      	nop
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	40004400 	.word	0x40004400
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40004800 	.word	0x40004800
 8001e58:	40020400 	.word	0x40020400

08001e5c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <NMI_Handler>

08001e5e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <HardFault_Handler>

08001e60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <MemManage_Handler>

08001e62 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <BusFault_Handler>

08001e64 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <UsageFault_Handler>

08001e66 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e66:	4770      	bx	lr

08001e68 <DebugMon_Handler>:
 8001e68:	4770      	bx	lr

08001e6a <PendSV_Handler>:
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6c:	f000 b8e2 	b.w	8002034 <HAL_IncTick>

08001e70 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e70:	4801      	ldr	r0, [pc, #4]	; (8001e78 <TIM2_IRQHandler+0x8>)
 8001e72:	f001 beab 	b.w	8003bcc <HAL_TIM_IRQHandler>
 8001e76:	bf00      	nop
 8001e78:	20000320 	.word	0x20000320

08001e7c <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001e7c:	4801      	ldr	r0, [pc, #4]	; (8001e84 <RTC_Alarm_IRQHandler+0x8>)
 8001e7e:	f001 bbf7 	b.w	8003670 <HAL_RTC_AlarmIRQHandler>
 8001e82:	bf00      	nop
 8001e84:	20000300 	.word	0x20000300

08001e88 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <TIM6_DAC_IRQHandler+0x8>)
 8001e8a:	f001 be9f 	b.w	8003bcc <HAL_TIM_IRQHandler>
 8001e8e:	bf00      	nop
 8001e90:	20000368 	.word	0x20000368

08001e94 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e94:	4801      	ldr	r0, [pc, #4]	; (8001e9c <DMA2_Stream0_IRQHandler+0x8>)
 8001e96:	f000 bccd 	b.w	8002834 <HAL_DMA_IRQHandler>
 8001e9a:	bf00      	nop
 8001e9c:	2000024c 	.word	0x2000024c

08001ea0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	4770      	bx	lr

08001ea4 <_kill>:

int _kill(int pid, int sig)
{
 8001ea4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea6:	f003 fa7f 	bl	80053a8 <__errno>
 8001eaa:	2316      	movs	r3, #22
 8001eac:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb2:	bd08      	pop	{r3, pc}

08001eb4 <_exit>:

void _exit (int status)
{
 8001eb4:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001eb6:	f003 fa77 	bl	80053a8 <__errno>
 8001eba:	2316      	movs	r3, #22
 8001ebc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001ebe:	e7fe      	b.n	8001ebe <_exit+0xa>

08001ec0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	460d      	mov	r5, r1
 8001ec4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	460e      	mov	r6, r1
 8001ec8:	1b73      	subs	r3, r6, r5
 8001eca:	429c      	cmp	r4, r3
 8001ecc:	dc01      	bgt.n	8001ed2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001ece:	4620      	mov	r0, r4
 8001ed0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001ed2:	f3af 8000 	nop.w
 8001ed6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	e7f5      	b.n	8001ec8 <_read+0x8>

08001edc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	460d      	mov	r5, r1
 8001ee0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	460e      	mov	r6, r1
 8001ee4:	1b73      	subs	r3, r6, r5
 8001ee6:	429c      	cmp	r4, r3
 8001ee8:	dc01      	bgt.n	8001eee <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001eea:	4620      	mov	r0, r4
 8001eec:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001eee:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001ef2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef6:	e7f5      	b.n	8001ee4 <_write+0x8>

08001ef8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	4770      	bx	lr

08001efe <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001efe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f02:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001f04:	2000      	movs	r0, #0
 8001f06:	4770      	bx	lr

08001f08 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001f08:	2001      	movs	r0, #1
 8001f0a:	4770      	bx	lr

08001f0c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	4770      	bx	lr

08001f10 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <_sbrk+0x30>)
 8001f12:	6811      	ldr	r1, [r2, #0]
{
 8001f14:	b510      	push	{r4, lr}
 8001f16:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001f18:	b909      	cbnz	r1, 8001f1e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001f1a:	490a      	ldr	r1, [pc, #40]	; (8001f44 <_sbrk+0x34>)
 8001f1c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	6810      	ldr	r0, [r2, #0]
 8001f20:	4909      	ldr	r1, [pc, #36]	; (8001f48 <_sbrk+0x38>)
 8001f22:	4c0a      	ldr	r4, [pc, #40]	; (8001f4c <_sbrk+0x3c>)
 8001f24:	4403      	add	r3, r0
 8001f26:	1b09      	subs	r1, r1, r4
 8001f28:	428b      	cmp	r3, r1
 8001f2a:	d906      	bls.n	8001f3a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001f2c:	f003 fa3c 	bl	80053a8 <__errno>
 8001f30:	230c      	movs	r3, #12
 8001f32:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001f38:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001f3a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001f3c:	e7fc      	b.n	8001f38 <_sbrk+0x28>
 8001f3e:	bf00      	nop
 8001f40:	2000047c 	.word	0x2000047c
 8001f44:	200009d8 	.word	0x200009d8
 8001f48:	20020000 	.word	0x20020000
 8001f4c:	00000400 	.word	0x00000400

08001f50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f50:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <SystemInit+0x10>)
 8001f52:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f5e:	4770      	bx	lr
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6a:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f80:	4c0b      	ldr	r4, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f8e:	f7ff ffdf 	bl	8001f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f003 fa0f 	bl	80053b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f96:	f7ff fb55 	bl	8001644 <main>
  bx  lr    
 8001f9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001fa8:	08007a1c 	.word	0x08007a1c
  ldr r2, =_sbss
 8001fac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001fb0:	200009d4 	.word	0x200009d4

08001fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_IRQHandler>
	...

08001fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <HAL_InitTick+0x3c>)
 8001fbc:	781a      	ldrb	r2, [r3, #0]
 8001fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <HAL_InitTick+0x40>)
{
 8001fc8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fca:	6810      	ldr	r0, [r2, #0]
 8001fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fd0:	f000 fb0e 	bl	80025f0 <HAL_SYSTICK_Config>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	b958      	cbnz	r0, 8001ff0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd8:	2d0f      	cmp	r5, #15
 8001fda:	d809      	bhi.n	8001ff0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4629      	mov	r1, r5
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 fac4 	bl	8002570 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <HAL_InitTick+0x44>)
 8001fea:	4620      	mov	r0, r4
 8001fec:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001fee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	e7fc      	b.n	8001fee <HAL_InitTick+0x36>
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	20000008 	.word	0x20000008

08002000 <HAL_Init>:
{
 8002000:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_Init+0x30>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800200a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002012:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800201a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201c:	2003      	movs	r0, #3
 800201e:	f000 fa95 	bl	800254c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002022:	200f      	movs	r0, #15
 8002024:	f7ff ffc8 	bl	8001fb8 <HAL_InitTick>
  HAL_MspInit();
 8002028:	f7ff fd62 	bl	8001af0 <HAL_MspInit>
}
 800202c:	2000      	movs	r0, #0
 800202e:	bd08      	pop	{r3, pc}
 8002030:	40023c00 	.word	0x40023c00

08002034 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002034:	4a03      	ldr	r2, [pc, #12]	; (8002044 <HAL_IncTick+0x10>)
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_IncTick+0x14>)
 8002038:	6811      	ldr	r1, [r2, #0]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	440b      	add	r3, r1
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000480 	.word	0x20000480
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800204c:	4b01      	ldr	r3, [pc, #4]	; (8002054 <HAL_GetTick+0x8>)
 800204e:	6818      	ldr	r0, [r3, #0]
}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000480 	.word	0x20000480

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff fff6 	bl	800204c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002060:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	bf1c      	itt	ne
 8002064:	4b05      	ldrne	r3, [pc, #20]	; (800207c <HAL_Delay+0x24>)
 8002066:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002068:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800206a:	bf18      	it	ne
 800206c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800206e:	f7ff ffed 	bl	800204c <HAL_GetTick>
 8002072:	1b43      	subs	r3, r0, r5
 8002074:	42a3      	cmp	r3, r4
 8002076:	d3fa      	bcc.n	800206e <HAL_Delay+0x16>
  {
  }
}
 8002078:	bd38      	pop	{r3, r4, r5, pc}
 800207a:	bf00      	nop
 800207c:	20000004 	.word	0x20000004

08002080 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002080:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002082:	4604      	mov	r4, r0
 8002084:	2800      	cmp	r0, #0
 8002086:	f000 809b 	beq.w	80021c0 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800208a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800208c:	b925      	cbnz	r5, 8002098 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800208e:	f7ff fd4b 	bl	8001b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002092:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002094:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800209a:	06db      	lsls	r3, r3, #27
 800209c:	f100 808e 	bmi.w	80021bc <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020a6:	f023 0302 	bic.w	r3, r3, #2
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020b0:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <HAL_ADC_Init+0x144>)
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80020b8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	6861      	ldr	r1, [r4, #4]
 80020be:	430a      	orrs	r2, r1
 80020c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020c2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020d6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020d8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020da:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020de:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020e6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f6:	4934      	ldr	r1, [pc, #208]	; (80021c8 <HAL_ADC_Init+0x148>)
 80020f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80020fa:	428a      	cmp	r2, r1
 80020fc:	d052      	beq.n	80021a4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020fe:	6899      	ldr	r1, [r3, #8]
 8002100:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002104:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002106:	6899      	ldr	r1, [r3, #8]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800210e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002114:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800211a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	f022 0202 	bic.w	r2, r2, #2
 8002122:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	7e21      	ldrb	r1, [r4, #24]
 8002128:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800212c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800212e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8002132:	2a00      	cmp	r2, #0
 8002134:	d03e      	beq.n	80021b4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002136:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002138:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800213a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800213e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	3901      	subs	r1, #1
 800214c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002150:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002154:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002156:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800215c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215e:	3901      	subs	r1, #1
 8002160:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800216c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002174:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8002178:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800217a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800217c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800217e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002184:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002186:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002188:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800218c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800218e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002190:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002192:	f023 0303 	bic.w	r3, r3, #3
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800219c:	2300      	movs	r3, #0
 800219e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80021a2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021b2:	e7b2      	b.n	800211a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ba:	e7c9      	b.n	8002150 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80021bc:	2001      	movs	r0, #1
 80021be:	e7ed      	b.n	800219c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
 80021c2:	e7ee      	b.n	80021a2 <HAL_ADC_Init+0x122>
 80021c4:	40012300 	.word	0x40012300
 80021c8:	0f000001 	.word	0x0f000001

080021cc <HAL_ADC_Start_DMA>:
{
 80021cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80021ce:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80021d0:	2200      	movs	r2, #0
 80021d2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80021d4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80021d8:	2a01      	cmp	r2, #1
{
 80021da:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80021dc:	f000 8092 	beq.w	8002304 <HAL_ADC_Start_DMA+0x138>
 80021e0:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021e2:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 80021e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80021e8:	68b2      	ldr	r2, [r6, #8]
 80021ea:	07d4      	lsls	r4, r2, #31
 80021ec:	d554      	bpl.n	8002298 <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80021ee:	68b2      	ldr	r2, [r6, #8]
 80021f0:	05d0      	lsls	r0, r2, #23
 80021f2:	d464      	bmi.n	80022be <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021f4:	68b4      	ldr	r4, [r6, #8]
 80021f6:	f014 0401 	ands.w	r4, r4, #1
 80021fa:	d079      	beq.n	80022f0 <HAL_ADC_Start_DMA+0x124>
    ADC_STATE_CLR_SET(hadc->State,
 80021fc:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80021fe:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002202:	f020 0001 	bic.w	r0, r0, #1
 8002206:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800220a:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800220c:	6872      	ldr	r2, [r6, #4]
 800220e:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002210:	bf41      	itttt	mi
 8002212:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 8002214:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8002218:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800221c:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800221e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002220:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002222:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002226:	bf1c      	itt	ne
 8002228:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 800222a:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800222e:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8002230:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002232:	4a35      	ldr	r2, [pc, #212]	; (8002308 <HAL_ADC_Start_DMA+0x13c>)
    __HAL_UNLOCK(hadc);   
 8002234:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002238:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800223a:	4a34      	ldr	r2, [pc, #208]	; (800230c <HAL_ADC_Start_DMA+0x140>)
 800223c:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800223e:	4a34      	ldr	r2, [pc, #208]	; (8002310 <HAL_ADC_Start_DMA+0x144>)
 8002240:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002242:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002246:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002248:	6872      	ldr	r2, [r6, #4]
 800224a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800224e:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002250:	68b2      	ldr	r2, [r6, #8]
 8002252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002256:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002258:	460a      	mov	r2, r1
 800225a:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 800225e:	f000 fa6f 	bl	8002740 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002262:	492c      	ldr	r1, [pc, #176]	; (8002314 <HAL_ADC_Start_DMA+0x148>)
 8002264:	682b      	ldr	r3, [r5, #0]
 8002266:	684a      	ldr	r2, [r1, #4]
 8002268:	482b      	ldr	r0, [pc, #172]	; (8002318 <HAL_ADC_Start_DMA+0x14c>)
 800226a:	f012 021f 	ands.w	r2, r2, #31
 800226e:	d132      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002270:	4283      	cmp	r3, r0
 8002272:	d007      	beq.n	8002284 <HAL_ADC_Start_DMA+0xb8>
 8002274:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8002278:	4283      	cmp	r3, r0
 800227a:	d125      	bne.n	80022c8 <HAL_ADC_Start_DMA+0xfc>
 800227c:	6849      	ldr	r1, [r1, #4]
 800227e:	f011 0f1f 	tst.w	r1, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002282:	d132      	bne.n	80022ea <HAL_ADC_Start_DMA+0x11e>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002284:	6898      	ldr	r0, [r3, #8]
 8002286:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800228a:	d103      	bne.n	8002294 <HAL_ADC_Start_DMA+0xc8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002292:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002294:	2200      	movs	r2, #0
 8002296:	e028      	b.n	80022ea <HAL_ADC_Start_DMA+0x11e>
    __HAL_ADC_ENABLE(hadc);
 8002298:	68b2      	ldr	r2, [r6, #8]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022a0:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_ADC_Start_DMA+0x150>)
 80022a2:	6810      	ldr	r0, [r2, #0]
 80022a4:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <HAL_ADC_Start_DMA+0x154>)
 80022a6:	fbb0 f0f2 	udiv	r0, r0, r2
 80022aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80022ae:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80022b0:	9a01      	ldr	r2, [sp, #4]
 80022b2:	2a00      	cmp	r2, #0
 80022b4:	d09b      	beq.n	80021ee <HAL_ADC_Start_DMA+0x22>
      counter--;
 80022b6:	9a01      	ldr	r2, [sp, #4]
 80022b8:	3a01      	subs	r2, #1
 80022ba:	9201      	str	r2, [sp, #4]
 80022bc:	e7f8      	b.n	80022b0 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022be:	68b2      	ldr	r2, [r6, #8]
 80022c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022c4:	60b2      	str	r2, [r6, #8]
 80022c6:	e795      	b.n	80021f4 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022c8:	4816      	ldr	r0, [pc, #88]	; (8002324 <HAL_ADC_Start_DMA+0x158>)
 80022ca:	4283      	cmp	r3, r0
 80022cc:	d10d      	bne.n	80022ea <HAL_ADC_Start_DMA+0x11e>
 80022ce:	6849      	ldr	r1, [r1, #4]
 80022d0:	f011 0f10 	tst.w	r1, #16
 80022d4:	e7d5      	b.n	8002282 <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022d6:	4283      	cmp	r3, r0
 80022d8:	d1dc      	bne.n	8002294 <HAL_ADC_Start_DMA+0xc8>
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	f012 5240 	ands.w	r2, r2, #805306368	; 0x30000000
 80022e0:	d10e      	bne.n	8002300 <HAL_ADC_Start_DMA+0x134>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022e2:	6899      	ldr	r1, [r3, #8]
 80022e4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80022e8:	6099      	str	r1, [r3, #8]
}
 80022ea:	4610      	mov	r0, r2
 80022ec:	b002      	add	sp, #8
 80022ee:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80022f2:	f043 0310 	orr.w	r3, r3, #16
 80022f6:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	646b      	str	r3, [r5, #68]	; 0x44
  return HAL_OK;
 8002300:	4622      	mov	r2, r4
 8002302:	e7f2      	b.n	80022ea <HAL_ADC_Start_DMA+0x11e>
  __HAL_LOCK(hadc);
 8002304:	2202      	movs	r2, #2
 8002306:	e7f0      	b.n	80022ea <HAL_ADC_Start_DMA+0x11e>
 8002308:	080023bf 	.word	0x080023bf
 800230c:	0800239d 	.word	0x0800239d
 8002310:	080023a9 	.word	0x080023a9
 8002314:	40012300 	.word	0x40012300
 8002318:	40012000 	.word	0x40012000
 800231c:	20000000 	.word	0x20000000
 8002320:	000f4240 	.word	0x000f4240
 8002324:	40012200 	.word	0x40012200

08002328 <HAL_ADC_Stop_DMA>:
{
 8002328:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800232a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800232e:	2b01      	cmp	r3, #1
{
 8002330:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002332:	d030      	beq.n	8002396 <HAL_ADC_Stop_DMA+0x6e>
  __HAL_ADC_DISABLE(hadc);
 8002334:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8002336:	2301      	movs	r3, #1
 8002338:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 800233c:	6893      	ldr	r3, [r2, #8]
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002344:	6893      	ldr	r3, [r2, #8]
 8002346:	f013 0301 	ands.w	r3, r3, #1
 800234a:	d122      	bne.n	8002392 <HAL_ADC_Stop_DMA+0x6a>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800234c:	6891      	ldr	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800234e:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002350:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002354:	6091      	str	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002356:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 800235a:	2a02      	cmp	r2, #2
 800235c:	d117      	bne.n	800238e <HAL_ADC_Stop_DMA+0x66>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800235e:	f000 fa29 	bl	80027b4 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8002362:	b118      	cbz	r0, 800236c <HAL_ADC_Stop_DMA+0x44>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002364:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800236c:	6822      	ldr	r2, [r4, #0]
 800236e:	6853      	ldr	r3, [r2, #4]
 8002370:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002374:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002378:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002386:	2300      	movs	r3, #0
 8002388:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800238c:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800238e:	4618      	mov	r0, r3
 8002390:	e7ec      	b.n	800236c <HAL_ADC_Stop_DMA+0x44>
 8002392:	2000      	movs	r0, #0
 8002394:	e7f7      	b.n	8002386 <HAL_ADC_Stop_DMA+0x5e>
  __HAL_LOCK(hadc);
 8002396:	2002      	movs	r0, #2
 8002398:	e7f8      	b.n	800238c <HAL_ADC_Stop_DMA+0x64>

0800239a <HAL_ADC_ConvHalfCpltCallback>:
 800239a:	4770      	bx	lr

0800239c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800239c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800239e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80023a0:	f7ff fffb 	bl	800239a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023a4:	bd08      	pop	{r3, pc}

080023a6 <HAL_ADC_ErrorCallback>:
 80023a6:	4770      	bx	lr

080023a8 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80023aa:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80023ac:	2340      	movs	r3, #64	; 0x40
 80023ae:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80023b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80023b2:	f043 0304 	orr.w	r3, r3, #4
 80023b6:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023b8:	f7ff fff5 	bl	80023a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023bc:	bd08      	pop	{r3, pc}

080023be <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023be:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c2:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80023c6:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023ca:	d123      	bne.n	8002414 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	6891      	ldr	r1, [r2, #8]
 80023d6:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80023da:	d117      	bne.n	800240c <ADC_DMAConvCplt+0x4e>
 80023dc:	7e19      	ldrb	r1, [r3, #24]
 80023de:	b9a9      	cbnz	r1, 800240c <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023e2:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80023e6:	d002      	beq.n	80023ee <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023e8:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023ea:	0548      	lsls	r0, r1, #21
 80023ec:	d40e      	bmi.n	800240c <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023ee:	6851      	ldr	r1, [r2, #4]
 80023f0:	f021 0120 	bic.w	r1, r1, #32
 80023f4:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002400:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002402:	bf5e      	ittt	pl
 8002404:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8002406:	f042 0201 	orrpl.w	r2, r2, #1
 800240a:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f911 	bl	8001634 <HAL_ADC_ConvCpltCallback>
}
 8002412:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002414:	06d2      	lsls	r2, r2, #27
 8002416:	d503      	bpl.n	8002420 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff ffc4 	bl	80023a6 <HAL_ADC_ErrorCallback>
 800241e:	e7f8      	b.n	8002412 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002428:	4718      	bx	r3
	...

0800242c <HAL_ADC_ConfigChannel>:
{
 800242c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002432:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d064      	beq.n	8002504 <HAL_ADC_ConfigChannel+0xd8>
 800243a:	2301      	movs	r3, #1
 800243c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002440:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002442:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002444:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002446:	2d09      	cmp	r5, #9
 8002448:	b2ac      	uxth	r4, r5
 800244a:	d931      	bls.n	80024b0 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800244c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002450:	68df      	ldr	r7, [r3, #12]
 8002452:	3a1e      	subs	r2, #30
 8002454:	f04f 0c07 	mov.w	ip, #7
 8002458:	fa0c fc02 	lsl.w	ip, ip, r2
 800245c:	ea27 070c 	bic.w	r7, r7, ip
 8002460:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002462:	68df      	ldr	r7, [r3, #12]
 8002464:	fa06 f202 	lsl.w	r2, r6, r2
 8002468:	433a      	orrs	r2, r7
 800246a:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800246c:	6849      	ldr	r1, [r1, #4]
 800246e:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002470:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8002474:	d82b      	bhi.n	80024ce <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002476:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002478:	3a05      	subs	r2, #5
 800247a:	261f      	movs	r6, #31
 800247c:	4096      	lsls	r6, r2
 800247e:	ea21 0106 	bic.w	r1, r1, r6
 8002482:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002486:	fa04 f202 	lsl.w	r2, r4, r2
 800248a:	430a      	orrs	r2, r1
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800248e:	4a2b      	ldr	r2, [pc, #172]	; (800253c <HAL_ADC_ConfigChannel+0x110>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d107      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x78>
 8002494:	2d12      	cmp	r5, #18
 8002496:	d137      	bne.n	8002508 <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002498:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800249c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 80024a4:	2300      	movs	r3, #0
 80024a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80024aa:	4618      	mov	r0, r3
}
 80024ac:	b003      	add	sp, #12
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80024b6:	2707      	movs	r7, #7
 80024b8:	fa07 f70c 	lsl.w	r7, r7, ip
 80024bc:	ea22 0207 	bic.w	r2, r2, r7
 80024c0:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024c2:	691a      	ldr	r2, [r3, #16]
 80024c4:	fa06 f60c 	lsl.w	r6, r6, ip
 80024c8:	4316      	orrs	r6, r2
 80024ca:	611e      	str	r6, [r3, #16]
 80024cc:	e7ce      	b.n	800246c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80024ce:	290c      	cmp	r1, #12
 80024d0:	f04f 011f 	mov.w	r1, #31
 80024d4:	d80b      	bhi.n	80024ee <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024d6:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80024d8:	3a23      	subs	r2, #35	; 0x23
 80024da:	4091      	lsls	r1, r2
 80024dc:	ea26 0101 	bic.w	r1, r6, r1
 80024e0:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024e4:	fa04 f202 	lsl.w	r2, r4, r2
 80024e8:	430a      	orrs	r2, r1
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
 80024ec:	e7cf      	b.n	800248e <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024ee:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80024f0:	3a41      	subs	r2, #65	; 0x41
 80024f2:	4091      	lsls	r1, r2
 80024f4:	ea26 0101 	bic.w	r1, r6, r1
 80024f8:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fc:	4094      	lsls	r4, r2
 80024fe:	430c      	orrs	r4, r1
 8002500:	62dc      	str	r4, [r3, #44]	; 0x2c
 8002502:	e7c4      	b.n	800248e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8002504:	2002      	movs	r0, #2
 8002506:	e7d1      	b.n	80024ac <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002508:	f1a5 0310 	sub.w	r3, r5, #16
 800250c:	2b01      	cmp	r3, #1
 800250e:	d8c9      	bhi.n	80024a4 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002510:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_ADC_ConfigChannel+0x114>)
 8002512:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002514:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002516:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800251a:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800251c:	d1c2      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_ADC_ConfigChannel+0x118>)
 8002520:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_ADC_ConfigChannel+0x11c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	fbb3 f3f2 	udiv	r3, r3, r2
 8002528:	220a      	movs	r2, #10
 800252a:	4353      	muls	r3, r2
        counter--;
 800252c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800252e:	9b01      	ldr	r3, [sp, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0b7      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 8002534:	9b01      	ldr	r3, [sp, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	e7f8      	b.n	800252c <HAL_ADC_ConfigChannel+0x100>
 800253a:	bf00      	nop
 800253c:	40012000 	.word	0x40012000
 8002540:	40012300 	.word	0x40012300
 8002544:	20000000 	.word	0x20000000
 8002548:	000f4240 	.word	0x000f4240

0800254c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800254c:	4907      	ldr	r1, [pc, #28]	; (800256c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800254e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002550:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800255e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002568:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800256a:	4770      	bx	lr
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002570:	4b16      	ldr	r3, [pc, #88]	; (80025cc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002572:	b530      	push	{r4, r5, lr}
 8002574:	68dc      	ldr	r4, [r3, #12]
 8002576:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800257a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	2b04      	cmp	r3, #4
 8002582:	bf28      	it	cs
 8002584:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002586:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258c:	bf8c      	ite	hi
 800258e:	3c03      	subhi	r4, #3
 8002590:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002592:	fa05 f303 	lsl.w	r3, r5, r3
 8002596:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259a:	40a5      	lsls	r5, r4
 800259c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80025a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	bfac      	ite	ge
 80025aa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	4a08      	ldrlt	r2, [pc, #32]	; (80025d0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b4:	bfb8      	it	lt
 80025b6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	bfaa      	itet	ge
 80025be:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80025c8:	bd30      	pop	{r4, r5, pc}
 80025ca:	bf00      	nop
 80025cc:	e000ed00 	.word	0xe000ed00
 80025d0:	e000ed14 	.word	0xe000ed14

080025d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80025d4:	2800      	cmp	r0, #0
 80025d6:	db07      	blt.n	80025e8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d8:	0941      	lsrs	r1, r0, #5
 80025da:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_NVIC_EnableIRQ+0x18>)
 80025dc:	f000 001f 	and.w	r0, r0, #31
 80025e0:	2301      	movs	r3, #1
 80025e2:	4083      	lsls	r3, r0
 80025e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f0:	3801      	subs	r0, #1
 80025f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80025f6:	d20b      	bcs.n	8002610 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	4a05      	ldr	r2, [pc, #20]	; (8002614 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fe:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	21f0      	movs	r1, #240	; 0xf0
 8002602:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002606:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002608:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800260e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002610:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002618:	6803      	ldr	r3, [r0, #0]
{
 800261a:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800261c:	b2da      	uxtb	r2, r3
 800261e:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002620:	4c07      	ldr	r4, [pc, #28]	; (8002640 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002622:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002626:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800262a:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800262c:	bf88      	it	hi
 800262e:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002630:	2118      	movs	r1, #24
 8002632:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002636:	5c61      	ldrb	r1, [r4, r1]
 8002638:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800263a:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800263c:	4618      	mov	r0, r3
 800263e:	bd10      	pop	{r4, pc}
 8002640:	08007683 	.word	0x08007683

08002644 <HAL_DMA_Init>:
{
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002648:	f7ff fd00 	bl	800204c <HAL_GetTick>
 800264c:	4605      	mov	r5, r0
  if(hdma == NULL)
 800264e:	2c00      	cmp	r4, #0
 8002650:	d071      	beq.n	8002736 <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002652:	2302      	movs	r3, #2
 8002654:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002658:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800265a:	2300      	movs	r3, #0
 800265c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002660:	6813      	ldr	r3, [r2, #0]
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002668:	6822      	ldr	r2, [r4, #0]
 800266a:	6813      	ldr	r3, [r2, #0]
 800266c:	07d8      	lsls	r0, r3, #31
 800266e:	d42e      	bmi.n	80026ce <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8002670:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002672:	4832      	ldr	r0, [pc, #200]	; (800273c <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002674:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002676:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002678:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800267c:	432b      	orrs	r3, r5
 800267e:	68e5      	ldr	r5, [r4, #12]
 8002680:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002682:	6925      	ldr	r5, [r4, #16]
 8002684:	432b      	orrs	r3, r5
 8002686:	6965      	ldr	r5, [r4, #20]
 8002688:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268a:	69e5      	ldr	r5, [r4, #28]
 800268c:	430b      	orrs	r3, r1
 800268e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002690:	6a25      	ldr	r5, [r4, #32]
 8002692:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002694:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002696:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002698:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800269a:	bf02      	ittt	eq
 800269c:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80026a0:	4335      	orreq	r5, r6
 80026a2:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80026a4:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 80026a6:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026a8:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026aa:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80026ae:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b2:	d132      	bne.n	800271a <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 80026b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026b6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80026b8:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026ba:	b375      	cbz	r5, 800271a <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026bc:	b991      	cbnz	r1, 80026e4 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 80026be:	2801      	cmp	r0, #1
 80026c0:	d020      	beq.n	8002704 <HAL_DMA_Init+0xc0>
 80026c2:	f030 0102 	bics.w	r1, r0, #2
 80026c6:	d128      	bne.n	800271a <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c8:	01e9      	lsls	r1, r5, #7
 80026ca:	d526      	bpl.n	800271a <HAL_DMA_Init+0xd6>
 80026cc:	e01d      	b.n	800270a <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ce:	f7ff fcbd 	bl	800204c <HAL_GetTick>
 80026d2:	1b40      	subs	r0, r0, r5
 80026d4:	2805      	cmp	r0, #5
 80026d6:	d9c7      	bls.n	8002668 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026d8:	2320      	movs	r3, #32
 80026da:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026dc:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80026de:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026e4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80026e8:	d113      	bne.n	8002712 <HAL_DMA_Init+0xce>
    switch (tmp)
 80026ea:	2803      	cmp	r0, #3
 80026ec:	d815      	bhi.n	800271a <HAL_DMA_Init+0xd6>
 80026ee:	a101      	add	r1, pc, #4	; (adr r1, 80026f4 <HAL_DMA_Init+0xb0>)
 80026f0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80026f4:	0800270b 	.word	0x0800270b
 80026f8:	080026c9 	.word	0x080026c9
 80026fc:	0800270b 	.word	0x0800270b
 8002700:	08002705 	.word	0x08002705
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002704:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002708:	d107      	bne.n	800271a <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800270a:	2340      	movs	r3, #64	; 0x40
 800270c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800270e:	2001      	movs	r0, #1
 8002710:	e7e5      	b.n	80026de <HAL_DMA_Init+0x9a>
    switch (tmp)
 8002712:	2802      	cmp	r0, #2
 8002714:	d9f9      	bls.n	800270a <HAL_DMA_Init+0xc6>
 8002716:	2803      	cmp	r0, #3
 8002718:	d0d6      	beq.n	80026c8 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 800271a:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ff7b 	bl	8002618 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002722:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002724:	233f      	movs	r3, #63	; 0x3f
 8002726:	4093      	lsls	r3, r2
 8002728:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800272c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800272e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002730:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002734:	e7d5      	b.n	80026e2 <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 8002736:	2001      	movs	r0, #1
 8002738:	e7d3      	b.n	80026e2 <HAL_DMA_Init+0x9e>
 800273a:	bf00      	nop
 800273c:	f010803f 	.word	0xf010803f

08002740 <HAL_DMA_Start_IT>:
{
 8002740:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8002742:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002746:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002748:	2c01      	cmp	r4, #1
 800274a:	d031      	beq.n	80027b0 <HAL_DMA_Start_IT+0x70>
 800274c:	2401      	movs	r4, #1
 800274e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002752:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002756:	2c01      	cmp	r4, #1
 8002758:	f04f 0500 	mov.w	r5, #0
 800275c:	f04f 0402 	mov.w	r4, #2
 8002760:	d124      	bne.n	80027ac <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8002762:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002766:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002768:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800276a:	6825      	ldr	r5, [r4, #0]
 800276c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002770:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002772:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002774:	6883      	ldr	r3, [r0, #8]
 8002776:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8002778:	bf0e      	itee	eq
 800277a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800277c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800277e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002780:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002782:	bf08      	it	eq
 8002784:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002786:	233f      	movs	r3, #63	; 0x3f
 8002788:	4093      	lsls	r3, r2
 800278a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	f043 0316 	orr.w	r3, r3, #22
 8002792:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002794:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002796:	b11b      	cbz	r3, 80027a0 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80027a0:	6823      	ldr	r3, [r4, #0]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a8:	2000      	movs	r0, #0
}
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80027ac:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80027b0:	2002      	movs	r0, #2
 80027b2:	e7fa      	b.n	80027aa <HAL_DMA_Start_IT+0x6a>

080027b4 <HAL_DMA_Abort>:
{
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027b8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80027ba:	f7ff fc47 	bl	800204c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027be:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80027c2:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80027c4:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027c6:	d006      	beq.n	80027d6 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80027ce:	2300      	movs	r3, #0
 80027d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80027d4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	f022 0216 	bic.w	r2, r2, #22
 80027de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027ea:	b90a      	cbnz	r2, 80027f0 <HAL_DMA_Abort+0x3c>
 80027ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80027ee:	b11a      	cbz	r2, 80027f8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	f022 0208 	bic.w	r2, r2, #8
 80027f6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f013 0301 	ands.w	r3, r3, #1
 8002808:	d108      	bne.n	800281c <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800280c:	223f      	movs	r2, #63	; 0x3f
 800280e:	408a      	lsls	r2, r1
 8002810:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002812:	2201      	movs	r2, #1
 8002814:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8002818:	4618      	mov	r0, r3
 800281a:	e7d8      	b.n	80027ce <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800281c:	f7ff fc16 	bl	800204c <HAL_GetTick>
 8002820:	1b40      	subs	r0, r0, r5
 8002822:	2805      	cmp	r0, #5
 8002824:	d9ec      	bls.n	8002800 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002826:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002828:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800282a:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800282c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8002830:	e7cd      	b.n	80027ce <HAL_DMA_Abort+0x1a>
	...

08002834 <HAL_DMA_IRQHandler>:
{
 8002834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800283a:	4b5c      	ldr	r3, [pc, #368]	; (80029ac <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800283c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800283e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002840:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002842:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002844:	2208      	movs	r2, #8
 8002846:	409a      	lsls	r2, r3
 8002848:	4232      	tst	r2, r6
{
 800284a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800284c:	d00c      	beq.n	8002868 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800284e:	6801      	ldr	r1, [r0, #0]
 8002850:	6808      	ldr	r0, [r1, #0]
 8002852:	0740      	lsls	r0, r0, #29
 8002854:	d508      	bpl.n	8002868 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002856:	6808      	ldr	r0, [r1, #0]
 8002858:	f020 0004 	bic.w	r0, r0, #4
 800285c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800285e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002860:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002868:	2201      	movs	r2, #1
 800286a:	409a      	lsls	r2, r3
 800286c:	4232      	tst	r2, r6
 800286e:	d008      	beq.n	8002882 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002870:	6821      	ldr	r1, [r4, #0]
 8002872:	6949      	ldr	r1, [r1, #20]
 8002874:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002876:	bf41      	itttt	mi
 8002878:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800287a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800287c:	f042 0202 	orrmi.w	r2, r2, #2
 8002880:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002882:	2204      	movs	r2, #4
 8002884:	409a      	lsls	r2, r3
 8002886:	4232      	tst	r2, r6
 8002888:	d008      	beq.n	800289c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800288a:	6821      	ldr	r1, [r4, #0]
 800288c:	6809      	ldr	r1, [r1, #0]
 800288e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002890:	bf41      	itttt	mi
 8002892:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002894:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002896:	f042 0204 	orrmi.w	r2, r2, #4
 800289a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800289c:	2210      	movs	r2, #16
 800289e:	409a      	lsls	r2, r3
 80028a0:	4232      	tst	r2, r6
 80028a2:	d010      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	0709      	lsls	r1, r1, #28
 80028aa:	d50c      	bpl.n	80028c6 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028ac:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	0350      	lsls	r0, r2, #13
 80028b2:	d537      	bpl.n	8002924 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	0319      	lsls	r1, r3, #12
 80028b8:	d401      	bmi.n	80028be <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80028ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028bc:	e000      	b.n	80028c0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028be:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80028c0:	b10b      	cbz	r3, 80028c6 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80028c2:	4620      	mov	r0, r4
 80028c4:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80028c8:	2220      	movs	r2, #32
 80028ca:	408a      	lsls	r2, r1
 80028cc:	4232      	tst	r2, r6
 80028ce:	d03a      	beq.n	8002946 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	06c6      	lsls	r6, r0, #27
 80028d6:	d536      	bpl.n	8002946 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028d8:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028da:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80028de:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028e0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028e2:	d127      	bne.n	8002934 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028e4:	f022 0216 	bic.w	r2, r2, #22
 80028e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028ea:	695a      	ldr	r2, [r3, #20]
 80028ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028f4:	b90a      	cbnz	r2, 80028fa <HAL_DMA_IRQHandler+0xc6>
 80028f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80028f8:	b11a      	cbz	r2, 8002902 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	f022 0208 	bic.w	r2, r2, #8
 8002900:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002902:	233f      	movs	r3, #63	; 0x3f
 8002904:	408b      	lsls	r3, r1
 8002906:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002908:	2301      	movs	r3, #1
 800290a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800290e:	2300      	movs	r3, #0
 8002910:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002914:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002916:	2b00      	cmp	r3, #0
 8002918:	d045      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 800291a:	4620      	mov	r0, r4
}
 800291c:	b003      	add	sp, #12
 800291e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002922:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002928:	bf5e      	ittt	pl
 800292a:	681a      	ldrpl	r2, [r3, #0]
 800292c:	f022 0208 	bicpl.w	r2, r2, #8
 8002930:	601a      	strpl	r2, [r3, #0]
 8002932:	e7c2      	b.n	80028ba <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002934:	0350      	lsls	r0, r2, #13
 8002936:	d527      	bpl.n	8002988 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0319      	lsls	r1, r3, #12
 800293c:	d431      	bmi.n	80029a2 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800293e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002940:	b10b      	cbz	r3, 8002946 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8002942:	4620      	mov	r0, r4
 8002944:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002946:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002948:	b36b      	cbz	r3, 80029a6 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800294a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800294c:	07da      	lsls	r2, r3, #31
 800294e:	d519      	bpl.n	8002984 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8002950:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002952:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002956:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800295a:	2305      	movs	r3, #5
 800295c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002960:	6813      	ldr	r3, [r2, #0]
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002968:	9b01      	ldr	r3, [sp, #4]
 800296a:	3301      	adds	r3, #1
 800296c:	42bb      	cmp	r3, r7
 800296e:	9301      	str	r3, [sp, #4]
 8002970:	d802      	bhi.n	8002978 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002972:	6813      	ldr	r3, [r2, #0]
 8002974:	07db      	lsls	r3, r3, #31
 8002976:	d4f7      	bmi.n	8002968 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002978:	2301      	movs	r3, #1
 800297a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800297e:	2300      	movs	r3, #0
 8002980:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002984:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002986:	e7c6      	b.n	8002916 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800298e:	d108      	bne.n	80029a2 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	f021 0110 	bic.w	r1, r1, #16
 8002996:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002998:	2301      	movs	r3, #1
 800299a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800299e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80029a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029a4:	e7cc      	b.n	8002940 <HAL_DMA_IRQHandler+0x10c>
}
 80029a6:	b003      	add	sp, #12
 80029a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b4:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8002b60 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b8:	4a67      	ldr	r2, [pc, #412]	; (8002b58 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ba:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029bc:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80029be:	2401      	movs	r4, #1
 80029c0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c2:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80029c6:	43ac      	bics	r4, r5
 80029c8:	f040 80b1 	bne.w	8002b2e <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029cc:	684d      	ldr	r5, [r1, #4]
 80029ce:	f005 0403 	and.w	r4, r5, #3
 80029d2:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029d6:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029da:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e4:	d834      	bhi.n	8002a50 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80029e6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ec:	68cf      	ldr	r7, [r1, #12]
 80029ee:	fa07 f708 	lsl.w	r7, r7, r8
 80029f2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80029f6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80029f8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029fa:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029fe:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002a02:	409f      	lsls	r7, r3
 8002a04:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002a08:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002a0a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a0c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a10:	688f      	ldr	r7, [r1, #8]
 8002a12:	fa07 f708 	lsl.w	r7, r7, r8
 8002a16:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002a1c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a1e:	d119      	bne.n	8002a54 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002a20:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002a24:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a28:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002a2c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a30:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002a34:	f04f 0e0f 	mov.w	lr, #15
 8002a38:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002a3c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a40:	690f      	ldr	r7, [r1, #16]
 8002a42:	fa07 f70b 	lsl.w	r7, r7, fp
 8002a46:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002a4a:	f8ca 7020 	str.w	r7, [sl, #32]
 8002a4e:	e001      	b.n	8002a54 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a50:	2c03      	cmp	r4, #3
 8002a52:	d1da      	bne.n	8002a0a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002a54:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a56:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a5a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a5e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002a62:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a64:	d063      	beq.n	8002b2e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	f04f 0a00 	mov.w	sl, #0
 8002a6a:	f8cd a004 	str.w	sl, [sp, #4]
 8002a6e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a72:	4c3a      	ldr	r4, [pc, #232]	; (8002b5c <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a74:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002a78:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002a7c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002a80:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002a84:	9601      	str	r6, [sp, #4]
 8002a86:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a88:	f023 0603 	bic.w	r6, r3, #3
 8002a8c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002a90:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a94:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a98:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a9c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002aa0:	270f      	movs	r7, #15
 8002aa2:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aa6:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa8:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aac:	d046      	beq.n	8002b3c <HAL_GPIO_Init+0x18c>
 8002aae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ab2:	42a0      	cmp	r0, r4
 8002ab4:	d044      	beq.n	8002b40 <HAL_GPIO_Init+0x190>
 8002ab6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002aba:	42a0      	cmp	r0, r4
 8002abc:	d042      	beq.n	8002b44 <HAL_GPIO_Init+0x194>
 8002abe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ac2:	42a0      	cmp	r0, r4
 8002ac4:	d040      	beq.n	8002b48 <HAL_GPIO_Init+0x198>
 8002ac6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002aca:	42a0      	cmp	r0, r4
 8002acc:	d03e      	beq.n	8002b4c <HAL_GPIO_Init+0x19c>
 8002ace:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ad2:	42a0      	cmp	r0, r4
 8002ad4:	d03c      	beq.n	8002b50 <HAL_GPIO_Init+0x1a0>
 8002ad6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ada:	42a0      	cmp	r0, r4
 8002adc:	d03a      	beq.n	8002b54 <HAL_GPIO_Init+0x1a4>
 8002ade:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002ae2:	42a0      	cmp	r0, r4
 8002ae4:	bf0c      	ite	eq
 8002ae6:	2407      	moveq	r4, #7
 8002ae8:	2408      	movne	r4, #8
 8002aea:	fa04 f40e 	lsl.w	r4, r4, lr
 8002aee:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002af0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8002af2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002af4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002af8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002afa:	bf54      	ite	pl
 8002afc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002afe:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002b02:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002b04:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b06:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002b08:	bf54      	ite	pl
 8002b0a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002b0c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002b10:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8002b12:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b14:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002b16:	bf54      	ite	pl
 8002b18:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002b1a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002b1e:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b20:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b22:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002b24:	bf54      	ite	pl
 8002b26:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002b28:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002b2c:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2e:	3301      	adds	r3, #1
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	f47f af43 	bne.w	80029bc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002b36:	b003      	add	sp, #12
 8002b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b3c:	4654      	mov	r4, sl
 8002b3e:	e7d4      	b.n	8002aea <HAL_GPIO_Init+0x13a>
 8002b40:	2401      	movs	r4, #1
 8002b42:	e7d2      	b.n	8002aea <HAL_GPIO_Init+0x13a>
 8002b44:	2402      	movs	r4, #2
 8002b46:	e7d0      	b.n	8002aea <HAL_GPIO_Init+0x13a>
 8002b48:	2403      	movs	r4, #3
 8002b4a:	e7ce      	b.n	8002aea <HAL_GPIO_Init+0x13a>
 8002b4c:	2404      	movs	r4, #4
 8002b4e:	e7cc      	b.n	8002aea <HAL_GPIO_Init+0x13a>
 8002b50:	2405      	movs	r4, #5
 8002b52:	e7ca      	b.n	8002aea <HAL_GPIO_Init+0x13a>
 8002b54:	2406      	movs	r4, #6
 8002b56:	e7c8      	b.n	8002aea <HAL_GPIO_Init+0x13a>
 8002b58:	40013c00 	.word	0x40013c00
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40023800 	.word	0x40023800

08002b64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	b10a      	cbz	r2, 8002b6a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b66:	6181      	str	r1, [r0, #24]
  }
}
 8002b68:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b6a:	0409      	lsls	r1, r1, #16
 8002b6c:	e7fb      	b.n	8002b66 <HAL_GPIO_WritePin+0x2>

08002b6e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b6e:	6801      	ldr	r1, [r0, #0]
 8002b70:	694b      	ldr	r3, [r1, #20]
 8002b72:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	d010      	beq.n	8002b9e <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002b80:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b82:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b84:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b8e:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b94:	f043 0304 	orr.w	r3, r3, #4
 8002b98:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	4770      	bx	lr
  }
  return HAL_OK;
 8002b9e:	4618      	mov	r0, r3
}
 8002ba0:	4770      	bx	lr

08002ba2 <I2C_WaitOnFlagUntilTimeout>:
{
 8002ba2:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002ba6:	4606      	mov	r6, r0
 8002ba8:	460f      	mov	r7, r1
 8002baa:	4691      	mov	r9, r2
 8002bac:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002bb2:	6833      	ldr	r3, [r6, #0]
 8002bb4:	f1ba 0f01 	cmp.w	sl, #1
 8002bb8:	bf0c      	ite	eq
 8002bba:	695c      	ldreq	r4, [r3, #20]
 8002bbc:	699c      	ldrne	r4, [r3, #24]
 8002bbe:	ea27 0404 	bic.w	r4, r7, r4
 8002bc2:	b2a4      	uxth	r4, r4
 8002bc4:	fab4 f484 	clz	r4, r4
 8002bc8:	0964      	lsrs	r4, r4, #5
 8002bca:	45a1      	cmp	r9, r4
 8002bcc:	d001      	beq.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002bce:	2000      	movs	r0, #0
 8002bd0:	e017      	b.n	8002c02 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8002bd2:	1c6a      	adds	r2, r5, #1
 8002bd4:	d0ee      	beq.n	8002bb4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd6:	f7ff fa39 	bl	800204c <HAL_GetTick>
 8002bda:	9b08      	ldr	r3, [sp, #32]
 8002bdc:	1ac0      	subs	r0, r0, r3
 8002bde:	42a8      	cmp	r0, r5
 8002be0:	d801      	bhi.n	8002be6 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002be2:	2d00      	cmp	r5, #0
 8002be4:	d1e5      	bne.n	8002bb2 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002be6:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002be8:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002bea:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002bec:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bf0:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002bf6:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bfa:	f042 0220 	orr.w	r2, r2, #32
 8002bfe:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 8002c00:	2001      	movs	r0, #1
}
 8002c02:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	460f      	mov	r7, r1
 8002c0e:	4616      	mov	r6, r2
 8002c10:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c12:	6825      	ldr	r5, [r4, #0]
 8002c14:	6968      	ldr	r0, [r5, #20]
 8002c16:	ea27 0000 	bic.w	r0, r7, r0
 8002c1a:	b280      	uxth	r0, r0
 8002c1c:	b1b8      	cbz	r0, 8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c1e:	696b      	ldr	r3, [r5, #20]
 8002c20:	055a      	lsls	r2, r3, #21
 8002c22:	d516      	bpl.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c24:	682b      	ldr	r3, [r5, #0]
 8002c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002c30:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c32:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c40:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c42:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c46:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002c48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002c4c:	2001      	movs	r0, #1
}
 8002c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	1c73      	adds	r3, r6, #1
 8002c54:	d0de      	beq.n	8002c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7ff f9f9 	bl	800204c <HAL_GetTick>
 8002c5a:	eba0 0008 	sub.w	r0, r0, r8
 8002c5e:	42b0      	cmp	r0, r6
 8002c60:	d801      	bhi.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8002c62:	2e00      	cmp	r6, #0
 8002c64:	d1d5      	bne.n	8002c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c66:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c68:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c70:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002c76:	f042 0220 	orr.w	r2, r2, #32
 8002c7a:	e7e4      	b.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002c7c <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002c7c:	b570      	push	{r4, r5, r6, lr}
 8002c7e:	4604      	mov	r4, r0
 8002c80:	460d      	mov	r5, r1
 8002c82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	061b      	lsls	r3, r3, #24
 8002c8a:	d501      	bpl.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002c8c:	2000      	movs	r0, #0
}
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff ff6c 	bl	8002b6e <I2C_IsAcknowledgeFailed>
 8002c96:	b9a8      	cbnz	r0, 8002cc4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002c98:	1c6a      	adds	r2, r5, #1
 8002c9a:	d0f3      	beq.n	8002c84 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c9c:	f7ff f9d6 	bl	800204c <HAL_GetTick>
 8002ca0:	1b80      	subs	r0, r0, r6
 8002ca2:	42a8      	cmp	r0, r5
 8002ca4:	d801      	bhi.n	8002caa <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8002ca6:	2d00      	cmp	r5, #0
 8002ca8:	d1ec      	bne.n	8002c84 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002caa:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cae:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cb0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002cba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbe:	f042 0220 	orr.w	r2, r2, #32
 8002cc2:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	e7e2      	b.n	8002c8e <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08002cc8 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002cc8:	b570      	push	{r4, r5, r6, lr}
 8002cca:	4604      	mov	r4, r0
 8002ccc:	460d      	mov	r5, r1
 8002cce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	075b      	lsls	r3, r3, #29
 8002cd6:	d501      	bpl.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002cd8:	2000      	movs	r0, #0
}
 8002cda:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f7ff ff46 	bl	8002b6e <I2C_IsAcknowledgeFailed>
 8002ce2:	b9a8      	cbnz	r0, 8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002ce4:	1c6a      	adds	r2, r5, #1
 8002ce6:	d0f3      	beq.n	8002cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce8:	f7ff f9b0 	bl	800204c <HAL_GetTick>
 8002cec:	1b80      	subs	r0, r0, r6
 8002cee:	42a8      	cmp	r0, r5
 8002cf0:	d801      	bhi.n	8002cf6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002cf2:	2d00      	cmp	r5, #0
 8002cf4:	d1ec      	bne.n	8002cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf6:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cf8:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfa:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d04:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d0a:	f042 0220 	orr.w	r2, r2, #32
 8002d0e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002d10:	2001      	movs	r0, #1
 8002d12:	e7e2      	b.n	8002cda <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002d14 <HAL_I2C_Init>:
{
 8002d14:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002d16:	4604      	mov	r4, r0
 8002d18:	b908      	cbnz	r0, 8002d1e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002d1a:	2001      	movs	r0, #1
}
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d26:	b91b      	cbnz	r3, 8002d30 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002d28:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002d2c:	f7fe ff4e 	bl	8001bcc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d30:	2324      	movs	r3, #36	; 0x24
 8002d32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d4e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d50:	f000 fbd4 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d54:	4b3f      	ldr	r3, [pc, #252]	; (8002e54 <HAL_I2C_Init+0x140>)
 8002d56:	6865      	ldr	r5, [r4, #4]
 8002d58:	429d      	cmp	r5, r3
 8002d5a:	bf94      	ite	ls
 8002d5c:	4b3e      	ldrls	r3, [pc, #248]	; (8002e58 <HAL_I2C_Init+0x144>)
 8002d5e:	4b3f      	ldrhi	r3, [pc, #252]	; (8002e5c <HAL_I2C_Init+0x148>)
 8002d60:	4298      	cmp	r0, r3
 8002d62:	bf8c      	ite	hi
 8002d64:	2300      	movhi	r3, #0
 8002d66:	2301      	movls	r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1d6      	bne.n	8002d1a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6e:	4e39      	ldr	r6, [pc, #228]	; (8002e54 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d70:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_I2C_Init+0x14c>)
 8002d74:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d78:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002d7c:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d7e:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d80:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d82:	bf88      	it	hi
 8002d84:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8002d88:	6a11      	ldr	r1, [r2, #32]
 8002d8a:	bf88      	it	hi
 8002d8c:	4373      	mulhi	r3, r6
 8002d8e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002d92:	bf84      	itt	hi
 8002d94:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002d98:	fbb3 f3f6 	udivhi	r3, r3, r6
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002da2:	69d1      	ldr	r1, [r2, #28]
 8002da4:	1e43      	subs	r3, r0, #1
 8002da6:	482b      	ldr	r0, [pc, #172]	; (8002e54 <HAL_I2C_Init+0x140>)
 8002da8:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002dac:	4285      	cmp	r5, r0
 8002dae:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002db2:	d832      	bhi.n	8002e1a <HAL_I2C_Init+0x106>
 8002db4:	006d      	lsls	r5, r5, #1
 8002db6:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002dba:	fbb3 f3f5 	udiv	r3, r3, r5
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4203      	tst	r3, r0
 8002dc2:	d042      	beq.n	8002e4a <HAL_I2C_Init+0x136>
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	4319      	orrs	r1, r3
 8002dca:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dcc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002dd0:	6811      	ldr	r1, [r2, #0]
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002dd8:	430b      	orrs	r3, r1
 8002dda:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ddc:	6891      	ldr	r1, [r2, #8]
 8002dde:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002de2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002de6:	4303      	orrs	r3, r0
 8002de8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002df4:	68d1      	ldr	r1, [r2, #12]
 8002df6:	4303      	orrs	r3, r0
 8002df8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002e00:	6813      	ldr	r3, [r2, #0]
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e08:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0c:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e12:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002e18:	e780      	b.n	8002d1c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e1a:	68a0      	ldr	r0, [r4, #8]
 8002e1c:	b950      	cbnz	r0, 8002e34 <HAL_I2C_Init+0x120>
 8002e1e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e22:	fbb3 f3f5 	udiv	r3, r3, r5
 8002e26:	3301      	adds	r3, #1
 8002e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e2c:	b17b      	cbz	r3, 8002e4e <HAL_I2C_Init+0x13a>
 8002e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e32:	e7c9      	b.n	8002dc8 <HAL_I2C_Init+0xb4>
 8002e34:	2019      	movs	r0, #25
 8002e36:	4368      	muls	r0, r5
 8002e38:	fbb3 f3f0 	udiv	r3, r3, r0
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e42:	b123      	cbz	r3, 8002e4e <HAL_I2C_Init+0x13a>
 8002e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e48:	e7be      	b.n	8002dc8 <HAL_I2C_Init+0xb4>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	e7bc      	b.n	8002dc8 <HAL_I2C_Init+0xb4>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e7ba      	b.n	8002dc8 <HAL_I2C_Init+0xb4>
 8002e52:	bf00      	nop
 8002e54:	000186a0 	.word	0x000186a0
 8002e58:	001e847f 	.word	0x001e847f
 8002e5c:	003d08ff 	.word	0x003d08ff
 8002e60:	000f4240 	.word	0x000f4240

08002e64 <HAL_I2C_Master_Transmit>:
{
 8002e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e68:	4604      	mov	r4, r0
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	4698      	mov	r8, r3
 8002e6e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002e70:	460d      	mov	r5, r1
 8002e72:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff f8ea 	bl	800204c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e78:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002e7c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8002e7e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e80:	d004      	beq.n	8002e8c <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8002e82:	2502      	movs	r5, #2
}
 8002e84:	4628      	mov	r0, r5
 8002e86:	b005      	add	sp, #20
 8002e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e8c:	9000      	str	r0, [sp, #0]
 8002e8e:	495d      	ldr	r1, [pc, #372]	; (8003004 <HAL_I2C_Master_Transmit+0x1a0>)
 8002e90:	2319      	movs	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7ff fe84 	bl	8002ba2 <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d1f1      	bne.n	8002e82 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8002e9e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d0ed      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ea6:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eae:	680b      	ldr	r3, [r1, #0]
 8002eb0:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002eb2:	bf5e      	ittt	pl
 8002eb4:	680b      	ldrpl	r3, [r1, #0]
 8002eb6:	f043 0301 	orrpl.w	r3, r3, #1
 8002eba:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ebc:	680b      	ldr	r3, [r1, #0]
 8002ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ec2:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ec4:	2321      	movs	r3, #33	; 0x21
 8002ec6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eca:	2310      	movs	r3, #16
 8002ecc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002ed4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002eda:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002edc:	4b4a      	ldr	r3, [pc, #296]	; (8003008 <HAL_I2C_Master_Transmit+0x1a4>)
 8002ede:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ee0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002ee2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d004      	beq.n	8002ef4 <HAL_I2C_Master_Transmit+0x90>
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d002      	beq.n	8002ef4 <HAL_I2C_Master_Transmit+0x90>
 8002eee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ef2:	d104      	bne.n	8002efe <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef4:	680b      	ldr	r3, [r1, #0]
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002efa:	600b      	str	r3, [r1, #0]
 8002efc:	e002      	b.n	8002f04 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002efe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f00:	2b12      	cmp	r3, #18
 8002f02:	d0f7      	beq.n	8002ef4 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f04:	2200      	movs	r2, #0
 8002f06:	9600      	str	r6, [sp, #0]
 8002f08:	463b      	mov	r3, r7
 8002f0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f0e:	4620      	mov	r0, r4
 8002f10:	f7ff fe47 	bl	8002ba2 <I2C_WaitOnFlagUntilTimeout>
 8002f14:	6822      	ldr	r2, [r4, #0]
 8002f16:	b138      	cbz	r0, 8002f28 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f18:	6813      	ldr	r3, [r2, #0]
 8002f1a:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f1c:	bf44      	itt	mi
 8002f1e:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8002f22:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002f24:	2501      	movs	r5, #1
 8002f26:	e7ad      	b.n	8002e84 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f28:	6923      	ldr	r3, [r4, #16]
 8002f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f2e:	d121      	bne.n	8002f74 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f30:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002f34:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f36:	4935      	ldr	r1, [pc, #212]	; (800300c <HAL_I2C_Master_Transmit+0x1a8>)
 8002f38:	4633      	mov	r3, r6
 8002f3a:	463a      	mov	r2, r7
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f7ff fe62 	bl	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f42:	4605      	mov	r5, r0
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d1ed      	bne.n	8002f24 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	9003      	str	r0, [sp, #12]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	9203      	str	r2, [sp, #12]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	9303      	str	r3, [sp, #12]
 8002f54:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002f56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002f58:	b9f3      	cbnz	r3, 8002f98 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	6821      	ldr	r1, [r4, #0]
 8002f5c:	680a      	ldr	r2, [r1, #0]
 8002f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f62:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	2220      	movs	r2, #32
 8002f66:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002f6a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002f72:	e787      	b.n	8002e84 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f74:	11eb      	asrs	r3, r5, #7
 8002f76:	f003 0306 	and.w	r3, r3, #6
 8002f7a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002f7e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f80:	4923      	ldr	r1, [pc, #140]	; (8003010 <HAL_I2C_Master_Transmit+0x1ac>)
 8002f82:	4633      	mov	r3, r6
 8002f84:	463a      	mov	r2, r7
 8002f86:	4620      	mov	r0, r4
 8002f88:	f7ff fe3d 	bl	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d1c9      	bne.n	8002f24 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	b2ed      	uxtb	r5, r5
 8002f94:	611d      	str	r5, [r3, #16]
 8002f96:	e7ce      	b.n	8002f36 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	4632      	mov	r2, r6
 8002f9a:	4639      	mov	r1, r7
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	f7ff fe6d 	bl	8002c7c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa2:	b140      	cbz	r0, 8002fb6 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d1bc      	bne.n	8002f24 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	6813      	ldr	r3, [r2, #0]
 8002fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e7b6      	b.n	8002f24 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fb8:	6820      	ldr	r0, [r4, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002fc0:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 8002fc2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002fc4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002fc6:	3a01      	subs	r2, #1
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002fcc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fce:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 8002fd2:	1e51      	subs	r1, r2, #1
 8002fd4:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fd6:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8002fda:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0x190>
 8002fde:	b149      	cbz	r1, 8002ff4 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe0:	7859      	ldrb	r1, [r3, #1]
 8002fe2:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002fe8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002fee:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002ff0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002ff2:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	4632      	mov	r2, r6
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff fe65 	bl	8002cc8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	d0a9      	beq.n	8002f56 <HAL_I2C_Master_Transmit+0xf2>
 8003002:	e7cf      	b.n	8002fa4 <HAL_I2C_Master_Transmit+0x140>
 8003004:	00100002 	.word	0x00100002
 8003008:	ffff0000 	.word	0xffff0000
 800300c:	00010002 	.word	0x00010002
 8003010:	00010008 	.word	0x00010008

08003014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003018:	4604      	mov	r4, r0
 800301a:	b340      	cbz	r0, 800306e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301c:	6803      	ldr	r3, [r0, #0]
 800301e:	07dd      	lsls	r5, r3, #31
 8003020:	d410      	bmi.n	8003044 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	6823      	ldr	r3, [r4, #0]
 8003024:	0798      	lsls	r0, r3, #30
 8003026:	d45b      	bmi.n	80030e0 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	071a      	lsls	r2, r3, #28
 800302c:	f100 809d 	bmi.w	800316a <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003030:	6823      	ldr	r3, [r4, #0]
 8003032:	075b      	lsls	r3, r3, #29
 8003034:	f100 80bd 	bmi.w	80031b2 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003038:	69a0      	ldr	r0, [r4, #24]
 800303a:	2800      	cmp	r0, #0
 800303c:	f040 8124 	bne.w	8003288 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003040:	2000      	movs	r0, #0
 8003042:	e02c      	b.n	800309e <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003044:	4b8d      	ldr	r3, [pc, #564]	; (800327c <HAL_RCC_OscConfig+0x268>)
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	f002 020c 	and.w	r2, r2, #12
 800304c:	2a04      	cmp	r2, #4
 800304e:	d007      	beq.n	8003060 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003056:	2a08      	cmp	r2, #8
 8003058:	d10b      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	0259      	lsls	r1, r3, #9
 800305e:	d508      	bpl.n	8003072 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	4b86      	ldr	r3, [pc, #536]	; (800327c <HAL_RCC_OscConfig+0x268>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	039a      	lsls	r2, r3, #14
 8003066:	d5dc      	bpl.n	8003022 <HAL_RCC_OscConfig+0xe>
 8003068:	6863      	ldr	r3, [r4, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1d9      	bne.n	8003022 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003072:	6863      	ldr	r3, [r4, #4]
 8003074:	4d81      	ldr	r5, [pc, #516]	; (800327c <HAL_RCC_OscConfig+0x268>)
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307a:	d113      	bne.n	80030a4 <HAL_RCC_OscConfig+0x90>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003082:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003084:	f7fe ffe2 	bl	800204c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003088:	4e7c      	ldr	r6, [pc, #496]	; (800327c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800308a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308c:	6833      	ldr	r3, [r6, #0]
 800308e:	039b      	lsls	r3, r3, #14
 8003090:	d4c7      	bmi.n	8003022 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003092:	f7fe ffdb 	bl	800204c <HAL_GetTick>
 8003096:	1b40      	subs	r0, r0, r5
 8003098:	2864      	cmp	r0, #100	; 0x64
 800309a:	d9f7      	bls.n	800308c <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 800309c:	2003      	movs	r0, #3
}
 800309e:	b002      	add	sp, #8
 80030a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a8:	d104      	bne.n	80030b4 <HAL_RCC_OscConfig+0xa0>
 80030aa:	682b      	ldr	r3, [r5, #0]
 80030ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b0:	602b      	str	r3, [r5, #0]
 80030b2:	e7e3      	b.n	800307c <HAL_RCC_OscConfig+0x68>
 80030b4:	682a      	ldr	r2, [r5, #0]
 80030b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030ba:	602a      	str	r2, [r5, #0]
 80030bc:	682a      	ldr	r2, [r5, #0]
 80030be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030c2:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1dd      	bne.n	8003084 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 80030c8:	f7fe ffc0 	bl	800204c <HAL_GetTick>
 80030cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	682b      	ldr	r3, [r5, #0]
 80030d0:	039f      	lsls	r7, r3, #14
 80030d2:	d5a6      	bpl.n	8003022 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe ffba 	bl	800204c <HAL_GetTick>
 80030d8:	1b80      	subs	r0, r0, r6
 80030da:	2864      	cmp	r0, #100	; 0x64
 80030dc:	d9f7      	bls.n	80030ce <HAL_RCC_OscConfig+0xba>
 80030de:	e7dd      	b.n	800309c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030e0:	4b66      	ldr	r3, [pc, #408]	; (800327c <HAL_RCC_OscConfig+0x268>)
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	f012 0f0c 	tst.w	r2, #12
 80030e8:	d007      	beq.n	80030fa <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f0:	2a08      	cmp	r2, #8
 80030f2:	d111      	bne.n	8003118 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	025e      	lsls	r6, r3, #9
 80030f8:	d40e      	bmi.n	8003118 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4a60      	ldr	r2, [pc, #384]	; (800327c <HAL_RCC_OscConfig+0x268>)
 80030fc:	6813      	ldr	r3, [r2, #0]
 80030fe:	079d      	lsls	r5, r3, #30
 8003100:	d502      	bpl.n	8003108 <HAL_RCC_OscConfig+0xf4>
 8003102:	68e3      	ldr	r3, [r4, #12]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d1b2      	bne.n	800306e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	6921      	ldr	r1, [r4, #16]
 800310c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003110:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003114:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003116:	e787      	b.n	8003028 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003118:	68e2      	ldr	r2, [r4, #12]
 800311a:	4b59      	ldr	r3, [pc, #356]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800311c:	b1b2      	cbz	r2, 800314c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800311e:	2201      	movs	r2, #1
 8003120:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003122:	f7fe ff93 	bl	800204c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003126:	4d55      	ldr	r5, [pc, #340]	; (800327c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8003128:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	682b      	ldr	r3, [r5, #0]
 800312c:	0798      	lsls	r0, r3, #30
 800312e:	d507      	bpl.n	8003140 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	6922      	ldr	r2, [r4, #16]
 8003134:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003138:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800313c:	602b      	str	r3, [r5, #0]
 800313e:	e773      	b.n	8003028 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003140:	f7fe ff84 	bl	800204c <HAL_GetTick>
 8003144:	1b80      	subs	r0, r0, r6
 8003146:	2802      	cmp	r0, #2
 8003148:	d9ef      	bls.n	800312a <HAL_RCC_OscConfig+0x116>
 800314a:	e7a7      	b.n	800309c <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800314c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800314e:	f7fe ff7d 	bl	800204c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003152:	4e4a      	ldr	r6, [pc, #296]	; (800327c <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8003154:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	6833      	ldr	r3, [r6, #0]
 8003158:	0799      	lsls	r1, r3, #30
 800315a:	f57f af65 	bpl.w	8003028 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe ff75 	bl	800204c <HAL_GetTick>
 8003162:	1b40      	subs	r0, r0, r5
 8003164:	2802      	cmp	r0, #2
 8003166:	d9f6      	bls.n	8003156 <HAL_RCC_OscConfig+0x142>
 8003168:	e798      	b.n	800309c <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800316a:	6962      	ldr	r2, [r4, #20]
 800316c:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800316e:	b182      	cbz	r2, 8003192 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8003170:	2201      	movs	r2, #1
 8003172:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003176:	f7fe ff69 	bl	800204c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4e40      	ldr	r6, [pc, #256]	; (800327c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800317c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003180:	079f      	lsls	r7, r3, #30
 8003182:	f53f af55 	bmi.w	8003030 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fe ff61 	bl	800204c <HAL_GetTick>
 800318a:	1b40      	subs	r0, r0, r5
 800318c:	2802      	cmp	r0, #2
 800318e:	d9f6      	bls.n	800317e <HAL_RCC_OscConfig+0x16a>
 8003190:	e784      	b.n	800309c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8003192:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003196:	f7fe ff59 	bl	800204c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319a:	4e38      	ldr	r6, [pc, #224]	; (800327c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800319c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80031a0:	0798      	lsls	r0, r3, #30
 80031a2:	f57f af45 	bpl.w	8003030 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a6:	f7fe ff51 	bl	800204c <HAL_GetTick>
 80031aa:	1b40      	subs	r0, r0, r5
 80031ac:	2802      	cmp	r0, #2
 80031ae:	d9f6      	bls.n	800319e <HAL_RCC_OscConfig+0x18a>
 80031b0:	e774      	b.n	800309c <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b2:	4b32      	ldr	r3, [pc, #200]	; (800327c <HAL_RCC_OscConfig+0x268>)
 80031b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031b6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80031ba:	d128      	bne.n	800320e <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 80031bc:	9201      	str	r2, [sp, #4]
 80031be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031cc:	9301      	str	r3, [sp, #4]
 80031ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031d0:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4d2c      	ldr	r5, [pc, #176]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031d4:	682b      	ldr	r3, [r5, #0]
 80031d6:	05d9      	lsls	r1, r3, #23
 80031d8:	d51b      	bpl.n	8003212 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031da:	68a3      	ldr	r3, [r4, #8]
 80031dc:	4d27      	ldr	r5, [pc, #156]	; (800327c <HAL_RCC_OscConfig+0x268>)
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d127      	bne.n	8003232 <HAL_RCC_OscConfig+0x21e>
 80031e2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80031ea:	f7fe ff2f 	bl	800204c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ee:	4e23      	ldr	r6, [pc, #140]	; (800327c <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80031f0:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80031f8:	079b      	lsls	r3, r3, #30
 80031fa:	d539      	bpl.n	8003270 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 80031fc:	2f00      	cmp	r7, #0
 80031fe:	f43f af1b 	beq.w	8003038 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003202:	4a1e      	ldr	r2, [pc, #120]	; (800327c <HAL_RCC_OscConfig+0x268>)
 8003204:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320a:	6413      	str	r3, [r2, #64]	; 0x40
 800320c:	e714      	b.n	8003038 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800320e:	2700      	movs	r7, #0
 8003210:	e7df      	b.n	80031d2 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003212:	682b      	ldr	r3, [r5, #0]
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800321a:	f7fe ff17 	bl	800204c <HAL_GetTick>
 800321e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	05da      	lsls	r2, r3, #23
 8003224:	d4d9      	bmi.n	80031da <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003226:	f7fe ff11 	bl	800204c <HAL_GetTick>
 800322a:	1b80      	subs	r0, r0, r6
 800322c:	2802      	cmp	r0, #2
 800322e:	d9f7      	bls.n	8003220 <HAL_RCC_OscConfig+0x20c>
 8003230:	e734      	b.n	800309c <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003232:	2b05      	cmp	r3, #5
 8003234:	d104      	bne.n	8003240 <HAL_RCC_OscConfig+0x22c>
 8003236:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003238:	f043 0304 	orr.w	r3, r3, #4
 800323c:	672b      	str	r3, [r5, #112]	; 0x70
 800323e:	e7d0      	b.n	80031e2 <HAL_RCC_OscConfig+0x1ce>
 8003240:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	672a      	str	r2, [r5, #112]	; 0x70
 8003248:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800324a:	f022 0204 	bic.w	r2, r2, #4
 800324e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ca      	bne.n	80031ea <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8003254:	f7fe fefa 	bl	800204c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800325c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003260:	0798      	lsls	r0, r3, #30
 8003262:	d5cb      	bpl.n	80031fc <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003264:	f7fe fef2 	bl	800204c <HAL_GetTick>
 8003268:	1b80      	subs	r0, r0, r6
 800326a:	4540      	cmp	r0, r8
 800326c:	d9f7      	bls.n	800325e <HAL_RCC_OscConfig+0x24a>
 800326e:	e715      	b.n	800309c <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003270:	f7fe feec 	bl	800204c <HAL_GetTick>
 8003274:	1b40      	subs	r0, r0, r5
 8003276:	4540      	cmp	r0, r8
 8003278:	d9bd      	bls.n	80031f6 <HAL_RCC_OscConfig+0x1e2>
 800327a:	e70f      	b.n	800309c <HAL_RCC_OscConfig+0x88>
 800327c:	40023800 	.word	0x40023800
 8003280:	42470000 	.word	0x42470000
 8003284:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003288:	4d36      	ldr	r5, [pc, #216]	; (8003364 <HAL_RCC_OscConfig+0x350>)
 800328a:	68ab      	ldr	r3, [r5, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d03d      	beq.n	8003310 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003294:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_RCC_OscConfig+0x354>)
 8003296:	2200      	movs	r2, #0
 8003298:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800329a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329c:	d12b      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
 800329e:	f7fe fed5 	bl	800204c <HAL_GetTick>
 80032a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	682b      	ldr	r3, [r5, #0]
 80032a6:	0199      	lsls	r1, r3, #6
 80032a8:	d41f      	bmi.n	80032ea <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032aa:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80032b2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80032b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80032b8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80032bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032be:	0852      	lsrs	r2, r2, #1
 80032c0:	3a01      	subs	r2, #1
 80032c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80032c6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80032c8:	4b27      	ldr	r3, [pc, #156]	; (8003368 <HAL_RCC_OscConfig+0x354>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ca:	4d26      	ldr	r5, [pc, #152]	; (8003364 <HAL_RCC_OscConfig+0x350>)
        __HAL_RCC_PLL_ENABLE();
 80032cc:	2201      	movs	r2, #1
 80032ce:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80032d0:	f7fe febc 	bl	800204c <HAL_GetTick>
 80032d4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	682b      	ldr	r3, [r5, #0]
 80032d8:	019a      	lsls	r2, r3, #6
 80032da:	f53f aeb1 	bmi.w	8003040 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032de:	f7fe feb5 	bl	800204c <HAL_GetTick>
 80032e2:	1b00      	subs	r0, r0, r4
 80032e4:	2802      	cmp	r0, #2
 80032e6:	d9f6      	bls.n	80032d6 <HAL_RCC_OscConfig+0x2c2>
 80032e8:	e6d8      	b.n	800309c <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fe feaf 	bl	800204c <HAL_GetTick>
 80032ee:	1b80      	subs	r0, r0, r6
 80032f0:	2802      	cmp	r0, #2
 80032f2:	d9d7      	bls.n	80032a4 <HAL_RCC_OscConfig+0x290>
 80032f4:	e6d2      	b.n	800309c <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80032f6:	f7fe fea9 	bl	800204c <HAL_GetTick>
 80032fa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	019b      	lsls	r3, r3, #6
 8003300:	f57f ae9e 	bpl.w	8003040 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe fea2 	bl	800204c <HAL_GetTick>
 8003308:	1b00      	subs	r0, r0, r4
 800330a:	2802      	cmp	r0, #2
 800330c:	d9f6      	bls.n	80032fc <HAL_RCC_OscConfig+0x2e8>
 800330e:	e6c5      	b.n	800309c <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003310:	2801      	cmp	r0, #1
 8003312:	f43f aec4 	beq.w	800309e <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
 8003316:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003318:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800331e:	4291      	cmp	r1, r2
 8003320:	f47f aea5 	bne.w	800306e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003324:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003326:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800332a:	428a      	cmp	r2, r1
 800332c:	f47f ae9f 	bne.w	800306e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003330:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003332:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003336:	401a      	ands	r2, r3
 8003338:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800333c:	f47f ae97 	bne.w	800306e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003340:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003342:	0852      	lsrs	r2, r2, #1
 8003344:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003348:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800334a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800334e:	f47f ae8e 	bne.w	800306e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003352:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003354:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003358:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800335c:	f43f ae70 	beq.w	8003040 <HAL_RCC_OscConfig+0x2c>
 8003360:	e685      	b.n	800306e <HAL_RCC_OscConfig+0x5a>
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	42470000 	.word	0x42470000

0800336c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800336c:	4913      	ldr	r1, [pc, #76]	; (80033bc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800336e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003370:	688b      	ldr	r3, [r1, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b04      	cmp	r3, #4
 8003378:	d01c      	beq.n	80033b4 <HAL_RCC_GetSysClockFreq+0x48>
 800337a:	2b08      	cmp	r3, #8
 800337c:	d11c      	bne.n	80033b8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800337e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003380:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003382:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003384:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003388:	bf14      	ite	ne
 800338a:	480d      	ldrne	r0, [pc, #52]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338c:	480d      	ldreq	r0, [pc, #52]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800338e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003392:	bf18      	it	ne
 8003394:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003396:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	fba1 0100 	umull	r0, r1, r1, r0
 800339e:	f7fd fc53 	bl	8000c48 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCC_GetSysClockFreq+0x50>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80033aa:	3301      	adds	r3, #1
 80033ac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80033ae:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80033b2:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x54>)
 80033b6:	e7fc      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80033ba:	e7fa      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x46>
 80033bc:	40023800 	.word	0x40023800
 80033c0:	017d7840 	.word	0x017d7840
 80033c4:	00f42400 	.word	0x00f42400

080033c8 <HAL_RCC_ClockConfig>:
{
 80033c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033cc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80033ce:	4604      	mov	r4, r0
 80033d0:	b910      	cbnz	r0, 80033d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80033d2:	2001      	movs	r0, #1
}
 80033d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033d8:	4b43      	ldr	r3, [pc, #268]	; (80034e8 <HAL_RCC_ClockConfig+0x120>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	f002 0207 	and.w	r2, r2, #7
 80033e0:	428a      	cmp	r2, r1
 80033e2:	d328      	bcc.n	8003436 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	6821      	ldr	r1, [r4, #0]
 80033e6:	078f      	lsls	r7, r1, #30
 80033e8:	d42d      	bmi.n	8003446 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ea:	07c8      	lsls	r0, r1, #31
 80033ec:	d440      	bmi.n	8003470 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ee:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <HAL_RCC_ClockConfig+0x120>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	f002 0207 	and.w	r2, r2, #7
 80033f6:	42aa      	cmp	r2, r5
 80033f8:	d865      	bhi.n	80034c6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fa:	6822      	ldr	r2, [r4, #0]
 80033fc:	0751      	lsls	r1, r2, #29
 80033fe:	d46b      	bmi.n	80034d8 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	0713      	lsls	r3, r2, #28
 8003402:	d507      	bpl.n	8003414 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003404:	4a39      	ldr	r2, [pc, #228]	; (80034ec <HAL_RCC_ClockConfig+0x124>)
 8003406:	6921      	ldr	r1, [r4, #16]
 8003408:	6893      	ldr	r3, [r2, #8]
 800340a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800340e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003412:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003414:	f7ff ffaa 	bl	800336c <HAL_RCC_GetSysClockFreq>
 8003418:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_RCC_ClockConfig+0x124>)
 800341a:	4a35      	ldr	r2, [pc, #212]	; (80034f0 <HAL_RCC_ClockConfig+0x128>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003422:	5cd3      	ldrb	r3, [r2, r3]
 8003424:	40d8      	lsrs	r0, r3
 8003426:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_RCC_ClockConfig+0x12c>)
 8003428:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800342a:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <HAL_RCC_ClockConfig+0x130>)
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	f7fe fdc3 	bl	8001fb8 <HAL_InitTick>
  return HAL_OK;
 8003432:	2000      	movs	r0, #0
 8003434:	e7ce      	b.n	80033d4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	b2ca      	uxtb	r2, r1
 8003438:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	428b      	cmp	r3, r1
 8003442:	d1c6      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xa>
 8003444:	e7ce      	b.n	80033e4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <HAL_RCC_ClockConfig+0x124>)
 8003448:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800344c:	bf1e      	ittt	ne
 800344e:	689a      	ldrne	r2, [r3, #8]
 8003450:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8003454:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003456:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	bf42      	ittt	mi
 800345a:	689a      	ldrmi	r2, [r3, #8]
 800345c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8003460:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	68a0      	ldr	r0, [r4, #8]
 8003466:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800346a:	4302      	orrs	r2, r0
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	e7bc      	b.n	80033ea <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003470:	6862      	ldr	r2, [r4, #4]
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_RCC_ClockConfig+0x124>)
 8003474:	2a01      	cmp	r2, #1
 8003476:	d11c      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	d0a8      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003480:	4e1a      	ldr	r6, [pc, #104]	; (80034ec <HAL_RCC_ClockConfig+0x124>)
 8003482:	68b3      	ldr	r3, [r6, #8]
 8003484:	f023 0303 	bic.w	r3, r3, #3
 8003488:	4313      	orrs	r3, r2
 800348a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800348c:	f7fe fdde 	bl	800204c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003494:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	68b3      	ldr	r3, [r6, #8]
 8003498:	6862      	ldr	r2, [r4, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80034a2:	d0a4      	beq.n	80033ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a4:	f7fe fdd2 	bl	800204c <HAL_GetTick>
 80034a8:	1bc0      	subs	r0, r0, r7
 80034aa:	4540      	cmp	r0, r8
 80034ac:	d9f3      	bls.n	8003496 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80034ae:	2003      	movs	r0, #3
 80034b0:	e790      	b.n	80033d4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b2:	1e91      	subs	r1, r2, #2
 80034b4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b8:	d802      	bhi.n	80034c0 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80034be:	e7de      	b.n	800347e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	f013 0f02 	tst.w	r3, #2
 80034c4:	e7db      	b.n	800347e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c6:	b2ea      	uxtb	r2, r5
 80034c8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	42ab      	cmp	r3, r5
 80034d2:	f47f af7e 	bne.w	80033d2 <HAL_RCC_ClockConfig+0xa>
 80034d6:	e790      	b.n	80033fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4904      	ldr	r1, [pc, #16]	; (80034ec <HAL_RCC_ClockConfig+0x124>)
 80034da:	68e0      	ldr	r0, [r4, #12]
 80034dc:	688b      	ldr	r3, [r1, #8]
 80034de:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80034e2:	4303      	orrs	r3, r0
 80034e4:	608b      	str	r3, [r1, #8]
 80034e6:	e78b      	b.n	8003400 <HAL_RCC_ClockConfig+0x38>
 80034e8:	40023c00 	.word	0x40023c00
 80034ec:	40023800 	.word	0x40023800
 80034f0:	0800766b 	.word	0x0800766b
 80034f4:	20000000 	.word	0x20000000
 80034f8:	20000008 	.word	0x20000008

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034fc:	4b04      	ldr	r3, [pc, #16]	; (8003510 <HAL_RCC_GetPCLK1Freq+0x14>)
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	4a03      	ldr	r2, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800350a:	6810      	ldr	r0, [r2, #0]
}
 800350c:	40d8      	lsrs	r0, r3
 800350e:	4770      	bx	lr
 8003510:	40023800 	.word	0x40023800
 8003514:	0800767b 	.word	0x0800767b
 8003518:	20000000 	.word	0x20000000

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x14>)
 800351e:	4a05      	ldr	r2, [pc, #20]	; (8003534 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003526:	5cd3      	ldrb	r3, [r2, r3]
 8003528:	4a03      	ldr	r2, [pc, #12]	; (8003538 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800352a:	6810      	ldr	r0, [r2, #0]
}
 800352c:	40d8      	lsrs	r0, r3
 800352e:	4770      	bx	lr
 8003530:	40023800 	.word	0x40023800
 8003534:	0800767b 	.word	0x0800767b
 8003538:	20000000 	.word	0x20000000

0800353c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800353c:	6803      	ldr	r3, [r0, #0]
 800353e:	f013 0f05 	tst.w	r3, #5
{
 8003542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003544:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003546:	d105      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	f013 0302 	ands.w	r3, r3, #2
 800354e:	d12a      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003550:	2000      	movs	r0, #0
 8003552:	e026      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 8003554:	4b42      	ldr	r3, [pc, #264]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003556:	4e43      	ldr	r6, [pc, #268]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003558:	2200      	movs	r2, #0
 800355a:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800355c:	f7fe fd76 	bl	800204c <HAL_GetTick>
 8003560:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003562:	6833      	ldr	r3, [r6, #0]
 8003564:	011f      	lsls	r7, r3, #4
 8003566:	d416      	bmi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003568:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800356c:	071b      	lsls	r3, r3, #28
 800356e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003572:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003576:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003578:	4e3a      	ldr	r6, [pc, #232]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 800357a:	2201      	movs	r2, #1
 800357c:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800357e:	f7fe fd65 	bl	800204c <HAL_GetTick>
 8003582:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003584:	6833      	ldr	r3, [r6, #0]
 8003586:	0118      	lsls	r0, r3, #4
 8003588:	d4de      	bmi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800358a:	f7fe fd5f 	bl	800204c <HAL_GetTick>
 800358e:	1b40      	subs	r0, r0, r5
 8003590:	2802      	cmp	r0, #2
 8003592:	d9f7      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003594:	e004      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003596:	f7fe fd59 	bl	800204c <HAL_GetTick>
 800359a:	1b40      	subs	r0, r0, r5
 800359c:	2802      	cmp	r0, #2
 800359e:	d9e0      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 80035a0:	2003      	movs	r0, #3
}
 80035a2:	b003      	add	sp, #12
 80035a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	4b2e      	ldr	r3, [pc, #184]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 80035ac:	4d2e      	ldr	r5, [pc, #184]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80035c8:	f7fe fd40 	bl	800204c <HAL_GetTick>
 80035cc:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	05d9      	lsls	r1, r3, #23
 80035d2:	d51b      	bpl.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d4:	4d23      	ldr	r5, [pc, #140]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035d6:	68e2      	ldr	r2, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80035de:	d11b      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e0:	68e3      	ldr	r3, [r4, #12]
 80035e2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80035e6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80035ea:	4a1e      	ldr	r2, [pc, #120]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80035ec:	d134      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80035ee:	6891      	ldr	r1, [r2, #8]
 80035f0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80035f4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80035f8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80035fc:	4301      	orrs	r1, r0
 80035fe:	6091      	str	r1, [r2, #8]
 8003600:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003606:	430b      	orrs	r3, r1
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	e7a1      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800360c:	f7fe fd1e 	bl	800204c <HAL_GetTick>
 8003610:	1b80      	subs	r0, r0, r6
 8003612:	2802      	cmp	r0, #2
 8003614:	d9db      	bls.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003616:	e7c3      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003618:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800361c:	4293      	cmp	r3, r2
 800361e:	d0df      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003620:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003622:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003624:	2101      	movs	r1, #1
 8003626:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800362e:	2100      	movs	r1, #0
 8003630:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8003634:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003636:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003638:	07da      	lsls	r2, r3, #31
 800363a:	d5d1      	bpl.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 800363c:	f7fe fd06 	bl	800204c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003640:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003644:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003648:	079b      	lsls	r3, r3, #30
 800364a:	d4c9      	bmi.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe fcfe 	bl	800204c <HAL_GetTick>
 8003650:	1b80      	subs	r0, r0, r6
 8003652:	42b8      	cmp	r0, r7
 8003654:	d9f7      	bls.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8003656:	e7a3      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003658:	6891      	ldr	r1, [r2, #8]
 800365a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800365e:	e7ce      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8003660:	42470000 	.word	0x42470000
 8003664:	40023800 	.word	0x40023800
 8003668:	40007000 	.word	0x40007000

0800366c <HAL_RTC_AlarmAEventCallback>:
 800366c:	4770      	bx	lr
	...

08003670 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003670:	6803      	ldr	r3, [r0, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	04d2      	lsls	r2, r2, #19
{
 8003676:	b510      	push	{r4, lr}
 8003678:	4604      	mov	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800367a:	d50a      	bpl.n	8003692 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	05d9      	lsls	r1, r3, #23
 8003680:	d507      	bpl.n	8003692 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003682:	f7ff fff3 	bl	800366c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003686:	6822      	ldr	r2, [r4, #0]
 8003688:	68d3      	ldr	r3, [r2, #12]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f463 73c0 	orn	r3, r3, #384	; 0x180
 8003690:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003692:	6823      	ldr	r3, [r4, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	0492      	lsls	r2, r2, #18
 8003698:	d50b      	bpl.n	80036b2 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	059b      	lsls	r3, r3, #22
 800369e:	d508      	bpl.n	80036b2 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80036a0:	4620      	mov	r0, r4
 80036a2:	f000 f9fd 	bl	8003aa0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80036a6:	6822      	ldr	r2, [r4, #0]
 80036a8:	68d3      	ldr	r3, [r2, #12]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f463 7320 	orn	r3, r3, #640	; 0x280
 80036b0:	60d3      	str	r3, [r2, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80036b2:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80036b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036b8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80036ba:	2301      	movs	r3, #1
 80036bc:	7763      	strb	r3, [r4, #29]
}
 80036be:	bd10      	pop	{r4, pc}
 80036c0:	40013c00 	.word	0x40013c00

080036c4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036c4:	6802      	ldr	r2, [r0, #0]
{
 80036c6:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036c8:	68d3      	ldr	r3, [r2, #12]
 80036ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ce:	60d3      	str	r3, [r2, #12]
{
 80036d0:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d2:	f7fe fcbb 	bl	800204c <HAL_GetTick>
 80036d6:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	069b      	lsls	r3, r3, #26
 80036de:	d501      	bpl.n	80036e4 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80036e0:	2000      	movs	r0, #0
}
 80036e2:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036e4:	f7fe fcb2 	bl	800204c <HAL_GetTick>
 80036e8:	1b40      	subs	r0, r0, r5
 80036ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80036ee:	d9f3      	bls.n	80036d8 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 80036f0:	2003      	movs	r0, #3
 80036f2:	e7f6      	b.n	80036e2 <HAL_RTC_WaitForSynchro+0x1e>

080036f4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80036f6:	6803      	ldr	r3, [r0, #0]
 80036f8:	68dc      	ldr	r4, [r3, #12]
 80036fa:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 80036fe:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003700:	d117      	bne.n	8003732 <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003708:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800370a:	f7fe fc9f 	bl	800204c <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800370e:	2704      	movs	r7, #4
    tickstart = HAL_GetTick();
 8003710:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003712:	682b      	ldr	r3, [r5, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	065b      	lsls	r3, r3, #25
 8003718:	d400      	bmi.n	800371c <RTC_EnterInitMode+0x28>
 800371a:	b10c      	cbz	r4, 8003720 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 800371c:	4620      	mov	r0, r4
 800371e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003720:	f7fe fc94 	bl	800204c <HAL_GetTick>
 8003724:	1b80      	subs	r0, r0, r6
 8003726:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 800372a:	bf84      	itt	hi
 800372c:	776f      	strbhi	r7, [r5, #29]
        status = HAL_ERROR;
 800372e:	2401      	movhi	r4, #1
 8003730:	e7ef      	b.n	8003712 <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2400      	movs	r4, #0
 8003734:	e7f2      	b.n	800371c <RTC_EnterInitMode+0x28>

08003736 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003736:	6803      	ldr	r3, [r0, #0]
 8003738:	68da      	ldr	r2, [r3, #12]
 800373a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 800373e:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003740:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	069b      	lsls	r3, r3, #26
{
 8003746:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003748:	d501      	bpl.n	800374e <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 800374c:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800374e:	f7ff ffb9 	bl	80036c4 <HAL_RTC_WaitForSynchro>
 8003752:	2800      	cmp	r0, #0
 8003754:	d0f9      	beq.n	800374a <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003756:	2304      	movs	r3, #4
 8003758:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 800375a:	2001      	movs	r0, #1
 800375c:	e7f6      	b.n	800374c <RTC_ExitInitMode+0x16>

0800375e <HAL_RTC_Init>:
{
 800375e:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8003760:	4604      	mov	r4, r0
 8003762:	2800      	cmp	r0, #0
 8003764:	d03a      	beq.n	80037dc <HAL_RTC_Init+0x7e>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003766:	7f43      	ldrb	r3, [r0, #29]
 8003768:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800376c:	b913      	cbnz	r3, 8003774 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 800376e:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8003770:	f7fe fa62 	bl	8001c38 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003774:	2302      	movs	r3, #2
 8003776:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003778:	6823      	ldr	r3, [r4, #0]
 800377a:	22ca      	movs	r2, #202	; 0xca
 800377c:	625a      	str	r2, [r3, #36]	; 0x24
 800377e:	2253      	movs	r2, #83	; 0x53
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003782:	4620      	mov	r0, r4
 8003784:	f7ff ffb6 	bl	80036f4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003788:	bb20      	cbnz	r0, 80037d4 <HAL_RTC_Init+0x76>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800378a:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800378c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8003794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003798:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	6899      	ldr	r1, [r3, #8]
 800379e:	4302      	orrs	r2, r0
 80037a0:	6960      	ldr	r0, [r4, #20]
 80037a2:	4302      	orrs	r2, r0
 80037a4:	430a      	orrs	r2, r1
 80037a6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80037a8:	68e2      	ldr	r2, [r4, #12]
 80037aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68a1      	ldr	r1, [r4, #8]
 80037b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037b4:	611a      	str	r2, [r3, #16]
    status = RTC_ExitInitMode(hrtc);
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7ff ffbd 	bl	8003736 <RTC_ExitInitMode>
  if (status == HAL_OK)
 80037bc:	b950      	cbnz	r0, 80037d4 <HAL_RTC_Init+0x76>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80037be:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037c0:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80037c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80037ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037cc:	430a      	orrs	r2, r1
 80037ce:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 80037d0:	2301      	movs	r3, #1
 80037d2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	22ff      	movs	r2, #255	; 0xff
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80037da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80037dc:	2001      	movs	r0, #1
 80037de:	e7fc      	b.n	80037da <HAL_RTC_Init+0x7c>

080037e0 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;

  while (number >= 10U)
 80037e0:	2300      	movs	r3, #0
 80037e2:	2809      	cmp	r0, #9
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	f103 0301 	add.w	r3, r3, #1
 80037ea:	d803      	bhi.n	80037f4 <RTC_ByteToBcd2+0x14>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80037ec:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 80037f0:	b2c0      	uxtb	r0, r0
 80037f2:	4770      	bx	lr
    number -= 10U;
 80037f4:	380a      	subs	r0, #10
 80037f6:	b2c0      	uxtb	r0, r0
 80037f8:	e7f3      	b.n	80037e2 <RTC_ByteToBcd2+0x2>

080037fa <HAL_RTC_SetTime>:
{
 80037fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 80037fe:	7f03      	ldrb	r3, [r0, #28]
 8003800:	2b01      	cmp	r3, #1
{
 8003802:	4606      	mov	r6, r0
 8003804:	460f      	mov	r7, r1
 8003806:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 800380a:	d041      	beq.n	8003890 <HAL_RTC_SetTime+0x96>
 800380c:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800380e:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8003810:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003812:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8003814:	7838      	ldrb	r0, [r7, #0]
 8003816:	787d      	ldrb	r5, [r7, #1]
 8003818:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800381a:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 800381c:	2a00      	cmp	r2, #0
 800381e:	d139      	bne.n	8003894 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003820:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8003824:	bf08      	it	eq
 8003826:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003828:	f7ff ffda 	bl	80037e0 <RTC_ByteToBcd2>
 800382c:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800382e:	4628      	mov	r0, r5
 8003830:	f7ff ffd6 	bl	80037e0 <RTC_ByteToBcd2>
 8003834:	4605      	mov	r5, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff ffd2 	bl	80037e0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800383c:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800383e:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8003842:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8003846:	ea43 2405 	orr.w	r4, r3, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800384a:	23ca      	movs	r3, #202	; 0xca
 800384c:	624b      	str	r3, [r1, #36]	; 0x24
 800384e:	2353      	movs	r3, #83	; 0x53
 8003850:	624b      	str	r3, [r1, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003852:	4630      	mov	r0, r6
 8003854:	f7ff ff4e 	bl	80036f4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8003858:	b9a8      	cbnz	r0, 8003886 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800385a:	6832      	ldr	r2, [r6, #0]
 800385c:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8003860:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8003864:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003866:	6893      	ldr	r3, [r2, #8]
 8003868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800386c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800386e:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8003872:	6891      	ldr	r1, [r2, #8]
 8003874:	4303      	orrs	r3, r0
 8003876:	430b      	orrs	r3, r1
 8003878:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 800387a:	4630      	mov	r0, r6
 800387c:	f7ff ff5b 	bl	8003736 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8003880:	b908      	cbnz	r0, 8003886 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8003882:	2301      	movs	r3, #1
 8003884:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003886:	6833      	ldr	r3, [r6, #0]
 8003888:	22ff      	movs	r2, #255	; 0xff
 800388a:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800388c:	2300      	movs	r3, #0
 800388e:	7733      	strb	r3, [r6, #28]
}
 8003890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003894:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8003898:	bf08      	it	eq
 800389a:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800389c:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800389e:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80038a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80038a4:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80038a8:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 80038ac:	e7cd      	b.n	800384a <HAL_RTC_SetTime+0x50>

080038ae <HAL_RTC_SetDate>:
{
 80038ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80038b0:	7f03      	ldrb	r3, [r0, #28]
 80038b2:	2b01      	cmp	r3, #1
{
 80038b4:	4605      	mov	r5, r0
 80038b6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 80038ba:	d039      	beq.n	8003930 <HAL_RTC_SetDate+0x82>
 80038bc:	2001      	movs	r0, #1
 80038be:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038c0:	776b      	strb	r3, [r5, #29]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80038c2:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038c4:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038c6:	784e      	ldrb	r6, [r1, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80038c8:	788f      	ldrb	r7, [r1, #2]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80038ca:	0364      	lsls	r4, r4, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038cc:	bb92      	cbnz	r2, 8003934 <HAL_RTC_SetDate+0x86>
 80038ce:	06f3      	lsls	r3, r6, #27
 80038d0:	d503      	bpl.n	80038da <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038d2:	f026 0610 	bic.w	r6, r6, #16
 80038d6:	360a      	adds	r6, #10
 80038d8:	704e      	strb	r6, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038da:	f7ff ff81 	bl	80037e0 <RTC_ByteToBcd2>
 80038de:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038e0:	7848      	ldrb	r0, [r1, #1]
 80038e2:	f7ff ff7d 	bl	80037e0 <RTC_ByteToBcd2>
 80038e6:	4601      	mov	r1, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80038e8:	4638      	mov	r0, r7
 80038ea:	f7ff ff79 	bl	80037e0 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80038ee:	ea40 0304 	orr.w	r3, r0, r4
 80038f2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80038f6:	ea43 2401 	orr.w	r4, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	22ca      	movs	r2, #202	; 0xca
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24
 8003900:	2253      	movs	r2, #83	; 0x53
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8003904:	4628      	mov	r0, r5
 8003906:	f7ff fef5 	bl	80036f4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800390a:	b958      	cbnz	r0, 8003924 <HAL_RTC_SetDate+0x76>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800390c:	682a      	ldr	r2, [r5, #0]
 800390e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8003912:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8003916:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8003918:	4628      	mov	r0, r5
 800391a:	f7ff ff0c 	bl	8003736 <RTC_ExitInitMode>
  if (status == HAL_OK)
 800391e:	b908      	cbnz	r0, 8003924 <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 8003920:	2301      	movs	r3, #1
 8003922:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 800392a:	2300      	movs	r3, #0
 800392c:	772b      	strb	r3, [r5, #28]
}
 800392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 8003930:	4618      	mov	r0, r3
 8003932:	e7fc      	b.n	800392e <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003934:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8003938:	433c      	orrs	r4, r7
 800393a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800393e:	e7dc      	b.n	80038fa <HAL_RTC_SetDate+0x4c>

08003940 <HAL_RTC_SetAlarm_IT>:
{
 8003940:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003944:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <HAL_RTC_SetAlarm_IT+0x158>)
 8003946:	681e      	ldr	r6, [r3, #0]
 8003948:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800394c:	fbb6 f6f3 	udiv	r6, r6, r3
 8003950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003954:	435e      	muls	r6, r3
  __HAL_LOCK(hrtc);
 8003956:	7f03      	ldrb	r3, [r0, #28]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003958:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hrtc);
 800395a:	2b01      	cmp	r3, #1
{
 800395c:	4605      	mov	r5, r0
 800395e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8003962:	d04a      	beq.n	80039fa <HAL_RTC_SetAlarm_IT+0xba>
 8003964:	2001      	movs	r0, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003966:	682c      	ldr	r4, [r5, #0]
  __HAL_LOCK(hrtc);
 8003968:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800396a:	776b      	strb	r3, [r5, #29]
  if (Format == RTC_FORMAT_BIN)
 800396c:	7808      	ldrb	r0, [r1, #0]
 800396e:	f891 8001 	ldrb.w	r8, [r1, #1]
 8003972:	f891 9002 	ldrb.w	r9, [r1, #2]
 8003976:	f891 7020 	ldrb.w	r7, [r1, #32]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800397a:	68a3      	ldr	r3, [r4, #8]
  if (Format == RTC_FORMAT_BIN)
 800397c:	2a00      	cmp	r2, #0
 800397e:	d140      	bne.n	8003a02 <HAL_RTC_SetAlarm_IT+0xc2>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003980:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003984:	bf08      	it	eq
 8003986:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003988:	f7ff ff2a 	bl	80037e0 <RTC_ByteToBcd2>
 800398c:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800398e:	4640      	mov	r0, r8
 8003990:	f7ff ff26 	bl	80037e0 <RTC_ByteToBcd2>
 8003994:	4680      	mov	r8, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003996:	4648      	mov	r0, r9
 8003998:	f7ff ff22 	bl	80037e0 <RTC_ByteToBcd2>
 800399c:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800399e:	4638      	mov	r0, r7
 80039a0:	f7ff ff1e 	bl	80037e0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80039a4:	69ca      	ldr	r2, [r1, #28]
 80039a6:	694b      	ldr	r3, [r1, #20]
 80039a8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80039aa:	78ca      	ldrb	r2, [r1, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80039ac:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 80039b0:	ea43 0309 	orr.w	r3, r3, r9
 80039b4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80039b8:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 80039bc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80039c0:	698a      	ldr	r2, [r1, #24]
 80039c2:	6848      	ldr	r0, [r1, #4]
 80039c4:	4310      	orrs	r0, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039c6:	22ca      	movs	r2, #202	; 0xca
 80039c8:	6262      	str	r2, [r4, #36]	; 0x24
 80039ca:	2253      	movs	r2, #83	; 0x53
 80039cc:	6262      	str	r2, [r4, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80039ce:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80039d0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80039d4:	68a2      	ldr	r2, [r4, #8]
  if (sAlarm->Alarm == RTC_ALARM_A)
 80039d6:	d144      	bne.n	8003a62 <HAL_RTC_SetAlarm_IT+0x122>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80039d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039dc:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80039de:	68e2      	ldr	r2, [r4, #12]
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80039e6:	60e2      	str	r2, [r4, #12]
      if (count-- == 0U)
 80039e8:	9a01      	ldr	r2, [sp, #4]
 80039ea:	1e51      	subs	r1, r2, #1
 80039ec:	9101      	str	r1, [sp, #4]
 80039ee:	b9da      	cbnz	r2, 8003a28 <HAL_RTC_SetAlarm_IT+0xe8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f0:	23ff      	movs	r3, #255	; 0xff
 80039f2:	6263      	str	r3, [r4, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	776b      	strb	r3, [r5, #29]
        __HAL_UNLOCK(hrtc);
 80039f8:	772a      	strb	r2, [r5, #28]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	b002      	add	sp, #8
 80039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a02:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003a06:	694a      	ldr	r2, [r1, #20]
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a08:	bf08      	it	eq
 8003a0a:	70cb      	strbeq	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003a0c:	69cb      	ldr	r3, [r1, #28]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	ea43 0309 	orr.w	r3, r3, r9
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003a14:	78ca      	ldrb	r2, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003a16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003a1a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8003a1e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8003a22:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 8003a26:	e7cb      	b.n	80039c0 <HAL_RTC_SetAlarm_IT+0x80>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003a28:	68e2      	ldr	r2, [r4, #12]
 8003a2a:	07d1      	lsls	r1, r2, #31
 8003a2c:	d5dc      	bpl.n	80039e8 <HAL_RTC_SetAlarm_IT+0xa8>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003a2e:	61e3      	str	r3, [r4, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003a30:	6460      	str	r0, [r4, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003a32:	68a3      	ldr	r3, [r4, #8]
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003a3a:	68a3      	ldr	r3, [r4, #8]
 8003a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003a40:	60a3      	str	r3, [r4, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_RTC_SetAlarm_IT+0x15c>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a4a:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a52:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a54:	23ff      	movs	r3, #255	; 0xff
 8003a56:	6263      	str	r3, [r4, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	776b      	strb	r3, [r5, #29]
  __HAL_UNLOCK(hrtc);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	772b      	strb	r3, [r5, #28]
  return HAL_OK;
 8003a60:	e7cb      	b.n	80039fa <HAL_RTC_SetAlarm_IT+0xba>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003a62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a66:	60a2      	str	r2, [r4, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003a68:	68e2      	ldr	r2, [r4, #12]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003a70:	60e2      	str	r2, [r4, #12]
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003a72:	9601      	str	r6, [sp, #4]
      if (count-- == 0U)
 8003a74:	9a01      	ldr	r2, [sp, #4]
 8003a76:	1e51      	subs	r1, r2, #1
 8003a78:	9101      	str	r1, [sp, #4]
 8003a7a:	2a00      	cmp	r2, #0
 8003a7c:	d0b8      	beq.n	80039f0 <HAL_RTC_SetAlarm_IT+0xb0>
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003a7e:	68e2      	ldr	r2, [r4, #12]
 8003a80:	0792      	lsls	r2, r2, #30
 8003a82:	d5f7      	bpl.n	8003a74 <HAL_RTC_SetAlarm_IT+0x134>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003a84:	6223      	str	r3, [r4, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003a86:	64a0      	str	r0, [r4, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003a88:	68a3      	ldr	r3, [r4, #8]
 8003a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a8e:	60a3      	str	r3, [r4, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003a90:	68a3      	ldr	r3, [r4, #8]
 8003a92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a96:	e7d3      	b.n	8003a40 <HAL_RTC_SetAlarm_IT+0x100>
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	40013c00 	.word	0x40013c00

08003aa0 <HAL_RTCEx_AlarmBEventCallback>:
 8003aa0:	4770      	bx	lr
	...

08003aa4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa4:	6a03      	ldr	r3, [r0, #32]
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aac:	6a03      	ldr	r3, [r0, #32]
{
 8003aae:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ab2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003aba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003abc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003abe:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003ac2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac4:	4d0e      	ldr	r5, [pc, #56]	; (8003b00 <TIM_OC1_SetConfig+0x5c>)
 8003ac6:	42a8      	cmp	r0, r5
 8003ac8:	d002      	beq.n	8003ad0 <TIM_OC1_SetConfig+0x2c>
 8003aca:	4e0e      	ldr	r6, [pc, #56]	; (8003b04 <TIM_OC1_SetConfig+0x60>)
 8003acc:	42b0      	cmp	r0, r6
 8003ace:	d110      	bne.n	8003af2 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ad0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ad2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003ad6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ada:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	d002      	beq.n	8003ae6 <TIM_OC1_SetConfig+0x42>
 8003ae0:	4d08      	ldr	r5, [pc, #32]	; (8003b04 <TIM_OC1_SetConfig+0x60>)
 8003ae2:	42a8      	cmp	r0, r5
 8003ae4:	d105      	bne.n	8003af2 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ae6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aea:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aee:	4335      	orrs	r5, r6
 8003af0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003af4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003af6:	684a      	ldr	r2, [r1, #4]
 8003af8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afa:	6203      	str	r3, [r0, #32]
}
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	bf00      	nop
 8003b00:	40010000 	.word	0x40010000
 8003b04:	40010400 	.word	0x40010400

08003b08 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b08:	6a03      	ldr	r3, [r0, #32]
 8003b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b0e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b10:	6a03      	ldr	r3, [r0, #32]
{
 8003b12:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b16:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b18:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b1a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003b1e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b20:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003b22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b2a:	4d11      	ldr	r5, [pc, #68]	; (8003b70 <TIM_OC3_SetConfig+0x68>)
 8003b2c:	42a8      	cmp	r0, r5
 8003b2e:	d003      	beq.n	8003b38 <TIM_OC3_SetConfig+0x30>
 8003b30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b34:	42a8      	cmp	r0, r5
 8003b36:	d114      	bne.n	8003b62 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b38:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b42:	4d0b      	ldr	r5, [pc, #44]	; (8003b70 <TIM_OC3_SetConfig+0x68>)
 8003b44:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4a:	d003      	beq.n	8003b54 <TIM_OC3_SetConfig+0x4c>
 8003b4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b50:	42a8      	cmp	r0, r5
 8003b52:	d106      	bne.n	8003b62 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b54:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b58:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b5c:	4335      	orrs	r5, r6
 8003b5e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b62:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b64:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b66:	684a      	ldr	r2, [r1, #4]
 8003b68:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6a:	6203      	str	r3, [r0, #32]
}
 8003b6c:	bd70      	pop	{r4, r5, r6, pc}
 8003b6e:	bf00      	nop
 8003b70:	40010000 	.word	0x40010000

08003b74 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b74:	6a03      	ldr	r3, [r0, #32]
 8003b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b7a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7c:	6a03      	ldr	r3, [r0, #32]
{
 8003b7e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b82:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b86:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b8a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b8e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b94:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b98:	4d08      	ldr	r5, [pc, #32]	; (8003bbc <TIM_OC4_SetConfig+0x48>)
 8003b9a:	42a8      	cmp	r0, r5
 8003b9c:	d003      	beq.n	8003ba6 <TIM_OC4_SetConfig+0x32>
 8003b9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ba2:	42a8      	cmp	r0, r5
 8003ba4:	d104      	bne.n	8003bb0 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ba6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bac:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bb2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bb4:	684a      	ldr	r2, [r1, #4]
 8003bb6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb8:	6203      	str	r3, [r0, #32]
}
 8003bba:	bd30      	pop	{r4, r5, pc}
 8003bbc:	40010000 	.word	0x40010000

08003bc0 <HAL_TIM_PWM_MspInit>:
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_TIM_PeriodElapsedCallback>:
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIM_OC_DelayElapsedCallback>:
 8003bc4:	4770      	bx	lr

08003bc6 <HAL_TIM_IC_CaptureCallback>:
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003bc8:	4770      	bx	lr

08003bca <HAL_TIM_TriggerCallback>:
 8003bca:	4770      	bx	lr

08003bcc <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bcc:	6803      	ldr	r3, [r0, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	0791      	lsls	r1, r2, #30
{
 8003bd2:	b510      	push	{r4, lr}
 8003bd4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bd6:	d50e      	bpl.n	8003bf6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	0792      	lsls	r2, r2, #30
 8003bdc:	d50b      	bpl.n	8003bf6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bde:	f06f 0202 	mvn.w	r2, #2
 8003be2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be4:	2201      	movs	r2, #1
 8003be6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	079b      	lsls	r3, r3, #30
 8003bec:	d077      	beq.n	8003cde <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003bee:	f7ff ffea 	bl	8003bc6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	0750      	lsls	r0, r2, #29
 8003bfc:	d510      	bpl.n	8003c20 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	0751      	lsls	r1, r2, #29
 8003c02:	d50d      	bpl.n	8003c20 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c04:	f06f 0204 	mvn.w	r2, #4
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003c14:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c16:	d068      	beq.n	8003cea <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c18:	f7ff ffd5 	bl	8003bc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	0712      	lsls	r2, r2, #28
 8003c26:	d50f      	bpl.n	8003c48 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	0710      	lsls	r0, r2, #28
 8003c2c:	d50c      	bpl.n	8003c48 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c2e:	f06f 0208 	mvn.w	r2, #8
 8003c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c34:	2204      	movs	r2, #4
 8003c36:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c3e:	d05a      	beq.n	8003cf6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c40:	f7ff ffc1 	bl	8003bc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c44:	2300      	movs	r3, #0
 8003c46:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	06d2      	lsls	r2, r2, #27
 8003c4e:	d510      	bpl.n	8003c72 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	06d0      	lsls	r0, r2, #27
 8003c54:	d50d      	bpl.n	8003c72 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c56:	f06f 0210 	mvn.w	r2, #16
 8003c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c68:	d04b      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6a:	f7ff ffac 	bl	8003bc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	691a      	ldr	r2, [r3, #16]
 8003c76:	07d1      	lsls	r1, r2, #31
 8003c78:	d508      	bpl.n	8003c8c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	07d2      	lsls	r2, r2, #31
 8003c7e:	d505      	bpl.n	8003c8c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c80:	f06f 0201 	mvn.w	r2, #1
 8003c84:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c86:	4620      	mov	r0, r4
 8003c88:	f7ff ff9b 	bl	8003bc2 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	0610      	lsls	r0, r2, #24
 8003c92:	d508      	bpl.n	8003ca6 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	0611      	lsls	r1, r2, #24
 8003c98:	d505      	bpl.n	8003ca6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 fa64 	bl	800416e <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	0652      	lsls	r2, r2, #25
 8003cac:	d508      	bpl.n	8003cc0 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	0650      	lsls	r0, r2, #25
 8003cb2:	d505      	bpl.n	8003cc0 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cb8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7ff ff85 	bl	8003bca <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	0691      	lsls	r1, r2, #26
 8003cc6:	d522      	bpl.n	8003d0e <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	0692      	lsls	r2, r2, #26
 8003ccc:	d51f      	bpl.n	8003d0e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cce:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003cd2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd4:	611a      	str	r2, [r3, #16]
}
 8003cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003cda:	f000 ba47 	b.w	800416c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	f7ff ff71 	bl	8003bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f7ff ff70 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003ce8:	e783      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cea:	f7ff ff6b 	bl	8003bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f7ff ff6a 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003cf4:	e792      	b.n	8003c1c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf6:	f7ff ff65 	bl	8003bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7ff ff64 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003d00:	e7a0      	b.n	8003c44 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d02:	f7ff ff5f 	bl	8003bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d06:	4620      	mov	r0, r4
 8003d08:	f7ff ff5e 	bl	8003bc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003d0c:	e7af      	b.n	8003c6e <HAL_TIM_IRQHandler+0xa2>
}
 8003d0e:	bd10      	pop	{r4, pc}

08003d10 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d10:	4a30      	ldr	r2, [pc, #192]	; (8003dd4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003d12:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d14:	4290      	cmp	r0, r2
 8003d16:	d012      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d1c:	d00f      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003d22:	4290      	cmp	r0, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d2a:	4290      	cmp	r0, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d32:	4290      	cmp	r0, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d3a:	4290      	cmp	r0, r2
 8003d3c:	d119      	bne.n	8003d72 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8003d3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d44:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d46:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <TIM_Base_SetConfig+0xc4>)
 8003d48:	4290      	cmp	r0, r2
 8003d4a:	d029      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d50:	d026      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003d56:	4290      	cmp	r0, r2
 8003d58:	d022      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d5e:	4290      	cmp	r0, r2
 8003d60:	d01e      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d66:	4290      	cmp	r0, r2
 8003d68:	d01a      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d6e:	4290      	cmp	r0, r2
 8003d70:	d016      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d72:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <TIM_Base_SetConfig+0xc8>)
 8003d74:	4290      	cmp	r0, r2
 8003d76:	d013      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d7c:	4290      	cmp	r0, r2
 8003d7e:	d00f      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d84:	4290      	cmp	r0, r2
 8003d86:	d00b      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d88:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003d8c:	4290      	cmp	r0, r2
 8003d8e:	d007      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d94:	4290      	cmp	r0, r2
 8003d96:	d003      	beq.n	8003da0 <TIM_Base_SetConfig+0x90>
 8003d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d9c:	4290      	cmp	r0, r2
 8003d9e:	d103      	bne.n	8003da8 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	694a      	ldr	r2, [r1, #20]
 8003daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003db0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db2:	688b      	ldr	r3, [r1, #8]
 8003db4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003db6:	680b      	ldr	r3, [r1, #0]
 8003db8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <TIM_Base_SetConfig+0xc4>)
 8003dbc:	4298      	cmp	r0, r3
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0xb8>
 8003dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc4:	4298      	cmp	r0, r3
 8003dc6:	d101      	bne.n	8003dcc <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003dc8:	690b      	ldr	r3, [r1, #16]
 8003dca:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	6143      	str	r3, [r0, #20]
}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40014000 	.word	0x40014000

08003ddc <HAL_TIM_Base_Init>:
{
 8003ddc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003dde:	4604      	mov	r4, r0
 8003de0:	b330      	cbz	r0, 8003e30 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003de6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dea:	b91b      	cbnz	r3, 8003df4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003dec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003df0:	f7fd ff4a 	bl	8001c88 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003df6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfc:	1d21      	adds	r1, r4, #4
 8003dfe:	f7ff ff87 	bl	8003d10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003e08:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e0e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e16:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e22:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003e2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e30:	2001      	movs	r0, #1
 8003e32:	e7fc      	b.n	8003e2e <HAL_TIM_Base_Init+0x52>

08003e34 <HAL_TIM_PWM_Init>:
{
 8003e34:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003e36:	4604      	mov	r4, r0
 8003e38:	b330      	cbz	r0, 8003e88 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003e3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e42:	b91b      	cbnz	r3, 8003e4c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003e44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003e48:	f7ff feba 	bl	8003bc0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e54:	1d21      	adds	r1, r4, #4
 8003e56:	f7ff ff5b 	bl	8003d10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003e60:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e62:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e66:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e7a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003e86:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e88:	2001      	movs	r0, #1
 8003e8a:	e7fc      	b.n	8003e86 <HAL_TIM_PWM_Init+0x52>

08003e8c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8c:	6a03      	ldr	r3, [r0, #32]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003e94:	6a03      	ldr	r3, [r0, #32]
{
 8003e96:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8003e98:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e9a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e9e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb0:	4d10      	ldr	r5, [pc, #64]	; (8003ef4 <TIM_OC2_SetConfig+0x68>)
 8003eb2:	42a8      	cmp	r0, r5
 8003eb4:	d003      	beq.n	8003ebe <TIM_OC2_SetConfig+0x32>
 8003eb6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003eba:	42a8      	cmp	r0, r5
 8003ebc:	d114      	bne.n	8003ee8 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ebe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ec4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec8:	4d0a      	ldr	r5, [pc, #40]	; (8003ef4 <TIM_OC2_SetConfig+0x68>)
 8003eca:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	d003      	beq.n	8003eda <TIM_OC2_SetConfig+0x4e>
 8003ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ed6:	42a8      	cmp	r0, r5
 8003ed8:	d106      	bne.n	8003ee8 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eda:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ede:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ee2:	4335      	orrs	r5, r6
 8003ee4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8003ee8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003eea:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003eec:	684a      	ldr	r2, [r1, #4]
 8003eee:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ef0:	6203      	str	r3, [r0, #32]
}
 8003ef2:	bd70      	pop	{r4, r5, r6, pc}
 8003ef4:	40010000 	.word	0x40010000

08003ef8 <HAL_TIM_PWM_ConfigChannel>:
{
 8003ef8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003efa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003efe:	2b01      	cmp	r3, #1
{
 8003f00:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8003f02:	d050      	beq.n	8003fa6 <HAL_TIM_PWM_ConfigChannel+0xae>
 8003f04:	2301      	movs	r3, #1
  switch (Channel)
 8003f06:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003f08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8003f0c:	d03b      	beq.n	8003f86 <HAL_TIM_PWM_ConfigChannel+0x8e>
 8003f0e:	d807      	bhi.n	8003f20 <HAL_TIM_PWM_ConfigChannel+0x28>
 8003f10:	b1c2      	cbz	r2, 8003f44 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8003f12:	2a04      	cmp	r2, #4
 8003f14:	d027      	beq.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x6e>
 8003f16:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8003f20:	2a0c      	cmp	r2, #12
 8003f22:	d1f8      	bne.n	8003f16 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f24:	6800      	ldr	r0, [r0, #0]
 8003f26:	f7ff fe25 	bl	8003b74 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f2a:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f2c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f32:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f34:	69c3      	ldr	r3, [r0, #28]
 8003f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3a:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f3c:	69c3      	ldr	r3, [r0, #28]
 8003f3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f42:	e02e      	b.n	8003fa2 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f44:	6800      	ldr	r0, [r0, #0]
 8003f46:	f7ff fdad 	bl	8003aa4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f4a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f4c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f4e:	f043 0308 	orr.w	r3, r3, #8
 8003f52:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f54:	6983      	ldr	r3, [r0, #24]
 8003f56:	f023 0304 	bic.w	r3, r3, #4
 8003f5a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f5c:	6983      	ldr	r3, [r0, #24]
 8003f5e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f60:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2000      	movs	r0, #0
      break;
 8003f64:	e7d8      	b.n	8003f18 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f66:	6800      	ldr	r0, [r0, #0]
 8003f68:	f7ff ff90 	bl	8003e8c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f6c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f6e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003f74:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f76:	6983      	ldr	r3, [r0, #24]
 8003f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f7c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f7e:	6983      	ldr	r3, [r0, #24]
 8003f80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f84:	e7ec      	b.n	8003f60 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f86:	6800      	ldr	r0, [r0, #0]
 8003f88:	f7ff fdbe 	bl	8003b08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f8e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f90:	f043 0308 	orr.w	r3, r3, #8
 8003f94:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f96:	69c3      	ldr	r3, [r0, #28]
 8003f98:	f023 0304 	bic.w	r3, r3, #4
 8003f9c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f9e:	69c3      	ldr	r3, [r0, #28]
 8003fa0:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fa2:	61c3      	str	r3, [r0, #28]
 8003fa4:	e7dd      	b.n	8003f62 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8003fa6:	2002      	movs	r0, #2
 8003fa8:	e7b9      	b.n	8003f1e <HAL_TIM_PWM_ConfigChannel+0x26>

08003faa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003faa:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fac:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fae:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb4:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003fb8:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fba:	6083      	str	r3, [r0, #8]
}
 8003fbc:	bd10      	pop	{r4, pc}

08003fbe <HAL_TIM_ConfigClockSource>:
{
 8003fbe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003fc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
{
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003fcc:	f000 808e 	beq.w	80040ec <HAL_TIM_ConfigClockSource+0x12e>
 8003fd0:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003fd6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003fda:	6800      	ldr	r0, [r0, #0]
 8003fdc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fe2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003fe6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003fe8:	680b      	ldr	r3, [r1, #0]
 8003fea:	2b60      	cmp	r3, #96	; 0x60
 8003fec:	d04f      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xd0>
 8003fee:	d832      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x98>
 8003ff0:	2b40      	cmp	r3, #64	; 0x40
 8003ff2:	d064      	beq.n	80040be <HAL_TIM_ConfigClockSource+0x100>
 8003ff4:	d816      	bhi.n	8004024 <HAL_TIM_ConfigClockSource+0x66>
 8003ff6:	2b20      	cmp	r3, #32
 8003ff8:	d00d      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x58>
 8003ffa:	d80a      	bhi.n	8004012 <HAL_TIM_ConfigClockSource+0x54>
 8003ffc:	f033 0110 	bics.w	r1, r3, #16
 8004000:	d009      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8004002:	2301      	movs	r3, #1
 8004004:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004008:	2300      	movs	r3, #0
 800400a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800400e:	4610      	mov	r0, r2
 8004010:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004012:	2b30      	cmp	r3, #48	; 0x30
 8004014:	d1f5      	bne.n	8004002 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8004016:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004018:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800401c:	4313      	orrs	r3, r2
 800401e:	f043 0307 	orr.w	r3, r3, #7
 8004022:	e028      	b.n	8004076 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8004024:	2b50      	cmp	r3, #80	; 0x50
 8004026:	d1ec      	bne.n	8004002 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004028:	684a      	ldr	r2, [r1, #4]
 800402a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800402c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402e:	6a03      	ldr	r3, [r0, #32]
 8004030:	f023 0301 	bic.w	r3, r3, #1
 8004034:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004036:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004038:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800403c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004040:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004044:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004046:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004048:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800404a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004050:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004054:	e00f      	b.n	8004076 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d00d      	beq.n	8004078 <HAL_TIM_ConfigClockSource+0xba>
 800405c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004060:	d00c      	beq.n	800407c <HAL_TIM_ConfigClockSource+0xbe>
 8004062:	2b70      	cmp	r3, #112	; 0x70
 8004064:	d1cd      	bne.n	8004002 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8004066:	68cb      	ldr	r3, [r1, #12]
 8004068:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800406c:	f7ff ff9d 	bl	8003faa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004070:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004072:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8004076:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2200      	movs	r2, #0
 800407a:	e7c2      	b.n	8004002 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800407c:	68cb      	ldr	r3, [r1, #12]
 800407e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004082:	f7ff ff92 	bl	8003faa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004086:	6883      	ldr	r3, [r0, #8]
 8004088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800408c:	e7f3      	b.n	8004076 <HAL_TIM_ConfigClockSource+0xb8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408e:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004090:	684d      	ldr	r5, [r1, #4]
 8004092:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004094:	f023 0310 	bic.w	r3, r3, #16
 8004098:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800409a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800409c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800409e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80040a6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040aa:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80040ae:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80040b0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80040b2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040b8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80040bc:	e7db      	b.n	8004076 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	684a      	ldr	r2, [r1, #4]
 80040c0:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80040c2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c4:	6a03      	ldr	r3, [r0, #32]
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040cc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ce:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80040da:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80040dc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80040de:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80040e0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040e6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80040ea:	e7c4      	b.n	8004076 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80040ec:	461a      	mov	r2, r3
 80040ee:	e78e      	b.n	800400e <HAL_TIM_ConfigClockSource+0x50>

080040f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040f2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f04f 0302 	mov.w	r3, #2
 80040fc:	d032      	beq.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004102:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004104:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8004106:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004108:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800410a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800410e:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004110:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004112:	4c15      	ldr	r4, [pc, #84]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8004114:	42a3      	cmp	r3, r4
 8004116:	d01a      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d017      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800411e:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8004122:	42a3      	cmp	r3, r4
 8004124:	d013      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004126:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800412a:	42a3      	cmp	r3, r4
 800412c:	d00f      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800412e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004132:	42a3      	cmp	r3, r4
 8004134:	d00b      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004136:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800413a:	42a3      	cmp	r3, r4
 800413c:	d007      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800413e:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8004142:	42a3      	cmp	r3, r4
 8004144:	d003      	beq.n	800414e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004146:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800414a:	42a3      	cmp	r3, r4
 800414c:	d104      	bne.n	8004158 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004150:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004154:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004158:	2301      	movs	r3, #1
 800415a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800415e:	2300      	movs	r3, #0
 8004160:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004164:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004166:	bd30      	pop	{r4, r5, pc}
 8004168:	40010000 	.word	0x40010000

0800416c <HAL_TIMEx_CommutCallback>:
 800416c:	4770      	bx	lr

0800416e <HAL_TIMEx_BreakCallback>:
 800416e:	4770      	bx	lr

08004170 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004170:	6802      	ldr	r2, [r0, #0]
 8004172:	68c1      	ldr	r1, [r0, #12]
 8004174:	6913      	ldr	r3, [r2, #16]
 8004176:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800417a:	430b      	orrs	r3, r1
{
 800417c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800417e:	6113      	str	r3, [r2, #16]
{
 8004180:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004182:	6883      	ldr	r3, [r0, #8]
 8004184:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004186:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004188:	4303      	orrs	r3, r0
 800418a:	6968      	ldr	r0, [r5, #20]
 800418c:	4303      	orrs	r3, r0
 800418e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004190:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004194:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004198:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800419a:	430b      	orrs	r3, r1
 800419c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800419e:	6953      	ldr	r3, [r2, #20]
 80041a0:	69a9      	ldr	r1, [r5, #24]
 80041a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a6:	430b      	orrs	r3, r1
 80041a8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041aa:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <UART_SetConfig+0xb8>)
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d003      	beq.n	80041b8 <UART_SetConfig+0x48>
 80041b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d123      	bne.n	8004200 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041b8:	f7ff f9b0 	bl	800351c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041bc:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041be:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041c4:	e9d5 4600 	ldrd	r4, r6, [r5]
 80041c8:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041cc:	d11b      	bne.n	8004206 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041ce:	19b2      	adds	r2, r6, r6
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	415b      	adcs	r3, r3
 80041d6:	f7fc fd37 	bl	8000c48 <__aeabi_uldivmod>
 80041da:	2264      	movs	r2, #100	; 0x64
 80041dc:	fbb0 f1f2 	udiv	r1, r0, r2
 80041e0:	fb02 0311 	mls	r3, r2, r1, r0
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	3332      	adds	r3, #50	; 0x32
 80041e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80041ec:	f003 0207 	and.w	r2, r3, #7
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80041f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041fa:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041fc:	60a3      	str	r3, [r4, #8]
  }
}
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7ff f97c 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8004204:	e7da      	b.n	80041bc <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004206:	00b2      	lsls	r2, r6, #2
 8004208:	0fb3      	lsrs	r3, r6, #30
 800420a:	f7fc fd1d 	bl	8000c48 <__aeabi_uldivmod>
 800420e:	2264      	movs	r2, #100	; 0x64
 8004210:	fbb0 f1f2 	udiv	r1, r0, r2
 8004214:	fb02 0311 	mls	r3, r2, r1, r0
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004220:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004224:	e7ea      	b.n	80041fc <UART_SetConfig+0x8c>
 8004226:	bf00      	nop
 8004228:	40011000 	.word	0x40011000

0800422c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	4604      	mov	r4, r0
 8004230:	460e      	mov	r6, r1
 8004232:	4617      	mov	r7, r2
 8004234:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	ea36 0303 	bics.w	r3, r6, r3
 800423e:	d101      	bne.n	8004244 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8004240:	2000      	movs	r0, #0
 8004242:	e028      	b.n	8004296 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8004244:	1c6b      	adds	r3, r5, #1
 8004246:	d0f7      	beq.n	8004238 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004248:	b125      	cbz	r5, 8004254 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800424a:	f7fd feff 	bl	800204c <HAL_GetTick>
 800424e:	1bc0      	subs	r0, r0, r7
 8004250:	4285      	cmp	r5, r0
 8004252:	d2f0      	bcs.n	8004236 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004254:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	f102 030c 	add.w	r3, r2, #12
 800425a:	e853 3f00 	ldrex	r3, [r3]
 800425e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	320c      	adds	r2, #12
 8004264:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8004268:	6821      	ldr	r1, [r4, #0]
 800426a:	2800      	cmp	r0, #0
 800426c:	d1f2      	bne.n	8004254 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	f101 0314 	add.w	r3, r1, #20
 8004272:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004276:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	f101 0014 	add.w	r0, r1, #20
 800427e:	e840 3200 	strex	r2, r3, [r0]
 8004282:	2a00      	cmp	r2, #0
 8004284:	d1f3      	bne.n	800426e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8004286:	2320      	movs	r3, #32
 8004288:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800428c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004290:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004294:	2003      	movs	r0, #3
}
 8004296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004298 <HAL_UART_Init>:
{
 8004298:	b510      	push	{r4, lr}
  if (huart == NULL)
 800429a:	4604      	mov	r4, r0
 800429c:	b340      	cbz	r0, 80042f0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042a6:	b91b      	cbnz	r3, 80042b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80042a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80042ac:	f7fd fd4c 	bl	8001d48 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80042b0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042b2:	2324      	movs	r3, #36	; 0x24
 80042b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80042b8:	68d3      	ldr	r3, [r2, #12]
 80042ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042be:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80042c0:	4620      	mov	r0, r4
 80042c2:	f7ff ff55 	bl	8004170 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80042e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e4:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80042ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80042f0:	2001      	movs	r0, #1
 80042f2:	e7fc      	b.n	80042ee <HAL_UART_Init+0x56>

080042f4 <HAL_UART_Transmit>:
{
 80042f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80042f8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80042fc:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80042fe:	2a20      	cmp	r2, #32
{
 8004300:	4604      	mov	r4, r0
 8004302:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004304:	d149      	bne.n	800439a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8004306:	2900      	cmp	r1, #0
 8004308:	d045      	beq.n	8004396 <HAL_UART_Transmit+0xa2>
 800430a:	2f00      	cmp	r7, #0
 800430c:	d043      	beq.n	8004396 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800430e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004312:	2a01      	cmp	r2, #1
 8004314:	d041      	beq.n	800439a <HAL_UART_Transmit+0xa6>
 8004316:	2201      	movs	r2, #1
 8004318:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800431e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004322:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004326:	f7fd fe91 	bl	800204c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432a:	68a1      	ldr	r1, [r4, #8]
 800432c:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 800432e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004334:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8004336:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004338:	d103      	bne.n	8004342 <HAL_UART_Transmit+0x4e>
 800433a:	6921      	ldr	r1, [r4, #16]
 800433c:	b909      	cbnz	r1, 8004342 <HAL_UART_Transmit+0x4e>
 800433e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004340:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8004342:	2100      	movs	r1, #0
 8004344:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004348:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800434a:	b289      	uxth	r1, r1
 800434c:	b941      	cbnz	r1, 8004360 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800434e:	2140      	movs	r1, #64	; 0x40
 8004350:	4620      	mov	r0, r4
 8004352:	f7ff ff6b 	bl	800422c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004356:	b960      	cbnz	r0, 8004372 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8004358:	2320      	movs	r3, #32
 800435a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800435e:	e009      	b.n	8004374 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004360:	2180      	movs	r1, #128	; 0x80
 8004362:	4620      	mov	r0, r4
 8004364:	e9cd 2300 	strd	r2, r3, [sp]
 8004368:	f7ff ff60 	bl	800422c <UART_WaitOnFlagUntilTimeout.constprop.0>
 800436c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004370:	b110      	cbz	r0, 8004378 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8004372:	2003      	movs	r0, #3
}
 8004374:	b003      	add	sp, #12
 8004376:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004378:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 800437a:	b94e      	cbnz	r6, 8004390 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800437c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8004380:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004384:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8004386:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004388:	3901      	subs	r1, #1
 800438a:	b289      	uxth	r1, r1
 800438c:	84e1      	strh	r1, [r4, #38]	; 0x26
 800438e:	e7db      	b.n	8004348 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004390:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004394:	e7f6      	b.n	8004384 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8004396:	2001      	movs	r0, #1
 8004398:	e7ec      	b.n	8004374 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800439a:	2002      	movs	r0, #2
 800439c:	e7ea      	b.n	8004374 <HAL_UART_Transmit+0x80>

0800439e <_ZN4blib3LcdD1Ev>:
        init();
    }
    Lcd::~Lcd()
    {

    }
 800439e:	4770      	bx	lr

080043a0 <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 80043a0:	b510      	push	{r4, lr}
    }
 80043a2:	2114      	movs	r1, #20
    Lcd::~Lcd()
 80043a4:	4604      	mov	r4, r0
    }
 80043a6:	f000 f8d7 	bl	8004558 <_ZdlPvj>
 80043aa:	4620      	mov	r0, r4
 80043ac:	bd10      	pop	{r4, pc}

080043ae <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 80043ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t dataHigh = 0, dataLow = 0;
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 80043b0:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
        dataLow = ((command << 4) & 0xF0);
 80043b4:	0109      	lsls	r1, r1, #4
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 80043b6:	f043 020c 	orr.w	r2, r3, #12
        dataLow = ((command << 4) & 0xF0);
 80043ba:	b2c9      	uxtb	r1, r1
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	f88d 300d 	strb.w	r3, [sp, #13]
        data[2] = dataLow | 0x0C;
 80043c4:	f041 030c 	orr.w	r3, r1, #12
 80043c8:	f88d 300e 	strb.w	r3, [sp, #14]
        data[3] = dataLow | 0x08;
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 80043cc:	2364      	movs	r3, #100	; 0x64
 80043ce:	9300      	str	r3, [sp, #0]
        data[3] = dataLow | 0x08;
 80043d0:	f041 0108 	orr.w	r1, r1, #8
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 80043d4:	f88d 200c 	strb.w	r2, [sp, #12]
        data[3] = dataLow | 0x08;
 80043d8:	f88d 100f 	strb.w	r1, [sp, #15]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 80043dc:	2304      	movs	r3, #4
 80043de:	7b01      	ldrb	r1, [r0, #12]
 80043e0:	6880      	ldr	r0, [r0, #8]
 80043e2:	aa03      	add	r2, sp, #12
 80043e4:	f7fe fd3e 	bl	8002e64 <HAL_I2C_Master_Transmit>
    }
 80043e8:	b005      	add	sp, #20
 80043ea:	f85d fb04 	ldr.w	pc, [sp], #4

080043ee <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 80043ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t dataHigh = 0, dataLow = 0;
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 80043f0:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
        dataLow = ((data << 4) & 0xF0);
 80043f4:	0109      	lsls	r1, r1, #4
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 80043f6:	f043 020d 	orr.w	r2, r3, #13
        dataLow = ((data << 4) & 0xF0);
 80043fa:	b2c9      	uxtb	r1, r1
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 80043fc:	f043 0309 	orr.w	r3, r3, #9
 8004400:	f88d 300d 	strb.w	r3, [sp, #13]
        dataBuf[2] = dataLow | 0x0D;
 8004404:	f041 030d 	orr.w	r3, r1, #13
 8004408:	f88d 300e 	strb.w	r3, [sp, #14]
        dataBuf[3] = dataLow | 0x09;
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 800440c:	2364      	movs	r3, #100	; 0x64
 800440e:	9300      	str	r3, [sp, #0]
        dataBuf[3] = dataLow | 0x09;
 8004410:	f041 0109 	orr.w	r1, r1, #9
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 8004414:	f88d 200c 	strb.w	r2, [sp, #12]
        dataBuf[3] = dataLow | 0x09;
 8004418:	f88d 100f 	strb.w	r1, [sp, #15]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 800441c:	2304      	movs	r3, #4
 800441e:	7b01      	ldrb	r1, [r0, #12]
 8004420:	6880      	ldr	r0, [r0, #8]
 8004422:	aa03      	add	r2, sp, #12
 8004424:	f7fe fd1e 	bl	8002e64 <HAL_I2C_Master_Transmit>
    }
 8004428:	b005      	add	sp, #20
 800442a:	f85d fb04 	ldr.w	pc, [sp], #4

0800442e <_ZN4blib3Lcd11displayLineEhhPKc>:
    void Lcd::pushData()
    {

    }
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 800442e:	b538      	push	{r3, r4, r5, lr}
 8004430:	461d      	mov	r5, r3
        uint8_t command = 0;

        switch (mLcdType)
 8004432:	6843      	ldr	r3, [r0, #4]
 8004434:	2b01      	cmp	r3, #1
    {
 8004436:	4604      	mov	r4, r0
        switch (mLcdType)
 8004438:	d11b      	bne.n	8004472 <_ZN4blib3Lcd11displayLineEhhPKc+0x44>
        {
            case LcdType::LCD_TYPE_1602:
                break;
            case LcdType::LCD_TYPE_2004:
                switch (row)
 800443a:	2903      	cmp	r1, #3
 800443c:	d819      	bhi.n	8004472 <_ZN4blib3Lcd11displayLineEhhPKc+0x44>
 800443e:	e8df f001 	tbb	[pc, r1]
 8004442:	0c02      	.short	0x0c02
 8004444:	1512      	.short	0x1512
                {
                    case 0:
                        command = 0x80 | (col + 0x00);
 8004446:	f042 0180 	orr.w	r1, r2, #128	; 0x80
                break;
            default:
                break;
        }

        sendCmd(command);
 800444a:	4620      	mov	r0, r4
 800444c:	f7ff ffaf 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 8004450:	3d01      	subs	r5, #1
 8004452:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8004456:	b971      	cbnz	r1, 8004476 <_ZN4blib3Lcd11displayLineEhhPKc+0x48>
        {
            sendData(*string);
            string++;
        }
    }
 8004458:	bd38      	pop	{r3, r4, r5, pc}
                        command = 0x80 | (col + 0x40);
 800445a:	f102 0140 	add.w	r1, r2, #64	; 0x40
                        command = 0x80 | (col + 0x54);
 800445e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8004462:	b2c9      	uxtb	r1, r1
                        break;
 8004464:	e7f1      	b.n	800444a <_ZN4blib3Lcd11displayLineEhhPKc+0x1c>
                        command = 0x80 | (col + 0x14);
 8004466:	f102 0114 	add.w	r1, r2, #20
 800446a:	e7f8      	b.n	800445e <_ZN4blib3Lcd11displayLineEhhPKc+0x30>
                        command = 0x80 | (col + 0x54);
 800446c:	f102 0154 	add.w	r1, r2, #84	; 0x54
 8004470:	e7f5      	b.n	800445e <_ZN4blib3Lcd11displayLineEhhPKc+0x30>
 8004472:	2100      	movs	r1, #0
 8004474:	e7e9      	b.n	800444a <_ZN4blib3Lcd11displayLineEhhPKc+0x1c>
            sendData(*string);
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff ffb9 	bl	80043ee <_ZN4blib3Lcd8sendDataEh>
            string++;
 800447c:	e7e9      	b.n	8004452 <_ZN4blib3Lcd11displayLineEhhPKc+0x24>

0800447e <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
 800447e:	b538      	push	{r3, r4, r5, lr}
        sendCmd(0x00);
 8004480:	2100      	movs	r1, #0
    {
 8004482:	4605      	mov	r5, r0
        sendCmd(0x00);
 8004484:	f7ff ff93 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
 8004488:	2464      	movs	r4, #100	; 0x64
        for (uint8_t i = 0; i < 100; i++)
        {
            sendData(' ');
 800448a:	2120      	movs	r1, #32
 800448c:	4628      	mov	r0, r5
        for (uint8_t i = 0; i < 100; i++)
 800448e:	3c01      	subs	r4, #1
            sendData(' ');
 8004490:	f7ff ffad 	bl	80043ee <_ZN4blib3Lcd8sendDataEh>
        for (uint8_t i = 0; i < 100; i++)
 8004494:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004498:	d1f7      	bne.n	800448a <_ZN4blib3Lcd12clearDisplayEv+0xc>
        }
    }
 800449a:	bd38      	pop	{r3, r4, r5, pc}

0800449c <_ZN4blib3Lcd4initEv>:
    void Lcd::init()
    {
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 800449c:	2306      	movs	r3, #6
    {
 800449e:	b510      	push	{r4, lr}
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 80044a0:	7343      	strb	r3, [r0, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 80044a2:	f642 0308 	movw	r3, #10248	; 0x2808
 80044a6:	81c3      	strh	r3, [r0, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_BLACKLIGHT;
 80044a8:	2308      	movs	r3, #8
 80044aa:	7403      	strb	r3, [r0, #16]
    {
 80044ac:	4604      	mov	r4, r0

        HAL_Delay(50);
 80044ae:	2032      	movs	r0, #50	; 0x32
 80044b0:	f7fd fdd2 	bl	8002058 <HAL_Delay>
        sendCmd(0x30);
 80044b4:	2130      	movs	r1, #48	; 0x30
 80044b6:	4620      	mov	r0, r4
 80044b8:	f7ff ff79 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 80044bc:	2005      	movs	r0, #5
 80044be:	f7fd fdcb 	bl	8002058 <HAL_Delay>
        sendCmd(0x30);
 80044c2:	2130      	movs	r1, #48	; 0x30
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7ff ff72 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 80044ca:	2001      	movs	r0, #1
 80044cc:	f7fd fdc4 	bl	8002058 <HAL_Delay>
        sendCmd(0x30);
 80044d0:	2130      	movs	r1, #48	; 0x30
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7ff ff6b 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 80044d8:	200a      	movs	r0, #10
 80044da:	f7fd fdbd 	bl	8002058 <HAL_Delay>
        sendCmd(0x20);
 80044de:	2120      	movs	r1, #32
 80044e0:	4620      	mov	r0, r4
 80044e2:	f7ff ff64 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 80044e6:	200a      	movs	r0, #10
 80044e8:	f7fd fdb6 	bl	8002058 <HAL_Delay>

        sendCmd(mFunctionSet);
 80044ec:	7be1      	ldrb	r1, [r4, #15]
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7ff ff5d 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 80044f4:	2001      	movs	r0, #1
 80044f6:	f7fd fdaf 	bl	8002058 <HAL_Delay>
        sendCmd(mDisplayControl);
 80044fa:	7ba1      	ldrb	r1, [r4, #14]
 80044fc:	4620      	mov	r0, r4
 80044fe:	f7ff ff56 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8004502:	2001      	movs	r0, #1
 8004504:	f7fd fda8 	bl	8002058 <HAL_Delay>
        sendCmd(0x01);    //clear display
 8004508:	2101      	movs	r1, #1
 800450a:	4620      	mov	r0, r4
 800450c:	f7ff ff4f 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 8004510:	2002      	movs	r0, #2
 8004512:	f7fd fda1 	bl	8002058 <HAL_Delay>
        sendCmd(mEntryMode);
 8004516:	7b61      	ldrb	r1, [r4, #13]
 8004518:	4620      	mov	r0, r4
 800451a:	f7ff ff48 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800451e:	2001      	movs	r0, #1
 8004520:	f7fd fd9a 	bl	8002058 <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 8004524:	7ba1      	ldrb	r1, [r4, #14]
 8004526:	4620      	mov	r0, r4
 8004528:	f041 0104 	orr.w	r1, r1, #4
 800452c:	f7ff ff3f 	bl	80043ae <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
    }
 8004530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_Delay(1);
 8004534:	2001      	movs	r0, #1
 8004536:	f7fd bd8f 	b.w	8002058 <HAL_Delay>
	...

0800453c <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh>:
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 800453c:	b538      	push	{r3, r4, r5, lr}
            address)
 800453e:	4d05      	ldr	r5, [pc, #20]	; (8004554 <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh+0x18>)
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8004540:	6082      	str	r2, [r0, #8]
 8004542:	e9c0 5100 	strd	r5, r1, [r0]
 8004546:	4604      	mov	r4, r0
 8004548:	7303      	strb	r3, [r0, #12]
        init();
 800454a:	f7ff ffa7 	bl	800449c <_ZN4blib3Lcd4initEv>
    }
 800454e:	4620      	mov	r0, r4
 8004550:	bd38      	pop	{r3, r4, r5, pc}
 8004552:	bf00      	nop
 8004554:	08007694 	.word	0x08007694

08004558 <_ZdlPvj>:
 8004558:	f000 b811 	b.w	800457e <_ZdlPv>

0800455c <_Znwj>:
 800455c:	2801      	cmp	r0, #1
 800455e:	bf38      	it	cc
 8004560:	2001      	movcc	r0, #1
 8004562:	b510      	push	{r4, lr}
 8004564:	4604      	mov	r4, r0
 8004566:	4620      	mov	r0, r4
 8004568:	f000 f81c 	bl	80045a4 <malloc>
 800456c:	b100      	cbz	r0, 8004570 <_Znwj+0x14>
 800456e:	bd10      	pop	{r4, pc}
 8004570:	f000 f808 	bl	8004584 <_ZSt15get_new_handlerv>
 8004574:	b908      	cbnz	r0, 800457a <_Znwj+0x1e>
 8004576:	f000 f80d 	bl	8004594 <abort>
 800457a:	4780      	blx	r0
 800457c:	e7f3      	b.n	8004566 <_Znwj+0xa>

0800457e <_ZdlPv>:
 800457e:	f000 b819 	b.w	80045b4 <free>
	...

08004584 <_ZSt15get_new_handlerv>:
 8004584:	4b02      	ldr	r3, [pc, #8]	; (8004590 <_ZSt15get_new_handlerv+0xc>)
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	f3bf 8f5b 	dmb	ish
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	20000884 	.word	0x20000884

08004594 <abort>:
 8004594:	b508      	push	{r3, lr}
 8004596:	2006      	movs	r0, #6
 8004598:	f000 fe90 	bl	80052bc <raise>
 800459c:	2001      	movs	r0, #1
 800459e:	f7fd fc89 	bl	8001eb4 <_exit>
	...

080045a4 <malloc>:
 80045a4:	4b02      	ldr	r3, [pc, #8]	; (80045b0 <malloc+0xc>)
 80045a6:	4601      	mov	r1, r0
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	f000 b82b 	b.w	8004604 <_malloc_r>
 80045ae:	bf00      	nop
 80045b0:	20000068 	.word	0x20000068

080045b4 <free>:
 80045b4:	4b02      	ldr	r3, [pc, #8]	; (80045c0 <free+0xc>)
 80045b6:	4601      	mov	r1, r0
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	f001 bd9f 	b.w	80060fc <_free_r>
 80045be:	bf00      	nop
 80045c0:	20000068 	.word	0x20000068

080045c4 <sbrk_aligned>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4e0e      	ldr	r6, [pc, #56]	; (8004600 <sbrk_aligned+0x3c>)
 80045c8:	460c      	mov	r4, r1
 80045ca:	6831      	ldr	r1, [r6, #0]
 80045cc:	4605      	mov	r5, r0
 80045ce:	b911      	cbnz	r1, 80045d6 <sbrk_aligned+0x12>
 80045d0:	f000 fec8 	bl	8005364 <_sbrk_r>
 80045d4:	6030      	str	r0, [r6, #0]
 80045d6:	4621      	mov	r1, r4
 80045d8:	4628      	mov	r0, r5
 80045da:	f000 fec3 	bl	8005364 <_sbrk_r>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	d00a      	beq.n	80045f8 <sbrk_aligned+0x34>
 80045e2:	1cc4      	adds	r4, r0, #3
 80045e4:	f024 0403 	bic.w	r4, r4, #3
 80045e8:	42a0      	cmp	r0, r4
 80045ea:	d007      	beq.n	80045fc <sbrk_aligned+0x38>
 80045ec:	1a21      	subs	r1, r4, r0
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 feb8 	bl	8005364 <_sbrk_r>
 80045f4:	3001      	adds	r0, #1
 80045f6:	d101      	bne.n	80045fc <sbrk_aligned+0x38>
 80045f8:	f04f 34ff 	mov.w	r4, #4294967295
 80045fc:	4620      	mov	r0, r4
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	2000088c 	.word	0x2000088c

08004604 <_malloc_r>:
 8004604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004608:	1ccd      	adds	r5, r1, #3
 800460a:	f025 0503 	bic.w	r5, r5, #3
 800460e:	3508      	adds	r5, #8
 8004610:	2d0c      	cmp	r5, #12
 8004612:	bf38      	it	cc
 8004614:	250c      	movcc	r5, #12
 8004616:	2d00      	cmp	r5, #0
 8004618:	4607      	mov	r7, r0
 800461a:	db01      	blt.n	8004620 <_malloc_r+0x1c>
 800461c:	42a9      	cmp	r1, r5
 800461e:	d905      	bls.n	800462c <_malloc_r+0x28>
 8004620:	230c      	movs	r3, #12
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	2600      	movs	r6, #0
 8004626:	4630      	mov	r0, r6
 8004628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800462c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004700 <_malloc_r+0xfc>
 8004630:	f000 f868 	bl	8004704 <__malloc_lock>
 8004634:	f8d8 3000 	ldr.w	r3, [r8]
 8004638:	461c      	mov	r4, r3
 800463a:	bb5c      	cbnz	r4, 8004694 <_malloc_r+0x90>
 800463c:	4629      	mov	r1, r5
 800463e:	4638      	mov	r0, r7
 8004640:	f7ff ffc0 	bl	80045c4 <sbrk_aligned>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	4604      	mov	r4, r0
 8004648:	d155      	bne.n	80046f6 <_malloc_r+0xf2>
 800464a:	f8d8 4000 	ldr.w	r4, [r8]
 800464e:	4626      	mov	r6, r4
 8004650:	2e00      	cmp	r6, #0
 8004652:	d145      	bne.n	80046e0 <_malloc_r+0xdc>
 8004654:	2c00      	cmp	r4, #0
 8004656:	d048      	beq.n	80046ea <_malloc_r+0xe6>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	4631      	mov	r1, r6
 800465c:	4638      	mov	r0, r7
 800465e:	eb04 0903 	add.w	r9, r4, r3
 8004662:	f000 fe7f 	bl	8005364 <_sbrk_r>
 8004666:	4581      	cmp	r9, r0
 8004668:	d13f      	bne.n	80046ea <_malloc_r+0xe6>
 800466a:	6821      	ldr	r1, [r4, #0]
 800466c:	1a6d      	subs	r5, r5, r1
 800466e:	4629      	mov	r1, r5
 8004670:	4638      	mov	r0, r7
 8004672:	f7ff ffa7 	bl	80045c4 <sbrk_aligned>
 8004676:	3001      	adds	r0, #1
 8004678:	d037      	beq.n	80046ea <_malloc_r+0xe6>
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	442b      	add	r3, r5
 800467e:	6023      	str	r3, [r4, #0]
 8004680:	f8d8 3000 	ldr.w	r3, [r8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d038      	beq.n	80046fa <_malloc_r+0xf6>
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	42a2      	cmp	r2, r4
 800468c:	d12b      	bne.n	80046e6 <_malloc_r+0xe2>
 800468e:	2200      	movs	r2, #0
 8004690:	605a      	str	r2, [r3, #4]
 8004692:	e00f      	b.n	80046b4 <_malloc_r+0xb0>
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	1b52      	subs	r2, r2, r5
 8004698:	d41f      	bmi.n	80046da <_malloc_r+0xd6>
 800469a:	2a0b      	cmp	r2, #11
 800469c:	d917      	bls.n	80046ce <_malloc_r+0xca>
 800469e:	1961      	adds	r1, r4, r5
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	6025      	str	r5, [r4, #0]
 80046a4:	bf18      	it	ne
 80046a6:	6059      	strne	r1, [r3, #4]
 80046a8:	6863      	ldr	r3, [r4, #4]
 80046aa:	bf08      	it	eq
 80046ac:	f8c8 1000 	streq.w	r1, [r8]
 80046b0:	5162      	str	r2, [r4, r5]
 80046b2:	604b      	str	r3, [r1, #4]
 80046b4:	4638      	mov	r0, r7
 80046b6:	f104 060b 	add.w	r6, r4, #11
 80046ba:	f000 f829 	bl	8004710 <__malloc_unlock>
 80046be:	f026 0607 	bic.w	r6, r6, #7
 80046c2:	1d23      	adds	r3, r4, #4
 80046c4:	1af2      	subs	r2, r6, r3
 80046c6:	d0ae      	beq.n	8004626 <_malloc_r+0x22>
 80046c8:	1b9b      	subs	r3, r3, r6
 80046ca:	50a3      	str	r3, [r4, r2]
 80046cc:	e7ab      	b.n	8004626 <_malloc_r+0x22>
 80046ce:	42a3      	cmp	r3, r4
 80046d0:	6862      	ldr	r2, [r4, #4]
 80046d2:	d1dd      	bne.n	8004690 <_malloc_r+0x8c>
 80046d4:	f8c8 2000 	str.w	r2, [r8]
 80046d8:	e7ec      	b.n	80046b4 <_malloc_r+0xb0>
 80046da:	4623      	mov	r3, r4
 80046dc:	6864      	ldr	r4, [r4, #4]
 80046de:	e7ac      	b.n	800463a <_malloc_r+0x36>
 80046e0:	4634      	mov	r4, r6
 80046e2:	6876      	ldr	r6, [r6, #4]
 80046e4:	e7b4      	b.n	8004650 <_malloc_r+0x4c>
 80046e6:	4613      	mov	r3, r2
 80046e8:	e7cc      	b.n	8004684 <_malloc_r+0x80>
 80046ea:	230c      	movs	r3, #12
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4638      	mov	r0, r7
 80046f0:	f000 f80e 	bl	8004710 <__malloc_unlock>
 80046f4:	e797      	b.n	8004626 <_malloc_r+0x22>
 80046f6:	6025      	str	r5, [r4, #0]
 80046f8:	e7dc      	b.n	80046b4 <_malloc_r+0xb0>
 80046fa:	605b      	str	r3, [r3, #4]
 80046fc:	deff      	udf	#255	; 0xff
 80046fe:	bf00      	nop
 8004700:	20000888 	.word	0x20000888

08004704 <__malloc_lock>:
 8004704:	4801      	ldr	r0, [pc, #4]	; (800470c <__malloc_lock+0x8>)
 8004706:	f000 be7a 	b.w	80053fe <__retarget_lock_acquire_recursive>
 800470a:	bf00      	nop
 800470c:	200009d0 	.word	0x200009d0

08004710 <__malloc_unlock>:
 8004710:	4801      	ldr	r0, [pc, #4]	; (8004718 <__malloc_unlock+0x8>)
 8004712:	f000 be75 	b.w	8005400 <__retarget_lock_release_recursive>
 8004716:	bf00      	nop
 8004718:	200009d0 	.word	0x200009d0

0800471c <__cvt>:
 800471c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004720:	ec55 4b10 	vmov	r4, r5, d0
 8004724:	2d00      	cmp	r5, #0
 8004726:	460e      	mov	r6, r1
 8004728:	4619      	mov	r1, r3
 800472a:	462b      	mov	r3, r5
 800472c:	bfbb      	ittet	lt
 800472e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004732:	461d      	movlt	r5, r3
 8004734:	2300      	movge	r3, #0
 8004736:	232d      	movlt	r3, #45	; 0x2d
 8004738:	700b      	strb	r3, [r1, #0]
 800473a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800473c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004740:	4691      	mov	r9, r2
 8004742:	f023 0820 	bic.w	r8, r3, #32
 8004746:	bfbc      	itt	lt
 8004748:	4622      	movlt	r2, r4
 800474a:	4614      	movlt	r4, r2
 800474c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004750:	d005      	beq.n	800475e <__cvt+0x42>
 8004752:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004756:	d100      	bne.n	800475a <__cvt+0x3e>
 8004758:	3601      	adds	r6, #1
 800475a:	2102      	movs	r1, #2
 800475c:	e000      	b.n	8004760 <__cvt+0x44>
 800475e:	2103      	movs	r1, #3
 8004760:	ab03      	add	r3, sp, #12
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	ab02      	add	r3, sp, #8
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	ec45 4b10 	vmov	d0, r4, r5
 800476c:	4653      	mov	r3, sl
 800476e:	4632      	mov	r2, r6
 8004770:	f000 fed2 	bl	8005518 <_dtoa_r>
 8004774:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004778:	4607      	mov	r7, r0
 800477a:	d102      	bne.n	8004782 <__cvt+0x66>
 800477c:	f019 0f01 	tst.w	r9, #1
 8004780:	d022      	beq.n	80047c8 <__cvt+0xac>
 8004782:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004786:	eb07 0906 	add.w	r9, r7, r6
 800478a:	d110      	bne.n	80047ae <__cvt+0x92>
 800478c:	783b      	ldrb	r3, [r7, #0]
 800478e:	2b30      	cmp	r3, #48	; 0x30
 8004790:	d10a      	bne.n	80047a8 <__cvt+0x8c>
 8004792:	2200      	movs	r2, #0
 8004794:	2300      	movs	r3, #0
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	f7fc f995 	bl	8000ac8 <__aeabi_dcmpeq>
 800479e:	b918      	cbnz	r0, 80047a8 <__cvt+0x8c>
 80047a0:	f1c6 0601 	rsb	r6, r6, #1
 80047a4:	f8ca 6000 	str.w	r6, [sl]
 80047a8:	f8da 3000 	ldr.w	r3, [sl]
 80047ac:	4499      	add	r9, r3
 80047ae:	2200      	movs	r2, #0
 80047b0:	2300      	movs	r3, #0
 80047b2:	4620      	mov	r0, r4
 80047b4:	4629      	mov	r1, r5
 80047b6:	f7fc f987 	bl	8000ac8 <__aeabi_dcmpeq>
 80047ba:	b108      	cbz	r0, 80047c0 <__cvt+0xa4>
 80047bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80047c0:	2230      	movs	r2, #48	; 0x30
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	454b      	cmp	r3, r9
 80047c6:	d307      	bcc.n	80047d8 <__cvt+0xbc>
 80047c8:	9b03      	ldr	r3, [sp, #12]
 80047ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047cc:	1bdb      	subs	r3, r3, r7
 80047ce:	4638      	mov	r0, r7
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	b004      	add	sp, #16
 80047d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d8:	1c59      	adds	r1, r3, #1
 80047da:	9103      	str	r1, [sp, #12]
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e7f0      	b.n	80047c2 <__cvt+0xa6>

080047e0 <__exponent>:
 80047e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047e2:	4603      	mov	r3, r0
 80047e4:	2900      	cmp	r1, #0
 80047e6:	bfb8      	it	lt
 80047e8:	4249      	neglt	r1, r1
 80047ea:	f803 2b02 	strb.w	r2, [r3], #2
 80047ee:	bfb4      	ite	lt
 80047f0:	222d      	movlt	r2, #45	; 0x2d
 80047f2:	222b      	movge	r2, #43	; 0x2b
 80047f4:	2909      	cmp	r1, #9
 80047f6:	7042      	strb	r2, [r0, #1]
 80047f8:	dd2a      	ble.n	8004850 <__exponent+0x70>
 80047fa:	f10d 0207 	add.w	r2, sp, #7
 80047fe:	4617      	mov	r7, r2
 8004800:	260a      	movs	r6, #10
 8004802:	4694      	mov	ip, r2
 8004804:	fb91 f5f6 	sdiv	r5, r1, r6
 8004808:	fb06 1415 	mls	r4, r6, r5, r1
 800480c:	3430      	adds	r4, #48	; 0x30
 800480e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004812:	460c      	mov	r4, r1
 8004814:	2c63      	cmp	r4, #99	; 0x63
 8004816:	f102 32ff 	add.w	r2, r2, #4294967295
 800481a:	4629      	mov	r1, r5
 800481c:	dcf1      	bgt.n	8004802 <__exponent+0x22>
 800481e:	3130      	adds	r1, #48	; 0x30
 8004820:	f1ac 0402 	sub.w	r4, ip, #2
 8004824:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004828:	1c41      	adds	r1, r0, #1
 800482a:	4622      	mov	r2, r4
 800482c:	42ba      	cmp	r2, r7
 800482e:	d30a      	bcc.n	8004846 <__exponent+0x66>
 8004830:	f10d 0209 	add.w	r2, sp, #9
 8004834:	eba2 020c 	sub.w	r2, r2, ip
 8004838:	42bc      	cmp	r4, r7
 800483a:	bf88      	it	hi
 800483c:	2200      	movhi	r2, #0
 800483e:	4413      	add	r3, r2
 8004840:	1a18      	subs	r0, r3, r0
 8004842:	b003      	add	sp, #12
 8004844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004846:	f812 5b01 	ldrb.w	r5, [r2], #1
 800484a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800484e:	e7ed      	b.n	800482c <__exponent+0x4c>
 8004850:	2330      	movs	r3, #48	; 0x30
 8004852:	3130      	adds	r1, #48	; 0x30
 8004854:	7083      	strb	r3, [r0, #2]
 8004856:	70c1      	strb	r1, [r0, #3]
 8004858:	1d03      	adds	r3, r0, #4
 800485a:	e7f1      	b.n	8004840 <__exponent+0x60>

0800485c <_printf_float>:
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	ed2d 8b02 	vpush	{d8}
 8004864:	b08d      	sub	sp, #52	; 0x34
 8004866:	460c      	mov	r4, r1
 8004868:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800486c:	4616      	mov	r6, r2
 800486e:	461f      	mov	r7, r3
 8004870:	4605      	mov	r5, r0
 8004872:	f000 fd2b 	bl	80052cc <_localeconv_r>
 8004876:	f8d0 a000 	ldr.w	sl, [r0]
 800487a:	4650      	mov	r0, sl
 800487c:	f7fb fcf8 	bl	8000270 <strlen>
 8004880:	2300      	movs	r3, #0
 8004882:	930a      	str	r3, [sp, #40]	; 0x28
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	f8d8 3000 	ldr.w	r3, [r8]
 800488c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004890:	3307      	adds	r3, #7
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	f103 0208 	add.w	r2, r3, #8
 800489a:	f8c8 2000 	str.w	r2, [r8]
 800489e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80048ac:	ee08 0a10 	vmov	s16, r0
 80048b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80048b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048b8:	4b9e      	ldr	r3, [pc, #632]	; (8004b34 <_printf_float+0x2d8>)
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295
 80048be:	f7fc f935 	bl	8000b2c <__aeabi_dcmpun>
 80048c2:	bb88      	cbnz	r0, 8004928 <_printf_float+0xcc>
 80048c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048c8:	4b9a      	ldr	r3, [pc, #616]	; (8004b34 <_printf_float+0x2d8>)
 80048ca:	f04f 32ff 	mov.w	r2, #4294967295
 80048ce:	f7fc f90f 	bl	8000af0 <__aeabi_dcmple>
 80048d2:	bb48      	cbnz	r0, 8004928 <_printf_float+0xcc>
 80048d4:	2200      	movs	r2, #0
 80048d6:	2300      	movs	r3, #0
 80048d8:	4640      	mov	r0, r8
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fc f8fe 	bl	8000adc <__aeabi_dcmplt>
 80048e0:	b110      	cbz	r0, 80048e8 <_printf_float+0x8c>
 80048e2:	232d      	movs	r3, #45	; 0x2d
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e8:	4a93      	ldr	r2, [pc, #588]	; (8004b38 <_printf_float+0x2dc>)
 80048ea:	4b94      	ldr	r3, [pc, #592]	; (8004b3c <_printf_float+0x2e0>)
 80048ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048f0:	bf94      	ite	ls
 80048f2:	4690      	movls	r8, r2
 80048f4:	4698      	movhi	r8, r3
 80048f6:	2303      	movs	r3, #3
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	9b05      	ldr	r3, [sp, #20]
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	f04f 0900 	mov.w	r9, #0
 8004906:	9700      	str	r7, [sp, #0]
 8004908:	4633      	mov	r3, r6
 800490a:	aa0b      	add	r2, sp, #44	; 0x2c
 800490c:	4621      	mov	r1, r4
 800490e:	4628      	mov	r0, r5
 8004910:	f000 f9da 	bl	8004cc8 <_printf_common>
 8004914:	3001      	adds	r0, #1
 8004916:	f040 8090 	bne.w	8004a3a <_printf_float+0x1de>
 800491a:	f04f 30ff 	mov.w	r0, #4294967295
 800491e:	b00d      	add	sp, #52	; 0x34
 8004920:	ecbd 8b02 	vpop	{d8}
 8004924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	4640      	mov	r0, r8
 800492e:	4649      	mov	r1, r9
 8004930:	f7fc f8fc 	bl	8000b2c <__aeabi_dcmpun>
 8004934:	b140      	cbz	r0, 8004948 <_printf_float+0xec>
 8004936:	464b      	mov	r3, r9
 8004938:	2b00      	cmp	r3, #0
 800493a:	bfbc      	itt	lt
 800493c:	232d      	movlt	r3, #45	; 0x2d
 800493e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004942:	4a7f      	ldr	r2, [pc, #508]	; (8004b40 <_printf_float+0x2e4>)
 8004944:	4b7f      	ldr	r3, [pc, #508]	; (8004b44 <_printf_float+0x2e8>)
 8004946:	e7d1      	b.n	80048ec <_printf_float+0x90>
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800494e:	9206      	str	r2, [sp, #24]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	d13f      	bne.n	80049d4 <_printf_float+0x178>
 8004954:	2306      	movs	r3, #6
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	9b05      	ldr	r3, [sp, #20]
 800495a:	6861      	ldr	r1, [r4, #4]
 800495c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004960:	2300      	movs	r3, #0
 8004962:	9303      	str	r3, [sp, #12]
 8004964:	ab0a      	add	r3, sp, #40	; 0x28
 8004966:	e9cd b301 	strd	fp, r3, [sp, #4]
 800496a:	ab09      	add	r3, sp, #36	; 0x24
 800496c:	ec49 8b10 	vmov	d0, r8, r9
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	6022      	str	r2, [r4, #0]
 8004974:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004978:	4628      	mov	r0, r5
 800497a:	f7ff fecf 	bl	800471c <__cvt>
 800497e:	9b06      	ldr	r3, [sp, #24]
 8004980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004982:	2b47      	cmp	r3, #71	; 0x47
 8004984:	4680      	mov	r8, r0
 8004986:	d108      	bne.n	800499a <_printf_float+0x13e>
 8004988:	1cc8      	adds	r0, r1, #3
 800498a:	db02      	blt.n	8004992 <_printf_float+0x136>
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	4299      	cmp	r1, r3
 8004990:	dd41      	ble.n	8004a16 <_printf_float+0x1ba>
 8004992:	f1ab 0302 	sub.w	r3, fp, #2
 8004996:	fa5f fb83 	uxtb.w	fp, r3
 800499a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800499e:	d820      	bhi.n	80049e2 <_printf_float+0x186>
 80049a0:	3901      	subs	r1, #1
 80049a2:	465a      	mov	r2, fp
 80049a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049a8:	9109      	str	r1, [sp, #36]	; 0x24
 80049aa:	f7ff ff19 	bl	80047e0 <__exponent>
 80049ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049b0:	1813      	adds	r3, r2, r0
 80049b2:	2a01      	cmp	r2, #1
 80049b4:	4681      	mov	r9, r0
 80049b6:	6123      	str	r3, [r4, #16]
 80049b8:	dc02      	bgt.n	80049c0 <_printf_float+0x164>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	07d2      	lsls	r2, r2, #31
 80049be:	d501      	bpl.n	80049c4 <_printf_float+0x168>
 80049c0:	3301      	adds	r3, #1
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d09c      	beq.n	8004906 <_printf_float+0xaa>
 80049cc:	232d      	movs	r3, #45	; 0x2d
 80049ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d2:	e798      	b.n	8004906 <_printf_float+0xaa>
 80049d4:	9a06      	ldr	r2, [sp, #24]
 80049d6:	2a47      	cmp	r2, #71	; 0x47
 80049d8:	d1be      	bne.n	8004958 <_printf_float+0xfc>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1bc      	bne.n	8004958 <_printf_float+0xfc>
 80049de:	2301      	movs	r3, #1
 80049e0:	e7b9      	b.n	8004956 <_printf_float+0xfa>
 80049e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049e6:	d118      	bne.n	8004a1a <_printf_float+0x1be>
 80049e8:	2900      	cmp	r1, #0
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	dd0b      	ble.n	8004a06 <_printf_float+0x1aa>
 80049ee:	6121      	str	r1, [r4, #16]
 80049f0:	b913      	cbnz	r3, 80049f8 <_printf_float+0x19c>
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	07d0      	lsls	r0, r2, #31
 80049f6:	d502      	bpl.n	80049fe <_printf_float+0x1a2>
 80049f8:	3301      	adds	r3, #1
 80049fa:	440b      	add	r3, r1
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a00:	f04f 0900 	mov.w	r9, #0
 8004a04:	e7de      	b.n	80049c4 <_printf_float+0x168>
 8004a06:	b913      	cbnz	r3, 8004a0e <_printf_float+0x1b2>
 8004a08:	6822      	ldr	r2, [r4, #0]
 8004a0a:	07d2      	lsls	r2, r2, #31
 8004a0c:	d501      	bpl.n	8004a12 <_printf_float+0x1b6>
 8004a0e:	3302      	adds	r3, #2
 8004a10:	e7f4      	b.n	80049fc <_printf_float+0x1a0>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7f2      	b.n	80049fc <_printf_float+0x1a0>
 8004a16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	db05      	blt.n	8004a2c <_printf_float+0x1d0>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	6121      	str	r1, [r4, #16]
 8004a24:	07d8      	lsls	r0, r3, #31
 8004a26:	d5ea      	bpl.n	80049fe <_printf_float+0x1a2>
 8004a28:	1c4b      	adds	r3, r1, #1
 8004a2a:	e7e7      	b.n	80049fc <_printf_float+0x1a0>
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	bfd4      	ite	le
 8004a30:	f1c1 0202 	rsble	r2, r1, #2
 8004a34:	2201      	movgt	r2, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	e7e0      	b.n	80049fc <_printf_float+0x1a0>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	055a      	lsls	r2, r3, #21
 8004a3e:	d407      	bmi.n	8004a50 <_printf_float+0x1f4>
 8004a40:	6923      	ldr	r3, [r4, #16]
 8004a42:	4642      	mov	r2, r8
 8004a44:	4631      	mov	r1, r6
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b8      	blx	r7
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d12c      	bne.n	8004aa8 <_printf_float+0x24c>
 8004a4e:	e764      	b.n	800491a <_printf_float+0xbe>
 8004a50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a54:	f240 80e0 	bls.w	8004c18 <_printf_float+0x3bc>
 8004a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f7fc f832 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d034      	beq.n	8004ad2 <_printf_float+0x276>
 8004a68:	4a37      	ldr	r2, [pc, #220]	; (8004b48 <_printf_float+0x2ec>)
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	f43f af51 	beq.w	800491a <_printf_float+0xbe>
 8004a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	db02      	blt.n	8004a86 <_printf_float+0x22a>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	07d8      	lsls	r0, r3, #31
 8004a84:	d510      	bpl.n	8004aa8 <_printf_float+0x24c>
 8004a86:	ee18 3a10 	vmov	r3, s16
 8004a8a:	4652      	mov	r2, sl
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	f43f af41 	beq.w	800491a <_printf_float+0xbe>
 8004a98:	f04f 0800 	mov.w	r8, #0
 8004a9c:	f104 091a 	add.w	r9, r4, #26
 8004aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	4543      	cmp	r3, r8
 8004aa6:	dc09      	bgt.n	8004abc <_printf_float+0x260>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	079b      	lsls	r3, r3, #30
 8004aac:	f100 8107 	bmi.w	8004cbe <_printf_float+0x462>
 8004ab0:	68e0      	ldr	r0, [r4, #12]
 8004ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ab4:	4298      	cmp	r0, r3
 8004ab6:	bfb8      	it	lt
 8004ab8:	4618      	movlt	r0, r3
 8004aba:	e730      	b.n	800491e <_printf_float+0xc2>
 8004abc:	2301      	movs	r3, #1
 8004abe:	464a      	mov	r2, r9
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f af27 	beq.w	800491a <_printf_float+0xbe>
 8004acc:	f108 0801 	add.w	r8, r8, #1
 8004ad0:	e7e6      	b.n	8004aa0 <_printf_float+0x244>
 8004ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	dc39      	bgt.n	8004b4c <_printf_float+0x2f0>
 8004ad8:	4a1b      	ldr	r2, [pc, #108]	; (8004b48 <_printf_float+0x2ec>)
 8004ada:	2301      	movs	r3, #1
 8004adc:	4631      	mov	r1, r6
 8004ade:	4628      	mov	r0, r5
 8004ae0:	47b8      	blx	r7
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	f43f af19 	beq.w	800491a <_printf_float+0xbe>
 8004ae8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004aec:	4313      	orrs	r3, r2
 8004aee:	d102      	bne.n	8004af6 <_printf_float+0x29a>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07d9      	lsls	r1, r3, #31
 8004af4:	d5d8      	bpl.n	8004aa8 <_printf_float+0x24c>
 8004af6:	ee18 3a10 	vmov	r3, s16
 8004afa:	4652      	mov	r2, sl
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	f43f af09 	beq.w	800491a <_printf_float+0xbe>
 8004b08:	f04f 0900 	mov.w	r9, #0
 8004b0c:	f104 0a1a 	add.w	sl, r4, #26
 8004b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b12:	425b      	negs	r3, r3
 8004b14:	454b      	cmp	r3, r9
 8004b16:	dc01      	bgt.n	8004b1c <_printf_float+0x2c0>
 8004b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b1a:	e792      	b.n	8004a42 <_printf_float+0x1e6>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	4652      	mov	r2, sl
 8004b20:	4631      	mov	r1, r6
 8004b22:	4628      	mov	r0, r5
 8004b24:	47b8      	blx	r7
 8004b26:	3001      	adds	r0, #1
 8004b28:	f43f aef7 	beq.w	800491a <_printf_float+0xbe>
 8004b2c:	f109 0901 	add.w	r9, r9, #1
 8004b30:	e7ee      	b.n	8004b10 <_printf_float+0x2b4>
 8004b32:	bf00      	nop
 8004b34:	7fefffff 	.word	0x7fefffff
 8004b38:	0800769c 	.word	0x0800769c
 8004b3c:	080076a0 	.word	0x080076a0
 8004b40:	080076a4 	.word	0x080076a4
 8004b44:	080076a8 	.word	0x080076a8
 8004b48:	080076ac 	.word	0x080076ac
 8004b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b50:	429a      	cmp	r2, r3
 8004b52:	bfa8      	it	ge
 8004b54:	461a      	movge	r2, r3
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	4691      	mov	r9, r2
 8004b5a:	dc37      	bgt.n	8004bcc <_printf_float+0x370>
 8004b5c:	f04f 0b00 	mov.w	fp, #0
 8004b60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b64:	f104 021a 	add.w	r2, r4, #26
 8004b68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b6a:	9305      	str	r3, [sp, #20]
 8004b6c:	eba3 0309 	sub.w	r3, r3, r9
 8004b70:	455b      	cmp	r3, fp
 8004b72:	dc33      	bgt.n	8004bdc <_printf_float+0x380>
 8004b74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	db3b      	blt.n	8004bf4 <_printf_float+0x398>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	07da      	lsls	r2, r3, #31
 8004b80:	d438      	bmi.n	8004bf4 <_printf_float+0x398>
 8004b82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b86:	eba2 0903 	sub.w	r9, r2, r3
 8004b8a:	9b05      	ldr	r3, [sp, #20]
 8004b8c:	1ad2      	subs	r2, r2, r3
 8004b8e:	4591      	cmp	r9, r2
 8004b90:	bfa8      	it	ge
 8004b92:	4691      	movge	r9, r2
 8004b94:	f1b9 0f00 	cmp.w	r9, #0
 8004b98:	dc35      	bgt.n	8004c06 <_printf_float+0x3aa>
 8004b9a:	f04f 0800 	mov.w	r8, #0
 8004b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ba2:	f104 0a1a 	add.w	sl, r4, #26
 8004ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	eba3 0309 	sub.w	r3, r3, r9
 8004bb0:	4543      	cmp	r3, r8
 8004bb2:	f77f af79 	ble.w	8004aa8 <_printf_float+0x24c>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4652      	mov	r2, sl
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f aeaa 	beq.w	800491a <_printf_float+0xbe>
 8004bc6:	f108 0801 	add.w	r8, r8, #1
 8004bca:	e7ec      	b.n	8004ba6 <_printf_float+0x34a>
 8004bcc:	4613      	mov	r3, r2
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d1c0      	bne.n	8004b5c <_printf_float+0x300>
 8004bda:	e69e      	b.n	800491a <_printf_float+0xbe>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	9205      	str	r2, [sp, #20]
 8004be4:	47b8      	blx	r7
 8004be6:	3001      	adds	r0, #1
 8004be8:	f43f ae97 	beq.w	800491a <_printf_float+0xbe>
 8004bec:	9a05      	ldr	r2, [sp, #20]
 8004bee:	f10b 0b01 	add.w	fp, fp, #1
 8004bf2:	e7b9      	b.n	8004b68 <_printf_float+0x30c>
 8004bf4:	ee18 3a10 	vmov	r3, s16
 8004bf8:	4652      	mov	r2, sl
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	d1be      	bne.n	8004b82 <_printf_float+0x326>
 8004c04:	e689      	b.n	800491a <_printf_float+0xbe>
 8004c06:	9a05      	ldr	r2, [sp, #20]
 8004c08:	464b      	mov	r3, r9
 8004c0a:	4442      	add	r2, r8
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	d1c1      	bne.n	8004b9a <_printf_float+0x33e>
 8004c16:	e680      	b.n	800491a <_printf_float+0xbe>
 8004c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c1a:	2a01      	cmp	r2, #1
 8004c1c:	dc01      	bgt.n	8004c22 <_printf_float+0x3c6>
 8004c1e:	07db      	lsls	r3, r3, #31
 8004c20:	d53a      	bpl.n	8004c98 <_printf_float+0x43c>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4642      	mov	r2, r8
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f ae74 	beq.w	800491a <_printf_float+0xbe>
 8004c32:	ee18 3a10 	vmov	r3, s16
 8004c36:	4652      	mov	r2, sl
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f43f ae6b 	beq.w	800491a <_printf_float+0xbe>
 8004c44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004c50:	f7fb ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c54:	b9d8      	cbnz	r0, 8004c8e <_printf_float+0x432>
 8004c56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004c5a:	f108 0201 	add.w	r2, r8, #1
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	d10e      	bne.n	8004c86 <_printf_float+0x42a>
 8004c68:	e657      	b.n	800491a <_printf_float+0xbe>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f ae50 	beq.w	800491a <_printf_float+0xbe>
 8004c7a:	f108 0801 	add.w	r8, r8, #1
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4543      	cmp	r3, r8
 8004c84:	dcf1      	bgt.n	8004c6a <_printf_float+0x40e>
 8004c86:	464b      	mov	r3, r9
 8004c88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c8c:	e6da      	b.n	8004a44 <_printf_float+0x1e8>
 8004c8e:	f04f 0800 	mov.w	r8, #0
 8004c92:	f104 0a1a 	add.w	sl, r4, #26
 8004c96:	e7f2      	b.n	8004c7e <_printf_float+0x422>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	e7df      	b.n	8004c5e <_printf_float+0x402>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	464a      	mov	r2, r9
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	f43f ae36 	beq.w	800491a <_printf_float+0xbe>
 8004cae:	f108 0801 	add.w	r8, r8, #1
 8004cb2:	68e3      	ldr	r3, [r4, #12]
 8004cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cb6:	1a5b      	subs	r3, r3, r1
 8004cb8:	4543      	cmp	r3, r8
 8004cba:	dcf0      	bgt.n	8004c9e <_printf_float+0x442>
 8004cbc:	e6f8      	b.n	8004ab0 <_printf_float+0x254>
 8004cbe:	f04f 0800 	mov.w	r8, #0
 8004cc2:	f104 0919 	add.w	r9, r4, #25
 8004cc6:	e7f4      	b.n	8004cb2 <_printf_float+0x456>

08004cc8 <_printf_common>:
 8004cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	4616      	mov	r6, r2
 8004cce:	4699      	mov	r9, r3
 8004cd0:	688a      	ldr	r2, [r1, #8]
 8004cd2:	690b      	ldr	r3, [r1, #16]
 8004cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	bfb8      	it	lt
 8004cdc:	4613      	movlt	r3, r2
 8004cde:	6033      	str	r3, [r6, #0]
 8004ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	b10a      	cbz	r2, 8004cee <_printf_common+0x26>
 8004cea:	3301      	adds	r3, #1
 8004cec:	6033      	str	r3, [r6, #0]
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	0699      	lsls	r1, r3, #26
 8004cf2:	bf42      	ittt	mi
 8004cf4:	6833      	ldrmi	r3, [r6, #0]
 8004cf6:	3302      	addmi	r3, #2
 8004cf8:	6033      	strmi	r3, [r6, #0]
 8004cfa:	6825      	ldr	r5, [r4, #0]
 8004cfc:	f015 0506 	ands.w	r5, r5, #6
 8004d00:	d106      	bne.n	8004d10 <_printf_common+0x48>
 8004d02:	f104 0a19 	add.w	sl, r4, #25
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	6832      	ldr	r2, [r6, #0]
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	dc26      	bgt.n	8004d5e <_printf_common+0x96>
 8004d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d14:	1e13      	subs	r3, r2, #0
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	bf18      	it	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	0692      	lsls	r2, r2, #26
 8004d1e:	d42b      	bmi.n	8004d78 <_printf_common+0xb0>
 8004d20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d24:	4649      	mov	r1, r9
 8004d26:	4638      	mov	r0, r7
 8004d28:	47c0      	blx	r8
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d01e      	beq.n	8004d6c <_printf_common+0xa4>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	6922      	ldr	r2, [r4, #16]
 8004d32:	f003 0306 	and.w	r3, r3, #6
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	bf02      	ittt	eq
 8004d3a:	68e5      	ldreq	r5, [r4, #12]
 8004d3c:	6833      	ldreq	r3, [r6, #0]
 8004d3e:	1aed      	subeq	r5, r5, r3
 8004d40:	68a3      	ldr	r3, [r4, #8]
 8004d42:	bf0c      	ite	eq
 8004d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d48:	2500      	movne	r5, #0
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	bfc4      	itt	gt
 8004d4e:	1a9b      	subgt	r3, r3, r2
 8004d50:	18ed      	addgt	r5, r5, r3
 8004d52:	2600      	movs	r6, #0
 8004d54:	341a      	adds	r4, #26
 8004d56:	42b5      	cmp	r5, r6
 8004d58:	d11a      	bne.n	8004d90 <_printf_common+0xc8>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	e008      	b.n	8004d70 <_printf_common+0xa8>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4652      	mov	r2, sl
 8004d62:	4649      	mov	r1, r9
 8004d64:	4638      	mov	r0, r7
 8004d66:	47c0      	blx	r8
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d103      	bne.n	8004d74 <_printf_common+0xac>
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d74:	3501      	adds	r5, #1
 8004d76:	e7c6      	b.n	8004d06 <_printf_common+0x3e>
 8004d78:	18e1      	adds	r1, r4, r3
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	2030      	movs	r0, #48	; 0x30
 8004d7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d82:	4422      	add	r2, r4
 8004d84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	e7c7      	b.n	8004d20 <_printf_common+0x58>
 8004d90:	2301      	movs	r3, #1
 8004d92:	4622      	mov	r2, r4
 8004d94:	4649      	mov	r1, r9
 8004d96:	4638      	mov	r0, r7
 8004d98:	47c0      	blx	r8
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d0e6      	beq.n	8004d6c <_printf_common+0xa4>
 8004d9e:	3601      	adds	r6, #1
 8004da0:	e7d9      	b.n	8004d56 <_printf_common+0x8e>
	...

08004da4 <_printf_i>:
 8004da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da8:	7e0f      	ldrb	r7, [r1, #24]
 8004daa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dac:	2f78      	cmp	r7, #120	; 0x78
 8004dae:	4691      	mov	r9, r2
 8004db0:	4680      	mov	r8, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	469a      	mov	sl, r3
 8004db6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dba:	d807      	bhi.n	8004dcc <_printf_i+0x28>
 8004dbc:	2f62      	cmp	r7, #98	; 0x62
 8004dbe:	d80a      	bhi.n	8004dd6 <_printf_i+0x32>
 8004dc0:	2f00      	cmp	r7, #0
 8004dc2:	f000 80d4 	beq.w	8004f6e <_printf_i+0x1ca>
 8004dc6:	2f58      	cmp	r7, #88	; 0x58
 8004dc8:	f000 80c0 	beq.w	8004f4c <_printf_i+0x1a8>
 8004dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dd4:	e03a      	b.n	8004e4c <_printf_i+0xa8>
 8004dd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dda:	2b15      	cmp	r3, #21
 8004ddc:	d8f6      	bhi.n	8004dcc <_printf_i+0x28>
 8004dde:	a101      	add	r1, pc, #4	; (adr r1, 8004de4 <_printf_i+0x40>)
 8004de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004de4:	08004e3d 	.word	0x08004e3d
 8004de8:	08004e51 	.word	0x08004e51
 8004dec:	08004dcd 	.word	0x08004dcd
 8004df0:	08004dcd 	.word	0x08004dcd
 8004df4:	08004dcd 	.word	0x08004dcd
 8004df8:	08004dcd 	.word	0x08004dcd
 8004dfc:	08004e51 	.word	0x08004e51
 8004e00:	08004dcd 	.word	0x08004dcd
 8004e04:	08004dcd 	.word	0x08004dcd
 8004e08:	08004dcd 	.word	0x08004dcd
 8004e0c:	08004dcd 	.word	0x08004dcd
 8004e10:	08004f55 	.word	0x08004f55
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004f0f 	.word	0x08004f0f
 8004e1c:	08004dcd 	.word	0x08004dcd
 8004e20:	08004dcd 	.word	0x08004dcd
 8004e24:	08004f77 	.word	0x08004f77
 8004e28:	08004dcd 	.word	0x08004dcd
 8004e2c:	08004e7d 	.word	0x08004e7d
 8004e30:	08004dcd 	.word	0x08004dcd
 8004e34:	08004dcd 	.word	0x08004dcd
 8004e38:	08004f17 	.word	0x08004f17
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	1d1a      	adds	r2, r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	602a      	str	r2, [r5, #0]
 8004e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e09f      	b.n	8004f90 <_printf_i+0x1ec>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	0607      	lsls	r7, r0, #24
 8004e56:	f103 0104 	add.w	r1, r3, #4
 8004e5a:	6029      	str	r1, [r5, #0]
 8004e5c:	d501      	bpl.n	8004e62 <_printf_i+0xbe>
 8004e5e:	681e      	ldr	r6, [r3, #0]
 8004e60:	e003      	b.n	8004e6a <_printf_i+0xc6>
 8004e62:	0646      	lsls	r6, r0, #25
 8004e64:	d5fb      	bpl.n	8004e5e <_printf_i+0xba>
 8004e66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e6a:	2e00      	cmp	r6, #0
 8004e6c:	da03      	bge.n	8004e76 <_printf_i+0xd2>
 8004e6e:	232d      	movs	r3, #45	; 0x2d
 8004e70:	4276      	negs	r6, r6
 8004e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e76:	485a      	ldr	r0, [pc, #360]	; (8004fe0 <_printf_i+0x23c>)
 8004e78:	230a      	movs	r3, #10
 8004e7a:	e012      	b.n	8004ea2 <_printf_i+0xfe>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	1d19      	adds	r1, r3, #4
 8004e82:	6029      	str	r1, [r5, #0]
 8004e84:	0605      	lsls	r5, r0, #24
 8004e86:	d501      	bpl.n	8004e8c <_printf_i+0xe8>
 8004e88:	681e      	ldr	r6, [r3, #0]
 8004e8a:	e002      	b.n	8004e92 <_printf_i+0xee>
 8004e8c:	0641      	lsls	r1, r0, #25
 8004e8e:	d5fb      	bpl.n	8004e88 <_printf_i+0xe4>
 8004e90:	881e      	ldrh	r6, [r3, #0]
 8004e92:	4853      	ldr	r0, [pc, #332]	; (8004fe0 <_printf_i+0x23c>)
 8004e94:	2f6f      	cmp	r7, #111	; 0x6f
 8004e96:	bf0c      	ite	eq
 8004e98:	2308      	moveq	r3, #8
 8004e9a:	230a      	movne	r3, #10
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ea2:	6865      	ldr	r5, [r4, #4]
 8004ea4:	60a5      	str	r5, [r4, #8]
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	bfa2      	ittt	ge
 8004eaa:	6821      	ldrge	r1, [r4, #0]
 8004eac:	f021 0104 	bicge.w	r1, r1, #4
 8004eb0:	6021      	strge	r1, [r4, #0]
 8004eb2:	b90e      	cbnz	r6, 8004eb8 <_printf_i+0x114>
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	d04b      	beq.n	8004f50 <_printf_i+0x1ac>
 8004eb8:	4615      	mov	r5, r2
 8004eba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ebe:	fb03 6711 	mls	r7, r3, r1, r6
 8004ec2:	5dc7      	ldrb	r7, [r0, r7]
 8004ec4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ec8:	4637      	mov	r7, r6
 8004eca:	42bb      	cmp	r3, r7
 8004ecc:	460e      	mov	r6, r1
 8004ece:	d9f4      	bls.n	8004eba <_printf_i+0x116>
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d10b      	bne.n	8004eec <_printf_i+0x148>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	07de      	lsls	r6, r3, #31
 8004ed8:	d508      	bpl.n	8004eec <_printf_i+0x148>
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	6861      	ldr	r1, [r4, #4]
 8004ede:	4299      	cmp	r1, r3
 8004ee0:	bfde      	ittt	le
 8004ee2:	2330      	movle	r3, #48	; 0x30
 8004ee4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ee8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eec:	1b52      	subs	r2, r2, r5
 8004eee:	6122      	str	r2, [r4, #16]
 8004ef0:	f8cd a000 	str.w	sl, [sp]
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	aa03      	add	r2, sp, #12
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4640      	mov	r0, r8
 8004efc:	f7ff fee4 	bl	8004cc8 <_printf_common>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d14a      	bne.n	8004f9a <_printf_i+0x1f6>
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	b004      	add	sp, #16
 8004f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	4833      	ldr	r0, [pc, #204]	; (8004fe4 <_printf_i+0x240>)
 8004f18:	2778      	movs	r7, #120	; 0x78
 8004f1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	6829      	ldr	r1, [r5, #0]
 8004f22:	061f      	lsls	r7, r3, #24
 8004f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f28:	d402      	bmi.n	8004f30 <_printf_i+0x18c>
 8004f2a:	065f      	lsls	r7, r3, #25
 8004f2c:	bf48      	it	mi
 8004f2e:	b2b6      	uxthmi	r6, r6
 8004f30:	07df      	lsls	r7, r3, #31
 8004f32:	bf48      	it	mi
 8004f34:	f043 0320 	orrmi.w	r3, r3, #32
 8004f38:	6029      	str	r1, [r5, #0]
 8004f3a:	bf48      	it	mi
 8004f3c:	6023      	strmi	r3, [r4, #0]
 8004f3e:	b91e      	cbnz	r6, 8004f48 <_printf_i+0x1a4>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	f023 0320 	bic.w	r3, r3, #32
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	2310      	movs	r3, #16
 8004f4a:	e7a7      	b.n	8004e9c <_printf_i+0xf8>
 8004f4c:	4824      	ldr	r0, [pc, #144]	; (8004fe0 <_printf_i+0x23c>)
 8004f4e:	e7e4      	b.n	8004f1a <_printf_i+0x176>
 8004f50:	4615      	mov	r5, r2
 8004f52:	e7bd      	b.n	8004ed0 <_printf_i+0x12c>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	6826      	ldr	r6, [r4, #0]
 8004f58:	6961      	ldr	r1, [r4, #20]
 8004f5a:	1d18      	adds	r0, r3, #4
 8004f5c:	6028      	str	r0, [r5, #0]
 8004f5e:	0635      	lsls	r5, r6, #24
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	d501      	bpl.n	8004f68 <_printf_i+0x1c4>
 8004f64:	6019      	str	r1, [r3, #0]
 8004f66:	e002      	b.n	8004f6e <_printf_i+0x1ca>
 8004f68:	0670      	lsls	r0, r6, #25
 8004f6a:	d5fb      	bpl.n	8004f64 <_printf_i+0x1c0>
 8004f6c:	8019      	strh	r1, [r3, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	4615      	mov	r5, r2
 8004f74:	e7bc      	b.n	8004ef0 <_printf_i+0x14c>
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	1d1a      	adds	r2, r3, #4
 8004f7a:	602a      	str	r2, [r5, #0]
 8004f7c:	681d      	ldr	r5, [r3, #0]
 8004f7e:	6862      	ldr	r2, [r4, #4]
 8004f80:	2100      	movs	r1, #0
 8004f82:	4628      	mov	r0, r5
 8004f84:	f7fb f924 	bl	80001d0 <memchr>
 8004f88:	b108      	cbz	r0, 8004f8e <_printf_i+0x1ea>
 8004f8a:	1b40      	subs	r0, r0, r5
 8004f8c:	6060      	str	r0, [r4, #4]
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	2300      	movs	r3, #0
 8004f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f98:	e7aa      	b.n	8004ef0 <_printf_i+0x14c>
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	47d0      	blx	sl
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d0ad      	beq.n	8004f04 <_printf_i+0x160>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	079b      	lsls	r3, r3, #30
 8004fac:	d413      	bmi.n	8004fd6 <_printf_i+0x232>
 8004fae:	68e0      	ldr	r0, [r4, #12]
 8004fb0:	9b03      	ldr	r3, [sp, #12]
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	bfb8      	it	lt
 8004fb6:	4618      	movlt	r0, r3
 8004fb8:	e7a6      	b.n	8004f08 <_printf_i+0x164>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	47d0      	blx	sl
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d09d      	beq.n	8004f04 <_printf_i+0x160>
 8004fc8:	3501      	adds	r5, #1
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	9903      	ldr	r1, [sp, #12]
 8004fce:	1a5b      	subs	r3, r3, r1
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dcf2      	bgt.n	8004fba <_printf_i+0x216>
 8004fd4:	e7eb      	b.n	8004fae <_printf_i+0x20a>
 8004fd6:	2500      	movs	r5, #0
 8004fd8:	f104 0619 	add.w	r6, r4, #25
 8004fdc:	e7f5      	b.n	8004fca <_printf_i+0x226>
 8004fde:	bf00      	nop
 8004fe0:	080076ae 	.word	0x080076ae
 8004fe4:	080076bf 	.word	0x080076bf

08004fe8 <std>:
 8004fe8:	2300      	movs	r3, #0
 8004fea:	b510      	push	{r4, lr}
 8004fec:	4604      	mov	r4, r0
 8004fee:	e9c0 3300 	strd	r3, r3, [r0]
 8004ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ff6:	6083      	str	r3, [r0, #8]
 8004ff8:	8181      	strh	r1, [r0, #12]
 8004ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8004ffc:	81c2      	strh	r2, [r0, #14]
 8004ffe:	6183      	str	r3, [r0, #24]
 8005000:	4619      	mov	r1, r3
 8005002:	2208      	movs	r2, #8
 8005004:	305c      	adds	r0, #92	; 0x5c
 8005006:	f000 f928 	bl	800525a <memset>
 800500a:	4b0d      	ldr	r3, [pc, #52]	; (8005040 <std+0x58>)
 800500c:	6263      	str	r3, [r4, #36]	; 0x24
 800500e:	4b0d      	ldr	r3, [pc, #52]	; (8005044 <std+0x5c>)
 8005010:	62a3      	str	r3, [r4, #40]	; 0x28
 8005012:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <std+0x60>)
 8005014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <std+0x64>)
 8005018:	6323      	str	r3, [r4, #48]	; 0x30
 800501a:	4b0d      	ldr	r3, [pc, #52]	; (8005050 <std+0x68>)
 800501c:	6224      	str	r4, [r4, #32]
 800501e:	429c      	cmp	r4, r3
 8005020:	d006      	beq.n	8005030 <std+0x48>
 8005022:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005026:	4294      	cmp	r4, r2
 8005028:	d002      	beq.n	8005030 <std+0x48>
 800502a:	33d0      	adds	r3, #208	; 0xd0
 800502c:	429c      	cmp	r4, r3
 800502e:	d105      	bne.n	800503c <std+0x54>
 8005030:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005038:	f000 b9e0 	b.w	80053fc <__retarget_lock_init_recursive>
 800503c:	bd10      	pop	{r4, pc}
 800503e:	bf00      	nop
 8005040:	080051d5 	.word	0x080051d5
 8005044:	080051f7 	.word	0x080051f7
 8005048:	0800522f 	.word	0x0800522f
 800504c:	08005253 	.word	0x08005253
 8005050:	20000890 	.word	0x20000890

08005054 <stdio_exit_handler>:
 8005054:	4a02      	ldr	r2, [pc, #8]	; (8005060 <stdio_exit_handler+0xc>)
 8005056:	4903      	ldr	r1, [pc, #12]	; (8005064 <stdio_exit_handler+0x10>)
 8005058:	4803      	ldr	r0, [pc, #12]	; (8005068 <stdio_exit_handler+0x14>)
 800505a:	f000 b869 	b.w	8005130 <_fwalk_sglue>
 800505e:	bf00      	nop
 8005060:	20000010 	.word	0x20000010
 8005064:	08006c49 	.word	0x08006c49
 8005068:	2000001c 	.word	0x2000001c

0800506c <cleanup_stdio>:
 800506c:	6841      	ldr	r1, [r0, #4]
 800506e:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <cleanup_stdio+0x34>)
 8005070:	4299      	cmp	r1, r3
 8005072:	b510      	push	{r4, lr}
 8005074:	4604      	mov	r4, r0
 8005076:	d001      	beq.n	800507c <cleanup_stdio+0x10>
 8005078:	f001 fde6 	bl	8006c48 <_fflush_r>
 800507c:	68a1      	ldr	r1, [r4, #8]
 800507e:	4b09      	ldr	r3, [pc, #36]	; (80050a4 <cleanup_stdio+0x38>)
 8005080:	4299      	cmp	r1, r3
 8005082:	d002      	beq.n	800508a <cleanup_stdio+0x1e>
 8005084:	4620      	mov	r0, r4
 8005086:	f001 fddf 	bl	8006c48 <_fflush_r>
 800508a:	68e1      	ldr	r1, [r4, #12]
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <cleanup_stdio+0x3c>)
 800508e:	4299      	cmp	r1, r3
 8005090:	d004      	beq.n	800509c <cleanup_stdio+0x30>
 8005092:	4620      	mov	r0, r4
 8005094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005098:	f001 bdd6 	b.w	8006c48 <_fflush_r>
 800509c:	bd10      	pop	{r4, pc}
 800509e:	bf00      	nop
 80050a0:	20000890 	.word	0x20000890
 80050a4:	200008f8 	.word	0x200008f8
 80050a8:	20000960 	.word	0x20000960

080050ac <global_stdio_init.part.0>:
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <global_stdio_init.part.0+0x30>)
 80050b0:	4c0b      	ldr	r4, [pc, #44]	; (80050e0 <global_stdio_init.part.0+0x34>)
 80050b2:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <global_stdio_init.part.0+0x38>)
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	4620      	mov	r0, r4
 80050b8:	2200      	movs	r2, #0
 80050ba:	2104      	movs	r1, #4
 80050bc:	f7ff ff94 	bl	8004fe8 <std>
 80050c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80050c4:	2201      	movs	r2, #1
 80050c6:	2109      	movs	r1, #9
 80050c8:	f7ff ff8e 	bl	8004fe8 <std>
 80050cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80050d0:	2202      	movs	r2, #2
 80050d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d6:	2112      	movs	r1, #18
 80050d8:	f7ff bf86 	b.w	8004fe8 <std>
 80050dc:	200009c8 	.word	0x200009c8
 80050e0:	20000890 	.word	0x20000890
 80050e4:	08005055 	.word	0x08005055

080050e8 <__sfp_lock_acquire>:
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <__sfp_lock_acquire+0x8>)
 80050ea:	f000 b988 	b.w	80053fe <__retarget_lock_acquire_recursive>
 80050ee:	bf00      	nop
 80050f0:	200009d1 	.word	0x200009d1

080050f4 <__sfp_lock_release>:
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <__sfp_lock_release+0x8>)
 80050f6:	f000 b983 	b.w	8005400 <__retarget_lock_release_recursive>
 80050fa:	bf00      	nop
 80050fc:	200009d1 	.word	0x200009d1

08005100 <__sinit>:
 8005100:	b510      	push	{r4, lr}
 8005102:	4604      	mov	r4, r0
 8005104:	f7ff fff0 	bl	80050e8 <__sfp_lock_acquire>
 8005108:	6a23      	ldr	r3, [r4, #32]
 800510a:	b11b      	cbz	r3, 8005114 <__sinit+0x14>
 800510c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005110:	f7ff bff0 	b.w	80050f4 <__sfp_lock_release>
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__sinit+0x28>)
 8005116:	6223      	str	r3, [r4, #32]
 8005118:	4b04      	ldr	r3, [pc, #16]	; (800512c <__sinit+0x2c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1f5      	bne.n	800510c <__sinit+0xc>
 8005120:	f7ff ffc4 	bl	80050ac <global_stdio_init.part.0>
 8005124:	e7f2      	b.n	800510c <__sinit+0xc>
 8005126:	bf00      	nop
 8005128:	0800506d 	.word	0x0800506d
 800512c:	200009c8 	.word	0x200009c8

08005130 <_fwalk_sglue>:
 8005130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005134:	4607      	mov	r7, r0
 8005136:	4688      	mov	r8, r1
 8005138:	4614      	mov	r4, r2
 800513a:	2600      	movs	r6, #0
 800513c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005140:	f1b9 0901 	subs.w	r9, r9, #1
 8005144:	d505      	bpl.n	8005152 <_fwalk_sglue+0x22>
 8005146:	6824      	ldr	r4, [r4, #0]
 8005148:	2c00      	cmp	r4, #0
 800514a:	d1f7      	bne.n	800513c <_fwalk_sglue+0xc>
 800514c:	4630      	mov	r0, r6
 800514e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005152:	89ab      	ldrh	r3, [r5, #12]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d907      	bls.n	8005168 <_fwalk_sglue+0x38>
 8005158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800515c:	3301      	adds	r3, #1
 800515e:	d003      	beq.n	8005168 <_fwalk_sglue+0x38>
 8005160:	4629      	mov	r1, r5
 8005162:	4638      	mov	r0, r7
 8005164:	47c0      	blx	r8
 8005166:	4306      	orrs	r6, r0
 8005168:	3568      	adds	r5, #104	; 0x68
 800516a:	e7e9      	b.n	8005140 <_fwalk_sglue+0x10>

0800516c <sniprintf>:
 800516c:	b40c      	push	{r2, r3}
 800516e:	b530      	push	{r4, r5, lr}
 8005170:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <sniprintf+0x64>)
 8005172:	1e0c      	subs	r4, r1, #0
 8005174:	681d      	ldr	r5, [r3, #0]
 8005176:	b09d      	sub	sp, #116	; 0x74
 8005178:	da08      	bge.n	800518c <sniprintf+0x20>
 800517a:	238b      	movs	r3, #139	; 0x8b
 800517c:	602b      	str	r3, [r5, #0]
 800517e:	f04f 30ff 	mov.w	r0, #4294967295
 8005182:	b01d      	add	sp, #116	; 0x74
 8005184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005188:	b002      	add	sp, #8
 800518a:	4770      	bx	lr
 800518c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005190:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005194:	bf14      	ite	ne
 8005196:	f104 33ff 	addne.w	r3, r4, #4294967295
 800519a:	4623      	moveq	r3, r4
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	9307      	str	r3, [sp, #28]
 80051a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051a4:	9002      	str	r0, [sp, #8]
 80051a6:	9006      	str	r0, [sp, #24]
 80051a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051ae:	ab21      	add	r3, sp, #132	; 0x84
 80051b0:	a902      	add	r1, sp, #8
 80051b2:	4628      	mov	r0, r5
 80051b4:	9301      	str	r3, [sp, #4]
 80051b6:	f001 fbc3 	bl	8006940 <_svfiprintf_r>
 80051ba:	1c43      	adds	r3, r0, #1
 80051bc:	bfbc      	itt	lt
 80051be:	238b      	movlt	r3, #139	; 0x8b
 80051c0:	602b      	strlt	r3, [r5, #0]
 80051c2:	2c00      	cmp	r4, #0
 80051c4:	d0dd      	beq.n	8005182 <sniprintf+0x16>
 80051c6:	9b02      	ldr	r3, [sp, #8]
 80051c8:	2200      	movs	r2, #0
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	e7d9      	b.n	8005182 <sniprintf+0x16>
 80051ce:	bf00      	nop
 80051d0:	20000068 	.word	0x20000068

080051d4 <__sread>:
 80051d4:	b510      	push	{r4, lr}
 80051d6:	460c      	mov	r4, r1
 80051d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051dc:	f000 f89c 	bl	8005318 <_read_r>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	bfab      	itete	ge
 80051e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051e6:	89a3      	ldrhlt	r3, [r4, #12]
 80051e8:	181b      	addge	r3, r3, r0
 80051ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051ee:	bfac      	ite	ge
 80051f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80051f2:	81a3      	strhlt	r3, [r4, #12]
 80051f4:	bd10      	pop	{r4, pc}

080051f6 <__swrite>:
 80051f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fa:	461f      	mov	r7, r3
 80051fc:	898b      	ldrh	r3, [r1, #12]
 80051fe:	05db      	lsls	r3, r3, #23
 8005200:	4605      	mov	r5, r0
 8005202:	460c      	mov	r4, r1
 8005204:	4616      	mov	r6, r2
 8005206:	d505      	bpl.n	8005214 <__swrite+0x1e>
 8005208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800520c:	2302      	movs	r3, #2
 800520e:	2200      	movs	r2, #0
 8005210:	f000 f870 	bl	80052f4 <_lseek_r>
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800521a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800521e:	81a3      	strh	r3, [r4, #12]
 8005220:	4632      	mov	r2, r6
 8005222:	463b      	mov	r3, r7
 8005224:	4628      	mov	r0, r5
 8005226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800522a:	f000 b8ab 	b.w	8005384 <_write_r>

0800522e <__sseek>:
 800522e:	b510      	push	{r4, lr}
 8005230:	460c      	mov	r4, r1
 8005232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005236:	f000 f85d 	bl	80052f4 <_lseek_r>
 800523a:	1c43      	adds	r3, r0, #1
 800523c:	89a3      	ldrh	r3, [r4, #12]
 800523e:	bf15      	itete	ne
 8005240:	6560      	strne	r0, [r4, #84]	; 0x54
 8005242:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005246:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800524a:	81a3      	strheq	r3, [r4, #12]
 800524c:	bf18      	it	ne
 800524e:	81a3      	strhne	r3, [r4, #12]
 8005250:	bd10      	pop	{r4, pc}

08005252 <__sclose>:
 8005252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005256:	f000 b83d 	b.w	80052d4 <_close_r>

0800525a <memset>:
 800525a:	4402      	add	r2, r0
 800525c:	4603      	mov	r3, r0
 800525e:	4293      	cmp	r3, r2
 8005260:	d100      	bne.n	8005264 <memset+0xa>
 8005262:	4770      	bx	lr
 8005264:	f803 1b01 	strb.w	r1, [r3], #1
 8005268:	e7f9      	b.n	800525e <memset+0x4>

0800526a <_raise_r>:
 800526a:	291f      	cmp	r1, #31
 800526c:	b538      	push	{r3, r4, r5, lr}
 800526e:	4604      	mov	r4, r0
 8005270:	460d      	mov	r5, r1
 8005272:	d904      	bls.n	800527e <_raise_r+0x14>
 8005274:	2316      	movs	r3, #22
 8005276:	6003      	str	r3, [r0, #0]
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	bd38      	pop	{r3, r4, r5, pc}
 800527e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005280:	b112      	cbz	r2, 8005288 <_raise_r+0x1e>
 8005282:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005286:	b94b      	cbnz	r3, 800529c <_raise_r+0x32>
 8005288:	4620      	mov	r0, r4
 800528a:	f000 f869 	bl	8005360 <_getpid_r>
 800528e:	462a      	mov	r2, r5
 8005290:	4601      	mov	r1, r0
 8005292:	4620      	mov	r0, r4
 8005294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005298:	f000 b850 	b.w	800533c <_kill_r>
 800529c:	2b01      	cmp	r3, #1
 800529e:	d00a      	beq.n	80052b6 <_raise_r+0x4c>
 80052a0:	1c59      	adds	r1, r3, #1
 80052a2:	d103      	bne.n	80052ac <_raise_r+0x42>
 80052a4:	2316      	movs	r3, #22
 80052a6:	6003      	str	r3, [r0, #0]
 80052a8:	2001      	movs	r0, #1
 80052aa:	e7e7      	b.n	800527c <_raise_r+0x12>
 80052ac:	2400      	movs	r4, #0
 80052ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80052b2:	4628      	mov	r0, r5
 80052b4:	4798      	blx	r3
 80052b6:	2000      	movs	r0, #0
 80052b8:	e7e0      	b.n	800527c <_raise_r+0x12>
	...

080052bc <raise>:
 80052bc:	4b02      	ldr	r3, [pc, #8]	; (80052c8 <raise+0xc>)
 80052be:	4601      	mov	r1, r0
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	f7ff bfd2 	b.w	800526a <_raise_r>
 80052c6:	bf00      	nop
 80052c8:	20000068 	.word	0x20000068

080052cc <_localeconv_r>:
 80052cc:	4800      	ldr	r0, [pc, #0]	; (80052d0 <_localeconv_r+0x4>)
 80052ce:	4770      	bx	lr
 80052d0:	2000015c 	.word	0x2000015c

080052d4 <_close_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d06      	ldr	r5, [pc, #24]	; (80052f0 <_close_r+0x1c>)
 80052d8:	2300      	movs	r3, #0
 80052da:	4604      	mov	r4, r0
 80052dc:	4608      	mov	r0, r1
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	f7fc fe0a 	bl	8001ef8 <_close>
 80052e4:	1c43      	adds	r3, r0, #1
 80052e6:	d102      	bne.n	80052ee <_close_r+0x1a>
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	b103      	cbz	r3, 80052ee <_close_r+0x1a>
 80052ec:	6023      	str	r3, [r4, #0]
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
 80052f0:	200009cc 	.word	0x200009cc

080052f4 <_lseek_r>:
 80052f4:	b538      	push	{r3, r4, r5, lr}
 80052f6:	4d07      	ldr	r5, [pc, #28]	; (8005314 <_lseek_r+0x20>)
 80052f8:	4604      	mov	r4, r0
 80052fa:	4608      	mov	r0, r1
 80052fc:	4611      	mov	r1, r2
 80052fe:	2200      	movs	r2, #0
 8005300:	602a      	str	r2, [r5, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	f7fc fe02 	bl	8001f0c <_lseek>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_lseek_r+0x1e>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_lseek_r+0x1e>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	200009cc 	.word	0x200009cc

08005318 <_read_r>:
 8005318:	b538      	push	{r3, r4, r5, lr}
 800531a:	4d07      	ldr	r5, [pc, #28]	; (8005338 <_read_r+0x20>)
 800531c:	4604      	mov	r4, r0
 800531e:	4608      	mov	r0, r1
 8005320:	4611      	mov	r1, r2
 8005322:	2200      	movs	r2, #0
 8005324:	602a      	str	r2, [r5, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	f7fc fdca 	bl	8001ec0 <_read>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_read_r+0x1e>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_read_r+0x1e>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	200009cc 	.word	0x200009cc

0800533c <_kill_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d07      	ldr	r5, [pc, #28]	; (800535c <_kill_r+0x20>)
 8005340:	2300      	movs	r3, #0
 8005342:	4604      	mov	r4, r0
 8005344:	4608      	mov	r0, r1
 8005346:	4611      	mov	r1, r2
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	f7fc fdab 	bl	8001ea4 <_kill>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	d102      	bne.n	8005358 <_kill_r+0x1c>
 8005352:	682b      	ldr	r3, [r5, #0]
 8005354:	b103      	cbz	r3, 8005358 <_kill_r+0x1c>
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	bd38      	pop	{r3, r4, r5, pc}
 800535a:	bf00      	nop
 800535c:	200009cc 	.word	0x200009cc

08005360 <_getpid_r>:
 8005360:	f7fc bd9e 	b.w	8001ea0 <_getpid>

08005364 <_sbrk_r>:
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4d06      	ldr	r5, [pc, #24]	; (8005380 <_sbrk_r+0x1c>)
 8005368:	2300      	movs	r3, #0
 800536a:	4604      	mov	r4, r0
 800536c:	4608      	mov	r0, r1
 800536e:	602b      	str	r3, [r5, #0]
 8005370:	f7fc fdce 	bl	8001f10 <_sbrk>
 8005374:	1c43      	adds	r3, r0, #1
 8005376:	d102      	bne.n	800537e <_sbrk_r+0x1a>
 8005378:	682b      	ldr	r3, [r5, #0]
 800537a:	b103      	cbz	r3, 800537e <_sbrk_r+0x1a>
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	bd38      	pop	{r3, r4, r5, pc}
 8005380:	200009cc 	.word	0x200009cc

08005384 <_write_r>:
 8005384:	b538      	push	{r3, r4, r5, lr}
 8005386:	4d07      	ldr	r5, [pc, #28]	; (80053a4 <_write_r+0x20>)
 8005388:	4604      	mov	r4, r0
 800538a:	4608      	mov	r0, r1
 800538c:	4611      	mov	r1, r2
 800538e:	2200      	movs	r2, #0
 8005390:	602a      	str	r2, [r5, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	f7fc fda2 	bl	8001edc <_write>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_write_r+0x1e>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_write_r+0x1e>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	200009cc 	.word	0x200009cc

080053a8 <__errno>:
 80053a8:	4b01      	ldr	r3, [pc, #4]	; (80053b0 <__errno+0x8>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000068 	.word	0x20000068

080053b4 <__libc_init_array>:
 80053b4:	b570      	push	{r4, r5, r6, lr}
 80053b6:	4d0d      	ldr	r5, [pc, #52]	; (80053ec <__libc_init_array+0x38>)
 80053b8:	4c0d      	ldr	r4, [pc, #52]	; (80053f0 <__libc_init_array+0x3c>)
 80053ba:	1b64      	subs	r4, r4, r5
 80053bc:	10a4      	asrs	r4, r4, #2
 80053be:	2600      	movs	r6, #0
 80053c0:	42a6      	cmp	r6, r4
 80053c2:	d109      	bne.n	80053d8 <__libc_init_array+0x24>
 80053c4:	4d0b      	ldr	r5, [pc, #44]	; (80053f4 <__libc_init_array+0x40>)
 80053c6:	4c0c      	ldr	r4, [pc, #48]	; (80053f8 <__libc_init_array+0x44>)
 80053c8:	f001 ff88 	bl	80072dc <_init>
 80053cc:	1b64      	subs	r4, r4, r5
 80053ce:	10a4      	asrs	r4, r4, #2
 80053d0:	2600      	movs	r6, #0
 80053d2:	42a6      	cmp	r6, r4
 80053d4:	d105      	bne.n	80053e2 <__libc_init_array+0x2e>
 80053d6:	bd70      	pop	{r4, r5, r6, pc}
 80053d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053dc:	4798      	blx	r3
 80053de:	3601      	adds	r6, #1
 80053e0:	e7ee      	b.n	80053c0 <__libc_init_array+0xc>
 80053e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e6:	4798      	blx	r3
 80053e8:	3601      	adds	r6, #1
 80053ea:	e7f2      	b.n	80053d2 <__libc_init_array+0x1e>
 80053ec:	08007a14 	.word	0x08007a14
 80053f0:	08007a14 	.word	0x08007a14
 80053f4:	08007a14 	.word	0x08007a14
 80053f8:	08007a18 	.word	0x08007a18

080053fc <__retarget_lock_init_recursive>:
 80053fc:	4770      	bx	lr

080053fe <__retarget_lock_acquire_recursive>:
 80053fe:	4770      	bx	lr

08005400 <__retarget_lock_release_recursive>:
 8005400:	4770      	bx	lr

08005402 <quorem>:
 8005402:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005406:	6903      	ldr	r3, [r0, #16]
 8005408:	690c      	ldr	r4, [r1, #16]
 800540a:	42a3      	cmp	r3, r4
 800540c:	4607      	mov	r7, r0
 800540e:	db7e      	blt.n	800550e <quorem+0x10c>
 8005410:	3c01      	subs	r4, #1
 8005412:	f101 0814 	add.w	r8, r1, #20
 8005416:	f100 0514 	add.w	r5, r0, #20
 800541a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800541e:	9301      	str	r3, [sp, #4]
 8005420:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005428:	3301      	adds	r3, #1
 800542a:	429a      	cmp	r2, r3
 800542c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005430:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005434:	fbb2 f6f3 	udiv	r6, r2, r3
 8005438:	d331      	bcc.n	800549e <quorem+0x9c>
 800543a:	f04f 0e00 	mov.w	lr, #0
 800543e:	4640      	mov	r0, r8
 8005440:	46ac      	mov	ip, r5
 8005442:	46f2      	mov	sl, lr
 8005444:	f850 2b04 	ldr.w	r2, [r0], #4
 8005448:	b293      	uxth	r3, r2
 800544a:	fb06 e303 	mla	r3, r6, r3, lr
 800544e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005452:	0c1a      	lsrs	r2, r3, #16
 8005454:	b29b      	uxth	r3, r3
 8005456:	ebaa 0303 	sub.w	r3, sl, r3
 800545a:	f8dc a000 	ldr.w	sl, [ip]
 800545e:	fa13 f38a 	uxtah	r3, r3, sl
 8005462:	fb06 220e 	mla	r2, r6, lr, r2
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	9b00      	ldr	r3, [sp, #0]
 800546a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800546e:	b292      	uxth	r2, r2
 8005470:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005474:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005478:	f8bd 3000 	ldrh.w	r3, [sp]
 800547c:	4581      	cmp	r9, r0
 800547e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005482:	f84c 3b04 	str.w	r3, [ip], #4
 8005486:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800548a:	d2db      	bcs.n	8005444 <quorem+0x42>
 800548c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005490:	b92b      	cbnz	r3, 800549e <quorem+0x9c>
 8005492:	9b01      	ldr	r3, [sp, #4]
 8005494:	3b04      	subs	r3, #4
 8005496:	429d      	cmp	r5, r3
 8005498:	461a      	mov	r2, r3
 800549a:	d32c      	bcc.n	80054f6 <quorem+0xf4>
 800549c:	613c      	str	r4, [r7, #16]
 800549e:	4638      	mov	r0, r7
 80054a0:	f001 f8f4 	bl	800668c <__mcmp>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	db22      	blt.n	80054ee <quorem+0xec>
 80054a8:	3601      	adds	r6, #1
 80054aa:	4629      	mov	r1, r5
 80054ac:	2000      	movs	r0, #0
 80054ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80054b2:	f8d1 c000 	ldr.w	ip, [r1]
 80054b6:	b293      	uxth	r3, r2
 80054b8:	1ac3      	subs	r3, r0, r3
 80054ba:	0c12      	lsrs	r2, r2, #16
 80054bc:	fa13 f38c 	uxtah	r3, r3, ip
 80054c0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80054c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054ce:	45c1      	cmp	r9, r8
 80054d0:	f841 3b04 	str.w	r3, [r1], #4
 80054d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80054d8:	d2e9      	bcs.n	80054ae <quorem+0xac>
 80054da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054e2:	b922      	cbnz	r2, 80054ee <quorem+0xec>
 80054e4:	3b04      	subs	r3, #4
 80054e6:	429d      	cmp	r5, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	d30a      	bcc.n	8005502 <quorem+0x100>
 80054ec:	613c      	str	r4, [r7, #16]
 80054ee:	4630      	mov	r0, r6
 80054f0:	b003      	add	sp, #12
 80054f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	3b04      	subs	r3, #4
 80054fa:	2a00      	cmp	r2, #0
 80054fc:	d1ce      	bne.n	800549c <quorem+0x9a>
 80054fe:	3c01      	subs	r4, #1
 8005500:	e7c9      	b.n	8005496 <quorem+0x94>
 8005502:	6812      	ldr	r2, [r2, #0]
 8005504:	3b04      	subs	r3, #4
 8005506:	2a00      	cmp	r2, #0
 8005508:	d1f0      	bne.n	80054ec <quorem+0xea>
 800550a:	3c01      	subs	r4, #1
 800550c:	e7eb      	b.n	80054e6 <quorem+0xe4>
 800550e:	2000      	movs	r0, #0
 8005510:	e7ee      	b.n	80054f0 <quorem+0xee>
 8005512:	0000      	movs	r0, r0
 8005514:	0000      	movs	r0, r0
	...

08005518 <_dtoa_r>:
 8005518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551c:	ed2d 8b04 	vpush	{d8-d9}
 8005520:	69c5      	ldr	r5, [r0, #28]
 8005522:	b093      	sub	sp, #76	; 0x4c
 8005524:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005528:	ec57 6b10 	vmov	r6, r7, d0
 800552c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005530:	9107      	str	r1, [sp, #28]
 8005532:	4604      	mov	r4, r0
 8005534:	920a      	str	r2, [sp, #40]	; 0x28
 8005536:	930d      	str	r3, [sp, #52]	; 0x34
 8005538:	b975      	cbnz	r5, 8005558 <_dtoa_r+0x40>
 800553a:	2010      	movs	r0, #16
 800553c:	f7ff f832 	bl	80045a4 <malloc>
 8005540:	4602      	mov	r2, r0
 8005542:	61e0      	str	r0, [r4, #28]
 8005544:	b920      	cbnz	r0, 8005550 <_dtoa_r+0x38>
 8005546:	4bae      	ldr	r3, [pc, #696]	; (8005800 <_dtoa_r+0x2e8>)
 8005548:	21ef      	movs	r1, #239	; 0xef
 800554a:	48ae      	ldr	r0, [pc, #696]	; (8005804 <_dtoa_r+0x2ec>)
 800554c:	f001 fbcc 	bl	8006ce8 <__assert_func>
 8005550:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005554:	6005      	str	r5, [r0, #0]
 8005556:	60c5      	str	r5, [r0, #12]
 8005558:	69e3      	ldr	r3, [r4, #28]
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	b151      	cbz	r1, 8005574 <_dtoa_r+0x5c>
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	604a      	str	r2, [r1, #4]
 8005562:	2301      	movs	r3, #1
 8005564:	4093      	lsls	r3, r2
 8005566:	608b      	str	r3, [r1, #8]
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fe53 	bl	8006214 <_Bfree>
 800556e:	69e3      	ldr	r3, [r4, #28]
 8005570:	2200      	movs	r2, #0
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	1e3b      	subs	r3, r7, #0
 8005576:	bfbb      	ittet	lt
 8005578:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800557c:	9303      	strlt	r3, [sp, #12]
 800557e:	2300      	movge	r3, #0
 8005580:	2201      	movlt	r2, #1
 8005582:	bfac      	ite	ge
 8005584:	f8c8 3000 	strge.w	r3, [r8]
 8005588:	f8c8 2000 	strlt.w	r2, [r8]
 800558c:	4b9e      	ldr	r3, [pc, #632]	; (8005808 <_dtoa_r+0x2f0>)
 800558e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005592:	ea33 0308 	bics.w	r3, r3, r8
 8005596:	d11b      	bne.n	80055d0 <_dtoa_r+0xb8>
 8005598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800559a:	f242 730f 	movw	r3, #9999	; 0x270f
 800559e:	6013      	str	r3, [r2, #0]
 80055a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80055a4:	4333      	orrs	r3, r6
 80055a6:	f000 8593 	beq.w	80060d0 <_dtoa_r+0xbb8>
 80055aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055ac:	b963      	cbnz	r3, 80055c8 <_dtoa_r+0xb0>
 80055ae:	4b97      	ldr	r3, [pc, #604]	; (800580c <_dtoa_r+0x2f4>)
 80055b0:	e027      	b.n	8005602 <_dtoa_r+0xea>
 80055b2:	4b97      	ldr	r3, [pc, #604]	; (8005810 <_dtoa_r+0x2f8>)
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	3308      	adds	r3, #8
 80055b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	9800      	ldr	r0, [sp, #0]
 80055be:	b013      	add	sp, #76	; 0x4c
 80055c0:	ecbd 8b04 	vpop	{d8-d9}
 80055c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c8:	4b90      	ldr	r3, [pc, #576]	; (800580c <_dtoa_r+0x2f4>)
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	3303      	adds	r3, #3
 80055ce:	e7f3      	b.n	80055b8 <_dtoa_r+0xa0>
 80055d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055d4:	2200      	movs	r2, #0
 80055d6:	ec51 0b17 	vmov	r0, r1, d7
 80055da:	eeb0 8a47 	vmov.f32	s16, s14
 80055de:	eef0 8a67 	vmov.f32	s17, s15
 80055e2:	2300      	movs	r3, #0
 80055e4:	f7fb fa70 	bl	8000ac8 <__aeabi_dcmpeq>
 80055e8:	4681      	mov	r9, r0
 80055ea:	b160      	cbz	r0, 8005606 <_dtoa_r+0xee>
 80055ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055ee:	2301      	movs	r3, #1
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8568 	beq.w	80060ca <_dtoa_r+0xbb2>
 80055fa:	4b86      	ldr	r3, [pc, #536]	; (8005814 <_dtoa_r+0x2fc>)
 80055fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055fe:	6013      	str	r3, [r2, #0]
 8005600:	3b01      	subs	r3, #1
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	e7da      	b.n	80055bc <_dtoa_r+0xa4>
 8005606:	aa10      	add	r2, sp, #64	; 0x40
 8005608:	a911      	add	r1, sp, #68	; 0x44
 800560a:	4620      	mov	r0, r4
 800560c:	eeb0 0a48 	vmov.f32	s0, s16
 8005610:	eef0 0a68 	vmov.f32	s1, s17
 8005614:	f001 f8e0 	bl	80067d8 <__d2b>
 8005618:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800561c:	4682      	mov	sl, r0
 800561e:	2d00      	cmp	r5, #0
 8005620:	d07f      	beq.n	8005722 <_dtoa_r+0x20a>
 8005622:	ee18 3a90 	vmov	r3, s17
 8005626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800562a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800562e:	ec51 0b18 	vmov	r0, r1, d8
 8005632:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005636:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800563a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800563e:	4619      	mov	r1, r3
 8005640:	2200      	movs	r2, #0
 8005642:	4b75      	ldr	r3, [pc, #468]	; (8005818 <_dtoa_r+0x300>)
 8005644:	f7fa fe20 	bl	8000288 <__aeabi_dsub>
 8005648:	a367      	add	r3, pc, #412	; (adr r3, 80057e8 <_dtoa_r+0x2d0>)
 800564a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564e:	f7fa ffd3 	bl	80005f8 <__aeabi_dmul>
 8005652:	a367      	add	r3, pc, #412	; (adr r3, 80057f0 <_dtoa_r+0x2d8>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fe18 	bl	800028c <__adddf3>
 800565c:	4606      	mov	r6, r0
 800565e:	4628      	mov	r0, r5
 8005660:	460f      	mov	r7, r1
 8005662:	f7fa ff5f 	bl	8000524 <__aeabi_i2d>
 8005666:	a364      	add	r3, pc, #400	; (adr r3, 80057f8 <_dtoa_r+0x2e0>)
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f7fa ffc4 	bl	80005f8 <__aeabi_dmul>
 8005670:	4602      	mov	r2, r0
 8005672:	460b      	mov	r3, r1
 8005674:	4630      	mov	r0, r6
 8005676:	4639      	mov	r1, r7
 8005678:	f7fa fe08 	bl	800028c <__adddf3>
 800567c:	4606      	mov	r6, r0
 800567e:	460f      	mov	r7, r1
 8005680:	f7fb fa6a 	bl	8000b58 <__aeabi_d2iz>
 8005684:	2200      	movs	r2, #0
 8005686:	4683      	mov	fp, r0
 8005688:	2300      	movs	r3, #0
 800568a:	4630      	mov	r0, r6
 800568c:	4639      	mov	r1, r7
 800568e:	f7fb fa25 	bl	8000adc <__aeabi_dcmplt>
 8005692:	b148      	cbz	r0, 80056a8 <_dtoa_r+0x190>
 8005694:	4658      	mov	r0, fp
 8005696:	f7fa ff45 	bl	8000524 <__aeabi_i2d>
 800569a:	4632      	mov	r2, r6
 800569c:	463b      	mov	r3, r7
 800569e:	f7fb fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80056a2:	b908      	cbnz	r0, 80056a8 <_dtoa_r+0x190>
 80056a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056a8:	f1bb 0f16 	cmp.w	fp, #22
 80056ac:	d857      	bhi.n	800575e <_dtoa_r+0x246>
 80056ae:	4b5b      	ldr	r3, [pc, #364]	; (800581c <_dtoa_r+0x304>)
 80056b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	ec51 0b18 	vmov	r0, r1, d8
 80056bc:	f7fb fa0e 	bl	8000adc <__aeabi_dcmplt>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d04e      	beq.n	8005762 <_dtoa_r+0x24a>
 80056c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056c8:	2300      	movs	r3, #0
 80056ca:	930c      	str	r3, [sp, #48]	; 0x30
 80056cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056ce:	1b5b      	subs	r3, r3, r5
 80056d0:	1e5a      	subs	r2, r3, #1
 80056d2:	bf45      	ittet	mi
 80056d4:	f1c3 0301 	rsbmi	r3, r3, #1
 80056d8:	9305      	strmi	r3, [sp, #20]
 80056da:	2300      	movpl	r3, #0
 80056dc:	2300      	movmi	r3, #0
 80056de:	9206      	str	r2, [sp, #24]
 80056e0:	bf54      	ite	pl
 80056e2:	9305      	strpl	r3, [sp, #20]
 80056e4:	9306      	strmi	r3, [sp, #24]
 80056e6:	f1bb 0f00 	cmp.w	fp, #0
 80056ea:	db3c      	blt.n	8005766 <_dtoa_r+0x24e>
 80056ec:	9b06      	ldr	r3, [sp, #24]
 80056ee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80056f2:	445b      	add	r3, fp
 80056f4:	9306      	str	r3, [sp, #24]
 80056f6:	2300      	movs	r3, #0
 80056f8:	9308      	str	r3, [sp, #32]
 80056fa:	9b07      	ldr	r3, [sp, #28]
 80056fc:	2b09      	cmp	r3, #9
 80056fe:	d868      	bhi.n	80057d2 <_dtoa_r+0x2ba>
 8005700:	2b05      	cmp	r3, #5
 8005702:	bfc4      	itt	gt
 8005704:	3b04      	subgt	r3, #4
 8005706:	9307      	strgt	r3, [sp, #28]
 8005708:	9b07      	ldr	r3, [sp, #28]
 800570a:	f1a3 0302 	sub.w	r3, r3, #2
 800570e:	bfcc      	ite	gt
 8005710:	2500      	movgt	r5, #0
 8005712:	2501      	movle	r5, #1
 8005714:	2b03      	cmp	r3, #3
 8005716:	f200 8085 	bhi.w	8005824 <_dtoa_r+0x30c>
 800571a:	e8df f003 	tbb	[pc, r3]
 800571e:	3b2e      	.short	0x3b2e
 8005720:	5839      	.short	0x5839
 8005722:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005726:	441d      	add	r5, r3
 8005728:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800572c:	2b20      	cmp	r3, #32
 800572e:	bfc1      	itttt	gt
 8005730:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005734:	fa08 f803 	lslgt.w	r8, r8, r3
 8005738:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800573c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005740:	bfd6      	itet	le
 8005742:	f1c3 0320 	rsble	r3, r3, #32
 8005746:	ea48 0003 	orrgt.w	r0, r8, r3
 800574a:	fa06 f003 	lslle.w	r0, r6, r3
 800574e:	f7fa fed9 	bl	8000504 <__aeabi_ui2d>
 8005752:	2201      	movs	r2, #1
 8005754:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005758:	3d01      	subs	r5, #1
 800575a:	920e      	str	r2, [sp, #56]	; 0x38
 800575c:	e76f      	b.n	800563e <_dtoa_r+0x126>
 800575e:	2301      	movs	r3, #1
 8005760:	e7b3      	b.n	80056ca <_dtoa_r+0x1b2>
 8005762:	900c      	str	r0, [sp, #48]	; 0x30
 8005764:	e7b2      	b.n	80056cc <_dtoa_r+0x1b4>
 8005766:	9b05      	ldr	r3, [sp, #20]
 8005768:	eba3 030b 	sub.w	r3, r3, fp
 800576c:	9305      	str	r3, [sp, #20]
 800576e:	f1cb 0300 	rsb	r3, fp, #0
 8005772:	9308      	str	r3, [sp, #32]
 8005774:	2300      	movs	r3, #0
 8005776:	930b      	str	r3, [sp, #44]	; 0x2c
 8005778:	e7bf      	b.n	80056fa <_dtoa_r+0x1e2>
 800577a:	2300      	movs	r3, #0
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005780:	2b00      	cmp	r3, #0
 8005782:	dc52      	bgt.n	800582a <_dtoa_r+0x312>
 8005784:	2301      	movs	r3, #1
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	9304      	str	r3, [sp, #16]
 800578a:	461a      	mov	r2, r3
 800578c:	920a      	str	r2, [sp, #40]	; 0x28
 800578e:	e00b      	b.n	80057a8 <_dtoa_r+0x290>
 8005790:	2301      	movs	r3, #1
 8005792:	e7f3      	b.n	800577c <_dtoa_r+0x264>
 8005794:	2300      	movs	r3, #0
 8005796:	9309      	str	r3, [sp, #36]	; 0x24
 8005798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579a:	445b      	add	r3, fp
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	3301      	adds	r3, #1
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	bfb8      	it	lt
 80057a6:	2301      	movlt	r3, #1
 80057a8:	69e0      	ldr	r0, [r4, #28]
 80057aa:	2100      	movs	r1, #0
 80057ac:	2204      	movs	r2, #4
 80057ae:	f102 0614 	add.w	r6, r2, #20
 80057b2:	429e      	cmp	r6, r3
 80057b4:	d93d      	bls.n	8005832 <_dtoa_r+0x31a>
 80057b6:	6041      	str	r1, [r0, #4]
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fceb 	bl	8006194 <_Balloc>
 80057be:	9000      	str	r0, [sp, #0]
 80057c0:	2800      	cmp	r0, #0
 80057c2:	d139      	bne.n	8005838 <_dtoa_r+0x320>
 80057c4:	4b16      	ldr	r3, [pc, #88]	; (8005820 <_dtoa_r+0x308>)
 80057c6:	4602      	mov	r2, r0
 80057c8:	f240 11af 	movw	r1, #431	; 0x1af
 80057cc:	e6bd      	b.n	800554a <_dtoa_r+0x32>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e7e1      	b.n	8005796 <_dtoa_r+0x27e>
 80057d2:	2501      	movs	r5, #1
 80057d4:	2300      	movs	r3, #0
 80057d6:	9307      	str	r3, [sp, #28]
 80057d8:	9509      	str	r5, [sp, #36]	; 0x24
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	9301      	str	r3, [sp, #4]
 80057e0:	9304      	str	r3, [sp, #16]
 80057e2:	2200      	movs	r2, #0
 80057e4:	2312      	movs	r3, #18
 80057e6:	e7d1      	b.n	800578c <_dtoa_r+0x274>
 80057e8:	636f4361 	.word	0x636f4361
 80057ec:	3fd287a7 	.word	0x3fd287a7
 80057f0:	8b60c8b3 	.word	0x8b60c8b3
 80057f4:	3fc68a28 	.word	0x3fc68a28
 80057f8:	509f79fb 	.word	0x509f79fb
 80057fc:	3fd34413 	.word	0x3fd34413
 8005800:	080076dd 	.word	0x080076dd
 8005804:	080076f4 	.word	0x080076f4
 8005808:	7ff00000 	.word	0x7ff00000
 800580c:	080076d9 	.word	0x080076d9
 8005810:	080076d0 	.word	0x080076d0
 8005814:	080076ad 	.word	0x080076ad
 8005818:	3ff80000 	.word	0x3ff80000
 800581c:	080077e0 	.word	0x080077e0
 8005820:	0800774c 	.word	0x0800774c
 8005824:	2301      	movs	r3, #1
 8005826:	9309      	str	r3, [sp, #36]	; 0x24
 8005828:	e7d7      	b.n	80057da <_dtoa_r+0x2c2>
 800582a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	9304      	str	r3, [sp, #16]
 8005830:	e7ba      	b.n	80057a8 <_dtoa_r+0x290>
 8005832:	3101      	adds	r1, #1
 8005834:	0052      	lsls	r2, r2, #1
 8005836:	e7ba      	b.n	80057ae <_dtoa_r+0x296>
 8005838:	69e3      	ldr	r3, [r4, #28]
 800583a:	9a00      	ldr	r2, [sp, #0]
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	9b04      	ldr	r3, [sp, #16]
 8005840:	2b0e      	cmp	r3, #14
 8005842:	f200 80a8 	bhi.w	8005996 <_dtoa_r+0x47e>
 8005846:	2d00      	cmp	r5, #0
 8005848:	f000 80a5 	beq.w	8005996 <_dtoa_r+0x47e>
 800584c:	f1bb 0f00 	cmp.w	fp, #0
 8005850:	dd38      	ble.n	80058c4 <_dtoa_r+0x3ac>
 8005852:	4bc0      	ldr	r3, [pc, #768]	; (8005b54 <_dtoa_r+0x63c>)
 8005854:	f00b 020f 	and.w	r2, fp, #15
 8005858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800585c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005860:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005864:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005868:	d019      	beq.n	800589e <_dtoa_r+0x386>
 800586a:	4bbb      	ldr	r3, [pc, #748]	; (8005b58 <_dtoa_r+0x640>)
 800586c:	ec51 0b18 	vmov	r0, r1, d8
 8005870:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005874:	f7fa ffea 	bl	800084c <__aeabi_ddiv>
 8005878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800587c:	f008 080f 	and.w	r8, r8, #15
 8005880:	2503      	movs	r5, #3
 8005882:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005b58 <_dtoa_r+0x640>
 8005886:	f1b8 0f00 	cmp.w	r8, #0
 800588a:	d10a      	bne.n	80058a2 <_dtoa_r+0x38a>
 800588c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005890:	4632      	mov	r2, r6
 8005892:	463b      	mov	r3, r7
 8005894:	f7fa ffda 	bl	800084c <__aeabi_ddiv>
 8005898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800589c:	e02b      	b.n	80058f6 <_dtoa_r+0x3de>
 800589e:	2502      	movs	r5, #2
 80058a0:	e7ef      	b.n	8005882 <_dtoa_r+0x36a>
 80058a2:	f018 0f01 	tst.w	r8, #1
 80058a6:	d008      	beq.n	80058ba <_dtoa_r+0x3a2>
 80058a8:	4630      	mov	r0, r6
 80058aa:	4639      	mov	r1, r7
 80058ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 80058b0:	f7fa fea2 	bl	80005f8 <__aeabi_dmul>
 80058b4:	3501      	adds	r5, #1
 80058b6:	4606      	mov	r6, r0
 80058b8:	460f      	mov	r7, r1
 80058ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80058be:	f109 0908 	add.w	r9, r9, #8
 80058c2:	e7e0      	b.n	8005886 <_dtoa_r+0x36e>
 80058c4:	f000 809f 	beq.w	8005a06 <_dtoa_r+0x4ee>
 80058c8:	f1cb 0600 	rsb	r6, fp, #0
 80058cc:	4ba1      	ldr	r3, [pc, #644]	; (8005b54 <_dtoa_r+0x63c>)
 80058ce:	4fa2      	ldr	r7, [pc, #648]	; (8005b58 <_dtoa_r+0x640>)
 80058d0:	f006 020f 	and.w	r2, r6, #15
 80058d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	ec51 0b18 	vmov	r0, r1, d8
 80058e0:	f7fa fe8a 	bl	80005f8 <__aeabi_dmul>
 80058e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058e8:	1136      	asrs	r6, r6, #4
 80058ea:	2300      	movs	r3, #0
 80058ec:	2502      	movs	r5, #2
 80058ee:	2e00      	cmp	r6, #0
 80058f0:	d17e      	bne.n	80059f0 <_dtoa_r+0x4d8>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1d0      	bne.n	8005898 <_dtoa_r+0x380>
 80058f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8084 	beq.w	8005a0a <_dtoa_r+0x4f2>
 8005902:	4b96      	ldr	r3, [pc, #600]	; (8005b5c <_dtoa_r+0x644>)
 8005904:	2200      	movs	r2, #0
 8005906:	4640      	mov	r0, r8
 8005908:	4649      	mov	r1, r9
 800590a:	f7fb f8e7 	bl	8000adc <__aeabi_dcmplt>
 800590e:	2800      	cmp	r0, #0
 8005910:	d07b      	beq.n	8005a0a <_dtoa_r+0x4f2>
 8005912:	9b04      	ldr	r3, [sp, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d078      	beq.n	8005a0a <_dtoa_r+0x4f2>
 8005918:	9b01      	ldr	r3, [sp, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	dd39      	ble.n	8005992 <_dtoa_r+0x47a>
 800591e:	4b90      	ldr	r3, [pc, #576]	; (8005b60 <_dtoa_r+0x648>)
 8005920:	2200      	movs	r2, #0
 8005922:	4640      	mov	r0, r8
 8005924:	4649      	mov	r1, r9
 8005926:	f7fa fe67 	bl	80005f8 <__aeabi_dmul>
 800592a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800592e:	9e01      	ldr	r6, [sp, #4]
 8005930:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005934:	3501      	adds	r5, #1
 8005936:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800593a:	4628      	mov	r0, r5
 800593c:	f7fa fdf2 	bl	8000524 <__aeabi_i2d>
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	f7fa fe58 	bl	80005f8 <__aeabi_dmul>
 8005948:	4b86      	ldr	r3, [pc, #536]	; (8005b64 <_dtoa_r+0x64c>)
 800594a:	2200      	movs	r2, #0
 800594c:	f7fa fc9e 	bl	800028c <__adddf3>
 8005950:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005958:	9303      	str	r3, [sp, #12]
 800595a:	2e00      	cmp	r6, #0
 800595c:	d158      	bne.n	8005a10 <_dtoa_r+0x4f8>
 800595e:	4b82      	ldr	r3, [pc, #520]	; (8005b68 <_dtoa_r+0x650>)
 8005960:	2200      	movs	r2, #0
 8005962:	4640      	mov	r0, r8
 8005964:	4649      	mov	r1, r9
 8005966:	f7fa fc8f 	bl	8000288 <__aeabi_dsub>
 800596a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800596e:	4680      	mov	r8, r0
 8005970:	4689      	mov	r9, r1
 8005972:	f7fb f8d1 	bl	8000b18 <__aeabi_dcmpgt>
 8005976:	2800      	cmp	r0, #0
 8005978:	f040 8296 	bne.w	8005ea8 <_dtoa_r+0x990>
 800597c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005980:	4640      	mov	r0, r8
 8005982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005986:	4649      	mov	r1, r9
 8005988:	f7fb f8a8 	bl	8000adc <__aeabi_dcmplt>
 800598c:	2800      	cmp	r0, #0
 800598e:	f040 8289 	bne.w	8005ea4 <_dtoa_r+0x98c>
 8005992:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005998:	2b00      	cmp	r3, #0
 800599a:	f2c0 814e 	blt.w	8005c3a <_dtoa_r+0x722>
 800599e:	f1bb 0f0e 	cmp.w	fp, #14
 80059a2:	f300 814a 	bgt.w	8005c3a <_dtoa_r+0x722>
 80059a6:	4b6b      	ldr	r3, [pc, #428]	; (8005b54 <_dtoa_r+0x63c>)
 80059a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80059ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f280 80dc 	bge.w	8005b70 <_dtoa_r+0x658>
 80059b8:	9b04      	ldr	r3, [sp, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f300 80d8 	bgt.w	8005b70 <_dtoa_r+0x658>
 80059c0:	f040 826f 	bne.w	8005ea2 <_dtoa_r+0x98a>
 80059c4:	4b68      	ldr	r3, [pc, #416]	; (8005b68 <_dtoa_r+0x650>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	4640      	mov	r0, r8
 80059ca:	4649      	mov	r1, r9
 80059cc:	f7fa fe14 	bl	80005f8 <__aeabi_dmul>
 80059d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059d4:	f7fb f896 	bl	8000b04 <__aeabi_dcmpge>
 80059d8:	9e04      	ldr	r6, [sp, #16]
 80059da:	4637      	mov	r7, r6
 80059dc:	2800      	cmp	r0, #0
 80059de:	f040 8245 	bne.w	8005e6c <_dtoa_r+0x954>
 80059e2:	9d00      	ldr	r5, [sp, #0]
 80059e4:	2331      	movs	r3, #49	; 0x31
 80059e6:	f805 3b01 	strb.w	r3, [r5], #1
 80059ea:	f10b 0b01 	add.w	fp, fp, #1
 80059ee:	e241      	b.n	8005e74 <_dtoa_r+0x95c>
 80059f0:	07f2      	lsls	r2, r6, #31
 80059f2:	d505      	bpl.n	8005a00 <_dtoa_r+0x4e8>
 80059f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059f8:	f7fa fdfe 	bl	80005f8 <__aeabi_dmul>
 80059fc:	3501      	adds	r5, #1
 80059fe:	2301      	movs	r3, #1
 8005a00:	1076      	asrs	r6, r6, #1
 8005a02:	3708      	adds	r7, #8
 8005a04:	e773      	b.n	80058ee <_dtoa_r+0x3d6>
 8005a06:	2502      	movs	r5, #2
 8005a08:	e775      	b.n	80058f6 <_dtoa_r+0x3de>
 8005a0a:	9e04      	ldr	r6, [sp, #16]
 8005a0c:	465f      	mov	r7, fp
 8005a0e:	e792      	b.n	8005936 <_dtoa_r+0x41e>
 8005a10:	9900      	ldr	r1, [sp, #0]
 8005a12:	4b50      	ldr	r3, [pc, #320]	; (8005b54 <_dtoa_r+0x63c>)
 8005a14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a18:	4431      	add	r1, r6
 8005a1a:	9102      	str	r1, [sp, #8]
 8005a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a1e:	eeb0 9a47 	vmov.f32	s18, s14
 8005a22:	eef0 9a67 	vmov.f32	s19, s15
 8005a26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005a2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a2e:	2900      	cmp	r1, #0
 8005a30:	d044      	beq.n	8005abc <_dtoa_r+0x5a4>
 8005a32:	494e      	ldr	r1, [pc, #312]	; (8005b6c <_dtoa_r+0x654>)
 8005a34:	2000      	movs	r0, #0
 8005a36:	f7fa ff09 	bl	800084c <__aeabi_ddiv>
 8005a3a:	ec53 2b19 	vmov	r2, r3, d9
 8005a3e:	f7fa fc23 	bl	8000288 <__aeabi_dsub>
 8005a42:	9d00      	ldr	r5, [sp, #0]
 8005a44:	ec41 0b19 	vmov	d9, r0, r1
 8005a48:	4649      	mov	r1, r9
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	f7fb f884 	bl	8000b58 <__aeabi_d2iz>
 8005a50:	4606      	mov	r6, r0
 8005a52:	f7fa fd67 	bl	8000524 <__aeabi_i2d>
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fc13 	bl	8000288 <__aeabi_dsub>
 8005a62:	3630      	adds	r6, #48	; 0x30
 8005a64:	f805 6b01 	strb.w	r6, [r5], #1
 8005a68:	ec53 2b19 	vmov	r2, r3, d9
 8005a6c:	4680      	mov	r8, r0
 8005a6e:	4689      	mov	r9, r1
 8005a70:	f7fb f834 	bl	8000adc <__aeabi_dcmplt>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d164      	bne.n	8005b42 <_dtoa_r+0x62a>
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	4937      	ldr	r1, [pc, #220]	; (8005b5c <_dtoa_r+0x644>)
 8005a7e:	2000      	movs	r0, #0
 8005a80:	f7fa fc02 	bl	8000288 <__aeabi_dsub>
 8005a84:	ec53 2b19 	vmov	r2, r3, d9
 8005a88:	f7fb f828 	bl	8000adc <__aeabi_dcmplt>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	f040 80b6 	bne.w	8005bfe <_dtoa_r+0x6e6>
 8005a92:	9b02      	ldr	r3, [sp, #8]
 8005a94:	429d      	cmp	r5, r3
 8005a96:	f43f af7c 	beq.w	8005992 <_dtoa_r+0x47a>
 8005a9a:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <_dtoa_r+0x648>)
 8005a9c:	ec51 0b19 	vmov	r0, r1, d9
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f7fa fda9 	bl	80005f8 <__aeabi_dmul>
 8005aa6:	4b2e      	ldr	r3, [pc, #184]	; (8005b60 <_dtoa_r+0x648>)
 8005aa8:	ec41 0b19 	vmov	d9, r0, r1
 8005aac:	2200      	movs	r2, #0
 8005aae:	4640      	mov	r0, r8
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	f7fa fda1 	bl	80005f8 <__aeabi_dmul>
 8005ab6:	4680      	mov	r8, r0
 8005ab8:	4689      	mov	r9, r1
 8005aba:	e7c5      	b.n	8005a48 <_dtoa_r+0x530>
 8005abc:	ec51 0b17 	vmov	r0, r1, d7
 8005ac0:	f7fa fd9a 	bl	80005f8 <__aeabi_dmul>
 8005ac4:	9b02      	ldr	r3, [sp, #8]
 8005ac6:	9d00      	ldr	r5, [sp, #0]
 8005ac8:	930f      	str	r3, [sp, #60]	; 0x3c
 8005aca:	ec41 0b19 	vmov	d9, r0, r1
 8005ace:	4649      	mov	r1, r9
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	f7fb f841 	bl	8000b58 <__aeabi_d2iz>
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	f7fa fd24 	bl	8000524 <__aeabi_i2d>
 8005adc:	3630      	adds	r6, #48	; 0x30
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	f7fa fbcf 	bl	8000288 <__aeabi_dsub>
 8005aea:	f805 6b01 	strb.w	r6, [r5], #1
 8005aee:	9b02      	ldr	r3, [sp, #8]
 8005af0:	429d      	cmp	r5, r3
 8005af2:	4680      	mov	r8, r0
 8005af4:	4689      	mov	r9, r1
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	d124      	bne.n	8005b46 <_dtoa_r+0x62e>
 8005afc:	4b1b      	ldr	r3, [pc, #108]	; (8005b6c <_dtoa_r+0x654>)
 8005afe:	ec51 0b19 	vmov	r0, r1, d9
 8005b02:	f7fa fbc3 	bl	800028c <__adddf3>
 8005b06:	4602      	mov	r2, r0
 8005b08:	460b      	mov	r3, r1
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	f7fb f803 	bl	8000b18 <__aeabi_dcmpgt>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d173      	bne.n	8005bfe <_dtoa_r+0x6e6>
 8005b16:	ec53 2b19 	vmov	r2, r3, d9
 8005b1a:	4914      	ldr	r1, [pc, #80]	; (8005b6c <_dtoa_r+0x654>)
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f7fa fbb3 	bl	8000288 <__aeabi_dsub>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa ffd7 	bl	8000adc <__aeabi_dcmplt>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	f43f af2f 	beq.w	8005992 <_dtoa_r+0x47a>
 8005b34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005b36:	1e6b      	subs	r3, r5, #1
 8005b38:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b3a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b3e:	2b30      	cmp	r3, #48	; 0x30
 8005b40:	d0f8      	beq.n	8005b34 <_dtoa_r+0x61c>
 8005b42:	46bb      	mov	fp, r7
 8005b44:	e04a      	b.n	8005bdc <_dtoa_r+0x6c4>
 8005b46:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <_dtoa_r+0x648>)
 8005b48:	f7fa fd56 	bl	80005f8 <__aeabi_dmul>
 8005b4c:	4680      	mov	r8, r0
 8005b4e:	4689      	mov	r9, r1
 8005b50:	e7bd      	b.n	8005ace <_dtoa_r+0x5b6>
 8005b52:	bf00      	nop
 8005b54:	080077e0 	.word	0x080077e0
 8005b58:	080077b8 	.word	0x080077b8
 8005b5c:	3ff00000 	.word	0x3ff00000
 8005b60:	40240000 	.word	0x40240000
 8005b64:	401c0000 	.word	0x401c0000
 8005b68:	40140000 	.word	0x40140000
 8005b6c:	3fe00000 	.word	0x3fe00000
 8005b70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b74:	9d00      	ldr	r5, [sp, #0]
 8005b76:	4642      	mov	r2, r8
 8005b78:	464b      	mov	r3, r9
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	f7fa fe65 	bl	800084c <__aeabi_ddiv>
 8005b82:	f7fa ffe9 	bl	8000b58 <__aeabi_d2iz>
 8005b86:	9001      	str	r0, [sp, #4]
 8005b88:	f7fa fccc 	bl	8000524 <__aeabi_i2d>
 8005b8c:	4642      	mov	r2, r8
 8005b8e:	464b      	mov	r3, r9
 8005b90:	f7fa fd32 	bl	80005f8 <__aeabi_dmul>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4630      	mov	r0, r6
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa fb74 	bl	8000288 <__aeabi_dsub>
 8005ba0:	9e01      	ldr	r6, [sp, #4]
 8005ba2:	9f04      	ldr	r7, [sp, #16]
 8005ba4:	3630      	adds	r6, #48	; 0x30
 8005ba6:	f805 6b01 	strb.w	r6, [r5], #1
 8005baa:	9e00      	ldr	r6, [sp, #0]
 8005bac:	1bae      	subs	r6, r5, r6
 8005bae:	42b7      	cmp	r7, r6
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	d134      	bne.n	8005c20 <_dtoa_r+0x708>
 8005bb6:	f7fa fb69 	bl	800028c <__adddf3>
 8005bba:	4642      	mov	r2, r8
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	f7fa ffa9 	bl	8000b18 <__aeabi_dcmpgt>
 8005bc6:	b9c8      	cbnz	r0, 8005bfc <_dtoa_r+0x6e4>
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	4630      	mov	r0, r6
 8005bce:	4639      	mov	r1, r7
 8005bd0:	f7fa ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bd4:	b110      	cbz	r0, 8005bdc <_dtoa_r+0x6c4>
 8005bd6:	9b01      	ldr	r3, [sp, #4]
 8005bd8:	07db      	lsls	r3, r3, #31
 8005bda:	d40f      	bmi.n	8005bfc <_dtoa_r+0x6e4>
 8005bdc:	4651      	mov	r1, sl
 8005bde:	4620      	mov	r0, r4
 8005be0:	f000 fb18 	bl	8006214 <_Bfree>
 8005be4:	2300      	movs	r3, #0
 8005be6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005be8:	702b      	strb	r3, [r5, #0]
 8005bea:	f10b 0301 	add.w	r3, fp, #1
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f43f ace2 	beq.w	80055bc <_dtoa_r+0xa4>
 8005bf8:	601d      	str	r5, [r3, #0]
 8005bfa:	e4df      	b.n	80055bc <_dtoa_r+0xa4>
 8005bfc:	465f      	mov	r7, fp
 8005bfe:	462b      	mov	r3, r5
 8005c00:	461d      	mov	r5, r3
 8005c02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c06:	2a39      	cmp	r2, #57	; 0x39
 8005c08:	d106      	bne.n	8005c18 <_dtoa_r+0x700>
 8005c0a:	9a00      	ldr	r2, [sp, #0]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d1f7      	bne.n	8005c00 <_dtoa_r+0x6e8>
 8005c10:	9900      	ldr	r1, [sp, #0]
 8005c12:	2230      	movs	r2, #48	; 0x30
 8005c14:	3701      	adds	r7, #1
 8005c16:	700a      	strb	r2, [r1, #0]
 8005c18:	781a      	ldrb	r2, [r3, #0]
 8005c1a:	3201      	adds	r2, #1
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e790      	b.n	8005b42 <_dtoa_r+0x62a>
 8005c20:	4ba3      	ldr	r3, [pc, #652]	; (8005eb0 <_dtoa_r+0x998>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	f7fa fce8 	bl	80005f8 <__aeabi_dmul>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	460f      	mov	r7, r1
 8005c30:	f7fa ff4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d09e      	beq.n	8005b76 <_dtoa_r+0x65e>
 8005c38:	e7d0      	b.n	8005bdc <_dtoa_r+0x6c4>
 8005c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	f000 80ca 	beq.w	8005dd6 <_dtoa_r+0x8be>
 8005c42:	9a07      	ldr	r2, [sp, #28]
 8005c44:	2a01      	cmp	r2, #1
 8005c46:	f300 80ad 	bgt.w	8005da4 <_dtoa_r+0x88c>
 8005c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	f000 80a5 	beq.w	8005d9c <_dtoa_r+0x884>
 8005c52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c56:	9e08      	ldr	r6, [sp, #32]
 8005c58:	9d05      	ldr	r5, [sp, #20]
 8005c5a:	9a05      	ldr	r2, [sp, #20]
 8005c5c:	441a      	add	r2, r3
 8005c5e:	9205      	str	r2, [sp, #20]
 8005c60:	9a06      	ldr	r2, [sp, #24]
 8005c62:	2101      	movs	r1, #1
 8005c64:	441a      	add	r2, r3
 8005c66:	4620      	mov	r0, r4
 8005c68:	9206      	str	r2, [sp, #24]
 8005c6a:	f000 fb89 	bl	8006380 <__i2b>
 8005c6e:	4607      	mov	r7, r0
 8005c70:	b165      	cbz	r5, 8005c8c <_dtoa_r+0x774>
 8005c72:	9b06      	ldr	r3, [sp, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd09      	ble.n	8005c8c <_dtoa_r+0x774>
 8005c78:	42ab      	cmp	r3, r5
 8005c7a:	9a05      	ldr	r2, [sp, #20]
 8005c7c:	bfa8      	it	ge
 8005c7e:	462b      	movge	r3, r5
 8005c80:	1ad2      	subs	r2, r2, r3
 8005c82:	9205      	str	r2, [sp, #20]
 8005c84:	9a06      	ldr	r2, [sp, #24]
 8005c86:	1aed      	subs	r5, r5, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	9306      	str	r3, [sp, #24]
 8005c8c:	9b08      	ldr	r3, [sp, #32]
 8005c8e:	b1f3      	cbz	r3, 8005cce <_dtoa_r+0x7b6>
 8005c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 80a3 	beq.w	8005dde <_dtoa_r+0x8c6>
 8005c98:	2e00      	cmp	r6, #0
 8005c9a:	dd10      	ble.n	8005cbe <_dtoa_r+0x7a6>
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	4632      	mov	r2, r6
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f000 fc2d 	bl	8006500 <__pow5mult>
 8005ca6:	4652      	mov	r2, sl
 8005ca8:	4601      	mov	r1, r0
 8005caa:	4607      	mov	r7, r0
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fb7d 	bl	80063ac <__multiply>
 8005cb2:	4651      	mov	r1, sl
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 faac 	bl	8006214 <_Bfree>
 8005cbc:	46c2      	mov	sl, r8
 8005cbe:	9b08      	ldr	r3, [sp, #32]
 8005cc0:	1b9a      	subs	r2, r3, r6
 8005cc2:	d004      	beq.n	8005cce <_dtoa_r+0x7b6>
 8005cc4:	4651      	mov	r1, sl
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f000 fc1a 	bl	8006500 <__pow5mult>
 8005ccc:	4682      	mov	sl, r0
 8005cce:	2101      	movs	r1, #1
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fb55 	bl	8006380 <__i2b>
 8005cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	4606      	mov	r6, r0
 8005cdc:	f340 8081 	ble.w	8005de2 <_dtoa_r+0x8ca>
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	4601      	mov	r1, r0
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fc0b 	bl	8006500 <__pow5mult>
 8005cea:	9b07      	ldr	r3, [sp, #28]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	4606      	mov	r6, r0
 8005cf0:	dd7a      	ble.n	8005de8 <_dtoa_r+0x8d0>
 8005cf2:	f04f 0800 	mov.w	r8, #0
 8005cf6:	6933      	ldr	r3, [r6, #16]
 8005cf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005cfc:	6918      	ldr	r0, [r3, #16]
 8005cfe:	f000 faf1 	bl	80062e4 <__hi0bits>
 8005d02:	f1c0 0020 	rsb	r0, r0, #32
 8005d06:	9b06      	ldr	r3, [sp, #24]
 8005d08:	4418      	add	r0, r3
 8005d0a:	f010 001f 	ands.w	r0, r0, #31
 8005d0e:	f000 8094 	beq.w	8005e3a <_dtoa_r+0x922>
 8005d12:	f1c0 0320 	rsb	r3, r0, #32
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	f340 8085 	ble.w	8005e26 <_dtoa_r+0x90e>
 8005d1c:	9b05      	ldr	r3, [sp, #20]
 8005d1e:	f1c0 001c 	rsb	r0, r0, #28
 8005d22:	4403      	add	r3, r0
 8005d24:	9305      	str	r3, [sp, #20]
 8005d26:	9b06      	ldr	r3, [sp, #24]
 8005d28:	4403      	add	r3, r0
 8005d2a:	4405      	add	r5, r0
 8005d2c:	9306      	str	r3, [sp, #24]
 8005d2e:	9b05      	ldr	r3, [sp, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	dd05      	ble.n	8005d40 <_dtoa_r+0x828>
 8005d34:	4651      	mov	r1, sl
 8005d36:	461a      	mov	r2, r3
 8005d38:	4620      	mov	r0, r4
 8005d3a:	f000 fc3b 	bl	80065b4 <__lshift>
 8005d3e:	4682      	mov	sl, r0
 8005d40:	9b06      	ldr	r3, [sp, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	dd05      	ble.n	8005d52 <_dtoa_r+0x83a>
 8005d46:	4631      	mov	r1, r6
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 fc32 	bl	80065b4 <__lshift>
 8005d50:	4606      	mov	r6, r0
 8005d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d072      	beq.n	8005e3e <_dtoa_r+0x926>
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	f000 fc96 	bl	800668c <__mcmp>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	da6c      	bge.n	8005e3e <_dtoa_r+0x926>
 8005d64:	2300      	movs	r3, #0
 8005d66:	4651      	mov	r1, sl
 8005d68:	220a      	movs	r2, #10
 8005d6a:	4620      	mov	r0, r4
 8005d6c:	f000 fa74 	bl	8006258 <__multadd>
 8005d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d76:	4682      	mov	sl, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 81b0 	beq.w	80060de <_dtoa_r+0xbc6>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4639      	mov	r1, r7
 8005d82:	220a      	movs	r2, #10
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 fa67 	bl	8006258 <__multadd>
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	4607      	mov	r7, r0
 8005d90:	f300 8096 	bgt.w	8005ec0 <_dtoa_r+0x9a8>
 8005d94:	9b07      	ldr	r3, [sp, #28]
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	dc59      	bgt.n	8005e4e <_dtoa_r+0x936>
 8005d9a:	e091      	b.n	8005ec0 <_dtoa_r+0x9a8>
 8005d9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005da2:	e758      	b.n	8005c56 <_dtoa_r+0x73e>
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	1e5e      	subs	r6, r3, #1
 8005da8:	9b08      	ldr	r3, [sp, #32]
 8005daa:	42b3      	cmp	r3, r6
 8005dac:	bfbf      	itttt	lt
 8005dae:	9b08      	ldrlt	r3, [sp, #32]
 8005db0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005db2:	9608      	strlt	r6, [sp, #32]
 8005db4:	1af3      	sublt	r3, r6, r3
 8005db6:	bfb4      	ite	lt
 8005db8:	18d2      	addlt	r2, r2, r3
 8005dba:	1b9e      	subge	r6, r3, r6
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	bfbc      	itt	lt
 8005dc0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005dc2:	2600      	movlt	r6, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bfb7      	itett	lt
 8005dc8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005dcc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005dd0:	1a9d      	sublt	r5, r3, r2
 8005dd2:	2300      	movlt	r3, #0
 8005dd4:	e741      	b.n	8005c5a <_dtoa_r+0x742>
 8005dd6:	9e08      	ldr	r6, [sp, #32]
 8005dd8:	9d05      	ldr	r5, [sp, #20]
 8005dda:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ddc:	e748      	b.n	8005c70 <_dtoa_r+0x758>
 8005dde:	9a08      	ldr	r2, [sp, #32]
 8005de0:	e770      	b.n	8005cc4 <_dtoa_r+0x7ac>
 8005de2:	9b07      	ldr	r3, [sp, #28]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	dc19      	bgt.n	8005e1c <_dtoa_r+0x904>
 8005de8:	9b02      	ldr	r3, [sp, #8]
 8005dea:	b9bb      	cbnz	r3, 8005e1c <_dtoa_r+0x904>
 8005dec:	9b03      	ldr	r3, [sp, #12]
 8005dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df2:	b99b      	cbnz	r3, 8005e1c <_dtoa_r+0x904>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	0d1b      	lsrs	r3, r3, #20
 8005dfc:	051b      	lsls	r3, r3, #20
 8005dfe:	b183      	cbz	r3, 8005e22 <_dtoa_r+0x90a>
 8005e00:	9b05      	ldr	r3, [sp, #20]
 8005e02:	3301      	adds	r3, #1
 8005e04:	9305      	str	r3, [sp, #20]
 8005e06:	9b06      	ldr	r3, [sp, #24]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	9306      	str	r3, [sp, #24]
 8005e0c:	f04f 0801 	mov.w	r8, #1
 8005e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f47f af6f 	bne.w	8005cf6 <_dtoa_r+0x7de>
 8005e18:	2001      	movs	r0, #1
 8005e1a:	e774      	b.n	8005d06 <_dtoa_r+0x7ee>
 8005e1c:	f04f 0800 	mov.w	r8, #0
 8005e20:	e7f6      	b.n	8005e10 <_dtoa_r+0x8f8>
 8005e22:	4698      	mov	r8, r3
 8005e24:	e7f4      	b.n	8005e10 <_dtoa_r+0x8f8>
 8005e26:	d082      	beq.n	8005d2e <_dtoa_r+0x816>
 8005e28:	9a05      	ldr	r2, [sp, #20]
 8005e2a:	331c      	adds	r3, #28
 8005e2c:	441a      	add	r2, r3
 8005e2e:	9205      	str	r2, [sp, #20]
 8005e30:	9a06      	ldr	r2, [sp, #24]
 8005e32:	441a      	add	r2, r3
 8005e34:	441d      	add	r5, r3
 8005e36:	9206      	str	r2, [sp, #24]
 8005e38:	e779      	b.n	8005d2e <_dtoa_r+0x816>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	e7f4      	b.n	8005e28 <_dtoa_r+0x910>
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	dc37      	bgt.n	8005eb4 <_dtoa_r+0x99c>
 8005e44:	9b07      	ldr	r3, [sp, #28]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	dd34      	ble.n	8005eb4 <_dtoa_r+0x99c>
 8005e4a:	9b04      	ldr	r3, [sp, #16]
 8005e4c:	9301      	str	r3, [sp, #4]
 8005e4e:	9b01      	ldr	r3, [sp, #4]
 8005e50:	b963      	cbnz	r3, 8005e6c <_dtoa_r+0x954>
 8005e52:	4631      	mov	r1, r6
 8005e54:	2205      	movs	r2, #5
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 f9fe 	bl	8006258 <__multadd>
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	4606      	mov	r6, r0
 8005e60:	4650      	mov	r0, sl
 8005e62:	f000 fc13 	bl	800668c <__mcmp>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f73f adbb 	bgt.w	80059e2 <_dtoa_r+0x4ca>
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e6e:	9d00      	ldr	r5, [sp, #0]
 8005e70:	ea6f 0b03 	mvn.w	fp, r3
 8005e74:	f04f 0800 	mov.w	r8, #0
 8005e78:	4631      	mov	r1, r6
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 f9ca 	bl	8006214 <_Bfree>
 8005e80:	2f00      	cmp	r7, #0
 8005e82:	f43f aeab 	beq.w	8005bdc <_dtoa_r+0x6c4>
 8005e86:	f1b8 0f00 	cmp.w	r8, #0
 8005e8a:	d005      	beq.n	8005e98 <_dtoa_r+0x980>
 8005e8c:	45b8      	cmp	r8, r7
 8005e8e:	d003      	beq.n	8005e98 <_dtoa_r+0x980>
 8005e90:	4641      	mov	r1, r8
 8005e92:	4620      	mov	r0, r4
 8005e94:	f000 f9be 	bl	8006214 <_Bfree>
 8005e98:	4639      	mov	r1, r7
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 f9ba 	bl	8006214 <_Bfree>
 8005ea0:	e69c      	b.n	8005bdc <_dtoa_r+0x6c4>
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	4637      	mov	r7, r6
 8005ea6:	e7e1      	b.n	8005e6c <_dtoa_r+0x954>
 8005ea8:	46bb      	mov	fp, r7
 8005eaa:	4637      	mov	r7, r6
 8005eac:	e599      	b.n	80059e2 <_dtoa_r+0x4ca>
 8005eae:	bf00      	nop
 8005eb0:	40240000 	.word	0x40240000
 8005eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80c8 	beq.w	800604c <_dtoa_r+0xb34>
 8005ebc:	9b04      	ldr	r3, [sp, #16]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	dd05      	ble.n	8005ed0 <_dtoa_r+0x9b8>
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	462a      	mov	r2, r5
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f000 fb73 	bl	80065b4 <__lshift>
 8005ece:	4607      	mov	r7, r0
 8005ed0:	f1b8 0f00 	cmp.w	r8, #0
 8005ed4:	d05b      	beq.n	8005f8e <_dtoa_r+0xa76>
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f000 f95b 	bl	8006194 <_Balloc>
 8005ede:	4605      	mov	r5, r0
 8005ee0:	b928      	cbnz	r0, 8005eee <_dtoa_r+0x9d6>
 8005ee2:	4b83      	ldr	r3, [pc, #524]	; (80060f0 <_dtoa_r+0xbd8>)
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005eea:	f7ff bb2e 	b.w	800554a <_dtoa_r+0x32>
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	3202      	adds	r2, #2
 8005ef2:	0092      	lsls	r2, r2, #2
 8005ef4:	f107 010c 	add.w	r1, r7, #12
 8005ef8:	300c      	adds	r0, #12
 8005efa:	f000 fee7 	bl	8006ccc <memcpy>
 8005efe:	2201      	movs	r2, #1
 8005f00:	4629      	mov	r1, r5
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 fb56 	bl	80065b4 <__lshift>
 8005f08:	9b00      	ldr	r3, [sp, #0]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	9304      	str	r3, [sp, #16]
 8005f0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f12:	4413      	add	r3, r2
 8005f14:	9308      	str	r3, [sp, #32]
 8005f16:	9b02      	ldr	r3, [sp, #8]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	46b8      	mov	r8, r7
 8005f1e:	9306      	str	r3, [sp, #24]
 8005f20:	4607      	mov	r7, r0
 8005f22:	9b04      	ldr	r3, [sp, #16]
 8005f24:	4631      	mov	r1, r6
 8005f26:	3b01      	subs	r3, #1
 8005f28:	4650      	mov	r0, sl
 8005f2a:	9301      	str	r3, [sp, #4]
 8005f2c:	f7ff fa69 	bl	8005402 <quorem>
 8005f30:	4641      	mov	r1, r8
 8005f32:	9002      	str	r0, [sp, #8]
 8005f34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f38:	4650      	mov	r0, sl
 8005f3a:	f000 fba7 	bl	800668c <__mcmp>
 8005f3e:	463a      	mov	r2, r7
 8005f40:	9005      	str	r0, [sp, #20]
 8005f42:	4631      	mov	r1, r6
 8005f44:	4620      	mov	r0, r4
 8005f46:	f000 fbbd 	bl	80066c4 <__mdiff>
 8005f4a:	68c2      	ldr	r2, [r0, #12]
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	bb02      	cbnz	r2, 8005f92 <_dtoa_r+0xa7a>
 8005f50:	4601      	mov	r1, r0
 8005f52:	4650      	mov	r0, sl
 8005f54:	f000 fb9a 	bl	800668c <__mcmp>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005f60:	f000 f958 	bl	8006214 <_Bfree>
 8005f64:	9b07      	ldr	r3, [sp, #28]
 8005f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f68:	9d04      	ldr	r5, [sp, #16]
 8005f6a:	ea43 0102 	orr.w	r1, r3, r2
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	4319      	orrs	r1, r3
 8005f72:	d110      	bne.n	8005f96 <_dtoa_r+0xa7e>
 8005f74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f78:	d029      	beq.n	8005fce <_dtoa_r+0xab6>
 8005f7a:	9b05      	ldr	r3, [sp, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dd02      	ble.n	8005f86 <_dtoa_r+0xa6e>
 8005f80:	9b02      	ldr	r3, [sp, #8]
 8005f82:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005f86:	9b01      	ldr	r3, [sp, #4]
 8005f88:	f883 9000 	strb.w	r9, [r3]
 8005f8c:	e774      	b.n	8005e78 <_dtoa_r+0x960>
 8005f8e:	4638      	mov	r0, r7
 8005f90:	e7ba      	b.n	8005f08 <_dtoa_r+0x9f0>
 8005f92:	2201      	movs	r2, #1
 8005f94:	e7e1      	b.n	8005f5a <_dtoa_r+0xa42>
 8005f96:	9b05      	ldr	r3, [sp, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	db04      	blt.n	8005fa6 <_dtoa_r+0xa8e>
 8005f9c:	9907      	ldr	r1, [sp, #28]
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	9906      	ldr	r1, [sp, #24]
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	d120      	bne.n	8005fe8 <_dtoa_r+0xad0>
 8005fa6:	2a00      	cmp	r2, #0
 8005fa8:	dded      	ble.n	8005f86 <_dtoa_r+0xa6e>
 8005faa:	4651      	mov	r1, sl
 8005fac:	2201      	movs	r2, #1
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 fb00 	bl	80065b4 <__lshift>
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4682      	mov	sl, r0
 8005fb8:	f000 fb68 	bl	800668c <__mcmp>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	dc03      	bgt.n	8005fc8 <_dtoa_r+0xab0>
 8005fc0:	d1e1      	bne.n	8005f86 <_dtoa_r+0xa6e>
 8005fc2:	f019 0f01 	tst.w	r9, #1
 8005fc6:	d0de      	beq.n	8005f86 <_dtoa_r+0xa6e>
 8005fc8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fcc:	d1d8      	bne.n	8005f80 <_dtoa_r+0xa68>
 8005fce:	9a01      	ldr	r2, [sp, #4]
 8005fd0:	2339      	movs	r3, #57	; 0x39
 8005fd2:	7013      	strb	r3, [r2, #0]
 8005fd4:	462b      	mov	r3, r5
 8005fd6:	461d      	mov	r5, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fde:	2a39      	cmp	r2, #57	; 0x39
 8005fe0:	d06c      	beq.n	80060bc <_dtoa_r+0xba4>
 8005fe2:	3201      	adds	r2, #1
 8005fe4:	701a      	strb	r2, [r3, #0]
 8005fe6:	e747      	b.n	8005e78 <_dtoa_r+0x960>
 8005fe8:	2a00      	cmp	r2, #0
 8005fea:	dd07      	ble.n	8005ffc <_dtoa_r+0xae4>
 8005fec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ff0:	d0ed      	beq.n	8005fce <_dtoa_r+0xab6>
 8005ff2:	9a01      	ldr	r2, [sp, #4]
 8005ff4:	f109 0301 	add.w	r3, r9, #1
 8005ff8:	7013      	strb	r3, [r2, #0]
 8005ffa:	e73d      	b.n	8005e78 <_dtoa_r+0x960>
 8005ffc:	9b04      	ldr	r3, [sp, #16]
 8005ffe:	9a08      	ldr	r2, [sp, #32]
 8006000:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006004:	4293      	cmp	r3, r2
 8006006:	d043      	beq.n	8006090 <_dtoa_r+0xb78>
 8006008:	4651      	mov	r1, sl
 800600a:	2300      	movs	r3, #0
 800600c:	220a      	movs	r2, #10
 800600e:	4620      	mov	r0, r4
 8006010:	f000 f922 	bl	8006258 <__multadd>
 8006014:	45b8      	cmp	r8, r7
 8006016:	4682      	mov	sl, r0
 8006018:	f04f 0300 	mov.w	r3, #0
 800601c:	f04f 020a 	mov.w	r2, #10
 8006020:	4641      	mov	r1, r8
 8006022:	4620      	mov	r0, r4
 8006024:	d107      	bne.n	8006036 <_dtoa_r+0xb1e>
 8006026:	f000 f917 	bl	8006258 <__multadd>
 800602a:	4680      	mov	r8, r0
 800602c:	4607      	mov	r7, r0
 800602e:	9b04      	ldr	r3, [sp, #16]
 8006030:	3301      	adds	r3, #1
 8006032:	9304      	str	r3, [sp, #16]
 8006034:	e775      	b.n	8005f22 <_dtoa_r+0xa0a>
 8006036:	f000 f90f 	bl	8006258 <__multadd>
 800603a:	4639      	mov	r1, r7
 800603c:	4680      	mov	r8, r0
 800603e:	2300      	movs	r3, #0
 8006040:	220a      	movs	r2, #10
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f908 	bl	8006258 <__multadd>
 8006048:	4607      	mov	r7, r0
 800604a:	e7f0      	b.n	800602e <_dtoa_r+0xb16>
 800604c:	9b04      	ldr	r3, [sp, #16]
 800604e:	9301      	str	r3, [sp, #4]
 8006050:	9d00      	ldr	r5, [sp, #0]
 8006052:	4631      	mov	r1, r6
 8006054:	4650      	mov	r0, sl
 8006056:	f7ff f9d4 	bl	8005402 <quorem>
 800605a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800605e:	9b00      	ldr	r3, [sp, #0]
 8006060:	f805 9b01 	strb.w	r9, [r5], #1
 8006064:	1aea      	subs	r2, r5, r3
 8006066:	9b01      	ldr	r3, [sp, #4]
 8006068:	4293      	cmp	r3, r2
 800606a:	dd07      	ble.n	800607c <_dtoa_r+0xb64>
 800606c:	4651      	mov	r1, sl
 800606e:	2300      	movs	r3, #0
 8006070:	220a      	movs	r2, #10
 8006072:	4620      	mov	r0, r4
 8006074:	f000 f8f0 	bl	8006258 <__multadd>
 8006078:	4682      	mov	sl, r0
 800607a:	e7ea      	b.n	8006052 <_dtoa_r+0xb3a>
 800607c:	9b01      	ldr	r3, [sp, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	bfc8      	it	gt
 8006082:	461d      	movgt	r5, r3
 8006084:	9b00      	ldr	r3, [sp, #0]
 8006086:	bfd8      	it	le
 8006088:	2501      	movle	r5, #1
 800608a:	441d      	add	r5, r3
 800608c:	f04f 0800 	mov.w	r8, #0
 8006090:	4651      	mov	r1, sl
 8006092:	2201      	movs	r2, #1
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fa8d 	bl	80065b4 <__lshift>
 800609a:	4631      	mov	r1, r6
 800609c:	4682      	mov	sl, r0
 800609e:	f000 faf5 	bl	800668c <__mcmp>
 80060a2:	2800      	cmp	r0, #0
 80060a4:	dc96      	bgt.n	8005fd4 <_dtoa_r+0xabc>
 80060a6:	d102      	bne.n	80060ae <_dtoa_r+0xb96>
 80060a8:	f019 0f01 	tst.w	r9, #1
 80060ac:	d192      	bne.n	8005fd4 <_dtoa_r+0xabc>
 80060ae:	462b      	mov	r3, r5
 80060b0:	461d      	mov	r5, r3
 80060b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060b6:	2a30      	cmp	r2, #48	; 0x30
 80060b8:	d0fa      	beq.n	80060b0 <_dtoa_r+0xb98>
 80060ba:	e6dd      	b.n	8005e78 <_dtoa_r+0x960>
 80060bc:	9a00      	ldr	r2, [sp, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d189      	bne.n	8005fd6 <_dtoa_r+0xabe>
 80060c2:	f10b 0b01 	add.w	fp, fp, #1
 80060c6:	2331      	movs	r3, #49	; 0x31
 80060c8:	e796      	b.n	8005ff8 <_dtoa_r+0xae0>
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <_dtoa_r+0xbdc>)
 80060cc:	f7ff ba99 	b.w	8005602 <_dtoa_r+0xea>
 80060d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f47f aa6d 	bne.w	80055b2 <_dtoa_r+0x9a>
 80060d8:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <_dtoa_r+0xbe0>)
 80060da:	f7ff ba92 	b.w	8005602 <_dtoa_r+0xea>
 80060de:	9b01      	ldr	r3, [sp, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	dcb5      	bgt.n	8006050 <_dtoa_r+0xb38>
 80060e4:	9b07      	ldr	r3, [sp, #28]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	f73f aeb1 	bgt.w	8005e4e <_dtoa_r+0x936>
 80060ec:	e7b0      	b.n	8006050 <_dtoa_r+0xb38>
 80060ee:	bf00      	nop
 80060f0:	0800774c 	.word	0x0800774c
 80060f4:	080076ac 	.word	0x080076ac
 80060f8:	080076d0 	.word	0x080076d0

080060fc <_free_r>:
 80060fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060fe:	2900      	cmp	r1, #0
 8006100:	d044      	beq.n	800618c <_free_r+0x90>
 8006102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006106:	9001      	str	r0, [sp, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f1a1 0404 	sub.w	r4, r1, #4
 800610e:	bfb8      	it	lt
 8006110:	18e4      	addlt	r4, r4, r3
 8006112:	f7fe faf7 	bl	8004704 <__malloc_lock>
 8006116:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <_free_r+0x94>)
 8006118:	9801      	ldr	r0, [sp, #4]
 800611a:	6813      	ldr	r3, [r2, #0]
 800611c:	b933      	cbnz	r3, 800612c <_free_r+0x30>
 800611e:	6063      	str	r3, [r4, #4]
 8006120:	6014      	str	r4, [r2, #0]
 8006122:	b003      	add	sp, #12
 8006124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006128:	f7fe baf2 	b.w	8004710 <__malloc_unlock>
 800612c:	42a3      	cmp	r3, r4
 800612e:	d908      	bls.n	8006142 <_free_r+0x46>
 8006130:	6825      	ldr	r5, [r4, #0]
 8006132:	1961      	adds	r1, r4, r5
 8006134:	428b      	cmp	r3, r1
 8006136:	bf01      	itttt	eq
 8006138:	6819      	ldreq	r1, [r3, #0]
 800613a:	685b      	ldreq	r3, [r3, #4]
 800613c:	1949      	addeq	r1, r1, r5
 800613e:	6021      	streq	r1, [r4, #0]
 8006140:	e7ed      	b.n	800611e <_free_r+0x22>
 8006142:	461a      	mov	r2, r3
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	b10b      	cbz	r3, 800614c <_free_r+0x50>
 8006148:	42a3      	cmp	r3, r4
 800614a:	d9fa      	bls.n	8006142 <_free_r+0x46>
 800614c:	6811      	ldr	r1, [r2, #0]
 800614e:	1855      	adds	r5, r2, r1
 8006150:	42a5      	cmp	r5, r4
 8006152:	d10b      	bne.n	800616c <_free_r+0x70>
 8006154:	6824      	ldr	r4, [r4, #0]
 8006156:	4421      	add	r1, r4
 8006158:	1854      	adds	r4, r2, r1
 800615a:	42a3      	cmp	r3, r4
 800615c:	6011      	str	r1, [r2, #0]
 800615e:	d1e0      	bne.n	8006122 <_free_r+0x26>
 8006160:	681c      	ldr	r4, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	6053      	str	r3, [r2, #4]
 8006166:	440c      	add	r4, r1
 8006168:	6014      	str	r4, [r2, #0]
 800616a:	e7da      	b.n	8006122 <_free_r+0x26>
 800616c:	d902      	bls.n	8006174 <_free_r+0x78>
 800616e:	230c      	movs	r3, #12
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	e7d6      	b.n	8006122 <_free_r+0x26>
 8006174:	6825      	ldr	r5, [r4, #0]
 8006176:	1961      	adds	r1, r4, r5
 8006178:	428b      	cmp	r3, r1
 800617a:	bf04      	itt	eq
 800617c:	6819      	ldreq	r1, [r3, #0]
 800617e:	685b      	ldreq	r3, [r3, #4]
 8006180:	6063      	str	r3, [r4, #4]
 8006182:	bf04      	itt	eq
 8006184:	1949      	addeq	r1, r1, r5
 8006186:	6021      	streq	r1, [r4, #0]
 8006188:	6054      	str	r4, [r2, #4]
 800618a:	e7ca      	b.n	8006122 <_free_r+0x26>
 800618c:	b003      	add	sp, #12
 800618e:	bd30      	pop	{r4, r5, pc}
 8006190:	20000888 	.word	0x20000888

08006194 <_Balloc>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	69c6      	ldr	r6, [r0, #28]
 8006198:	4604      	mov	r4, r0
 800619a:	460d      	mov	r5, r1
 800619c:	b976      	cbnz	r6, 80061bc <_Balloc+0x28>
 800619e:	2010      	movs	r0, #16
 80061a0:	f7fe fa00 	bl	80045a4 <malloc>
 80061a4:	4602      	mov	r2, r0
 80061a6:	61e0      	str	r0, [r4, #28]
 80061a8:	b920      	cbnz	r0, 80061b4 <_Balloc+0x20>
 80061aa:	4b18      	ldr	r3, [pc, #96]	; (800620c <_Balloc+0x78>)
 80061ac:	4818      	ldr	r0, [pc, #96]	; (8006210 <_Balloc+0x7c>)
 80061ae:	216b      	movs	r1, #107	; 0x6b
 80061b0:	f000 fd9a 	bl	8006ce8 <__assert_func>
 80061b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061b8:	6006      	str	r6, [r0, #0]
 80061ba:	60c6      	str	r6, [r0, #12]
 80061bc:	69e6      	ldr	r6, [r4, #28]
 80061be:	68f3      	ldr	r3, [r6, #12]
 80061c0:	b183      	cbz	r3, 80061e4 <_Balloc+0x50>
 80061c2:	69e3      	ldr	r3, [r4, #28]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061ca:	b9b8      	cbnz	r0, 80061fc <_Balloc+0x68>
 80061cc:	2101      	movs	r1, #1
 80061ce:	fa01 f605 	lsl.w	r6, r1, r5
 80061d2:	1d72      	adds	r2, r6, #5
 80061d4:	0092      	lsls	r2, r2, #2
 80061d6:	4620      	mov	r0, r4
 80061d8:	f000 fda4 	bl	8006d24 <_calloc_r>
 80061dc:	b160      	cbz	r0, 80061f8 <_Balloc+0x64>
 80061de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061e2:	e00e      	b.n	8006202 <_Balloc+0x6e>
 80061e4:	2221      	movs	r2, #33	; 0x21
 80061e6:	2104      	movs	r1, #4
 80061e8:	4620      	mov	r0, r4
 80061ea:	f000 fd9b 	bl	8006d24 <_calloc_r>
 80061ee:	69e3      	ldr	r3, [r4, #28]
 80061f0:	60f0      	str	r0, [r6, #12]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1e4      	bne.n	80061c2 <_Balloc+0x2e>
 80061f8:	2000      	movs	r0, #0
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	6802      	ldr	r2, [r0, #0]
 80061fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006202:	2300      	movs	r3, #0
 8006204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006208:	e7f7      	b.n	80061fa <_Balloc+0x66>
 800620a:	bf00      	nop
 800620c:	080076dd 	.word	0x080076dd
 8006210:	0800775d 	.word	0x0800775d

08006214 <_Bfree>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	69c6      	ldr	r6, [r0, #28]
 8006218:	4605      	mov	r5, r0
 800621a:	460c      	mov	r4, r1
 800621c:	b976      	cbnz	r6, 800623c <_Bfree+0x28>
 800621e:	2010      	movs	r0, #16
 8006220:	f7fe f9c0 	bl	80045a4 <malloc>
 8006224:	4602      	mov	r2, r0
 8006226:	61e8      	str	r0, [r5, #28]
 8006228:	b920      	cbnz	r0, 8006234 <_Bfree+0x20>
 800622a:	4b09      	ldr	r3, [pc, #36]	; (8006250 <_Bfree+0x3c>)
 800622c:	4809      	ldr	r0, [pc, #36]	; (8006254 <_Bfree+0x40>)
 800622e:	218f      	movs	r1, #143	; 0x8f
 8006230:	f000 fd5a 	bl	8006ce8 <__assert_func>
 8006234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006238:	6006      	str	r6, [r0, #0]
 800623a:	60c6      	str	r6, [r0, #12]
 800623c:	b13c      	cbz	r4, 800624e <_Bfree+0x3a>
 800623e:	69eb      	ldr	r3, [r5, #28]
 8006240:	6862      	ldr	r2, [r4, #4]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006248:	6021      	str	r1, [r4, #0]
 800624a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	080076dd 	.word	0x080076dd
 8006254:	0800775d 	.word	0x0800775d

08006258 <__multadd>:
 8006258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800625c:	690d      	ldr	r5, [r1, #16]
 800625e:	4607      	mov	r7, r0
 8006260:	460c      	mov	r4, r1
 8006262:	461e      	mov	r6, r3
 8006264:	f101 0c14 	add.w	ip, r1, #20
 8006268:	2000      	movs	r0, #0
 800626a:	f8dc 3000 	ldr.w	r3, [ip]
 800626e:	b299      	uxth	r1, r3
 8006270:	fb02 6101 	mla	r1, r2, r1, r6
 8006274:	0c1e      	lsrs	r6, r3, #16
 8006276:	0c0b      	lsrs	r3, r1, #16
 8006278:	fb02 3306 	mla	r3, r2, r6, r3
 800627c:	b289      	uxth	r1, r1
 800627e:	3001      	adds	r0, #1
 8006280:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006284:	4285      	cmp	r5, r0
 8006286:	f84c 1b04 	str.w	r1, [ip], #4
 800628a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800628e:	dcec      	bgt.n	800626a <__multadd+0x12>
 8006290:	b30e      	cbz	r6, 80062d6 <__multadd+0x7e>
 8006292:	68a3      	ldr	r3, [r4, #8]
 8006294:	42ab      	cmp	r3, r5
 8006296:	dc19      	bgt.n	80062cc <__multadd+0x74>
 8006298:	6861      	ldr	r1, [r4, #4]
 800629a:	4638      	mov	r0, r7
 800629c:	3101      	adds	r1, #1
 800629e:	f7ff ff79 	bl	8006194 <_Balloc>
 80062a2:	4680      	mov	r8, r0
 80062a4:	b928      	cbnz	r0, 80062b2 <__multadd+0x5a>
 80062a6:	4602      	mov	r2, r0
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <__multadd+0x84>)
 80062aa:	480d      	ldr	r0, [pc, #52]	; (80062e0 <__multadd+0x88>)
 80062ac:	21ba      	movs	r1, #186	; 0xba
 80062ae:	f000 fd1b 	bl	8006ce8 <__assert_func>
 80062b2:	6922      	ldr	r2, [r4, #16]
 80062b4:	3202      	adds	r2, #2
 80062b6:	f104 010c 	add.w	r1, r4, #12
 80062ba:	0092      	lsls	r2, r2, #2
 80062bc:	300c      	adds	r0, #12
 80062be:	f000 fd05 	bl	8006ccc <memcpy>
 80062c2:	4621      	mov	r1, r4
 80062c4:	4638      	mov	r0, r7
 80062c6:	f7ff ffa5 	bl	8006214 <_Bfree>
 80062ca:	4644      	mov	r4, r8
 80062cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062d0:	3501      	adds	r5, #1
 80062d2:	615e      	str	r6, [r3, #20]
 80062d4:	6125      	str	r5, [r4, #16]
 80062d6:	4620      	mov	r0, r4
 80062d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062dc:	0800774c 	.word	0x0800774c
 80062e0:	0800775d 	.word	0x0800775d

080062e4 <__hi0bits>:
 80062e4:	0c03      	lsrs	r3, r0, #16
 80062e6:	041b      	lsls	r3, r3, #16
 80062e8:	b9d3      	cbnz	r3, 8006320 <__hi0bits+0x3c>
 80062ea:	0400      	lsls	r0, r0, #16
 80062ec:	2310      	movs	r3, #16
 80062ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80062f2:	bf04      	itt	eq
 80062f4:	0200      	lsleq	r0, r0, #8
 80062f6:	3308      	addeq	r3, #8
 80062f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80062fc:	bf04      	itt	eq
 80062fe:	0100      	lsleq	r0, r0, #4
 8006300:	3304      	addeq	r3, #4
 8006302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006306:	bf04      	itt	eq
 8006308:	0080      	lsleq	r0, r0, #2
 800630a:	3302      	addeq	r3, #2
 800630c:	2800      	cmp	r0, #0
 800630e:	db05      	blt.n	800631c <__hi0bits+0x38>
 8006310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006314:	f103 0301 	add.w	r3, r3, #1
 8006318:	bf08      	it	eq
 800631a:	2320      	moveq	r3, #32
 800631c:	4618      	mov	r0, r3
 800631e:	4770      	bx	lr
 8006320:	2300      	movs	r3, #0
 8006322:	e7e4      	b.n	80062ee <__hi0bits+0xa>

08006324 <__lo0bits>:
 8006324:	6803      	ldr	r3, [r0, #0]
 8006326:	f013 0207 	ands.w	r2, r3, #7
 800632a:	d00c      	beq.n	8006346 <__lo0bits+0x22>
 800632c:	07d9      	lsls	r1, r3, #31
 800632e:	d422      	bmi.n	8006376 <__lo0bits+0x52>
 8006330:	079a      	lsls	r2, r3, #30
 8006332:	bf49      	itett	mi
 8006334:	085b      	lsrmi	r3, r3, #1
 8006336:	089b      	lsrpl	r3, r3, #2
 8006338:	6003      	strmi	r3, [r0, #0]
 800633a:	2201      	movmi	r2, #1
 800633c:	bf5c      	itt	pl
 800633e:	6003      	strpl	r3, [r0, #0]
 8006340:	2202      	movpl	r2, #2
 8006342:	4610      	mov	r0, r2
 8006344:	4770      	bx	lr
 8006346:	b299      	uxth	r1, r3
 8006348:	b909      	cbnz	r1, 800634e <__lo0bits+0x2a>
 800634a:	0c1b      	lsrs	r3, r3, #16
 800634c:	2210      	movs	r2, #16
 800634e:	b2d9      	uxtb	r1, r3
 8006350:	b909      	cbnz	r1, 8006356 <__lo0bits+0x32>
 8006352:	3208      	adds	r2, #8
 8006354:	0a1b      	lsrs	r3, r3, #8
 8006356:	0719      	lsls	r1, r3, #28
 8006358:	bf04      	itt	eq
 800635a:	091b      	lsreq	r3, r3, #4
 800635c:	3204      	addeq	r2, #4
 800635e:	0799      	lsls	r1, r3, #30
 8006360:	bf04      	itt	eq
 8006362:	089b      	lsreq	r3, r3, #2
 8006364:	3202      	addeq	r2, #2
 8006366:	07d9      	lsls	r1, r3, #31
 8006368:	d403      	bmi.n	8006372 <__lo0bits+0x4e>
 800636a:	085b      	lsrs	r3, r3, #1
 800636c:	f102 0201 	add.w	r2, r2, #1
 8006370:	d003      	beq.n	800637a <__lo0bits+0x56>
 8006372:	6003      	str	r3, [r0, #0]
 8006374:	e7e5      	b.n	8006342 <__lo0bits+0x1e>
 8006376:	2200      	movs	r2, #0
 8006378:	e7e3      	b.n	8006342 <__lo0bits+0x1e>
 800637a:	2220      	movs	r2, #32
 800637c:	e7e1      	b.n	8006342 <__lo0bits+0x1e>
	...

08006380 <__i2b>:
 8006380:	b510      	push	{r4, lr}
 8006382:	460c      	mov	r4, r1
 8006384:	2101      	movs	r1, #1
 8006386:	f7ff ff05 	bl	8006194 <_Balloc>
 800638a:	4602      	mov	r2, r0
 800638c:	b928      	cbnz	r0, 800639a <__i2b+0x1a>
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <__i2b+0x24>)
 8006390:	4805      	ldr	r0, [pc, #20]	; (80063a8 <__i2b+0x28>)
 8006392:	f240 1145 	movw	r1, #325	; 0x145
 8006396:	f000 fca7 	bl	8006ce8 <__assert_func>
 800639a:	2301      	movs	r3, #1
 800639c:	6144      	str	r4, [r0, #20]
 800639e:	6103      	str	r3, [r0, #16]
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	bf00      	nop
 80063a4:	0800774c 	.word	0x0800774c
 80063a8:	0800775d 	.word	0x0800775d

080063ac <__multiply>:
 80063ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b0:	4691      	mov	r9, r2
 80063b2:	690a      	ldr	r2, [r1, #16]
 80063b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	bfb8      	it	lt
 80063bc:	460b      	movlt	r3, r1
 80063be:	460c      	mov	r4, r1
 80063c0:	bfbc      	itt	lt
 80063c2:	464c      	movlt	r4, r9
 80063c4:	4699      	movlt	r9, r3
 80063c6:	6927      	ldr	r7, [r4, #16]
 80063c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063cc:	68a3      	ldr	r3, [r4, #8]
 80063ce:	6861      	ldr	r1, [r4, #4]
 80063d0:	eb07 060a 	add.w	r6, r7, sl
 80063d4:	42b3      	cmp	r3, r6
 80063d6:	b085      	sub	sp, #20
 80063d8:	bfb8      	it	lt
 80063da:	3101      	addlt	r1, #1
 80063dc:	f7ff feda 	bl	8006194 <_Balloc>
 80063e0:	b930      	cbnz	r0, 80063f0 <__multiply+0x44>
 80063e2:	4602      	mov	r2, r0
 80063e4:	4b44      	ldr	r3, [pc, #272]	; (80064f8 <__multiply+0x14c>)
 80063e6:	4845      	ldr	r0, [pc, #276]	; (80064fc <__multiply+0x150>)
 80063e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80063ec:	f000 fc7c 	bl	8006ce8 <__assert_func>
 80063f0:	f100 0514 	add.w	r5, r0, #20
 80063f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063f8:	462b      	mov	r3, r5
 80063fa:	2200      	movs	r2, #0
 80063fc:	4543      	cmp	r3, r8
 80063fe:	d321      	bcc.n	8006444 <__multiply+0x98>
 8006400:	f104 0314 	add.w	r3, r4, #20
 8006404:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006408:	f109 0314 	add.w	r3, r9, #20
 800640c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006410:	9202      	str	r2, [sp, #8]
 8006412:	1b3a      	subs	r2, r7, r4
 8006414:	3a15      	subs	r2, #21
 8006416:	f022 0203 	bic.w	r2, r2, #3
 800641a:	3204      	adds	r2, #4
 800641c:	f104 0115 	add.w	r1, r4, #21
 8006420:	428f      	cmp	r7, r1
 8006422:	bf38      	it	cc
 8006424:	2204      	movcc	r2, #4
 8006426:	9201      	str	r2, [sp, #4]
 8006428:	9a02      	ldr	r2, [sp, #8]
 800642a:	9303      	str	r3, [sp, #12]
 800642c:	429a      	cmp	r2, r3
 800642e:	d80c      	bhi.n	800644a <__multiply+0x9e>
 8006430:	2e00      	cmp	r6, #0
 8006432:	dd03      	ble.n	800643c <__multiply+0x90>
 8006434:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006438:	2b00      	cmp	r3, #0
 800643a:	d05b      	beq.n	80064f4 <__multiply+0x148>
 800643c:	6106      	str	r6, [r0, #16]
 800643e:	b005      	add	sp, #20
 8006440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006444:	f843 2b04 	str.w	r2, [r3], #4
 8006448:	e7d8      	b.n	80063fc <__multiply+0x50>
 800644a:	f8b3 a000 	ldrh.w	sl, [r3]
 800644e:	f1ba 0f00 	cmp.w	sl, #0
 8006452:	d024      	beq.n	800649e <__multiply+0xf2>
 8006454:	f104 0e14 	add.w	lr, r4, #20
 8006458:	46a9      	mov	r9, r5
 800645a:	f04f 0c00 	mov.w	ip, #0
 800645e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006462:	f8d9 1000 	ldr.w	r1, [r9]
 8006466:	fa1f fb82 	uxth.w	fp, r2
 800646a:	b289      	uxth	r1, r1
 800646c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006470:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006474:	f8d9 2000 	ldr.w	r2, [r9]
 8006478:	4461      	add	r1, ip
 800647a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800647e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006482:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006486:	b289      	uxth	r1, r1
 8006488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800648c:	4577      	cmp	r7, lr
 800648e:	f849 1b04 	str.w	r1, [r9], #4
 8006492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006496:	d8e2      	bhi.n	800645e <__multiply+0xb2>
 8006498:	9a01      	ldr	r2, [sp, #4]
 800649a:	f845 c002 	str.w	ip, [r5, r2]
 800649e:	9a03      	ldr	r2, [sp, #12]
 80064a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80064a4:	3304      	adds	r3, #4
 80064a6:	f1b9 0f00 	cmp.w	r9, #0
 80064aa:	d021      	beq.n	80064f0 <__multiply+0x144>
 80064ac:	6829      	ldr	r1, [r5, #0]
 80064ae:	f104 0c14 	add.w	ip, r4, #20
 80064b2:	46ae      	mov	lr, r5
 80064b4:	f04f 0a00 	mov.w	sl, #0
 80064b8:	f8bc b000 	ldrh.w	fp, [ip]
 80064bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80064c0:	fb09 220b 	mla	r2, r9, fp, r2
 80064c4:	4452      	add	r2, sl
 80064c6:	b289      	uxth	r1, r1
 80064c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80064cc:	f84e 1b04 	str.w	r1, [lr], #4
 80064d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80064d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064d8:	f8be 1000 	ldrh.w	r1, [lr]
 80064dc:	fb09 110a 	mla	r1, r9, sl, r1
 80064e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80064e4:	4567      	cmp	r7, ip
 80064e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064ea:	d8e5      	bhi.n	80064b8 <__multiply+0x10c>
 80064ec:	9a01      	ldr	r2, [sp, #4]
 80064ee:	50a9      	str	r1, [r5, r2]
 80064f0:	3504      	adds	r5, #4
 80064f2:	e799      	b.n	8006428 <__multiply+0x7c>
 80064f4:	3e01      	subs	r6, #1
 80064f6:	e79b      	b.n	8006430 <__multiply+0x84>
 80064f8:	0800774c 	.word	0x0800774c
 80064fc:	0800775d 	.word	0x0800775d

08006500 <__pow5mult>:
 8006500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006504:	4615      	mov	r5, r2
 8006506:	f012 0203 	ands.w	r2, r2, #3
 800650a:	4606      	mov	r6, r0
 800650c:	460f      	mov	r7, r1
 800650e:	d007      	beq.n	8006520 <__pow5mult+0x20>
 8006510:	4c25      	ldr	r4, [pc, #148]	; (80065a8 <__pow5mult+0xa8>)
 8006512:	3a01      	subs	r2, #1
 8006514:	2300      	movs	r3, #0
 8006516:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800651a:	f7ff fe9d 	bl	8006258 <__multadd>
 800651e:	4607      	mov	r7, r0
 8006520:	10ad      	asrs	r5, r5, #2
 8006522:	d03d      	beq.n	80065a0 <__pow5mult+0xa0>
 8006524:	69f4      	ldr	r4, [r6, #28]
 8006526:	b97c      	cbnz	r4, 8006548 <__pow5mult+0x48>
 8006528:	2010      	movs	r0, #16
 800652a:	f7fe f83b 	bl	80045a4 <malloc>
 800652e:	4602      	mov	r2, r0
 8006530:	61f0      	str	r0, [r6, #28]
 8006532:	b928      	cbnz	r0, 8006540 <__pow5mult+0x40>
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <__pow5mult+0xac>)
 8006536:	481e      	ldr	r0, [pc, #120]	; (80065b0 <__pow5mult+0xb0>)
 8006538:	f240 11b3 	movw	r1, #435	; 0x1b3
 800653c:	f000 fbd4 	bl	8006ce8 <__assert_func>
 8006540:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006544:	6004      	str	r4, [r0, #0]
 8006546:	60c4      	str	r4, [r0, #12]
 8006548:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800654c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006550:	b94c      	cbnz	r4, 8006566 <__pow5mult+0x66>
 8006552:	f240 2171 	movw	r1, #625	; 0x271
 8006556:	4630      	mov	r0, r6
 8006558:	f7ff ff12 	bl	8006380 <__i2b>
 800655c:	2300      	movs	r3, #0
 800655e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006562:	4604      	mov	r4, r0
 8006564:	6003      	str	r3, [r0, #0]
 8006566:	f04f 0900 	mov.w	r9, #0
 800656a:	07eb      	lsls	r3, r5, #31
 800656c:	d50a      	bpl.n	8006584 <__pow5mult+0x84>
 800656e:	4639      	mov	r1, r7
 8006570:	4622      	mov	r2, r4
 8006572:	4630      	mov	r0, r6
 8006574:	f7ff ff1a 	bl	80063ac <__multiply>
 8006578:	4639      	mov	r1, r7
 800657a:	4680      	mov	r8, r0
 800657c:	4630      	mov	r0, r6
 800657e:	f7ff fe49 	bl	8006214 <_Bfree>
 8006582:	4647      	mov	r7, r8
 8006584:	106d      	asrs	r5, r5, #1
 8006586:	d00b      	beq.n	80065a0 <__pow5mult+0xa0>
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	b938      	cbnz	r0, 800659c <__pow5mult+0x9c>
 800658c:	4622      	mov	r2, r4
 800658e:	4621      	mov	r1, r4
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff ff0b 	bl	80063ac <__multiply>
 8006596:	6020      	str	r0, [r4, #0]
 8006598:	f8c0 9000 	str.w	r9, [r0]
 800659c:	4604      	mov	r4, r0
 800659e:	e7e4      	b.n	800656a <__pow5mult+0x6a>
 80065a0:	4638      	mov	r0, r7
 80065a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065a6:	bf00      	nop
 80065a8:	080078a8 	.word	0x080078a8
 80065ac:	080076dd 	.word	0x080076dd
 80065b0:	0800775d 	.word	0x0800775d

080065b4 <__lshift>:
 80065b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b8:	460c      	mov	r4, r1
 80065ba:	6849      	ldr	r1, [r1, #4]
 80065bc:	6923      	ldr	r3, [r4, #16]
 80065be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065c2:	68a3      	ldr	r3, [r4, #8]
 80065c4:	4607      	mov	r7, r0
 80065c6:	4691      	mov	r9, r2
 80065c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065cc:	f108 0601 	add.w	r6, r8, #1
 80065d0:	42b3      	cmp	r3, r6
 80065d2:	db0b      	blt.n	80065ec <__lshift+0x38>
 80065d4:	4638      	mov	r0, r7
 80065d6:	f7ff fddd 	bl	8006194 <_Balloc>
 80065da:	4605      	mov	r5, r0
 80065dc:	b948      	cbnz	r0, 80065f2 <__lshift+0x3e>
 80065de:	4602      	mov	r2, r0
 80065e0:	4b28      	ldr	r3, [pc, #160]	; (8006684 <__lshift+0xd0>)
 80065e2:	4829      	ldr	r0, [pc, #164]	; (8006688 <__lshift+0xd4>)
 80065e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80065e8:	f000 fb7e 	bl	8006ce8 <__assert_func>
 80065ec:	3101      	adds	r1, #1
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	e7ee      	b.n	80065d0 <__lshift+0x1c>
 80065f2:	2300      	movs	r3, #0
 80065f4:	f100 0114 	add.w	r1, r0, #20
 80065f8:	f100 0210 	add.w	r2, r0, #16
 80065fc:	4618      	mov	r0, r3
 80065fe:	4553      	cmp	r3, sl
 8006600:	db33      	blt.n	800666a <__lshift+0xb6>
 8006602:	6920      	ldr	r0, [r4, #16]
 8006604:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006608:	f104 0314 	add.w	r3, r4, #20
 800660c:	f019 091f 	ands.w	r9, r9, #31
 8006610:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006614:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006618:	d02b      	beq.n	8006672 <__lshift+0xbe>
 800661a:	f1c9 0e20 	rsb	lr, r9, #32
 800661e:	468a      	mov	sl, r1
 8006620:	2200      	movs	r2, #0
 8006622:	6818      	ldr	r0, [r3, #0]
 8006624:	fa00 f009 	lsl.w	r0, r0, r9
 8006628:	4310      	orrs	r0, r2
 800662a:	f84a 0b04 	str.w	r0, [sl], #4
 800662e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006632:	459c      	cmp	ip, r3
 8006634:	fa22 f20e 	lsr.w	r2, r2, lr
 8006638:	d8f3      	bhi.n	8006622 <__lshift+0x6e>
 800663a:	ebac 0304 	sub.w	r3, ip, r4
 800663e:	3b15      	subs	r3, #21
 8006640:	f023 0303 	bic.w	r3, r3, #3
 8006644:	3304      	adds	r3, #4
 8006646:	f104 0015 	add.w	r0, r4, #21
 800664a:	4584      	cmp	ip, r0
 800664c:	bf38      	it	cc
 800664e:	2304      	movcc	r3, #4
 8006650:	50ca      	str	r2, [r1, r3]
 8006652:	b10a      	cbz	r2, 8006658 <__lshift+0xa4>
 8006654:	f108 0602 	add.w	r6, r8, #2
 8006658:	3e01      	subs	r6, #1
 800665a:	4638      	mov	r0, r7
 800665c:	612e      	str	r6, [r5, #16]
 800665e:	4621      	mov	r1, r4
 8006660:	f7ff fdd8 	bl	8006214 <_Bfree>
 8006664:	4628      	mov	r0, r5
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666a:	f842 0f04 	str.w	r0, [r2, #4]!
 800666e:	3301      	adds	r3, #1
 8006670:	e7c5      	b.n	80065fe <__lshift+0x4a>
 8006672:	3904      	subs	r1, #4
 8006674:	f853 2b04 	ldr.w	r2, [r3], #4
 8006678:	f841 2f04 	str.w	r2, [r1, #4]!
 800667c:	459c      	cmp	ip, r3
 800667e:	d8f9      	bhi.n	8006674 <__lshift+0xc0>
 8006680:	e7ea      	b.n	8006658 <__lshift+0xa4>
 8006682:	bf00      	nop
 8006684:	0800774c 	.word	0x0800774c
 8006688:	0800775d 	.word	0x0800775d

0800668c <__mcmp>:
 800668c:	b530      	push	{r4, r5, lr}
 800668e:	6902      	ldr	r2, [r0, #16]
 8006690:	690c      	ldr	r4, [r1, #16]
 8006692:	1b12      	subs	r2, r2, r4
 8006694:	d10e      	bne.n	80066b4 <__mcmp+0x28>
 8006696:	f100 0314 	add.w	r3, r0, #20
 800669a:	3114      	adds	r1, #20
 800669c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80066a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80066a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80066a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80066ac:	42a5      	cmp	r5, r4
 80066ae:	d003      	beq.n	80066b8 <__mcmp+0x2c>
 80066b0:	d305      	bcc.n	80066be <__mcmp+0x32>
 80066b2:	2201      	movs	r2, #1
 80066b4:	4610      	mov	r0, r2
 80066b6:	bd30      	pop	{r4, r5, pc}
 80066b8:	4283      	cmp	r3, r0
 80066ba:	d3f3      	bcc.n	80066a4 <__mcmp+0x18>
 80066bc:	e7fa      	b.n	80066b4 <__mcmp+0x28>
 80066be:	f04f 32ff 	mov.w	r2, #4294967295
 80066c2:	e7f7      	b.n	80066b4 <__mcmp+0x28>

080066c4 <__mdiff>:
 80066c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	460c      	mov	r4, r1
 80066ca:	4606      	mov	r6, r0
 80066cc:	4611      	mov	r1, r2
 80066ce:	4620      	mov	r0, r4
 80066d0:	4690      	mov	r8, r2
 80066d2:	f7ff ffdb 	bl	800668c <__mcmp>
 80066d6:	1e05      	subs	r5, r0, #0
 80066d8:	d110      	bne.n	80066fc <__mdiff+0x38>
 80066da:	4629      	mov	r1, r5
 80066dc:	4630      	mov	r0, r6
 80066de:	f7ff fd59 	bl	8006194 <_Balloc>
 80066e2:	b930      	cbnz	r0, 80066f2 <__mdiff+0x2e>
 80066e4:	4b3a      	ldr	r3, [pc, #232]	; (80067d0 <__mdiff+0x10c>)
 80066e6:	4602      	mov	r2, r0
 80066e8:	f240 2137 	movw	r1, #567	; 0x237
 80066ec:	4839      	ldr	r0, [pc, #228]	; (80067d4 <__mdiff+0x110>)
 80066ee:	f000 fafb 	bl	8006ce8 <__assert_func>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fc:	bfa4      	itt	ge
 80066fe:	4643      	movge	r3, r8
 8006700:	46a0      	movge	r8, r4
 8006702:	4630      	mov	r0, r6
 8006704:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006708:	bfa6      	itte	ge
 800670a:	461c      	movge	r4, r3
 800670c:	2500      	movge	r5, #0
 800670e:	2501      	movlt	r5, #1
 8006710:	f7ff fd40 	bl	8006194 <_Balloc>
 8006714:	b920      	cbnz	r0, 8006720 <__mdiff+0x5c>
 8006716:	4b2e      	ldr	r3, [pc, #184]	; (80067d0 <__mdiff+0x10c>)
 8006718:	4602      	mov	r2, r0
 800671a:	f240 2145 	movw	r1, #581	; 0x245
 800671e:	e7e5      	b.n	80066ec <__mdiff+0x28>
 8006720:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006724:	6926      	ldr	r6, [r4, #16]
 8006726:	60c5      	str	r5, [r0, #12]
 8006728:	f104 0914 	add.w	r9, r4, #20
 800672c:	f108 0514 	add.w	r5, r8, #20
 8006730:	f100 0e14 	add.w	lr, r0, #20
 8006734:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006738:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800673c:	f108 0210 	add.w	r2, r8, #16
 8006740:	46f2      	mov	sl, lr
 8006742:	2100      	movs	r1, #0
 8006744:	f859 3b04 	ldr.w	r3, [r9], #4
 8006748:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800674c:	fa11 f88b 	uxtah	r8, r1, fp
 8006750:	b299      	uxth	r1, r3
 8006752:	0c1b      	lsrs	r3, r3, #16
 8006754:	eba8 0801 	sub.w	r8, r8, r1
 8006758:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800675c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006760:	fa1f f888 	uxth.w	r8, r8
 8006764:	1419      	asrs	r1, r3, #16
 8006766:	454e      	cmp	r6, r9
 8006768:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800676c:	f84a 3b04 	str.w	r3, [sl], #4
 8006770:	d8e8      	bhi.n	8006744 <__mdiff+0x80>
 8006772:	1b33      	subs	r3, r6, r4
 8006774:	3b15      	subs	r3, #21
 8006776:	f023 0303 	bic.w	r3, r3, #3
 800677a:	3304      	adds	r3, #4
 800677c:	3415      	adds	r4, #21
 800677e:	42a6      	cmp	r6, r4
 8006780:	bf38      	it	cc
 8006782:	2304      	movcc	r3, #4
 8006784:	441d      	add	r5, r3
 8006786:	4473      	add	r3, lr
 8006788:	469e      	mov	lr, r3
 800678a:	462e      	mov	r6, r5
 800678c:	4566      	cmp	r6, ip
 800678e:	d30e      	bcc.n	80067ae <__mdiff+0xea>
 8006790:	f10c 0203 	add.w	r2, ip, #3
 8006794:	1b52      	subs	r2, r2, r5
 8006796:	f022 0203 	bic.w	r2, r2, #3
 800679a:	3d03      	subs	r5, #3
 800679c:	45ac      	cmp	ip, r5
 800679e:	bf38      	it	cc
 80067a0:	2200      	movcc	r2, #0
 80067a2:	4413      	add	r3, r2
 80067a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80067a8:	b17a      	cbz	r2, 80067ca <__mdiff+0x106>
 80067aa:	6107      	str	r7, [r0, #16]
 80067ac:	e7a4      	b.n	80066f8 <__mdiff+0x34>
 80067ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80067b2:	fa11 f288 	uxtah	r2, r1, r8
 80067b6:	1414      	asrs	r4, r2, #16
 80067b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80067bc:	b292      	uxth	r2, r2
 80067be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80067c2:	f84e 2b04 	str.w	r2, [lr], #4
 80067c6:	1421      	asrs	r1, r4, #16
 80067c8:	e7e0      	b.n	800678c <__mdiff+0xc8>
 80067ca:	3f01      	subs	r7, #1
 80067cc:	e7ea      	b.n	80067a4 <__mdiff+0xe0>
 80067ce:	bf00      	nop
 80067d0:	0800774c 	.word	0x0800774c
 80067d4:	0800775d 	.word	0x0800775d

080067d8 <__d2b>:
 80067d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067dc:	460f      	mov	r7, r1
 80067de:	2101      	movs	r1, #1
 80067e0:	ec59 8b10 	vmov	r8, r9, d0
 80067e4:	4616      	mov	r6, r2
 80067e6:	f7ff fcd5 	bl	8006194 <_Balloc>
 80067ea:	4604      	mov	r4, r0
 80067ec:	b930      	cbnz	r0, 80067fc <__d2b+0x24>
 80067ee:	4602      	mov	r2, r0
 80067f0:	4b24      	ldr	r3, [pc, #144]	; (8006884 <__d2b+0xac>)
 80067f2:	4825      	ldr	r0, [pc, #148]	; (8006888 <__d2b+0xb0>)
 80067f4:	f240 310f 	movw	r1, #783	; 0x30f
 80067f8:	f000 fa76 	bl	8006ce8 <__assert_func>
 80067fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006804:	bb2d      	cbnz	r5, 8006852 <__d2b+0x7a>
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	f1b8 0300 	subs.w	r3, r8, #0
 800680c:	d026      	beq.n	800685c <__d2b+0x84>
 800680e:	4668      	mov	r0, sp
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	f7ff fd87 	bl	8006324 <__lo0bits>
 8006816:	e9dd 1200 	ldrd	r1, r2, [sp]
 800681a:	b1e8      	cbz	r0, 8006858 <__d2b+0x80>
 800681c:	f1c0 0320 	rsb	r3, r0, #32
 8006820:	fa02 f303 	lsl.w	r3, r2, r3
 8006824:	430b      	orrs	r3, r1
 8006826:	40c2      	lsrs	r2, r0
 8006828:	6163      	str	r3, [r4, #20]
 800682a:	9201      	str	r2, [sp, #4]
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	61a3      	str	r3, [r4, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	bf14      	ite	ne
 8006834:	2202      	movne	r2, #2
 8006836:	2201      	moveq	r2, #1
 8006838:	6122      	str	r2, [r4, #16]
 800683a:	b1bd      	cbz	r5, 800686c <__d2b+0x94>
 800683c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006840:	4405      	add	r5, r0
 8006842:	603d      	str	r5, [r7, #0]
 8006844:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006848:	6030      	str	r0, [r6, #0]
 800684a:	4620      	mov	r0, r4
 800684c:	b003      	add	sp, #12
 800684e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006856:	e7d6      	b.n	8006806 <__d2b+0x2e>
 8006858:	6161      	str	r1, [r4, #20]
 800685a:	e7e7      	b.n	800682c <__d2b+0x54>
 800685c:	a801      	add	r0, sp, #4
 800685e:	f7ff fd61 	bl	8006324 <__lo0bits>
 8006862:	9b01      	ldr	r3, [sp, #4]
 8006864:	6163      	str	r3, [r4, #20]
 8006866:	3020      	adds	r0, #32
 8006868:	2201      	movs	r2, #1
 800686a:	e7e5      	b.n	8006838 <__d2b+0x60>
 800686c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006870:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006874:	6038      	str	r0, [r7, #0]
 8006876:	6918      	ldr	r0, [r3, #16]
 8006878:	f7ff fd34 	bl	80062e4 <__hi0bits>
 800687c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006880:	e7e2      	b.n	8006848 <__d2b+0x70>
 8006882:	bf00      	nop
 8006884:	0800774c 	.word	0x0800774c
 8006888:	0800775d 	.word	0x0800775d

0800688c <__ssputs_r>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	688e      	ldr	r6, [r1, #8]
 8006892:	461f      	mov	r7, r3
 8006894:	42be      	cmp	r6, r7
 8006896:	680b      	ldr	r3, [r1, #0]
 8006898:	4682      	mov	sl, r0
 800689a:	460c      	mov	r4, r1
 800689c:	4690      	mov	r8, r2
 800689e:	d82c      	bhi.n	80068fa <__ssputs_r+0x6e>
 80068a0:	898a      	ldrh	r2, [r1, #12]
 80068a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80068a6:	d026      	beq.n	80068f6 <__ssputs_r+0x6a>
 80068a8:	6965      	ldr	r5, [r4, #20]
 80068aa:	6909      	ldr	r1, [r1, #16]
 80068ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068b0:	eba3 0901 	sub.w	r9, r3, r1
 80068b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068b8:	1c7b      	adds	r3, r7, #1
 80068ba:	444b      	add	r3, r9
 80068bc:	106d      	asrs	r5, r5, #1
 80068be:	429d      	cmp	r5, r3
 80068c0:	bf38      	it	cc
 80068c2:	461d      	movcc	r5, r3
 80068c4:	0553      	lsls	r3, r2, #21
 80068c6:	d527      	bpl.n	8006918 <__ssputs_r+0x8c>
 80068c8:	4629      	mov	r1, r5
 80068ca:	f7fd fe9b 	bl	8004604 <_malloc_r>
 80068ce:	4606      	mov	r6, r0
 80068d0:	b360      	cbz	r0, 800692c <__ssputs_r+0xa0>
 80068d2:	6921      	ldr	r1, [r4, #16]
 80068d4:	464a      	mov	r2, r9
 80068d6:	f000 f9f9 	bl	8006ccc <memcpy>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80068e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e4:	81a3      	strh	r3, [r4, #12]
 80068e6:	6126      	str	r6, [r4, #16]
 80068e8:	6165      	str	r5, [r4, #20]
 80068ea:	444e      	add	r6, r9
 80068ec:	eba5 0509 	sub.w	r5, r5, r9
 80068f0:	6026      	str	r6, [r4, #0]
 80068f2:	60a5      	str	r5, [r4, #8]
 80068f4:	463e      	mov	r6, r7
 80068f6:	42be      	cmp	r6, r7
 80068f8:	d900      	bls.n	80068fc <__ssputs_r+0x70>
 80068fa:	463e      	mov	r6, r7
 80068fc:	6820      	ldr	r0, [r4, #0]
 80068fe:	4632      	mov	r2, r6
 8006900:	4641      	mov	r1, r8
 8006902:	f000 f9c9 	bl	8006c98 <memmove>
 8006906:	68a3      	ldr	r3, [r4, #8]
 8006908:	1b9b      	subs	r3, r3, r6
 800690a:	60a3      	str	r3, [r4, #8]
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	4433      	add	r3, r6
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	2000      	movs	r0, #0
 8006914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006918:	462a      	mov	r2, r5
 800691a:	f000 fa2b 	bl	8006d74 <_realloc_r>
 800691e:	4606      	mov	r6, r0
 8006920:	2800      	cmp	r0, #0
 8006922:	d1e0      	bne.n	80068e6 <__ssputs_r+0x5a>
 8006924:	6921      	ldr	r1, [r4, #16]
 8006926:	4650      	mov	r0, sl
 8006928:	f7ff fbe8 	bl	80060fc <_free_r>
 800692c:	230c      	movs	r3, #12
 800692e:	f8ca 3000 	str.w	r3, [sl]
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006938:	81a3      	strh	r3, [r4, #12]
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	e7e9      	b.n	8006914 <__ssputs_r+0x88>

08006940 <_svfiprintf_r>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	4698      	mov	r8, r3
 8006946:	898b      	ldrh	r3, [r1, #12]
 8006948:	061b      	lsls	r3, r3, #24
 800694a:	b09d      	sub	sp, #116	; 0x74
 800694c:	4607      	mov	r7, r0
 800694e:	460d      	mov	r5, r1
 8006950:	4614      	mov	r4, r2
 8006952:	d50e      	bpl.n	8006972 <_svfiprintf_r+0x32>
 8006954:	690b      	ldr	r3, [r1, #16]
 8006956:	b963      	cbnz	r3, 8006972 <_svfiprintf_r+0x32>
 8006958:	2140      	movs	r1, #64	; 0x40
 800695a:	f7fd fe53 	bl	8004604 <_malloc_r>
 800695e:	6028      	str	r0, [r5, #0]
 8006960:	6128      	str	r0, [r5, #16]
 8006962:	b920      	cbnz	r0, 800696e <_svfiprintf_r+0x2e>
 8006964:	230c      	movs	r3, #12
 8006966:	603b      	str	r3, [r7, #0]
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	e0d0      	b.n	8006b10 <_svfiprintf_r+0x1d0>
 800696e:	2340      	movs	r3, #64	; 0x40
 8006970:	616b      	str	r3, [r5, #20]
 8006972:	2300      	movs	r3, #0
 8006974:	9309      	str	r3, [sp, #36]	; 0x24
 8006976:	2320      	movs	r3, #32
 8006978:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800697c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006980:	2330      	movs	r3, #48	; 0x30
 8006982:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006b28 <_svfiprintf_r+0x1e8>
 8006986:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800698a:	f04f 0901 	mov.w	r9, #1
 800698e:	4623      	mov	r3, r4
 8006990:	469a      	mov	sl, r3
 8006992:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006996:	b10a      	cbz	r2, 800699c <_svfiprintf_r+0x5c>
 8006998:	2a25      	cmp	r2, #37	; 0x25
 800699a:	d1f9      	bne.n	8006990 <_svfiprintf_r+0x50>
 800699c:	ebba 0b04 	subs.w	fp, sl, r4
 80069a0:	d00b      	beq.n	80069ba <_svfiprintf_r+0x7a>
 80069a2:	465b      	mov	r3, fp
 80069a4:	4622      	mov	r2, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	4638      	mov	r0, r7
 80069aa:	f7ff ff6f 	bl	800688c <__ssputs_r>
 80069ae:	3001      	adds	r0, #1
 80069b0:	f000 80a9 	beq.w	8006b06 <_svfiprintf_r+0x1c6>
 80069b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b6:	445a      	add	r2, fp
 80069b8:	9209      	str	r2, [sp, #36]	; 0x24
 80069ba:	f89a 3000 	ldrb.w	r3, [sl]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80a1 	beq.w	8006b06 <_svfiprintf_r+0x1c6>
 80069c4:	2300      	movs	r3, #0
 80069c6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069ce:	f10a 0a01 	add.w	sl, sl, #1
 80069d2:	9304      	str	r3, [sp, #16]
 80069d4:	9307      	str	r3, [sp, #28]
 80069d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069da:	931a      	str	r3, [sp, #104]	; 0x68
 80069dc:	4654      	mov	r4, sl
 80069de:	2205      	movs	r2, #5
 80069e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e4:	4850      	ldr	r0, [pc, #320]	; (8006b28 <_svfiprintf_r+0x1e8>)
 80069e6:	f7f9 fbf3 	bl	80001d0 <memchr>
 80069ea:	9a04      	ldr	r2, [sp, #16]
 80069ec:	b9d8      	cbnz	r0, 8006a26 <_svfiprintf_r+0xe6>
 80069ee:	06d0      	lsls	r0, r2, #27
 80069f0:	bf44      	itt	mi
 80069f2:	2320      	movmi	r3, #32
 80069f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f8:	0711      	lsls	r1, r2, #28
 80069fa:	bf44      	itt	mi
 80069fc:	232b      	movmi	r3, #43	; 0x2b
 80069fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a02:	f89a 3000 	ldrb.w	r3, [sl]
 8006a06:	2b2a      	cmp	r3, #42	; 0x2a
 8006a08:	d015      	beq.n	8006a36 <_svfiprintf_r+0xf6>
 8006a0a:	9a07      	ldr	r2, [sp, #28]
 8006a0c:	4654      	mov	r4, sl
 8006a0e:	2000      	movs	r0, #0
 8006a10:	f04f 0c0a 	mov.w	ip, #10
 8006a14:	4621      	mov	r1, r4
 8006a16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a1a:	3b30      	subs	r3, #48	; 0x30
 8006a1c:	2b09      	cmp	r3, #9
 8006a1e:	d94d      	bls.n	8006abc <_svfiprintf_r+0x17c>
 8006a20:	b1b0      	cbz	r0, 8006a50 <_svfiprintf_r+0x110>
 8006a22:	9207      	str	r2, [sp, #28]
 8006a24:	e014      	b.n	8006a50 <_svfiprintf_r+0x110>
 8006a26:	eba0 0308 	sub.w	r3, r0, r8
 8006a2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	46a2      	mov	sl, r4
 8006a34:	e7d2      	b.n	80069dc <_svfiprintf_r+0x9c>
 8006a36:	9b03      	ldr	r3, [sp, #12]
 8006a38:	1d19      	adds	r1, r3, #4
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	9103      	str	r1, [sp, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bfbb      	ittet	lt
 8006a42:	425b      	neglt	r3, r3
 8006a44:	f042 0202 	orrlt.w	r2, r2, #2
 8006a48:	9307      	strge	r3, [sp, #28]
 8006a4a:	9307      	strlt	r3, [sp, #28]
 8006a4c:	bfb8      	it	lt
 8006a4e:	9204      	strlt	r2, [sp, #16]
 8006a50:	7823      	ldrb	r3, [r4, #0]
 8006a52:	2b2e      	cmp	r3, #46	; 0x2e
 8006a54:	d10c      	bne.n	8006a70 <_svfiprintf_r+0x130>
 8006a56:	7863      	ldrb	r3, [r4, #1]
 8006a58:	2b2a      	cmp	r3, #42	; 0x2a
 8006a5a:	d134      	bne.n	8006ac6 <_svfiprintf_r+0x186>
 8006a5c:	9b03      	ldr	r3, [sp, #12]
 8006a5e:	1d1a      	adds	r2, r3, #4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	9203      	str	r2, [sp, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bfb8      	it	lt
 8006a68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a6c:	3402      	adds	r4, #2
 8006a6e:	9305      	str	r3, [sp, #20]
 8006a70:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006b38 <_svfiprintf_r+0x1f8>
 8006a74:	7821      	ldrb	r1, [r4, #0]
 8006a76:	2203      	movs	r2, #3
 8006a78:	4650      	mov	r0, sl
 8006a7a:	f7f9 fba9 	bl	80001d0 <memchr>
 8006a7e:	b138      	cbz	r0, 8006a90 <_svfiprintf_r+0x150>
 8006a80:	9b04      	ldr	r3, [sp, #16]
 8006a82:	eba0 000a 	sub.w	r0, r0, sl
 8006a86:	2240      	movs	r2, #64	; 0x40
 8006a88:	4082      	lsls	r2, r0
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	3401      	adds	r4, #1
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a94:	4825      	ldr	r0, [pc, #148]	; (8006b2c <_svfiprintf_r+0x1ec>)
 8006a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a9a:	2206      	movs	r2, #6
 8006a9c:	f7f9 fb98 	bl	80001d0 <memchr>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d038      	beq.n	8006b16 <_svfiprintf_r+0x1d6>
 8006aa4:	4b22      	ldr	r3, [pc, #136]	; (8006b30 <_svfiprintf_r+0x1f0>)
 8006aa6:	bb1b      	cbnz	r3, 8006af0 <_svfiprintf_r+0x1b0>
 8006aa8:	9b03      	ldr	r3, [sp, #12]
 8006aaa:	3307      	adds	r3, #7
 8006aac:	f023 0307 	bic.w	r3, r3, #7
 8006ab0:	3308      	adds	r3, #8
 8006ab2:	9303      	str	r3, [sp, #12]
 8006ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab6:	4433      	add	r3, r6
 8006ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8006aba:	e768      	b.n	800698e <_svfiprintf_r+0x4e>
 8006abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	e7a6      	b.n	8006a14 <_svfiprintf_r+0xd4>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	3401      	adds	r4, #1
 8006aca:	9305      	str	r3, [sp, #20]
 8006acc:	4619      	mov	r1, r3
 8006ace:	f04f 0c0a 	mov.w	ip, #10
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad8:	3a30      	subs	r2, #48	; 0x30
 8006ada:	2a09      	cmp	r2, #9
 8006adc:	d903      	bls.n	8006ae6 <_svfiprintf_r+0x1a6>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d0c6      	beq.n	8006a70 <_svfiprintf_r+0x130>
 8006ae2:	9105      	str	r1, [sp, #20]
 8006ae4:	e7c4      	b.n	8006a70 <_svfiprintf_r+0x130>
 8006ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006aea:	4604      	mov	r4, r0
 8006aec:	2301      	movs	r3, #1
 8006aee:	e7f0      	b.n	8006ad2 <_svfiprintf_r+0x192>
 8006af0:	ab03      	add	r3, sp, #12
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	462a      	mov	r2, r5
 8006af6:	4b0f      	ldr	r3, [pc, #60]	; (8006b34 <_svfiprintf_r+0x1f4>)
 8006af8:	a904      	add	r1, sp, #16
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7fd feae 	bl	800485c <_printf_float>
 8006b00:	1c42      	adds	r2, r0, #1
 8006b02:	4606      	mov	r6, r0
 8006b04:	d1d6      	bne.n	8006ab4 <_svfiprintf_r+0x174>
 8006b06:	89ab      	ldrh	r3, [r5, #12]
 8006b08:	065b      	lsls	r3, r3, #25
 8006b0a:	f53f af2d 	bmi.w	8006968 <_svfiprintf_r+0x28>
 8006b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b10:	b01d      	add	sp, #116	; 0x74
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b16:	ab03      	add	r3, sp, #12
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	462a      	mov	r2, r5
 8006b1c:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <_svfiprintf_r+0x1f4>)
 8006b1e:	a904      	add	r1, sp, #16
 8006b20:	4638      	mov	r0, r7
 8006b22:	f7fe f93f 	bl	8004da4 <_printf_i>
 8006b26:	e7eb      	b.n	8006b00 <_svfiprintf_r+0x1c0>
 8006b28:	080078b4 	.word	0x080078b4
 8006b2c:	080078be 	.word	0x080078be
 8006b30:	0800485d 	.word	0x0800485d
 8006b34:	0800688d 	.word	0x0800688d
 8006b38:	080078ba 	.word	0x080078ba

08006b3c <__sflush_r>:
 8006b3c:	898a      	ldrh	r2, [r1, #12]
 8006b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b42:	4605      	mov	r5, r0
 8006b44:	0710      	lsls	r0, r2, #28
 8006b46:	460c      	mov	r4, r1
 8006b48:	d458      	bmi.n	8006bfc <__sflush_r+0xc0>
 8006b4a:	684b      	ldr	r3, [r1, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dc05      	bgt.n	8006b5c <__sflush_r+0x20>
 8006b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	dc02      	bgt.n	8006b5c <__sflush_r+0x20>
 8006b56:	2000      	movs	r0, #0
 8006b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	d0f9      	beq.n	8006b56 <__sflush_r+0x1a>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b68:	682f      	ldr	r7, [r5, #0]
 8006b6a:	6a21      	ldr	r1, [r4, #32]
 8006b6c:	602b      	str	r3, [r5, #0]
 8006b6e:	d032      	beq.n	8006bd6 <__sflush_r+0x9a>
 8006b70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b72:	89a3      	ldrh	r3, [r4, #12]
 8006b74:	075a      	lsls	r2, r3, #29
 8006b76:	d505      	bpl.n	8006b84 <__sflush_r+0x48>
 8006b78:	6863      	ldr	r3, [r4, #4]
 8006b7a:	1ac0      	subs	r0, r0, r3
 8006b7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b7e:	b10b      	cbz	r3, 8006b84 <__sflush_r+0x48>
 8006b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b82:	1ac0      	subs	r0, r0, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	4602      	mov	r2, r0
 8006b88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b8a:	6a21      	ldr	r1, [r4, #32]
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	47b0      	blx	r6
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	d106      	bne.n	8006ba4 <__sflush_r+0x68>
 8006b96:	6829      	ldr	r1, [r5, #0]
 8006b98:	291d      	cmp	r1, #29
 8006b9a:	d82b      	bhi.n	8006bf4 <__sflush_r+0xb8>
 8006b9c:	4a29      	ldr	r2, [pc, #164]	; (8006c44 <__sflush_r+0x108>)
 8006b9e:	410a      	asrs	r2, r1
 8006ba0:	07d6      	lsls	r6, r2, #31
 8006ba2:	d427      	bmi.n	8006bf4 <__sflush_r+0xb8>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	6062      	str	r2, [r4, #4]
 8006ba8:	04d9      	lsls	r1, r3, #19
 8006baa:	6922      	ldr	r2, [r4, #16]
 8006bac:	6022      	str	r2, [r4, #0]
 8006bae:	d504      	bpl.n	8006bba <__sflush_r+0x7e>
 8006bb0:	1c42      	adds	r2, r0, #1
 8006bb2:	d101      	bne.n	8006bb8 <__sflush_r+0x7c>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b903      	cbnz	r3, 8006bba <__sflush_r+0x7e>
 8006bb8:	6560      	str	r0, [r4, #84]	; 0x54
 8006bba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bbc:	602f      	str	r7, [r5, #0]
 8006bbe:	2900      	cmp	r1, #0
 8006bc0:	d0c9      	beq.n	8006b56 <__sflush_r+0x1a>
 8006bc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bc6:	4299      	cmp	r1, r3
 8006bc8:	d002      	beq.n	8006bd0 <__sflush_r+0x94>
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f7ff fa96 	bl	80060fc <_free_r>
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	6360      	str	r0, [r4, #52]	; 0x34
 8006bd4:	e7c0      	b.n	8006b58 <__sflush_r+0x1c>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b0      	blx	r6
 8006bdc:	1c41      	adds	r1, r0, #1
 8006bde:	d1c8      	bne.n	8006b72 <__sflush_r+0x36>
 8006be0:	682b      	ldr	r3, [r5, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0c5      	beq.n	8006b72 <__sflush_r+0x36>
 8006be6:	2b1d      	cmp	r3, #29
 8006be8:	d001      	beq.n	8006bee <__sflush_r+0xb2>
 8006bea:	2b16      	cmp	r3, #22
 8006bec:	d101      	bne.n	8006bf2 <__sflush_r+0xb6>
 8006bee:	602f      	str	r7, [r5, #0]
 8006bf0:	e7b1      	b.n	8006b56 <__sflush_r+0x1a>
 8006bf2:	89a3      	ldrh	r3, [r4, #12]
 8006bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	e7ad      	b.n	8006b58 <__sflush_r+0x1c>
 8006bfc:	690f      	ldr	r7, [r1, #16]
 8006bfe:	2f00      	cmp	r7, #0
 8006c00:	d0a9      	beq.n	8006b56 <__sflush_r+0x1a>
 8006c02:	0793      	lsls	r3, r2, #30
 8006c04:	680e      	ldr	r6, [r1, #0]
 8006c06:	bf08      	it	eq
 8006c08:	694b      	ldreq	r3, [r1, #20]
 8006c0a:	600f      	str	r7, [r1, #0]
 8006c0c:	bf18      	it	ne
 8006c0e:	2300      	movne	r3, #0
 8006c10:	eba6 0807 	sub.w	r8, r6, r7
 8006c14:	608b      	str	r3, [r1, #8]
 8006c16:	f1b8 0f00 	cmp.w	r8, #0
 8006c1a:	dd9c      	ble.n	8006b56 <__sflush_r+0x1a>
 8006c1c:	6a21      	ldr	r1, [r4, #32]
 8006c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c20:	4643      	mov	r3, r8
 8006c22:	463a      	mov	r2, r7
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b0      	blx	r6
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	dc06      	bgt.n	8006c3a <__sflush_r+0xfe>
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c32:	81a3      	strh	r3, [r4, #12]
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e78e      	b.n	8006b58 <__sflush_r+0x1c>
 8006c3a:	4407      	add	r7, r0
 8006c3c:	eba8 0800 	sub.w	r8, r8, r0
 8006c40:	e7e9      	b.n	8006c16 <__sflush_r+0xda>
 8006c42:	bf00      	nop
 8006c44:	dfbffffe 	.word	0xdfbffffe

08006c48 <_fflush_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	690b      	ldr	r3, [r1, #16]
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	b913      	cbnz	r3, 8006c58 <_fflush_r+0x10>
 8006c52:	2500      	movs	r5, #0
 8006c54:	4628      	mov	r0, r5
 8006c56:	bd38      	pop	{r3, r4, r5, pc}
 8006c58:	b118      	cbz	r0, 8006c62 <_fflush_r+0x1a>
 8006c5a:	6a03      	ldr	r3, [r0, #32]
 8006c5c:	b90b      	cbnz	r3, 8006c62 <_fflush_r+0x1a>
 8006c5e:	f7fe fa4f 	bl	8005100 <__sinit>
 8006c62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f3      	beq.n	8006c52 <_fflush_r+0xa>
 8006c6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c6c:	07d0      	lsls	r0, r2, #31
 8006c6e:	d404      	bmi.n	8006c7a <_fflush_r+0x32>
 8006c70:	0599      	lsls	r1, r3, #22
 8006c72:	d402      	bmi.n	8006c7a <_fflush_r+0x32>
 8006c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c76:	f7fe fbc2 	bl	80053fe <__retarget_lock_acquire_recursive>
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	f7ff ff5d 	bl	8006b3c <__sflush_r>
 8006c82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c84:	07da      	lsls	r2, r3, #31
 8006c86:	4605      	mov	r5, r0
 8006c88:	d4e4      	bmi.n	8006c54 <_fflush_r+0xc>
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	059b      	lsls	r3, r3, #22
 8006c8e:	d4e1      	bmi.n	8006c54 <_fflush_r+0xc>
 8006c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c92:	f7fe fbb5 	bl	8005400 <__retarget_lock_release_recursive>
 8006c96:	e7dd      	b.n	8006c54 <_fflush_r+0xc>

08006c98 <memmove>:
 8006c98:	4288      	cmp	r0, r1
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	eb01 0402 	add.w	r4, r1, r2
 8006ca0:	d902      	bls.n	8006ca8 <memmove+0x10>
 8006ca2:	4284      	cmp	r4, r0
 8006ca4:	4623      	mov	r3, r4
 8006ca6:	d807      	bhi.n	8006cb8 <memmove+0x20>
 8006ca8:	1e43      	subs	r3, r0, #1
 8006caa:	42a1      	cmp	r1, r4
 8006cac:	d008      	beq.n	8006cc0 <memmove+0x28>
 8006cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cb6:	e7f8      	b.n	8006caa <memmove+0x12>
 8006cb8:	4402      	add	r2, r0
 8006cba:	4601      	mov	r1, r0
 8006cbc:	428a      	cmp	r2, r1
 8006cbe:	d100      	bne.n	8006cc2 <memmove+0x2a>
 8006cc0:	bd10      	pop	{r4, pc}
 8006cc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cca:	e7f7      	b.n	8006cbc <memmove+0x24>

08006ccc <memcpy>:
 8006ccc:	440a      	add	r2, r1
 8006cce:	4291      	cmp	r1, r2
 8006cd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cd4:	d100      	bne.n	8006cd8 <memcpy+0xc>
 8006cd6:	4770      	bx	lr
 8006cd8:	b510      	push	{r4, lr}
 8006cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce2:	4291      	cmp	r1, r2
 8006ce4:	d1f9      	bne.n	8006cda <memcpy+0xe>
 8006ce6:	bd10      	pop	{r4, pc}

08006ce8 <__assert_func>:
 8006ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cea:	4614      	mov	r4, r2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4b09      	ldr	r3, [pc, #36]	; (8006d14 <__assert_func+0x2c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4605      	mov	r5, r0
 8006cf4:	68d8      	ldr	r0, [r3, #12]
 8006cf6:	b14c      	cbz	r4, 8006d0c <__assert_func+0x24>
 8006cf8:	4b07      	ldr	r3, [pc, #28]	; (8006d18 <__assert_func+0x30>)
 8006cfa:	9100      	str	r1, [sp, #0]
 8006cfc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d00:	4906      	ldr	r1, [pc, #24]	; (8006d1c <__assert_func+0x34>)
 8006d02:	462b      	mov	r3, r5
 8006d04:	f000 f872 	bl	8006dec <fiprintf>
 8006d08:	f7fd fc44 	bl	8004594 <abort>
 8006d0c:	4b04      	ldr	r3, [pc, #16]	; (8006d20 <__assert_func+0x38>)
 8006d0e:	461c      	mov	r4, r3
 8006d10:	e7f3      	b.n	8006cfa <__assert_func+0x12>
 8006d12:	bf00      	nop
 8006d14:	20000068 	.word	0x20000068
 8006d18:	080078cd 	.word	0x080078cd
 8006d1c:	080078da 	.word	0x080078da
 8006d20:	08007908 	.word	0x08007908

08006d24 <_calloc_r>:
 8006d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d26:	fba1 2402 	umull	r2, r4, r1, r2
 8006d2a:	b94c      	cbnz	r4, 8006d40 <_calloc_r+0x1c>
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	9201      	str	r2, [sp, #4]
 8006d30:	f7fd fc68 	bl	8004604 <_malloc_r>
 8006d34:	9a01      	ldr	r2, [sp, #4]
 8006d36:	4605      	mov	r5, r0
 8006d38:	b930      	cbnz	r0, 8006d48 <_calloc_r+0x24>
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	b003      	add	sp, #12
 8006d3e:	bd30      	pop	{r4, r5, pc}
 8006d40:	220c      	movs	r2, #12
 8006d42:	6002      	str	r2, [r0, #0]
 8006d44:	2500      	movs	r5, #0
 8006d46:	e7f8      	b.n	8006d3a <_calloc_r+0x16>
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f7fe fa86 	bl	800525a <memset>
 8006d4e:	e7f4      	b.n	8006d3a <_calloc_r+0x16>

08006d50 <__ascii_mbtowc>:
 8006d50:	b082      	sub	sp, #8
 8006d52:	b901      	cbnz	r1, 8006d56 <__ascii_mbtowc+0x6>
 8006d54:	a901      	add	r1, sp, #4
 8006d56:	b142      	cbz	r2, 8006d6a <__ascii_mbtowc+0x1a>
 8006d58:	b14b      	cbz	r3, 8006d6e <__ascii_mbtowc+0x1e>
 8006d5a:	7813      	ldrb	r3, [r2, #0]
 8006d5c:	600b      	str	r3, [r1, #0]
 8006d5e:	7812      	ldrb	r2, [r2, #0]
 8006d60:	1e10      	subs	r0, r2, #0
 8006d62:	bf18      	it	ne
 8006d64:	2001      	movne	r0, #1
 8006d66:	b002      	add	sp, #8
 8006d68:	4770      	bx	lr
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	e7fb      	b.n	8006d66 <__ascii_mbtowc+0x16>
 8006d6e:	f06f 0001 	mvn.w	r0, #1
 8006d72:	e7f8      	b.n	8006d66 <__ascii_mbtowc+0x16>

08006d74 <_realloc_r>:
 8006d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d78:	4680      	mov	r8, r0
 8006d7a:	4614      	mov	r4, r2
 8006d7c:	460e      	mov	r6, r1
 8006d7e:	b921      	cbnz	r1, 8006d8a <_realloc_r+0x16>
 8006d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d84:	4611      	mov	r1, r2
 8006d86:	f7fd bc3d 	b.w	8004604 <_malloc_r>
 8006d8a:	b92a      	cbnz	r2, 8006d98 <_realloc_r+0x24>
 8006d8c:	f7ff f9b6 	bl	80060fc <_free_r>
 8006d90:	4625      	mov	r5, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d98:	f000 f83a 	bl	8006e10 <_malloc_usable_size_r>
 8006d9c:	4284      	cmp	r4, r0
 8006d9e:	4607      	mov	r7, r0
 8006da0:	d802      	bhi.n	8006da8 <_realloc_r+0x34>
 8006da2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006da6:	d812      	bhi.n	8006dce <_realloc_r+0x5a>
 8006da8:	4621      	mov	r1, r4
 8006daa:	4640      	mov	r0, r8
 8006dac:	f7fd fc2a 	bl	8004604 <_malloc_r>
 8006db0:	4605      	mov	r5, r0
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0ed      	beq.n	8006d92 <_realloc_r+0x1e>
 8006db6:	42bc      	cmp	r4, r7
 8006db8:	4622      	mov	r2, r4
 8006dba:	4631      	mov	r1, r6
 8006dbc:	bf28      	it	cs
 8006dbe:	463a      	movcs	r2, r7
 8006dc0:	f7ff ff84 	bl	8006ccc <memcpy>
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f7ff f998 	bl	80060fc <_free_r>
 8006dcc:	e7e1      	b.n	8006d92 <_realloc_r+0x1e>
 8006dce:	4635      	mov	r5, r6
 8006dd0:	e7df      	b.n	8006d92 <_realloc_r+0x1e>

08006dd2 <__ascii_wctomb>:
 8006dd2:	b149      	cbz	r1, 8006de8 <__ascii_wctomb+0x16>
 8006dd4:	2aff      	cmp	r2, #255	; 0xff
 8006dd6:	bf85      	ittet	hi
 8006dd8:	238a      	movhi	r3, #138	; 0x8a
 8006dda:	6003      	strhi	r3, [r0, #0]
 8006ddc:	700a      	strbls	r2, [r1, #0]
 8006dde:	f04f 30ff 	movhi.w	r0, #4294967295
 8006de2:	bf98      	it	ls
 8006de4:	2001      	movls	r0, #1
 8006de6:	4770      	bx	lr
 8006de8:	4608      	mov	r0, r1
 8006dea:	4770      	bx	lr

08006dec <fiprintf>:
 8006dec:	b40e      	push	{r1, r2, r3}
 8006dee:	b503      	push	{r0, r1, lr}
 8006df0:	4601      	mov	r1, r0
 8006df2:	ab03      	add	r3, sp, #12
 8006df4:	4805      	ldr	r0, [pc, #20]	; (8006e0c <fiprintf+0x20>)
 8006df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	f000 f839 	bl	8006e74 <_vfiprintf_r>
 8006e02:	b002      	add	sp, #8
 8006e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e08:	b003      	add	sp, #12
 8006e0a:	4770      	bx	lr
 8006e0c:	20000068 	.word	0x20000068

08006e10 <_malloc_usable_size_r>:
 8006e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e14:	1f18      	subs	r0, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	bfbc      	itt	lt
 8006e1a:	580b      	ldrlt	r3, [r1, r0]
 8006e1c:	18c0      	addlt	r0, r0, r3
 8006e1e:	4770      	bx	lr

08006e20 <__sfputc_r>:
 8006e20:	6893      	ldr	r3, [r2, #8]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	b410      	push	{r4}
 8006e28:	6093      	str	r3, [r2, #8]
 8006e2a:	da08      	bge.n	8006e3e <__sfputc_r+0x1e>
 8006e2c:	6994      	ldr	r4, [r2, #24]
 8006e2e:	42a3      	cmp	r3, r4
 8006e30:	db01      	blt.n	8006e36 <__sfputc_r+0x16>
 8006e32:	290a      	cmp	r1, #10
 8006e34:	d103      	bne.n	8006e3e <__sfputc_r+0x1e>
 8006e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e3a:	f000 b935 	b.w	80070a8 <__swbuf_r>
 8006e3e:	6813      	ldr	r3, [r2, #0]
 8006e40:	1c58      	adds	r0, r3, #1
 8006e42:	6010      	str	r0, [r2, #0]
 8006e44:	7019      	strb	r1, [r3, #0]
 8006e46:	4608      	mov	r0, r1
 8006e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <__sfputs_r>:
 8006e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e50:	4606      	mov	r6, r0
 8006e52:	460f      	mov	r7, r1
 8006e54:	4614      	mov	r4, r2
 8006e56:	18d5      	adds	r5, r2, r3
 8006e58:	42ac      	cmp	r4, r5
 8006e5a:	d101      	bne.n	8006e60 <__sfputs_r+0x12>
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e007      	b.n	8006e70 <__sfputs_r+0x22>
 8006e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e64:	463a      	mov	r2, r7
 8006e66:	4630      	mov	r0, r6
 8006e68:	f7ff ffda 	bl	8006e20 <__sfputc_r>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d1f3      	bne.n	8006e58 <__sfputs_r+0xa>
 8006e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e74 <_vfiprintf_r>:
 8006e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e78:	460d      	mov	r5, r1
 8006e7a:	b09d      	sub	sp, #116	; 0x74
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	4698      	mov	r8, r3
 8006e80:	4606      	mov	r6, r0
 8006e82:	b118      	cbz	r0, 8006e8c <_vfiprintf_r+0x18>
 8006e84:	6a03      	ldr	r3, [r0, #32]
 8006e86:	b90b      	cbnz	r3, 8006e8c <_vfiprintf_r+0x18>
 8006e88:	f7fe f93a 	bl	8005100 <__sinit>
 8006e8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e8e:	07d9      	lsls	r1, r3, #31
 8006e90:	d405      	bmi.n	8006e9e <_vfiprintf_r+0x2a>
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	059a      	lsls	r2, r3, #22
 8006e96:	d402      	bmi.n	8006e9e <_vfiprintf_r+0x2a>
 8006e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e9a:	f7fe fab0 	bl	80053fe <__retarget_lock_acquire_recursive>
 8006e9e:	89ab      	ldrh	r3, [r5, #12]
 8006ea0:	071b      	lsls	r3, r3, #28
 8006ea2:	d501      	bpl.n	8006ea8 <_vfiprintf_r+0x34>
 8006ea4:	692b      	ldr	r3, [r5, #16]
 8006ea6:	b99b      	cbnz	r3, 8006ed0 <_vfiprintf_r+0x5c>
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f000 f93a 	bl	8007124 <__swsetup_r>
 8006eb0:	b170      	cbz	r0, 8006ed0 <_vfiprintf_r+0x5c>
 8006eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eb4:	07dc      	lsls	r4, r3, #31
 8006eb6:	d504      	bpl.n	8006ec2 <_vfiprintf_r+0x4e>
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	b01d      	add	sp, #116	; 0x74
 8006ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	0598      	lsls	r0, r3, #22
 8006ec6:	d4f7      	bmi.n	8006eb8 <_vfiprintf_r+0x44>
 8006ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eca:	f7fe fa99 	bl	8005400 <__retarget_lock_release_recursive>
 8006ece:	e7f3      	b.n	8006eb8 <_vfiprintf_r+0x44>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed4:	2320      	movs	r3, #32
 8006ed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eda:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ede:	2330      	movs	r3, #48	; 0x30
 8006ee0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007094 <_vfiprintf_r+0x220>
 8006ee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ee8:	f04f 0901 	mov.w	r9, #1
 8006eec:	4623      	mov	r3, r4
 8006eee:	469a      	mov	sl, r3
 8006ef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ef4:	b10a      	cbz	r2, 8006efa <_vfiprintf_r+0x86>
 8006ef6:	2a25      	cmp	r2, #37	; 0x25
 8006ef8:	d1f9      	bne.n	8006eee <_vfiprintf_r+0x7a>
 8006efa:	ebba 0b04 	subs.w	fp, sl, r4
 8006efe:	d00b      	beq.n	8006f18 <_vfiprintf_r+0xa4>
 8006f00:	465b      	mov	r3, fp
 8006f02:	4622      	mov	r2, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	4630      	mov	r0, r6
 8006f08:	f7ff ffa1 	bl	8006e4e <__sfputs_r>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f000 80a9 	beq.w	8007064 <_vfiprintf_r+0x1f0>
 8006f12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f14:	445a      	add	r2, fp
 8006f16:	9209      	str	r2, [sp, #36]	; 0x24
 8006f18:	f89a 3000 	ldrb.w	r3, [sl]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80a1 	beq.w	8007064 <_vfiprintf_r+0x1f0>
 8006f22:	2300      	movs	r3, #0
 8006f24:	f04f 32ff 	mov.w	r2, #4294967295
 8006f28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f2c:	f10a 0a01 	add.w	sl, sl, #1
 8006f30:	9304      	str	r3, [sp, #16]
 8006f32:	9307      	str	r3, [sp, #28]
 8006f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f38:	931a      	str	r3, [sp, #104]	; 0x68
 8006f3a:	4654      	mov	r4, sl
 8006f3c:	2205      	movs	r2, #5
 8006f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f42:	4854      	ldr	r0, [pc, #336]	; (8007094 <_vfiprintf_r+0x220>)
 8006f44:	f7f9 f944 	bl	80001d0 <memchr>
 8006f48:	9a04      	ldr	r2, [sp, #16]
 8006f4a:	b9d8      	cbnz	r0, 8006f84 <_vfiprintf_r+0x110>
 8006f4c:	06d1      	lsls	r1, r2, #27
 8006f4e:	bf44      	itt	mi
 8006f50:	2320      	movmi	r3, #32
 8006f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f56:	0713      	lsls	r3, r2, #28
 8006f58:	bf44      	itt	mi
 8006f5a:	232b      	movmi	r3, #43	; 0x2b
 8006f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f60:	f89a 3000 	ldrb.w	r3, [sl]
 8006f64:	2b2a      	cmp	r3, #42	; 0x2a
 8006f66:	d015      	beq.n	8006f94 <_vfiprintf_r+0x120>
 8006f68:	9a07      	ldr	r2, [sp, #28]
 8006f6a:	4654      	mov	r4, sl
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	f04f 0c0a 	mov.w	ip, #10
 8006f72:	4621      	mov	r1, r4
 8006f74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f78:	3b30      	subs	r3, #48	; 0x30
 8006f7a:	2b09      	cmp	r3, #9
 8006f7c:	d94d      	bls.n	800701a <_vfiprintf_r+0x1a6>
 8006f7e:	b1b0      	cbz	r0, 8006fae <_vfiprintf_r+0x13a>
 8006f80:	9207      	str	r2, [sp, #28]
 8006f82:	e014      	b.n	8006fae <_vfiprintf_r+0x13a>
 8006f84:	eba0 0308 	sub.w	r3, r0, r8
 8006f88:	fa09 f303 	lsl.w	r3, r9, r3
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	46a2      	mov	sl, r4
 8006f92:	e7d2      	b.n	8006f3a <_vfiprintf_r+0xc6>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	1d19      	adds	r1, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9103      	str	r1, [sp, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bfbb      	ittet	lt
 8006fa0:	425b      	neglt	r3, r3
 8006fa2:	f042 0202 	orrlt.w	r2, r2, #2
 8006fa6:	9307      	strge	r3, [sp, #28]
 8006fa8:	9307      	strlt	r3, [sp, #28]
 8006faa:	bfb8      	it	lt
 8006fac:	9204      	strlt	r2, [sp, #16]
 8006fae:	7823      	ldrb	r3, [r4, #0]
 8006fb0:	2b2e      	cmp	r3, #46	; 0x2e
 8006fb2:	d10c      	bne.n	8006fce <_vfiprintf_r+0x15a>
 8006fb4:	7863      	ldrb	r3, [r4, #1]
 8006fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb8:	d134      	bne.n	8007024 <_vfiprintf_r+0x1b0>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	1d1a      	adds	r2, r3, #4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	9203      	str	r2, [sp, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfb8      	it	lt
 8006fc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fca:	3402      	adds	r4, #2
 8006fcc:	9305      	str	r3, [sp, #20]
 8006fce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80070a4 <_vfiprintf_r+0x230>
 8006fd2:	7821      	ldrb	r1, [r4, #0]
 8006fd4:	2203      	movs	r2, #3
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	f7f9 f8fa 	bl	80001d0 <memchr>
 8006fdc:	b138      	cbz	r0, 8006fee <_vfiprintf_r+0x17a>
 8006fde:	9b04      	ldr	r3, [sp, #16]
 8006fe0:	eba0 000a 	sub.w	r0, r0, sl
 8006fe4:	2240      	movs	r2, #64	; 0x40
 8006fe6:	4082      	lsls	r2, r0
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	3401      	adds	r4, #1
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ff2:	4829      	ldr	r0, [pc, #164]	; (8007098 <_vfiprintf_r+0x224>)
 8006ff4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ff8:	2206      	movs	r2, #6
 8006ffa:	f7f9 f8e9 	bl	80001d0 <memchr>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d03f      	beq.n	8007082 <_vfiprintf_r+0x20e>
 8007002:	4b26      	ldr	r3, [pc, #152]	; (800709c <_vfiprintf_r+0x228>)
 8007004:	bb1b      	cbnz	r3, 800704e <_vfiprintf_r+0x1da>
 8007006:	9b03      	ldr	r3, [sp, #12]
 8007008:	3307      	adds	r3, #7
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	3308      	adds	r3, #8
 8007010:	9303      	str	r3, [sp, #12]
 8007012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007014:	443b      	add	r3, r7
 8007016:	9309      	str	r3, [sp, #36]	; 0x24
 8007018:	e768      	b.n	8006eec <_vfiprintf_r+0x78>
 800701a:	fb0c 3202 	mla	r2, ip, r2, r3
 800701e:	460c      	mov	r4, r1
 8007020:	2001      	movs	r0, #1
 8007022:	e7a6      	b.n	8006f72 <_vfiprintf_r+0xfe>
 8007024:	2300      	movs	r3, #0
 8007026:	3401      	adds	r4, #1
 8007028:	9305      	str	r3, [sp, #20]
 800702a:	4619      	mov	r1, r3
 800702c:	f04f 0c0a 	mov.w	ip, #10
 8007030:	4620      	mov	r0, r4
 8007032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007036:	3a30      	subs	r2, #48	; 0x30
 8007038:	2a09      	cmp	r2, #9
 800703a:	d903      	bls.n	8007044 <_vfiprintf_r+0x1d0>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0c6      	beq.n	8006fce <_vfiprintf_r+0x15a>
 8007040:	9105      	str	r1, [sp, #20]
 8007042:	e7c4      	b.n	8006fce <_vfiprintf_r+0x15a>
 8007044:	fb0c 2101 	mla	r1, ip, r1, r2
 8007048:	4604      	mov	r4, r0
 800704a:	2301      	movs	r3, #1
 800704c:	e7f0      	b.n	8007030 <_vfiprintf_r+0x1bc>
 800704e:	ab03      	add	r3, sp, #12
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	462a      	mov	r2, r5
 8007054:	4b12      	ldr	r3, [pc, #72]	; (80070a0 <_vfiprintf_r+0x22c>)
 8007056:	a904      	add	r1, sp, #16
 8007058:	4630      	mov	r0, r6
 800705a:	f7fd fbff 	bl	800485c <_printf_float>
 800705e:	4607      	mov	r7, r0
 8007060:	1c78      	adds	r0, r7, #1
 8007062:	d1d6      	bne.n	8007012 <_vfiprintf_r+0x19e>
 8007064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007066:	07d9      	lsls	r1, r3, #31
 8007068:	d405      	bmi.n	8007076 <_vfiprintf_r+0x202>
 800706a:	89ab      	ldrh	r3, [r5, #12]
 800706c:	059a      	lsls	r2, r3, #22
 800706e:	d402      	bmi.n	8007076 <_vfiprintf_r+0x202>
 8007070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007072:	f7fe f9c5 	bl	8005400 <__retarget_lock_release_recursive>
 8007076:	89ab      	ldrh	r3, [r5, #12]
 8007078:	065b      	lsls	r3, r3, #25
 800707a:	f53f af1d 	bmi.w	8006eb8 <_vfiprintf_r+0x44>
 800707e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007080:	e71c      	b.n	8006ebc <_vfiprintf_r+0x48>
 8007082:	ab03      	add	r3, sp, #12
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	462a      	mov	r2, r5
 8007088:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <_vfiprintf_r+0x22c>)
 800708a:	a904      	add	r1, sp, #16
 800708c:	4630      	mov	r0, r6
 800708e:	f7fd fe89 	bl	8004da4 <_printf_i>
 8007092:	e7e4      	b.n	800705e <_vfiprintf_r+0x1ea>
 8007094:	080078b4 	.word	0x080078b4
 8007098:	080078be 	.word	0x080078be
 800709c:	0800485d 	.word	0x0800485d
 80070a0:	08006e4f 	.word	0x08006e4f
 80070a4:	080078ba 	.word	0x080078ba

080070a8 <__swbuf_r>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	460e      	mov	r6, r1
 80070ac:	4614      	mov	r4, r2
 80070ae:	4605      	mov	r5, r0
 80070b0:	b118      	cbz	r0, 80070ba <__swbuf_r+0x12>
 80070b2:	6a03      	ldr	r3, [r0, #32]
 80070b4:	b90b      	cbnz	r3, 80070ba <__swbuf_r+0x12>
 80070b6:	f7fe f823 	bl	8005100 <__sinit>
 80070ba:	69a3      	ldr	r3, [r4, #24]
 80070bc:	60a3      	str	r3, [r4, #8]
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	071a      	lsls	r2, r3, #28
 80070c2:	d525      	bpl.n	8007110 <__swbuf_r+0x68>
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	b31b      	cbz	r3, 8007110 <__swbuf_r+0x68>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	6922      	ldr	r2, [r4, #16]
 80070cc:	1a98      	subs	r0, r3, r2
 80070ce:	6963      	ldr	r3, [r4, #20]
 80070d0:	b2f6      	uxtb	r6, r6
 80070d2:	4283      	cmp	r3, r0
 80070d4:	4637      	mov	r7, r6
 80070d6:	dc04      	bgt.n	80070e2 <__swbuf_r+0x3a>
 80070d8:	4621      	mov	r1, r4
 80070da:	4628      	mov	r0, r5
 80070dc:	f7ff fdb4 	bl	8006c48 <_fflush_r>
 80070e0:	b9e0      	cbnz	r0, 800711c <__swbuf_r+0x74>
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	60a3      	str	r3, [r4, #8]
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	701e      	strb	r6, [r3, #0]
 80070f0:	6962      	ldr	r2, [r4, #20]
 80070f2:	1c43      	adds	r3, r0, #1
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d004      	beq.n	8007102 <__swbuf_r+0x5a>
 80070f8:	89a3      	ldrh	r3, [r4, #12]
 80070fa:	07db      	lsls	r3, r3, #31
 80070fc:	d506      	bpl.n	800710c <__swbuf_r+0x64>
 80070fe:	2e0a      	cmp	r6, #10
 8007100:	d104      	bne.n	800710c <__swbuf_r+0x64>
 8007102:	4621      	mov	r1, r4
 8007104:	4628      	mov	r0, r5
 8007106:	f7ff fd9f 	bl	8006c48 <_fflush_r>
 800710a:	b938      	cbnz	r0, 800711c <__swbuf_r+0x74>
 800710c:	4638      	mov	r0, r7
 800710e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007110:	4621      	mov	r1, r4
 8007112:	4628      	mov	r0, r5
 8007114:	f000 f806 	bl	8007124 <__swsetup_r>
 8007118:	2800      	cmp	r0, #0
 800711a:	d0d5      	beq.n	80070c8 <__swbuf_r+0x20>
 800711c:	f04f 37ff 	mov.w	r7, #4294967295
 8007120:	e7f4      	b.n	800710c <__swbuf_r+0x64>
	...

08007124 <__swsetup_r>:
 8007124:	b538      	push	{r3, r4, r5, lr}
 8007126:	4b2a      	ldr	r3, [pc, #168]	; (80071d0 <__swsetup_r+0xac>)
 8007128:	4605      	mov	r5, r0
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	460c      	mov	r4, r1
 800712e:	b118      	cbz	r0, 8007138 <__swsetup_r+0x14>
 8007130:	6a03      	ldr	r3, [r0, #32]
 8007132:	b90b      	cbnz	r3, 8007138 <__swsetup_r+0x14>
 8007134:	f7fd ffe4 	bl	8005100 <__sinit>
 8007138:	89a3      	ldrh	r3, [r4, #12]
 800713a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800713e:	0718      	lsls	r0, r3, #28
 8007140:	d422      	bmi.n	8007188 <__swsetup_r+0x64>
 8007142:	06d9      	lsls	r1, r3, #27
 8007144:	d407      	bmi.n	8007156 <__swsetup_r+0x32>
 8007146:	2309      	movs	r3, #9
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800714e:	81a3      	strh	r3, [r4, #12]
 8007150:	f04f 30ff 	mov.w	r0, #4294967295
 8007154:	e034      	b.n	80071c0 <__swsetup_r+0x9c>
 8007156:	0758      	lsls	r0, r3, #29
 8007158:	d512      	bpl.n	8007180 <__swsetup_r+0x5c>
 800715a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715c:	b141      	cbz	r1, 8007170 <__swsetup_r+0x4c>
 800715e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007162:	4299      	cmp	r1, r3
 8007164:	d002      	beq.n	800716c <__swsetup_r+0x48>
 8007166:	4628      	mov	r0, r5
 8007168:	f7fe ffc8 	bl	80060fc <_free_r>
 800716c:	2300      	movs	r3, #0
 800716e:	6363      	str	r3, [r4, #52]	; 0x34
 8007170:	89a3      	ldrh	r3, [r4, #12]
 8007172:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007176:	81a3      	strh	r3, [r4, #12]
 8007178:	2300      	movs	r3, #0
 800717a:	6063      	str	r3, [r4, #4]
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	f043 0308 	orr.w	r3, r3, #8
 8007186:	81a3      	strh	r3, [r4, #12]
 8007188:	6923      	ldr	r3, [r4, #16]
 800718a:	b94b      	cbnz	r3, 80071a0 <__swsetup_r+0x7c>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007196:	d003      	beq.n	80071a0 <__swsetup_r+0x7c>
 8007198:	4621      	mov	r1, r4
 800719a:	4628      	mov	r0, r5
 800719c:	f000 f840 	bl	8007220 <__smakebuf_r>
 80071a0:	89a0      	ldrh	r0, [r4, #12]
 80071a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071a6:	f010 0301 	ands.w	r3, r0, #1
 80071aa:	d00a      	beq.n	80071c2 <__swsetup_r+0x9e>
 80071ac:	2300      	movs	r3, #0
 80071ae:	60a3      	str	r3, [r4, #8]
 80071b0:	6963      	ldr	r3, [r4, #20]
 80071b2:	425b      	negs	r3, r3
 80071b4:	61a3      	str	r3, [r4, #24]
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	b943      	cbnz	r3, 80071cc <__swsetup_r+0xa8>
 80071ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80071be:	d1c4      	bne.n	800714a <__swsetup_r+0x26>
 80071c0:	bd38      	pop	{r3, r4, r5, pc}
 80071c2:	0781      	lsls	r1, r0, #30
 80071c4:	bf58      	it	pl
 80071c6:	6963      	ldrpl	r3, [r4, #20]
 80071c8:	60a3      	str	r3, [r4, #8]
 80071ca:	e7f4      	b.n	80071b6 <__swsetup_r+0x92>
 80071cc:	2000      	movs	r0, #0
 80071ce:	e7f7      	b.n	80071c0 <__swsetup_r+0x9c>
 80071d0:	20000068 	.word	0x20000068

080071d4 <__swhatbuf_r>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	460c      	mov	r4, r1
 80071d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071dc:	2900      	cmp	r1, #0
 80071de:	b096      	sub	sp, #88	; 0x58
 80071e0:	4615      	mov	r5, r2
 80071e2:	461e      	mov	r6, r3
 80071e4:	da0d      	bge.n	8007202 <__swhatbuf_r+0x2e>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071ec:	f04f 0100 	mov.w	r1, #0
 80071f0:	bf0c      	ite	eq
 80071f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071f6:	2340      	movne	r3, #64	; 0x40
 80071f8:	2000      	movs	r0, #0
 80071fa:	6031      	str	r1, [r6, #0]
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	b016      	add	sp, #88	; 0x58
 8007200:	bd70      	pop	{r4, r5, r6, pc}
 8007202:	466a      	mov	r2, sp
 8007204:	f000 f848 	bl	8007298 <_fstat_r>
 8007208:	2800      	cmp	r0, #0
 800720a:	dbec      	blt.n	80071e6 <__swhatbuf_r+0x12>
 800720c:	9901      	ldr	r1, [sp, #4]
 800720e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007212:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007216:	4259      	negs	r1, r3
 8007218:	4159      	adcs	r1, r3
 800721a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800721e:	e7eb      	b.n	80071f8 <__swhatbuf_r+0x24>

08007220 <__smakebuf_r>:
 8007220:	898b      	ldrh	r3, [r1, #12]
 8007222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007224:	079d      	lsls	r5, r3, #30
 8007226:	4606      	mov	r6, r0
 8007228:	460c      	mov	r4, r1
 800722a:	d507      	bpl.n	800723c <__smakebuf_r+0x1c>
 800722c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	2301      	movs	r3, #1
 8007236:	6163      	str	r3, [r4, #20]
 8007238:	b002      	add	sp, #8
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	ab01      	add	r3, sp, #4
 800723e:	466a      	mov	r2, sp
 8007240:	f7ff ffc8 	bl	80071d4 <__swhatbuf_r>
 8007244:	9900      	ldr	r1, [sp, #0]
 8007246:	4605      	mov	r5, r0
 8007248:	4630      	mov	r0, r6
 800724a:	f7fd f9db 	bl	8004604 <_malloc_r>
 800724e:	b948      	cbnz	r0, 8007264 <__smakebuf_r+0x44>
 8007250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007254:	059a      	lsls	r2, r3, #22
 8007256:	d4ef      	bmi.n	8007238 <__smakebuf_r+0x18>
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	e7e3      	b.n	800722c <__smakebuf_r+0xc>
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	6020      	str	r0, [r4, #0]
 8007268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	9b00      	ldr	r3, [sp, #0]
 8007270:	6163      	str	r3, [r4, #20]
 8007272:	9b01      	ldr	r3, [sp, #4]
 8007274:	6120      	str	r0, [r4, #16]
 8007276:	b15b      	cbz	r3, 8007290 <__smakebuf_r+0x70>
 8007278:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800727c:	4630      	mov	r0, r6
 800727e:	f000 f81d 	bl	80072bc <_isatty_r>
 8007282:	b128      	cbz	r0, 8007290 <__smakebuf_r+0x70>
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	f023 0303 	bic.w	r3, r3, #3
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	81a3      	strh	r3, [r4, #12]
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	431d      	orrs	r5, r3
 8007294:	81a5      	strh	r5, [r4, #12]
 8007296:	e7cf      	b.n	8007238 <__smakebuf_r+0x18>

08007298 <_fstat_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4d07      	ldr	r5, [pc, #28]	; (80072b8 <_fstat_r+0x20>)
 800729c:	2300      	movs	r3, #0
 800729e:	4604      	mov	r4, r0
 80072a0:	4608      	mov	r0, r1
 80072a2:	4611      	mov	r1, r2
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f7fa fe2a 	bl	8001efe <_fstat>
 80072aa:	1c43      	adds	r3, r0, #1
 80072ac:	d102      	bne.n	80072b4 <_fstat_r+0x1c>
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	b103      	cbz	r3, 80072b4 <_fstat_r+0x1c>
 80072b2:	6023      	str	r3, [r4, #0]
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	bf00      	nop
 80072b8:	200009cc 	.word	0x200009cc

080072bc <_isatty_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d06      	ldr	r5, [pc, #24]	; (80072d8 <_isatty_r+0x1c>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	f7fa fe1e 	bl	8001f08 <_isatty>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_isatty_r+0x1a>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_isatty_r+0x1a>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	200009cc 	.word	0x200009cc

080072dc <_init>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	bf00      	nop
 80072e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072e2:	bc08      	pop	{r3}
 80072e4:	469e      	mov	lr, r3
 80072e6:	4770      	bx	lr

080072e8 <_fini>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	bf00      	nop
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr
