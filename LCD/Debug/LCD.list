
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a710  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac8  0800a8a0  0800a8a0  0000b8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b368  0800b368  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b368  0800b368  0000c368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b370  0800b370  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b370  0800b370  0000c370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b374  0800b374  0000c374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b378  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          000006d8  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b0  200008b0  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ed4  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004837  00000000  00000000  0002f0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00033918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2c  00000000  00000000  00034910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028cdc  00000000  00000000  0003553c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018865  00000000  00000000  0005e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df4dc  00000000  00000000  00076a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155f59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005830  00000000  00000000  00155f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0015b7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a888 	.word	0x0800a888

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a888 	.word	0x0800a888

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <_ZN4blib6AnalogC1Ev>:

#include "Analog.h"

namespace blib
{
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fa10 	bl	8001414 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <_ZN4blib6AnalogC1Ev+0x44>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a07      	ldr	r2, [pc, #28]	@ (800102c <_ZN4blib6AnalogC1Ev+0x48>)
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a07      	ldr	r2, [pc, #28]	@ (8001030 <_ZN4blib6AnalogC1Ev+0x4c>)
 8001014:	61da      	str	r2, [r3, #28]
    {
        sampling();
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f834 	bl	8001084 <_ZN4blib6Analog8samplingEv>
    }
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	0800ae70 	.word	0x0800ae70
 800102c:	20000604 	.word	0x20000604
 8001030:	2000064c 	.word	0x2000064c

08001034 <_ZN4blib6AnalogD1Ev>:

    Analog::~Analog()
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <_ZN4blib6AnalogD1Ev+0x2c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
    {
        HAL_ADC_Stop_DMA(mHadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4618      	mov	r0, r3
 8001048:	f002 f98c 	bl	8003364 <HAL_ADC_Stop_DMA>
    }
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f9f0 	bl	8001434 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	0800ae70 	.word	0x0800ae70

08001064 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    }
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffe1 	bl	8001034 <_ZN4blib6AnalogD1Ev>
 8001072:	2134      	movs	r1, #52	@ 0x34
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f005 f843 	bl	8006100 <_ZdlPvj>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6998      	ldr	r0, [r3, #24]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3304      	adds	r3, #4
 8001094:	2205      	movs	r2, #5
 8001096:	4619      	mov	r1, r3
 8001098:	f002 f854 	bl	8003144 <HAL_ADC_Start_DMA>
    }
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZNK4blib6Analog6getVinEv>:

    float Analog::getVin() const
    {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
        return mVin;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	ee07 3a90 	vmov	s15, r3
    }
 80010b4:	eeb0 0a67 	vmov.f32	s0, s15
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_ZNK4blib6Analog6getIinEv>:
    float Analog::getIin() const
    {
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
        return mIin;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ce:	ee07 3a90 	vmov	s15, r3
    }
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_ZNK4blib6Analog7getVoutEv>:
    float Analog::getVout() const
    {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
        return mVout;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	ee07 3a90 	vmov	s15, r3
    }
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_ZNK4blib6Analog7getIoutEv>:
    float Analog::getIout() const
    {
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
        return mIout;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800110a:	ee07 3a90 	vmov	s15, r3
    }
 800110e:	eeb0 0a67 	vmov.f32	s0, s15
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_ZN4blib6Analog10readAnalogEv>:
    {
        return mTemp;
    }

    void Analog::readAnalog()
    {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
        mVin = convertAdcChannel1(mAdcValues[0]);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f838 	bl	80011a0 <_ZN4blib6Analog18convertAdcChannel1Em>
 8001130:	eef0 7a40 	vmov.f32	s15, s0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edc3 7a08 	vstr	s15, [r3, #32]
        mIin = convertAdcChannel2(mAdcValues[1]);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	4619      	mov	r1, r3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f861 	bl	8001208 <_ZN4blib6Analog18convertAdcChannel2Em>
 8001146:	eef0 7a40 	vmov.f32	s15, s0
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        mVout = convertAdcChannel3(mAdcValues[2]);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	4619      	mov	r1, r3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f8a6 	bl	80012a8 <_ZN4blib6Analog18convertAdcChannel3Em>
 800115c:	eef0 7a40 	vmov.f32	s15, s0
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        mIout = convertAdcChannel4(mAdcValues[3]);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4619      	mov	r1, r3
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f8cf 	bl	8001310 <_ZN4blib6Analog18convertAdcChannel4Em>
 8001172:	eef0 7a40 	vmov.f32	s15, s0
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        mTemp = convertAdcChannel5(mAdcValues[4]);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	4619      	mov	r1, r3
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f000 f914 	bl	80013b0 <_ZN4blib6Analog18convertAdcChannel5Em>
 8001188:	eef0 7a40 	vmov.f32	s15, s0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
//        LOGI("mVin : [%.2f] V", mVin);
//        LOGI("mIin : [%.2f] A", mIin);
//        LOGI("mVout : [%.2f] V", mVout);
//        LOGI("mIout : [%.2f] A", mIout);
//        LOGI("mTemp : [%.2f] C", mTemp);
    }
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	0000      	movs	r0, r0
 800119c:	0000      	movs	r0, r0
	...

080011a0 <_ZN4blib6Analog18convertAdcChannel1Em>:

    float Analog::convertAdcChannel1(uint32_t adcValue)    // Convert adcValue -> Vin
    {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001200 <_ZN4blib6Analog18convertAdcChannel1Em+0x60>
 80011b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011bc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80011c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c4:	ee17 0a90 	vmov	r0, s15
 80011c8:	f7ff f9be 	bl	8000548 <__aeabi_f2d>
 80011cc:	a30a      	add	r3, pc, #40	@ (adr r3, 80011f8 <_ZN4blib6Analog18convertAdcChannel1Em+0x58>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff fa11 	bl	80005f8 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fd03 	bl	8000be8 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	ee07 3a90 	vmov	s15, r3
    }
 80011e8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	f3af 8000 	nop.w
 80011f8:	66666666 	.word	0x66666666
 80011fc:	400a6666 	.word	0x400a6666
 8001200:	457ff000 	.word	0x457ff000
 8001204:	00000000 	.word	0x00000000

08001208 <_ZN4blib6Analog18convertAdcChannel2Em>:

    float Analog::convertAdcChannel2(uint32_t adcValue)    // Convert adcValue -> Iin
    {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
        float voltage = CHANNEL_2_RATIO * ((float) adcValue / 4095) * 3.3;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800121c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80012a0 <_ZN4blib6Analog18convertAdcChannel2Em+0x98>
 8001220:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001224:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	ee17 0a90 	vmov	r0, s15
 8001230:	f7ff f98a 	bl	8000548 <__aeabi_f2d>
 8001234:	a316      	add	r3, pc, #88	@ (adr r3, 8001290 <_ZN4blib6Analog18convertAdcChannel2Em+0x88>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f9dd 	bl	80005f8 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fccf 	bl	8000be8 <__aeabi_d2f>
 800124a:	4603      	mov	r3, r0
 800124c:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff f97a 	bl	8000548 <__aeabi_f2d>
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <_ZN4blib6Analog18convertAdcChannel2Em+0x9c>)
 800125a:	f7ff f815 	bl	8000288 <__aeabi_dsub>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	a30c      	add	r3, pc, #48	@ (adr r3, 8001298 <_ZN4blib6Analog18convertAdcChannel2Em+0x90>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff faee 	bl	800084c <__aeabi_ddiv>
 8001270:	4602      	mov	r2, r0
 8001272:	460b      	mov	r3, r1
 8001274:	4610      	mov	r0, r2
 8001276:	4619      	mov	r1, r3
 8001278:	f7ff fcb6 	bl	8000be8 <__aeabi_d2f>
 800127c:	4603      	mov	r3, r0
 800127e:	60bb      	str	r3, [r7, #8]

        return current;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	ee07 3a90 	vmov	s15, r3
    }
 8001286:	eeb0 0a67 	vmov.f32	s0, s15
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	66666666 	.word	0x66666666
 8001294:	400a6666 	.word	0x400a6666
 8001298:	a0000000 	.word	0xa0000000
 800129c:	3fb99999 	.word	0x3fb99999
 80012a0:	457ff000 	.word	0x457ff000
 80012a4:	40040000 	.word	0x40040000

080012a8 <_ZN4blib6Analog18convertAdcChannel3Em>:
    float Analog::convertAdcChannel3(uint32_t adcValue)    // Convert adcValue -> Vout
    {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012bc:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001308 <_ZN4blib6Analog18convertAdcChannel3Em+0x60>
 80012c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012c4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80012c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012cc:	ee17 0a90 	vmov	r0, s15
 80012d0:	f7ff f93a 	bl	8000548 <__aeabi_f2d>
 80012d4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001300 <_ZN4blib6Analog18convertAdcChannel3Em+0x58>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff f98d 	bl	80005f8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc7f 	bl	8000be8 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	ee07 3a90 	vmov	s15, r3
    }
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	f3af 8000 	nop.w
 8001300:	66666666 	.word	0x66666666
 8001304:	400a6666 	.word	0x400a6666
 8001308:	457ff000 	.word	0x457ff000
 800130c:	00000000 	.word	0x00000000

08001310 <_ZN4blib6Analog18convertAdcChannel4Em>:
    float Analog::convertAdcChannel4(uint32_t adcValue)    // Convert adcValue -> Iout
    {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
        float voltage = CHANNEL_4_RATIO * ((float) adcValue / 4095) * 3.3;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001324:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80013a8 <_ZN4blib6Analog18convertAdcChannel4Em+0x98>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001334:	ee17 0a90 	vmov	r0, s15
 8001338:	f7ff f906 	bl	8000548 <__aeabi_f2d>
 800133c:	a316      	add	r3, pc, #88	@ (adr r3, 8001398 <_ZN4blib6Analog18convertAdcChannel4Em+0x88>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff f959 	bl	80005f8 <__aeabi_dmul>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fc4b 	bl	8000be8 <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
 8001354:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff f8f6 	bl	8000548 <__aeabi_f2d>
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <_ZN4blib6Analog18convertAdcChannel4Em+0x9c>)
 8001362:	f7fe ff91 	bl	8000288 <__aeabi_dsub>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	a30c      	add	r3, pc, #48	@ (adr r3, 80013a0 <_ZN4blib6Analog18convertAdcChannel4Em+0x90>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff fa6a 	bl	800084c <__aeabi_ddiv>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fc32 	bl	8000be8 <__aeabi_d2f>
 8001384:	4603      	mov	r3, r0
 8001386:	60bb      	str	r3, [r7, #8]

        return current;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	ee07 3a90 	vmov	s15, r3
    }
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	66666666 	.word	0x66666666
 800139c:	400a6666 	.word	0x400a6666
 80013a0:	a0000000 	.word	0xa0000000
 80013a4:	3fb99999 	.word	0x3fb99999
 80013a8:	457ff000 	.word	0x457ff000
 80013ac:	40040000 	.word	0x40040000

080013b0 <_ZN4blib6Analog18convertAdcChannel5Em>:
    float Analog::convertAdcChannel5(uint32_t adcValue)    // Convert adcValue -> Temperature NTC 10k
    {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001410 <_ZN4blib6Analog18convertAdcChannel5Em+0x60>
 80013c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013cc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d4:	ee17 0a90 	vmov	r0, s15
 80013d8:	f7ff f8b6 	bl	8000548 <__aeabi_f2d>
 80013dc:	a30a      	add	r3, pc, #40	@ (adr r3, 8001408 <_ZN4blib6Analog18convertAdcChannel5Em+0x58>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f7ff f909 	bl	80005f8 <__aeabi_dmul>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	4610      	mov	r0, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fbfb 	bl	8000be8 <__aeabi_d2f>
 80013f2:	4603      	mov	r3, r0
 80013f4:	ee07 3a90 	vmov	s15, r3
    }
 80013f8:	eeb0 0a67 	vmov.f32	s0, s15
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	f3af 8000 	nop.w
 8001408:	66666666 	.word	0x66666666
 800140c:	400a6666 	.word	0x400a6666
 8001410:	457ff000 	.word	0x457ff000

08001414 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
                {
 800141c:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev+0x1c>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	601a      	str	r2, [r3, #0]
                }
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	0800ae80 	.word	0x0800ae80

08001434 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>:
                virtual ~Singleton()
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
                {
                }
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev+0x1c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	0800ae80 	.word	0x0800ae80

08001454 <_ZN4blib2dp9SingletonINS_6AnalogEED0Ev>:
                virtual ~Singleton()
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
                }
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ffe9 	bl	8001434 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 8001462:	2104      	movs	r1, #4
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f004 fe4b 	bl	8006100 <_ZdlPvj>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <_ZN4blib6ButtonC1Ev>:
#include "Button.h"
#include "Monitor.h"

namespace blib
{
    Button::Button()
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f8ee 	bl	8001660 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 8001484:	4a03      	ldr	r2, [pc, #12]	@ (8001494 <_ZN4blib6ButtonC1Ev+0x20>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
    {

    }
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	0800ae90 	.word	0x0800ae90

08001498 <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <_ZN4blib6ButtonD1Ev+0x20>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
    {

    }
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f8e9 	bl	8001680 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	0800ae90 	.word	0x0800ae90

080014bc <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    }
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ffe7 	bl	8001498 <_ZN4blib6ButtonD1Ev>
 80014ca:	2108      	movs	r1, #8
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f004 fe17 	bl	8006100 <_ZdlPvj>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	605a      	str	r2, [r3, #4]
    }
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
        return mLatestPressedButton;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
    }
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
        auto &monitor = Monitor::getInstance();
 8001518:	f000 f8d2 	bl	80016c0 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 800151c:	60f8      	str	r0, [r7, #12]

        if (monitor.getScreenLevel() == Monitor::ScreenLevel::HOME_SCREEN)
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fd62 	bl	8001fe8 <_ZNK4blib7Monitor14getScreenLevelEv>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <_ZN4blib6Button12handleSignalEv+0x2c>
        {
            monitor.jumpIn();
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f000 fcee 	bl	8001f16 <_ZN4blib7Monitor6jumpInEv>
            {

            }
        }

    }
 800153a:	e08c      	b.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
        else if (monitor.getScreenLevel() == Monitor::ScreenLevel::NEXT_1)
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f000 fd53 	bl	8001fe8 <_ZNK4blib7Monitor14getScreenLevelEv>
 8001542:	4603      	mov	r3, r0
 8001544:	2b01      	cmp	r3, #1
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d03b      	beq.n	80015ca <_ZN4blib6Button12handleSignalEv+0xba>
            if (getLatestPressedButton() == ButtonName::UP)
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ffd0 	bl	80014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001558:	4603      	mov	r3, r0
 800155a:	2b01      	cmp	r3, #1
 800155c:	bf0c      	ite	eq
 800155e:	2301      	moveq	r3, #1
 8001560:	2300      	movne	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <_ZN4blib6Button12handleSignalEv+0x60>
                monitor.decrementArrowLine();
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fd6d 	bl	8002048 <_ZN4blib7Monitor18decrementArrowLineEv>
    }
 800156e:	e072      	b.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
            else if (getLatestPressedButton() == ButtonName::DOWN)
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffc1 	bl	80014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001576:	4603      	mov	r3, r0
 8001578:	2b02      	cmp	r3, #2
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <_ZN4blib6Button12handleSignalEv+0x7e>
                monitor.incrementArrowLine();
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fd3a 	bl	8002000 <_ZN4blib7Monitor18incrementArrowLineEv>
    }
 800158c:	e063      	b.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
            else if (getLatestPressedButton() == ButtonName::SEL)
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffb2 	bl	80014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001594:	4603      	mov	r3, r0
 8001596:	2b03      	cmp	r3, #3
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <_ZN4blib6Button12handleSignalEv+0x9c>
                monitor.jumpIn();
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f000 fcb6 	bl	8001f16 <_ZN4blib7Monitor6jumpInEv>
    }
 80015aa:	e054      	b.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
            else if (getLatestPressedButton() == ButtonName::BACK)
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffa3 	bl	80014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d049      	beq.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
                monitor.jumpOut();
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f000 fcd7 	bl	8001f76 <_ZN4blib7Monitor7jumpOutEv>
    }
 80015c8:	e045      	b.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
        else if (monitor.getScreenLevel() == Monitor::ScreenLevel::NEXT_2)
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 fd0c 	bl	8001fe8 <_ZNK4blib7Monitor14getScreenLevelEv>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	bf0c      	ite	eq
 80015d6:	2301      	moveq	r3, #1
 80015d8:	2300      	movne	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d03a      	beq.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
            if (getLatestPressedButton() == ButtonName::UP)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff ff89 	bl	80014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	bf0c      	ite	eq
 80015ec:	2301      	moveq	r3, #1
 80015ee:	2300      	movne	r3, #0
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <_ZN4blib6Button12handleSignalEv+0xee>
                monitor.decrementArrowLine();
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f000 fd26 	bl	8002048 <_ZN4blib7Monitor18decrementArrowLineEv>
    }
 80015fc:	e02b      	b.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
            else if (getLatestPressedButton() == ButtonName::DOWN)
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff7a 	bl	80014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001604:	4603      	mov	r3, r0
 8001606:	2b02      	cmp	r3, #2
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <_ZN4blib6Button12handleSignalEv+0x10c>
                monitor.incrementArrowLine();
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 fcf3 	bl	8002000 <_ZN4blib7Monitor18incrementArrowLineEv>
    }
 800161a:	e01c      	b.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
            else if (getLatestPressedButton() == ButtonName::SEL)
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff6b 	bl	80014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001622:	4603      	mov	r3, r0
 8001624:	2b03      	cmp	r3, #3
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <_ZN4blib6Button12handleSignalEv+0x12a>
                monitor.jumpIn();
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fc6f 	bl	8001f16 <_ZN4blib7Monitor6jumpInEv>
    }
 8001638:	e00d      	b.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
            else if (getLatestPressedButton() == ButtonName::BACK)
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff5c 	bl	80014f8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001640:	4603      	mov	r3, r0
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf0c      	ite	eq
 8001646:	2301      	moveq	r3, #1
 8001648:	2300      	movne	r3, #0
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <_ZN4blib6Button12handleSignalEv+0x146>
                monitor.jumpOut();
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 fc90 	bl	8001f76 <_ZN4blib7Monitor7jumpOutEv>
    }
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
                {
 8001668:	4a04      	ldr	r2, [pc, #16]	@ (800167c <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	601a      	str	r2, [r3, #0]
                }
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	0800aea0 	.word	0x0800aea0

08001680 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
                }
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	0800aea0 	.word	0x0800aea0

080016a0 <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
                }
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ffe9 	bl	8001680 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 80016ae:	2104      	movs	r1, #4
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f004 fd25 	bl	8006100 <_ZdlPvj>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>:
                static T& getInstance()
 80016c0:	b598      	push	{r3, r4, r7, lr}
 80016c2:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d109      	bne.n	80016e0 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 80016cc:	2028      	movs	r0, #40	@ 0x28
 80016ce:	f004 fd19 	bl	8006104 <_Znwj>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461c      	mov	r4, r3
 80016d6:	4620      	mov	r0, r4
 80016d8:	f000 fa3a 	bl	8001b50 <_ZN4blib7MonitorC1Ev>
 80016dc:	4b02      	ldr	r3, [pc, #8]	@ (80016e8 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 80016de:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80016e0:	4b01      	ldr	r3, [pc, #4]	@ (80016e8 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 80016e2:	681b      	ldr	r3, [r3, #0]
                }
 80016e4:	4618      	mov	r0, r3
 80016e6:	bd98      	pop	{r3, r4, r7, pc}
 80016e8:	200001f4 	.word	0x200001f4

080016ec <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 80016f4:	4b08      	ldr	r3, [pc, #32]	@ (8001718 <_ZN4blib6Logger5printEPKc+0x2c>)
 80016f6:	681c      	ldr	r4, [r3, #0]
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7fe fdb9 	bl	8000270 <strlen>
 80016fe:	4603      	mov	r3, r0
 8001700:	b29a      	uxth	r2, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4620      	mov	r0, r4
 800170a:	f004 f93d 	bl	8005988 <HAL_UART_Transmit>
            }
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	bf00      	nop
 8001718:	20000000 	.word	0x20000000

0800171c <_ZN4blib13ChargeControlC1Ev>:
#include "ChargeControl.h"

namespace blib
{

    ChargeControl::ChargeControl()
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f83c 	bl	80017a4 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <_ZN4blib13ChargeControlC1Ev+0x2c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	711a      	strb	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	715a      	strb	r2, [r3, #5]
    {

    }
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	0800aeb0 	.word	0x0800aeb0

0800174c <_ZN4blib13ChargeControlD1Ev>:
    ChargeControl::~ChargeControl()
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	4a05      	ldr	r2, [pc, #20]	@ (800176c <_ZN4blib13ChargeControlD1Ev+0x20>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	601a      	str	r2, [r3, #0]
    {

    }
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 f831 	bl	80017c4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	0800aeb0 	.word	0x0800aeb0

08001770 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
    }
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ffe7 	bl	800174c <_ZN4blib13ChargeControlD1Ev>
 800177e:	210c      	movs	r1, #12
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f004 fcbd 	bl	8006100 <_ZdlPvj>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <_ZN4blib13ChargeControl3runEv>:
    void ChargeControl::run()
    {
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

    }
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>:
                Singleton()
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
                {
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev+0x1c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	601a      	str	r2, [r3, #0]
                }
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	0800aec0 	.word	0x0800aec0

080017c4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>:
                virtual ~Singleton()
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
                }
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev+0x1c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	0800aec0 	.word	0x0800aec0

080017e4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED0Ev>:
                virtual ~Singleton()
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
                }
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe9 	bl	80017c4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
 80017f2:	2104      	movs	r1, #4
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f004 fc83 	bl	8006100 <_ZdlPvj>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af02      	add	r7, sp, #8
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 8001812:	480c      	ldr	r0, [pc, #48]	@ (8001844 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8001814:	f7ff ff6a 	bl	80016ec <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001828:	4807      	ldr	r0, [pc, #28]	@ (8001848 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 800182a:	f005 fc7b 	bl	8007124 <sniprintf>
                print(mBuffer);
 800182e:	4806      	ldr	r0, [pc, #24]	@ (8001848 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8001830:	f7ff ff5c 	bl	80016ec <_ZN4blib6Logger5printEPKc>
                print("\n");
 8001834:	4805      	ldr	r0, [pc, #20]	@ (800184c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 8001836:	f7ff ff59 	bl	80016ec <_ZN4blib6Logger5printEPKc>
            }
 800183a:	bf00      	nop
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	0800a8dc 	.word	0x0800a8dc
 8001848:	200001f8 	.word	0x200001f8
 800184c:	0800a8e4 	.word	0x0800a8e4

08001850 <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh>:
#include "Lcd.h"

namespace blib
{

    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	70fb      	strb	r3, [r7, #3]
            address)
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh+0x38>)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	601a      	str	r2, [r3, #0]
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	78fa      	ldrb	r2, [r7, #3]
 8001874:	731a      	strb	r2, [r3, #12]
    {
        init();
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f000 f908 	bl	8001a8c <_ZN4blib3Lcd4initEv>
    }
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	0800aed0 	.word	0x0800aed0

0800188c <_ZN4blib3LcdD1Ev>:
    Lcd::~Lcd()
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <_ZN4blib3LcdD1Ev+0x1c>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	601a      	str	r2, [r3, #0]
    {

    }
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	0800aed0 	.word	0x0800aed0

080018ac <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
    }
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ffe9 	bl	800188c <_ZN4blib3LcdD1Ev>
 80018ba:	2114      	movs	r1, #20
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f004 fc1f 	bl	8006100 <_ZdlPvj>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	2300      	movs	r3, #0
 80018de:	73bb      	strb	r3, [r7, #14]
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	f023 030f 	bic.w	r3, r3, #15
 80018e6:	73fb      	strb	r3, [r7, #15]
        dataLow = ((command << 4) & 0xF0);
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	73bb      	strb	r3, [r7, #14]
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	f043 030c 	orr.w	r3, r3, #12
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	723b      	strb	r3, [r7, #8]
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 80018f8:	7bfb      	ldrb	r3, [r7, #15]
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	727b      	strb	r3, [r7, #9]
        data[2] = dataLow | 0x0C;
 8001902:	7bbb      	ldrb	r3, [r7, #14]
 8001904:	f043 030c 	orr.w	r3, r3, #12
 8001908:	b2db      	uxtb	r3, r3
 800190a:	72bb      	strb	r3, [r7, #10]
        data[3] = dataLow | 0x08;
 800190c:	7bbb      	ldrb	r3, [r7, #14]
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	b2db      	uxtb	r3, r3
 8001914:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6898      	ldr	r0, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7b1b      	ldrb	r3, [r3, #12]
 800191e:	4619      	mov	r1, r3
 8001920:	f107 0208 	add.w	r2, r7, #8
 8001924:	2364      	movs	r3, #100	@ 0x64
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2304      	movs	r3, #4
 800192a:	f003 f82b 	bl	8004984 <HAL_I2C_Master_Transmit>
    }
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af02      	add	r7, sp, #8
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	2300      	movs	r3, #0
 8001948:	73bb      	strb	r3, [r7, #14]
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	f023 030f 	bic.w	r3, r3, #15
 8001950:	73fb      	strb	r3, [r7, #15]
        dataLow = ((data << 4) & 0xF0);
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	73bb      	strb	r3, [r7, #14]
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	f043 030d 	orr.w	r3, r3, #13
 800195e:	b2db      	uxtb	r3, r3
 8001960:	723b      	strb	r3, [r7, #8]
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	f043 0309 	orr.w	r3, r3, #9
 8001968:	b2db      	uxtb	r3, r3
 800196a:	727b      	strb	r3, [r7, #9]
        dataBuf[2] = dataLow | 0x0D;
 800196c:	7bbb      	ldrb	r3, [r7, #14]
 800196e:	f043 030d 	orr.w	r3, r3, #13
 8001972:	b2db      	uxtb	r3, r3
 8001974:	72bb      	strb	r3, [r7, #10]
        dataBuf[3] = dataLow | 0x09;
 8001976:	7bbb      	ldrb	r3, [r7, #14]
 8001978:	f043 0309 	orr.w	r3, r3, #9
 800197c:	b2db      	uxtb	r3, r3
 800197e:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6898      	ldr	r0, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7b1b      	ldrb	r3, [r3, #12]
 8001988:	4619      	mov	r1, r3
 800198a:	f107 0208 	add.w	r2, r7, #8
 800198e:	2364      	movs	r3, #100	@ 0x64
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2304      	movs	r3, #4
 8001994:	f002 fff6 	bl	8004984 <HAL_I2C_Master_Transmit>
    }
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_ZN4blib3Lcd11displayLineEhhPKc>:
    void Lcd::pushData()
    {

    }
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	72fb      	strb	r3, [r7, #11]
 80019ae:	4613      	mov	r3, r2
 80019b0:	72bb      	strb	r3, [r7, #10]
        uint8_t command = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	75fb      	strb	r3, [r7, #23]

        switch (mLcdType)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d032      	beq.n	8001a24 <_ZN4blib3Lcd11displayLineEhhPKc+0x84>
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d000      	beq.n	80019c4 <_ZN4blib3Lcd11displayLineEhhPKc+0x24>
                    default:
                        break;
                }
                break;
            default:
                break;
 80019c2:	e030      	b.n	8001a26 <_ZN4blib3Lcd11displayLineEhhPKc+0x86>
                switch (row)
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d82a      	bhi.n	8001a20 <_ZN4blib3Lcd11displayLineEhhPKc+0x80>
 80019ca:	a201      	add	r2, pc, #4	@ (adr r2, 80019d0 <_ZN4blib3Lcd11displayLineEhhPKc+0x30>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	080019e1 	.word	0x080019e1
 80019d4:	080019eb 	.word	0x080019eb
 80019d8:	080019fd 	.word	0x080019fd
 80019dc:	08001a0f 	.word	0x08001a0f
                        command = 0x80 | (col + 0x00);
 80019e0:	7abb      	ldrb	r3, [r7, #10]
 80019e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019e6:	75fb      	strb	r3, [r7, #23]
                        break;
 80019e8:	e01b      	b.n	8001a22 <_ZN4blib3Lcd11displayLineEhhPKc+0x82>
                        command = 0x80 | (col + 0x40);
 80019ea:	7abb      	ldrb	r3, [r7, #10]
 80019ec:	3340      	adds	r3, #64	@ 0x40
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	75fb      	strb	r3, [r7, #23]
                        break;
 80019fa:	e012      	b.n	8001a22 <_ZN4blib3Lcd11displayLineEhhPKc+0x82>
                        command = 0x80 | (col + 0x14);
 80019fc:	7abb      	ldrb	r3, [r7, #10]
 80019fe:	3314      	adds	r3, #20
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	75fb      	strb	r3, [r7, #23]
                        break;
 8001a0c:	e009      	b.n	8001a22 <_ZN4blib3Lcd11displayLineEhhPKc+0x82>
                        command = 0x80 | (col + 0x54);
 8001a0e:	7abb      	ldrb	r3, [r7, #10]
 8001a10:	3354      	adds	r3, #84	@ 0x54
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	b25b      	sxtb	r3, r3
 8001a16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	75fb      	strb	r3, [r7, #23]
                        break;
 8001a1e:	e000      	b.n	8001a22 <_ZN4blib3Lcd11displayLineEhhPKc+0x82>
                        break;
 8001a20:	bf00      	nop
                break;
 8001a22:	e000      	b.n	8001a26 <_ZN4blib3Lcd11displayLineEhhPKc+0x86>
                break;
 8001a24:	bf00      	nop
        }

        sendCmd(command);
 8001a26:	7dfb      	ldrb	r3, [r7, #23]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f7ff ff4e 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 8001a30:	e008      	b.n	8001a44 <_ZN4blib3Lcd11displayLineEhhPKc+0xa4>
        {
            sendData(*string);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f7ff ff7c 	bl	8001936 <_ZN4blib3Lcd8sendDataEh>
            string++;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	607b      	str	r3, [r7, #4]
        while (*string)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f2      	bne.n	8001a32 <_ZN4blib3Lcd11displayLineEhhPKc+0x92>
        }
    }
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop

08001a58 <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
        sendCmd(0x00);
 8001a60:	2100      	movs	r1, #0
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff32 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        for (uint8_t i = 0; i < 100; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e006      	b.n	8001a7c <_ZN4blib3Lcd12clearDisplayEv+0x24>
        {
            sendData(' ');
 8001a6e:	2120      	movs	r1, #32
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff60 	bl	8001936 <_ZN4blib3Lcd8sendDataEh>
        for (uint8_t i = 0; i < 100; i++)
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b63      	cmp	r3, #99	@ 0x63
 8001a80:	d9f5      	bls.n	8001a6e <_ZN4blib3Lcd12clearDisplayEv+0x16>
        }
    }
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_ZN4blib3Lcd4initEv>:
    void Lcd::init()
    {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2206      	movs	r2, #6
 8001a98:	735a      	strb	r2, [r3, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2228      	movs	r2, #40	@ 0x28
 8001a9e:	73da      	strb	r2, [r3, #15]
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	739a      	strb	r2, [r3, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_BLACKLIGHT;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	741a      	strb	r2, [r3, #16]

        HAL_Delay(50);
 8001aac:	2032      	movs	r0, #50	@ 0x32
 8001aae:	f001 fae1 	bl	8003074 <HAL_Delay>
        sendCmd(0x30);
 8001ab2:	2130      	movs	r1, #48	@ 0x30
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff09 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 8001aba:	2005      	movs	r0, #5
 8001abc:	f001 fada 	bl	8003074 <HAL_Delay>
        sendCmd(0x30);
 8001ac0:	2130      	movs	r1, #48	@ 0x30
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff02 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f001 fad3 	bl	8003074 <HAL_Delay>
        sendCmd(0x30);
 8001ace:	2130      	movs	r1, #48	@ 0x30
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fefb 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8001ad6:	200a      	movs	r0, #10
 8001ad8:	f001 facc 	bl	8003074 <HAL_Delay>
        sendCmd(0x20);
 8001adc:	2120      	movs	r1, #32
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff fef4 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8001ae4:	200a      	movs	r0, #10
 8001ae6:	f001 fac5 	bl	8003074 <HAL_Delay>

        sendCmd(mFunctionSet);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7bdb      	ldrb	r3, [r3, #15]
 8001aee:	4619      	mov	r1, r3
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff feeb 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f001 fabc 	bl	8003074 <HAL_Delay>
        sendCmd(mDisplayControl);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7b9b      	ldrb	r3, [r3, #14]
 8001b00:	4619      	mov	r1, r3
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fee2 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f001 fab3 	bl	8003074 <HAL_Delay>
        sendCmd(0x01);    //clear display
 8001b0e:	2101      	movs	r1, #1
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fedb 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 8001b16:	2002      	movs	r0, #2
 8001b18:	f001 faac 	bl	8003074 <HAL_Delay>
        sendCmd(mEntryMode);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7b5b      	ldrb	r3, [r3, #13]
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fed2 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f001 faa3 	bl	8003074 <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7b9b      	ldrb	r3, [r3, #14]
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	4619      	mov	r1, r3
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fec6 	bl	80018cc <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f001 fa97 	bl	8003074 <HAL_Delay>
    }
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <_ZN4blib7MonitorC1Ev>:
#include "Monitor.h"
#include "Button.h"
#include "Analog.h"
namespace blib
{
    Monitor::Monitor() : mLcdDisplay(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fafa 	bl	8002154 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>
 8001b60:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <_ZN4blib7MonitorC1Ev+0x64>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	721a      	strb	r2, [r3, #8]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	725a      	strb	r2, [r3, #9]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	729a      	strb	r2, [r3, #10]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f103 0014 	add.w	r0, r3, #20
 8001b90:	234e      	movs	r3, #78	@ 0x4e
 8001b92:	4a09      	ldr	r2, [pc, #36]	@ (8001bb8 <_ZN4blib7MonitorC1Ev+0x68>)
 8001b94:	2101      	movs	r1, #1
 8001b96:	f7ff fe5b 	bl	8001850 <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh>
    {
        showInit();
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f836 	bl	8001c0c <_ZN4blib7Monitor8showInitEv>
        HAL_Delay(1500);
 8001ba0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001ba4:	f001 fa66 	bl	8003074 <HAL_Delay>

    }
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	0800aee0 	.word	0x0800aee0
 8001bb8:	200006ac 	.word	0x200006ac

08001bbc <_ZN4blib7MonitorD1Ev>:
    Monitor::~Monitor()
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <_ZN4blib7MonitorD1Ev+0x2c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	601a      	str	r2, [r3, #0]
    {

    }
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3314      	adds	r3, #20
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fe5c 	bl	800188c <_ZN4blib3LcdD1Ev>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 facc 	bl	8002174 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	0800aee0 	.word	0x0800aee0

08001bec <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
    }
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe1 	bl	8001bbc <_ZN4blib7MonitorD1Ev>
 8001bfa:	2128      	movs	r1, #40	@ 0x28
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f004 fa7f 	bl	8006100 <_ZdlPvj>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
        LOGI();
 8001c14:	4b17      	ldr	r3, [pc, #92]	@ (8001c74 <_ZN4blib7Monitor8showInitEv+0x68>)
 8001c16:	221b      	movs	r2, #27
 8001c18:	4917      	ldr	r1, [pc, #92]	@ (8001c78 <_ZN4blib7Monitor8showInitEv+0x6c>)
 8001c1a:	4818      	ldr	r0, [pc, #96]	@ (8001c7c <_ZN4blib7Monitor8showInitEv+0x70>)
 8001c1c:	f7ff fdf2 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        mLcdDisplay.clearDisplay();
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3314      	adds	r3, #20
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff17 	bl	8001a58 <_ZN4blib3Lcd12clearDisplayEv>
        mLcdDisplay.displayLine(0, 2, "DO AN TOT NGHIEP");
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f103 0014 	add.w	r0, r3, #20
 8001c30:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <_ZN4blib7Monitor8showInitEv+0x74>)
 8001c32:	2202      	movs	r2, #2
 8001c34:	2100      	movs	r1, #0
 8001c36:	f7ff feb3 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(1, 2, "NAM HOC: 2023-2024");
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f103 0014 	add.w	r0, r3, #20
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <_ZN4blib7Monitor8showInitEv+0x78>)
 8001c42:	2202      	movs	r2, #2
 8001c44:	2101      	movs	r1, #1
 8001c46:	f7ff feab 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(2, 2, "LOP: DTD61DH");
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f103 0014 	add.w	r0, r3, #20
 8001c50:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <_ZN4blib7Monitor8showInitEv+0x7c>)
 8001c52:	2202      	movs	r2, #2
 8001c54:	2102      	movs	r1, #2
 8001c56:	f7ff fea3 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(3, 1, "DAI HOC HANG HAI VN");
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f103 0014 	add.w	r0, r3, #20
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <_ZN4blib7Monitor8showInitEv+0x80>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	2103      	movs	r1, #3
 8001c66:	f7ff fe9b 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800a8e8 	.word	0x0800a8e8
 8001c78:	0800a8f4 	.word	0x0800a8f4
 8001c7c:	0800a900 	.word	0x0800a900
 8001c80:	0800a910 	.word	0x0800a910
 8001c84:	0800a924 	.word	0x0800a924
 8001c88:	0800a938 	.word	0x0800a938
 8001c8c:	0800a948 	.word	0x0800a948

08001c90 <_ZN4blib7Monitor10homeScreenEv>:

    void Monitor::homeScreen()
    {
 8001c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c94:	ed2d 8b02 	vpush	{d8}
 8001c98:	b0a2      	sub	sp, #136	@ 0x88
 8001c9a:	af06      	add	r7, sp, #24
 8001c9c:	6078      	str	r0, [r7, #4]
        LOGI();
 8001c9e:	4b68      	ldr	r3, [pc, #416]	@ (8001e40 <_ZN4blib7Monitor10homeScreenEv+0x1b0>)
 8001ca0:	2225      	movs	r2, #37	@ 0x25
 8001ca2:	4968      	ldr	r1, [pc, #416]	@ (8001e44 <_ZN4blib7Monitor10homeScreenEv+0x1b4>)
 8001ca4:	4868      	ldr	r0, [pc, #416]	@ (8001e48 <_ZN4blib7Monitor10homeScreenEv+0x1b8>)
 8001ca6:	f7ff fdad 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

        const uint8_t COL = 21;
 8001caa:	2315      	movs	r3, #21
 8001cac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

        char line0[COL] = { 0 };
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	741a      	strb	r2, [r3, #16]
        char line1[COL] = { 0 };
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cc8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	741a      	strb	r2, [r3, #16]
        char line2[COL] = { 0 };
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	741a      	strb	r2, [r3, #16]
        char line3[COL] = "Press any button";
 8001cec:	4b57      	ldr	r3, [pc, #348]	@ (8001e4c <_ZN4blib7Monitor10homeScreenEv+0x1bc>)
 8001cee:	f107 0408 	add.w	r4, r7, #8
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	7023      	strb	r3, [r4, #0]
 8001cfc:	f107 0319 	add.w	r3, r7, #25
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        auto &analog = Analog::getInstance();
 8001d04:	f000 fa56 	bl	80021b4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001d08:	66b8      	str	r0, [r7, #104]	@ 0x68

        snprintf(line0, COL, "%02.1fV %02.1fA %02.1fW", analog.getVin(), analog.getIin(),
 8001d0a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001d0c:	f7ff f9ca 	bl	80010a4 <_ZNK4blib6Analog6getVinEv>
 8001d10:	ee10 3a10 	vmov	r3, s0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fc17 	bl	8000548 <__aeabi_f2d>
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	460d      	mov	r5, r1
 8001d1e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001d20:	f7ff f9cf 	bl	80010c2 <_ZNK4blib6Analog6getIinEv>
 8001d24:	ee10 3a10 	vmov	r3, s0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc0d 	bl	8000548 <__aeabi_f2d>
 8001d2e:	4680      	mov	r8, r0
 8001d30:	4689      	mov	r9, r1
                analog.getVin() * analog.getIin());
 8001d32:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001d34:	f7ff f9b6 	bl	80010a4 <_ZNK4blib6Analog6getVinEv>
 8001d38:	eeb0 8a40 	vmov.f32	s16, s0
 8001d3c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001d3e:	f7ff f9c0 	bl	80010c2 <_ZNK4blib6Analog6getIinEv>
 8001d42:	eef0 7a40 	vmov.f32	s15, s0
 8001d46:	ee68 7a27 	vmul.f32	s15, s16, s15
        snprintf(line0, COL, "%02.1fV %02.1fA %02.1fW", analog.getVin(), analog.getIin(),
 8001d4a:	ee17 0a90 	vmov	r0, s15
 8001d4e:	f7fe fbfb 	bl	8000548 <__aeabi_f2d>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001d5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d5e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d62:	e9cd 4500 	strd	r4, r5, [sp]
 8001d66:	4a3a      	ldr	r2, [pc, #232]	@ (8001e50 <_ZN4blib7Monitor10homeScreenEv+0x1c0>)
 8001d68:	2115      	movs	r1, #21
 8001d6a:	f005 f9db 	bl	8007124 <sniprintf>
        snprintf(line1, COL, "%02.1fV %02.1fA %02.1fW", analog.getVout(), analog.getIout(),
 8001d6e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001d70:	f7ff f9b6 	bl	80010e0 <_ZNK4blib6Analog7getVoutEv>
 8001d74:	ee10 3a10 	vmov	r3, s0
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fbe5 	bl	8000548 <__aeabi_f2d>
 8001d7e:	4604      	mov	r4, r0
 8001d80:	460d      	mov	r5, r1
 8001d82:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001d84:	f7ff f9bb 	bl	80010fe <_ZNK4blib6Analog7getIoutEv>
 8001d88:	ee10 3a10 	vmov	r3, s0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbdb 	bl	8000548 <__aeabi_f2d>
 8001d92:	4680      	mov	r8, r0
 8001d94:	4689      	mov	r9, r1
                analog.getVout() * analog.getIout());
 8001d96:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001d98:	f7ff f9a2 	bl	80010e0 <_ZNK4blib6Analog7getVoutEv>
 8001d9c:	eeb0 8a40 	vmov.f32	s16, s0
 8001da0:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001da2:	f7ff f9ac 	bl	80010fe <_ZNK4blib6Analog7getIoutEv>
 8001da6:	eef0 7a40 	vmov.f32	s15, s0
 8001daa:	ee68 7a27 	vmul.f32	s15, s16, s15
        snprintf(line1, COL, "%02.1fV %02.1fA %02.1fW", analog.getVout(), analog.getIout(),
 8001dae:	ee17 0a90 	vmov	r0, s15
 8001db2:	f7fe fbc9 	bl	8000548 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001dbe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001dc2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001dc6:	e9cd 4500 	strd	r4, r5, [sp]
 8001dca:	4a21      	ldr	r2, [pc, #132]	@ (8001e50 <_ZN4blib7Monitor10homeScreenEv+0x1c0>)
 8001dcc:	2115      	movs	r1, #21
 8001dce:	f005 f9a9 	bl	8007124 <sniprintf>
        snprintf(line2, COL, "%d", 1);
 8001dd2:	f107 0020 	add.w	r0, r7, #32
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e54 <_ZN4blib7Monitor10homeScreenEv+0x1c4>)
 8001dda:	2115      	movs	r1, #21
 8001ddc:	f005 f9a2 	bl	8007124 <sniprintf>

        mLcdDisplay.clearDisplay();
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3314      	adds	r3, #20
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fe37 	bl	8001a58 <_ZN4blib3Lcd12clearDisplayEv>
        mLcdDisplay.displayLine(0, 2, line0);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f103 0014 	add.w	r0, r3, #20
 8001df0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001df4:	2202      	movs	r2, #2
 8001df6:	2100      	movs	r1, #0
 8001df8:	f7ff fdd2 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(1, 2, line1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0014 	add.w	r0, r3, #20
 8001e02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e06:	2202      	movs	r2, #2
 8001e08:	2101      	movs	r1, #1
 8001e0a:	f7ff fdc9 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(2, 2, line2);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f103 0014 	add.w	r0, r3, #20
 8001e14:	f107 0320 	add.w	r3, r7, #32
 8001e18:	2202      	movs	r2, #2
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	f7ff fdc0 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(3, 1, line3);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f103 0014 	add.w	r0, r3, #20
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	f7ff fdb7 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 8001e32:	bf00      	nop
 8001e34:	3770      	adds	r7, #112	@ 0x70
 8001e36:	46bd      	mov	sp, r7
 8001e38:	ecbd 8b02 	vpop	{d8}
 8001e3c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e40:	0800a95c 	.word	0x0800a95c
 8001e44:	0800a8f4 	.word	0x0800a8f4
 8001e48:	0800a900 	.word	0x0800a900
 8001e4c:	0800a984 	.word	0x0800a984
 8001e50:	0800a968 	.word	0x0800a968
 8001e54:	0800a980 	.word	0x0800a980

08001e58 <_ZN4blib7Monitor10menuScreenEv>:

    void Monitor::menuScreen()
    {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
        if (isNeedRefreshLcd())
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f923 	bl	80020ac <_ZN4blib7Monitor16isNeedRefreshLcdEv>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d027      	beq.n	8001ebc <_ZN4blib7Monitor10menuScreenEv+0x64>
        {
            mLcdDisplay.clearDisplay();
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3314      	adds	r3, #20
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fdf1 	bl	8001a58 <_ZN4blib3Lcd12clearDisplayEv>
            mLcdDisplay.displayLine(0, 1, "DISPLAY MODE");
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f103 0014 	add.w	r0, r3, #20
 8001e7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <_ZN4blib7Monitor10menuScreenEv+0x6c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2100      	movs	r1, #0
 8001e82:	f7ff fd8d 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
            mLcdDisplay.displayLine(1, 1, "SETTING MODE");
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f103 0014 	add.w	r0, r3, #20
 8001e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec8 <_ZN4blib7Monitor10menuScreenEv+0x70>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2101      	movs	r1, #1
 8001e92:	f7ff fd85 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
            mLcdDisplay.displayLine(2, 1, "ABOUT");
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f103 0014 	add.w	r0, r3, #20
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <_ZN4blib7Monitor10menuScreenEv+0x74>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	f7ff fd7d 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
            mLcdDisplay.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f103 0014 	add.w	r0, r3, #20
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <_ZN4blib7Monitor10menuScreenEv+0x78>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	2103      	movs	r1, #3
 8001eb2:	f7ff fd75 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
            showArrow();
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f91e 	bl	80020f8 <_ZN4blib7Monitor9showArrowEv>
        }
    }
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	0800a99c 	.word	0x0800a99c
 8001ec8:	0800a9ac 	.word	0x0800a9ac
 8001ecc:	0800a9bc 	.word	0x0800a9bc
 8001ed0:	0800a9c4 	.word	0x0800a9c4

08001ed4 <_ZN4blib7Monitor8showMenuEv>:
    // Show when button pressed
    void Monitor::showMenu()
    {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
        if (mScreenLevel == Monitor::ScreenLevel::HOME_SCREEN)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	bf0c      	ite	eq
 8001ee4:	2301      	moveq	r3, #1
 8001ee6:	2300      	movne	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <_ZN4blib7Monitor8showMenuEv+0x22>
        {
            homeScreen();
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fece 	bl	8001c90 <_ZN4blib7Monitor10homeScreenEv>
        }
        else
        {

        }
    }
 8001ef4:	e00b      	b.n	8001f0e <_ZN4blib7Monitor8showMenuEv+0x3a>
        else if (mScreenLevel == Monitor::ScreenLevel::NEXT_1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	bf0c      	ite	eq
 8001efe:	2301      	moveq	r3, #1
 8001f00:	2300      	movne	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d002      	beq.n	8001f0e <_ZN4blib7Monitor8showMenuEv+0x3a>
            menuScreen();
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffa5 	bl	8001e58 <_ZN4blib7Monitor10menuScreenEv>
    }
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_ZN4blib7Monitor6jumpInEv>:
    {
        return mSettingMode;
    }

    void Monitor::jumpIn()
    {
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
        if (mScreenLevel == ScreenLevel::HOME_SCREEN)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bf0c      	ite	eq
 8001f26:	2301      	moveq	r3, #1
 8001f28:	2300      	movne	r3, #0
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <_ZN4blib7Monitor6jumpInEv+0x22>
        {
            mScreenLevel = ScreenLevel::NEXT_1;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	605a      	str	r2, [r3, #4]
        }
        else
        {
            // Do nothing
        }
    }
 8001f36:	e018      	b.n	8001f6a <_ZN4blib7Monitor6jumpInEv+0x54>
        else if (mScreenLevel == ScreenLevel::NEXT_1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <_ZN4blib7Monitor6jumpInEv+0x3c>
            mScreenLevel = ScreenLevel::NEXT_2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	605a      	str	r2, [r3, #4]
    }
 8001f50:	e00b      	b.n	8001f6a <_ZN4blib7Monitor6jumpInEv+0x54>
        else if (mScreenLevel == ScreenLevel::NEXT_2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <_ZN4blib7Monitor6jumpInEv+0x54>
            mScreenLevel = ScreenLevel::NEXT_3;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	605a      	str	r2, [r3, #4]
    }
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <_ZN4blib7Monitor7jumpOutEv>:

    void Monitor::jumpOut()
    {
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
        if (mScreenLevel == ScreenLevel::HOME_SCREEN)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bf0c      	ite	eq
 8001f86:	2301      	moveq	r3, #1
 8001f88:	2300      	movne	r3, #0
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d125      	bne.n	8001fdc <_ZN4blib7Monitor7jumpOutEv+0x66>
        {
            // Do nothing
        }
        else if (mScreenLevel == ScreenLevel::NEXT_1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <_ZN4blib7Monitor7jumpOutEv+0x34>
        {
            mScreenLevel = ScreenLevel::HOME_SCREEN;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	605a      	str	r2, [r3, #4]
        }
        else
        {
            // Do nothing
        }
    }
 8001fa8:	e018      	b.n	8001fdc <_ZN4blib7Monitor7jumpOutEv+0x66>
        else if (mScreenLevel == ScreenLevel::NEXT_2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <_ZN4blib7Monitor7jumpOutEv+0x4e>
            mScreenLevel = ScreenLevel::NEXT_1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	605a      	str	r2, [r3, #4]
    }
 8001fc2:	e00b      	b.n	8001fdc <_ZN4blib7Monitor7jumpOutEv+0x66>
        else if (mScreenLevel == ScreenLevel::NEXT_3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	bf0c      	ite	eq
 8001fcc:	2301      	moveq	r3, #1
 8001fce:	2300      	movne	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d002      	beq.n	8001fdc <_ZN4blib7Monitor7jumpOutEv+0x66>
            mScreenLevel = ScreenLevel::NEXT_2;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2202      	movs	r2, #2
 8001fda:	605a      	str	r2, [r3, #4]
    }
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_ZNK4blib7Monitor14getScreenLevelEv>:

    Monitor::ScreenLevel Monitor::getScreenLevel() const
    {
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
        return mScreenLevel;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
    }
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_ZN4blib7Monitor18incrementArrowLineEv>:
    void Monitor::incrementArrowLine()
    {
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    	mLastArrowLine = mArrowLine;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7a9b      	ldrb	r3, [r3, #10]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	725a      	strb	r2, [r3, #9]
        if (mArrowLine == 2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7a9b      	ldrb	r3, [r3, #10]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <_ZN4blib7Monitor18incrementArrowLineEv+0x2e>
        {
            mArrowLine = 0;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	729a      	strb	r2, [r3, #10]
        }
        else
        {
            mArrowLine++;
        }
    }
 800202c:	e006      	b.n	800203c <_ZN4blib7Monitor18incrementArrowLineEv+0x3c>
            mArrowLine++;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7a9b      	ldrb	r3, [r3, #10]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	3301      	adds	r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	729a      	strb	r2, [r3, #10]
    }
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_ZN4blib7Monitor18decrementArrowLineEv>:
    void Monitor::decrementArrowLine()
    {
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
    	mLastArrowLine = mArrowLine;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7a9b      	ldrb	r3, [r3, #10]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	725a      	strb	r2, [r3, #9]
        if (mArrowLine == 0)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	7a9b      	ldrb	r3, [r3, #10]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <_ZN4blib7Monitor18decrementArrowLineEv+0x2e>
        {
            mArrowLine = 2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	729a      	strb	r2, [r3, #10]
        }
        else
        {
            mArrowLine--;
        }
    }
 8002074:	e006      	b.n	8002084 <_ZN4blib7Monitor18decrementArrowLineEv+0x3c>
            mArrowLine--;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7a9b      	ldrb	r3, [r3, #10]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b2da      	uxtb	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	729a      	strb	r2, [r3, #10]
    }
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_ZNK4blib7Monitor12getArrowLineEv>:
    uint8_t Monitor::getArrowLine() const
    {
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
        return mArrowLine;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7a9b      	ldrb	r3, [r3, #10]
 800209c:	b2db      	uxtb	r3, r3
    }
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <_ZN4blib7Monitor16isNeedRefreshLcdEv>:
    Monitor::DisplayLevel Monitor::getDisplayLevel() const
    {
        return mDisplayLevel;
    }
    bool Monitor::isNeedRefreshLcd()
    {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
        static ScreenLevel lastScreenLevel = ScreenLevel::HOME_SCREEN;
        static uint8_t lastArrLine = 0;

        if (lastScreenLevel != getScreenLevel() || lastArrLine != getArrowLine())
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff97 	bl	8001fe8 <_ZNK4blib7Monitor14getScreenLevelEv>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b0c      	ldr	r3, [pc, #48]	@ (80020f0 <_ZN4blib7Monitor16isNeedRefreshLcdEv+0x44>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d108      	bne.n	80020d6 <_ZN4blib7Monitor16isNeedRefreshLcdEv+0x2a>
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ffe3 	bl	8002090 <_ZNK4blib7Monitor12getArrowLineEv>
 80020ca:	4603      	mov	r3, r0
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b09      	ldr	r3, [pc, #36]	@ (80020f4 <_ZN4blib7Monitor16isNeedRefreshLcdEv+0x48>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <_ZN4blib7Monitor16isNeedRefreshLcdEv+0x2e>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <_ZN4blib7Monitor16isNeedRefreshLcdEv+0x30>
 80020da:	2300      	movs	r3, #0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_ZN4blib7Monitor16isNeedRefreshLcdEv+0x38>
        {
            return true;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <_ZN4blib7Monitor16isNeedRefreshLcdEv+0x3a>
        }

        return false;
 80020e4:	2300      	movs	r3, #0
    }
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200005f8 	.word	0x200005f8
 80020f4:	200005fc 	.word	0x200005fc

080020f8 <_ZN4blib7Monitor9showArrowEv>:
    void Monitor::showArrow()
    {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    	mLcdDisplay.displayLine(0, 0, " ");
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0014 	add.w	r0, r3, #20
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <_ZN4blib7Monitor9showArrowEv+0x54>)
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	f7ff fc48 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
    	mLcdDisplay.displayLine(1, 0, " ");
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f103 0014 	add.w	r0, r3, #20
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <_ZN4blib7Monitor9showArrowEv+0x54>)
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	f7ff fc40 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
    	mLcdDisplay.displayLine(2, 0, " ");
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f103 0014 	add.w	r0, r3, #20
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <_ZN4blib7Monitor9showArrowEv+0x54>)
 8002128:	2200      	movs	r2, #0
 800212a:	2102      	movs	r1, #2
 800212c:	f7ff fc38 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(mArrowLine, 0, ">");
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f103 0014 	add.w	r0, r3, #20
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7a9b      	ldrb	r3, [r3, #10]
 800213a:	b2d9      	uxtb	r1, r3
 800213c:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <_ZN4blib7Monitor9showArrowEv+0x58>)
 800213e:	2200      	movs	r2, #0
 8002140:	f7ff fc2e 	bl	80019a0 <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	0800a9dc 	.word	0x0800a9dc
 8002150:	0800a9e0 	.word	0x0800a9e0

08002154 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>:
                Singleton()
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
                {
 800215c:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev+0x1c>)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	601a      	str	r2, [r3, #0]
                }
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	0800aef0 	.word	0x0800aef0

08002174 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>:
                virtual ~Singleton()
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
                }
 800217c:	4a04      	ldr	r2, [pc, #16]	@ (8002190 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev+0x1c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	0800aef0 	.word	0x0800aef0

08002194 <_ZN4blib2dp9SingletonINS_7MonitorEED0Ev>:
                virtual ~Singleton()
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
                }
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffe9 	bl	8002174 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
 80021a2:	2104      	movs	r1, #4
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f003 ffab 	bl	8006100 <_ZdlPvj>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 80021b4:	b598      	push	{r3, r4, r7, lr}
 80021b6:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x20>
                        mInstance = new T();
 80021c0:	2034      	movs	r0, #52	@ 0x34
 80021c2:	f003 ff9f 	bl	8006104 <_Znwj>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461c      	mov	r4, r3
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7fe ff0a 	bl	8000fe4 <_ZN4blib6AnalogC1Ev>
 80021d0:	4b02      	ldr	r3, [pc, #8]	@ (80021dc <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80021d2:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80021d4:	4b01      	ldr	r3, [pc, #4]	@ (80021dc <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80021d6:	681b      	ldr	r3, [r3, #0]
                }
 80021d8:	4618      	mov	r0, r3
 80021da:	bd98      	pop	{r3, r4, r7, pc}
 80021dc:	20000600 	.word	0x20000600

080021e0 <_ZN4blib13SerialMonitorC1Ev>:
#include "SerialMonitor.h"

namespace blib
{

    SerialMonitor::SerialMonitor()
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f8b8 	bl	8002360 <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev>
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <_ZN4blib13SerialMonitorC1Ev+0x30>)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_1);    // TODO: test
 80021fc:	2101      	movs	r1, #1
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f850 	bl	80022a4 <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>
    }
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	0800af00 	.word	0x0800af00

08002214 <_ZN4blib13SerialMonitorD1Ev>:
    SerialMonitor::~SerialMonitor()
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	4a07      	ldr	r2, [pc, #28]	@ (800223c <_ZN4blib13SerialMonitorD1Ev+0x28>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_0);
 8002222:	2100      	movs	r1, #0
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f83d 	bl	80022a4 <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>
    }
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f8a7 	bl	8002380 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	0800af00 	.word	0x0800af00

08002240 <_ZN4blib13SerialMonitorD0Ev>:
    SerialMonitor::~SerialMonitor()
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    }
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ffe3 	bl	8002214 <_ZN4blib13SerialMonitorD1Ev>
 800224e:	2108      	movs	r1, #8
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f003 ff55 	bl	8006100 <_ZdlPvj>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_ZN4blib13SerialMonitor4showEv>:
    void SerialMonitor::show()
    {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
        switch (getSerialLevel())
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 f830 	bl	80022ce <_ZNK4blib13SerialMonitor14getSerialLevelEv>
 800226e:	4603      	mov	r3, r0
 8002270:	2b03      	cmp	r3, #3
 8002272:	d00e      	beq.n	8002292 <_ZN4blib13SerialMonitor4showEv+0x32>
 8002274:	2b03      	cmp	r3, #3
 8002276:	dc10      	bgt.n	800229a <_ZN4blib13SerialMonitor4showEv+0x3a>
 8002278:	2b01      	cmp	r3, #1
 800227a:	d002      	beq.n	8002282 <_ZN4blib13SerialMonitor4showEv+0x22>
 800227c:	2b02      	cmp	r3, #2
 800227e:	d004      	beq.n	800228a <_ZN4blib13SerialMonitor4showEv+0x2a>
                serialLevel3();
                break;
            case SerialLevel::SERIAL_LEVEL_0:
            case SerialLevel::SERIAL_LEVEL_MAX:
            default:
                break;
 8002280:	e00b      	b.n	800229a <_ZN4blib13SerialMonitor4showEv+0x3a>
                serialLevel1();
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f830 	bl	80022e8 <_ZN4blib13SerialMonitor12serialLevel1Ev>
                break;
 8002288:	e008      	b.n	800229c <_ZN4blib13SerialMonitor4showEv+0x3c>
                serialLevel2();
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f840 	bl	8002310 <_ZN4blib13SerialMonitor12serialLevel2Ev>
                break;
 8002290:	e004      	b.n	800229c <_ZN4blib13SerialMonitor4showEv+0x3c>
                serialLevel3();
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f850 	bl	8002338 <_ZN4blib13SerialMonitor12serialLevel3Ev>
                break;
 8002298:	e000      	b.n	800229c <_ZN4blib13SerialMonitor4showEv+0x3c>
                break;
 800229a:	bf00      	nop
        }
    }
 800229c:	bf00      	nop
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>:

    void SerialMonitor::setSerialLevel(const SerialLevel val)
    {
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
        uint8_t u8SerialLevel = (uint8_t) val;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	73fb      	strb	r3, [r7, #15]

        if (u8SerialLevel < 0)
        {
            u8SerialLevel = (uint8_t) SerialLevel::SERIAL_LEVEL_MAX - 1;    // Rotate
        }
        else if (u8SerialLevel >= (uint8_t) SerialLevel::SERIAL_LEVEL_MAX)
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d901      	bls.n	80022bc <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE+0x18>
        {
            u8SerialLevel = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
        }

        mSerialLevel = (SerialLevel) u8SerialLevel;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]
    }
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_ZNK4blib13SerialMonitor14getSerialLevelEv>:
    SerialMonitor::SerialLevel SerialMonitor::getSerialLevel() const
    {
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
        return mSerialLevel;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
    }
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <_ZN4blib13SerialMonitor12serialLevel1Ev>:

    void SerialMonitor::serialLevel1()
    {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
        LOGI(
 80022f0:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x1c>)
 80022f2:	2242      	movs	r2, #66	@ 0x42
 80022f4:	4904      	ldr	r1, [pc, #16]	@ (8002308 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x20>)
 80022f6:	4805      	ldr	r0, [pc, #20]	@ (800230c <_ZN4blib13SerialMonitor12serialLevel1Ev+0x24>)
 80022f8:	f7ff fa84 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " ERR:" " FLV:" " BNC:" " IUV:" " IOC:" " OOV:" " OOC:" " OTE:" " REC:" " MPPTA:" " CM:"

                " " " BYP:" " EN:" " FAN:" " WiFi:" " " " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " " " CSMPV:" " CSV:" " VO%Dev:" " SOC:" " T:" " LoopT:");
    }
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	0800abcc 	.word	0x0800abcc
 8002308:	0800abdc 	.word	0x0800abdc
 800230c:	0800abf0 	.word	0x0800abf0

08002310 <_ZN4blib13SerialMonitor12serialLevel2Ev>:
    void SerialMonitor::serialLevel2()
    {
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
        LOGI(
 8002318:	4b04      	ldr	r3, [pc, #16]	@ (800232c <_ZN4blib13SerialMonitor12serialLevel2Ev+0x1c>)
 800231a:	2249      	movs	r2, #73	@ 0x49
 800231c:	4904      	ldr	r1, [pc, #16]	@ (8002330 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x20>)
 800231e:	4805      	ldr	r0, [pc, #20]	@ (8002334 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x24>)
 8002320:	f7ff fa70 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " EN:" " FAN:" " SOC:" " T:" " LoopT:" "");
    }
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	0800ac9c 	.word	0x0800ac9c
 8002330:	0800abdc 	.word	0x0800abdc
 8002334:	0800acac 	.word	0x0800acac

08002338 <_ZN4blib13SerialMonitor12serialLevel3Ev>:
    void SerialMonitor::serialLevel3()
    {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
        LOGI();
 8002340:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x1c>)
 8002342:	224e      	movs	r2, #78	@ 0x4e
 8002344:	4904      	ldr	r1, [pc, #16]	@ (8002358 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x20>)
 8002346:	4805      	ldr	r0, [pc, #20]	@ (800235c <_ZN4blib13SerialMonitor12serialLevel3Ev+0x24>)
 8002348:	f7ff fa5c 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	0800acfc 	.word	0x0800acfc
 8002358:	0800abdc 	.word	0x0800abdc
 800235c:	0800ad0c 	.word	0x0800ad0c

08002360 <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev>:
                Singleton()
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
                {
 8002368:	4a04      	ldr	r2, [pc, #16]	@ (800237c <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev+0x1c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	601a      	str	r2, [r3, #0]
                }
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	0800af10 	.word	0x0800af10

08002380 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>:
                virtual ~Singleton()
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
                }
 8002388:	4a04      	ldr	r2, [pc, #16]	@ (800239c <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev+0x1c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	0800af10 	.word	0x0800af10

080023a0 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED0Ev>:
                virtual ~Singleton()
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
                }
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ffe9 	bl	8002380 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>
 80023ae:	2104      	movs	r1, #4
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f003 fea5 	bl	8006100 <_ZdlPvj>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_GPIO_EXTI_Callback>:
static void MX_I2C1_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 2000000U;
 80023ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002508 <HAL_GPIO_EXTI_Callback+0x148>)
 80023d0:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	e002      	b.n	80023de <HAL_GPIO_EXTI_Callback+0x1e>
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3301      	adds	r3, #1
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	bf8c      	ite	hi
 80023e6:	2301      	movhi	r3, #1
 80023e8:	2300      	movls	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f3      	bne.n	80023d8 <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == GPIO_PIN_0)
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d10b      	bne.n	8002412 <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Up pin");
 80023fa:	4b44      	ldr	r3, [pc, #272]	@ (800250c <HAL_GPIO_EXTI_Callback+0x14c>)
 80023fc:	224f      	movs	r2, #79	@ 0x4f
 80023fe:	4944      	ldr	r1, [pc, #272]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x150>)
 8002400:	4844      	ldr	r0, [pc, #272]	@ (8002514 <HAL_GPIO_EXTI_Callback+0x154>)
 8002402:	f7ff f9ff 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::UP;
 8002406:	4b44      	ldr	r3, [pc, #272]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x158>)
 8002408:	2201      	movs	r2, #1
 800240a:	601a      	str	r2, [r3, #0]
        pGPIOx = GPIOC;
 800240c:	4b43      	ldr	r3, [pc, #268]	@ (800251c <HAL_GPIO_EXTI_Callback+0x15c>)
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	e032      	b.n	8002478 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == GPIO_PIN_1)
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d10b      	bne.n	8002430 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Down pin");
 8002418:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <HAL_GPIO_EXTI_Callback+0x14c>)
 800241a:	2255      	movs	r2, #85	@ 0x55
 800241c:	493c      	ldr	r1, [pc, #240]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x150>)
 800241e:	4840      	ldr	r0, [pc, #256]	@ (8002520 <HAL_GPIO_EXTI_Callback+0x160>)
 8002420:	f7ff f9f0 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::DOWN;
 8002424:	4b3c      	ldr	r3, [pc, #240]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x158>)
 8002426:	2202      	movs	r2, #2
 8002428:	601a      	str	r2, [r3, #0]
        pGPIOx = GPIOC;
 800242a:	4b3c      	ldr	r3, [pc, #240]	@ (800251c <HAL_GPIO_EXTI_Callback+0x15c>)
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e023      	b.n	8002478 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == GPIO_PIN_2)
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	2b04      	cmp	r3, #4
 8002434:	d10b      	bne.n	800244e <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 8002436:	4b35      	ldr	r3, [pc, #212]	@ (800250c <HAL_GPIO_EXTI_Callback+0x14c>)
 8002438:	225b      	movs	r2, #91	@ 0x5b
 800243a:	4935      	ldr	r1, [pc, #212]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x150>)
 800243c:	4839      	ldr	r0, [pc, #228]	@ (8002524 <HAL_GPIO_EXTI_Callback+0x164>)
 800243e:	f7ff f9e1 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 8002442:	4b35      	ldr	r3, [pc, #212]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x158>)
 8002444:	2204      	movs	r2, #4
 8002446:	601a      	str	r2, [r3, #0]
        pGPIOx = GPIOC;
 8002448:	4b34      	ldr	r3, [pc, #208]	@ (800251c <HAL_GPIO_EXTI_Callback+0x15c>)
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	e014      	b.n	8002478 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == GPIO_PIN_3)
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d10b      	bne.n	800246c <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 8002454:	4b2d      	ldr	r3, [pc, #180]	@ (800250c <HAL_GPIO_EXTI_Callback+0x14c>)
 8002456:	2261      	movs	r2, #97	@ 0x61
 8002458:	492d      	ldr	r1, [pc, #180]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x150>)
 800245a:	4833      	ldr	r0, [pc, #204]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x168>)
 800245c:	f7ff f9d2 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SEL;
 8002460:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x158>)
 8002462:	2203      	movs	r2, #3
 8002464:	601a      	str	r2, [r3, #0]
        pGPIOx = GPIOC;
 8002466:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <HAL_GPIO_EXTI_Callback+0x15c>)
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	e005      	b.n	8002478 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <HAL_GPIO_EXTI_Callback+0x14c>)
 800246e:	2267      	movs	r2, #103	@ 0x67
 8002470:	4927      	ldr	r1, [pc, #156]	@ (8002510 <HAL_GPIO_EXTI_Callback+0x150>)
 8002472:	482e      	ldr	r0, [pc, #184]	@ (800252c <HAL_GPIO_EXTI_Callback+0x16c>)
 8002474:	f7ff f9c6 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 8002478:	f000 fac0 	bl	80029fc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800247c:	4602      	mov	r2, r0
 800247e:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <HAL_GPIO_EXTI_Callback+0x158>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4619      	mov	r1, r3
 8002484:	4610      	mov	r0, r2
 8002486:	f7ff f829 	bl	80014dc <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 800248a:	f000 fab7 	bl	80029fc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800248e:	4603      	mov	r3, r0
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff f83d 	bl	8001510 <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01e      	beq.n	80024da <HAL_GPIO_EXTI_Callback+0x11a>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	4619      	mov	r1, r3
 80024a8:	69f8      	ldr	r0, [r7, #28]
 80024aa:	f002 f8f7 	bl	800469c <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	69b9      	ldr	r1, [r7, #24]
 80024be:	4299      	cmp	r1, r3
 80024c0:	bf8c      	ite	hi
 80024c2:	2301      	movhi	r3, #1
 80024c4:	2300      	movls	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	4013      	ands	r3, r2
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e1      	bne.n	800249e <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	e002      	b.n	80024e6 <HAL_GPIO_EXTI_Callback+0x126>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3301      	adds	r3, #1
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	bf8c      	ite	hi
 80024ee:	2301      	movhi	r3, #1
 80024f0:	2300      	movls	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f3      	bne.n	80024e0 <HAL_GPIO_EXTI_Callback+0x120>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 80024f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x170>)
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	6153      	str	r3, [r2, #20]
}
 80024fe:	bf00      	nop
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	001e8480 	.word	0x001e8480
 800250c:	0800ad28 	.word	0x0800ad28
 8002510:	0800ad40 	.word	0x0800ad40
 8002514:	0800ad4c 	.word	0x0800ad4c
 8002518:	20000748 	.word	0x20000748
 800251c:	40020800 	.word	0x40020800
 8002520:	0800ad68 	.word	0x0800ad68
 8002524:	0800ad88 	.word	0x0800ad88
 8002528:	0800ada8 	.word	0x0800ada8
 800252c:	0800adc8 	.word	0x0800adc8
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    blib::Analog::getInstance().sampling();
 800253c:	f7ff fe3a 	bl	80021b4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8002540:	4603      	mov	r3, r0
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fd9e 	bl	8001084 <_ZN4blib6Analog8samplingEv>
}
 8002548:	bf00      	nop
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002556:	f000 fd1b 	bl	8002f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800255a:	f000 f849 	bl	80025f0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800255e:	f000 f9dd 	bl	800291c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002562:	f000 f9bb 	bl	80028dc <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 8002566:	f000 f957 	bl	8002818 <_ZL12MX_I2C1_Initv>
  MX_ADC1_Init();
 800256a:	f000 f8b5 	bl	80026d8 <_ZL12MX_ADC1_Initv>
  MX_USART3_UART_Init();
 800256e:	f000 f987 	bl	8002880 <_ZL19MX_USART3_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);
 8002572:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002576:	f000 fd7d 	bl	8003074 <HAL_Delay>
//  mLcdDisplay.displayLine(0, 2, "DO AN TOT NGHIEP");
//  mLcdDisplay.displayLine(1, 2, "NAM HOC: 2023-2024");
//  mLcdDisplay.displayLine(2, 2, "LOP: DTD61DH");
//  mLcdDisplay.displayLine(3, 1, "DAI HOC HANG HAI VN");

  LOGI("MPPT SOLAR CHARGE CONTROLLER");
 800257a:	4b18      	ldr	r3, [pc, #96]	@ (80025dc <main+0x8c>)
 800257c:	22ae      	movs	r2, #174	@ 0xae
 800257e:	4918      	ldr	r1, [pc, #96]	@ (80025e0 <main+0x90>)
 8002580:	4818      	ldr	r0, [pc, #96]	@ (80025e4 <main+0x94>)
 8002582:	f7ff f93f 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
  LOGI("DESIGNED BY ");
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <main+0x8c>)
 8002588:	22af      	movs	r2, #175	@ 0xaf
 800258a:	4915      	ldr	r1, [pc, #84]	@ (80025e0 <main+0x90>)
 800258c:	4816      	ldr	r0, [pc, #88]	@ (80025e8 <main+0x98>)
 800258e:	f7ff f939 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
  LOGI("STARTING DEVICE...");
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <main+0x8c>)
 8002594:	22b0      	movs	r2, #176	@ 0xb0
 8002596:	4912      	ldr	r1, [pc, #72]	@ (80025e0 <main+0x90>)
 8002598:	4814      	ldr	r0, [pc, #80]	@ (80025ec <main+0x9c>)
 800259a:	f7ff f933 	bl	8001804 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
  auto &monitor = blib::Monitor::getInstance();
 800259e:	f7ff f88f 	bl	80016c0 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 80025a2:	60f8      	str	r0, [r7, #12]
  auto &analog = blib::Analog::getInstance();
 80025a4:	f7ff fe06 	bl	80021b4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80025a8:	60b8      	str	r0, [r7, #8]
  auto &chargeCtrl = blib::ChargeControl::getInstance();
 80025aa:	f000 fa3d 	bl	8002a28 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 80025ae:	6078      	str	r0, [r7, #4]
  auto &serialMnt = blib::SerialMonitor::getInstance();
 80025b0:	f000 fa50 	bl	8002a54 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv>
 80025b4:	6038      	str	r0, [r7, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      analog.readAnalog();
 80025b6:	68b8      	ldr	r0, [r7, #8]
 80025b8:	f7fe fdb0 	bl	800111c <_ZN4blib6Analog10readAnalogEv>
      chargeCtrl.run();
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff f8e7 	bl	8001790 <_ZN4blib13ChargeControl3runEv>
      serialMnt.show();
 80025c2:	6838      	ldr	r0, [r7, #0]
 80025c4:	f7ff fe4c 	bl	8002260 <_ZN4blib13SerialMonitor4showEv>
      monitor.showMenu();
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff fc83 	bl	8001ed4 <_ZN4blib7Monitor8showMenuEv>
      HAL_Delay(1000);
 80025ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025d2:	f000 fd4f 	bl	8003074 <HAL_Delay>
      analog.readAnalog();
 80025d6:	bf00      	nop
 80025d8:	e7ed      	b.n	80025b6 <main+0x66>
 80025da:	bf00      	nop
 80025dc:	0800adec 	.word	0x0800adec
 80025e0:	0800ad40 	.word	0x0800ad40
 80025e4:	0800adf4 	.word	0x0800adf4
 80025e8:	0800ae20 	.word	0x0800ae20
 80025ec:	0800ae3c 	.word	0x0800ae3c

080025f0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b094      	sub	sp, #80	@ 0x50
 80025f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f6:	f107 0320 	add.w	r3, r7, #32
 80025fa:	2230      	movs	r2, #48	@ 0x30
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fe27 	bl	8007252 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <_Z18SystemClock_Configv+0xe0>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a2c      	ldr	r2, [pc, #176]	@ (80026d0 <_Z18SystemClock_Configv+0xe0>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
 8002624:	4b2a      	ldr	r3, [pc, #168]	@ (80026d0 <_Z18SystemClock_Configv+0xe0>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	4b27      	ldr	r3, [pc, #156]	@ (80026d4 <_Z18SystemClock_Configv+0xe4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a26      	ldr	r2, [pc, #152]	@ (80026d4 <_Z18SystemClock_Configv+0xe4>)
 800263a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b24      	ldr	r3, [pc, #144]	@ (80026d4 <_Z18SystemClock_Configv+0xe4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002650:	2301      	movs	r3, #1
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002654:	2310      	movs	r3, #16
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002658:	2302      	movs	r3, #2
 800265a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800265c:	2300      	movs	r3, #0
 800265e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002660:	2308      	movs	r3, #8
 8002662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002664:	2364      	movs	r3, #100	@ 0x64
 8002666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002668:	2302      	movs	r3, #2
 800266a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800266c:	2304      	movs	r3, #4
 800266e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002670:	f107 0320 	add.w	r3, r7, #32
 8002674:	4618      	mov	r0, r3
 8002676:	f002 fcdf 	bl	8005038 <HAL_RCC_OscConfig>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800268a:	f000 f9b1 	bl	80029f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800268e:	230f      	movs	r3, #15
 8002690:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002692:	2302      	movs	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800269a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800269e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80026a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	2103      	movs	r1, #3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 ff3b 	bl	8005528 <HAL_RCC_ClockConfig>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2301      	movne	r3, #1
 80026ba:	2300      	moveq	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 80026c2:	f000 f995 	bl	80029f0 <Error_Handler>
  }
}
 80026c6:	bf00      	nop
 80026c8:	3750      	adds	r7, #80	@ 0x50
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40007000 	.word	0x40007000

080026d8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026de:	463b      	mov	r3, r7
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026ea:	4b48      	ldr	r3, [pc, #288]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 80026ec:	4a48      	ldr	r2, [pc, #288]	@ (8002810 <_ZL12MX_ADC1_Initv+0x138>)
 80026ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80026f0:	4b46      	ldr	r3, [pc, #280]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 80026f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026f8:	4b44      	ldr	r3, [pc, #272]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80026fe:	4b43      	ldr	r3, [pc, #268]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 8002700:	2201      	movs	r2, #1
 8002702:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002704:	4b41      	ldr	r3, [pc, #260]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 8002706:	2201      	movs	r2, #1
 8002708:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800270a:	4b40      	ldr	r3, [pc, #256]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002712:	4b3e      	ldr	r3, [pc, #248]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 8002714:	2200      	movs	r2, #0
 8002716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002718:	4b3c      	ldr	r3, [pc, #240]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 800271a:	4a3e      	ldr	r2, [pc, #248]	@ (8002814 <_ZL12MX_ADC1_Initv+0x13c>)
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800271e:	4b3b      	ldr	r3, [pc, #236]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 8002720:	2200      	movs	r2, #0
 8002722:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8002724:	4b39      	ldr	r3, [pc, #228]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 8002726:	2205      	movs	r2, #5
 8002728:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800272a:	4b38      	ldr	r3, [pc, #224]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002732:	4b36      	ldr	r3, [pc, #216]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 8002734:	2201      	movs	r2, #1
 8002736:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002738:	4834      	ldr	r0, [pc, #208]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 800273a:	f000 fcbf 	bl	80030bc <HAL_ADC_Init>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800274e:	f000 f94f 	bl	80029f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800275a:	2307      	movs	r3, #7
 800275c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800275e:	463b      	mov	r3, r7
 8002760:	4619      	mov	r1, r3
 8002762:	482a      	ldr	r0, [pc, #168]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 8002764:	f000 fe6c 	bl	8003440 <HAL_ADC_ConfigChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8002778:	f000 f93a 	bl	80029f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800277c:	2302      	movs	r3, #2
 800277e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002780:	463b      	mov	r3, r7
 8002782:	4619      	mov	r1, r3
 8002784:	4821      	ldr	r0, [pc, #132]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 8002786:	f000 fe5b 	bl	8003440 <HAL_ADC_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	bf14      	ite	ne
 8002790:	2301      	movne	r3, #1
 8002792:	2300      	moveq	r3, #0
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800279a:	f000 f929 	bl	80029f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800279e:	2303      	movs	r3, #3
 80027a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a2:	463b      	mov	r3, r7
 80027a4:	4619      	mov	r1, r3
 80027a6:	4819      	ldr	r0, [pc, #100]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 80027a8:	f000 fe4a 	bl	8003440 <HAL_ADC_ConfigChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <_ZL12MX_ADC1_Initv+0xe8>
  {
    Error_Handler();
 80027bc:	f000 f918 	bl	80029f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80027c0:	2304      	movs	r3, #4
 80027c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027c4:	463b      	mov	r3, r7
 80027c6:	4619      	mov	r1, r3
 80027c8:	4810      	ldr	r0, [pc, #64]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 80027ca:	f000 fe39 	bl	8003440 <HAL_ADC_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	bf14      	ite	ne
 80027d4:	2301      	movne	r3, #1
 80027d6:	2300      	moveq	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <_ZL12MX_ADC1_Initv+0x10a>
  {
    Error_Handler();
 80027de:	f000 f907 	bl	80029f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80027e2:	2305      	movs	r3, #5
 80027e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027e6:	463b      	mov	r3, r7
 80027e8:	4619      	mov	r1, r3
 80027ea:	4808      	ldr	r0, [pc, #32]	@ (800280c <_ZL12MX_ADC1_Initv+0x134>)
 80027ec:	f000 fe28 	bl	8003440 <HAL_ADC_ConfigChannel>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <_ZL12MX_ADC1_Initv+0x12c>
  {
    Error_Handler();
 8002800:	f000 f8f6 	bl	80029f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000604 	.word	0x20000604
 8002810:	40012000 	.word	0x40012000
 8002814:	0f000001 	.word	0x0f000001

08002818 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800281c:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 800281e:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <_ZL12MX_I2C1_Initv+0x60>)
 8002820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002822:	4b14      	ldr	r3, [pc, #80]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 8002824:	4a15      	ldr	r2, [pc, #84]	@ (800287c <_ZL12MX_I2C1_Initv+0x64>)
 8002826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 8002836:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800283a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800283c:	4b0d      	ldr	r3, [pc, #52]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002842:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002848:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002854:	4807      	ldr	r0, [pc, #28]	@ (8002874 <_ZL12MX_I2C1_Initv+0x5c>)
 8002856:	f001 ff51 	bl	80046fc <HAL_I2C_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf14      	ite	ne
 8002860:	2301      	movne	r3, #1
 8002862:	2300      	moveq	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800286a:	f000 f8c1 	bl	80029f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	200006ac 	.word	0x200006ac
 8002878:	40005400 	.word	0x40005400
 800287c:	000186a0 	.word	0x000186a0

08002880 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002884:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002886:	4a14      	ldr	r2, [pc, #80]	@ (80028d8 <_ZL19MX_USART3_UART_Initv+0x58>)
 8002888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800288a:	4b12      	ldr	r3, [pc, #72]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800289e:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b08      	ldr	r3, [pc, #32]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028b6:	4807      	ldr	r0, [pc, #28]	@ (80028d4 <_ZL19MX_USART3_UART_Initv+0x54>)
 80028b8:	f003 f816 	bl	80058e8 <HAL_UART_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <_ZL19MX_USART3_UART_Initv+0x50>
  {
    Error_Handler();
 80028cc:	f000 f890 	bl	80029f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000700 	.word	0x20000700
 80028d8:	40004800 	.word	0x40004800

080028dc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <_ZL11MX_DMA_Initv+0x3c>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002918 <_ZL11MX_DMA_Initv+0x3c>)
 80028ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <_ZL11MX_DMA_Initv+0x3c>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	2038      	movs	r0, #56	@ 0x38
 8002904:	f001 f917 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002908:	2038      	movs	r0, #56	@ 0x38
 800290a:	f001 f930 	bl	8003b6e <HAL_NVIC_EnableIRQ>

}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40023800 	.word	0x40023800

0800291c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002922:	f107 030c 	add.w	r3, r7, #12
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
 800292e:	60da      	str	r2, [r3, #12]
 8002930:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b2c      	ldr	r3, [pc, #176]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	4a2b      	ldr	r2, [pc, #172]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 800293c:	f043 0304 	orr.w	r3, r3, #4
 8002940:	6313      	str	r3, [r2, #48]	@ 0x30
 8002942:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4a24      	ldr	r2, [pc, #144]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	@ 0x30
 800295e:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	603b      	str	r3, [r7, #0]
 800296e:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a1d      	ldr	r2, [pc, #116]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <_ZL12MX_GPIO_Initv+0xcc>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002986:	230f      	movs	r3, #15
 8002988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800298a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800298e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002990:	2301      	movs	r3, #1
 8002992:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4619      	mov	r1, r3
 800299a:	4814      	ldr	r0, [pc, #80]	@ (80029ec <_ZL12MX_GPIO_Initv+0xd0>)
 800299c:	f001 fce2 	bl	8004364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2100      	movs	r1, #0
 80029a4:	2006      	movs	r0, #6
 80029a6:	f001 f8c6 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029aa:	2006      	movs	r0, #6
 80029ac:	f001 f8df 	bl	8003b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2100      	movs	r1, #0
 80029b4:	2007      	movs	r0, #7
 80029b6:	f001 f8be 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80029ba:	2007      	movs	r0, #7
 80029bc:	f001 f8d7 	bl	8003b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80029c0:	2200      	movs	r2, #0
 80029c2:	2100      	movs	r1, #0
 80029c4:	2008      	movs	r0, #8
 80029c6:	f001 f8b6 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80029ca:	2008      	movs	r0, #8
 80029cc:	f001 f8cf 	bl	8003b6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	2009      	movs	r0, #9
 80029d6:	f001 f8ae 	bl	8003b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80029da:	2009      	movs	r0, #9
 80029dc:	f001 f8c7 	bl	8003b6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029e0:	bf00      	nop
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40020800 	.word	0x40020800

080029f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f4:	b672      	cpsid	i
}
 80029f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <Error_Handler+0x8>

080029fc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 80029fc:	b598      	push	{r3, r4, r7, lr}
 80029fe:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002a00:	4b08      	ldr	r3, [pc, #32]	@ (8002a24 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002a08:	2008      	movs	r0, #8
 8002a0a:	f003 fb7b 	bl	8006104 <_Znwj>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461c      	mov	r4, r3
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7fe fd2e 	bl	8001474 <_ZN4blib6ButtonC1Ev>
 8002a18:	4b02      	ldr	r3, [pc, #8]	@ (8002a24 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002a1a:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002a1c:	4b01      	ldr	r3, [pc, #4]	@ (8002a24 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
                }
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd98      	pop	{r3, r4, r7, pc}
 8002a24:	2000074c 	.word	0x2000074c

08002a28 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 8002a28:	b598      	push	{r3, r4, r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002a34:	200c      	movs	r0, #12
 8002a36:	f003 fb65 	bl	8006104 <_Znwj>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461c      	mov	r4, r3
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f7fe fe6c 	bl	800171c <_ZN4blib13ChargeControlC1Ev>
 8002a44:	4b02      	ldr	r3, [pc, #8]	@ (8002a50 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002a46:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002a48:	4b01      	ldr	r3, [pc, #4]	@ (8002a50 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
                }
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	bd98      	pop	{r3, r4, r7, pc}
 8002a50:	20000750 	.word	0x20000750

08002a54 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv>:
                static T& getInstance()
 8002a54:	b598      	push	{r3, r4, r7, lr}
 8002a56:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002a58:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002a60:	2008      	movs	r0, #8
 8002a62:	f003 fb4f 	bl	8006104 <_Znwj>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461c      	mov	r4, r3
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7ff fbb8 	bl	80021e0 <_ZN4blib13SerialMonitorC1Ev>
 8002a70:	4b02      	ldr	r3, [pc, #8]	@ (8002a7c <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 8002a72:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002a74:	4b01      	ldr	r3, [pc, #4]	@ (8002a7c <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 8002a76:	681b      	ldr	r3, [r3, #0]
                }
 8002a78:	4618      	mov	r0, r3
 8002a7a:	bd98      	pop	{r3, r4, r7, pc}
 8002a7c:	20000754 	.word	0x20000754

08002a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
 8002a8a:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <HAL_MspInit+0x4c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8002acc <HAL_MspInit+0x4c>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a96:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <HAL_MspInit+0x4c>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9e:	607b      	str	r3, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	603b      	str	r3, [r7, #0]
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_MspInit+0x4c>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	4a08      	ldr	r2, [pc, #32]	@ (8002acc <HAL_MspInit+0x4c>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab2:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <HAL_MspInit+0x4c>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40023800 	.word	0x40023800

08002ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	@ 0x28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 0314 	add.w	r3, r7, #20
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2f      	ldr	r2, [pc, #188]	@ (8002bac <HAL_ADC_MspInit+0xdc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d157      	bne.n	8002ba2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <HAL_ADC_MspInit+0xe0>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb0 <HAL_ADC_MspInit+0xe0>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b02:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <HAL_ADC_MspInit+0xe0>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <HAL_ADC_MspInit+0xe0>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	4a26      	ldr	r2, [pc, #152]	@ (8002bb0 <HAL_ADC_MspInit+0xe0>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1e:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_ADC_MspInit+0xe0>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002b2a:	231f      	movs	r3, #31
 8002b2c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b36:	f107 0314 	add.w	r3, r7, #20
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	481d      	ldr	r0, [pc, #116]	@ (8002bb4 <HAL_ADC_MspInit+0xe4>)
 8002b3e:	f001 fc11 	bl	8004364 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b42:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b44:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <HAL_ADC_MspInit+0xec>)
 8002b46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b48:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b54:	4b18      	ldr	r3, [pc, #96]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b5a:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b6a:	4b13      	ldr	r3, [pc, #76]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b6c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b72:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b80:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b86:	480c      	ldr	r0, [pc, #48]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b88:	f001 f80c 	bl	8003ba4 <HAL_DMA_Init>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002b92:	f7ff ff2d 	bl	80029f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a07      	ldr	r2, [pc, #28]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b9c:	4a06      	ldr	r2, [pc, #24]	@ (8002bb8 <HAL_ADC_MspInit+0xe8>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	@ 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40012000 	.word	0x40012000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020000 	.word	0x40020000
 8002bb8:	2000064c 	.word	0x2000064c
 8002bbc:	40026410 	.word	0x40026410

08002bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_I2C_MspInit+0x84>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d12b      	bne.n	8002c3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_I2C_MspInit+0x88>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <HAL_I2C_MspInit+0x88>)
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf2:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_I2C_MspInit+0x88>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bfe:	23c0      	movs	r3, #192	@ 0xc0
 8002c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c02:	2312      	movs	r3, #18
 8002c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c0e:	2304      	movs	r3, #4
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4619      	mov	r1, r3
 8002c18:	480c      	ldr	r0, [pc, #48]	@ (8002c4c <HAL_I2C_MspInit+0x8c>)
 8002c1a:	f001 fba3 	bl	8004364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <HAL_I2C_MspInit+0x88>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a08      	ldr	r2, [pc, #32]	@ (8002c48 <HAL_I2C_MspInit+0x88>)
 8002c28:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_I2C_MspInit+0x88>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	3728      	adds	r7, #40	@ 0x28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40005400 	.word	0x40005400
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020400 	.word	0x40020400

08002c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	@ 0x28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a19      	ldr	r2, [pc, #100]	@ (8002cd4 <HAL_UART_MspInit+0x84>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d12c      	bne.n	8002ccc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <HAL_UART_MspInit+0x88>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <HAL_UART_MspInit+0x88>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <HAL_UART_MspInit+0x88>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <HAL_UART_MspInit+0x88>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	4a10      	ldr	r2, [pc, #64]	@ (8002cd8 <HAL_UART_MspInit+0x88>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd8 <HAL_UART_MspInit+0x88>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002caa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cbc:	2307      	movs	r3, #7
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4805      	ldr	r0, [pc, #20]	@ (8002cdc <HAL_UART_MspInit+0x8c>)
 8002cc8:	f001 fb4c 	bl	8004364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ccc:	bf00      	nop
 8002cce:	3728      	adds	r7, #40	@ 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40004800 	.word	0x40004800
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020400 	.word	0x40020400

08002ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <NMI_Handler+0x4>

08002ce8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <HardFault_Handler+0x4>

08002cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <MemManage_Handler+0x4>

08002cf8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <BusFault_Handler+0x4>

08002d00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <UsageFault_Handler+0x4>

08002d08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d16:	b480      	push	{r7}
 8002d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d36:	f000 f97d 	bl	8003034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f001 fcc2 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002d50:	2002      	movs	r0, #2
 8002d52:	f001 fcbb 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002d5e:	2004      	movs	r0, #4
 8002d60:	f001 fcb4 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002d6c:	2008      	movs	r0, #8
 8002d6e:	f001 fcad 	bl	80046cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d7c:	4802      	ldr	r0, [pc, #8]	@ (8002d88 <DMA2_Stream0_IRQHandler+0x10>)
 8002d7e:	f001 f887 	bl	8003e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	2000064c 	.word	0x2000064c

08002d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return 1;
 8002d90:	2301      	movs	r3, #1
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <_kill>:

int _kill(int pid, int sig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002da6:	f004 fafb 	bl	80073a0 <__errno>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2216      	movs	r2, #22
 8002dae:	601a      	str	r2, [r3, #0]
  return -1;
 8002db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_exit>:

void _exit (int status)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ffe7 	bl	8002d9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002dce:	bf00      	nop
 8002dd0:	e7fd      	b.n	8002dce <_exit+0x12>

08002dd2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	e00a      	b.n	8002dfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002de4:	f3af 8000 	nop.w
 8002de8:	4601      	mov	r1, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	60ba      	str	r2, [r7, #8]
 8002df0:	b2ca      	uxtb	r2, r1
 8002df2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	3301      	adds	r3, #1
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	dbf0      	blt.n	8002de4 <_read+0x12>
  }

  return len;
 8002e02:	687b      	ldr	r3, [r7, #4]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e009      	b.n	8002e32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	60ba      	str	r2, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	dbf1      	blt.n	8002e1e <_write+0x12>
  }
  return len;
 8002e3a:	687b      	ldr	r3, [r7, #4]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_close>:

int _close(int file)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e6c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <_isatty>:

int _isatty(int file)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e84:	2301      	movs	r3, #1
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b085      	sub	sp, #20
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eb4:	4a14      	ldr	r2, [pc, #80]	@ (8002f08 <_sbrk+0x5c>)
 8002eb6:	4b15      	ldr	r3, [pc, #84]	@ (8002f0c <_sbrk+0x60>)
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ec0:	4b13      	ldr	r3, [pc, #76]	@ (8002f10 <_sbrk+0x64>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <_sbrk+0x64>)
 8002eca:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <_sbrk+0x68>)
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <_sbrk+0x64>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d207      	bcs.n	8002eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002edc:	f004 fa60 	bl	80073a0 <__errno>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	220c      	movs	r2, #12
 8002ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eea:	e009      	b.n	8002f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eec:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <_sbrk+0x64>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <_sbrk+0x64>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	4a05      	ldr	r2, [pc, #20]	@ (8002f10 <_sbrk+0x64>)
 8002efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3718      	adds	r7, #24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20020000 	.word	0x20020000
 8002f0c:	00000400 	.word	0x00000400
 8002f10:	20000758 	.word	0x20000758
 8002f14:	200008b0 	.word	0x200008b0

08002f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <SystemInit+0x20>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	4a05      	ldr	r2, [pc, #20]	@ (8002f38 <SystemInit+0x20>)
 8002f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f40:	f7ff ffea 	bl	8002f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f44:	480c      	ldr	r0, [pc, #48]	@ (8002f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f46:	490d      	ldr	r1, [pc, #52]	@ (8002f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f48:	4a0d      	ldr	r2, [pc, #52]	@ (8002f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f4c:	e002      	b.n	8002f54 <LoopCopyDataInit>

08002f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f52:	3304      	adds	r3, #4

08002f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f58:	d3f9      	bcc.n	8002f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f60:	e001      	b.n	8002f66 <LoopFillZerobss>

08002f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f64:	3204      	adds	r2, #4

08002f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f68:	d3fb      	bcc.n	8002f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f6a:	f004 fa1f 	bl	80073ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f6e:	f7ff faef 	bl	8002550 <main>
  bx  lr    
 8002f72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f7c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002f80:	0800b378 	.word	0x0800b378
  ldr r2, =_sbss
 8002f84:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002f88:	200008b0 	.word	0x200008b0

08002f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f8c:	e7fe      	b.n	8002f8c <ADC_IRQHandler>
	...

08002f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f94:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd0 <HAL_Init+0x40>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <HAL_Init+0x40>)
 8002f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd0 <HAL_Init+0x40>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd0 <HAL_Init+0x40>)
 8002fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fac:	4b08      	ldr	r3, [pc, #32]	@ (8002fd0 <HAL_Init+0x40>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a07      	ldr	r2, [pc, #28]	@ (8002fd0 <HAL_Init+0x40>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fb8:	2003      	movs	r0, #3
 8002fba:	f000 fdb1 	bl	8003b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fbe:	200f      	movs	r0, #15
 8002fc0:	f000 f808 	bl	8002fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fc4:	f7ff fd5c 	bl	8002a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023c00 	.word	0x40023c00

08002fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <HAL_InitTick+0x54>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_InitTick+0x58>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fdc9 	bl	8003b8a <HAL_SYSTICK_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e00e      	b.n	8003020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b0f      	cmp	r3, #15
 8003006:	d80a      	bhi.n	800301e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003008:	2200      	movs	r2, #0
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	f000 fd91 	bl	8003b36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003014:	4a06      	ldr	r2, [pc, #24]	@ (8003030 <HAL_InitTick+0x5c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
}
 8003020:	4618      	mov	r0, r3
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	20000004 	.word	0x20000004
 800302c:	2000000c 	.word	0x2000000c
 8003030:	20000008 	.word	0x20000008

08003034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003038:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_IncTick+0x20>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <HAL_IncTick+0x24>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4413      	add	r3, r2
 8003044:	4a04      	ldr	r2, [pc, #16]	@ (8003058 <HAL_IncTick+0x24>)
 8003046:	6013      	str	r3, [r2, #0]
}
 8003048:	bf00      	nop
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000000c 	.word	0x2000000c
 8003058:	2000075c 	.word	0x2000075c

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	2000075c 	.word	0x2000075c

08003074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800307c:	f7ff ffee 	bl	800305c <HAL_GetTick>
 8003080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308c:	d005      	beq.n	800309a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_Delay+0x44>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800309a:	bf00      	nop
 800309c:	f7ff ffde 	bl	800305c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d8f7      	bhi.n	800309c <HAL_Delay+0x28>
  {
  }
}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c

080030bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e033      	b.n	800313a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fcf8 	bl	8002ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003102:	f023 0302 	bic.w	r3, r3, #2
 8003106:	f043 0202 	orr.w	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fab8 	bl	8003684 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
 800312a:	e001      	b.n	8003130 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_ADC_Start_DMA+0x1e>
 800315e:	2302      	movs	r3, #2
 8003160:	e0e9      	b.n	8003336 <HAL_ADC_Start_DMA+0x1f2>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d018      	beq.n	80031aa <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003188:	4b6d      	ldr	r3, [pc, #436]	@ (8003340 <HAL_ADC_Start_DMA+0x1fc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6d      	ldr	r2, [pc, #436]	@ (8003344 <HAL_ADC_Start_DMA+0x200>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	0c9a      	lsrs	r2, r3, #18
 8003194:	4613      	mov	r3, r2
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800319c:	e002      	b.n	80031a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f9      	bne.n	800319e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b8:	d107      	bne.n	80031ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031c8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f040 80a1 	bne.w	800331c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003204:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003210:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003218:	d106      	bne.n	8003228 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f023 0206 	bic.w	r2, r3, #6
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
 8003226:	e002      	b.n	800322e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003236:	4b44      	ldr	r3, [pc, #272]	@ (8003348 <HAL_ADC_Start_DMA+0x204>)
 8003238:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323e:	4a43      	ldr	r2, [pc, #268]	@ (800334c <HAL_ADC_Start_DMA+0x208>)
 8003240:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	4a42      	ldr	r2, [pc, #264]	@ (8003350 <HAL_ADC_Start_DMA+0x20c>)
 8003248:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324e:	4a41      	ldr	r2, [pc, #260]	@ (8003354 <HAL_ADC_Start_DMA+0x210>)
 8003250:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800325a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800326a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800327a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	334c      	adds	r3, #76	@ 0x4c
 8003286:	4619      	mov	r1, r3
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f000 fd38 	bl	8003d00 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 031f 	and.w	r3, r3, #31
 8003298:	2b00      	cmp	r3, #0
 800329a:	d12a      	bne.n	80032f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003358 <HAL_ADC_Start_DMA+0x214>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d015      	beq.n	80032d2 <HAL_ADC_Start_DMA+0x18e>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2c      	ldr	r2, [pc, #176]	@ (800335c <HAL_ADC_Start_DMA+0x218>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d105      	bne.n	80032bc <HAL_ADC_Start_DMA+0x178>
 80032b0:	4b25      	ldr	r3, [pc, #148]	@ (8003348 <HAL_ADC_Start_DMA+0x204>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a27      	ldr	r2, [pc, #156]	@ (8003360 <HAL_ADC_Start_DMA+0x21c>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d136      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
 80032c6:	4b20      	ldr	r3, [pc, #128]	@ (8003348 <HAL_ADC_Start_DMA+0x204>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d130      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d129      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	e020      	b.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a18      	ldr	r2, [pc, #96]	@ (8003358 <HAL_ADC_Start_DMA+0x214>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d11b      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d114      	bne.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	e00b      	b.n	8003334 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	f043 0210 	orr.w	r2, r3, #16
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332c:	f043 0201 	orr.w	r2, r3, #1
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000004 	.word	0x20000004
 8003344:	431bde83 	.word	0x431bde83
 8003348:	40012300 	.word	0x40012300
 800334c:	0800387d 	.word	0x0800387d
 8003350:	08003937 	.word	0x08003937
 8003354:	08003953 	.word	0x08003953
 8003358:	40012000 	.word	0x40012000
 800335c:	40012100 	.word	0x40012100
 8003360:	40012200 	.word	0x40012200

08003364 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_ADC_Stop_DMA+0x1a>
 800337a:	2302      	movs	r3, #2
 800337c:	e048      	b.n	8003410 <HAL_ADC_Stop_DMA+0xac>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0201 	bic.w	r2, r2, #1
 8003394:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d130      	bne.n	8003406 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d10f      	bne.n	80033e2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fcf2 	bl	8003db0 <HAL_DMA_Abort>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80033f0:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	f043 0201 	orr.w	r2, r3, #1
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x1c>
 8003458:	2302      	movs	r3, #2
 800345a:	e105      	b.n	8003668 <HAL_ADC_ConfigChannel+0x228>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b09      	cmp	r3, #9
 800346a:	d925      	bls.n	80034b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68d9      	ldr	r1, [r3, #12]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	3b1e      	subs	r3, #30
 8003482:	2207      	movs	r2, #7
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43da      	mvns	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	400a      	ands	r2, r1
 8003490:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68d9      	ldr	r1, [r3, #12]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	4603      	mov	r3, r0
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4403      	add	r3, r0
 80034aa:	3b1e      	subs	r3, #30
 80034ac:	409a      	lsls	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	e022      	b.n	80034fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6919      	ldr	r1, [r3, #16]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	2207      	movs	r2, #7
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	400a      	ands	r2, r1
 80034da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6919      	ldr	r1, [r3, #16]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4403      	add	r3, r0
 80034f4:	409a      	lsls	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d824      	bhi.n	8003550 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	3b05      	subs	r3, #5
 8003518:	221f      	movs	r2, #31
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	400a      	ands	r2, r1
 8003526:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	4618      	mov	r0, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	3b05      	subs	r3, #5
 8003542:	fa00 f203 	lsl.w	r2, r0, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	635a      	str	r2, [r3, #52]	@ 0x34
 800354e:	e04c      	b.n	80035ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d824      	bhi.n	80035a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	3b23      	subs	r3, #35	@ 0x23
 800356a:	221f      	movs	r2, #31
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43da      	mvns	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	400a      	ands	r2, r1
 8003578:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	3b23      	subs	r3, #35	@ 0x23
 8003594:	fa00 f203 	lsl.w	r2, r0, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
 80035a0:	e023      	b.n	80035ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	3b41      	subs	r3, #65	@ 0x41
 80035b4:	221f      	movs	r2, #31
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	400a      	ands	r2, r1
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	4618      	mov	r0, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	3b41      	subs	r3, #65	@ 0x41
 80035de:	fa00 f203 	lsl.w	r2, r0, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ea:	4b22      	ldr	r3, [pc, #136]	@ (8003674 <HAL_ADC_ConfigChannel+0x234>)
 80035ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <HAL_ADC_ConfigChannel+0x238>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d109      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1cc>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b12      	cmp	r3, #18
 80035fe:	d105      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <HAL_ADC_ConfigChannel+0x238>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d123      	bne.n	800365e <HAL_ADC_ConfigChannel+0x21e>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b10      	cmp	r3, #16
 800361c:	d003      	beq.n	8003626 <HAL_ADC_ConfigChannel+0x1e6>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b11      	cmp	r3, #17
 8003624:	d11b      	bne.n	800365e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b10      	cmp	r3, #16
 8003638:	d111      	bne.n	800365e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800363a:	4b10      	ldr	r3, [pc, #64]	@ (800367c <HAL_ADC_ConfigChannel+0x23c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a10      	ldr	r2, [pc, #64]	@ (8003680 <HAL_ADC_ConfigChannel+0x240>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	0c9a      	lsrs	r2, r3, #18
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003650:	e002      	b.n	8003658 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3b01      	subs	r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f9      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40012300 	.word	0x40012300
 8003678:	40012000 	.word	0x40012000
 800367c:	20000004 	.word	0x20000004
 8003680:	431bde83 	.word	0x431bde83

08003684 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368c:	4b79      	ldr	r3, [pc, #484]	@ (8003874 <ADC_Init+0x1f0>)
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	021a      	lsls	r2, r3, #8
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6899      	ldr	r1, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	4a58      	ldr	r2, [pc, #352]	@ (8003878 <ADC_Init+0x1f4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800372a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6899      	ldr	r1, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800374c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6899      	ldr	r1, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	e00f      	b.n	8003782 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003780:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0202 	bic.w	r2, r2, #2
 8003790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7e1b      	ldrb	r3, [r3, #24]
 800379c:	005a      	lsls	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80037ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	3b01      	subs	r3, #1
 80037dc:	035a      	lsls	r2, r3, #13
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	e007      	b.n	80037f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	3b01      	subs	r3, #1
 8003814:	051a      	lsls	r2, r3, #20
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800382c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800383a:	025a      	lsls	r2, r3, #9
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	029a      	lsls	r2, r3, #10
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40012300 	.word	0x40012300
 8003878:	0f000001 	.word	0x0f000001

0800387c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003888:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003892:	2b00      	cmp	r3, #0
 8003894:	d13c      	bne.n	8003910 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d12b      	bne.n	8003908 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d127      	bne.n	8003908 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d119      	bne.n	8003908 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0220 	bic.w	r2, r2, #32
 80038e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7fe fe13 	bl	8002534 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800390e:	e00e      	b.n	800392e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff fd85 	bl	800342c <HAL_ADC_ErrorCallback>
}
 8003922:	e004      	b.n	800392e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f7ff fd67 	bl	8003418 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800394a:	bf00      	nop
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b084      	sub	sp, #16
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2240      	movs	r2, #64	@ 0x40
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f043 0204 	orr.w	r2, r3, #4
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff fd5a 	bl	800342c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003990:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800399c:	4013      	ands	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039b2:	4a04      	ldr	r2, [pc, #16]	@ (80039c4 <__NVIC_SetPriorityGrouping+0x44>)
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	60d3      	str	r3, [r2, #12]
}
 80039b8:	bf00      	nop
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 0307 	and.w	r3, r3, #7
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db0b      	blt.n	8003a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4907      	ldr	r1, [pc, #28]	@ (8003a1c <__NVIC_EnableIRQ+0x38>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2001      	movs	r0, #1
 8003a06:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db0a      	blt.n	8003a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	490c      	ldr	r1, [pc, #48]	@ (8003a6c <__NVIC_SetPriority+0x4c>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	440b      	add	r3, r1
 8003a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a48:	e00a      	b.n	8003a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	4908      	ldr	r1, [pc, #32]	@ (8003a70 <__NVIC_SetPriority+0x50>)
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3b04      	subs	r3, #4
 8003a58:	0112      	lsls	r2, r2, #4
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	761a      	strb	r2, [r3, #24]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	e000e100 	.word	0xe000e100
 8003a70:	e000ed00 	.word	0xe000ed00

08003a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b089      	sub	sp, #36	@ 0x24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f1c3 0307 	rsb	r3, r3, #7
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	bf28      	it	cs
 8003a92:	2304      	movcs	r3, #4
 8003a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	2b06      	cmp	r3, #6
 8003a9c:	d902      	bls.n	8003aa4 <NVIC_EncodePriority+0x30>
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3b03      	subs	r3, #3
 8003aa2:	e000      	b.n	8003aa6 <NVIC_EncodePriority+0x32>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	401a      	ands	r2, r3
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43d9      	mvns	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003acc:	4313      	orrs	r3, r2
         );
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3724      	adds	r7, #36	@ 0x24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aec:	d301      	bcc.n	8003af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aee:	2301      	movs	r3, #1
 8003af0:	e00f      	b.n	8003b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <SysTick_Config+0x40>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003afa:	210f      	movs	r1, #15
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	f7ff ff8e 	bl	8003a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b04:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <SysTick_Config+0x40>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0a:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <SysTick_Config+0x40>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	e000e010 	.word	0xe000e010

08003b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f7ff ff29 	bl	8003980 <__NVIC_SetPriorityGrouping>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b48:	f7ff ff3e 	bl	80039c8 <__NVIC_GetPriorityGrouping>
 8003b4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	6978      	ldr	r0, [r7, #20]
 8003b54:	f7ff ff8e 	bl	8003a74 <NVIC_EncodePriority>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff5d 	bl	8003a20 <__NVIC_SetPriority>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff31 	bl	80039e4 <__NVIC_EnableIRQ>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b082      	sub	sp, #8
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff ffa2 	bl	8003adc <SysTick_Config>
 8003b98:	4603      	mov	r3, r0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff fa54 	bl	800305c <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e099      	b.n	8003cf4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be0:	e00f      	b.n	8003c02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003be2:	f7ff fa3b 	bl	800305c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d908      	bls.n	8003c02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2203      	movs	r2, #3
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e078      	b.n	8003cf4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e8      	bne.n	8003be2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4b38      	ldr	r3, [pc, #224]	@ (8003cfc <HAL_DMA_Init+0x158>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d107      	bne.n	8003c6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	4313      	orrs	r3, r2
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0307 	bic.w	r3, r3, #7
 8003c82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d117      	bne.n	8003cc6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00e      	beq.n	8003cc6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fadf 	bl	800426c <DMA_CheckFifoParam>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d008      	beq.n	8003cc6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2240      	movs	r2, #64	@ 0x40
 8003cb8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e016      	b.n	8003cf4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa96 	bl	8004200 <DMA_CalcBaseAndBitshift>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cdc:	223f      	movs	r2, #63	@ 0x3f
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	f010803f 	.word	0xf010803f

08003d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_DMA_Start_IT+0x26>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e040      	b.n	8003da8 <HAL_DMA_Start_IT+0xa8>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d12f      	bne.n	8003d9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fa28 	bl	80041a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d58:	223f      	movs	r2, #63	@ 0x3f
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0216 	orr.w	r2, r2, #22
 8003d6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0208 	orr.w	r2, r2, #8
 8003d86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e005      	b.n	8003da6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
 8003da4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003dbe:	f7ff f94d 	bl	800305c <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d008      	beq.n	8003de2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2280      	movs	r2, #128	@ 0x80
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e052      	b.n	8003e88 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0216 	bic.w	r2, r2, #22
 8003df0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e00:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <HAL_DMA_Abort+0x62>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d007      	beq.n	8003e22 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0208 	bic.w	r2, r2, #8
 8003e20:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e32:	e013      	b.n	8003e5c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e34:	f7ff f912 	bl	800305c <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b05      	cmp	r3, #5
 8003e40:	d90c      	bls.n	8003e5c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2203      	movs	r2, #3
 8003e4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e015      	b.n	8003e88 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e4      	bne.n	8003e34 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	223f      	movs	r2, #63	@ 0x3f
 8003e70:	409a      	lsls	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80040d8 <HAL_DMA_IRQHandler+0x248>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a8e      	ldr	r2, [pc, #568]	@ (80040dc <HAL_DMA_IRQHandler+0x24c>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	0a9b      	lsrs	r3, r3, #10
 8003ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eba:	2208      	movs	r2, #8
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01a      	beq.n	8003efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d013      	beq.n	8003efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0204 	bic.w	r2, r2, #4
 8003ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	2208      	movs	r2, #8
 8003eea:	409a      	lsls	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f00:	2201      	movs	r2, #1
 8003f02:	409a      	lsls	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d012      	beq.n	8003f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f1e:	2201      	movs	r2, #1
 8003f20:	409a      	lsls	r2, r3
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f36:	2204      	movs	r2, #4
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d012      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00b      	beq.n	8003f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f54:	2204      	movs	r2, #4
 8003f56:	409a      	lsls	r2, r3
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f60:	f043 0204 	orr.w	r2, r3, #4
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6c:	2210      	movs	r2, #16
 8003f6e:	409a      	lsls	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4013      	ands	r3, r2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d043      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d03c      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d018      	beq.n	8003fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d108      	bne.n	8003fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d024      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	4798      	blx	r3
 8003fbe:	e01f      	b.n	8004000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01b      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	4798      	blx	r3
 8003fd0:	e016      	b.n	8004000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 0208 	bic.w	r2, r2, #8
 8003fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	2220      	movs	r2, #32
 8004006:	409a      	lsls	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 808f 	beq.w	8004130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8087 	beq.w	8004130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004026:	2220      	movs	r2, #32
 8004028:	409a      	lsls	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b05      	cmp	r3, #5
 8004038:	d136      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0216 	bic.w	r2, r2, #22
 8004048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695a      	ldr	r2, [r3, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d103      	bne.n	800406a <HAL_DMA_IRQHandler+0x1da>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0208 	bic.w	r2, r2, #8
 8004078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800407e:	223f      	movs	r2, #63	@ 0x3f
 8004080:	409a      	lsls	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d07e      	beq.n	800419c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	4798      	blx	r3
        }
        return;
 80040a6:	e079      	b.n	800419c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01d      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10d      	bne.n	80040e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d031      	beq.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	4798      	blx	r3
 80040d4:	e02c      	b.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
 80040d6:	bf00      	nop
 80040d8:	20000004 	.word	0x20000004
 80040dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d023      	beq.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
 80040f0:	e01e      	b.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10f      	bne.n	8004120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0210 	bic.w	r2, r2, #16
 800410e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004134:	2b00      	cmp	r3, #0
 8004136:	d032      	beq.n	800419e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d022      	beq.n	800418a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2205      	movs	r2, #5
 8004148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	3301      	adds	r3, #1
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	429a      	cmp	r2, r3
 8004166:	d307      	bcc.n	8004178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f2      	bne.n	800415c <HAL_DMA_IRQHandler+0x2cc>
 8004176:	e000      	b.n	800417a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	4798      	blx	r3
 800419a:	e000      	b.n	800419e <HAL_DMA_IRQHandler+0x30e>
        return;
 800419c:	bf00      	nop
    }
  }
}
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80041c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b40      	cmp	r3, #64	@ 0x40
 80041d0:	d108      	bne.n	80041e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041e2:	e007      	b.n	80041f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	60da      	str	r2, [r3, #12]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	3b10      	subs	r3, #16
 8004210:	4a14      	ldr	r2, [pc, #80]	@ (8004264 <DMA_CalcBaseAndBitshift+0x64>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800421a:	4a13      	ldr	r2, [pc, #76]	@ (8004268 <DMA_CalcBaseAndBitshift+0x68>)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b03      	cmp	r3, #3
 800422c:	d909      	bls.n	8004242 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004240:	e007      	b.n	8004252 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800424a:	f023 0303 	bic.w	r3, r3, #3
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	aaaaaaab 	.word	0xaaaaaaab
 8004268:	0800af30 	.word	0x0800af30

0800426c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800427c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d11f      	bne.n	80042c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d856      	bhi.n	800433a <DMA_CheckFifoParam+0xce>
 800428c:	a201      	add	r2, pc, #4	@ (adr r2, 8004294 <DMA_CheckFifoParam+0x28>)
 800428e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004292:	bf00      	nop
 8004294:	080042a5 	.word	0x080042a5
 8004298:	080042b7 	.word	0x080042b7
 800429c:	080042a5 	.word	0x080042a5
 80042a0:	0800433b 	.word	0x0800433b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d046      	beq.n	800433e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b4:	e043      	b.n	800433e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042be:	d140      	bne.n	8004342 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c4:	e03d      	b.n	8004342 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ce:	d121      	bne.n	8004314 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d837      	bhi.n	8004346 <DMA_CheckFifoParam+0xda>
 80042d6:	a201      	add	r2, pc, #4	@ (adr r2, 80042dc <DMA_CheckFifoParam+0x70>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042f3 	.word	0x080042f3
 80042e4:	080042ed 	.word	0x080042ed
 80042e8:	08004305 	.word	0x08004305
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      break;
 80042f0:	e030      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d025      	beq.n	800434a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004302:	e022      	b.n	800434a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800430c:	d11f      	bne.n	800434e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004312:	e01c      	b.n	800434e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d903      	bls.n	8004322 <DMA_CheckFifoParam+0xb6>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d003      	beq.n	8004328 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004320:	e018      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
      break;
 8004326:	e015      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00e      	beq.n	8004352 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	e00b      	b.n	8004352 <DMA_CheckFifoParam+0xe6>
      break;
 800433a:	bf00      	nop
 800433c:	e00a      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 800433e:	bf00      	nop
 8004340:	e008      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 8004342:	bf00      	nop
 8004344:	e006      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 8004346:	bf00      	nop
 8004348:	e004      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 800434a:	bf00      	nop
 800434c:	e002      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;   
 800434e:	bf00      	nop
 8004350:	e000      	b.n	8004354 <DMA_CheckFifoParam+0xe8>
      break;
 8004352:	bf00      	nop
    }
  } 
  
  return status; 
 8004354:	7bfb      	ldrb	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop

08004364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004364:	b480      	push	{r7}
 8004366:	b089      	sub	sp, #36	@ 0x24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004372:	2300      	movs	r3, #0
 8004374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	e16b      	b.n	8004658 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004380:	2201      	movs	r2, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	f040 815a 	bne.w	8004652 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d005      	beq.n	80043b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d130      	bne.n	8004418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	2203      	movs	r2, #3
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4313      	orrs	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043ec:	2201      	movs	r2, #1
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 0201 	and.w	r2, r3, #1
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	4313      	orrs	r3, r2
 8004410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	2b03      	cmp	r3, #3
 8004422:	d017      	beq.n	8004454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4313      	orrs	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d123      	bne.n	80044a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	08da      	lsrs	r2, r3, #3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3208      	adds	r2, #8
 8004468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	220f      	movs	r2, #15
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	08da      	lsrs	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	3208      	adds	r2, #8
 80044a2:	69b9      	ldr	r1, [r7, #24]
 80044a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	2203      	movs	r2, #3
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 0203 	and.w	r2, r3, #3
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80b4 	beq.w	8004652 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	4b60      	ldr	r3, [pc, #384]	@ (8004670 <HAL_GPIO_Init+0x30c>)
 80044f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004670 <HAL_GPIO_Init+0x30c>)
 80044f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80044fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004670 <HAL_GPIO_Init+0x30c>)
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004506:	4a5b      	ldr	r2, [pc, #364]	@ (8004674 <HAL_GPIO_Init+0x310>)
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	089b      	lsrs	r3, r3, #2
 800450c:	3302      	adds	r3, #2
 800450e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	220f      	movs	r2, #15
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a52      	ldr	r2, [pc, #328]	@ (8004678 <HAL_GPIO_Init+0x314>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d02b      	beq.n	800458a <HAL_GPIO_Init+0x226>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a51      	ldr	r2, [pc, #324]	@ (800467c <HAL_GPIO_Init+0x318>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d025      	beq.n	8004586 <HAL_GPIO_Init+0x222>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a50      	ldr	r2, [pc, #320]	@ (8004680 <HAL_GPIO_Init+0x31c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d01f      	beq.n	8004582 <HAL_GPIO_Init+0x21e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4f      	ldr	r2, [pc, #316]	@ (8004684 <HAL_GPIO_Init+0x320>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d019      	beq.n	800457e <HAL_GPIO_Init+0x21a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4e      	ldr	r2, [pc, #312]	@ (8004688 <HAL_GPIO_Init+0x324>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_GPIO_Init+0x216>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a4d      	ldr	r2, [pc, #308]	@ (800468c <HAL_GPIO_Init+0x328>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d00d      	beq.n	8004576 <HAL_GPIO_Init+0x212>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4c      	ldr	r2, [pc, #304]	@ (8004690 <HAL_GPIO_Init+0x32c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <HAL_GPIO_Init+0x20e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4b      	ldr	r2, [pc, #300]	@ (8004694 <HAL_GPIO_Init+0x330>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <HAL_GPIO_Init+0x20a>
 800456a:	2307      	movs	r3, #7
 800456c:	e00e      	b.n	800458c <HAL_GPIO_Init+0x228>
 800456e:	2308      	movs	r3, #8
 8004570:	e00c      	b.n	800458c <HAL_GPIO_Init+0x228>
 8004572:	2306      	movs	r3, #6
 8004574:	e00a      	b.n	800458c <HAL_GPIO_Init+0x228>
 8004576:	2305      	movs	r3, #5
 8004578:	e008      	b.n	800458c <HAL_GPIO_Init+0x228>
 800457a:	2304      	movs	r3, #4
 800457c:	e006      	b.n	800458c <HAL_GPIO_Init+0x228>
 800457e:	2303      	movs	r3, #3
 8004580:	e004      	b.n	800458c <HAL_GPIO_Init+0x228>
 8004582:	2302      	movs	r3, #2
 8004584:	e002      	b.n	800458c <HAL_GPIO_Init+0x228>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <HAL_GPIO_Init+0x228>
 800458a:	2300      	movs	r3, #0
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	f002 0203 	and.w	r2, r2, #3
 8004592:	0092      	lsls	r2, r2, #2
 8004594:	4093      	lsls	r3, r2
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800459c:	4935      	ldr	r1, [pc, #212]	@ (8004674 <HAL_GPIO_Init+0x310>)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	089b      	lsrs	r3, r3, #2
 80045a2:	3302      	adds	r3, #2
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004698 <HAL_GPIO_Init+0x334>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045ce:	4a32      	ldr	r2, [pc, #200]	@ (8004698 <HAL_GPIO_Init+0x334>)
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045d4:	4b30      	ldr	r3, [pc, #192]	@ (8004698 <HAL_GPIO_Init+0x334>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045f8:	4a27      	ldr	r2, [pc, #156]	@ (8004698 <HAL_GPIO_Init+0x334>)
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045fe:	4b26      	ldr	r3, [pc, #152]	@ (8004698 <HAL_GPIO_Init+0x334>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004622:	4a1d      	ldr	r2, [pc, #116]	@ (8004698 <HAL_GPIO_Init+0x334>)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004628:	4b1b      	ldr	r3, [pc, #108]	@ (8004698 <HAL_GPIO_Init+0x334>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	43db      	mvns	r3, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4013      	ands	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800464c:	4a12      	ldr	r2, [pc, #72]	@ (8004698 <HAL_GPIO_Init+0x334>)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	3301      	adds	r3, #1
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	2b0f      	cmp	r3, #15
 800465c:	f67f ae90 	bls.w	8004380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	3724      	adds	r7, #36	@ 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40023800 	.word	0x40023800
 8004674:	40013800 	.word	0x40013800
 8004678:	40020000 	.word	0x40020000
 800467c:	40020400 	.word	0x40020400
 8004680:	40020800 	.word	0x40020800
 8004684:	40020c00 	.word	0x40020c00
 8004688:	40021000 	.word	0x40021000
 800468c:	40021400 	.word	0x40021400
 8004690:	40021800 	.word	0x40021800
 8004694:	40021c00 	.word	0x40021c00
 8004698:	40013c00 	.word	0x40013c00

0800469c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	887b      	ldrh	r3, [r7, #2]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046b4:	2301      	movs	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	e001      	b.n	80046be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046be:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3714      	adds	r7, #20
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046d6:	4b08      	ldr	r3, [pc, #32]	@ (80046f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	4013      	ands	r3, r2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046e2:	4a05      	ldr	r2, [pc, #20]	@ (80046f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046e4:	88fb      	ldrh	r3, [r7, #6]
 80046e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fd fe68 	bl	80023c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40013c00 	.word	0x40013c00

080046fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e12b      	b.n	8004966 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fe fa4c 	bl	8002bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2224      	movs	r2, #36	@ 0x24
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800474e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800475e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004760:	f001 f89a 	bl	8005898 <HAL_RCC_GetPCLK1Freq>
 8004764:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4a81      	ldr	r2, [pc, #516]	@ (8004970 <HAL_I2C_Init+0x274>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d807      	bhi.n	8004780 <HAL_I2C_Init+0x84>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4a80      	ldr	r2, [pc, #512]	@ (8004974 <HAL_I2C_Init+0x278>)
 8004774:	4293      	cmp	r3, r2
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e006      	b.n	800478e <HAL_I2C_Init+0x92>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a7d      	ldr	r2, [pc, #500]	@ (8004978 <HAL_I2C_Init+0x27c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	bf94      	ite	ls
 8004788:	2301      	movls	r3, #1
 800478a:	2300      	movhi	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e0e7      	b.n	8004966 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a78      	ldr	r2, [pc, #480]	@ (800497c <HAL_I2C_Init+0x280>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	0c9b      	lsrs	r3, r3, #18
 80047a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004970 <HAL_I2C_Init+0x274>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d802      	bhi.n	80047d0 <HAL_I2C_Init+0xd4>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	3301      	adds	r3, #1
 80047ce:	e009      	b.n	80047e4 <HAL_I2C_Init+0xe8>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	4a69      	ldr	r2, [pc, #420]	@ (8004980 <HAL_I2C_Init+0x284>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	3301      	adds	r3, #1
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80047f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	495c      	ldr	r1, [pc, #368]	@ (8004970 <HAL_I2C_Init+0x274>)
 8004800:	428b      	cmp	r3, r1
 8004802:	d819      	bhi.n	8004838 <HAL_I2C_Init+0x13c>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	1e59      	subs	r1, r3, #1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004812:	1c59      	adds	r1, r3, #1
 8004814:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004818:	400b      	ands	r3, r1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <HAL_I2C_Init+0x138>
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1e59      	subs	r1, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	005b      	lsls	r3, r3, #1
 8004828:	fbb1 f3f3 	udiv	r3, r1, r3
 800482c:	3301      	adds	r3, #1
 800482e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004832:	e051      	b.n	80048d8 <HAL_I2C_Init+0x1dc>
 8004834:	2304      	movs	r3, #4
 8004836:	e04f      	b.n	80048d8 <HAL_I2C_Init+0x1dc>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d111      	bne.n	8004864 <HAL_I2C_Init+0x168>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1e58      	subs	r0, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	440b      	add	r3, r1
 800484e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004852:	3301      	adds	r3, #1
 8004854:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004858:	2b00      	cmp	r3, #0
 800485a:	bf0c      	ite	eq
 800485c:	2301      	moveq	r3, #1
 800485e:	2300      	movne	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e012      	b.n	800488a <HAL_I2C_Init+0x18e>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	1e58      	subs	r0, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6859      	ldr	r1, [r3, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	0099      	lsls	r1, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	fbb0 f3f3 	udiv	r3, r0, r3
 800487a:	3301      	adds	r3, #1
 800487c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004880:	2b00      	cmp	r3, #0
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_Init+0x196>
 800488e:	2301      	movs	r3, #1
 8004890:	e022      	b.n	80048d8 <HAL_I2C_Init+0x1dc>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10e      	bne.n	80048b8 <HAL_I2C_Init+0x1bc>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1e58      	subs	r0, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6859      	ldr	r1, [r3, #4]
 80048a2:	460b      	mov	r3, r1
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	440b      	add	r3, r1
 80048a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ac:	3301      	adds	r3, #1
 80048ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048b6:	e00f      	b.n	80048d8 <HAL_I2C_Init+0x1dc>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	1e58      	subs	r0, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	0099      	lsls	r1, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ce:	3301      	adds	r3, #1
 80048d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	6809      	ldr	r1, [r1, #0]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69da      	ldr	r2, [r3, #28]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004906:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6911      	ldr	r1, [r2, #16]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	68d2      	ldr	r2, [r2, #12]
 8004912:	4311      	orrs	r1, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	430b      	orrs	r3, r1
 800491a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695a      	ldr	r2, [r3, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	000186a0 	.word	0x000186a0
 8004974:	001e847f 	.word	0x001e847f
 8004978:	003d08ff 	.word	0x003d08ff
 800497c:	431bde83 	.word	0x431bde83
 8004980:	10624dd3 	.word	0x10624dd3

08004984 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	460b      	mov	r3, r1
 8004992:	817b      	strh	r3, [r7, #10]
 8004994:	4613      	mov	r3, r2
 8004996:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004998:	f7fe fb60 	bl	800305c <HAL_GetTick>
 800499c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	f040 80e0 	bne.w	8004b6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	2319      	movs	r3, #25
 80049b2:	2201      	movs	r2, #1
 80049b4:	4970      	ldr	r1, [pc, #448]	@ (8004b78 <HAL_I2C_Master_Transmit+0x1f4>)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f964 	bl	8004c84 <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0d3      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_I2C_Master_Transmit+0x50>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e0cc      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ea>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d007      	beq.n	80049fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0201 	orr.w	r2, r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2221      	movs	r2, #33	@ 0x21
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2210      	movs	r2, #16
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	893a      	ldrh	r2, [r7, #8]
 8004a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4a50      	ldr	r2, [pc, #320]	@ (8004b7c <HAL_I2C_Master_Transmit+0x1f8>)
 8004a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a3c:	8979      	ldrh	r1, [r7, #10]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f89c 	bl	8004b80 <I2C_MasterRequestWrite>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e08d      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	613b      	str	r3, [r7, #16]
 8004a66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004a68:	e066      	b.n	8004b38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	6a39      	ldr	r1, [r7, #32]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fa22 	bl	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00d      	beq.n	8004a96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d107      	bne.n	8004a92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06b      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d11b      	bne.n	8004b0c <HAL_I2C_Master_Transmit+0x188>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d017      	beq.n	8004b0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	781a      	ldrb	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	6a39      	ldr	r1, [r7, #32]
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fa19 	bl	8004f48 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00d      	beq.n	8004b38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d107      	bne.n	8004b34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e01a      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d194      	bne.n	8004a6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e000      	b.n	8004b6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004b6c:	2302      	movs	r3, #2
  }
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	00100002 	.word	0x00100002
 8004b7c:	ffff0000 	.word	0xffff0000

08004b80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	603b      	str	r3, [r7, #0]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d006      	beq.n	8004baa <I2C_MasterRequestWrite+0x2a>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d003      	beq.n	8004baa <I2C_MasterRequestWrite+0x2a>
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ba8:	d108      	bne.n	8004bbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bb8:	601a      	str	r2, [r3, #0]
 8004bba:	e00b      	b.n	8004bd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	2b12      	cmp	r3, #18
 8004bc2:	d107      	bne.n	8004bd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f84f 	bl	8004c84 <I2C_WaitOnFlagUntilTimeout>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00d      	beq.n	8004c08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfa:	d103      	bne.n	8004c04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e035      	b.n	8004c74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c10:	d108      	bne.n	8004c24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c12:	897b      	ldrh	r3, [r7, #10]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c20:	611a      	str	r2, [r3, #16]
 8004c22:	e01b      	b.n	8004c5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c24:	897b      	ldrh	r3, [r7, #10]
 8004c26:	11db      	asrs	r3, r3, #7
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0306 	and.w	r3, r3, #6
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f063 030f 	orn	r3, r3, #15
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	490e      	ldr	r1, [pc, #56]	@ (8004c7c <I2C_MasterRequestWrite+0xfc>)
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 f898 	bl	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e010      	b.n	8004c74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c52:	897b      	ldrh	r3, [r7, #10]
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	4907      	ldr	r1, [pc, #28]	@ (8004c80 <I2C_MasterRequestWrite+0x100>)
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f000 f888 	bl	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	00010008 	.word	0x00010008
 8004c80:	00010002 	.word	0x00010002

08004c84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	4613      	mov	r3, r2
 8004c92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c94:	e048      	b.n	8004d28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d044      	beq.n	8004d28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c9e:	f7fe f9dd 	bl	800305c <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d302      	bcc.n	8004cb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d139      	bne.n	8004d28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d10d      	bne.n	8004cda <I2C_WaitOnFlagUntilTimeout+0x56>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	43da      	mvns	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf0c      	ite	eq
 8004cd0:	2301      	moveq	r3, #1
 8004cd2:	2300      	movne	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	e00c      	b.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	43da      	mvns	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d116      	bne.n	8004d28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d14:	f043 0220 	orr.w	r2, r3, #32
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e023      	b.n	8004d70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	0c1b      	lsrs	r3, r3, #16
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d10d      	bne.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	43da      	mvns	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	e00c      	b.n	8004d68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	43da      	mvns	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d093      	beq.n	8004c96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d86:	e071      	b.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d96:	d123      	bne.n	8004de0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004da6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004db0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	f043 0204 	orr.w	r2, r3, #4
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e067      	b.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d041      	beq.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de8:	f7fe f938 	bl	800305c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d302      	bcc.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d136      	bne.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10c      	bne.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	43da      	mvns	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bf14      	ite	ne
 8004e1a:	2301      	movne	r3, #1
 8004e1c:	2300      	moveq	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	e00b      	b.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	43da      	mvns	r2, r3
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d016      	beq.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	f043 0220 	orr.w	r2, r3, #32
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e021      	b.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	0c1b      	lsrs	r3, r3, #16
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d10c      	bne.n	8004e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	43da      	mvns	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e00b      	b.n	8004ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	43da      	mvns	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf14      	ite	ne
 8004ea2:	2301      	movne	r3, #1
 8004ea4:	2300      	moveq	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f47f af6d 	bne.w	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ec4:	e034      	b.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f886 	bl	8004fd8 <I2C_IsAcknowledgeFailed>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e034      	b.n	8004f40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d028      	beq.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ede:	f7fe f8bd 	bl	800305c <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d302      	bcc.n	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d11d      	bne.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efe:	2b80      	cmp	r3, #128	@ 0x80
 8004f00:	d016      	beq.n	8004f30 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f1c:	f043 0220 	orr.w	r2, r3, #32
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e007      	b.n	8004f40 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3a:	2b80      	cmp	r3, #128	@ 0x80
 8004f3c:	d1c3      	bne.n	8004ec6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f54:	e034      	b.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f83e 	bl	8004fd8 <I2C_IsAcknowledgeFailed>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e034      	b.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d028      	beq.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6e:	f7fe f875 	bl	800305c <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d11d      	bne.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d016      	beq.n	8004fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e007      	b.n	8004fd0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d1c3      	bne.n	8004f56 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fee:	d11b      	bne.n	8005028 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ff8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	f043 0204 	orr.w	r2, r3, #4
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e267      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d075      	beq.n	8005142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005056:	4b88      	ldr	r3, [pc, #544]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b04      	cmp	r3, #4
 8005060:	d00c      	beq.n	800507c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005062:	4b85      	ldr	r3, [pc, #532]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800506a:	2b08      	cmp	r3, #8
 800506c:	d112      	bne.n	8005094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506e:	4b82      	ldr	r3, [pc, #520]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800507a:	d10b      	bne.n	8005094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	4b7e      	ldr	r3, [pc, #504]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05b      	beq.n	8005140 <HAL_RCC_OscConfig+0x108>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d157      	bne.n	8005140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e242      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800509c:	d106      	bne.n	80050ac <HAL_RCC_OscConfig+0x74>
 800509e:	4b76      	ldr	r3, [pc, #472]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a75      	ldr	r2, [pc, #468]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e01d      	b.n	80050e8 <HAL_RCC_OscConfig+0xb0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x98>
 80050b6:	4b70      	ldr	r3, [pc, #448]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a6f      	ldr	r2, [pc, #444]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e00b      	b.n	80050e8 <HAL_RCC_OscConfig+0xb0>
 80050d0:	4b69      	ldr	r3, [pc, #420]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a68      	ldr	r2, [pc, #416]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b66      	ldr	r3, [pc, #408]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a65      	ldr	r2, [pc, #404]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fd ffb4 	bl	800305c <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fd ffb0 	bl	800305c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	@ 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e207      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b5b      	ldr	r3, [pc, #364]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0xc0>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fd ffa0 	bl	800305c <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005120:	f7fd ff9c 	bl	800305c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	@ 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e1f3      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005132:	4b51      	ldr	r3, [pc, #324]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0xe8>
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d063      	beq.n	8005216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800514e:	4b4a      	ldr	r3, [pc, #296]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515a:	4b47      	ldr	r3, [pc, #284]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005162:	2b08      	cmp	r3, #8
 8005164:	d11c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005166:	4b44      	ldr	r3, [pc, #272]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d116      	bne.n	80051a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	4b41      	ldr	r3, [pc, #260]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_RCC_OscConfig+0x152>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e1c7      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518a:	4b3b      	ldr	r3, [pc, #236]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4937      	ldr	r1, [pc, #220]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519e:	e03a      	b.n	8005216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d020      	beq.n	80051ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a8:	4b34      	ldr	r3, [pc, #208]	@ (800527c <HAL_RCC_OscConfig+0x244>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fd ff55 	bl	800305c <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fd ff51 	bl	800305c <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e1a8      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c8:	4b2b      	ldr	r3, [pc, #172]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b28      	ldr	r3, [pc, #160]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4925      	ldr	r1, [pc, #148]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ea:	4b24      	ldr	r3, [pc, #144]	@ (800527c <HAL_RCC_OscConfig+0x244>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd ff34 	bl	800305c <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fd ff30 	bl	800305c <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e187      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520a:	4b1b      	ldr	r3, [pc, #108]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d036      	beq.n	8005290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522a:	4b15      	ldr	r3, [pc, #84]	@ (8005280 <HAL_RCC_OscConfig+0x248>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005230:	f7fd ff14 	bl	800305c <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005238:	f7fd ff10 	bl	800305c <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e167      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524a:	4b0b      	ldr	r3, [pc, #44]	@ (8005278 <HAL_RCC_OscConfig+0x240>)
 800524c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x200>
 8005256:	e01b      	b.n	8005290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005258:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <HAL_RCC_OscConfig+0x248>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525e:	f7fd fefd 	bl	800305c <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	e00e      	b.n	8005284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005266:	f7fd fef9 	bl	800305c <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d907      	bls.n	8005284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e150      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
 8005278:	40023800 	.word	0x40023800
 800527c:	42470000 	.word	0x42470000
 8005280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005284:	4b88      	ldr	r3, [pc, #544]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005286:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ea      	bne.n	8005266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8097 	beq.w	80053cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a2:	4b81      	ldr	r3, [pc, #516]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	4b7d      	ldr	r3, [pc, #500]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b6:	4a7c      	ldr	r2, [pc, #496]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80052be:	4b7a      	ldr	r3, [pc, #488]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ce:	4b77      	ldr	r3, [pc, #476]	@ (80054ac <HAL_RCC_OscConfig+0x474>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d118      	bne.n	800530c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052da:	4b74      	ldr	r3, [pc, #464]	@ (80054ac <HAL_RCC_OscConfig+0x474>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a73      	ldr	r2, [pc, #460]	@ (80054ac <HAL_RCC_OscConfig+0x474>)
 80052e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e6:	f7fd feb9 	bl	800305c <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ee:	f7fd feb5 	bl	800305c <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e10c      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005300:	4b6a      	ldr	r3, [pc, #424]	@ (80054ac <HAL_RCC_OscConfig+0x474>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d106      	bne.n	8005322 <HAL_RCC_OscConfig+0x2ea>
 8005314:	4b64      	ldr	r3, [pc, #400]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005318:	4a63      	ldr	r2, [pc, #396]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005320:	e01c      	b.n	800535c <HAL_RCC_OscConfig+0x324>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b05      	cmp	r3, #5
 8005328:	d10c      	bne.n	8005344 <HAL_RCC_OscConfig+0x30c>
 800532a:	4b5f      	ldr	r3, [pc, #380]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532e:	4a5e      	ldr	r2, [pc, #376]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	6713      	str	r3, [r2, #112]	@ 0x70
 8005336:	4b5c      	ldr	r3, [pc, #368]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800533a:	4a5b      	ldr	r2, [pc, #364]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	6713      	str	r3, [r2, #112]	@ 0x70
 8005342:	e00b      	b.n	800535c <HAL_RCC_OscConfig+0x324>
 8005344:	4b58      	ldr	r3, [pc, #352]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005348:	4a57      	ldr	r2, [pc, #348]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 800534a:	f023 0301 	bic.w	r3, r3, #1
 800534e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005350:	4b55      	ldr	r3, [pc, #340]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005354:	4a54      	ldr	r2, [pc, #336]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005356:	f023 0304 	bic.w	r3, r3, #4
 800535a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d015      	beq.n	8005390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fd fe7a 	bl	800305c <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536a:	e00a      	b.n	8005382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fd fe76 	bl	800305c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0cb      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005382:	4b49      	ldr	r3, [pc, #292]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ee      	beq.n	800536c <HAL_RCC_OscConfig+0x334>
 800538e:	e014      	b.n	80053ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005390:	f7fd fe64 	bl	800305c <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005396:	e00a      	b.n	80053ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005398:	f7fd fe60 	bl	800305c <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e0b5      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ae:	4b3e      	ldr	r3, [pc, #248]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1ee      	bne.n	8005398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c0:	4b39      	ldr	r3, [pc, #228]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	4a38      	ldr	r2, [pc, #224]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80a1 	beq.w	8005518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053d6:	4b34      	ldr	r3, [pc, #208]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d05c      	beq.n	800549c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d141      	bne.n	800546e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ea:	4b31      	ldr	r3, [pc, #196]	@ (80054b0 <HAL_RCC_OscConfig+0x478>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fd fe34 	bl	800305c <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f8:	f7fd fe30 	bl	800305c <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e087      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540a:	4b27      	ldr	r3, [pc, #156]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	3b01      	subs	r3, #1
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	491b      	ldr	r1, [pc, #108]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005440:	4b1b      	ldr	r3, [pc, #108]	@ (80054b0 <HAL_RCC_OscConfig+0x478>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005446:	f7fd fe09 	bl	800305c <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544e:	f7fd fe05 	bl	800305c <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e05c      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005460:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x416>
 800546c:	e054      	b.n	8005518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <HAL_RCC_OscConfig+0x478>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fd fdf2 	bl	800305c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547c:	f7fd fdee 	bl	800305c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e045      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548e:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x444>
 800549a:	e03d      	b.n	8005518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e038      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40007000 	.word	0x40007000
 80054b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005524 <HAL_RCC_OscConfig+0x4ec>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d028      	beq.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d121      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d11a      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d111      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	3b01      	subs	r3, #1
 80054fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d107      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d001      	beq.n	8005518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800

08005528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0cc      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800553c:	4b68      	ldr	r3, [pc, #416]	@ (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d90c      	bls.n	8005564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554a:	4b65      	ldr	r3, [pc, #404]	@ (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b63      	ldr	r3, [pc, #396]	@ (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0b8      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d020      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800557c:	4b59      	ldr	r3, [pc, #356]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4a58      	ldr	r2, [pc, #352]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005594:	4b53      	ldr	r3, [pc, #332]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4a52      	ldr	r2, [pc, #328]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800559e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a0:	4b50      	ldr	r3, [pc, #320]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	494d      	ldr	r1, [pc, #308]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d044      	beq.n	8005648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b47      	ldr	r3, [pc, #284]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d119      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e07f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d003      	beq.n	80055e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d107      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e6:	4b3f      	ldr	r3, [pc, #252]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e06f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f6:	4b3b      	ldr	r3, [pc, #236]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e067      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005606:	4b37      	ldr	r3, [pc, #220]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4934      	ldr	r1, [pc, #208]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	4313      	orrs	r3, r2
 8005616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005618:	f7fd fd20 	bl	800305c <HAL_GetTick>
 800561c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	e00a      	b.n	8005636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005620:	f7fd fd1c 	bl	800305c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e04f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	4b2b      	ldr	r3, [pc, #172]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 020c 	and.w	r2, r3, #12
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	429a      	cmp	r2, r3
 8005646:	d1eb      	bne.n	8005620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005648:	4b25      	ldr	r3, [pc, #148]	@ (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d20c      	bcs.n	8005670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005656:	4b22      	ldr	r3, [pc, #136]	@ (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b20      	ldr	r3, [pc, #128]	@ (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d001      	beq.n	8005670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e032      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800567c:	4b19      	ldr	r3, [pc, #100]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4916      	ldr	r1, [pc, #88]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800569a:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	490e      	ldr	r1, [pc, #56]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ae:	f000 f821 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 80056b2:	4602      	mov	r2, r0
 80056b4:	4b0b      	ldr	r3, [pc, #44]	@ (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	490a      	ldr	r1, [pc, #40]	@ (80056e8 <HAL_RCC_ClockConfig+0x1c0>)
 80056c0:	5ccb      	ldrb	r3, [r1, r3]
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	4a09      	ldr	r2, [pc, #36]	@ (80056ec <HAL_RCC_ClockConfig+0x1c4>)
 80056c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ca:	4b09      	ldr	r3, [pc, #36]	@ (80056f0 <HAL_RCC_ClockConfig+0x1c8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fd fc80 	bl	8002fd4 <HAL_InitTick>

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40023c00 	.word	0x40023c00
 80056e4:	40023800 	.word	0x40023800
 80056e8:	0800af18 	.word	0x0800af18
 80056ec:	20000004 	.word	0x20000004
 80056f0:	20000008 	.word	0x20000008

080056f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f8:	b090      	sub	sp, #64	@ 0x40
 80056fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8005700:	2300      	movs	r3, #0
 8005702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005704:	2300      	movs	r3, #0
 8005706:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800570c:	4b59      	ldr	r3, [pc, #356]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b08      	cmp	r3, #8
 8005716:	d00d      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0x40>
 8005718:	2b08      	cmp	r3, #8
 800571a:	f200 80a1 	bhi.w	8005860 <HAL_RCC_GetSysClockFreq+0x16c>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0x34>
 8005722:	2b04      	cmp	r3, #4
 8005724:	d003      	beq.n	800572e <HAL_RCC_GetSysClockFreq+0x3a>
 8005726:	e09b      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005728:	4b53      	ldr	r3, [pc, #332]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x184>)
 800572a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800572c:	e09b      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800572e:	4b53      	ldr	r3, [pc, #332]	@ (800587c <HAL_RCC_GetSysClockFreq+0x188>)
 8005730:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005732:	e098      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005734:	4b4f      	ldr	r3, [pc, #316]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800573e:	4b4d      	ldr	r3, [pc, #308]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d028      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574a:	4b4a      	ldr	r3, [pc, #296]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	099b      	lsrs	r3, r3, #6
 8005750:	2200      	movs	r2, #0
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	627a      	str	r2, [r7, #36]	@ 0x24
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800575c:	2100      	movs	r1, #0
 800575e:	4b47      	ldr	r3, [pc, #284]	@ (800587c <HAL_RCC_GetSysClockFreq+0x188>)
 8005760:	fb03 f201 	mul.w	r2, r3, r1
 8005764:	2300      	movs	r3, #0
 8005766:	fb00 f303 	mul.w	r3, r0, r3
 800576a:	4413      	add	r3, r2
 800576c:	4a43      	ldr	r2, [pc, #268]	@ (800587c <HAL_RCC_GetSysClockFreq+0x188>)
 800576e:	fba0 1202 	umull	r1, r2, r0, r2
 8005772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005774:	460a      	mov	r2, r1
 8005776:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005778:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800577a:	4413      	add	r3, r2
 800577c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800577e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005780:	2200      	movs	r2, #0
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	61fa      	str	r2, [r7, #28]
 8005786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800578a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800578e:	f7fb fa7b 	bl	8000c88 <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4613      	mov	r3, r2
 8005798:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800579a:	e053      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579c:	4b35      	ldr	r3, [pc, #212]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	099b      	lsrs	r3, r3, #6
 80057a2:	2200      	movs	r2, #0
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	617a      	str	r2, [r7, #20]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057ae:	f04f 0b00 	mov.w	fp, #0
 80057b2:	4652      	mov	r2, sl
 80057b4:	465b      	mov	r3, fp
 80057b6:	f04f 0000 	mov.w	r0, #0
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	0159      	lsls	r1, r3, #5
 80057c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c4:	0150      	lsls	r0, r2, #5
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	ebb2 080a 	subs.w	r8, r2, sl
 80057ce:	eb63 090b 	sbc.w	r9, r3, fp
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057e6:	ebb2 0408 	subs.w	r4, r2, r8
 80057ea:	eb63 0509 	sbc.w	r5, r3, r9
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	00eb      	lsls	r3, r5, #3
 80057f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057fc:	00e2      	lsls	r2, r4, #3
 80057fe:	4614      	mov	r4, r2
 8005800:	461d      	mov	r5, r3
 8005802:	eb14 030a 	adds.w	r3, r4, sl
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	eb45 030b 	adc.w	r3, r5, fp
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800581a:	4629      	mov	r1, r5
 800581c:	028b      	lsls	r3, r1, #10
 800581e:	4621      	mov	r1, r4
 8005820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005824:	4621      	mov	r1, r4
 8005826:	028a      	lsls	r2, r1, #10
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582e:	2200      	movs	r2, #0
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	60fa      	str	r2, [r7, #12]
 8005834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005838:	f7fb fa26 	bl	8000c88 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005844:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	3301      	adds	r3, #1
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005854:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800585e:	e002      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005860:	4b05      	ldr	r3, [pc, #20]	@ (8005878 <HAL_RCC_GetSysClockFreq+0x184>)
 8005862:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005868:	4618      	mov	r0, r3
 800586a:	3740      	adds	r7, #64	@ 0x40
 800586c:	46bd      	mov	sp, r7
 800586e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800
 8005878:	00f42400 	.word	0x00f42400
 800587c:	017d7840 	.word	0x017d7840

08005880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005884:	4b03      	ldr	r3, [pc, #12]	@ (8005894 <HAL_RCC_GetHCLKFreq+0x14>)
 8005886:	681b      	ldr	r3, [r3, #0]
}
 8005888:	4618      	mov	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000004 	.word	0x20000004

08005898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800589c:	f7ff fff0 	bl	8005880 <HAL_RCC_GetHCLKFreq>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b05      	ldr	r3, [pc, #20]	@ (80058b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	0a9b      	lsrs	r3, r3, #10
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	4903      	ldr	r1, [pc, #12]	@ (80058bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023800 	.word	0x40023800
 80058bc:	0800af28 	.word	0x0800af28

080058c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058c4:	f7ff ffdc 	bl	8005880 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0b5b      	lsrs	r3, r3, #13
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	@ (80058e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	0800af28 	.word	0x0800af28

080058e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e042      	b.n	8005980 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fd f99e 	bl	8002c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2224      	movs	r2, #36	@ 0x24
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800592a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f973 	bl	8005c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695a      	ldr	r2, [r3, #20]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08a      	sub	sp, #40	@ 0x28
 800598c:	af02      	add	r7, sp, #8
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	4613      	mov	r3, r2
 8005996:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b20      	cmp	r3, #32
 80059a6:	d175      	bne.n	8005a94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d002      	beq.n	80059b4 <HAL_UART_Transmit+0x2c>
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e06e      	b.n	8005a96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2221      	movs	r2, #33	@ 0x21
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059c6:	f7fd fb49 	bl	800305c <HAL_GetTick>
 80059ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	88fa      	ldrh	r2, [r7, #6]
 80059d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e0:	d108      	bne.n	80059f4 <HAL_UART_Transmit+0x6c>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e003      	b.n	80059fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059fc:	e02e      	b.n	8005a5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2180      	movs	r1, #128	@ 0x80
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f848 	bl	8005a9e <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d005      	beq.n	8005a20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e03a      	b.n	8005a96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	3302      	adds	r3, #2
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	e007      	b.n	8005a4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1cb      	bne.n	80059fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2140      	movs	r1, #64	@ 0x40
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 f814 	bl	8005a9e <UART_WaitOnFlagUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2220      	movs	r2, #32
 8005a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e006      	b.n	8005a96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	603b      	str	r3, [r7, #0]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aae:	e03b      	b.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d037      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab8:	f7fd fad0 	bl	800305c <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	6a3a      	ldr	r2, [r7, #32]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d302      	bcc.n	8005ace <UART_WaitOnFlagUntilTimeout+0x30>
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e03a      	b.n	8005b48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d023      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b80      	cmp	r3, #128	@ 0x80
 8005ae4:	d020      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b40      	cmp	r3, #64	@ 0x40
 8005aea:	d01d      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d116      	bne.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005afa:	2300      	movs	r3, #0
 8005afc:	617b      	str	r3, [r7, #20]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	617b      	str	r3, [r7, #20]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f81d 	bl	8005b50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2208      	movs	r2, #8
 8005b1a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e00f      	b.n	8005b48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d0b4      	beq.n	8005ab0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b095      	sub	sp, #84	@ 0x54
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	330c      	adds	r3, #12
 8005b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b62:	e853 3f00 	ldrex	r3, [r3]
 8005b66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b78:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e5      	bne.n	8005b58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3314      	adds	r3, #20
 8005b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	6a3b      	ldr	r3, [r7, #32]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f023 0301 	bic.w	r3, r3, #1
 8005ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3314      	adds	r3, #20
 8005baa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d119      	bne.n	8005bfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f023 0310 	bic.w	r3, r3, #16
 8005bde:	647b      	str	r3, [r7, #68]	@ 0x44
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	330c      	adds	r3, #12
 8005be6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005be8:	61ba      	str	r2, [r7, #24]
 8005bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6979      	ldr	r1, [r7, #20]
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	613b      	str	r3, [r7, #16]
   return(result);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e5      	bne.n	8005bc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c0a:	bf00      	nop
 8005c0c:	3754      	adds	r7, #84	@ 0x54
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
	...

08005c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c1c:	b0c0      	sub	sp, #256	@ 0x100
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	68d9      	ldr	r1, [r3, #12]
 8005c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	ea40 0301 	orr.w	r3, r0, r1
 8005c40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c70:	f021 010c 	bic.w	r1, r1, #12
 8005c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c92:	6999      	ldr	r1, [r3, #24]
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	ea40 0301 	orr.w	r3, r0, r1
 8005c9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b8f      	ldr	r3, [pc, #572]	@ (8005ee4 <UART_SetConfig+0x2cc>)
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d005      	beq.n	8005cb8 <UART_SetConfig+0xa0>
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b8d      	ldr	r3, [pc, #564]	@ (8005ee8 <UART_SetConfig+0x2d0>)
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d104      	bne.n	8005cc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cb8:	f7ff fe02 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 8005cbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cc0:	e003      	b.n	8005cca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cc2:	f7ff fde9 	bl	8005898 <HAL_RCC_GetPCLK1Freq>
 8005cc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cd4:	f040 810c 	bne.w	8005ef0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ce2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ce6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005cea:	4622      	mov	r2, r4
 8005cec:	462b      	mov	r3, r5
 8005cee:	1891      	adds	r1, r2, r2
 8005cf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005cf2:	415b      	adcs	r3, r3
 8005cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	eb12 0801 	adds.w	r8, r2, r1
 8005d00:	4629      	mov	r1, r5
 8005d02:	eb43 0901 	adc.w	r9, r3, r1
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d1a:	4690      	mov	r8, r2
 8005d1c:	4699      	mov	r9, r3
 8005d1e:	4623      	mov	r3, r4
 8005d20:	eb18 0303 	adds.w	r3, r8, r3
 8005d24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d28:	462b      	mov	r3, r5
 8005d2a:	eb49 0303 	adc.w	r3, r9, r3
 8005d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d46:	460b      	mov	r3, r1
 8005d48:	18db      	adds	r3, r3, r3
 8005d4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	eb42 0303 	adc.w	r3, r2, r3
 8005d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d5c:	f7fa ff94 	bl	8000c88 <__aeabi_uldivmod>
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4b61      	ldr	r3, [pc, #388]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005d66:	fba3 2302 	umull	r2, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	011c      	lsls	r4, r3, #4
 8005d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d72:	2200      	movs	r2, #0
 8005d74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d80:	4642      	mov	r2, r8
 8005d82:	464b      	mov	r3, r9
 8005d84:	1891      	adds	r1, r2, r2
 8005d86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d88:	415b      	adcs	r3, r3
 8005d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d90:	4641      	mov	r1, r8
 8005d92:	eb12 0a01 	adds.w	sl, r2, r1
 8005d96:	4649      	mov	r1, r9
 8005d98:	eb43 0b01 	adc.w	fp, r3, r1
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	f04f 0300 	mov.w	r3, #0
 8005da4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005da8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005db0:	4692      	mov	sl, r2
 8005db2:	469b      	mov	fp, r3
 8005db4:	4643      	mov	r3, r8
 8005db6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	eb4b 0303 	adc.w	r3, fp, r3
 8005dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005dd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	18db      	adds	r3, r3, r3
 8005de0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005de2:	4613      	mov	r3, r2
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005dee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005df2:	f7fa ff49 	bl	8000c88 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4b3b      	ldr	r3, [pc, #236]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2264      	movs	r2, #100	@ 0x64
 8005e06:	fb02 f303 	mul.w	r3, r2, r3
 8005e0a:	1acb      	subs	r3, r1, r3
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e12:	4b36      	ldr	r3, [pc, #216]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005e14:	fba3 2302 	umull	r2, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e20:	441c      	add	r4, r3
 8005e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e34:	4642      	mov	r2, r8
 8005e36:	464b      	mov	r3, r9
 8005e38:	1891      	adds	r1, r2, r2
 8005e3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e3c:	415b      	adcs	r3, r3
 8005e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e44:	4641      	mov	r1, r8
 8005e46:	1851      	adds	r1, r2, r1
 8005e48:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e4a:	4649      	mov	r1, r9
 8005e4c:	414b      	adcs	r3, r1
 8005e4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	00cb      	lsls	r3, r1, #3
 8005e60:	4651      	mov	r1, sl
 8005e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e66:	4651      	mov	r1, sl
 8005e68:	00ca      	lsls	r2, r1, #3
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4642      	mov	r2, r8
 8005e72:	189b      	adds	r3, r3, r2
 8005e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e78:	464b      	mov	r3, r9
 8005e7a:	460a      	mov	r2, r1
 8005e7c:	eb42 0303 	adc.w	r3, r2, r3
 8005e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e98:	460b      	mov	r3, r1
 8005e9a:	18db      	adds	r3, r3, r3
 8005e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	eb42 0303 	adc.w	r3, r2, r3
 8005ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005eaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005eae:	f7fa feeb 	bl	8000c88 <__aeabi_uldivmod>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	2164      	movs	r1, #100	@ 0x64
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	3332      	adds	r3, #50	@ 0x32
 8005eca:	4a08      	ldr	r2, [pc, #32]	@ (8005eec <UART_SetConfig+0x2d4>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	f003 0207 	and.w	r2, r3, #7
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4422      	add	r2, r4
 8005ede:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ee0:	e106      	b.n	80060f0 <UART_SetConfig+0x4d8>
 8005ee2:	bf00      	nop
 8005ee4:	40011000 	.word	0x40011000
 8005ee8:	40011400 	.word	0x40011400
 8005eec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005efa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005efe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f02:	4642      	mov	r2, r8
 8005f04:	464b      	mov	r3, r9
 8005f06:	1891      	adds	r1, r2, r2
 8005f08:	6239      	str	r1, [r7, #32]
 8005f0a:	415b      	adcs	r3, r3
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f12:	4641      	mov	r1, r8
 8005f14:	1854      	adds	r4, r2, r1
 8005f16:	4649      	mov	r1, r9
 8005f18:	eb43 0501 	adc.w	r5, r3, r1
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	00eb      	lsls	r3, r5, #3
 8005f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f2a:	00e2      	lsls	r2, r4, #3
 8005f2c:	4614      	mov	r4, r2
 8005f2e:	461d      	mov	r5, r3
 8005f30:	4643      	mov	r3, r8
 8005f32:	18e3      	adds	r3, r4, r3
 8005f34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f38:	464b      	mov	r3, r9
 8005f3a:	eb45 0303 	adc.w	r3, r5, r3
 8005f3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	f04f 0300 	mov.w	r3, #0
 8005f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f5e:	4629      	mov	r1, r5
 8005f60:	008b      	lsls	r3, r1, #2
 8005f62:	4621      	mov	r1, r4
 8005f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f68:	4621      	mov	r1, r4
 8005f6a:	008a      	lsls	r2, r1, #2
 8005f6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f70:	f7fa fe8a 	bl	8000c88 <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4b60      	ldr	r3, [pc, #384]	@ (80060fc <UART_SetConfig+0x4e4>)
 8005f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	011c      	lsls	r4, r3, #4
 8005f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	1891      	adds	r1, r2, r2
 8005f9a:	61b9      	str	r1, [r7, #24]
 8005f9c:	415b      	adcs	r3, r3
 8005f9e:	61fb      	str	r3, [r7, #28]
 8005fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	1851      	adds	r1, r2, r1
 8005fa8:	6139      	str	r1, [r7, #16]
 8005faa:	4649      	mov	r1, r9
 8005fac:	414b      	adcs	r3, r1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	00cb      	lsls	r3, r1, #3
 8005fc0:	4651      	mov	r1, sl
 8005fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fc6:	4651      	mov	r1, sl
 8005fc8:	00ca      	lsls	r2, r1, #3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4642      	mov	r2, r8
 8005fd2:	189b      	adds	r3, r3, r2
 8005fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fd8:	464b      	mov	r3, r9
 8005fda:	460a      	mov	r2, r1
 8005fdc:	eb42 0303 	adc.w	r3, r2, r3
 8005fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	008b      	lsls	r3, r1, #2
 8006000:	4641      	mov	r1, r8
 8006002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006006:	4641      	mov	r1, r8
 8006008:	008a      	lsls	r2, r1, #2
 800600a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800600e:	f7fa fe3b 	bl	8000c88 <__aeabi_uldivmod>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4611      	mov	r1, r2
 8006018:	4b38      	ldr	r3, [pc, #224]	@ (80060fc <UART_SetConfig+0x4e4>)
 800601a:	fba3 2301 	umull	r2, r3, r3, r1
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	2264      	movs	r2, #100	@ 0x64
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	1acb      	subs	r3, r1, r3
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	3332      	adds	r3, #50	@ 0x32
 800602c:	4a33      	ldr	r2, [pc, #204]	@ (80060fc <UART_SetConfig+0x4e4>)
 800602e:	fba2 2303 	umull	r2, r3, r2, r3
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006038:	441c      	add	r4, r3
 800603a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800603e:	2200      	movs	r2, #0
 8006040:	673b      	str	r3, [r7, #112]	@ 0x70
 8006042:	677a      	str	r2, [r7, #116]	@ 0x74
 8006044:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006048:	4642      	mov	r2, r8
 800604a:	464b      	mov	r3, r9
 800604c:	1891      	adds	r1, r2, r2
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	415b      	adcs	r3, r3
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006058:	4641      	mov	r1, r8
 800605a:	1851      	adds	r1, r2, r1
 800605c:	6039      	str	r1, [r7, #0]
 800605e:	4649      	mov	r1, r9
 8006060:	414b      	adcs	r3, r1
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006070:	4659      	mov	r1, fp
 8006072:	00cb      	lsls	r3, r1, #3
 8006074:	4651      	mov	r1, sl
 8006076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800607a:	4651      	mov	r1, sl
 800607c:	00ca      	lsls	r2, r1, #3
 800607e:	4610      	mov	r0, r2
 8006080:	4619      	mov	r1, r3
 8006082:	4603      	mov	r3, r0
 8006084:	4642      	mov	r2, r8
 8006086:	189b      	adds	r3, r3, r2
 8006088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800608a:	464b      	mov	r3, r9
 800608c:	460a      	mov	r2, r1
 800608e:	eb42 0303 	adc.w	r3, r2, r3
 8006092:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	663b      	str	r3, [r7, #96]	@ 0x60
 800609e:	667a      	str	r2, [r7, #100]	@ 0x64
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060ac:	4649      	mov	r1, r9
 80060ae:	008b      	lsls	r3, r1, #2
 80060b0:	4641      	mov	r1, r8
 80060b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060b6:	4641      	mov	r1, r8
 80060b8:	008a      	lsls	r2, r1, #2
 80060ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060be:	f7fa fde3 	bl	8000c88 <__aeabi_uldivmod>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4b0d      	ldr	r3, [pc, #52]	@ (80060fc <UART_SetConfig+0x4e4>)
 80060c8:	fba3 1302 	umull	r1, r3, r3, r2
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	2164      	movs	r1, #100	@ 0x64
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	3332      	adds	r3, #50	@ 0x32
 80060da:	4a08      	ldr	r2, [pc, #32]	@ (80060fc <UART_SetConfig+0x4e4>)
 80060dc:	fba2 2303 	umull	r2, r3, r2, r3
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	f003 020f 	and.w	r2, r3, #15
 80060e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4422      	add	r2, r4
 80060ee:	609a      	str	r2, [r3, #8]
}
 80060f0:	bf00      	nop
 80060f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80060f6:	46bd      	mov	sp, r7
 80060f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060fc:	51eb851f 	.word	0x51eb851f

08006100 <_ZdlPvj>:
 8006100:	f000 b811 	b.w	8006126 <_ZdlPv>

08006104 <_Znwj>:
 8006104:	2801      	cmp	r0, #1
 8006106:	bf38      	it	cc
 8006108:	2001      	movcc	r0, #1
 800610a:	b510      	push	{r4, lr}
 800610c:	4604      	mov	r4, r0
 800610e:	4620      	mov	r0, r4
 8006110:	f000 f81c 	bl	800614c <malloc>
 8006114:	b100      	cbz	r0, 8006118 <_Znwj+0x14>
 8006116:	bd10      	pop	{r4, pc}
 8006118:	f000 f808 	bl	800612c <_ZSt15get_new_handlerv>
 800611c:	b908      	cbnz	r0, 8006122 <_Znwj+0x1e>
 800611e:	f000 f80d 	bl	800613c <abort>
 8006122:	4780      	blx	r0
 8006124:	e7f3      	b.n	800610e <_Znwj+0xa>

08006126 <_ZdlPv>:
 8006126:	f000 b819 	b.w	800615c <free>
	...

0800612c <_ZSt15get_new_handlerv>:
 800612c:	4b02      	ldr	r3, [pc, #8]	@ (8006138 <_ZSt15get_new_handlerv+0xc>)
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	f3bf 8f5b 	dmb	ish
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	20000760 	.word	0x20000760

0800613c <abort>:
 800613c:	b508      	push	{r3, lr}
 800613e:	2006      	movs	r0, #6
 8006140:	f001 f8b8 	bl	80072b4 <raise>
 8006144:	2001      	movs	r0, #1
 8006146:	f7fc fe39 	bl	8002dbc <_exit>
	...

0800614c <malloc>:
 800614c:	4b02      	ldr	r3, [pc, #8]	@ (8006158 <malloc+0xc>)
 800614e:	4601      	mov	r1, r0
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	f000 b82d 	b.w	80061b0 <_malloc_r>
 8006156:	bf00      	nop
 8006158:	2000001c 	.word	0x2000001c

0800615c <free>:
 800615c:	4b02      	ldr	r3, [pc, #8]	@ (8006168 <free+0xc>)
 800615e:	4601      	mov	r1, r0
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	f001 bf9d 	b.w	80080a0 <_free_r>
 8006166:	bf00      	nop
 8006168:	2000001c 	.word	0x2000001c

0800616c <sbrk_aligned>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	4e0f      	ldr	r6, [pc, #60]	@ (80061ac <sbrk_aligned+0x40>)
 8006170:	460c      	mov	r4, r1
 8006172:	6831      	ldr	r1, [r6, #0]
 8006174:	4605      	mov	r5, r0
 8006176:	b911      	cbnz	r1, 800617e <sbrk_aligned+0x12>
 8006178:	f001 f8f0 	bl	800735c <_sbrk_r>
 800617c:	6030      	str	r0, [r6, #0]
 800617e:	4621      	mov	r1, r4
 8006180:	4628      	mov	r0, r5
 8006182:	f001 f8eb 	bl	800735c <_sbrk_r>
 8006186:	1c43      	adds	r3, r0, #1
 8006188:	d103      	bne.n	8006192 <sbrk_aligned+0x26>
 800618a:	f04f 34ff 	mov.w	r4, #4294967295
 800618e:	4620      	mov	r0, r4
 8006190:	bd70      	pop	{r4, r5, r6, pc}
 8006192:	1cc4      	adds	r4, r0, #3
 8006194:	f024 0403 	bic.w	r4, r4, #3
 8006198:	42a0      	cmp	r0, r4
 800619a:	d0f8      	beq.n	800618e <sbrk_aligned+0x22>
 800619c:	1a21      	subs	r1, r4, r0
 800619e:	4628      	mov	r0, r5
 80061a0:	f001 f8dc 	bl	800735c <_sbrk_r>
 80061a4:	3001      	adds	r0, #1
 80061a6:	d1f2      	bne.n	800618e <sbrk_aligned+0x22>
 80061a8:	e7ef      	b.n	800618a <sbrk_aligned+0x1e>
 80061aa:	bf00      	nop
 80061ac:	20000764 	.word	0x20000764

080061b0 <_malloc_r>:
 80061b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b4:	1ccd      	adds	r5, r1, #3
 80061b6:	f025 0503 	bic.w	r5, r5, #3
 80061ba:	3508      	adds	r5, #8
 80061bc:	2d0c      	cmp	r5, #12
 80061be:	bf38      	it	cc
 80061c0:	250c      	movcc	r5, #12
 80061c2:	2d00      	cmp	r5, #0
 80061c4:	4606      	mov	r6, r0
 80061c6:	db01      	blt.n	80061cc <_malloc_r+0x1c>
 80061c8:	42a9      	cmp	r1, r5
 80061ca:	d904      	bls.n	80061d6 <_malloc_r+0x26>
 80061cc:	230c      	movs	r3, #12
 80061ce:	6033      	str	r3, [r6, #0]
 80061d0:	2000      	movs	r0, #0
 80061d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062ac <_malloc_r+0xfc>
 80061da:	f000 f869 	bl	80062b0 <__malloc_lock>
 80061de:	f8d8 3000 	ldr.w	r3, [r8]
 80061e2:	461c      	mov	r4, r3
 80061e4:	bb44      	cbnz	r4, 8006238 <_malloc_r+0x88>
 80061e6:	4629      	mov	r1, r5
 80061e8:	4630      	mov	r0, r6
 80061ea:	f7ff ffbf 	bl	800616c <sbrk_aligned>
 80061ee:	1c43      	adds	r3, r0, #1
 80061f0:	4604      	mov	r4, r0
 80061f2:	d158      	bne.n	80062a6 <_malloc_r+0xf6>
 80061f4:	f8d8 4000 	ldr.w	r4, [r8]
 80061f8:	4627      	mov	r7, r4
 80061fa:	2f00      	cmp	r7, #0
 80061fc:	d143      	bne.n	8006286 <_malloc_r+0xd6>
 80061fe:	2c00      	cmp	r4, #0
 8006200:	d04b      	beq.n	800629a <_malloc_r+0xea>
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	4639      	mov	r1, r7
 8006206:	4630      	mov	r0, r6
 8006208:	eb04 0903 	add.w	r9, r4, r3
 800620c:	f001 f8a6 	bl	800735c <_sbrk_r>
 8006210:	4581      	cmp	r9, r0
 8006212:	d142      	bne.n	800629a <_malloc_r+0xea>
 8006214:	6821      	ldr	r1, [r4, #0]
 8006216:	1a6d      	subs	r5, r5, r1
 8006218:	4629      	mov	r1, r5
 800621a:	4630      	mov	r0, r6
 800621c:	f7ff ffa6 	bl	800616c <sbrk_aligned>
 8006220:	3001      	adds	r0, #1
 8006222:	d03a      	beq.n	800629a <_malloc_r+0xea>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	442b      	add	r3, r5
 8006228:	6023      	str	r3, [r4, #0]
 800622a:	f8d8 3000 	ldr.w	r3, [r8]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	bb62      	cbnz	r2, 800628c <_malloc_r+0xdc>
 8006232:	f8c8 7000 	str.w	r7, [r8]
 8006236:	e00f      	b.n	8006258 <_malloc_r+0xa8>
 8006238:	6822      	ldr	r2, [r4, #0]
 800623a:	1b52      	subs	r2, r2, r5
 800623c:	d420      	bmi.n	8006280 <_malloc_r+0xd0>
 800623e:	2a0b      	cmp	r2, #11
 8006240:	d917      	bls.n	8006272 <_malloc_r+0xc2>
 8006242:	1961      	adds	r1, r4, r5
 8006244:	42a3      	cmp	r3, r4
 8006246:	6025      	str	r5, [r4, #0]
 8006248:	bf18      	it	ne
 800624a:	6059      	strne	r1, [r3, #4]
 800624c:	6863      	ldr	r3, [r4, #4]
 800624e:	bf08      	it	eq
 8006250:	f8c8 1000 	streq.w	r1, [r8]
 8006254:	5162      	str	r2, [r4, r5]
 8006256:	604b      	str	r3, [r1, #4]
 8006258:	4630      	mov	r0, r6
 800625a:	f000 f82f 	bl	80062bc <__malloc_unlock>
 800625e:	f104 000b 	add.w	r0, r4, #11
 8006262:	1d23      	adds	r3, r4, #4
 8006264:	f020 0007 	bic.w	r0, r0, #7
 8006268:	1ac2      	subs	r2, r0, r3
 800626a:	bf1c      	itt	ne
 800626c:	1a1b      	subne	r3, r3, r0
 800626e:	50a3      	strne	r3, [r4, r2]
 8006270:	e7af      	b.n	80061d2 <_malloc_r+0x22>
 8006272:	6862      	ldr	r2, [r4, #4]
 8006274:	42a3      	cmp	r3, r4
 8006276:	bf0c      	ite	eq
 8006278:	f8c8 2000 	streq.w	r2, [r8]
 800627c:	605a      	strne	r2, [r3, #4]
 800627e:	e7eb      	b.n	8006258 <_malloc_r+0xa8>
 8006280:	4623      	mov	r3, r4
 8006282:	6864      	ldr	r4, [r4, #4]
 8006284:	e7ae      	b.n	80061e4 <_malloc_r+0x34>
 8006286:	463c      	mov	r4, r7
 8006288:	687f      	ldr	r7, [r7, #4]
 800628a:	e7b6      	b.n	80061fa <_malloc_r+0x4a>
 800628c:	461a      	mov	r2, r3
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	42a3      	cmp	r3, r4
 8006292:	d1fb      	bne.n	800628c <_malloc_r+0xdc>
 8006294:	2300      	movs	r3, #0
 8006296:	6053      	str	r3, [r2, #4]
 8006298:	e7de      	b.n	8006258 <_malloc_r+0xa8>
 800629a:	230c      	movs	r3, #12
 800629c:	6033      	str	r3, [r6, #0]
 800629e:	4630      	mov	r0, r6
 80062a0:	f000 f80c 	bl	80062bc <__malloc_unlock>
 80062a4:	e794      	b.n	80061d0 <_malloc_r+0x20>
 80062a6:	6005      	str	r5, [r0, #0]
 80062a8:	e7d6      	b.n	8006258 <_malloc_r+0xa8>
 80062aa:	bf00      	nop
 80062ac:	20000768 	.word	0x20000768

080062b0 <__malloc_lock>:
 80062b0:	4801      	ldr	r0, [pc, #4]	@ (80062b8 <__malloc_lock+0x8>)
 80062b2:	f001 b8a0 	b.w	80073f6 <__retarget_lock_acquire_recursive>
 80062b6:	bf00      	nop
 80062b8:	200008ac 	.word	0x200008ac

080062bc <__malloc_unlock>:
 80062bc:	4801      	ldr	r0, [pc, #4]	@ (80062c4 <__malloc_unlock+0x8>)
 80062be:	f001 b89b 	b.w	80073f8 <__retarget_lock_release_recursive>
 80062c2:	bf00      	nop
 80062c4:	200008ac 	.word	0x200008ac

080062c8 <__cvt>:
 80062c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062cc:	ec57 6b10 	vmov	r6, r7, d0
 80062d0:	2f00      	cmp	r7, #0
 80062d2:	460c      	mov	r4, r1
 80062d4:	4619      	mov	r1, r3
 80062d6:	463b      	mov	r3, r7
 80062d8:	bfbb      	ittet	lt
 80062da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80062de:	461f      	movlt	r7, r3
 80062e0:	2300      	movge	r3, #0
 80062e2:	232d      	movlt	r3, #45	@ 0x2d
 80062e4:	700b      	strb	r3, [r1, #0]
 80062e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80062ec:	4691      	mov	r9, r2
 80062ee:	f023 0820 	bic.w	r8, r3, #32
 80062f2:	bfbc      	itt	lt
 80062f4:	4632      	movlt	r2, r6
 80062f6:	4616      	movlt	r6, r2
 80062f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062fc:	d005      	beq.n	800630a <__cvt+0x42>
 80062fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006302:	d100      	bne.n	8006306 <__cvt+0x3e>
 8006304:	3401      	adds	r4, #1
 8006306:	2102      	movs	r1, #2
 8006308:	e000      	b.n	800630c <__cvt+0x44>
 800630a:	2103      	movs	r1, #3
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	ab02      	add	r3, sp, #8
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	ec47 6b10 	vmov	d0, r6, r7
 8006318:	4653      	mov	r3, sl
 800631a:	4622      	mov	r2, r4
 800631c:	f001 f8fc 	bl	8007518 <_dtoa_r>
 8006320:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006324:	4605      	mov	r5, r0
 8006326:	d119      	bne.n	800635c <__cvt+0x94>
 8006328:	f019 0f01 	tst.w	r9, #1
 800632c:	d00e      	beq.n	800634c <__cvt+0x84>
 800632e:	eb00 0904 	add.w	r9, r0, r4
 8006332:	2200      	movs	r2, #0
 8006334:	2300      	movs	r3, #0
 8006336:	4630      	mov	r0, r6
 8006338:	4639      	mov	r1, r7
 800633a:	f7fa fbc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800633e:	b108      	cbz	r0, 8006344 <__cvt+0x7c>
 8006340:	f8cd 900c 	str.w	r9, [sp, #12]
 8006344:	2230      	movs	r2, #48	@ 0x30
 8006346:	9b03      	ldr	r3, [sp, #12]
 8006348:	454b      	cmp	r3, r9
 800634a:	d31e      	bcc.n	800638a <__cvt+0xc2>
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006350:	1b5b      	subs	r3, r3, r5
 8006352:	4628      	mov	r0, r5
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	b004      	add	sp, #16
 8006358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006360:	eb00 0904 	add.w	r9, r0, r4
 8006364:	d1e5      	bne.n	8006332 <__cvt+0x6a>
 8006366:	7803      	ldrb	r3, [r0, #0]
 8006368:	2b30      	cmp	r3, #48	@ 0x30
 800636a:	d10a      	bne.n	8006382 <__cvt+0xba>
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	4630      	mov	r0, r6
 8006372:	4639      	mov	r1, r7
 8006374:	f7fa fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006378:	b918      	cbnz	r0, 8006382 <__cvt+0xba>
 800637a:	f1c4 0401 	rsb	r4, r4, #1
 800637e:	f8ca 4000 	str.w	r4, [sl]
 8006382:	f8da 3000 	ldr.w	r3, [sl]
 8006386:	4499      	add	r9, r3
 8006388:	e7d3      	b.n	8006332 <__cvt+0x6a>
 800638a:	1c59      	adds	r1, r3, #1
 800638c:	9103      	str	r1, [sp, #12]
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	e7d9      	b.n	8006346 <__cvt+0x7e>

08006392 <__exponent>:
 8006392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006394:	2900      	cmp	r1, #0
 8006396:	bfba      	itte	lt
 8006398:	4249      	neglt	r1, r1
 800639a:	232d      	movlt	r3, #45	@ 0x2d
 800639c:	232b      	movge	r3, #43	@ 0x2b
 800639e:	2909      	cmp	r1, #9
 80063a0:	7002      	strb	r2, [r0, #0]
 80063a2:	7043      	strb	r3, [r0, #1]
 80063a4:	dd29      	ble.n	80063fa <__exponent+0x68>
 80063a6:	f10d 0307 	add.w	r3, sp, #7
 80063aa:	461d      	mov	r5, r3
 80063ac:	270a      	movs	r7, #10
 80063ae:	461a      	mov	r2, r3
 80063b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80063b4:	fb07 1416 	mls	r4, r7, r6, r1
 80063b8:	3430      	adds	r4, #48	@ 0x30
 80063ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063be:	460c      	mov	r4, r1
 80063c0:	2c63      	cmp	r4, #99	@ 0x63
 80063c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063c6:	4631      	mov	r1, r6
 80063c8:	dcf1      	bgt.n	80063ae <__exponent+0x1c>
 80063ca:	3130      	adds	r1, #48	@ 0x30
 80063cc:	1e94      	subs	r4, r2, #2
 80063ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063d2:	1c41      	adds	r1, r0, #1
 80063d4:	4623      	mov	r3, r4
 80063d6:	42ab      	cmp	r3, r5
 80063d8:	d30a      	bcc.n	80063f0 <__exponent+0x5e>
 80063da:	f10d 0309 	add.w	r3, sp, #9
 80063de:	1a9b      	subs	r3, r3, r2
 80063e0:	42ac      	cmp	r4, r5
 80063e2:	bf88      	it	hi
 80063e4:	2300      	movhi	r3, #0
 80063e6:	3302      	adds	r3, #2
 80063e8:	4403      	add	r3, r0
 80063ea:	1a18      	subs	r0, r3, r0
 80063ec:	b003      	add	sp, #12
 80063ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80063f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80063f8:	e7ed      	b.n	80063d6 <__exponent+0x44>
 80063fa:	2330      	movs	r3, #48	@ 0x30
 80063fc:	3130      	adds	r1, #48	@ 0x30
 80063fe:	7083      	strb	r3, [r0, #2]
 8006400:	70c1      	strb	r1, [r0, #3]
 8006402:	1d03      	adds	r3, r0, #4
 8006404:	e7f1      	b.n	80063ea <__exponent+0x58>
	...

08006408 <_printf_float>:
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	b08d      	sub	sp, #52	@ 0x34
 800640e:	460c      	mov	r4, r1
 8006410:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006414:	4616      	mov	r6, r2
 8006416:	461f      	mov	r7, r3
 8006418:	4605      	mov	r5, r0
 800641a:	f000 ff53 	bl	80072c4 <_localeconv_r>
 800641e:	6803      	ldr	r3, [r0, #0]
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	4618      	mov	r0, r3
 8006424:	f7f9 ff24 	bl	8000270 <strlen>
 8006428:	2300      	movs	r3, #0
 800642a:	930a      	str	r3, [sp, #40]	@ 0x28
 800642c:	f8d8 3000 	ldr.w	r3, [r8]
 8006430:	9005      	str	r0, [sp, #20]
 8006432:	3307      	adds	r3, #7
 8006434:	f023 0307 	bic.w	r3, r3, #7
 8006438:	f103 0208 	add.w	r2, r3, #8
 800643c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006440:	f8d4 b000 	ldr.w	fp, [r4]
 8006444:	f8c8 2000 	str.w	r2, [r8]
 8006448:	e9d3 8900 	ldrd	r8, r9, [r3]
 800644c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006450:	9307      	str	r3, [sp, #28]
 8006452:	f8cd 8018 	str.w	r8, [sp, #24]
 8006456:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800645a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800645e:	4b9c      	ldr	r3, [pc, #624]	@ (80066d0 <_printf_float+0x2c8>)
 8006460:	f04f 32ff 	mov.w	r2, #4294967295
 8006464:	f7fa fb62 	bl	8000b2c <__aeabi_dcmpun>
 8006468:	bb70      	cbnz	r0, 80064c8 <_printf_float+0xc0>
 800646a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800646e:	4b98      	ldr	r3, [pc, #608]	@ (80066d0 <_printf_float+0x2c8>)
 8006470:	f04f 32ff 	mov.w	r2, #4294967295
 8006474:	f7fa fb3c 	bl	8000af0 <__aeabi_dcmple>
 8006478:	bb30      	cbnz	r0, 80064c8 <_printf_float+0xc0>
 800647a:	2200      	movs	r2, #0
 800647c:	2300      	movs	r3, #0
 800647e:	4640      	mov	r0, r8
 8006480:	4649      	mov	r1, r9
 8006482:	f7fa fb2b 	bl	8000adc <__aeabi_dcmplt>
 8006486:	b110      	cbz	r0, 800648e <_printf_float+0x86>
 8006488:	232d      	movs	r3, #45	@ 0x2d
 800648a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800648e:	4a91      	ldr	r2, [pc, #580]	@ (80066d4 <_printf_float+0x2cc>)
 8006490:	4b91      	ldr	r3, [pc, #580]	@ (80066d8 <_printf_float+0x2d0>)
 8006492:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006496:	bf94      	ite	ls
 8006498:	4690      	movls	r8, r2
 800649a:	4698      	movhi	r8, r3
 800649c:	2303      	movs	r3, #3
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	f02b 0304 	bic.w	r3, fp, #4
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	f04f 0900 	mov.w	r9, #0
 80064aa:	9700      	str	r7, [sp, #0]
 80064ac:	4633      	mov	r3, r6
 80064ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80064b0:	4621      	mov	r1, r4
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 f9d2 	bl	800685c <_printf_common>
 80064b8:	3001      	adds	r0, #1
 80064ba:	f040 808d 	bne.w	80065d8 <_printf_float+0x1d0>
 80064be:	f04f 30ff 	mov.w	r0, #4294967295
 80064c2:	b00d      	add	sp, #52	@ 0x34
 80064c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c8:	4642      	mov	r2, r8
 80064ca:	464b      	mov	r3, r9
 80064cc:	4640      	mov	r0, r8
 80064ce:	4649      	mov	r1, r9
 80064d0:	f7fa fb2c 	bl	8000b2c <__aeabi_dcmpun>
 80064d4:	b140      	cbz	r0, 80064e8 <_printf_float+0xe0>
 80064d6:	464b      	mov	r3, r9
 80064d8:	2b00      	cmp	r3, #0
 80064da:	bfbc      	itt	lt
 80064dc:	232d      	movlt	r3, #45	@ 0x2d
 80064de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80064e2:	4a7e      	ldr	r2, [pc, #504]	@ (80066dc <_printf_float+0x2d4>)
 80064e4:	4b7e      	ldr	r3, [pc, #504]	@ (80066e0 <_printf_float+0x2d8>)
 80064e6:	e7d4      	b.n	8006492 <_printf_float+0x8a>
 80064e8:	6863      	ldr	r3, [r4, #4]
 80064ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80064ee:	9206      	str	r2, [sp, #24]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	d13b      	bne.n	800656c <_printf_float+0x164>
 80064f4:	2306      	movs	r3, #6
 80064f6:	6063      	str	r3, [r4, #4]
 80064f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80064fc:	2300      	movs	r3, #0
 80064fe:	6022      	str	r2, [r4, #0]
 8006500:	9303      	str	r3, [sp, #12]
 8006502:	ab0a      	add	r3, sp, #40	@ 0x28
 8006504:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006508:	ab09      	add	r3, sp, #36	@ 0x24
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	6861      	ldr	r1, [r4, #4]
 800650e:	ec49 8b10 	vmov	d0, r8, r9
 8006512:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006516:	4628      	mov	r0, r5
 8006518:	f7ff fed6 	bl	80062c8 <__cvt>
 800651c:	9b06      	ldr	r3, [sp, #24]
 800651e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006520:	2b47      	cmp	r3, #71	@ 0x47
 8006522:	4680      	mov	r8, r0
 8006524:	d129      	bne.n	800657a <_printf_float+0x172>
 8006526:	1cc8      	adds	r0, r1, #3
 8006528:	db02      	blt.n	8006530 <_printf_float+0x128>
 800652a:	6863      	ldr	r3, [r4, #4]
 800652c:	4299      	cmp	r1, r3
 800652e:	dd41      	ble.n	80065b4 <_printf_float+0x1ac>
 8006530:	f1aa 0a02 	sub.w	sl, sl, #2
 8006534:	fa5f fa8a 	uxtb.w	sl, sl
 8006538:	3901      	subs	r1, #1
 800653a:	4652      	mov	r2, sl
 800653c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006540:	9109      	str	r1, [sp, #36]	@ 0x24
 8006542:	f7ff ff26 	bl	8006392 <__exponent>
 8006546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006548:	1813      	adds	r3, r2, r0
 800654a:	2a01      	cmp	r2, #1
 800654c:	4681      	mov	r9, r0
 800654e:	6123      	str	r3, [r4, #16]
 8006550:	dc02      	bgt.n	8006558 <_printf_float+0x150>
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	07d2      	lsls	r2, r2, #31
 8006556:	d501      	bpl.n	800655c <_printf_float+0x154>
 8006558:	3301      	adds	r3, #1
 800655a:	6123      	str	r3, [r4, #16]
 800655c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006560:	2b00      	cmp	r3, #0
 8006562:	d0a2      	beq.n	80064aa <_printf_float+0xa2>
 8006564:	232d      	movs	r3, #45	@ 0x2d
 8006566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800656a:	e79e      	b.n	80064aa <_printf_float+0xa2>
 800656c:	9a06      	ldr	r2, [sp, #24]
 800656e:	2a47      	cmp	r2, #71	@ 0x47
 8006570:	d1c2      	bne.n	80064f8 <_printf_float+0xf0>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1c0      	bne.n	80064f8 <_printf_float+0xf0>
 8006576:	2301      	movs	r3, #1
 8006578:	e7bd      	b.n	80064f6 <_printf_float+0xee>
 800657a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800657e:	d9db      	bls.n	8006538 <_printf_float+0x130>
 8006580:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006584:	d118      	bne.n	80065b8 <_printf_float+0x1b0>
 8006586:	2900      	cmp	r1, #0
 8006588:	6863      	ldr	r3, [r4, #4]
 800658a:	dd0b      	ble.n	80065a4 <_printf_float+0x19c>
 800658c:	6121      	str	r1, [r4, #16]
 800658e:	b913      	cbnz	r3, 8006596 <_printf_float+0x18e>
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	07d0      	lsls	r0, r2, #31
 8006594:	d502      	bpl.n	800659c <_printf_float+0x194>
 8006596:	3301      	adds	r3, #1
 8006598:	440b      	add	r3, r1
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800659e:	f04f 0900 	mov.w	r9, #0
 80065a2:	e7db      	b.n	800655c <_printf_float+0x154>
 80065a4:	b913      	cbnz	r3, 80065ac <_printf_float+0x1a4>
 80065a6:	6822      	ldr	r2, [r4, #0]
 80065a8:	07d2      	lsls	r2, r2, #31
 80065aa:	d501      	bpl.n	80065b0 <_printf_float+0x1a8>
 80065ac:	3302      	adds	r3, #2
 80065ae:	e7f4      	b.n	800659a <_printf_float+0x192>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e7f2      	b.n	800659a <_printf_float+0x192>
 80065b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ba:	4299      	cmp	r1, r3
 80065bc:	db05      	blt.n	80065ca <_printf_float+0x1c2>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	6121      	str	r1, [r4, #16]
 80065c2:	07d8      	lsls	r0, r3, #31
 80065c4:	d5ea      	bpl.n	800659c <_printf_float+0x194>
 80065c6:	1c4b      	adds	r3, r1, #1
 80065c8:	e7e7      	b.n	800659a <_printf_float+0x192>
 80065ca:	2900      	cmp	r1, #0
 80065cc:	bfd4      	ite	le
 80065ce:	f1c1 0202 	rsble	r2, r1, #2
 80065d2:	2201      	movgt	r2, #1
 80065d4:	4413      	add	r3, r2
 80065d6:	e7e0      	b.n	800659a <_printf_float+0x192>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	055a      	lsls	r2, r3, #21
 80065dc:	d407      	bmi.n	80065ee <_printf_float+0x1e6>
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	4642      	mov	r2, r8
 80065e2:	4631      	mov	r1, r6
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	d12b      	bne.n	8006644 <_printf_float+0x23c>
 80065ec:	e767      	b.n	80064be <_printf_float+0xb6>
 80065ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065f2:	f240 80dd 	bls.w	80067b0 <_printf_float+0x3a8>
 80065f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80065fa:	2200      	movs	r2, #0
 80065fc:	2300      	movs	r3, #0
 80065fe:	f7fa fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 8006602:	2800      	cmp	r0, #0
 8006604:	d033      	beq.n	800666e <_printf_float+0x266>
 8006606:	4a37      	ldr	r2, [pc, #220]	@ (80066e4 <_printf_float+0x2dc>)
 8006608:	2301      	movs	r3, #1
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f af54 	beq.w	80064be <_printf_float+0xb6>
 8006616:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800661a:	4543      	cmp	r3, r8
 800661c:	db02      	blt.n	8006624 <_printf_float+0x21c>
 800661e:	6823      	ldr	r3, [r4, #0]
 8006620:	07d8      	lsls	r0, r3, #31
 8006622:	d50f      	bpl.n	8006644 <_printf_float+0x23c>
 8006624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	f43f af45 	beq.w	80064be <_printf_float+0xb6>
 8006634:	f04f 0900 	mov.w	r9, #0
 8006638:	f108 38ff 	add.w	r8, r8, #4294967295
 800663c:	f104 0a1a 	add.w	sl, r4, #26
 8006640:	45c8      	cmp	r8, r9
 8006642:	dc09      	bgt.n	8006658 <_printf_float+0x250>
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	079b      	lsls	r3, r3, #30
 8006648:	f100 8103 	bmi.w	8006852 <_printf_float+0x44a>
 800664c:	68e0      	ldr	r0, [r4, #12]
 800664e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006650:	4298      	cmp	r0, r3
 8006652:	bfb8      	it	lt
 8006654:	4618      	movlt	r0, r3
 8006656:	e734      	b.n	80064c2 <_printf_float+0xba>
 8006658:	2301      	movs	r3, #1
 800665a:	4652      	mov	r2, sl
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f af2b 	beq.w	80064be <_printf_float+0xb6>
 8006668:	f109 0901 	add.w	r9, r9, #1
 800666c:	e7e8      	b.n	8006640 <_printf_float+0x238>
 800666e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006670:	2b00      	cmp	r3, #0
 8006672:	dc39      	bgt.n	80066e8 <_printf_float+0x2e0>
 8006674:	4a1b      	ldr	r2, [pc, #108]	@ (80066e4 <_printf_float+0x2dc>)
 8006676:	2301      	movs	r3, #1
 8006678:	4631      	mov	r1, r6
 800667a:	4628      	mov	r0, r5
 800667c:	47b8      	blx	r7
 800667e:	3001      	adds	r0, #1
 8006680:	f43f af1d 	beq.w	80064be <_printf_float+0xb6>
 8006684:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006688:	ea59 0303 	orrs.w	r3, r9, r3
 800668c:	d102      	bne.n	8006694 <_printf_float+0x28c>
 800668e:	6823      	ldr	r3, [r4, #0]
 8006690:	07d9      	lsls	r1, r3, #31
 8006692:	d5d7      	bpl.n	8006644 <_printf_float+0x23c>
 8006694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006698:	4631      	mov	r1, r6
 800669a:	4628      	mov	r0, r5
 800669c:	47b8      	blx	r7
 800669e:	3001      	adds	r0, #1
 80066a0:	f43f af0d 	beq.w	80064be <_printf_float+0xb6>
 80066a4:	f04f 0a00 	mov.w	sl, #0
 80066a8:	f104 0b1a 	add.w	fp, r4, #26
 80066ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ae:	425b      	negs	r3, r3
 80066b0:	4553      	cmp	r3, sl
 80066b2:	dc01      	bgt.n	80066b8 <_printf_float+0x2b0>
 80066b4:	464b      	mov	r3, r9
 80066b6:	e793      	b.n	80065e0 <_printf_float+0x1d8>
 80066b8:	2301      	movs	r3, #1
 80066ba:	465a      	mov	r2, fp
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f aefb 	beq.w	80064be <_printf_float+0xb6>
 80066c8:	f10a 0a01 	add.w	sl, sl, #1
 80066cc:	e7ee      	b.n	80066ac <_printf_float+0x2a4>
 80066ce:	bf00      	nop
 80066d0:	7fefffff 	.word	0x7fefffff
 80066d4:	0800af38 	.word	0x0800af38
 80066d8:	0800af3c 	.word	0x0800af3c
 80066dc:	0800af40 	.word	0x0800af40
 80066e0:	0800af44 	.word	0x0800af44
 80066e4:	0800af48 	.word	0x0800af48
 80066e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066ee:	4553      	cmp	r3, sl
 80066f0:	bfa8      	it	ge
 80066f2:	4653      	movge	r3, sl
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	4699      	mov	r9, r3
 80066f8:	dc36      	bgt.n	8006768 <_printf_float+0x360>
 80066fa:	f04f 0b00 	mov.w	fp, #0
 80066fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006702:	f104 021a 	add.w	r2, r4, #26
 8006706:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006708:	9306      	str	r3, [sp, #24]
 800670a:	eba3 0309 	sub.w	r3, r3, r9
 800670e:	455b      	cmp	r3, fp
 8006710:	dc31      	bgt.n	8006776 <_printf_float+0x36e>
 8006712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006714:	459a      	cmp	sl, r3
 8006716:	dc3a      	bgt.n	800678e <_printf_float+0x386>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07da      	lsls	r2, r3, #31
 800671c:	d437      	bmi.n	800678e <_printf_float+0x386>
 800671e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006720:	ebaa 0903 	sub.w	r9, sl, r3
 8006724:	9b06      	ldr	r3, [sp, #24]
 8006726:	ebaa 0303 	sub.w	r3, sl, r3
 800672a:	4599      	cmp	r9, r3
 800672c:	bfa8      	it	ge
 800672e:	4699      	movge	r9, r3
 8006730:	f1b9 0f00 	cmp.w	r9, #0
 8006734:	dc33      	bgt.n	800679e <_printf_float+0x396>
 8006736:	f04f 0800 	mov.w	r8, #0
 800673a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800673e:	f104 0b1a 	add.w	fp, r4, #26
 8006742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006744:	ebaa 0303 	sub.w	r3, sl, r3
 8006748:	eba3 0309 	sub.w	r3, r3, r9
 800674c:	4543      	cmp	r3, r8
 800674e:	f77f af79 	ble.w	8006644 <_printf_float+0x23c>
 8006752:	2301      	movs	r3, #1
 8006754:	465a      	mov	r2, fp
 8006756:	4631      	mov	r1, r6
 8006758:	4628      	mov	r0, r5
 800675a:	47b8      	blx	r7
 800675c:	3001      	adds	r0, #1
 800675e:	f43f aeae 	beq.w	80064be <_printf_float+0xb6>
 8006762:	f108 0801 	add.w	r8, r8, #1
 8006766:	e7ec      	b.n	8006742 <_printf_float+0x33a>
 8006768:	4642      	mov	r2, r8
 800676a:	4631      	mov	r1, r6
 800676c:	4628      	mov	r0, r5
 800676e:	47b8      	blx	r7
 8006770:	3001      	adds	r0, #1
 8006772:	d1c2      	bne.n	80066fa <_printf_float+0x2f2>
 8006774:	e6a3      	b.n	80064be <_printf_float+0xb6>
 8006776:	2301      	movs	r3, #1
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	9206      	str	r2, [sp, #24]
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae9c 	beq.w	80064be <_printf_float+0xb6>
 8006786:	9a06      	ldr	r2, [sp, #24]
 8006788:	f10b 0b01 	add.w	fp, fp, #1
 800678c:	e7bb      	b.n	8006706 <_printf_float+0x2fe>
 800678e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	d1c0      	bne.n	800671e <_printf_float+0x316>
 800679c:	e68f      	b.n	80064be <_printf_float+0xb6>
 800679e:	9a06      	ldr	r2, [sp, #24]
 80067a0:	464b      	mov	r3, r9
 80067a2:	4442      	add	r2, r8
 80067a4:	4631      	mov	r1, r6
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b8      	blx	r7
 80067aa:	3001      	adds	r0, #1
 80067ac:	d1c3      	bne.n	8006736 <_printf_float+0x32e>
 80067ae:	e686      	b.n	80064be <_printf_float+0xb6>
 80067b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80067b4:	f1ba 0f01 	cmp.w	sl, #1
 80067b8:	dc01      	bgt.n	80067be <_printf_float+0x3b6>
 80067ba:	07db      	lsls	r3, r3, #31
 80067bc:	d536      	bpl.n	800682c <_printf_float+0x424>
 80067be:	2301      	movs	r3, #1
 80067c0:	4642      	mov	r2, r8
 80067c2:	4631      	mov	r1, r6
 80067c4:	4628      	mov	r0, r5
 80067c6:	47b8      	blx	r7
 80067c8:	3001      	adds	r0, #1
 80067ca:	f43f ae78 	beq.w	80064be <_printf_float+0xb6>
 80067ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d2:	4631      	mov	r1, r6
 80067d4:	4628      	mov	r0, r5
 80067d6:	47b8      	blx	r7
 80067d8:	3001      	adds	r0, #1
 80067da:	f43f ae70 	beq.w	80064be <_printf_float+0xb6>
 80067de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80067e2:	2200      	movs	r2, #0
 80067e4:	2300      	movs	r3, #0
 80067e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ea:	f7fa f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80067ee:	b9c0      	cbnz	r0, 8006822 <_printf_float+0x41a>
 80067f0:	4653      	mov	r3, sl
 80067f2:	f108 0201 	add.w	r2, r8, #1
 80067f6:	4631      	mov	r1, r6
 80067f8:	4628      	mov	r0, r5
 80067fa:	47b8      	blx	r7
 80067fc:	3001      	adds	r0, #1
 80067fe:	d10c      	bne.n	800681a <_printf_float+0x412>
 8006800:	e65d      	b.n	80064be <_printf_float+0xb6>
 8006802:	2301      	movs	r3, #1
 8006804:	465a      	mov	r2, fp
 8006806:	4631      	mov	r1, r6
 8006808:	4628      	mov	r0, r5
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	f43f ae56 	beq.w	80064be <_printf_float+0xb6>
 8006812:	f108 0801 	add.w	r8, r8, #1
 8006816:	45d0      	cmp	r8, sl
 8006818:	dbf3      	blt.n	8006802 <_printf_float+0x3fa>
 800681a:	464b      	mov	r3, r9
 800681c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006820:	e6df      	b.n	80065e2 <_printf_float+0x1da>
 8006822:	f04f 0800 	mov.w	r8, #0
 8006826:	f104 0b1a 	add.w	fp, r4, #26
 800682a:	e7f4      	b.n	8006816 <_printf_float+0x40e>
 800682c:	2301      	movs	r3, #1
 800682e:	4642      	mov	r2, r8
 8006830:	e7e1      	b.n	80067f6 <_printf_float+0x3ee>
 8006832:	2301      	movs	r3, #1
 8006834:	464a      	mov	r2, r9
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	f43f ae3e 	beq.w	80064be <_printf_float+0xb6>
 8006842:	f108 0801 	add.w	r8, r8, #1
 8006846:	68e3      	ldr	r3, [r4, #12]
 8006848:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800684a:	1a5b      	subs	r3, r3, r1
 800684c:	4543      	cmp	r3, r8
 800684e:	dcf0      	bgt.n	8006832 <_printf_float+0x42a>
 8006850:	e6fc      	b.n	800664c <_printf_float+0x244>
 8006852:	f04f 0800 	mov.w	r8, #0
 8006856:	f104 0919 	add.w	r9, r4, #25
 800685a:	e7f4      	b.n	8006846 <_printf_float+0x43e>

0800685c <_printf_common>:
 800685c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006860:	4616      	mov	r6, r2
 8006862:	4698      	mov	r8, r3
 8006864:	688a      	ldr	r2, [r1, #8]
 8006866:	690b      	ldr	r3, [r1, #16]
 8006868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800686c:	4293      	cmp	r3, r2
 800686e:	bfb8      	it	lt
 8006870:	4613      	movlt	r3, r2
 8006872:	6033      	str	r3, [r6, #0]
 8006874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006878:	4607      	mov	r7, r0
 800687a:	460c      	mov	r4, r1
 800687c:	b10a      	cbz	r2, 8006882 <_printf_common+0x26>
 800687e:	3301      	adds	r3, #1
 8006880:	6033      	str	r3, [r6, #0]
 8006882:	6823      	ldr	r3, [r4, #0]
 8006884:	0699      	lsls	r1, r3, #26
 8006886:	bf42      	ittt	mi
 8006888:	6833      	ldrmi	r3, [r6, #0]
 800688a:	3302      	addmi	r3, #2
 800688c:	6033      	strmi	r3, [r6, #0]
 800688e:	6825      	ldr	r5, [r4, #0]
 8006890:	f015 0506 	ands.w	r5, r5, #6
 8006894:	d106      	bne.n	80068a4 <_printf_common+0x48>
 8006896:	f104 0a19 	add.w	sl, r4, #25
 800689a:	68e3      	ldr	r3, [r4, #12]
 800689c:	6832      	ldr	r2, [r6, #0]
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	42ab      	cmp	r3, r5
 80068a2:	dc26      	bgt.n	80068f2 <_printf_common+0x96>
 80068a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068a8:	6822      	ldr	r2, [r4, #0]
 80068aa:	3b00      	subs	r3, #0
 80068ac:	bf18      	it	ne
 80068ae:	2301      	movne	r3, #1
 80068b0:	0692      	lsls	r2, r2, #26
 80068b2:	d42b      	bmi.n	800690c <_printf_common+0xb0>
 80068b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068b8:	4641      	mov	r1, r8
 80068ba:	4638      	mov	r0, r7
 80068bc:	47c8      	blx	r9
 80068be:	3001      	adds	r0, #1
 80068c0:	d01e      	beq.n	8006900 <_printf_common+0xa4>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	6922      	ldr	r2, [r4, #16]
 80068c6:	f003 0306 	and.w	r3, r3, #6
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	bf02      	ittt	eq
 80068ce:	68e5      	ldreq	r5, [r4, #12]
 80068d0:	6833      	ldreq	r3, [r6, #0]
 80068d2:	1aed      	subeq	r5, r5, r3
 80068d4:	68a3      	ldr	r3, [r4, #8]
 80068d6:	bf0c      	ite	eq
 80068d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068dc:	2500      	movne	r5, #0
 80068de:	4293      	cmp	r3, r2
 80068e0:	bfc4      	itt	gt
 80068e2:	1a9b      	subgt	r3, r3, r2
 80068e4:	18ed      	addgt	r5, r5, r3
 80068e6:	2600      	movs	r6, #0
 80068e8:	341a      	adds	r4, #26
 80068ea:	42b5      	cmp	r5, r6
 80068ec:	d11a      	bne.n	8006924 <_printf_common+0xc8>
 80068ee:	2000      	movs	r0, #0
 80068f0:	e008      	b.n	8006904 <_printf_common+0xa8>
 80068f2:	2301      	movs	r3, #1
 80068f4:	4652      	mov	r2, sl
 80068f6:	4641      	mov	r1, r8
 80068f8:	4638      	mov	r0, r7
 80068fa:	47c8      	blx	r9
 80068fc:	3001      	adds	r0, #1
 80068fe:	d103      	bne.n	8006908 <_printf_common+0xac>
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006908:	3501      	adds	r5, #1
 800690a:	e7c6      	b.n	800689a <_printf_common+0x3e>
 800690c:	18e1      	adds	r1, r4, r3
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	2030      	movs	r0, #48	@ 0x30
 8006912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006916:	4422      	add	r2, r4
 8006918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800691c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006920:	3302      	adds	r3, #2
 8006922:	e7c7      	b.n	80068b4 <_printf_common+0x58>
 8006924:	2301      	movs	r3, #1
 8006926:	4622      	mov	r2, r4
 8006928:	4641      	mov	r1, r8
 800692a:	4638      	mov	r0, r7
 800692c:	47c8      	blx	r9
 800692e:	3001      	adds	r0, #1
 8006930:	d0e6      	beq.n	8006900 <_printf_common+0xa4>
 8006932:	3601      	adds	r6, #1
 8006934:	e7d9      	b.n	80068ea <_printf_common+0x8e>
	...

08006938 <_printf_i>:
 8006938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800693c:	7e0f      	ldrb	r7, [r1, #24]
 800693e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006940:	2f78      	cmp	r7, #120	@ 0x78
 8006942:	4691      	mov	r9, r2
 8006944:	4680      	mov	r8, r0
 8006946:	460c      	mov	r4, r1
 8006948:	469a      	mov	sl, r3
 800694a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800694e:	d807      	bhi.n	8006960 <_printf_i+0x28>
 8006950:	2f62      	cmp	r7, #98	@ 0x62
 8006952:	d80a      	bhi.n	800696a <_printf_i+0x32>
 8006954:	2f00      	cmp	r7, #0
 8006956:	f000 80d2 	beq.w	8006afe <_printf_i+0x1c6>
 800695a:	2f58      	cmp	r7, #88	@ 0x58
 800695c:	f000 80b9 	beq.w	8006ad2 <_printf_i+0x19a>
 8006960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006968:	e03a      	b.n	80069e0 <_printf_i+0xa8>
 800696a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800696e:	2b15      	cmp	r3, #21
 8006970:	d8f6      	bhi.n	8006960 <_printf_i+0x28>
 8006972:	a101      	add	r1, pc, #4	@ (adr r1, 8006978 <_printf_i+0x40>)
 8006974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006978:	080069d1 	.word	0x080069d1
 800697c:	080069e5 	.word	0x080069e5
 8006980:	08006961 	.word	0x08006961
 8006984:	08006961 	.word	0x08006961
 8006988:	08006961 	.word	0x08006961
 800698c:	08006961 	.word	0x08006961
 8006990:	080069e5 	.word	0x080069e5
 8006994:	08006961 	.word	0x08006961
 8006998:	08006961 	.word	0x08006961
 800699c:	08006961 	.word	0x08006961
 80069a0:	08006961 	.word	0x08006961
 80069a4:	08006ae5 	.word	0x08006ae5
 80069a8:	08006a0f 	.word	0x08006a0f
 80069ac:	08006a9f 	.word	0x08006a9f
 80069b0:	08006961 	.word	0x08006961
 80069b4:	08006961 	.word	0x08006961
 80069b8:	08006b07 	.word	0x08006b07
 80069bc:	08006961 	.word	0x08006961
 80069c0:	08006a0f 	.word	0x08006a0f
 80069c4:	08006961 	.word	0x08006961
 80069c8:	08006961 	.word	0x08006961
 80069cc:	08006aa7 	.word	0x08006aa7
 80069d0:	6833      	ldr	r3, [r6, #0]
 80069d2:	1d1a      	adds	r2, r3, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6032      	str	r2, [r6, #0]
 80069d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069e0:	2301      	movs	r3, #1
 80069e2:	e09d      	b.n	8006b20 <_printf_i+0x1e8>
 80069e4:	6833      	ldr	r3, [r6, #0]
 80069e6:	6820      	ldr	r0, [r4, #0]
 80069e8:	1d19      	adds	r1, r3, #4
 80069ea:	6031      	str	r1, [r6, #0]
 80069ec:	0606      	lsls	r6, r0, #24
 80069ee:	d501      	bpl.n	80069f4 <_printf_i+0xbc>
 80069f0:	681d      	ldr	r5, [r3, #0]
 80069f2:	e003      	b.n	80069fc <_printf_i+0xc4>
 80069f4:	0645      	lsls	r5, r0, #25
 80069f6:	d5fb      	bpl.n	80069f0 <_printf_i+0xb8>
 80069f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069fc:	2d00      	cmp	r5, #0
 80069fe:	da03      	bge.n	8006a08 <_printf_i+0xd0>
 8006a00:	232d      	movs	r3, #45	@ 0x2d
 8006a02:	426d      	negs	r5, r5
 8006a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a08:	4859      	ldr	r0, [pc, #356]	@ (8006b70 <_printf_i+0x238>)
 8006a0a:	230a      	movs	r3, #10
 8006a0c:	e011      	b.n	8006a32 <_printf_i+0xfa>
 8006a0e:	6821      	ldr	r1, [r4, #0]
 8006a10:	6833      	ldr	r3, [r6, #0]
 8006a12:	0608      	lsls	r0, r1, #24
 8006a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a18:	d402      	bmi.n	8006a20 <_printf_i+0xe8>
 8006a1a:	0649      	lsls	r1, r1, #25
 8006a1c:	bf48      	it	mi
 8006a1e:	b2ad      	uxthmi	r5, r5
 8006a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a22:	4853      	ldr	r0, [pc, #332]	@ (8006b70 <_printf_i+0x238>)
 8006a24:	6033      	str	r3, [r6, #0]
 8006a26:	bf14      	ite	ne
 8006a28:	230a      	movne	r3, #10
 8006a2a:	2308      	moveq	r3, #8
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a32:	6866      	ldr	r6, [r4, #4]
 8006a34:	60a6      	str	r6, [r4, #8]
 8006a36:	2e00      	cmp	r6, #0
 8006a38:	bfa2      	ittt	ge
 8006a3a:	6821      	ldrge	r1, [r4, #0]
 8006a3c:	f021 0104 	bicge.w	r1, r1, #4
 8006a40:	6021      	strge	r1, [r4, #0]
 8006a42:	b90d      	cbnz	r5, 8006a48 <_printf_i+0x110>
 8006a44:	2e00      	cmp	r6, #0
 8006a46:	d04b      	beq.n	8006ae0 <_printf_i+0x1a8>
 8006a48:	4616      	mov	r6, r2
 8006a4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a4e:	fb03 5711 	mls	r7, r3, r1, r5
 8006a52:	5dc7      	ldrb	r7, [r0, r7]
 8006a54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a58:	462f      	mov	r7, r5
 8006a5a:	42bb      	cmp	r3, r7
 8006a5c:	460d      	mov	r5, r1
 8006a5e:	d9f4      	bls.n	8006a4a <_printf_i+0x112>
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d10b      	bne.n	8006a7c <_printf_i+0x144>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	07df      	lsls	r7, r3, #31
 8006a68:	d508      	bpl.n	8006a7c <_printf_i+0x144>
 8006a6a:	6923      	ldr	r3, [r4, #16]
 8006a6c:	6861      	ldr	r1, [r4, #4]
 8006a6e:	4299      	cmp	r1, r3
 8006a70:	bfde      	ittt	le
 8006a72:	2330      	movle	r3, #48	@ 0x30
 8006a74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a7c:	1b92      	subs	r2, r2, r6
 8006a7e:	6122      	str	r2, [r4, #16]
 8006a80:	f8cd a000 	str.w	sl, [sp]
 8006a84:	464b      	mov	r3, r9
 8006a86:	aa03      	add	r2, sp, #12
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	f7ff fee6 	bl	800685c <_printf_common>
 8006a90:	3001      	adds	r0, #1
 8006a92:	d14a      	bne.n	8006b2a <_printf_i+0x1f2>
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	b004      	add	sp, #16
 8006a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	f043 0320 	orr.w	r3, r3, #32
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	4833      	ldr	r0, [pc, #204]	@ (8006b74 <_printf_i+0x23c>)
 8006aa8:	2778      	movs	r7, #120	@ 0x78
 8006aaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	6831      	ldr	r1, [r6, #0]
 8006ab2:	061f      	lsls	r7, r3, #24
 8006ab4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ab8:	d402      	bmi.n	8006ac0 <_printf_i+0x188>
 8006aba:	065f      	lsls	r7, r3, #25
 8006abc:	bf48      	it	mi
 8006abe:	b2ad      	uxthmi	r5, r5
 8006ac0:	6031      	str	r1, [r6, #0]
 8006ac2:	07d9      	lsls	r1, r3, #31
 8006ac4:	bf44      	itt	mi
 8006ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8006aca:	6023      	strmi	r3, [r4, #0]
 8006acc:	b11d      	cbz	r5, 8006ad6 <_printf_i+0x19e>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	e7ac      	b.n	8006a2c <_printf_i+0xf4>
 8006ad2:	4827      	ldr	r0, [pc, #156]	@ (8006b70 <_printf_i+0x238>)
 8006ad4:	e7e9      	b.n	8006aaa <_printf_i+0x172>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	f023 0320 	bic.w	r3, r3, #32
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	e7f6      	b.n	8006ace <_printf_i+0x196>
 8006ae0:	4616      	mov	r6, r2
 8006ae2:	e7bd      	b.n	8006a60 <_printf_i+0x128>
 8006ae4:	6833      	ldr	r3, [r6, #0]
 8006ae6:	6825      	ldr	r5, [r4, #0]
 8006ae8:	6961      	ldr	r1, [r4, #20]
 8006aea:	1d18      	adds	r0, r3, #4
 8006aec:	6030      	str	r0, [r6, #0]
 8006aee:	062e      	lsls	r6, r5, #24
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	d501      	bpl.n	8006af8 <_printf_i+0x1c0>
 8006af4:	6019      	str	r1, [r3, #0]
 8006af6:	e002      	b.n	8006afe <_printf_i+0x1c6>
 8006af8:	0668      	lsls	r0, r5, #25
 8006afa:	d5fb      	bpl.n	8006af4 <_printf_i+0x1bc>
 8006afc:	8019      	strh	r1, [r3, #0]
 8006afe:	2300      	movs	r3, #0
 8006b00:	6123      	str	r3, [r4, #16]
 8006b02:	4616      	mov	r6, r2
 8006b04:	e7bc      	b.n	8006a80 <_printf_i+0x148>
 8006b06:	6833      	ldr	r3, [r6, #0]
 8006b08:	1d1a      	adds	r2, r3, #4
 8006b0a:	6032      	str	r2, [r6, #0]
 8006b0c:	681e      	ldr	r6, [r3, #0]
 8006b0e:	6862      	ldr	r2, [r4, #4]
 8006b10:	2100      	movs	r1, #0
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7f9 fb5c 	bl	80001d0 <memchr>
 8006b18:	b108      	cbz	r0, 8006b1e <_printf_i+0x1e6>
 8006b1a:	1b80      	subs	r0, r0, r6
 8006b1c:	6060      	str	r0, [r4, #4]
 8006b1e:	6863      	ldr	r3, [r4, #4]
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	2300      	movs	r3, #0
 8006b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b28:	e7aa      	b.n	8006a80 <_printf_i+0x148>
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	4632      	mov	r2, r6
 8006b2e:	4649      	mov	r1, r9
 8006b30:	4640      	mov	r0, r8
 8006b32:	47d0      	blx	sl
 8006b34:	3001      	adds	r0, #1
 8006b36:	d0ad      	beq.n	8006a94 <_printf_i+0x15c>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	079b      	lsls	r3, r3, #30
 8006b3c:	d413      	bmi.n	8006b66 <_printf_i+0x22e>
 8006b3e:	68e0      	ldr	r0, [r4, #12]
 8006b40:	9b03      	ldr	r3, [sp, #12]
 8006b42:	4298      	cmp	r0, r3
 8006b44:	bfb8      	it	lt
 8006b46:	4618      	movlt	r0, r3
 8006b48:	e7a6      	b.n	8006a98 <_printf_i+0x160>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4640      	mov	r0, r8
 8006b52:	47d0      	blx	sl
 8006b54:	3001      	adds	r0, #1
 8006b56:	d09d      	beq.n	8006a94 <_printf_i+0x15c>
 8006b58:	3501      	adds	r5, #1
 8006b5a:	68e3      	ldr	r3, [r4, #12]
 8006b5c:	9903      	ldr	r1, [sp, #12]
 8006b5e:	1a5b      	subs	r3, r3, r1
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	dcf2      	bgt.n	8006b4a <_printf_i+0x212>
 8006b64:	e7eb      	b.n	8006b3e <_printf_i+0x206>
 8006b66:	2500      	movs	r5, #0
 8006b68:	f104 0619 	add.w	r6, r4, #25
 8006b6c:	e7f5      	b.n	8006b5a <_printf_i+0x222>
 8006b6e:	bf00      	nop
 8006b70:	0800af4a 	.word	0x0800af4a
 8006b74:	0800af5b 	.word	0x0800af5b

08006b78 <_scanf_float>:
 8006b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7c:	b087      	sub	sp, #28
 8006b7e:	4617      	mov	r7, r2
 8006b80:	9303      	str	r3, [sp, #12]
 8006b82:	688b      	ldr	r3, [r1, #8]
 8006b84:	1e5a      	subs	r2, r3, #1
 8006b86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006b8a:	bf81      	itttt	hi
 8006b8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006b90:	eb03 0b05 	addhi.w	fp, r3, r5
 8006b94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006b98:	608b      	strhi	r3, [r1, #8]
 8006b9a:	680b      	ldr	r3, [r1, #0]
 8006b9c:	460a      	mov	r2, r1
 8006b9e:	f04f 0500 	mov.w	r5, #0
 8006ba2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006ba6:	f842 3b1c 	str.w	r3, [r2], #28
 8006baa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006bae:	4680      	mov	r8, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	bf98      	it	ls
 8006bb4:	f04f 0b00 	movls.w	fp, #0
 8006bb8:	9201      	str	r2, [sp, #4]
 8006bba:	4616      	mov	r6, r2
 8006bbc:	46aa      	mov	sl, r5
 8006bbe:	46a9      	mov	r9, r5
 8006bc0:	9502      	str	r5, [sp, #8]
 8006bc2:	68a2      	ldr	r2, [r4, #8]
 8006bc4:	b152      	cbz	r2, 8006bdc <_scanf_float+0x64>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b4e      	cmp	r3, #78	@ 0x4e
 8006bcc:	d864      	bhi.n	8006c98 <_scanf_float+0x120>
 8006bce:	2b40      	cmp	r3, #64	@ 0x40
 8006bd0:	d83c      	bhi.n	8006c4c <_scanf_float+0xd4>
 8006bd2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006bd6:	b2c8      	uxtb	r0, r1
 8006bd8:	280e      	cmp	r0, #14
 8006bda:	d93a      	bls.n	8006c52 <_scanf_float+0xda>
 8006bdc:	f1b9 0f00 	cmp.w	r9, #0
 8006be0:	d003      	beq.n	8006bea <_scanf_float+0x72>
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bee:	f1ba 0f01 	cmp.w	sl, #1
 8006bf2:	f200 8117 	bhi.w	8006e24 <_scanf_float+0x2ac>
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	429e      	cmp	r6, r3
 8006bfa:	f200 8108 	bhi.w	8006e0e <_scanf_float+0x296>
 8006bfe:	2001      	movs	r0, #1
 8006c00:	b007      	add	sp, #28
 8006c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006c0a:	2a0d      	cmp	r2, #13
 8006c0c:	d8e6      	bhi.n	8006bdc <_scanf_float+0x64>
 8006c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8006c14 <_scanf_float+0x9c>)
 8006c10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c14:	08006d5b 	.word	0x08006d5b
 8006c18:	08006bdd 	.word	0x08006bdd
 8006c1c:	08006bdd 	.word	0x08006bdd
 8006c20:	08006bdd 	.word	0x08006bdd
 8006c24:	08006dbb 	.word	0x08006dbb
 8006c28:	08006d93 	.word	0x08006d93
 8006c2c:	08006bdd 	.word	0x08006bdd
 8006c30:	08006bdd 	.word	0x08006bdd
 8006c34:	08006d69 	.word	0x08006d69
 8006c38:	08006bdd 	.word	0x08006bdd
 8006c3c:	08006bdd 	.word	0x08006bdd
 8006c40:	08006bdd 	.word	0x08006bdd
 8006c44:	08006bdd 	.word	0x08006bdd
 8006c48:	08006d21 	.word	0x08006d21
 8006c4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006c50:	e7db      	b.n	8006c0a <_scanf_float+0x92>
 8006c52:	290e      	cmp	r1, #14
 8006c54:	d8c2      	bhi.n	8006bdc <_scanf_float+0x64>
 8006c56:	a001      	add	r0, pc, #4	@ (adr r0, 8006c5c <_scanf_float+0xe4>)
 8006c58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006c5c:	08006d11 	.word	0x08006d11
 8006c60:	08006bdd 	.word	0x08006bdd
 8006c64:	08006d11 	.word	0x08006d11
 8006c68:	08006da7 	.word	0x08006da7
 8006c6c:	08006bdd 	.word	0x08006bdd
 8006c70:	08006cb9 	.word	0x08006cb9
 8006c74:	08006cf7 	.word	0x08006cf7
 8006c78:	08006cf7 	.word	0x08006cf7
 8006c7c:	08006cf7 	.word	0x08006cf7
 8006c80:	08006cf7 	.word	0x08006cf7
 8006c84:	08006cf7 	.word	0x08006cf7
 8006c88:	08006cf7 	.word	0x08006cf7
 8006c8c:	08006cf7 	.word	0x08006cf7
 8006c90:	08006cf7 	.word	0x08006cf7
 8006c94:	08006cf7 	.word	0x08006cf7
 8006c98:	2b6e      	cmp	r3, #110	@ 0x6e
 8006c9a:	d809      	bhi.n	8006cb0 <_scanf_float+0x138>
 8006c9c:	2b60      	cmp	r3, #96	@ 0x60
 8006c9e:	d8b2      	bhi.n	8006c06 <_scanf_float+0x8e>
 8006ca0:	2b54      	cmp	r3, #84	@ 0x54
 8006ca2:	d07b      	beq.n	8006d9c <_scanf_float+0x224>
 8006ca4:	2b59      	cmp	r3, #89	@ 0x59
 8006ca6:	d199      	bne.n	8006bdc <_scanf_float+0x64>
 8006ca8:	2d07      	cmp	r5, #7
 8006caa:	d197      	bne.n	8006bdc <_scanf_float+0x64>
 8006cac:	2508      	movs	r5, #8
 8006cae:	e02c      	b.n	8006d0a <_scanf_float+0x192>
 8006cb0:	2b74      	cmp	r3, #116	@ 0x74
 8006cb2:	d073      	beq.n	8006d9c <_scanf_float+0x224>
 8006cb4:	2b79      	cmp	r3, #121	@ 0x79
 8006cb6:	e7f6      	b.n	8006ca6 <_scanf_float+0x12e>
 8006cb8:	6821      	ldr	r1, [r4, #0]
 8006cba:	05c8      	lsls	r0, r1, #23
 8006cbc:	d51b      	bpl.n	8006cf6 <_scanf_float+0x17e>
 8006cbe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006cc2:	6021      	str	r1, [r4, #0]
 8006cc4:	f109 0901 	add.w	r9, r9, #1
 8006cc8:	f1bb 0f00 	cmp.w	fp, #0
 8006ccc:	d003      	beq.n	8006cd6 <_scanf_float+0x15e>
 8006cce:	3201      	adds	r2, #1
 8006cd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006cd4:	60a2      	str	r2, [r4, #8]
 8006cd6:	68a3      	ldr	r3, [r4, #8]
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	60a3      	str	r3, [r4, #8]
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	6123      	str	r3, [r4, #16]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	607b      	str	r3, [r7, #4]
 8006cea:	f340 8087 	ble.w	8006dfc <_scanf_float+0x284>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	e765      	b.n	8006bc2 <_scanf_float+0x4a>
 8006cf6:	eb1a 0105 	adds.w	r1, sl, r5
 8006cfa:	f47f af6f 	bne.w	8006bdc <_scanf_float+0x64>
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006d04:	6022      	str	r2, [r4, #0]
 8006d06:	460d      	mov	r5, r1
 8006d08:	468a      	mov	sl, r1
 8006d0a:	f806 3b01 	strb.w	r3, [r6], #1
 8006d0e:	e7e2      	b.n	8006cd6 <_scanf_float+0x15e>
 8006d10:	6822      	ldr	r2, [r4, #0]
 8006d12:	0610      	lsls	r0, r2, #24
 8006d14:	f57f af62 	bpl.w	8006bdc <_scanf_float+0x64>
 8006d18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d1c:	6022      	str	r2, [r4, #0]
 8006d1e:	e7f4      	b.n	8006d0a <_scanf_float+0x192>
 8006d20:	f1ba 0f00 	cmp.w	sl, #0
 8006d24:	d10e      	bne.n	8006d44 <_scanf_float+0x1cc>
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	d10e      	bne.n	8006d4a <_scanf_float+0x1d2>
 8006d2c:	6822      	ldr	r2, [r4, #0]
 8006d2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d36:	d108      	bne.n	8006d4a <_scanf_float+0x1d2>
 8006d38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d3c:	6022      	str	r2, [r4, #0]
 8006d3e:	f04f 0a01 	mov.w	sl, #1
 8006d42:	e7e2      	b.n	8006d0a <_scanf_float+0x192>
 8006d44:	f1ba 0f02 	cmp.w	sl, #2
 8006d48:	d055      	beq.n	8006df6 <_scanf_float+0x27e>
 8006d4a:	2d01      	cmp	r5, #1
 8006d4c:	d002      	beq.n	8006d54 <_scanf_float+0x1dc>
 8006d4e:	2d04      	cmp	r5, #4
 8006d50:	f47f af44 	bne.w	8006bdc <_scanf_float+0x64>
 8006d54:	3501      	adds	r5, #1
 8006d56:	b2ed      	uxtb	r5, r5
 8006d58:	e7d7      	b.n	8006d0a <_scanf_float+0x192>
 8006d5a:	f1ba 0f01 	cmp.w	sl, #1
 8006d5e:	f47f af3d 	bne.w	8006bdc <_scanf_float+0x64>
 8006d62:	f04f 0a02 	mov.w	sl, #2
 8006d66:	e7d0      	b.n	8006d0a <_scanf_float+0x192>
 8006d68:	b97d      	cbnz	r5, 8006d8a <_scanf_float+0x212>
 8006d6a:	f1b9 0f00 	cmp.w	r9, #0
 8006d6e:	f47f af38 	bne.w	8006be2 <_scanf_float+0x6a>
 8006d72:	6822      	ldr	r2, [r4, #0]
 8006d74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006d78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006d7c:	f040 8108 	bne.w	8006f90 <_scanf_float+0x418>
 8006d80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	2501      	movs	r5, #1
 8006d88:	e7bf      	b.n	8006d0a <_scanf_float+0x192>
 8006d8a:	2d03      	cmp	r5, #3
 8006d8c:	d0e2      	beq.n	8006d54 <_scanf_float+0x1dc>
 8006d8e:	2d05      	cmp	r5, #5
 8006d90:	e7de      	b.n	8006d50 <_scanf_float+0x1d8>
 8006d92:	2d02      	cmp	r5, #2
 8006d94:	f47f af22 	bne.w	8006bdc <_scanf_float+0x64>
 8006d98:	2503      	movs	r5, #3
 8006d9a:	e7b6      	b.n	8006d0a <_scanf_float+0x192>
 8006d9c:	2d06      	cmp	r5, #6
 8006d9e:	f47f af1d 	bne.w	8006bdc <_scanf_float+0x64>
 8006da2:	2507      	movs	r5, #7
 8006da4:	e7b1      	b.n	8006d0a <_scanf_float+0x192>
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	0591      	lsls	r1, r2, #22
 8006daa:	f57f af17 	bpl.w	8006bdc <_scanf_float+0x64>
 8006dae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006db2:	6022      	str	r2, [r4, #0]
 8006db4:	f8cd 9008 	str.w	r9, [sp, #8]
 8006db8:	e7a7      	b.n	8006d0a <_scanf_float+0x192>
 8006dba:	6822      	ldr	r2, [r4, #0]
 8006dbc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006dc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006dc4:	d006      	beq.n	8006dd4 <_scanf_float+0x25c>
 8006dc6:	0550      	lsls	r0, r2, #21
 8006dc8:	f57f af08 	bpl.w	8006bdc <_scanf_float+0x64>
 8006dcc:	f1b9 0f00 	cmp.w	r9, #0
 8006dd0:	f000 80de 	beq.w	8006f90 <_scanf_float+0x418>
 8006dd4:	0591      	lsls	r1, r2, #22
 8006dd6:	bf58      	it	pl
 8006dd8:	9902      	ldrpl	r1, [sp, #8]
 8006dda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006dde:	bf58      	it	pl
 8006de0:	eba9 0101 	subpl.w	r1, r9, r1
 8006de4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006de8:	bf58      	it	pl
 8006dea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006dee:	6022      	str	r2, [r4, #0]
 8006df0:	f04f 0900 	mov.w	r9, #0
 8006df4:	e789      	b.n	8006d0a <_scanf_float+0x192>
 8006df6:	f04f 0a03 	mov.w	sl, #3
 8006dfa:	e786      	b.n	8006d0a <_scanf_float+0x192>
 8006dfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006e00:	4639      	mov	r1, r7
 8006e02:	4640      	mov	r0, r8
 8006e04:	4798      	blx	r3
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f43f aedb 	beq.w	8006bc2 <_scanf_float+0x4a>
 8006e0c:	e6e6      	b.n	8006bdc <_scanf_float+0x64>
 8006e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e16:	463a      	mov	r2, r7
 8006e18:	4640      	mov	r0, r8
 8006e1a:	4798      	blx	r3
 8006e1c:	6923      	ldr	r3, [r4, #16]
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	6123      	str	r3, [r4, #16]
 8006e22:	e6e8      	b.n	8006bf6 <_scanf_float+0x7e>
 8006e24:	1e6b      	subs	r3, r5, #1
 8006e26:	2b06      	cmp	r3, #6
 8006e28:	d824      	bhi.n	8006e74 <_scanf_float+0x2fc>
 8006e2a:	2d02      	cmp	r5, #2
 8006e2c:	d836      	bhi.n	8006e9c <_scanf_float+0x324>
 8006e2e:	9b01      	ldr	r3, [sp, #4]
 8006e30:	429e      	cmp	r6, r3
 8006e32:	f67f aee4 	bls.w	8006bfe <_scanf_float+0x86>
 8006e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e3e:	463a      	mov	r2, r7
 8006e40:	4640      	mov	r0, r8
 8006e42:	4798      	blx	r3
 8006e44:	6923      	ldr	r3, [r4, #16]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	6123      	str	r3, [r4, #16]
 8006e4a:	e7f0      	b.n	8006e2e <_scanf_float+0x2b6>
 8006e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006e54:	463a      	mov	r2, r7
 8006e56:	4640      	mov	r0, r8
 8006e58:	4798      	blx	r3
 8006e5a:	6923      	ldr	r3, [r4, #16]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e64:	fa5f fa8a 	uxtb.w	sl, sl
 8006e68:	f1ba 0f02 	cmp.w	sl, #2
 8006e6c:	d1ee      	bne.n	8006e4c <_scanf_float+0x2d4>
 8006e6e:	3d03      	subs	r5, #3
 8006e70:	b2ed      	uxtb	r5, r5
 8006e72:	1b76      	subs	r6, r6, r5
 8006e74:	6823      	ldr	r3, [r4, #0]
 8006e76:	05da      	lsls	r2, r3, #23
 8006e78:	d530      	bpl.n	8006edc <_scanf_float+0x364>
 8006e7a:	055b      	lsls	r3, r3, #21
 8006e7c:	d511      	bpl.n	8006ea2 <_scanf_float+0x32a>
 8006e7e:	9b01      	ldr	r3, [sp, #4]
 8006e80:	429e      	cmp	r6, r3
 8006e82:	f67f aebc 	bls.w	8006bfe <_scanf_float+0x86>
 8006e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006e8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006e8e:	463a      	mov	r2, r7
 8006e90:	4640      	mov	r0, r8
 8006e92:	4798      	blx	r3
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	6123      	str	r3, [r4, #16]
 8006e9a:	e7f0      	b.n	8006e7e <_scanf_float+0x306>
 8006e9c:	46aa      	mov	sl, r5
 8006e9e:	46b3      	mov	fp, r6
 8006ea0:	e7de      	b.n	8006e60 <_scanf_float+0x2e8>
 8006ea2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	2965      	cmp	r1, #101	@ 0x65
 8006eaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8006eae:	f106 35ff 	add.w	r5, r6, #4294967295
 8006eb2:	6123      	str	r3, [r4, #16]
 8006eb4:	d00c      	beq.n	8006ed0 <_scanf_float+0x358>
 8006eb6:	2945      	cmp	r1, #69	@ 0x45
 8006eb8:	d00a      	beq.n	8006ed0 <_scanf_float+0x358>
 8006eba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ebe:	463a      	mov	r2, r7
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4798      	blx	r3
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	1eb5      	subs	r5, r6, #2
 8006ece:	6123      	str	r3, [r4, #16]
 8006ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ed4:	463a      	mov	r2, r7
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	4798      	blx	r3
 8006eda:	462e      	mov	r6, r5
 8006edc:	6822      	ldr	r2, [r4, #0]
 8006ede:	f012 0210 	ands.w	r2, r2, #16
 8006ee2:	d001      	beq.n	8006ee8 <_scanf_float+0x370>
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	e68b      	b.n	8006c00 <_scanf_float+0x88>
 8006ee8:	7032      	strb	r2, [r6, #0]
 8006eea:	6823      	ldr	r3, [r4, #0]
 8006eec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef4:	d11c      	bne.n	8006f30 <_scanf_float+0x3b8>
 8006ef6:	9b02      	ldr	r3, [sp, #8]
 8006ef8:	454b      	cmp	r3, r9
 8006efa:	eba3 0209 	sub.w	r2, r3, r9
 8006efe:	d123      	bne.n	8006f48 <_scanf_float+0x3d0>
 8006f00:	9901      	ldr	r1, [sp, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	4640      	mov	r0, r8
 8006f06:	f002 fbcb 	bl	80096a0 <_strtod_r>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	6821      	ldr	r1, [r4, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f011 0f02 	tst.w	r1, #2
 8006f14:	ec57 6b10 	vmov	r6, r7, d0
 8006f18:	f103 0204 	add.w	r2, r3, #4
 8006f1c:	d01f      	beq.n	8006f5e <_scanf_float+0x3e6>
 8006f1e:	9903      	ldr	r1, [sp, #12]
 8006f20:	600a      	str	r2, [r1, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	e9c3 6700 	strd	r6, r7, [r3]
 8006f28:	68e3      	ldr	r3, [r4, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60e3      	str	r3, [r4, #12]
 8006f2e:	e7d9      	b.n	8006ee4 <_scanf_float+0x36c>
 8006f30:	9b04      	ldr	r3, [sp, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0e4      	beq.n	8006f00 <_scanf_float+0x388>
 8006f36:	9905      	ldr	r1, [sp, #20]
 8006f38:	230a      	movs	r3, #10
 8006f3a:	3101      	adds	r1, #1
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	f002 fc2f 	bl	80097a0 <_strtol_r>
 8006f42:	9b04      	ldr	r3, [sp, #16]
 8006f44:	9e05      	ldr	r6, [sp, #20]
 8006f46:	1ac2      	subs	r2, r0, r3
 8006f48:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006f4c:	429e      	cmp	r6, r3
 8006f4e:	bf28      	it	cs
 8006f50:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006f54:	4910      	ldr	r1, [pc, #64]	@ (8006f98 <_scanf_float+0x420>)
 8006f56:	4630      	mov	r0, r6
 8006f58:	f000 f918 	bl	800718c <siprintf>
 8006f5c:	e7d0      	b.n	8006f00 <_scanf_float+0x388>
 8006f5e:	f011 0f04 	tst.w	r1, #4
 8006f62:	9903      	ldr	r1, [sp, #12]
 8006f64:	600a      	str	r2, [r1, #0]
 8006f66:	d1dc      	bne.n	8006f22 <_scanf_float+0x3aa>
 8006f68:	681d      	ldr	r5, [r3, #0]
 8006f6a:	4632      	mov	r2, r6
 8006f6c:	463b      	mov	r3, r7
 8006f6e:	4630      	mov	r0, r6
 8006f70:	4639      	mov	r1, r7
 8006f72:	f7f9 fddb 	bl	8000b2c <__aeabi_dcmpun>
 8006f76:	b128      	cbz	r0, 8006f84 <_scanf_float+0x40c>
 8006f78:	4808      	ldr	r0, [pc, #32]	@ (8006f9c <_scanf_float+0x424>)
 8006f7a:	f000 fa3f 	bl	80073fc <nanf>
 8006f7e:	ed85 0a00 	vstr	s0, [r5]
 8006f82:	e7d1      	b.n	8006f28 <_scanf_float+0x3b0>
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f7f9 fe2e 	bl	8000be8 <__aeabi_d2f>
 8006f8c:	6028      	str	r0, [r5, #0]
 8006f8e:	e7cb      	b.n	8006f28 <_scanf_float+0x3b0>
 8006f90:	f04f 0900 	mov.w	r9, #0
 8006f94:	e629      	b.n	8006bea <_scanf_float+0x72>
 8006f96:	bf00      	nop
 8006f98:	0800af6c 	.word	0x0800af6c
 8006f9c:	0800b305 	.word	0x0800b305

08006fa0 <std>:
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	b510      	push	{r4, lr}
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8006faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fae:	6083      	str	r3, [r0, #8]
 8006fb0:	8181      	strh	r1, [r0, #12]
 8006fb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fb4:	81c2      	strh	r2, [r0, #14]
 8006fb6:	6183      	str	r3, [r0, #24]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	2208      	movs	r2, #8
 8006fbc:	305c      	adds	r0, #92	@ 0x5c
 8006fbe:	f000 f948 	bl	8007252 <memset>
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <std+0x58>)
 8006fc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8006fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ffc <std+0x5c>)
 8006fc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fca:	4b0d      	ldr	r3, [pc, #52]	@ (8007000 <std+0x60>)
 8006fcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fce:	4b0d      	ldr	r3, [pc, #52]	@ (8007004 <std+0x64>)
 8006fd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8007008 <std+0x68>)
 8006fd4:	6224      	str	r4, [r4, #32]
 8006fd6:	429c      	cmp	r4, r3
 8006fd8:	d006      	beq.n	8006fe8 <std+0x48>
 8006fda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fde:	4294      	cmp	r4, r2
 8006fe0:	d002      	beq.n	8006fe8 <std+0x48>
 8006fe2:	33d0      	adds	r3, #208	@ 0xd0
 8006fe4:	429c      	cmp	r4, r3
 8006fe6:	d105      	bne.n	8006ff4 <std+0x54>
 8006fe8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ff0:	f000 ba00 	b.w	80073f4 <__retarget_lock_init_recursive>
 8006ff4:	bd10      	pop	{r4, pc}
 8006ff6:	bf00      	nop
 8006ff8:	080071cd 	.word	0x080071cd
 8006ffc:	080071ef 	.word	0x080071ef
 8007000:	08007227 	.word	0x08007227
 8007004:	0800724b 	.word	0x0800724b
 8007008:	2000076c 	.word	0x2000076c

0800700c <stdio_exit_handler>:
 800700c:	4a02      	ldr	r2, [pc, #8]	@ (8007018 <stdio_exit_handler+0xc>)
 800700e:	4903      	ldr	r1, [pc, #12]	@ (800701c <stdio_exit_handler+0x10>)
 8007010:	4803      	ldr	r0, [pc, #12]	@ (8007020 <stdio_exit_handler+0x14>)
 8007012:	f000 b869 	b.w	80070e8 <_fwalk_sglue>
 8007016:	bf00      	nop
 8007018:	20000010 	.word	0x20000010
 800701c:	08009b5d 	.word	0x08009b5d
 8007020:	20000020 	.word	0x20000020

08007024 <cleanup_stdio>:
 8007024:	6841      	ldr	r1, [r0, #4]
 8007026:	4b0c      	ldr	r3, [pc, #48]	@ (8007058 <cleanup_stdio+0x34>)
 8007028:	4299      	cmp	r1, r3
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	d001      	beq.n	8007034 <cleanup_stdio+0x10>
 8007030:	f002 fd94 	bl	8009b5c <_fflush_r>
 8007034:	68a1      	ldr	r1, [r4, #8]
 8007036:	4b09      	ldr	r3, [pc, #36]	@ (800705c <cleanup_stdio+0x38>)
 8007038:	4299      	cmp	r1, r3
 800703a:	d002      	beq.n	8007042 <cleanup_stdio+0x1e>
 800703c:	4620      	mov	r0, r4
 800703e:	f002 fd8d 	bl	8009b5c <_fflush_r>
 8007042:	68e1      	ldr	r1, [r4, #12]
 8007044:	4b06      	ldr	r3, [pc, #24]	@ (8007060 <cleanup_stdio+0x3c>)
 8007046:	4299      	cmp	r1, r3
 8007048:	d004      	beq.n	8007054 <cleanup_stdio+0x30>
 800704a:	4620      	mov	r0, r4
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f002 bd84 	b.w	8009b5c <_fflush_r>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	2000076c 	.word	0x2000076c
 800705c:	200007d4 	.word	0x200007d4
 8007060:	2000083c 	.word	0x2000083c

08007064 <global_stdio_init.part.0>:
 8007064:	b510      	push	{r4, lr}
 8007066:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <global_stdio_init.part.0+0x30>)
 8007068:	4c0b      	ldr	r4, [pc, #44]	@ (8007098 <global_stdio_init.part.0+0x34>)
 800706a:	4a0c      	ldr	r2, [pc, #48]	@ (800709c <global_stdio_init.part.0+0x38>)
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	4620      	mov	r0, r4
 8007070:	2200      	movs	r2, #0
 8007072:	2104      	movs	r1, #4
 8007074:	f7ff ff94 	bl	8006fa0 <std>
 8007078:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800707c:	2201      	movs	r2, #1
 800707e:	2109      	movs	r1, #9
 8007080:	f7ff ff8e 	bl	8006fa0 <std>
 8007084:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007088:	2202      	movs	r2, #2
 800708a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800708e:	2112      	movs	r1, #18
 8007090:	f7ff bf86 	b.w	8006fa0 <std>
 8007094:	200008a4 	.word	0x200008a4
 8007098:	2000076c 	.word	0x2000076c
 800709c:	0800700d 	.word	0x0800700d

080070a0 <__sfp_lock_acquire>:
 80070a0:	4801      	ldr	r0, [pc, #4]	@ (80070a8 <__sfp_lock_acquire+0x8>)
 80070a2:	f000 b9a8 	b.w	80073f6 <__retarget_lock_acquire_recursive>
 80070a6:	bf00      	nop
 80070a8:	200008ad 	.word	0x200008ad

080070ac <__sfp_lock_release>:
 80070ac:	4801      	ldr	r0, [pc, #4]	@ (80070b4 <__sfp_lock_release+0x8>)
 80070ae:	f000 b9a3 	b.w	80073f8 <__retarget_lock_release_recursive>
 80070b2:	bf00      	nop
 80070b4:	200008ad 	.word	0x200008ad

080070b8 <__sinit>:
 80070b8:	b510      	push	{r4, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	f7ff fff0 	bl	80070a0 <__sfp_lock_acquire>
 80070c0:	6a23      	ldr	r3, [r4, #32]
 80070c2:	b11b      	cbz	r3, 80070cc <__sinit+0x14>
 80070c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c8:	f7ff bff0 	b.w	80070ac <__sfp_lock_release>
 80070cc:	4b04      	ldr	r3, [pc, #16]	@ (80070e0 <__sinit+0x28>)
 80070ce:	6223      	str	r3, [r4, #32]
 80070d0:	4b04      	ldr	r3, [pc, #16]	@ (80070e4 <__sinit+0x2c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f5      	bne.n	80070c4 <__sinit+0xc>
 80070d8:	f7ff ffc4 	bl	8007064 <global_stdio_init.part.0>
 80070dc:	e7f2      	b.n	80070c4 <__sinit+0xc>
 80070de:	bf00      	nop
 80070e0:	08007025 	.word	0x08007025
 80070e4:	200008a4 	.word	0x200008a4

080070e8 <_fwalk_sglue>:
 80070e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ec:	4607      	mov	r7, r0
 80070ee:	4688      	mov	r8, r1
 80070f0:	4614      	mov	r4, r2
 80070f2:	2600      	movs	r6, #0
 80070f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070f8:	f1b9 0901 	subs.w	r9, r9, #1
 80070fc:	d505      	bpl.n	800710a <_fwalk_sglue+0x22>
 80070fe:	6824      	ldr	r4, [r4, #0]
 8007100:	2c00      	cmp	r4, #0
 8007102:	d1f7      	bne.n	80070f4 <_fwalk_sglue+0xc>
 8007104:	4630      	mov	r0, r6
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	89ab      	ldrh	r3, [r5, #12]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d907      	bls.n	8007120 <_fwalk_sglue+0x38>
 8007110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007114:	3301      	adds	r3, #1
 8007116:	d003      	beq.n	8007120 <_fwalk_sglue+0x38>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	47c0      	blx	r8
 800711e:	4306      	orrs	r6, r0
 8007120:	3568      	adds	r5, #104	@ 0x68
 8007122:	e7e9      	b.n	80070f8 <_fwalk_sglue+0x10>

08007124 <sniprintf>:
 8007124:	b40c      	push	{r2, r3}
 8007126:	b530      	push	{r4, r5, lr}
 8007128:	4b17      	ldr	r3, [pc, #92]	@ (8007188 <sniprintf+0x64>)
 800712a:	1e0c      	subs	r4, r1, #0
 800712c:	681d      	ldr	r5, [r3, #0]
 800712e:	b09d      	sub	sp, #116	@ 0x74
 8007130:	da08      	bge.n	8007144 <sniprintf+0x20>
 8007132:	238b      	movs	r3, #139	@ 0x8b
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	f04f 30ff 	mov.w	r0, #4294967295
 800713a:	b01d      	add	sp, #116	@ 0x74
 800713c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007140:	b002      	add	sp, #8
 8007142:	4770      	bx	lr
 8007144:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007148:	f8ad 3014 	strh.w	r3, [sp, #20]
 800714c:	bf14      	ite	ne
 800714e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007152:	4623      	moveq	r3, r4
 8007154:	9304      	str	r3, [sp, #16]
 8007156:	9307      	str	r3, [sp, #28]
 8007158:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800715c:	9002      	str	r0, [sp, #8]
 800715e:	9006      	str	r0, [sp, #24]
 8007160:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007164:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007166:	ab21      	add	r3, sp, #132	@ 0x84
 8007168:	a902      	add	r1, sp, #8
 800716a:	4628      	mov	r0, r5
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	f002 fb75 	bl	800985c <_svfiprintf_r>
 8007172:	1c43      	adds	r3, r0, #1
 8007174:	bfbc      	itt	lt
 8007176:	238b      	movlt	r3, #139	@ 0x8b
 8007178:	602b      	strlt	r3, [r5, #0]
 800717a:	2c00      	cmp	r4, #0
 800717c:	d0dd      	beq.n	800713a <sniprintf+0x16>
 800717e:	9b02      	ldr	r3, [sp, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	701a      	strb	r2, [r3, #0]
 8007184:	e7d9      	b.n	800713a <sniprintf+0x16>
 8007186:	bf00      	nop
 8007188:	2000001c 	.word	0x2000001c

0800718c <siprintf>:
 800718c:	b40e      	push	{r1, r2, r3}
 800718e:	b500      	push	{lr}
 8007190:	b09c      	sub	sp, #112	@ 0x70
 8007192:	ab1d      	add	r3, sp, #116	@ 0x74
 8007194:	9002      	str	r0, [sp, #8]
 8007196:	9006      	str	r0, [sp, #24]
 8007198:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800719c:	4809      	ldr	r0, [pc, #36]	@ (80071c4 <siprintf+0x38>)
 800719e:	9107      	str	r1, [sp, #28]
 80071a0:	9104      	str	r1, [sp, #16]
 80071a2:	4909      	ldr	r1, [pc, #36]	@ (80071c8 <siprintf+0x3c>)
 80071a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071a8:	9105      	str	r1, [sp, #20]
 80071aa:	6800      	ldr	r0, [r0, #0]
 80071ac:	9301      	str	r3, [sp, #4]
 80071ae:	a902      	add	r1, sp, #8
 80071b0:	f002 fb54 	bl	800985c <_svfiprintf_r>
 80071b4:	9b02      	ldr	r3, [sp, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	701a      	strb	r2, [r3, #0]
 80071ba:	b01c      	add	sp, #112	@ 0x70
 80071bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c0:	b003      	add	sp, #12
 80071c2:	4770      	bx	lr
 80071c4:	2000001c 	.word	0x2000001c
 80071c8:	ffff0208 	.word	0xffff0208

080071cc <__sread>:
 80071cc:	b510      	push	{r4, lr}
 80071ce:	460c      	mov	r4, r1
 80071d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d4:	f000 f89c 	bl	8007310 <_read_r>
 80071d8:	2800      	cmp	r0, #0
 80071da:	bfab      	itete	ge
 80071dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071de:	89a3      	ldrhlt	r3, [r4, #12]
 80071e0:	181b      	addge	r3, r3, r0
 80071e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071e6:	bfac      	ite	ge
 80071e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071ea:	81a3      	strhlt	r3, [r4, #12]
 80071ec:	bd10      	pop	{r4, pc}

080071ee <__swrite>:
 80071ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f2:	461f      	mov	r7, r3
 80071f4:	898b      	ldrh	r3, [r1, #12]
 80071f6:	05db      	lsls	r3, r3, #23
 80071f8:	4605      	mov	r5, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	4616      	mov	r6, r2
 80071fe:	d505      	bpl.n	800720c <__swrite+0x1e>
 8007200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007204:	2302      	movs	r3, #2
 8007206:	2200      	movs	r2, #0
 8007208:	f000 f870 	bl	80072ec <_lseek_r>
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007212:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	4632      	mov	r2, r6
 800721a:	463b      	mov	r3, r7
 800721c:	4628      	mov	r0, r5
 800721e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007222:	f000 b8ab 	b.w	800737c <_write_r>

08007226 <__sseek>:
 8007226:	b510      	push	{r4, lr}
 8007228:	460c      	mov	r4, r1
 800722a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722e:	f000 f85d 	bl	80072ec <_lseek_r>
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	bf15      	itete	ne
 8007238:	6560      	strne	r0, [r4, #84]	@ 0x54
 800723a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800723e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007242:	81a3      	strheq	r3, [r4, #12]
 8007244:	bf18      	it	ne
 8007246:	81a3      	strhne	r3, [r4, #12]
 8007248:	bd10      	pop	{r4, pc}

0800724a <__sclose>:
 800724a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800724e:	f000 b83d 	b.w	80072cc <_close_r>

08007252 <memset>:
 8007252:	4402      	add	r2, r0
 8007254:	4603      	mov	r3, r0
 8007256:	4293      	cmp	r3, r2
 8007258:	d100      	bne.n	800725c <memset+0xa>
 800725a:	4770      	bx	lr
 800725c:	f803 1b01 	strb.w	r1, [r3], #1
 8007260:	e7f9      	b.n	8007256 <memset+0x4>

08007262 <_raise_r>:
 8007262:	291f      	cmp	r1, #31
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4605      	mov	r5, r0
 8007268:	460c      	mov	r4, r1
 800726a:	d904      	bls.n	8007276 <_raise_r+0x14>
 800726c:	2316      	movs	r3, #22
 800726e:	6003      	str	r3, [r0, #0]
 8007270:	f04f 30ff 	mov.w	r0, #4294967295
 8007274:	bd38      	pop	{r3, r4, r5, pc}
 8007276:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007278:	b112      	cbz	r2, 8007280 <_raise_r+0x1e>
 800727a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800727e:	b94b      	cbnz	r3, 8007294 <_raise_r+0x32>
 8007280:	4628      	mov	r0, r5
 8007282:	f000 f869 	bl	8007358 <_getpid_r>
 8007286:	4622      	mov	r2, r4
 8007288:	4601      	mov	r1, r0
 800728a:	4628      	mov	r0, r5
 800728c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007290:	f000 b850 	b.w	8007334 <_kill_r>
 8007294:	2b01      	cmp	r3, #1
 8007296:	d00a      	beq.n	80072ae <_raise_r+0x4c>
 8007298:	1c59      	adds	r1, r3, #1
 800729a:	d103      	bne.n	80072a4 <_raise_r+0x42>
 800729c:	2316      	movs	r3, #22
 800729e:	6003      	str	r3, [r0, #0]
 80072a0:	2001      	movs	r0, #1
 80072a2:	e7e7      	b.n	8007274 <_raise_r+0x12>
 80072a4:	2100      	movs	r1, #0
 80072a6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072aa:	4620      	mov	r0, r4
 80072ac:	4798      	blx	r3
 80072ae:	2000      	movs	r0, #0
 80072b0:	e7e0      	b.n	8007274 <_raise_r+0x12>
	...

080072b4 <raise>:
 80072b4:	4b02      	ldr	r3, [pc, #8]	@ (80072c0 <raise+0xc>)
 80072b6:	4601      	mov	r1, r0
 80072b8:	6818      	ldr	r0, [r3, #0]
 80072ba:	f7ff bfd2 	b.w	8007262 <_raise_r>
 80072be:	bf00      	nop
 80072c0:	2000001c 	.word	0x2000001c

080072c4 <_localeconv_r>:
 80072c4:	4800      	ldr	r0, [pc, #0]	@ (80072c8 <_localeconv_r+0x4>)
 80072c6:	4770      	bx	lr
 80072c8:	2000015c 	.word	0x2000015c

080072cc <_close_r>:
 80072cc:	b538      	push	{r3, r4, r5, lr}
 80072ce:	4d06      	ldr	r5, [pc, #24]	@ (80072e8 <_close_r+0x1c>)
 80072d0:	2300      	movs	r3, #0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4608      	mov	r0, r1
 80072d6:	602b      	str	r3, [r5, #0]
 80072d8:	f7fb fdb4 	bl	8002e44 <_close>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_close_r+0x1a>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_close_r+0x1a>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	200008a8 	.word	0x200008a8

080072ec <_lseek_r>:
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4d07      	ldr	r5, [pc, #28]	@ (800730c <_lseek_r+0x20>)
 80072f0:	4604      	mov	r4, r0
 80072f2:	4608      	mov	r0, r1
 80072f4:	4611      	mov	r1, r2
 80072f6:	2200      	movs	r2, #0
 80072f8:	602a      	str	r2, [r5, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f7fb fdc9 	bl	8002e92 <_lseek>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d102      	bne.n	800730a <_lseek_r+0x1e>
 8007304:	682b      	ldr	r3, [r5, #0]
 8007306:	b103      	cbz	r3, 800730a <_lseek_r+0x1e>
 8007308:	6023      	str	r3, [r4, #0]
 800730a:	bd38      	pop	{r3, r4, r5, pc}
 800730c:	200008a8 	.word	0x200008a8

08007310 <_read_r>:
 8007310:	b538      	push	{r3, r4, r5, lr}
 8007312:	4d07      	ldr	r5, [pc, #28]	@ (8007330 <_read_r+0x20>)
 8007314:	4604      	mov	r4, r0
 8007316:	4608      	mov	r0, r1
 8007318:	4611      	mov	r1, r2
 800731a:	2200      	movs	r2, #0
 800731c:	602a      	str	r2, [r5, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	f7fb fd57 	bl	8002dd2 <_read>
 8007324:	1c43      	adds	r3, r0, #1
 8007326:	d102      	bne.n	800732e <_read_r+0x1e>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	b103      	cbz	r3, 800732e <_read_r+0x1e>
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	bd38      	pop	{r3, r4, r5, pc}
 8007330:	200008a8 	.word	0x200008a8

08007334 <_kill_r>:
 8007334:	b538      	push	{r3, r4, r5, lr}
 8007336:	4d07      	ldr	r5, [pc, #28]	@ (8007354 <_kill_r+0x20>)
 8007338:	2300      	movs	r3, #0
 800733a:	4604      	mov	r4, r0
 800733c:	4608      	mov	r0, r1
 800733e:	4611      	mov	r1, r2
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	f7fb fd2b 	bl	8002d9c <_kill>
 8007346:	1c43      	adds	r3, r0, #1
 8007348:	d102      	bne.n	8007350 <_kill_r+0x1c>
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	b103      	cbz	r3, 8007350 <_kill_r+0x1c>
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	bd38      	pop	{r3, r4, r5, pc}
 8007352:	bf00      	nop
 8007354:	200008a8 	.word	0x200008a8

08007358 <_getpid_r>:
 8007358:	f7fb bd18 	b.w	8002d8c <_getpid>

0800735c <_sbrk_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4d06      	ldr	r5, [pc, #24]	@ (8007378 <_sbrk_r+0x1c>)
 8007360:	2300      	movs	r3, #0
 8007362:	4604      	mov	r4, r0
 8007364:	4608      	mov	r0, r1
 8007366:	602b      	str	r3, [r5, #0]
 8007368:	f7fb fda0 	bl	8002eac <_sbrk>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d102      	bne.n	8007376 <_sbrk_r+0x1a>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	b103      	cbz	r3, 8007376 <_sbrk_r+0x1a>
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	200008a8 	.word	0x200008a8

0800737c <_write_r>:
 800737c:	b538      	push	{r3, r4, r5, lr}
 800737e:	4d07      	ldr	r5, [pc, #28]	@ (800739c <_write_r+0x20>)
 8007380:	4604      	mov	r4, r0
 8007382:	4608      	mov	r0, r1
 8007384:	4611      	mov	r1, r2
 8007386:	2200      	movs	r2, #0
 8007388:	602a      	str	r2, [r5, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	f7fb fd3e 	bl	8002e0c <_write>
 8007390:	1c43      	adds	r3, r0, #1
 8007392:	d102      	bne.n	800739a <_write_r+0x1e>
 8007394:	682b      	ldr	r3, [r5, #0]
 8007396:	b103      	cbz	r3, 800739a <_write_r+0x1e>
 8007398:	6023      	str	r3, [r4, #0]
 800739a:	bd38      	pop	{r3, r4, r5, pc}
 800739c:	200008a8 	.word	0x200008a8

080073a0 <__errno>:
 80073a0:	4b01      	ldr	r3, [pc, #4]	@ (80073a8 <__errno+0x8>)
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	2000001c 	.word	0x2000001c

080073ac <__libc_init_array>:
 80073ac:	b570      	push	{r4, r5, r6, lr}
 80073ae:	4d0d      	ldr	r5, [pc, #52]	@ (80073e4 <__libc_init_array+0x38>)
 80073b0:	4c0d      	ldr	r4, [pc, #52]	@ (80073e8 <__libc_init_array+0x3c>)
 80073b2:	1b64      	subs	r4, r4, r5
 80073b4:	10a4      	asrs	r4, r4, #2
 80073b6:	2600      	movs	r6, #0
 80073b8:	42a6      	cmp	r6, r4
 80073ba:	d109      	bne.n	80073d0 <__libc_init_array+0x24>
 80073bc:	4d0b      	ldr	r5, [pc, #44]	@ (80073ec <__libc_init_array+0x40>)
 80073be:	4c0c      	ldr	r4, [pc, #48]	@ (80073f0 <__libc_init_array+0x44>)
 80073c0:	f003 fa62 	bl	800a888 <_init>
 80073c4:	1b64      	subs	r4, r4, r5
 80073c6:	10a4      	asrs	r4, r4, #2
 80073c8:	2600      	movs	r6, #0
 80073ca:	42a6      	cmp	r6, r4
 80073cc:	d105      	bne.n	80073da <__libc_init_array+0x2e>
 80073ce:	bd70      	pop	{r4, r5, r6, pc}
 80073d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d4:	4798      	blx	r3
 80073d6:	3601      	adds	r6, #1
 80073d8:	e7ee      	b.n	80073b8 <__libc_init_array+0xc>
 80073da:	f855 3b04 	ldr.w	r3, [r5], #4
 80073de:	4798      	blx	r3
 80073e0:	3601      	adds	r6, #1
 80073e2:	e7f2      	b.n	80073ca <__libc_init_array+0x1e>
 80073e4:	0800b370 	.word	0x0800b370
 80073e8:	0800b370 	.word	0x0800b370
 80073ec:	0800b370 	.word	0x0800b370
 80073f0:	0800b374 	.word	0x0800b374

080073f4 <__retarget_lock_init_recursive>:
 80073f4:	4770      	bx	lr

080073f6 <__retarget_lock_acquire_recursive>:
 80073f6:	4770      	bx	lr

080073f8 <__retarget_lock_release_recursive>:
 80073f8:	4770      	bx	lr
	...

080073fc <nanf>:
 80073fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007404 <nanf+0x8>
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	7fc00000 	.word	0x7fc00000

08007408 <quorem>:
 8007408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800740c:	6903      	ldr	r3, [r0, #16]
 800740e:	690c      	ldr	r4, [r1, #16]
 8007410:	42a3      	cmp	r3, r4
 8007412:	4607      	mov	r7, r0
 8007414:	db7e      	blt.n	8007514 <quorem+0x10c>
 8007416:	3c01      	subs	r4, #1
 8007418:	f101 0814 	add.w	r8, r1, #20
 800741c:	00a3      	lsls	r3, r4, #2
 800741e:	f100 0514 	add.w	r5, r0, #20
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800742e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007432:	3301      	adds	r3, #1
 8007434:	429a      	cmp	r2, r3
 8007436:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800743a:	fbb2 f6f3 	udiv	r6, r2, r3
 800743e:	d32e      	bcc.n	800749e <quorem+0x96>
 8007440:	f04f 0a00 	mov.w	sl, #0
 8007444:	46c4      	mov	ip, r8
 8007446:	46ae      	mov	lr, r5
 8007448:	46d3      	mov	fp, sl
 800744a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800744e:	b298      	uxth	r0, r3
 8007450:	fb06 a000 	mla	r0, r6, r0, sl
 8007454:	0c02      	lsrs	r2, r0, #16
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	fb06 2303 	mla	r3, r6, r3, r2
 800745c:	f8de 2000 	ldr.w	r2, [lr]
 8007460:	b280      	uxth	r0, r0
 8007462:	b292      	uxth	r2, r2
 8007464:	1a12      	subs	r2, r2, r0
 8007466:	445a      	add	r2, fp
 8007468:	f8de 0000 	ldr.w	r0, [lr]
 800746c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007470:	b29b      	uxth	r3, r3
 8007472:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007476:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800747a:	b292      	uxth	r2, r2
 800747c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007480:	45e1      	cmp	r9, ip
 8007482:	f84e 2b04 	str.w	r2, [lr], #4
 8007486:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800748a:	d2de      	bcs.n	800744a <quorem+0x42>
 800748c:	9b00      	ldr	r3, [sp, #0]
 800748e:	58eb      	ldr	r3, [r5, r3]
 8007490:	b92b      	cbnz	r3, 800749e <quorem+0x96>
 8007492:	9b01      	ldr	r3, [sp, #4]
 8007494:	3b04      	subs	r3, #4
 8007496:	429d      	cmp	r5, r3
 8007498:	461a      	mov	r2, r3
 800749a:	d32f      	bcc.n	80074fc <quorem+0xf4>
 800749c:	613c      	str	r4, [r7, #16]
 800749e:	4638      	mov	r0, r7
 80074a0:	f001 f90c 	bl	80086bc <__mcmp>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	db25      	blt.n	80074f4 <quorem+0xec>
 80074a8:	4629      	mov	r1, r5
 80074aa:	2000      	movs	r0, #0
 80074ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80074b0:	f8d1 c000 	ldr.w	ip, [r1]
 80074b4:	fa1f fe82 	uxth.w	lr, r2
 80074b8:	fa1f f38c 	uxth.w	r3, ip
 80074bc:	eba3 030e 	sub.w	r3, r3, lr
 80074c0:	4403      	add	r3, r0
 80074c2:	0c12      	lsrs	r2, r2, #16
 80074c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80074c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074d2:	45c1      	cmp	r9, r8
 80074d4:	f841 3b04 	str.w	r3, [r1], #4
 80074d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074dc:	d2e6      	bcs.n	80074ac <quorem+0xa4>
 80074de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074e6:	b922      	cbnz	r2, 80074f2 <quorem+0xea>
 80074e8:	3b04      	subs	r3, #4
 80074ea:	429d      	cmp	r5, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	d30b      	bcc.n	8007508 <quorem+0x100>
 80074f0:	613c      	str	r4, [r7, #16]
 80074f2:	3601      	adds	r6, #1
 80074f4:	4630      	mov	r0, r6
 80074f6:	b003      	add	sp, #12
 80074f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	3b04      	subs	r3, #4
 8007500:	2a00      	cmp	r2, #0
 8007502:	d1cb      	bne.n	800749c <quorem+0x94>
 8007504:	3c01      	subs	r4, #1
 8007506:	e7c6      	b.n	8007496 <quorem+0x8e>
 8007508:	6812      	ldr	r2, [r2, #0]
 800750a:	3b04      	subs	r3, #4
 800750c:	2a00      	cmp	r2, #0
 800750e:	d1ef      	bne.n	80074f0 <quorem+0xe8>
 8007510:	3c01      	subs	r4, #1
 8007512:	e7ea      	b.n	80074ea <quorem+0xe2>
 8007514:	2000      	movs	r0, #0
 8007516:	e7ee      	b.n	80074f6 <quorem+0xee>

08007518 <_dtoa_r>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	69c7      	ldr	r7, [r0, #28]
 800751e:	b099      	sub	sp, #100	@ 0x64
 8007520:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007524:	ec55 4b10 	vmov	r4, r5, d0
 8007528:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800752a:	9109      	str	r1, [sp, #36]	@ 0x24
 800752c:	4683      	mov	fp, r0
 800752e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007530:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007532:	b97f      	cbnz	r7, 8007554 <_dtoa_r+0x3c>
 8007534:	2010      	movs	r0, #16
 8007536:	f7fe fe09 	bl	800614c <malloc>
 800753a:	4602      	mov	r2, r0
 800753c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007540:	b920      	cbnz	r0, 800754c <_dtoa_r+0x34>
 8007542:	4ba7      	ldr	r3, [pc, #668]	@ (80077e0 <_dtoa_r+0x2c8>)
 8007544:	21ef      	movs	r1, #239	@ 0xef
 8007546:	48a7      	ldr	r0, [pc, #668]	@ (80077e4 <_dtoa_r+0x2cc>)
 8007548:	f002 fb72 	bl	8009c30 <__assert_func>
 800754c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007550:	6007      	str	r7, [r0, #0]
 8007552:	60c7      	str	r7, [r0, #12]
 8007554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007558:	6819      	ldr	r1, [r3, #0]
 800755a:	b159      	cbz	r1, 8007574 <_dtoa_r+0x5c>
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	604a      	str	r2, [r1, #4]
 8007560:	2301      	movs	r3, #1
 8007562:	4093      	lsls	r3, r2
 8007564:	608b      	str	r3, [r1, #8]
 8007566:	4658      	mov	r0, fp
 8007568:	f000 fe24 	bl	80081b4 <_Bfree>
 800756c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007570:	2200      	movs	r2, #0
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	1e2b      	subs	r3, r5, #0
 8007576:	bfb9      	ittee	lt
 8007578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800757c:	9303      	strlt	r3, [sp, #12]
 800757e:	2300      	movge	r3, #0
 8007580:	6033      	strge	r3, [r6, #0]
 8007582:	9f03      	ldr	r7, [sp, #12]
 8007584:	4b98      	ldr	r3, [pc, #608]	@ (80077e8 <_dtoa_r+0x2d0>)
 8007586:	bfbc      	itt	lt
 8007588:	2201      	movlt	r2, #1
 800758a:	6032      	strlt	r2, [r6, #0]
 800758c:	43bb      	bics	r3, r7
 800758e:	d112      	bne.n	80075b6 <_dtoa_r+0x9e>
 8007590:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007592:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800759c:	4323      	orrs	r3, r4
 800759e:	f000 854d 	beq.w	800803c <_dtoa_r+0xb24>
 80075a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80077fc <_dtoa_r+0x2e4>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f000 854f 	beq.w	800804c <_dtoa_r+0xb34>
 80075ae:	f10a 0303 	add.w	r3, sl, #3
 80075b2:	f000 bd49 	b.w	8008048 <_dtoa_r+0xb30>
 80075b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075ba:	2200      	movs	r2, #0
 80075bc:	ec51 0b17 	vmov	r0, r1, d7
 80075c0:	2300      	movs	r3, #0
 80075c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80075c6:	f7f9 fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80075ca:	4680      	mov	r8, r0
 80075cc:	b158      	cbz	r0, 80075e6 <_dtoa_r+0xce>
 80075ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80075d0:	2301      	movs	r3, #1
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80075d6:	b113      	cbz	r3, 80075de <_dtoa_r+0xc6>
 80075d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80075da:	4b84      	ldr	r3, [pc, #528]	@ (80077ec <_dtoa_r+0x2d4>)
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007800 <_dtoa_r+0x2e8>
 80075e2:	f000 bd33 	b.w	800804c <_dtoa_r+0xb34>
 80075e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80075ea:	aa16      	add	r2, sp, #88	@ 0x58
 80075ec:	a917      	add	r1, sp, #92	@ 0x5c
 80075ee:	4658      	mov	r0, fp
 80075f0:	f001 f984 	bl	80088fc <__d2b>
 80075f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80075f8:	4681      	mov	r9, r0
 80075fa:	2e00      	cmp	r6, #0
 80075fc:	d077      	beq.n	80076ee <_dtoa_r+0x1d6>
 80075fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007600:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800760c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007618:	4619      	mov	r1, r3
 800761a:	2200      	movs	r2, #0
 800761c:	4b74      	ldr	r3, [pc, #464]	@ (80077f0 <_dtoa_r+0x2d8>)
 800761e:	f7f8 fe33 	bl	8000288 <__aeabi_dsub>
 8007622:	a369      	add	r3, pc, #420	@ (adr r3, 80077c8 <_dtoa_r+0x2b0>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 ffe6 	bl	80005f8 <__aeabi_dmul>
 800762c:	a368      	add	r3, pc, #416	@ (adr r3, 80077d0 <_dtoa_r+0x2b8>)
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f7f8 fe2b 	bl	800028c <__adddf3>
 8007636:	4604      	mov	r4, r0
 8007638:	4630      	mov	r0, r6
 800763a:	460d      	mov	r5, r1
 800763c:	f7f8 ff72 	bl	8000524 <__aeabi_i2d>
 8007640:	a365      	add	r3, pc, #404	@ (adr r3, 80077d8 <_dtoa_r+0x2c0>)
 8007642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007646:	f7f8 ffd7 	bl	80005f8 <__aeabi_dmul>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4620      	mov	r0, r4
 8007650:	4629      	mov	r1, r5
 8007652:	f7f8 fe1b 	bl	800028c <__adddf3>
 8007656:	4604      	mov	r4, r0
 8007658:	460d      	mov	r5, r1
 800765a:	f7f9 fa7d 	bl	8000b58 <__aeabi_d2iz>
 800765e:	2200      	movs	r2, #0
 8007660:	4607      	mov	r7, r0
 8007662:	2300      	movs	r3, #0
 8007664:	4620      	mov	r0, r4
 8007666:	4629      	mov	r1, r5
 8007668:	f7f9 fa38 	bl	8000adc <__aeabi_dcmplt>
 800766c:	b140      	cbz	r0, 8007680 <_dtoa_r+0x168>
 800766e:	4638      	mov	r0, r7
 8007670:	f7f8 ff58 	bl	8000524 <__aeabi_i2d>
 8007674:	4622      	mov	r2, r4
 8007676:	462b      	mov	r3, r5
 8007678:	f7f9 fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 800767c:	b900      	cbnz	r0, 8007680 <_dtoa_r+0x168>
 800767e:	3f01      	subs	r7, #1
 8007680:	2f16      	cmp	r7, #22
 8007682:	d851      	bhi.n	8007728 <_dtoa_r+0x210>
 8007684:	4b5b      	ldr	r3, [pc, #364]	@ (80077f4 <_dtoa_r+0x2dc>)
 8007686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007692:	f7f9 fa23 	bl	8000adc <__aeabi_dcmplt>
 8007696:	2800      	cmp	r0, #0
 8007698:	d048      	beq.n	800772c <_dtoa_r+0x214>
 800769a:	3f01      	subs	r7, #1
 800769c:	2300      	movs	r3, #0
 800769e:	9312      	str	r3, [sp, #72]	@ 0x48
 80076a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80076a2:	1b9b      	subs	r3, r3, r6
 80076a4:	1e5a      	subs	r2, r3, #1
 80076a6:	bf44      	itt	mi
 80076a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80076ac:	2300      	movmi	r3, #0
 80076ae:	9208      	str	r2, [sp, #32]
 80076b0:	bf54      	ite	pl
 80076b2:	f04f 0800 	movpl.w	r8, #0
 80076b6:	9308      	strmi	r3, [sp, #32]
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	db39      	blt.n	8007730 <_dtoa_r+0x218>
 80076bc:	9b08      	ldr	r3, [sp, #32]
 80076be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80076c0:	443b      	add	r3, r7
 80076c2:	9308      	str	r3, [sp, #32]
 80076c4:	2300      	movs	r3, #0
 80076c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ca:	2b09      	cmp	r3, #9
 80076cc:	d864      	bhi.n	8007798 <_dtoa_r+0x280>
 80076ce:	2b05      	cmp	r3, #5
 80076d0:	bfc4      	itt	gt
 80076d2:	3b04      	subgt	r3, #4
 80076d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80076d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d8:	f1a3 0302 	sub.w	r3, r3, #2
 80076dc:	bfcc      	ite	gt
 80076de:	2400      	movgt	r4, #0
 80076e0:	2401      	movle	r4, #1
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d863      	bhi.n	80077ae <_dtoa_r+0x296>
 80076e6:	e8df f003 	tbb	[pc, r3]
 80076ea:	372a      	.short	0x372a
 80076ec:	5535      	.short	0x5535
 80076ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80076f2:	441e      	add	r6, r3
 80076f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80076f8:	2b20      	cmp	r3, #32
 80076fa:	bfc1      	itttt	gt
 80076fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007700:	409f      	lslgt	r7, r3
 8007702:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007706:	fa24 f303 	lsrgt.w	r3, r4, r3
 800770a:	bfd6      	itet	le
 800770c:	f1c3 0320 	rsble	r3, r3, #32
 8007710:	ea47 0003 	orrgt.w	r0, r7, r3
 8007714:	fa04 f003 	lslle.w	r0, r4, r3
 8007718:	f7f8 fef4 	bl	8000504 <__aeabi_ui2d>
 800771c:	2201      	movs	r2, #1
 800771e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007722:	3e01      	subs	r6, #1
 8007724:	9214      	str	r2, [sp, #80]	@ 0x50
 8007726:	e777      	b.n	8007618 <_dtoa_r+0x100>
 8007728:	2301      	movs	r3, #1
 800772a:	e7b8      	b.n	800769e <_dtoa_r+0x186>
 800772c:	9012      	str	r0, [sp, #72]	@ 0x48
 800772e:	e7b7      	b.n	80076a0 <_dtoa_r+0x188>
 8007730:	427b      	negs	r3, r7
 8007732:	930a      	str	r3, [sp, #40]	@ 0x28
 8007734:	2300      	movs	r3, #0
 8007736:	eba8 0807 	sub.w	r8, r8, r7
 800773a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800773c:	e7c4      	b.n	80076c8 <_dtoa_r+0x1b0>
 800773e:	2300      	movs	r3, #0
 8007740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	dc35      	bgt.n	80077b4 <_dtoa_r+0x29c>
 8007748:	2301      	movs	r3, #1
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	9307      	str	r3, [sp, #28]
 800774e:	461a      	mov	r2, r3
 8007750:	920e      	str	r2, [sp, #56]	@ 0x38
 8007752:	e00b      	b.n	800776c <_dtoa_r+0x254>
 8007754:	2301      	movs	r3, #1
 8007756:	e7f3      	b.n	8007740 <_dtoa_r+0x228>
 8007758:	2300      	movs	r3, #0
 800775a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800775c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	2b01      	cmp	r3, #1
 8007766:	9307      	str	r3, [sp, #28]
 8007768:	bfb8      	it	lt
 800776a:	2301      	movlt	r3, #1
 800776c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007770:	2100      	movs	r1, #0
 8007772:	2204      	movs	r2, #4
 8007774:	f102 0514 	add.w	r5, r2, #20
 8007778:	429d      	cmp	r5, r3
 800777a:	d91f      	bls.n	80077bc <_dtoa_r+0x2a4>
 800777c:	6041      	str	r1, [r0, #4]
 800777e:	4658      	mov	r0, fp
 8007780:	f000 fcd8 	bl	8008134 <_Balloc>
 8007784:	4682      	mov	sl, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	d13c      	bne.n	8007804 <_dtoa_r+0x2ec>
 800778a:	4b1b      	ldr	r3, [pc, #108]	@ (80077f8 <_dtoa_r+0x2e0>)
 800778c:	4602      	mov	r2, r0
 800778e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007792:	e6d8      	b.n	8007546 <_dtoa_r+0x2e>
 8007794:	2301      	movs	r3, #1
 8007796:	e7e0      	b.n	800775a <_dtoa_r+0x242>
 8007798:	2401      	movs	r4, #1
 800779a:	2300      	movs	r3, #0
 800779c:	9309      	str	r3, [sp, #36]	@ 0x24
 800779e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80077a0:	f04f 33ff 	mov.w	r3, #4294967295
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	9307      	str	r3, [sp, #28]
 80077a8:	2200      	movs	r2, #0
 80077aa:	2312      	movs	r3, #18
 80077ac:	e7d0      	b.n	8007750 <_dtoa_r+0x238>
 80077ae:	2301      	movs	r3, #1
 80077b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077b2:	e7f5      	b.n	80077a0 <_dtoa_r+0x288>
 80077b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	9307      	str	r3, [sp, #28]
 80077ba:	e7d7      	b.n	800776c <_dtoa_r+0x254>
 80077bc:	3101      	adds	r1, #1
 80077be:	0052      	lsls	r2, r2, #1
 80077c0:	e7d8      	b.n	8007774 <_dtoa_r+0x25c>
 80077c2:	bf00      	nop
 80077c4:	f3af 8000 	nop.w
 80077c8:	636f4361 	.word	0x636f4361
 80077cc:	3fd287a7 	.word	0x3fd287a7
 80077d0:	8b60c8b3 	.word	0x8b60c8b3
 80077d4:	3fc68a28 	.word	0x3fc68a28
 80077d8:	509f79fb 	.word	0x509f79fb
 80077dc:	3fd34413 	.word	0x3fd34413
 80077e0:	0800af7e 	.word	0x0800af7e
 80077e4:	0800af95 	.word	0x0800af95
 80077e8:	7ff00000 	.word	0x7ff00000
 80077ec:	0800af49 	.word	0x0800af49
 80077f0:	3ff80000 	.word	0x3ff80000
 80077f4:	0800b090 	.word	0x0800b090
 80077f8:	0800afed 	.word	0x0800afed
 80077fc:	0800af7a 	.word	0x0800af7a
 8007800:	0800af48 	.word	0x0800af48
 8007804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007808:	6018      	str	r0, [r3, #0]
 800780a:	9b07      	ldr	r3, [sp, #28]
 800780c:	2b0e      	cmp	r3, #14
 800780e:	f200 80a4 	bhi.w	800795a <_dtoa_r+0x442>
 8007812:	2c00      	cmp	r4, #0
 8007814:	f000 80a1 	beq.w	800795a <_dtoa_r+0x442>
 8007818:	2f00      	cmp	r7, #0
 800781a:	dd33      	ble.n	8007884 <_dtoa_r+0x36c>
 800781c:	4bad      	ldr	r3, [pc, #692]	@ (8007ad4 <_dtoa_r+0x5bc>)
 800781e:	f007 020f 	and.w	r2, r7, #15
 8007822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007826:	ed93 7b00 	vldr	d7, [r3]
 800782a:	05f8      	lsls	r0, r7, #23
 800782c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007830:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007834:	d516      	bpl.n	8007864 <_dtoa_r+0x34c>
 8007836:	4ba8      	ldr	r3, [pc, #672]	@ (8007ad8 <_dtoa_r+0x5c0>)
 8007838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800783c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007840:	f7f9 f804 	bl	800084c <__aeabi_ddiv>
 8007844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007848:	f004 040f 	and.w	r4, r4, #15
 800784c:	2603      	movs	r6, #3
 800784e:	4da2      	ldr	r5, [pc, #648]	@ (8007ad8 <_dtoa_r+0x5c0>)
 8007850:	b954      	cbnz	r4, 8007868 <_dtoa_r+0x350>
 8007852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785a:	f7f8 fff7 	bl	800084c <__aeabi_ddiv>
 800785e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007862:	e028      	b.n	80078b6 <_dtoa_r+0x39e>
 8007864:	2602      	movs	r6, #2
 8007866:	e7f2      	b.n	800784e <_dtoa_r+0x336>
 8007868:	07e1      	lsls	r1, r4, #31
 800786a:	d508      	bpl.n	800787e <_dtoa_r+0x366>
 800786c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007870:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007874:	f7f8 fec0 	bl	80005f8 <__aeabi_dmul>
 8007878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800787c:	3601      	adds	r6, #1
 800787e:	1064      	asrs	r4, r4, #1
 8007880:	3508      	adds	r5, #8
 8007882:	e7e5      	b.n	8007850 <_dtoa_r+0x338>
 8007884:	f000 80d2 	beq.w	8007a2c <_dtoa_r+0x514>
 8007888:	427c      	negs	r4, r7
 800788a:	4b92      	ldr	r3, [pc, #584]	@ (8007ad4 <_dtoa_r+0x5bc>)
 800788c:	4d92      	ldr	r5, [pc, #584]	@ (8007ad8 <_dtoa_r+0x5c0>)
 800788e:	f004 020f 	and.w	r2, r4, #15
 8007892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800789e:	f7f8 feab 	bl	80005f8 <__aeabi_dmul>
 80078a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078a6:	1124      	asrs	r4, r4, #4
 80078a8:	2300      	movs	r3, #0
 80078aa:	2602      	movs	r6, #2
 80078ac:	2c00      	cmp	r4, #0
 80078ae:	f040 80b2 	bne.w	8007a16 <_dtoa_r+0x4fe>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1d3      	bne.n	800785e <_dtoa_r+0x346>
 80078b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 80b7 	beq.w	8007a30 <_dtoa_r+0x518>
 80078c2:	4b86      	ldr	r3, [pc, #536]	@ (8007adc <_dtoa_r+0x5c4>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f9 f907 	bl	8000adc <__aeabi_dcmplt>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	f000 80ae 	beq.w	8007a30 <_dtoa_r+0x518>
 80078d4:	9b07      	ldr	r3, [sp, #28]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80aa 	beq.w	8007a30 <_dtoa_r+0x518>
 80078dc:	9b00      	ldr	r3, [sp, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	dd37      	ble.n	8007952 <_dtoa_r+0x43a>
 80078e2:	1e7b      	subs	r3, r7, #1
 80078e4:	9304      	str	r3, [sp, #16]
 80078e6:	4620      	mov	r0, r4
 80078e8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ae0 <_dtoa_r+0x5c8>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	4629      	mov	r1, r5
 80078ee:	f7f8 fe83 	bl	80005f8 <__aeabi_dmul>
 80078f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f6:	9c00      	ldr	r4, [sp, #0]
 80078f8:	3601      	adds	r6, #1
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7f8 fe12 	bl	8000524 <__aeabi_i2d>
 8007900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007904:	f7f8 fe78 	bl	80005f8 <__aeabi_dmul>
 8007908:	4b76      	ldr	r3, [pc, #472]	@ (8007ae4 <_dtoa_r+0x5cc>)
 800790a:	2200      	movs	r2, #0
 800790c:	f7f8 fcbe 	bl	800028c <__adddf3>
 8007910:	4605      	mov	r5, r0
 8007912:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007916:	2c00      	cmp	r4, #0
 8007918:	f040 808d 	bne.w	8007a36 <_dtoa_r+0x51e>
 800791c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007920:	4b71      	ldr	r3, [pc, #452]	@ (8007ae8 <_dtoa_r+0x5d0>)
 8007922:	2200      	movs	r2, #0
 8007924:	f7f8 fcb0 	bl	8000288 <__aeabi_dsub>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007930:	462a      	mov	r2, r5
 8007932:	4633      	mov	r3, r6
 8007934:	f7f9 f8f0 	bl	8000b18 <__aeabi_dcmpgt>
 8007938:	2800      	cmp	r0, #0
 800793a:	f040 828b 	bne.w	8007e54 <_dtoa_r+0x93c>
 800793e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007942:	462a      	mov	r2, r5
 8007944:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007948:	f7f9 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800794c:	2800      	cmp	r0, #0
 800794e:	f040 8128 	bne.w	8007ba2 <_dtoa_r+0x68a>
 8007952:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007956:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800795a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800795c:	2b00      	cmp	r3, #0
 800795e:	f2c0 815a 	blt.w	8007c16 <_dtoa_r+0x6fe>
 8007962:	2f0e      	cmp	r7, #14
 8007964:	f300 8157 	bgt.w	8007c16 <_dtoa_r+0x6fe>
 8007968:	4b5a      	ldr	r3, [pc, #360]	@ (8007ad4 <_dtoa_r+0x5bc>)
 800796a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800796e:	ed93 7b00 	vldr	d7, [r3]
 8007972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007974:	2b00      	cmp	r3, #0
 8007976:	ed8d 7b00 	vstr	d7, [sp]
 800797a:	da03      	bge.n	8007984 <_dtoa_r+0x46c>
 800797c:	9b07      	ldr	r3, [sp, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	f340 8101 	ble.w	8007b86 <_dtoa_r+0x66e>
 8007984:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007988:	4656      	mov	r6, sl
 800798a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800798e:	4620      	mov	r0, r4
 8007990:	4629      	mov	r1, r5
 8007992:	f7f8 ff5b 	bl	800084c <__aeabi_ddiv>
 8007996:	f7f9 f8df 	bl	8000b58 <__aeabi_d2iz>
 800799a:	4680      	mov	r8, r0
 800799c:	f7f8 fdc2 	bl	8000524 <__aeabi_i2d>
 80079a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079a4:	f7f8 fe28 	bl	80005f8 <__aeabi_dmul>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4620      	mov	r0, r4
 80079ae:	4629      	mov	r1, r5
 80079b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80079b4:	f7f8 fc68 	bl	8000288 <__aeabi_dsub>
 80079b8:	f806 4b01 	strb.w	r4, [r6], #1
 80079bc:	9d07      	ldr	r5, [sp, #28]
 80079be:	eba6 040a 	sub.w	r4, r6, sl
 80079c2:	42a5      	cmp	r5, r4
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	f040 8117 	bne.w	8007bfa <_dtoa_r+0x6e2>
 80079cc:	f7f8 fc5e 	bl	800028c <__adddf3>
 80079d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	f7f9 f89e 	bl	8000b18 <__aeabi_dcmpgt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f040 80f9 	bne.w	8007bd4 <_dtoa_r+0x6bc>
 80079e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079e6:	4620      	mov	r0, r4
 80079e8:	4629      	mov	r1, r5
 80079ea:	f7f9 f86d 	bl	8000ac8 <__aeabi_dcmpeq>
 80079ee:	b118      	cbz	r0, 80079f8 <_dtoa_r+0x4e0>
 80079f0:	f018 0f01 	tst.w	r8, #1
 80079f4:	f040 80ee 	bne.w	8007bd4 <_dtoa_r+0x6bc>
 80079f8:	4649      	mov	r1, r9
 80079fa:	4658      	mov	r0, fp
 80079fc:	f000 fbda 	bl	80081b4 <_Bfree>
 8007a00:	2300      	movs	r3, #0
 8007a02:	7033      	strb	r3, [r6, #0]
 8007a04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a06:	3701      	adds	r7, #1
 8007a08:	601f      	str	r7, [r3, #0]
 8007a0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 831d 	beq.w	800804c <_dtoa_r+0xb34>
 8007a12:	601e      	str	r6, [r3, #0]
 8007a14:	e31a      	b.n	800804c <_dtoa_r+0xb34>
 8007a16:	07e2      	lsls	r2, r4, #31
 8007a18:	d505      	bpl.n	8007a26 <_dtoa_r+0x50e>
 8007a1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a1e:	f7f8 fdeb 	bl	80005f8 <__aeabi_dmul>
 8007a22:	3601      	adds	r6, #1
 8007a24:	2301      	movs	r3, #1
 8007a26:	1064      	asrs	r4, r4, #1
 8007a28:	3508      	adds	r5, #8
 8007a2a:	e73f      	b.n	80078ac <_dtoa_r+0x394>
 8007a2c:	2602      	movs	r6, #2
 8007a2e:	e742      	b.n	80078b6 <_dtoa_r+0x39e>
 8007a30:	9c07      	ldr	r4, [sp, #28]
 8007a32:	9704      	str	r7, [sp, #16]
 8007a34:	e761      	b.n	80078fa <_dtoa_r+0x3e2>
 8007a36:	4b27      	ldr	r3, [pc, #156]	@ (8007ad4 <_dtoa_r+0x5bc>)
 8007a38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a42:	4454      	add	r4, sl
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d053      	beq.n	8007af0 <_dtoa_r+0x5d8>
 8007a48:	4928      	ldr	r1, [pc, #160]	@ (8007aec <_dtoa_r+0x5d4>)
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	f7f8 fefe 	bl	800084c <__aeabi_ddiv>
 8007a50:	4633      	mov	r3, r6
 8007a52:	462a      	mov	r2, r5
 8007a54:	f7f8 fc18 	bl	8000288 <__aeabi_dsub>
 8007a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a5c:	4656      	mov	r6, sl
 8007a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a62:	f7f9 f879 	bl	8000b58 <__aeabi_d2iz>
 8007a66:	4605      	mov	r5, r0
 8007a68:	f7f8 fd5c 	bl	8000524 <__aeabi_i2d>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a74:	f7f8 fc08 	bl	8000288 <__aeabi_dsub>
 8007a78:	3530      	adds	r5, #48	@ 0x30
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a82:	f806 5b01 	strb.w	r5, [r6], #1
 8007a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a8a:	f7f9 f827 	bl	8000adc <__aeabi_dcmplt>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d171      	bne.n	8007b76 <_dtoa_r+0x65e>
 8007a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a96:	4911      	ldr	r1, [pc, #68]	@ (8007adc <_dtoa_r+0x5c4>)
 8007a98:	2000      	movs	r0, #0
 8007a9a:	f7f8 fbf5 	bl	8000288 <__aeabi_dsub>
 8007a9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007aa2:	f7f9 f81b 	bl	8000adc <__aeabi_dcmplt>
 8007aa6:	2800      	cmp	r0, #0
 8007aa8:	f040 8095 	bne.w	8007bd6 <_dtoa_r+0x6be>
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	f43f af50 	beq.w	8007952 <_dtoa_r+0x43a>
 8007ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ae0 <_dtoa_r+0x5c8>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f7f8 fd9d 	bl	80005f8 <__aeabi_dmul>
 8007abe:	4b08      	ldr	r3, [pc, #32]	@ (8007ae0 <_dtoa_r+0x5c8>)
 8007ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aca:	f7f8 fd95 	bl	80005f8 <__aeabi_dmul>
 8007ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad2:	e7c4      	b.n	8007a5e <_dtoa_r+0x546>
 8007ad4:	0800b090 	.word	0x0800b090
 8007ad8:	0800b068 	.word	0x0800b068
 8007adc:	3ff00000 	.word	0x3ff00000
 8007ae0:	40240000 	.word	0x40240000
 8007ae4:	401c0000 	.word	0x401c0000
 8007ae8:	40140000 	.word	0x40140000
 8007aec:	3fe00000 	.word	0x3fe00000
 8007af0:	4631      	mov	r1, r6
 8007af2:	4628      	mov	r0, r5
 8007af4:	f7f8 fd80 	bl	80005f8 <__aeabi_dmul>
 8007af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007afc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007afe:	4656      	mov	r6, sl
 8007b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b04:	f7f9 f828 	bl	8000b58 <__aeabi_d2iz>
 8007b08:	4605      	mov	r5, r0
 8007b0a:	f7f8 fd0b 	bl	8000524 <__aeabi_i2d>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b16:	f7f8 fbb7 	bl	8000288 <__aeabi_dsub>
 8007b1a:	3530      	adds	r5, #48	@ 0x30
 8007b1c:	f806 5b01 	strb.w	r5, [r6], #1
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	42a6      	cmp	r6, r4
 8007b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	d124      	bne.n	8007b7a <_dtoa_r+0x662>
 8007b30:	4bac      	ldr	r3, [pc, #688]	@ (8007de4 <_dtoa_r+0x8cc>)
 8007b32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b36:	f7f8 fba9 	bl	800028c <__adddf3>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b42:	f7f8 ffe9 	bl	8000b18 <__aeabi_dcmpgt>
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d145      	bne.n	8007bd6 <_dtoa_r+0x6be>
 8007b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b4e:	49a5      	ldr	r1, [pc, #660]	@ (8007de4 <_dtoa_r+0x8cc>)
 8007b50:	2000      	movs	r0, #0
 8007b52:	f7f8 fb99 	bl	8000288 <__aeabi_dsub>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b5e:	f7f8 ffbd 	bl	8000adc <__aeabi_dcmplt>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f43f aef5 	beq.w	8007952 <_dtoa_r+0x43a>
 8007b68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007b6a:	1e73      	subs	r3, r6, #1
 8007b6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007b72:	2b30      	cmp	r3, #48	@ 0x30
 8007b74:	d0f8      	beq.n	8007b68 <_dtoa_r+0x650>
 8007b76:	9f04      	ldr	r7, [sp, #16]
 8007b78:	e73e      	b.n	80079f8 <_dtoa_r+0x4e0>
 8007b7a:	4b9b      	ldr	r3, [pc, #620]	@ (8007de8 <_dtoa_r+0x8d0>)
 8007b7c:	f7f8 fd3c 	bl	80005f8 <__aeabi_dmul>
 8007b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b84:	e7bc      	b.n	8007b00 <_dtoa_r+0x5e8>
 8007b86:	d10c      	bne.n	8007ba2 <_dtoa_r+0x68a>
 8007b88:	4b98      	ldr	r3, [pc, #608]	@ (8007dec <_dtoa_r+0x8d4>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b90:	f7f8 fd32 	bl	80005f8 <__aeabi_dmul>
 8007b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b98:	f7f8 ffb4 	bl	8000b04 <__aeabi_dcmpge>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f000 8157 	beq.w	8007e50 <_dtoa_r+0x938>
 8007ba2:	2400      	movs	r4, #0
 8007ba4:	4625      	mov	r5, r4
 8007ba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	4656      	mov	r6, sl
 8007bae:	2700      	movs	r7, #0
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	f000 fafe 	bl	80081b4 <_Bfree>
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	d0dc      	beq.n	8007b76 <_dtoa_r+0x65e>
 8007bbc:	b12f      	cbz	r7, 8007bca <_dtoa_r+0x6b2>
 8007bbe:	42af      	cmp	r7, r5
 8007bc0:	d003      	beq.n	8007bca <_dtoa_r+0x6b2>
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	4658      	mov	r0, fp
 8007bc6:	f000 faf5 	bl	80081b4 <_Bfree>
 8007bca:	4629      	mov	r1, r5
 8007bcc:	4658      	mov	r0, fp
 8007bce:	f000 faf1 	bl	80081b4 <_Bfree>
 8007bd2:	e7d0      	b.n	8007b76 <_dtoa_r+0x65e>
 8007bd4:	9704      	str	r7, [sp, #16]
 8007bd6:	4633      	mov	r3, r6
 8007bd8:	461e      	mov	r6, r3
 8007bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bde:	2a39      	cmp	r2, #57	@ 0x39
 8007be0:	d107      	bne.n	8007bf2 <_dtoa_r+0x6da>
 8007be2:	459a      	cmp	sl, r3
 8007be4:	d1f8      	bne.n	8007bd8 <_dtoa_r+0x6c0>
 8007be6:	9a04      	ldr	r2, [sp, #16]
 8007be8:	3201      	adds	r2, #1
 8007bea:	9204      	str	r2, [sp, #16]
 8007bec:	2230      	movs	r2, #48	@ 0x30
 8007bee:	f88a 2000 	strb.w	r2, [sl]
 8007bf2:	781a      	ldrb	r2, [r3, #0]
 8007bf4:	3201      	adds	r2, #1
 8007bf6:	701a      	strb	r2, [r3, #0]
 8007bf8:	e7bd      	b.n	8007b76 <_dtoa_r+0x65e>
 8007bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8007de8 <_dtoa_r+0x8d0>)
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f7f8 fcfb 	bl	80005f8 <__aeabi_dmul>
 8007c02:	2200      	movs	r2, #0
 8007c04:	2300      	movs	r3, #0
 8007c06:	4604      	mov	r4, r0
 8007c08:	460d      	mov	r5, r1
 8007c0a:	f7f8 ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	f43f aebb 	beq.w	800798a <_dtoa_r+0x472>
 8007c14:	e6f0      	b.n	80079f8 <_dtoa_r+0x4e0>
 8007c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	f000 80db 	beq.w	8007dd4 <_dtoa_r+0x8bc>
 8007c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c20:	2a01      	cmp	r2, #1
 8007c22:	f300 80bf 	bgt.w	8007da4 <_dtoa_r+0x88c>
 8007c26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007c28:	2a00      	cmp	r2, #0
 8007c2a:	f000 80b7 	beq.w	8007d9c <_dtoa_r+0x884>
 8007c2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007c32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c34:	4646      	mov	r6, r8
 8007c36:	9a08      	ldr	r2, [sp, #32]
 8007c38:	2101      	movs	r1, #1
 8007c3a:	441a      	add	r2, r3
 8007c3c:	4658      	mov	r0, fp
 8007c3e:	4498      	add	r8, r3
 8007c40:	9208      	str	r2, [sp, #32]
 8007c42:	f000 fbb5 	bl	80083b0 <__i2b>
 8007c46:	4605      	mov	r5, r0
 8007c48:	b15e      	cbz	r6, 8007c62 <_dtoa_r+0x74a>
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dd08      	ble.n	8007c62 <_dtoa_r+0x74a>
 8007c50:	42b3      	cmp	r3, r6
 8007c52:	9a08      	ldr	r2, [sp, #32]
 8007c54:	bfa8      	it	ge
 8007c56:	4633      	movge	r3, r6
 8007c58:	eba8 0803 	sub.w	r8, r8, r3
 8007c5c:	1af6      	subs	r6, r6, r3
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	9308      	str	r3, [sp, #32]
 8007c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c64:	b1f3      	cbz	r3, 8007ca4 <_dtoa_r+0x78c>
 8007c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80b7 	beq.w	8007ddc <_dtoa_r+0x8c4>
 8007c6e:	b18c      	cbz	r4, 8007c94 <_dtoa_r+0x77c>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4622      	mov	r2, r4
 8007c74:	4658      	mov	r0, fp
 8007c76:	f000 fc5b 	bl	8008530 <__pow5mult>
 8007c7a:	464a      	mov	r2, r9
 8007c7c:	4601      	mov	r1, r0
 8007c7e:	4605      	mov	r5, r0
 8007c80:	4658      	mov	r0, fp
 8007c82:	f000 fbab 	bl	80083dc <__multiply>
 8007c86:	4649      	mov	r1, r9
 8007c88:	9004      	str	r0, [sp, #16]
 8007c8a:	4658      	mov	r0, fp
 8007c8c:	f000 fa92 	bl	80081b4 <_Bfree>
 8007c90:	9b04      	ldr	r3, [sp, #16]
 8007c92:	4699      	mov	r9, r3
 8007c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c96:	1b1a      	subs	r2, r3, r4
 8007c98:	d004      	beq.n	8007ca4 <_dtoa_r+0x78c>
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4658      	mov	r0, fp
 8007c9e:	f000 fc47 	bl	8008530 <__pow5mult>
 8007ca2:	4681      	mov	r9, r0
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	4658      	mov	r0, fp
 8007ca8:	f000 fb82 	bl	80083b0 <__i2b>
 8007cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cae:	4604      	mov	r4, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 81cf 	beq.w	8008054 <_dtoa_r+0xb3c>
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	4601      	mov	r1, r0
 8007cba:	4658      	mov	r0, fp
 8007cbc:	f000 fc38 	bl	8008530 <__pow5mult>
 8007cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	f300 8095 	bgt.w	8007df4 <_dtoa_r+0x8dc>
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 8087 	bne.w	8007de0 <_dtoa_r+0x8c8>
 8007cd2:	9b03      	ldr	r3, [sp, #12]
 8007cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f040 8089 	bne.w	8007df0 <_dtoa_r+0x8d8>
 8007cde:	9b03      	ldr	r3, [sp, #12]
 8007ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ce4:	0d1b      	lsrs	r3, r3, #20
 8007ce6:	051b      	lsls	r3, r3, #20
 8007ce8:	b12b      	cbz	r3, 8007cf6 <_dtoa_r+0x7de>
 8007cea:	9b08      	ldr	r3, [sp, #32]
 8007cec:	3301      	adds	r3, #1
 8007cee:	9308      	str	r3, [sp, #32]
 8007cf0:	f108 0801 	add.w	r8, r8, #1
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 81b0 	beq.w	8008060 <_dtoa_r+0xb48>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d06:	6918      	ldr	r0, [r3, #16]
 8007d08:	f000 fb06 	bl	8008318 <__hi0bits>
 8007d0c:	f1c0 0020 	rsb	r0, r0, #32
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	4418      	add	r0, r3
 8007d14:	f010 001f 	ands.w	r0, r0, #31
 8007d18:	d077      	beq.n	8007e0a <_dtoa_r+0x8f2>
 8007d1a:	f1c0 0320 	rsb	r3, r0, #32
 8007d1e:	2b04      	cmp	r3, #4
 8007d20:	dd6b      	ble.n	8007dfa <_dtoa_r+0x8e2>
 8007d22:	9b08      	ldr	r3, [sp, #32]
 8007d24:	f1c0 001c 	rsb	r0, r0, #28
 8007d28:	4403      	add	r3, r0
 8007d2a:	4480      	add	r8, r0
 8007d2c:	4406      	add	r6, r0
 8007d2e:	9308      	str	r3, [sp, #32]
 8007d30:	f1b8 0f00 	cmp.w	r8, #0
 8007d34:	dd05      	ble.n	8007d42 <_dtoa_r+0x82a>
 8007d36:	4649      	mov	r1, r9
 8007d38:	4642      	mov	r2, r8
 8007d3a:	4658      	mov	r0, fp
 8007d3c:	f000 fc52 	bl	80085e4 <__lshift>
 8007d40:	4681      	mov	r9, r0
 8007d42:	9b08      	ldr	r3, [sp, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dd05      	ble.n	8007d54 <_dtoa_r+0x83c>
 8007d48:	4621      	mov	r1, r4
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4658      	mov	r0, fp
 8007d4e:	f000 fc49 	bl	80085e4 <__lshift>
 8007d52:	4604      	mov	r4, r0
 8007d54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d059      	beq.n	8007e0e <_dtoa_r+0x8f6>
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	4648      	mov	r0, r9
 8007d5e:	f000 fcad 	bl	80086bc <__mcmp>
 8007d62:	2800      	cmp	r0, #0
 8007d64:	da53      	bge.n	8007e0e <_dtoa_r+0x8f6>
 8007d66:	1e7b      	subs	r3, r7, #1
 8007d68:	9304      	str	r3, [sp, #16]
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	220a      	movs	r2, #10
 8007d70:	4658      	mov	r0, fp
 8007d72:	f000 fa41 	bl	80081f8 <__multadd>
 8007d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d78:	4681      	mov	r9, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8172 	beq.w	8008064 <_dtoa_r+0xb4c>
 8007d80:	2300      	movs	r3, #0
 8007d82:	4629      	mov	r1, r5
 8007d84:	220a      	movs	r2, #10
 8007d86:	4658      	mov	r0, fp
 8007d88:	f000 fa36 	bl	80081f8 <__multadd>
 8007d8c:	9b00      	ldr	r3, [sp, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	4605      	mov	r5, r0
 8007d92:	dc67      	bgt.n	8007e64 <_dtoa_r+0x94c>
 8007d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	dc41      	bgt.n	8007e1e <_dtoa_r+0x906>
 8007d9a:	e063      	b.n	8007e64 <_dtoa_r+0x94c>
 8007d9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007d9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007da2:	e746      	b.n	8007c32 <_dtoa_r+0x71a>
 8007da4:	9b07      	ldr	r3, [sp, #28]
 8007da6:	1e5c      	subs	r4, r3, #1
 8007da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007daa:	42a3      	cmp	r3, r4
 8007dac:	bfbf      	itttt	lt
 8007dae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007db0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007db2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007db4:	1ae3      	sublt	r3, r4, r3
 8007db6:	bfb4      	ite	lt
 8007db8:	18d2      	addlt	r2, r2, r3
 8007dba:	1b1c      	subge	r4, r3, r4
 8007dbc:	9b07      	ldr	r3, [sp, #28]
 8007dbe:	bfbc      	itt	lt
 8007dc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007dc2:	2400      	movlt	r4, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfb5      	itete	lt
 8007dc8:	eba8 0603 	sublt.w	r6, r8, r3
 8007dcc:	9b07      	ldrge	r3, [sp, #28]
 8007dce:	2300      	movlt	r3, #0
 8007dd0:	4646      	movge	r6, r8
 8007dd2:	e730      	b.n	8007c36 <_dtoa_r+0x71e>
 8007dd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007dd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007dd8:	4646      	mov	r6, r8
 8007dda:	e735      	b.n	8007c48 <_dtoa_r+0x730>
 8007ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dde:	e75c      	b.n	8007c9a <_dtoa_r+0x782>
 8007de0:	2300      	movs	r3, #0
 8007de2:	e788      	b.n	8007cf6 <_dtoa_r+0x7de>
 8007de4:	3fe00000 	.word	0x3fe00000
 8007de8:	40240000 	.word	0x40240000
 8007dec:	40140000 	.word	0x40140000
 8007df0:	9b02      	ldr	r3, [sp, #8]
 8007df2:	e780      	b.n	8007cf6 <_dtoa_r+0x7de>
 8007df4:	2300      	movs	r3, #0
 8007df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007df8:	e782      	b.n	8007d00 <_dtoa_r+0x7e8>
 8007dfa:	d099      	beq.n	8007d30 <_dtoa_r+0x818>
 8007dfc:	9a08      	ldr	r2, [sp, #32]
 8007dfe:	331c      	adds	r3, #28
 8007e00:	441a      	add	r2, r3
 8007e02:	4498      	add	r8, r3
 8007e04:	441e      	add	r6, r3
 8007e06:	9208      	str	r2, [sp, #32]
 8007e08:	e792      	b.n	8007d30 <_dtoa_r+0x818>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	e7f6      	b.n	8007dfc <_dtoa_r+0x8e4>
 8007e0e:	9b07      	ldr	r3, [sp, #28]
 8007e10:	9704      	str	r7, [sp, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	dc20      	bgt.n	8007e58 <_dtoa_r+0x940>
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	dd1e      	ble.n	8007e5c <_dtoa_r+0x944>
 8007e1e:	9b00      	ldr	r3, [sp, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f47f aec0 	bne.w	8007ba6 <_dtoa_r+0x68e>
 8007e26:	4621      	mov	r1, r4
 8007e28:	2205      	movs	r2, #5
 8007e2a:	4658      	mov	r0, fp
 8007e2c:	f000 f9e4 	bl	80081f8 <__multadd>
 8007e30:	4601      	mov	r1, r0
 8007e32:	4604      	mov	r4, r0
 8007e34:	4648      	mov	r0, r9
 8007e36:	f000 fc41 	bl	80086bc <__mcmp>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	f77f aeb3 	ble.w	8007ba6 <_dtoa_r+0x68e>
 8007e40:	4656      	mov	r6, sl
 8007e42:	2331      	movs	r3, #49	@ 0x31
 8007e44:	f806 3b01 	strb.w	r3, [r6], #1
 8007e48:	9b04      	ldr	r3, [sp, #16]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	e6ae      	b.n	8007bae <_dtoa_r+0x696>
 8007e50:	9c07      	ldr	r4, [sp, #28]
 8007e52:	9704      	str	r7, [sp, #16]
 8007e54:	4625      	mov	r5, r4
 8007e56:	e7f3      	b.n	8007e40 <_dtoa_r+0x928>
 8007e58:	9b07      	ldr	r3, [sp, #28]
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 8104 	beq.w	800806c <_dtoa_r+0xb54>
 8007e64:	2e00      	cmp	r6, #0
 8007e66:	dd05      	ble.n	8007e74 <_dtoa_r+0x95c>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	4632      	mov	r2, r6
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	f000 fbb9 	bl	80085e4 <__lshift>
 8007e72:	4605      	mov	r5, r0
 8007e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d05a      	beq.n	8007f30 <_dtoa_r+0xa18>
 8007e7a:	6869      	ldr	r1, [r5, #4]
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	f000 f959 	bl	8008134 <_Balloc>
 8007e82:	4606      	mov	r6, r0
 8007e84:	b928      	cbnz	r0, 8007e92 <_dtoa_r+0x97a>
 8007e86:	4b84      	ldr	r3, [pc, #528]	@ (8008098 <_dtoa_r+0xb80>)
 8007e88:	4602      	mov	r2, r0
 8007e8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007e8e:	f7ff bb5a 	b.w	8007546 <_dtoa_r+0x2e>
 8007e92:	692a      	ldr	r2, [r5, #16]
 8007e94:	3202      	adds	r2, #2
 8007e96:	0092      	lsls	r2, r2, #2
 8007e98:	f105 010c 	add.w	r1, r5, #12
 8007e9c:	300c      	adds	r0, #12
 8007e9e:	f001 feb1 	bl	8009c04 <memcpy>
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4631      	mov	r1, r6
 8007ea6:	4658      	mov	r0, fp
 8007ea8:	f000 fb9c 	bl	80085e4 <__lshift>
 8007eac:	f10a 0301 	add.w	r3, sl, #1
 8007eb0:	9307      	str	r3, [sp, #28]
 8007eb2:	9b00      	ldr	r3, [sp, #0]
 8007eb4:	4453      	add	r3, sl
 8007eb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	462f      	mov	r7, r5
 8007ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	4648      	mov	r0, r9
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	f7ff fa9b 	bl	8007408 <quorem>
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	9002      	str	r0, [sp, #8]
 8007ed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007eda:	4648      	mov	r0, r9
 8007edc:	f000 fbee 	bl	80086bc <__mcmp>
 8007ee0:	462a      	mov	r2, r5
 8007ee2:	9008      	str	r0, [sp, #32]
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f000 fc04 	bl	80086f4 <__mdiff>
 8007eec:	68c2      	ldr	r2, [r0, #12]
 8007eee:	4606      	mov	r6, r0
 8007ef0:	bb02      	cbnz	r2, 8007f34 <_dtoa_r+0xa1c>
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4648      	mov	r0, r9
 8007ef6:	f000 fbe1 	bl	80086bc <__mcmp>
 8007efa:	4602      	mov	r2, r0
 8007efc:	4631      	mov	r1, r6
 8007efe:	4658      	mov	r0, fp
 8007f00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f02:	f000 f957 	bl	80081b4 <_Bfree>
 8007f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f0a:	9e07      	ldr	r6, [sp, #28]
 8007f0c:	ea43 0102 	orr.w	r1, r3, r2
 8007f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f12:	4319      	orrs	r1, r3
 8007f14:	d110      	bne.n	8007f38 <_dtoa_r+0xa20>
 8007f16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f1a:	d029      	beq.n	8007f70 <_dtoa_r+0xa58>
 8007f1c:	9b08      	ldr	r3, [sp, #32]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dd02      	ble.n	8007f28 <_dtoa_r+0xa10>
 8007f22:	9b02      	ldr	r3, [sp, #8]
 8007f24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007f28:	9b00      	ldr	r3, [sp, #0]
 8007f2a:	f883 8000 	strb.w	r8, [r3]
 8007f2e:	e63f      	b.n	8007bb0 <_dtoa_r+0x698>
 8007f30:	4628      	mov	r0, r5
 8007f32:	e7bb      	b.n	8007eac <_dtoa_r+0x994>
 8007f34:	2201      	movs	r2, #1
 8007f36:	e7e1      	b.n	8007efc <_dtoa_r+0x9e4>
 8007f38:	9b08      	ldr	r3, [sp, #32]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	db04      	blt.n	8007f48 <_dtoa_r+0xa30>
 8007f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f40:	430b      	orrs	r3, r1
 8007f42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007f44:	430b      	orrs	r3, r1
 8007f46:	d120      	bne.n	8007f8a <_dtoa_r+0xa72>
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	dded      	ble.n	8007f28 <_dtoa_r+0xa10>
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	2201      	movs	r2, #1
 8007f50:	4658      	mov	r0, fp
 8007f52:	f000 fb47 	bl	80085e4 <__lshift>
 8007f56:	4621      	mov	r1, r4
 8007f58:	4681      	mov	r9, r0
 8007f5a:	f000 fbaf 	bl	80086bc <__mcmp>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	dc03      	bgt.n	8007f6a <_dtoa_r+0xa52>
 8007f62:	d1e1      	bne.n	8007f28 <_dtoa_r+0xa10>
 8007f64:	f018 0f01 	tst.w	r8, #1
 8007f68:	d0de      	beq.n	8007f28 <_dtoa_r+0xa10>
 8007f6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f6e:	d1d8      	bne.n	8007f22 <_dtoa_r+0xa0a>
 8007f70:	9a00      	ldr	r2, [sp, #0]
 8007f72:	2339      	movs	r3, #57	@ 0x39
 8007f74:	7013      	strb	r3, [r2, #0]
 8007f76:	4633      	mov	r3, r6
 8007f78:	461e      	mov	r6, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007f80:	2a39      	cmp	r2, #57	@ 0x39
 8007f82:	d052      	beq.n	800802a <_dtoa_r+0xb12>
 8007f84:	3201      	adds	r2, #1
 8007f86:	701a      	strb	r2, [r3, #0]
 8007f88:	e612      	b.n	8007bb0 <_dtoa_r+0x698>
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	dd07      	ble.n	8007f9e <_dtoa_r+0xa86>
 8007f8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007f92:	d0ed      	beq.n	8007f70 <_dtoa_r+0xa58>
 8007f94:	9a00      	ldr	r2, [sp, #0]
 8007f96:	f108 0301 	add.w	r3, r8, #1
 8007f9a:	7013      	strb	r3, [r2, #0]
 8007f9c:	e608      	b.n	8007bb0 <_dtoa_r+0x698>
 8007f9e:	9b07      	ldr	r3, [sp, #28]
 8007fa0:	9a07      	ldr	r2, [sp, #28]
 8007fa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d028      	beq.n	8007ffe <_dtoa_r+0xae6>
 8007fac:	4649      	mov	r1, r9
 8007fae:	2300      	movs	r3, #0
 8007fb0:	220a      	movs	r2, #10
 8007fb2:	4658      	mov	r0, fp
 8007fb4:	f000 f920 	bl	80081f8 <__multadd>
 8007fb8:	42af      	cmp	r7, r5
 8007fba:	4681      	mov	r9, r0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	f04f 020a 	mov.w	r2, #10
 8007fc4:	4639      	mov	r1, r7
 8007fc6:	4658      	mov	r0, fp
 8007fc8:	d107      	bne.n	8007fda <_dtoa_r+0xac2>
 8007fca:	f000 f915 	bl	80081f8 <__multadd>
 8007fce:	4607      	mov	r7, r0
 8007fd0:	4605      	mov	r5, r0
 8007fd2:	9b07      	ldr	r3, [sp, #28]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	9307      	str	r3, [sp, #28]
 8007fd8:	e774      	b.n	8007ec4 <_dtoa_r+0x9ac>
 8007fda:	f000 f90d 	bl	80081f8 <__multadd>
 8007fde:	4629      	mov	r1, r5
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	220a      	movs	r2, #10
 8007fe6:	4658      	mov	r0, fp
 8007fe8:	f000 f906 	bl	80081f8 <__multadd>
 8007fec:	4605      	mov	r5, r0
 8007fee:	e7f0      	b.n	8007fd2 <_dtoa_r+0xaba>
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	bfcc      	ite	gt
 8007ff6:	461e      	movgt	r6, r3
 8007ff8:	2601      	movle	r6, #1
 8007ffa:	4456      	add	r6, sl
 8007ffc:	2700      	movs	r7, #0
 8007ffe:	4649      	mov	r1, r9
 8008000:	2201      	movs	r2, #1
 8008002:	4658      	mov	r0, fp
 8008004:	f000 faee 	bl	80085e4 <__lshift>
 8008008:	4621      	mov	r1, r4
 800800a:	4681      	mov	r9, r0
 800800c:	f000 fb56 	bl	80086bc <__mcmp>
 8008010:	2800      	cmp	r0, #0
 8008012:	dcb0      	bgt.n	8007f76 <_dtoa_r+0xa5e>
 8008014:	d102      	bne.n	800801c <_dtoa_r+0xb04>
 8008016:	f018 0f01 	tst.w	r8, #1
 800801a:	d1ac      	bne.n	8007f76 <_dtoa_r+0xa5e>
 800801c:	4633      	mov	r3, r6
 800801e:	461e      	mov	r6, r3
 8008020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008024:	2a30      	cmp	r2, #48	@ 0x30
 8008026:	d0fa      	beq.n	800801e <_dtoa_r+0xb06>
 8008028:	e5c2      	b.n	8007bb0 <_dtoa_r+0x698>
 800802a:	459a      	cmp	sl, r3
 800802c:	d1a4      	bne.n	8007f78 <_dtoa_r+0xa60>
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	3301      	adds	r3, #1
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	2331      	movs	r3, #49	@ 0x31
 8008036:	f88a 3000 	strb.w	r3, [sl]
 800803a:	e5b9      	b.n	8007bb0 <_dtoa_r+0x698>
 800803c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800803e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800809c <_dtoa_r+0xb84>
 8008042:	b11b      	cbz	r3, 800804c <_dtoa_r+0xb34>
 8008044:	f10a 0308 	add.w	r3, sl, #8
 8008048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	4650      	mov	r0, sl
 800804e:	b019      	add	sp, #100	@ 0x64
 8008050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008056:	2b01      	cmp	r3, #1
 8008058:	f77f ae37 	ble.w	8007cca <_dtoa_r+0x7b2>
 800805c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800805e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008060:	2001      	movs	r0, #1
 8008062:	e655      	b.n	8007d10 <_dtoa_r+0x7f8>
 8008064:	9b00      	ldr	r3, [sp, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f77f aed6 	ble.w	8007e18 <_dtoa_r+0x900>
 800806c:	4656      	mov	r6, sl
 800806e:	4621      	mov	r1, r4
 8008070:	4648      	mov	r0, r9
 8008072:	f7ff f9c9 	bl	8007408 <quorem>
 8008076:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800807a:	f806 8b01 	strb.w	r8, [r6], #1
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	eba6 020a 	sub.w	r2, r6, sl
 8008084:	4293      	cmp	r3, r2
 8008086:	ddb3      	ble.n	8007ff0 <_dtoa_r+0xad8>
 8008088:	4649      	mov	r1, r9
 800808a:	2300      	movs	r3, #0
 800808c:	220a      	movs	r2, #10
 800808e:	4658      	mov	r0, fp
 8008090:	f000 f8b2 	bl	80081f8 <__multadd>
 8008094:	4681      	mov	r9, r0
 8008096:	e7ea      	b.n	800806e <_dtoa_r+0xb56>
 8008098:	0800afed 	.word	0x0800afed
 800809c:	0800af71 	.word	0x0800af71

080080a0 <_free_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4605      	mov	r5, r0
 80080a4:	2900      	cmp	r1, #0
 80080a6:	d041      	beq.n	800812c <_free_r+0x8c>
 80080a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ac:	1f0c      	subs	r4, r1, #4
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	bfb8      	it	lt
 80080b2:	18e4      	addlt	r4, r4, r3
 80080b4:	f7fe f8fc 	bl	80062b0 <__malloc_lock>
 80080b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008130 <_free_r+0x90>)
 80080ba:	6813      	ldr	r3, [r2, #0]
 80080bc:	b933      	cbnz	r3, 80080cc <_free_r+0x2c>
 80080be:	6063      	str	r3, [r4, #4]
 80080c0:	6014      	str	r4, [r2, #0]
 80080c2:	4628      	mov	r0, r5
 80080c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080c8:	f7fe b8f8 	b.w	80062bc <__malloc_unlock>
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	d908      	bls.n	80080e2 <_free_r+0x42>
 80080d0:	6820      	ldr	r0, [r4, #0]
 80080d2:	1821      	adds	r1, r4, r0
 80080d4:	428b      	cmp	r3, r1
 80080d6:	bf01      	itttt	eq
 80080d8:	6819      	ldreq	r1, [r3, #0]
 80080da:	685b      	ldreq	r3, [r3, #4]
 80080dc:	1809      	addeq	r1, r1, r0
 80080de:	6021      	streq	r1, [r4, #0]
 80080e0:	e7ed      	b.n	80080be <_free_r+0x1e>
 80080e2:	461a      	mov	r2, r3
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	b10b      	cbz	r3, 80080ec <_free_r+0x4c>
 80080e8:	42a3      	cmp	r3, r4
 80080ea:	d9fa      	bls.n	80080e2 <_free_r+0x42>
 80080ec:	6811      	ldr	r1, [r2, #0]
 80080ee:	1850      	adds	r0, r2, r1
 80080f0:	42a0      	cmp	r0, r4
 80080f2:	d10b      	bne.n	800810c <_free_r+0x6c>
 80080f4:	6820      	ldr	r0, [r4, #0]
 80080f6:	4401      	add	r1, r0
 80080f8:	1850      	adds	r0, r2, r1
 80080fa:	4283      	cmp	r3, r0
 80080fc:	6011      	str	r1, [r2, #0]
 80080fe:	d1e0      	bne.n	80080c2 <_free_r+0x22>
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	6053      	str	r3, [r2, #4]
 8008106:	4408      	add	r0, r1
 8008108:	6010      	str	r0, [r2, #0]
 800810a:	e7da      	b.n	80080c2 <_free_r+0x22>
 800810c:	d902      	bls.n	8008114 <_free_r+0x74>
 800810e:	230c      	movs	r3, #12
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	e7d6      	b.n	80080c2 <_free_r+0x22>
 8008114:	6820      	ldr	r0, [r4, #0]
 8008116:	1821      	adds	r1, r4, r0
 8008118:	428b      	cmp	r3, r1
 800811a:	bf04      	itt	eq
 800811c:	6819      	ldreq	r1, [r3, #0]
 800811e:	685b      	ldreq	r3, [r3, #4]
 8008120:	6063      	str	r3, [r4, #4]
 8008122:	bf04      	itt	eq
 8008124:	1809      	addeq	r1, r1, r0
 8008126:	6021      	streq	r1, [r4, #0]
 8008128:	6054      	str	r4, [r2, #4]
 800812a:	e7ca      	b.n	80080c2 <_free_r+0x22>
 800812c:	bd38      	pop	{r3, r4, r5, pc}
 800812e:	bf00      	nop
 8008130:	20000768 	.word	0x20000768

08008134 <_Balloc>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	69c6      	ldr	r6, [r0, #28]
 8008138:	4604      	mov	r4, r0
 800813a:	460d      	mov	r5, r1
 800813c:	b976      	cbnz	r6, 800815c <_Balloc+0x28>
 800813e:	2010      	movs	r0, #16
 8008140:	f7fe f804 	bl	800614c <malloc>
 8008144:	4602      	mov	r2, r0
 8008146:	61e0      	str	r0, [r4, #28]
 8008148:	b920      	cbnz	r0, 8008154 <_Balloc+0x20>
 800814a:	4b18      	ldr	r3, [pc, #96]	@ (80081ac <_Balloc+0x78>)
 800814c:	4818      	ldr	r0, [pc, #96]	@ (80081b0 <_Balloc+0x7c>)
 800814e:	216b      	movs	r1, #107	@ 0x6b
 8008150:	f001 fd6e 	bl	8009c30 <__assert_func>
 8008154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008158:	6006      	str	r6, [r0, #0]
 800815a:	60c6      	str	r6, [r0, #12]
 800815c:	69e6      	ldr	r6, [r4, #28]
 800815e:	68f3      	ldr	r3, [r6, #12]
 8008160:	b183      	cbz	r3, 8008184 <_Balloc+0x50>
 8008162:	69e3      	ldr	r3, [r4, #28]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800816a:	b9b8      	cbnz	r0, 800819c <_Balloc+0x68>
 800816c:	2101      	movs	r1, #1
 800816e:	fa01 f605 	lsl.w	r6, r1, r5
 8008172:	1d72      	adds	r2, r6, #5
 8008174:	0092      	lsls	r2, r2, #2
 8008176:	4620      	mov	r0, r4
 8008178:	f001 fd78 	bl	8009c6c <_calloc_r>
 800817c:	b160      	cbz	r0, 8008198 <_Balloc+0x64>
 800817e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008182:	e00e      	b.n	80081a2 <_Balloc+0x6e>
 8008184:	2221      	movs	r2, #33	@ 0x21
 8008186:	2104      	movs	r1, #4
 8008188:	4620      	mov	r0, r4
 800818a:	f001 fd6f 	bl	8009c6c <_calloc_r>
 800818e:	69e3      	ldr	r3, [r4, #28]
 8008190:	60f0      	str	r0, [r6, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e4      	bne.n	8008162 <_Balloc+0x2e>
 8008198:	2000      	movs	r0, #0
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	6802      	ldr	r2, [r0, #0]
 800819e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081a2:	2300      	movs	r3, #0
 80081a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081a8:	e7f7      	b.n	800819a <_Balloc+0x66>
 80081aa:	bf00      	nop
 80081ac:	0800af7e 	.word	0x0800af7e
 80081b0:	0800affe 	.word	0x0800affe

080081b4 <_Bfree>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	69c6      	ldr	r6, [r0, #28]
 80081b8:	4605      	mov	r5, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b976      	cbnz	r6, 80081dc <_Bfree+0x28>
 80081be:	2010      	movs	r0, #16
 80081c0:	f7fd ffc4 	bl	800614c <malloc>
 80081c4:	4602      	mov	r2, r0
 80081c6:	61e8      	str	r0, [r5, #28]
 80081c8:	b920      	cbnz	r0, 80081d4 <_Bfree+0x20>
 80081ca:	4b09      	ldr	r3, [pc, #36]	@ (80081f0 <_Bfree+0x3c>)
 80081cc:	4809      	ldr	r0, [pc, #36]	@ (80081f4 <_Bfree+0x40>)
 80081ce:	218f      	movs	r1, #143	@ 0x8f
 80081d0:	f001 fd2e 	bl	8009c30 <__assert_func>
 80081d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d8:	6006      	str	r6, [r0, #0]
 80081da:	60c6      	str	r6, [r0, #12]
 80081dc:	b13c      	cbz	r4, 80081ee <_Bfree+0x3a>
 80081de:	69eb      	ldr	r3, [r5, #28]
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081e8:	6021      	str	r1, [r4, #0]
 80081ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	0800af7e 	.word	0x0800af7e
 80081f4:	0800affe 	.word	0x0800affe

080081f8 <__multadd>:
 80081f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fc:	690d      	ldr	r5, [r1, #16]
 80081fe:	4607      	mov	r7, r0
 8008200:	460c      	mov	r4, r1
 8008202:	461e      	mov	r6, r3
 8008204:	f101 0c14 	add.w	ip, r1, #20
 8008208:	2000      	movs	r0, #0
 800820a:	f8dc 3000 	ldr.w	r3, [ip]
 800820e:	b299      	uxth	r1, r3
 8008210:	fb02 6101 	mla	r1, r2, r1, r6
 8008214:	0c1e      	lsrs	r6, r3, #16
 8008216:	0c0b      	lsrs	r3, r1, #16
 8008218:	fb02 3306 	mla	r3, r2, r6, r3
 800821c:	b289      	uxth	r1, r1
 800821e:	3001      	adds	r0, #1
 8008220:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008224:	4285      	cmp	r5, r0
 8008226:	f84c 1b04 	str.w	r1, [ip], #4
 800822a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800822e:	dcec      	bgt.n	800820a <__multadd+0x12>
 8008230:	b30e      	cbz	r6, 8008276 <__multadd+0x7e>
 8008232:	68a3      	ldr	r3, [r4, #8]
 8008234:	42ab      	cmp	r3, r5
 8008236:	dc19      	bgt.n	800826c <__multadd+0x74>
 8008238:	6861      	ldr	r1, [r4, #4]
 800823a:	4638      	mov	r0, r7
 800823c:	3101      	adds	r1, #1
 800823e:	f7ff ff79 	bl	8008134 <_Balloc>
 8008242:	4680      	mov	r8, r0
 8008244:	b928      	cbnz	r0, 8008252 <__multadd+0x5a>
 8008246:	4602      	mov	r2, r0
 8008248:	4b0c      	ldr	r3, [pc, #48]	@ (800827c <__multadd+0x84>)
 800824a:	480d      	ldr	r0, [pc, #52]	@ (8008280 <__multadd+0x88>)
 800824c:	21ba      	movs	r1, #186	@ 0xba
 800824e:	f001 fcef 	bl	8009c30 <__assert_func>
 8008252:	6922      	ldr	r2, [r4, #16]
 8008254:	3202      	adds	r2, #2
 8008256:	f104 010c 	add.w	r1, r4, #12
 800825a:	0092      	lsls	r2, r2, #2
 800825c:	300c      	adds	r0, #12
 800825e:	f001 fcd1 	bl	8009c04 <memcpy>
 8008262:	4621      	mov	r1, r4
 8008264:	4638      	mov	r0, r7
 8008266:	f7ff ffa5 	bl	80081b4 <_Bfree>
 800826a:	4644      	mov	r4, r8
 800826c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008270:	3501      	adds	r5, #1
 8008272:	615e      	str	r6, [r3, #20]
 8008274:	6125      	str	r5, [r4, #16]
 8008276:	4620      	mov	r0, r4
 8008278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800827c:	0800afed 	.word	0x0800afed
 8008280:	0800affe 	.word	0x0800affe

08008284 <__s2b>:
 8008284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008288:	460c      	mov	r4, r1
 800828a:	4615      	mov	r5, r2
 800828c:	461f      	mov	r7, r3
 800828e:	2209      	movs	r2, #9
 8008290:	3308      	adds	r3, #8
 8008292:	4606      	mov	r6, r0
 8008294:	fb93 f3f2 	sdiv	r3, r3, r2
 8008298:	2100      	movs	r1, #0
 800829a:	2201      	movs	r2, #1
 800829c:	429a      	cmp	r2, r3
 800829e:	db09      	blt.n	80082b4 <__s2b+0x30>
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7ff ff47 	bl	8008134 <_Balloc>
 80082a6:	b940      	cbnz	r0, 80082ba <__s2b+0x36>
 80082a8:	4602      	mov	r2, r0
 80082aa:	4b19      	ldr	r3, [pc, #100]	@ (8008310 <__s2b+0x8c>)
 80082ac:	4819      	ldr	r0, [pc, #100]	@ (8008314 <__s2b+0x90>)
 80082ae:	21d3      	movs	r1, #211	@ 0xd3
 80082b0:	f001 fcbe 	bl	8009c30 <__assert_func>
 80082b4:	0052      	lsls	r2, r2, #1
 80082b6:	3101      	adds	r1, #1
 80082b8:	e7f0      	b.n	800829c <__s2b+0x18>
 80082ba:	9b08      	ldr	r3, [sp, #32]
 80082bc:	6143      	str	r3, [r0, #20]
 80082be:	2d09      	cmp	r5, #9
 80082c0:	f04f 0301 	mov.w	r3, #1
 80082c4:	6103      	str	r3, [r0, #16]
 80082c6:	dd16      	ble.n	80082f6 <__s2b+0x72>
 80082c8:	f104 0909 	add.w	r9, r4, #9
 80082cc:	46c8      	mov	r8, r9
 80082ce:	442c      	add	r4, r5
 80082d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80082d4:	4601      	mov	r1, r0
 80082d6:	3b30      	subs	r3, #48	@ 0x30
 80082d8:	220a      	movs	r2, #10
 80082da:	4630      	mov	r0, r6
 80082dc:	f7ff ff8c 	bl	80081f8 <__multadd>
 80082e0:	45a0      	cmp	r8, r4
 80082e2:	d1f5      	bne.n	80082d0 <__s2b+0x4c>
 80082e4:	f1a5 0408 	sub.w	r4, r5, #8
 80082e8:	444c      	add	r4, r9
 80082ea:	1b2d      	subs	r5, r5, r4
 80082ec:	1963      	adds	r3, r4, r5
 80082ee:	42bb      	cmp	r3, r7
 80082f0:	db04      	blt.n	80082fc <__s2b+0x78>
 80082f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f6:	340a      	adds	r4, #10
 80082f8:	2509      	movs	r5, #9
 80082fa:	e7f6      	b.n	80082ea <__s2b+0x66>
 80082fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008300:	4601      	mov	r1, r0
 8008302:	3b30      	subs	r3, #48	@ 0x30
 8008304:	220a      	movs	r2, #10
 8008306:	4630      	mov	r0, r6
 8008308:	f7ff ff76 	bl	80081f8 <__multadd>
 800830c:	e7ee      	b.n	80082ec <__s2b+0x68>
 800830e:	bf00      	nop
 8008310:	0800afed 	.word	0x0800afed
 8008314:	0800affe 	.word	0x0800affe

08008318 <__hi0bits>:
 8008318:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800831c:	4603      	mov	r3, r0
 800831e:	bf36      	itet	cc
 8008320:	0403      	lslcc	r3, r0, #16
 8008322:	2000      	movcs	r0, #0
 8008324:	2010      	movcc	r0, #16
 8008326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800832a:	bf3c      	itt	cc
 800832c:	021b      	lslcc	r3, r3, #8
 800832e:	3008      	addcc	r0, #8
 8008330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008334:	bf3c      	itt	cc
 8008336:	011b      	lslcc	r3, r3, #4
 8008338:	3004      	addcc	r0, #4
 800833a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800833e:	bf3c      	itt	cc
 8008340:	009b      	lslcc	r3, r3, #2
 8008342:	3002      	addcc	r0, #2
 8008344:	2b00      	cmp	r3, #0
 8008346:	db05      	blt.n	8008354 <__hi0bits+0x3c>
 8008348:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800834c:	f100 0001 	add.w	r0, r0, #1
 8008350:	bf08      	it	eq
 8008352:	2020      	moveq	r0, #32
 8008354:	4770      	bx	lr

08008356 <__lo0bits>:
 8008356:	6803      	ldr	r3, [r0, #0]
 8008358:	4602      	mov	r2, r0
 800835a:	f013 0007 	ands.w	r0, r3, #7
 800835e:	d00b      	beq.n	8008378 <__lo0bits+0x22>
 8008360:	07d9      	lsls	r1, r3, #31
 8008362:	d421      	bmi.n	80083a8 <__lo0bits+0x52>
 8008364:	0798      	lsls	r0, r3, #30
 8008366:	bf49      	itett	mi
 8008368:	085b      	lsrmi	r3, r3, #1
 800836a:	089b      	lsrpl	r3, r3, #2
 800836c:	2001      	movmi	r0, #1
 800836e:	6013      	strmi	r3, [r2, #0]
 8008370:	bf5c      	itt	pl
 8008372:	6013      	strpl	r3, [r2, #0]
 8008374:	2002      	movpl	r0, #2
 8008376:	4770      	bx	lr
 8008378:	b299      	uxth	r1, r3
 800837a:	b909      	cbnz	r1, 8008380 <__lo0bits+0x2a>
 800837c:	0c1b      	lsrs	r3, r3, #16
 800837e:	2010      	movs	r0, #16
 8008380:	b2d9      	uxtb	r1, r3
 8008382:	b909      	cbnz	r1, 8008388 <__lo0bits+0x32>
 8008384:	3008      	adds	r0, #8
 8008386:	0a1b      	lsrs	r3, r3, #8
 8008388:	0719      	lsls	r1, r3, #28
 800838a:	bf04      	itt	eq
 800838c:	091b      	lsreq	r3, r3, #4
 800838e:	3004      	addeq	r0, #4
 8008390:	0799      	lsls	r1, r3, #30
 8008392:	bf04      	itt	eq
 8008394:	089b      	lsreq	r3, r3, #2
 8008396:	3002      	addeq	r0, #2
 8008398:	07d9      	lsls	r1, r3, #31
 800839a:	d403      	bmi.n	80083a4 <__lo0bits+0x4e>
 800839c:	085b      	lsrs	r3, r3, #1
 800839e:	f100 0001 	add.w	r0, r0, #1
 80083a2:	d003      	beq.n	80083ac <__lo0bits+0x56>
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	4770      	bx	lr
 80083a8:	2000      	movs	r0, #0
 80083aa:	4770      	bx	lr
 80083ac:	2020      	movs	r0, #32
 80083ae:	4770      	bx	lr

080083b0 <__i2b>:
 80083b0:	b510      	push	{r4, lr}
 80083b2:	460c      	mov	r4, r1
 80083b4:	2101      	movs	r1, #1
 80083b6:	f7ff febd 	bl	8008134 <_Balloc>
 80083ba:	4602      	mov	r2, r0
 80083bc:	b928      	cbnz	r0, 80083ca <__i2b+0x1a>
 80083be:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <__i2b+0x24>)
 80083c0:	4805      	ldr	r0, [pc, #20]	@ (80083d8 <__i2b+0x28>)
 80083c2:	f240 1145 	movw	r1, #325	@ 0x145
 80083c6:	f001 fc33 	bl	8009c30 <__assert_func>
 80083ca:	2301      	movs	r3, #1
 80083cc:	6144      	str	r4, [r0, #20]
 80083ce:	6103      	str	r3, [r0, #16]
 80083d0:	bd10      	pop	{r4, pc}
 80083d2:	bf00      	nop
 80083d4:	0800afed 	.word	0x0800afed
 80083d8:	0800affe 	.word	0x0800affe

080083dc <__multiply>:
 80083dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e0:	4614      	mov	r4, r2
 80083e2:	690a      	ldr	r2, [r1, #16]
 80083e4:	6923      	ldr	r3, [r4, #16]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	bfa8      	it	ge
 80083ea:	4623      	movge	r3, r4
 80083ec:	460f      	mov	r7, r1
 80083ee:	bfa4      	itt	ge
 80083f0:	460c      	movge	r4, r1
 80083f2:	461f      	movge	r7, r3
 80083f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80083f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80083fc:	68a3      	ldr	r3, [r4, #8]
 80083fe:	6861      	ldr	r1, [r4, #4]
 8008400:	eb0a 0609 	add.w	r6, sl, r9
 8008404:	42b3      	cmp	r3, r6
 8008406:	b085      	sub	sp, #20
 8008408:	bfb8      	it	lt
 800840a:	3101      	addlt	r1, #1
 800840c:	f7ff fe92 	bl	8008134 <_Balloc>
 8008410:	b930      	cbnz	r0, 8008420 <__multiply+0x44>
 8008412:	4602      	mov	r2, r0
 8008414:	4b44      	ldr	r3, [pc, #272]	@ (8008528 <__multiply+0x14c>)
 8008416:	4845      	ldr	r0, [pc, #276]	@ (800852c <__multiply+0x150>)
 8008418:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800841c:	f001 fc08 	bl	8009c30 <__assert_func>
 8008420:	f100 0514 	add.w	r5, r0, #20
 8008424:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008428:	462b      	mov	r3, r5
 800842a:	2200      	movs	r2, #0
 800842c:	4543      	cmp	r3, r8
 800842e:	d321      	bcc.n	8008474 <__multiply+0x98>
 8008430:	f107 0114 	add.w	r1, r7, #20
 8008434:	f104 0214 	add.w	r2, r4, #20
 8008438:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800843c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008440:	9302      	str	r3, [sp, #8]
 8008442:	1b13      	subs	r3, r2, r4
 8008444:	3b15      	subs	r3, #21
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	3304      	adds	r3, #4
 800844c:	f104 0715 	add.w	r7, r4, #21
 8008450:	42ba      	cmp	r2, r7
 8008452:	bf38      	it	cc
 8008454:	2304      	movcc	r3, #4
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	9b02      	ldr	r3, [sp, #8]
 800845a:	9103      	str	r1, [sp, #12]
 800845c:	428b      	cmp	r3, r1
 800845e:	d80c      	bhi.n	800847a <__multiply+0x9e>
 8008460:	2e00      	cmp	r6, #0
 8008462:	dd03      	ble.n	800846c <__multiply+0x90>
 8008464:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008468:	2b00      	cmp	r3, #0
 800846a:	d05b      	beq.n	8008524 <__multiply+0x148>
 800846c:	6106      	str	r6, [r0, #16]
 800846e:	b005      	add	sp, #20
 8008470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008474:	f843 2b04 	str.w	r2, [r3], #4
 8008478:	e7d8      	b.n	800842c <__multiply+0x50>
 800847a:	f8b1 a000 	ldrh.w	sl, [r1]
 800847e:	f1ba 0f00 	cmp.w	sl, #0
 8008482:	d024      	beq.n	80084ce <__multiply+0xf2>
 8008484:	f104 0e14 	add.w	lr, r4, #20
 8008488:	46a9      	mov	r9, r5
 800848a:	f04f 0c00 	mov.w	ip, #0
 800848e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008492:	f8d9 3000 	ldr.w	r3, [r9]
 8008496:	fa1f fb87 	uxth.w	fp, r7
 800849a:	b29b      	uxth	r3, r3
 800849c:	fb0a 330b 	mla	r3, sl, fp, r3
 80084a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80084a4:	f8d9 7000 	ldr.w	r7, [r9]
 80084a8:	4463      	add	r3, ip
 80084aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80084b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80084bc:	4572      	cmp	r2, lr
 80084be:	f849 3b04 	str.w	r3, [r9], #4
 80084c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084c6:	d8e2      	bhi.n	800848e <__multiply+0xb2>
 80084c8:	9b01      	ldr	r3, [sp, #4]
 80084ca:	f845 c003 	str.w	ip, [r5, r3]
 80084ce:	9b03      	ldr	r3, [sp, #12]
 80084d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80084d4:	3104      	adds	r1, #4
 80084d6:	f1b9 0f00 	cmp.w	r9, #0
 80084da:	d021      	beq.n	8008520 <__multiply+0x144>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	f104 0c14 	add.w	ip, r4, #20
 80084e2:	46ae      	mov	lr, r5
 80084e4:	f04f 0a00 	mov.w	sl, #0
 80084e8:	f8bc b000 	ldrh.w	fp, [ip]
 80084ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80084f0:	fb09 770b 	mla	r7, r9, fp, r7
 80084f4:	4457      	add	r7, sl
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80084fc:	f84e 3b04 	str.w	r3, [lr], #4
 8008500:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008504:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008508:	f8be 3000 	ldrh.w	r3, [lr]
 800850c:	fb09 330a 	mla	r3, r9, sl, r3
 8008510:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008514:	4562      	cmp	r2, ip
 8008516:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800851a:	d8e5      	bhi.n	80084e8 <__multiply+0x10c>
 800851c:	9f01      	ldr	r7, [sp, #4]
 800851e:	51eb      	str	r3, [r5, r7]
 8008520:	3504      	adds	r5, #4
 8008522:	e799      	b.n	8008458 <__multiply+0x7c>
 8008524:	3e01      	subs	r6, #1
 8008526:	e79b      	b.n	8008460 <__multiply+0x84>
 8008528:	0800afed 	.word	0x0800afed
 800852c:	0800affe 	.word	0x0800affe

08008530 <__pow5mult>:
 8008530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008534:	4615      	mov	r5, r2
 8008536:	f012 0203 	ands.w	r2, r2, #3
 800853a:	4607      	mov	r7, r0
 800853c:	460e      	mov	r6, r1
 800853e:	d007      	beq.n	8008550 <__pow5mult+0x20>
 8008540:	4c25      	ldr	r4, [pc, #148]	@ (80085d8 <__pow5mult+0xa8>)
 8008542:	3a01      	subs	r2, #1
 8008544:	2300      	movs	r3, #0
 8008546:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800854a:	f7ff fe55 	bl	80081f8 <__multadd>
 800854e:	4606      	mov	r6, r0
 8008550:	10ad      	asrs	r5, r5, #2
 8008552:	d03d      	beq.n	80085d0 <__pow5mult+0xa0>
 8008554:	69fc      	ldr	r4, [r7, #28]
 8008556:	b97c      	cbnz	r4, 8008578 <__pow5mult+0x48>
 8008558:	2010      	movs	r0, #16
 800855a:	f7fd fdf7 	bl	800614c <malloc>
 800855e:	4602      	mov	r2, r0
 8008560:	61f8      	str	r0, [r7, #28]
 8008562:	b928      	cbnz	r0, 8008570 <__pow5mult+0x40>
 8008564:	4b1d      	ldr	r3, [pc, #116]	@ (80085dc <__pow5mult+0xac>)
 8008566:	481e      	ldr	r0, [pc, #120]	@ (80085e0 <__pow5mult+0xb0>)
 8008568:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800856c:	f001 fb60 	bl	8009c30 <__assert_func>
 8008570:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008574:	6004      	str	r4, [r0, #0]
 8008576:	60c4      	str	r4, [r0, #12]
 8008578:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800857c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008580:	b94c      	cbnz	r4, 8008596 <__pow5mult+0x66>
 8008582:	f240 2171 	movw	r1, #625	@ 0x271
 8008586:	4638      	mov	r0, r7
 8008588:	f7ff ff12 	bl	80083b0 <__i2b>
 800858c:	2300      	movs	r3, #0
 800858e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008592:	4604      	mov	r4, r0
 8008594:	6003      	str	r3, [r0, #0]
 8008596:	f04f 0900 	mov.w	r9, #0
 800859a:	07eb      	lsls	r3, r5, #31
 800859c:	d50a      	bpl.n	80085b4 <__pow5mult+0x84>
 800859e:	4631      	mov	r1, r6
 80085a0:	4622      	mov	r2, r4
 80085a2:	4638      	mov	r0, r7
 80085a4:	f7ff ff1a 	bl	80083dc <__multiply>
 80085a8:	4631      	mov	r1, r6
 80085aa:	4680      	mov	r8, r0
 80085ac:	4638      	mov	r0, r7
 80085ae:	f7ff fe01 	bl	80081b4 <_Bfree>
 80085b2:	4646      	mov	r6, r8
 80085b4:	106d      	asrs	r5, r5, #1
 80085b6:	d00b      	beq.n	80085d0 <__pow5mult+0xa0>
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	b938      	cbnz	r0, 80085cc <__pow5mult+0x9c>
 80085bc:	4622      	mov	r2, r4
 80085be:	4621      	mov	r1, r4
 80085c0:	4638      	mov	r0, r7
 80085c2:	f7ff ff0b 	bl	80083dc <__multiply>
 80085c6:	6020      	str	r0, [r4, #0]
 80085c8:	f8c0 9000 	str.w	r9, [r0]
 80085cc:	4604      	mov	r4, r0
 80085ce:	e7e4      	b.n	800859a <__pow5mult+0x6a>
 80085d0:	4630      	mov	r0, r6
 80085d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085d6:	bf00      	nop
 80085d8:	0800b058 	.word	0x0800b058
 80085dc:	0800af7e 	.word	0x0800af7e
 80085e0:	0800affe 	.word	0x0800affe

080085e4 <__lshift>:
 80085e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e8:	460c      	mov	r4, r1
 80085ea:	6849      	ldr	r1, [r1, #4]
 80085ec:	6923      	ldr	r3, [r4, #16]
 80085ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085f2:	68a3      	ldr	r3, [r4, #8]
 80085f4:	4607      	mov	r7, r0
 80085f6:	4691      	mov	r9, r2
 80085f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085fc:	f108 0601 	add.w	r6, r8, #1
 8008600:	42b3      	cmp	r3, r6
 8008602:	db0b      	blt.n	800861c <__lshift+0x38>
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff fd95 	bl	8008134 <_Balloc>
 800860a:	4605      	mov	r5, r0
 800860c:	b948      	cbnz	r0, 8008622 <__lshift+0x3e>
 800860e:	4602      	mov	r2, r0
 8008610:	4b28      	ldr	r3, [pc, #160]	@ (80086b4 <__lshift+0xd0>)
 8008612:	4829      	ldr	r0, [pc, #164]	@ (80086b8 <__lshift+0xd4>)
 8008614:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008618:	f001 fb0a 	bl	8009c30 <__assert_func>
 800861c:	3101      	adds	r1, #1
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	e7ee      	b.n	8008600 <__lshift+0x1c>
 8008622:	2300      	movs	r3, #0
 8008624:	f100 0114 	add.w	r1, r0, #20
 8008628:	f100 0210 	add.w	r2, r0, #16
 800862c:	4618      	mov	r0, r3
 800862e:	4553      	cmp	r3, sl
 8008630:	db33      	blt.n	800869a <__lshift+0xb6>
 8008632:	6920      	ldr	r0, [r4, #16]
 8008634:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008638:	f104 0314 	add.w	r3, r4, #20
 800863c:	f019 091f 	ands.w	r9, r9, #31
 8008640:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008644:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008648:	d02b      	beq.n	80086a2 <__lshift+0xbe>
 800864a:	f1c9 0e20 	rsb	lr, r9, #32
 800864e:	468a      	mov	sl, r1
 8008650:	2200      	movs	r2, #0
 8008652:	6818      	ldr	r0, [r3, #0]
 8008654:	fa00 f009 	lsl.w	r0, r0, r9
 8008658:	4310      	orrs	r0, r2
 800865a:	f84a 0b04 	str.w	r0, [sl], #4
 800865e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008662:	459c      	cmp	ip, r3
 8008664:	fa22 f20e 	lsr.w	r2, r2, lr
 8008668:	d8f3      	bhi.n	8008652 <__lshift+0x6e>
 800866a:	ebac 0304 	sub.w	r3, ip, r4
 800866e:	3b15      	subs	r3, #21
 8008670:	f023 0303 	bic.w	r3, r3, #3
 8008674:	3304      	adds	r3, #4
 8008676:	f104 0015 	add.w	r0, r4, #21
 800867a:	4584      	cmp	ip, r0
 800867c:	bf38      	it	cc
 800867e:	2304      	movcc	r3, #4
 8008680:	50ca      	str	r2, [r1, r3]
 8008682:	b10a      	cbz	r2, 8008688 <__lshift+0xa4>
 8008684:	f108 0602 	add.w	r6, r8, #2
 8008688:	3e01      	subs	r6, #1
 800868a:	4638      	mov	r0, r7
 800868c:	612e      	str	r6, [r5, #16]
 800868e:	4621      	mov	r1, r4
 8008690:	f7ff fd90 	bl	80081b4 <_Bfree>
 8008694:	4628      	mov	r0, r5
 8008696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800869a:	f842 0f04 	str.w	r0, [r2, #4]!
 800869e:	3301      	adds	r3, #1
 80086a0:	e7c5      	b.n	800862e <__lshift+0x4a>
 80086a2:	3904      	subs	r1, #4
 80086a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80086ac:	459c      	cmp	ip, r3
 80086ae:	d8f9      	bhi.n	80086a4 <__lshift+0xc0>
 80086b0:	e7ea      	b.n	8008688 <__lshift+0xa4>
 80086b2:	bf00      	nop
 80086b4:	0800afed 	.word	0x0800afed
 80086b8:	0800affe 	.word	0x0800affe

080086bc <__mcmp>:
 80086bc:	690a      	ldr	r2, [r1, #16]
 80086be:	4603      	mov	r3, r0
 80086c0:	6900      	ldr	r0, [r0, #16]
 80086c2:	1a80      	subs	r0, r0, r2
 80086c4:	b530      	push	{r4, r5, lr}
 80086c6:	d10e      	bne.n	80086e6 <__mcmp+0x2a>
 80086c8:	3314      	adds	r3, #20
 80086ca:	3114      	adds	r1, #20
 80086cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086dc:	4295      	cmp	r5, r2
 80086de:	d003      	beq.n	80086e8 <__mcmp+0x2c>
 80086e0:	d205      	bcs.n	80086ee <__mcmp+0x32>
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	bd30      	pop	{r4, r5, pc}
 80086e8:	42a3      	cmp	r3, r4
 80086ea:	d3f3      	bcc.n	80086d4 <__mcmp+0x18>
 80086ec:	e7fb      	b.n	80086e6 <__mcmp+0x2a>
 80086ee:	2001      	movs	r0, #1
 80086f0:	e7f9      	b.n	80086e6 <__mcmp+0x2a>
	...

080086f4 <__mdiff>:
 80086f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	4689      	mov	r9, r1
 80086fa:	4606      	mov	r6, r0
 80086fc:	4611      	mov	r1, r2
 80086fe:	4648      	mov	r0, r9
 8008700:	4614      	mov	r4, r2
 8008702:	f7ff ffdb 	bl	80086bc <__mcmp>
 8008706:	1e05      	subs	r5, r0, #0
 8008708:	d112      	bne.n	8008730 <__mdiff+0x3c>
 800870a:	4629      	mov	r1, r5
 800870c:	4630      	mov	r0, r6
 800870e:	f7ff fd11 	bl	8008134 <_Balloc>
 8008712:	4602      	mov	r2, r0
 8008714:	b928      	cbnz	r0, 8008722 <__mdiff+0x2e>
 8008716:	4b3f      	ldr	r3, [pc, #252]	@ (8008814 <__mdiff+0x120>)
 8008718:	f240 2137 	movw	r1, #567	@ 0x237
 800871c:	483e      	ldr	r0, [pc, #248]	@ (8008818 <__mdiff+0x124>)
 800871e:	f001 fa87 	bl	8009c30 <__assert_func>
 8008722:	2301      	movs	r3, #1
 8008724:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008728:	4610      	mov	r0, r2
 800872a:	b003      	add	sp, #12
 800872c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008730:	bfbc      	itt	lt
 8008732:	464b      	movlt	r3, r9
 8008734:	46a1      	movlt	r9, r4
 8008736:	4630      	mov	r0, r6
 8008738:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800873c:	bfba      	itte	lt
 800873e:	461c      	movlt	r4, r3
 8008740:	2501      	movlt	r5, #1
 8008742:	2500      	movge	r5, #0
 8008744:	f7ff fcf6 	bl	8008134 <_Balloc>
 8008748:	4602      	mov	r2, r0
 800874a:	b918      	cbnz	r0, 8008754 <__mdiff+0x60>
 800874c:	4b31      	ldr	r3, [pc, #196]	@ (8008814 <__mdiff+0x120>)
 800874e:	f240 2145 	movw	r1, #581	@ 0x245
 8008752:	e7e3      	b.n	800871c <__mdiff+0x28>
 8008754:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008758:	6926      	ldr	r6, [r4, #16]
 800875a:	60c5      	str	r5, [r0, #12]
 800875c:	f109 0310 	add.w	r3, r9, #16
 8008760:	f109 0514 	add.w	r5, r9, #20
 8008764:	f104 0e14 	add.w	lr, r4, #20
 8008768:	f100 0b14 	add.w	fp, r0, #20
 800876c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008770:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008774:	9301      	str	r3, [sp, #4]
 8008776:	46d9      	mov	r9, fp
 8008778:	f04f 0c00 	mov.w	ip, #0
 800877c:	9b01      	ldr	r3, [sp, #4]
 800877e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008782:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008786:	9301      	str	r3, [sp, #4]
 8008788:	fa1f f38a 	uxth.w	r3, sl
 800878c:	4619      	mov	r1, r3
 800878e:	b283      	uxth	r3, r0
 8008790:	1acb      	subs	r3, r1, r3
 8008792:	0c00      	lsrs	r0, r0, #16
 8008794:	4463      	add	r3, ip
 8008796:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800879a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800879e:	b29b      	uxth	r3, r3
 80087a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087a4:	4576      	cmp	r6, lr
 80087a6:	f849 3b04 	str.w	r3, [r9], #4
 80087aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087ae:	d8e5      	bhi.n	800877c <__mdiff+0x88>
 80087b0:	1b33      	subs	r3, r6, r4
 80087b2:	3b15      	subs	r3, #21
 80087b4:	f023 0303 	bic.w	r3, r3, #3
 80087b8:	3415      	adds	r4, #21
 80087ba:	3304      	adds	r3, #4
 80087bc:	42a6      	cmp	r6, r4
 80087be:	bf38      	it	cc
 80087c0:	2304      	movcc	r3, #4
 80087c2:	441d      	add	r5, r3
 80087c4:	445b      	add	r3, fp
 80087c6:	461e      	mov	r6, r3
 80087c8:	462c      	mov	r4, r5
 80087ca:	4544      	cmp	r4, r8
 80087cc:	d30e      	bcc.n	80087ec <__mdiff+0xf8>
 80087ce:	f108 0103 	add.w	r1, r8, #3
 80087d2:	1b49      	subs	r1, r1, r5
 80087d4:	f021 0103 	bic.w	r1, r1, #3
 80087d8:	3d03      	subs	r5, #3
 80087da:	45a8      	cmp	r8, r5
 80087dc:	bf38      	it	cc
 80087de:	2100      	movcc	r1, #0
 80087e0:	440b      	add	r3, r1
 80087e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087e6:	b191      	cbz	r1, 800880e <__mdiff+0x11a>
 80087e8:	6117      	str	r7, [r2, #16]
 80087ea:	e79d      	b.n	8008728 <__mdiff+0x34>
 80087ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80087f0:	46e6      	mov	lr, ip
 80087f2:	0c08      	lsrs	r0, r1, #16
 80087f4:	fa1c fc81 	uxtah	ip, ip, r1
 80087f8:	4471      	add	r1, lr
 80087fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80087fe:	b289      	uxth	r1, r1
 8008800:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008804:	f846 1b04 	str.w	r1, [r6], #4
 8008808:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800880c:	e7dd      	b.n	80087ca <__mdiff+0xd6>
 800880e:	3f01      	subs	r7, #1
 8008810:	e7e7      	b.n	80087e2 <__mdiff+0xee>
 8008812:	bf00      	nop
 8008814:	0800afed 	.word	0x0800afed
 8008818:	0800affe 	.word	0x0800affe

0800881c <__ulp>:
 800881c:	b082      	sub	sp, #8
 800881e:	ed8d 0b00 	vstr	d0, [sp]
 8008822:	9a01      	ldr	r2, [sp, #4]
 8008824:	4b0f      	ldr	r3, [pc, #60]	@ (8008864 <__ulp+0x48>)
 8008826:	4013      	ands	r3, r2
 8008828:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800882c:	2b00      	cmp	r3, #0
 800882e:	dc08      	bgt.n	8008842 <__ulp+0x26>
 8008830:	425b      	negs	r3, r3
 8008832:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008836:	ea4f 5223 	mov.w	r2, r3, asr #20
 800883a:	da04      	bge.n	8008846 <__ulp+0x2a>
 800883c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008840:	4113      	asrs	r3, r2
 8008842:	2200      	movs	r2, #0
 8008844:	e008      	b.n	8008858 <__ulp+0x3c>
 8008846:	f1a2 0314 	sub.w	r3, r2, #20
 800884a:	2b1e      	cmp	r3, #30
 800884c:	bfda      	itte	le
 800884e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008852:	40da      	lsrle	r2, r3
 8008854:	2201      	movgt	r2, #1
 8008856:	2300      	movs	r3, #0
 8008858:	4619      	mov	r1, r3
 800885a:	4610      	mov	r0, r2
 800885c:	ec41 0b10 	vmov	d0, r0, r1
 8008860:	b002      	add	sp, #8
 8008862:	4770      	bx	lr
 8008864:	7ff00000 	.word	0x7ff00000

08008868 <__b2d>:
 8008868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800886c:	6906      	ldr	r6, [r0, #16]
 800886e:	f100 0814 	add.w	r8, r0, #20
 8008872:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008876:	1f37      	subs	r7, r6, #4
 8008878:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800887c:	4610      	mov	r0, r2
 800887e:	f7ff fd4b 	bl	8008318 <__hi0bits>
 8008882:	f1c0 0320 	rsb	r3, r0, #32
 8008886:	280a      	cmp	r0, #10
 8008888:	600b      	str	r3, [r1, #0]
 800888a:	491b      	ldr	r1, [pc, #108]	@ (80088f8 <__b2d+0x90>)
 800888c:	dc15      	bgt.n	80088ba <__b2d+0x52>
 800888e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008892:	fa22 f30c 	lsr.w	r3, r2, ip
 8008896:	45b8      	cmp	r8, r7
 8008898:	ea43 0501 	orr.w	r5, r3, r1
 800889c:	bf34      	ite	cc
 800889e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088a2:	2300      	movcs	r3, #0
 80088a4:	3015      	adds	r0, #21
 80088a6:	fa02 f000 	lsl.w	r0, r2, r0
 80088aa:	fa23 f30c 	lsr.w	r3, r3, ip
 80088ae:	4303      	orrs	r3, r0
 80088b0:	461c      	mov	r4, r3
 80088b2:	ec45 4b10 	vmov	d0, r4, r5
 80088b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ba:	45b8      	cmp	r8, r7
 80088bc:	bf3a      	itte	cc
 80088be:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088c2:	f1a6 0708 	subcc.w	r7, r6, #8
 80088c6:	2300      	movcs	r3, #0
 80088c8:	380b      	subs	r0, #11
 80088ca:	d012      	beq.n	80088f2 <__b2d+0x8a>
 80088cc:	f1c0 0120 	rsb	r1, r0, #32
 80088d0:	fa23 f401 	lsr.w	r4, r3, r1
 80088d4:	4082      	lsls	r2, r0
 80088d6:	4322      	orrs	r2, r4
 80088d8:	4547      	cmp	r7, r8
 80088da:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80088de:	bf8c      	ite	hi
 80088e0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80088e4:	2200      	movls	r2, #0
 80088e6:	4083      	lsls	r3, r0
 80088e8:	40ca      	lsrs	r2, r1
 80088ea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80088ee:	4313      	orrs	r3, r2
 80088f0:	e7de      	b.n	80088b0 <__b2d+0x48>
 80088f2:	ea42 0501 	orr.w	r5, r2, r1
 80088f6:	e7db      	b.n	80088b0 <__b2d+0x48>
 80088f8:	3ff00000 	.word	0x3ff00000

080088fc <__d2b>:
 80088fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008900:	460f      	mov	r7, r1
 8008902:	2101      	movs	r1, #1
 8008904:	ec59 8b10 	vmov	r8, r9, d0
 8008908:	4616      	mov	r6, r2
 800890a:	f7ff fc13 	bl	8008134 <_Balloc>
 800890e:	4604      	mov	r4, r0
 8008910:	b930      	cbnz	r0, 8008920 <__d2b+0x24>
 8008912:	4602      	mov	r2, r0
 8008914:	4b23      	ldr	r3, [pc, #140]	@ (80089a4 <__d2b+0xa8>)
 8008916:	4824      	ldr	r0, [pc, #144]	@ (80089a8 <__d2b+0xac>)
 8008918:	f240 310f 	movw	r1, #783	@ 0x30f
 800891c:	f001 f988 	bl	8009c30 <__assert_func>
 8008920:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008928:	b10d      	cbz	r5, 800892e <__d2b+0x32>
 800892a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	f1b8 0300 	subs.w	r3, r8, #0
 8008934:	d023      	beq.n	800897e <__d2b+0x82>
 8008936:	4668      	mov	r0, sp
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	f7ff fd0c 	bl	8008356 <__lo0bits>
 800893e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008942:	b1d0      	cbz	r0, 800897a <__d2b+0x7e>
 8008944:	f1c0 0320 	rsb	r3, r0, #32
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	430b      	orrs	r3, r1
 800894e:	40c2      	lsrs	r2, r0
 8008950:	6163      	str	r3, [r4, #20]
 8008952:	9201      	str	r2, [sp, #4]
 8008954:	9b01      	ldr	r3, [sp, #4]
 8008956:	61a3      	str	r3, [r4, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	bf0c      	ite	eq
 800895c:	2201      	moveq	r2, #1
 800895e:	2202      	movne	r2, #2
 8008960:	6122      	str	r2, [r4, #16]
 8008962:	b1a5      	cbz	r5, 800898e <__d2b+0x92>
 8008964:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008968:	4405      	add	r5, r0
 800896a:	603d      	str	r5, [r7, #0]
 800896c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008970:	6030      	str	r0, [r6, #0]
 8008972:	4620      	mov	r0, r4
 8008974:	b003      	add	sp, #12
 8008976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800897a:	6161      	str	r1, [r4, #20]
 800897c:	e7ea      	b.n	8008954 <__d2b+0x58>
 800897e:	a801      	add	r0, sp, #4
 8008980:	f7ff fce9 	bl	8008356 <__lo0bits>
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	6163      	str	r3, [r4, #20]
 8008988:	3020      	adds	r0, #32
 800898a:	2201      	movs	r2, #1
 800898c:	e7e8      	b.n	8008960 <__d2b+0x64>
 800898e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008992:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008996:	6038      	str	r0, [r7, #0]
 8008998:	6918      	ldr	r0, [r3, #16]
 800899a:	f7ff fcbd 	bl	8008318 <__hi0bits>
 800899e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089a2:	e7e5      	b.n	8008970 <__d2b+0x74>
 80089a4:	0800afed 	.word	0x0800afed
 80089a8:	0800affe 	.word	0x0800affe

080089ac <__ratio>:
 80089ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b0:	b085      	sub	sp, #20
 80089b2:	e9cd 1000 	strd	r1, r0, [sp]
 80089b6:	a902      	add	r1, sp, #8
 80089b8:	f7ff ff56 	bl	8008868 <__b2d>
 80089bc:	9800      	ldr	r0, [sp, #0]
 80089be:	a903      	add	r1, sp, #12
 80089c0:	ec55 4b10 	vmov	r4, r5, d0
 80089c4:	f7ff ff50 	bl	8008868 <__b2d>
 80089c8:	9b01      	ldr	r3, [sp, #4]
 80089ca:	6919      	ldr	r1, [r3, #16]
 80089cc:	9b00      	ldr	r3, [sp, #0]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	1ac9      	subs	r1, r1, r3
 80089d2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	ec5b ab10 	vmov	sl, fp, d0
 80089dc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	bfce      	itee	gt
 80089e4:	462a      	movgt	r2, r5
 80089e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089ea:	465a      	movle	r2, fp
 80089ec:	462f      	mov	r7, r5
 80089ee:	46d9      	mov	r9, fp
 80089f0:	bfcc      	ite	gt
 80089f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80089f6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80089fa:	464b      	mov	r3, r9
 80089fc:	4652      	mov	r2, sl
 80089fe:	4620      	mov	r0, r4
 8008a00:	4639      	mov	r1, r7
 8008a02:	f7f7 ff23 	bl	800084c <__aeabi_ddiv>
 8008a06:	ec41 0b10 	vmov	d0, r0, r1
 8008a0a:	b005      	add	sp, #20
 8008a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a10 <__copybits>:
 8008a10:	3901      	subs	r1, #1
 8008a12:	b570      	push	{r4, r5, r6, lr}
 8008a14:	1149      	asrs	r1, r1, #5
 8008a16:	6914      	ldr	r4, [r2, #16]
 8008a18:	3101      	adds	r1, #1
 8008a1a:	f102 0314 	add.w	r3, r2, #20
 8008a1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a26:	1f05      	subs	r5, r0, #4
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	d30c      	bcc.n	8008a46 <__copybits+0x36>
 8008a2c:	1aa3      	subs	r3, r4, r2
 8008a2e:	3b11      	subs	r3, #17
 8008a30:	f023 0303 	bic.w	r3, r3, #3
 8008a34:	3211      	adds	r2, #17
 8008a36:	42a2      	cmp	r2, r4
 8008a38:	bf88      	it	hi
 8008a3a:	2300      	movhi	r3, #0
 8008a3c:	4418      	add	r0, r3
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4288      	cmp	r0, r1
 8008a42:	d305      	bcc.n	8008a50 <__copybits+0x40>
 8008a44:	bd70      	pop	{r4, r5, r6, pc}
 8008a46:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a4e:	e7eb      	b.n	8008a28 <__copybits+0x18>
 8008a50:	f840 3b04 	str.w	r3, [r0], #4
 8008a54:	e7f4      	b.n	8008a40 <__copybits+0x30>

08008a56 <__any_on>:
 8008a56:	f100 0214 	add.w	r2, r0, #20
 8008a5a:	6900      	ldr	r0, [r0, #16]
 8008a5c:	114b      	asrs	r3, r1, #5
 8008a5e:	4298      	cmp	r0, r3
 8008a60:	b510      	push	{r4, lr}
 8008a62:	db11      	blt.n	8008a88 <__any_on+0x32>
 8008a64:	dd0a      	ble.n	8008a7c <__any_on+0x26>
 8008a66:	f011 011f 	ands.w	r1, r1, #31
 8008a6a:	d007      	beq.n	8008a7c <__any_on+0x26>
 8008a6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a70:	fa24 f001 	lsr.w	r0, r4, r1
 8008a74:	fa00 f101 	lsl.w	r1, r0, r1
 8008a78:	428c      	cmp	r4, r1
 8008a7a:	d10b      	bne.n	8008a94 <__any_on+0x3e>
 8008a7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d803      	bhi.n	8008a8c <__any_on+0x36>
 8008a84:	2000      	movs	r0, #0
 8008a86:	bd10      	pop	{r4, pc}
 8008a88:	4603      	mov	r3, r0
 8008a8a:	e7f7      	b.n	8008a7c <__any_on+0x26>
 8008a8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a90:	2900      	cmp	r1, #0
 8008a92:	d0f5      	beq.n	8008a80 <__any_on+0x2a>
 8008a94:	2001      	movs	r0, #1
 8008a96:	e7f6      	b.n	8008a86 <__any_on+0x30>

08008a98 <sulp>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	4604      	mov	r4, r0
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	ec45 4b10 	vmov	d0, r4, r5
 8008aa2:	4616      	mov	r6, r2
 8008aa4:	f7ff feba 	bl	800881c <__ulp>
 8008aa8:	ec51 0b10 	vmov	r0, r1, d0
 8008aac:	b17e      	cbz	r6, 8008ace <sulp+0x36>
 8008aae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ab2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	dd09      	ble.n	8008ace <sulp+0x36>
 8008aba:	051b      	lsls	r3, r3, #20
 8008abc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008ac0:	2400      	movs	r4, #0
 8008ac2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008ac6:	4622      	mov	r2, r4
 8008ac8:	462b      	mov	r3, r5
 8008aca:	f7f7 fd95 	bl	80005f8 <__aeabi_dmul>
 8008ace:	ec41 0b10 	vmov	d0, r0, r1
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	0000      	movs	r0, r0
	...

08008ad8 <_strtod_l>:
 8008ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	b09f      	sub	sp, #124	@ 0x7c
 8008ade:	460c      	mov	r4, r1
 8008ae0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	921a      	str	r2, [sp, #104]	@ 0x68
 8008ae6:	9005      	str	r0, [sp, #20]
 8008ae8:	f04f 0a00 	mov.w	sl, #0
 8008aec:	f04f 0b00 	mov.w	fp, #0
 8008af0:	460a      	mov	r2, r1
 8008af2:	9219      	str	r2, [sp, #100]	@ 0x64
 8008af4:	7811      	ldrb	r1, [r2, #0]
 8008af6:	292b      	cmp	r1, #43	@ 0x2b
 8008af8:	d04a      	beq.n	8008b90 <_strtod_l+0xb8>
 8008afa:	d838      	bhi.n	8008b6e <_strtod_l+0x96>
 8008afc:	290d      	cmp	r1, #13
 8008afe:	d832      	bhi.n	8008b66 <_strtod_l+0x8e>
 8008b00:	2908      	cmp	r1, #8
 8008b02:	d832      	bhi.n	8008b6a <_strtod_l+0x92>
 8008b04:	2900      	cmp	r1, #0
 8008b06:	d03b      	beq.n	8008b80 <_strtod_l+0xa8>
 8008b08:	2200      	movs	r2, #0
 8008b0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008b0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008b0e:	782a      	ldrb	r2, [r5, #0]
 8008b10:	2a30      	cmp	r2, #48	@ 0x30
 8008b12:	f040 80b3 	bne.w	8008c7c <_strtod_l+0x1a4>
 8008b16:	786a      	ldrb	r2, [r5, #1]
 8008b18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b1c:	2a58      	cmp	r2, #88	@ 0x58
 8008b1e:	d16e      	bne.n	8008bfe <_strtod_l+0x126>
 8008b20:	9302      	str	r3, [sp, #8]
 8008b22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	ab1a      	add	r3, sp, #104	@ 0x68
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	4a8e      	ldr	r2, [pc, #568]	@ (8008d64 <_strtod_l+0x28c>)
 8008b2c:	9805      	ldr	r0, [sp, #20]
 8008b2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008b30:	a919      	add	r1, sp, #100	@ 0x64
 8008b32:	f001 f917 	bl	8009d64 <__gethex>
 8008b36:	f010 060f 	ands.w	r6, r0, #15
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	d005      	beq.n	8008b4a <_strtod_l+0x72>
 8008b3e:	2e06      	cmp	r6, #6
 8008b40:	d128      	bne.n	8008b94 <_strtod_l+0xbc>
 8008b42:	3501      	adds	r5, #1
 8008b44:	2300      	movs	r3, #0
 8008b46:	9519      	str	r5, [sp, #100]	@ 0x64
 8008b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f040 858e 	bne.w	800966e <_strtod_l+0xb96>
 8008b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b54:	b1cb      	cbz	r3, 8008b8a <_strtod_l+0xb2>
 8008b56:	4652      	mov	r2, sl
 8008b58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008b5c:	ec43 2b10 	vmov	d0, r2, r3
 8008b60:	b01f      	add	sp, #124	@ 0x7c
 8008b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b66:	2920      	cmp	r1, #32
 8008b68:	d1ce      	bne.n	8008b08 <_strtod_l+0x30>
 8008b6a:	3201      	adds	r2, #1
 8008b6c:	e7c1      	b.n	8008af2 <_strtod_l+0x1a>
 8008b6e:	292d      	cmp	r1, #45	@ 0x2d
 8008b70:	d1ca      	bne.n	8008b08 <_strtod_l+0x30>
 8008b72:	2101      	movs	r1, #1
 8008b74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008b76:	1c51      	adds	r1, r2, #1
 8008b78:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b7a:	7852      	ldrb	r2, [r2, #1]
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	d1c5      	bne.n	8008b0c <_strtod_l+0x34>
 8008b80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008b82:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f040 8570 	bne.w	800966a <_strtod_l+0xb92>
 8008b8a:	4652      	mov	r2, sl
 8008b8c:	465b      	mov	r3, fp
 8008b8e:	e7e5      	b.n	8008b5c <_strtod_l+0x84>
 8008b90:	2100      	movs	r1, #0
 8008b92:	e7ef      	b.n	8008b74 <_strtod_l+0x9c>
 8008b94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b96:	b13a      	cbz	r2, 8008ba8 <_strtod_l+0xd0>
 8008b98:	2135      	movs	r1, #53	@ 0x35
 8008b9a:	a81c      	add	r0, sp, #112	@ 0x70
 8008b9c:	f7ff ff38 	bl	8008a10 <__copybits>
 8008ba0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ba2:	9805      	ldr	r0, [sp, #20]
 8008ba4:	f7ff fb06 	bl	80081b4 <_Bfree>
 8008ba8:	3e01      	subs	r6, #1
 8008baa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008bac:	2e04      	cmp	r6, #4
 8008bae:	d806      	bhi.n	8008bbe <_strtod_l+0xe6>
 8008bb0:	e8df f006 	tbb	[pc, r6]
 8008bb4:	201d0314 	.word	0x201d0314
 8008bb8:	14          	.byte	0x14
 8008bb9:	00          	.byte	0x00
 8008bba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008bbe:	05e1      	lsls	r1, r4, #23
 8008bc0:	bf48      	it	mi
 8008bc2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008bc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bca:	0d1b      	lsrs	r3, r3, #20
 8008bcc:	051b      	lsls	r3, r3, #20
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1bb      	bne.n	8008b4a <_strtod_l+0x72>
 8008bd2:	f7fe fbe5 	bl	80073a0 <__errno>
 8008bd6:	2322      	movs	r3, #34	@ 0x22
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	e7b6      	b.n	8008b4a <_strtod_l+0x72>
 8008bdc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008be0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008be4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008be8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008bec:	e7e7      	b.n	8008bbe <_strtod_l+0xe6>
 8008bee:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008d6c <_strtod_l+0x294>
 8008bf2:	e7e4      	b.n	8008bbe <_strtod_l+0xe6>
 8008bf4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008bf8:	f04f 3aff 	mov.w	sl, #4294967295
 8008bfc:	e7df      	b.n	8008bbe <_strtod_l+0xe6>
 8008bfe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	2b30      	cmp	r3, #48	@ 0x30
 8008c08:	d0f9      	beq.n	8008bfe <_strtod_l+0x126>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d09d      	beq.n	8008b4a <_strtod_l+0x72>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c16:	2300      	movs	r3, #0
 8008c18:	9308      	str	r3, [sp, #32]
 8008c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c1c:	461f      	mov	r7, r3
 8008c1e:	220a      	movs	r2, #10
 8008c20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008c22:	7805      	ldrb	r5, [r0, #0]
 8008c24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008c28:	b2d9      	uxtb	r1, r3
 8008c2a:	2909      	cmp	r1, #9
 8008c2c:	d928      	bls.n	8008c80 <_strtod_l+0x1a8>
 8008c2e:	494e      	ldr	r1, [pc, #312]	@ (8008d68 <_strtod_l+0x290>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	f000 ffd5 	bl	8009be0 <strncmp>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d032      	beq.n	8008ca0 <_strtod_l+0x1c8>
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	4681      	mov	r9, r0
 8008c40:	463d      	mov	r5, r7
 8008c42:	4603      	mov	r3, r0
 8008c44:	2a65      	cmp	r2, #101	@ 0x65
 8008c46:	d001      	beq.n	8008c4c <_strtod_l+0x174>
 8008c48:	2a45      	cmp	r2, #69	@ 0x45
 8008c4a:	d114      	bne.n	8008c76 <_strtod_l+0x19e>
 8008c4c:	b91d      	cbnz	r5, 8008c56 <_strtod_l+0x17e>
 8008c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c50:	4302      	orrs	r2, r0
 8008c52:	d095      	beq.n	8008b80 <_strtod_l+0xa8>
 8008c54:	2500      	movs	r5, #0
 8008c56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008c58:	1c62      	adds	r2, r4, #1
 8008c5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c5c:	7862      	ldrb	r2, [r4, #1]
 8008c5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008c60:	d077      	beq.n	8008d52 <_strtod_l+0x27a>
 8008c62:	2a2d      	cmp	r2, #45	@ 0x2d
 8008c64:	d07b      	beq.n	8008d5e <_strtod_l+0x286>
 8008c66:	f04f 0c00 	mov.w	ip, #0
 8008c6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008c6e:	2909      	cmp	r1, #9
 8008c70:	f240 8082 	bls.w	8008d78 <_strtod_l+0x2a0>
 8008c74:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c76:	f04f 0800 	mov.w	r8, #0
 8008c7a:	e0a2      	b.n	8008dc2 <_strtod_l+0x2ea>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	e7c7      	b.n	8008c10 <_strtod_l+0x138>
 8008c80:	2f08      	cmp	r7, #8
 8008c82:	bfd5      	itete	le
 8008c84:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008c86:	9908      	ldrgt	r1, [sp, #32]
 8008c88:	fb02 3301 	mlale	r3, r2, r1, r3
 8008c8c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008c90:	f100 0001 	add.w	r0, r0, #1
 8008c94:	bfd4      	ite	le
 8008c96:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008c98:	9308      	strgt	r3, [sp, #32]
 8008c9a:	3701      	adds	r7, #1
 8008c9c:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c9e:	e7bf      	b.n	8008c20 <_strtod_l+0x148>
 8008ca0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008ca6:	785a      	ldrb	r2, [r3, #1]
 8008ca8:	b37f      	cbz	r7, 8008d0a <_strtod_l+0x232>
 8008caa:	4681      	mov	r9, r0
 8008cac:	463d      	mov	r5, r7
 8008cae:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008cb2:	2b09      	cmp	r3, #9
 8008cb4:	d912      	bls.n	8008cdc <_strtod_l+0x204>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e7c4      	b.n	8008c44 <_strtod_l+0x16c>
 8008cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cc0:	785a      	ldrb	r2, [r3, #1]
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	2a30      	cmp	r2, #48	@ 0x30
 8008cc6:	d0f8      	beq.n	8008cba <_strtod_l+0x1e2>
 8008cc8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ccc:	2b08      	cmp	r3, #8
 8008cce:	f200 84d3 	bhi.w	8009678 <_strtod_l+0xba0>
 8008cd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008cd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cd6:	4681      	mov	r9, r0
 8008cd8:	2000      	movs	r0, #0
 8008cda:	4605      	mov	r5, r0
 8008cdc:	3a30      	subs	r2, #48	@ 0x30
 8008cde:	f100 0301 	add.w	r3, r0, #1
 8008ce2:	d02a      	beq.n	8008d3a <_strtod_l+0x262>
 8008ce4:	4499      	add	r9, r3
 8008ce6:	eb00 0c05 	add.w	ip, r0, r5
 8008cea:	462b      	mov	r3, r5
 8008cec:	210a      	movs	r1, #10
 8008cee:	4563      	cmp	r3, ip
 8008cf0:	d10d      	bne.n	8008d0e <_strtod_l+0x236>
 8008cf2:	1c69      	adds	r1, r5, #1
 8008cf4:	4401      	add	r1, r0
 8008cf6:	4428      	add	r0, r5
 8008cf8:	2808      	cmp	r0, #8
 8008cfa:	dc16      	bgt.n	8008d2a <_strtod_l+0x252>
 8008cfc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008cfe:	230a      	movs	r3, #10
 8008d00:	fb03 2300 	mla	r3, r3, r0, r2
 8008d04:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d06:	2300      	movs	r3, #0
 8008d08:	e018      	b.n	8008d3c <_strtod_l+0x264>
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	e7da      	b.n	8008cc4 <_strtod_l+0x1ec>
 8008d0e:	2b08      	cmp	r3, #8
 8008d10:	f103 0301 	add.w	r3, r3, #1
 8008d14:	dc03      	bgt.n	8008d1e <_strtod_l+0x246>
 8008d16:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008d18:	434e      	muls	r6, r1
 8008d1a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008d1c:	e7e7      	b.n	8008cee <_strtod_l+0x216>
 8008d1e:	2b10      	cmp	r3, #16
 8008d20:	bfde      	ittt	le
 8008d22:	9e08      	ldrle	r6, [sp, #32]
 8008d24:	434e      	mulle	r6, r1
 8008d26:	9608      	strle	r6, [sp, #32]
 8008d28:	e7e1      	b.n	8008cee <_strtod_l+0x216>
 8008d2a:	280f      	cmp	r0, #15
 8008d2c:	dceb      	bgt.n	8008d06 <_strtod_l+0x22e>
 8008d2e:	9808      	ldr	r0, [sp, #32]
 8008d30:	230a      	movs	r3, #10
 8008d32:	fb03 2300 	mla	r3, r3, r0, r2
 8008d36:	9308      	str	r3, [sp, #32]
 8008d38:	e7e5      	b.n	8008d06 <_strtod_l+0x22e>
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d3e:	1c50      	adds	r0, r2, #1
 8008d40:	9019      	str	r0, [sp, #100]	@ 0x64
 8008d42:	7852      	ldrb	r2, [r2, #1]
 8008d44:	4618      	mov	r0, r3
 8008d46:	460d      	mov	r5, r1
 8008d48:	e7b1      	b.n	8008cae <_strtod_l+0x1d6>
 8008d4a:	f04f 0900 	mov.w	r9, #0
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e77d      	b.n	8008c4e <_strtod_l+0x176>
 8008d52:	f04f 0c00 	mov.w	ip, #0
 8008d56:	1ca2      	adds	r2, r4, #2
 8008d58:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d5a:	78a2      	ldrb	r2, [r4, #2]
 8008d5c:	e785      	b.n	8008c6a <_strtod_l+0x192>
 8008d5e:	f04f 0c01 	mov.w	ip, #1
 8008d62:	e7f8      	b.n	8008d56 <_strtod_l+0x27e>
 8008d64:	0800b170 	.word	0x0800b170
 8008d68:	0800b158 	.word	0x0800b158
 8008d6c:	7ff00000 	.word	0x7ff00000
 8008d70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d72:	1c51      	adds	r1, r2, #1
 8008d74:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d76:	7852      	ldrb	r2, [r2, #1]
 8008d78:	2a30      	cmp	r2, #48	@ 0x30
 8008d7a:	d0f9      	beq.n	8008d70 <_strtod_l+0x298>
 8008d7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008d80:	2908      	cmp	r1, #8
 8008d82:	f63f af78 	bhi.w	8008c76 <_strtod_l+0x19e>
 8008d86:	3a30      	subs	r2, #48	@ 0x30
 8008d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d8c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008d8e:	f04f 080a 	mov.w	r8, #10
 8008d92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008d94:	1c56      	adds	r6, r2, #1
 8008d96:	9619      	str	r6, [sp, #100]	@ 0x64
 8008d98:	7852      	ldrb	r2, [r2, #1]
 8008d9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008d9e:	f1be 0f09 	cmp.w	lr, #9
 8008da2:	d939      	bls.n	8008e18 <_strtod_l+0x340>
 8008da4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008da6:	1a76      	subs	r6, r6, r1
 8008da8:	2e08      	cmp	r6, #8
 8008daa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008dae:	dc03      	bgt.n	8008db8 <_strtod_l+0x2e0>
 8008db0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008db2:	4588      	cmp	r8, r1
 8008db4:	bfa8      	it	ge
 8008db6:	4688      	movge	r8, r1
 8008db8:	f1bc 0f00 	cmp.w	ip, #0
 8008dbc:	d001      	beq.n	8008dc2 <_strtod_l+0x2ea>
 8008dbe:	f1c8 0800 	rsb	r8, r8, #0
 8008dc2:	2d00      	cmp	r5, #0
 8008dc4:	d14e      	bne.n	8008e64 <_strtod_l+0x38c>
 8008dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008dc8:	4308      	orrs	r0, r1
 8008dca:	f47f aebe 	bne.w	8008b4a <_strtod_l+0x72>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f47f aed6 	bne.w	8008b80 <_strtod_l+0xa8>
 8008dd4:	2a69      	cmp	r2, #105	@ 0x69
 8008dd6:	d028      	beq.n	8008e2a <_strtod_l+0x352>
 8008dd8:	dc25      	bgt.n	8008e26 <_strtod_l+0x34e>
 8008dda:	2a49      	cmp	r2, #73	@ 0x49
 8008ddc:	d025      	beq.n	8008e2a <_strtod_l+0x352>
 8008dde:	2a4e      	cmp	r2, #78	@ 0x4e
 8008de0:	f47f aece 	bne.w	8008b80 <_strtod_l+0xa8>
 8008de4:	499b      	ldr	r1, [pc, #620]	@ (8009054 <_strtod_l+0x57c>)
 8008de6:	a819      	add	r0, sp, #100	@ 0x64
 8008de8:	f001 f9de 	bl	800a1a8 <__match>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	f43f aec7 	beq.w	8008b80 <_strtod_l+0xa8>
 8008df2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	2b28      	cmp	r3, #40	@ 0x28
 8008df8:	d12e      	bne.n	8008e58 <_strtod_l+0x380>
 8008dfa:	4997      	ldr	r1, [pc, #604]	@ (8009058 <_strtod_l+0x580>)
 8008dfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8008dfe:	a819      	add	r0, sp, #100	@ 0x64
 8008e00:	f001 f9e6 	bl	800a1d0 <__hexnan>
 8008e04:	2805      	cmp	r0, #5
 8008e06:	d127      	bne.n	8008e58 <_strtod_l+0x380>
 8008e08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008e0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008e12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008e16:	e698      	b.n	8008b4a <_strtod_l+0x72>
 8008e18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008e1a:	fb08 2101 	mla	r1, r8, r1, r2
 8008e1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008e22:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e24:	e7b5      	b.n	8008d92 <_strtod_l+0x2ba>
 8008e26:	2a6e      	cmp	r2, #110	@ 0x6e
 8008e28:	e7da      	b.n	8008de0 <_strtod_l+0x308>
 8008e2a:	498c      	ldr	r1, [pc, #560]	@ (800905c <_strtod_l+0x584>)
 8008e2c:	a819      	add	r0, sp, #100	@ 0x64
 8008e2e:	f001 f9bb 	bl	800a1a8 <__match>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f43f aea4 	beq.w	8008b80 <_strtod_l+0xa8>
 8008e38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e3a:	4989      	ldr	r1, [pc, #548]	@ (8009060 <_strtod_l+0x588>)
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	a819      	add	r0, sp, #100	@ 0x64
 8008e40:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e42:	f001 f9b1 	bl	800a1a8 <__match>
 8008e46:	b910      	cbnz	r0, 8008e4e <_strtod_l+0x376>
 8008e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008e4e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009070 <_strtod_l+0x598>
 8008e52:	f04f 0a00 	mov.w	sl, #0
 8008e56:	e678      	b.n	8008b4a <_strtod_l+0x72>
 8008e58:	4882      	ldr	r0, [pc, #520]	@ (8009064 <_strtod_l+0x58c>)
 8008e5a:	f000 fee1 	bl	8009c20 <nan>
 8008e5e:	ec5b ab10 	vmov	sl, fp, d0
 8008e62:	e672      	b.n	8008b4a <_strtod_l+0x72>
 8008e64:	eba8 0309 	sub.w	r3, r8, r9
 8008e68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008e6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e6c:	2f00      	cmp	r7, #0
 8008e6e:	bf08      	it	eq
 8008e70:	462f      	moveq	r7, r5
 8008e72:	2d10      	cmp	r5, #16
 8008e74:	462c      	mov	r4, r5
 8008e76:	bfa8      	it	ge
 8008e78:	2410      	movge	r4, #16
 8008e7a:	f7f7 fb43 	bl	8000504 <__aeabi_ui2d>
 8008e7e:	2d09      	cmp	r5, #9
 8008e80:	4682      	mov	sl, r0
 8008e82:	468b      	mov	fp, r1
 8008e84:	dc13      	bgt.n	8008eae <_strtod_l+0x3d6>
 8008e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f43f ae5e 	beq.w	8008b4a <_strtod_l+0x72>
 8008e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e90:	dd78      	ble.n	8008f84 <_strtod_l+0x4ac>
 8008e92:	2b16      	cmp	r3, #22
 8008e94:	dc5f      	bgt.n	8008f56 <_strtod_l+0x47e>
 8008e96:	4974      	ldr	r1, [pc, #464]	@ (8009068 <_strtod_l+0x590>)
 8008e98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	f7f7 fba8 	bl	80005f8 <__aeabi_dmul>
 8008ea8:	4682      	mov	sl, r0
 8008eaa:	468b      	mov	fp, r1
 8008eac:	e64d      	b.n	8008b4a <_strtod_l+0x72>
 8008eae:	4b6e      	ldr	r3, [pc, #440]	@ (8009068 <_strtod_l+0x590>)
 8008eb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008eb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008eb8:	f7f7 fb9e 	bl	80005f8 <__aeabi_dmul>
 8008ebc:	4682      	mov	sl, r0
 8008ebe:	9808      	ldr	r0, [sp, #32]
 8008ec0:	468b      	mov	fp, r1
 8008ec2:	f7f7 fb1f 	bl	8000504 <__aeabi_ui2d>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4650      	mov	r0, sl
 8008ecc:	4659      	mov	r1, fp
 8008ece:	f7f7 f9dd 	bl	800028c <__adddf3>
 8008ed2:	2d0f      	cmp	r5, #15
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	468b      	mov	fp, r1
 8008ed8:	ddd5      	ble.n	8008e86 <_strtod_l+0x3ae>
 8008eda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008edc:	1b2c      	subs	r4, r5, r4
 8008ede:	441c      	add	r4, r3
 8008ee0:	2c00      	cmp	r4, #0
 8008ee2:	f340 8096 	ble.w	8009012 <_strtod_l+0x53a>
 8008ee6:	f014 030f 	ands.w	r3, r4, #15
 8008eea:	d00a      	beq.n	8008f02 <_strtod_l+0x42a>
 8008eec:	495e      	ldr	r1, [pc, #376]	@ (8009068 <_strtod_l+0x590>)
 8008eee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	465b      	mov	r3, fp
 8008ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008efa:	f7f7 fb7d 	bl	80005f8 <__aeabi_dmul>
 8008efe:	4682      	mov	sl, r0
 8008f00:	468b      	mov	fp, r1
 8008f02:	f034 040f 	bics.w	r4, r4, #15
 8008f06:	d073      	beq.n	8008ff0 <_strtod_l+0x518>
 8008f08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008f0c:	dd48      	ble.n	8008fa0 <_strtod_l+0x4c8>
 8008f0e:	2400      	movs	r4, #0
 8008f10:	46a0      	mov	r8, r4
 8008f12:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f14:	46a1      	mov	r9, r4
 8008f16:	9a05      	ldr	r2, [sp, #20]
 8008f18:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009070 <_strtod_l+0x598>
 8008f1c:	2322      	movs	r3, #34	@ 0x22
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	f04f 0a00 	mov.w	sl, #0
 8008f24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	f43f ae0f 	beq.w	8008b4a <_strtod_l+0x72>
 8008f2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008f2e:	9805      	ldr	r0, [sp, #20]
 8008f30:	f7ff f940 	bl	80081b4 <_Bfree>
 8008f34:	9805      	ldr	r0, [sp, #20]
 8008f36:	4649      	mov	r1, r9
 8008f38:	f7ff f93c 	bl	80081b4 <_Bfree>
 8008f3c:	9805      	ldr	r0, [sp, #20]
 8008f3e:	4641      	mov	r1, r8
 8008f40:	f7ff f938 	bl	80081b4 <_Bfree>
 8008f44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f46:	9805      	ldr	r0, [sp, #20]
 8008f48:	f7ff f934 	bl	80081b4 <_Bfree>
 8008f4c:	9805      	ldr	r0, [sp, #20]
 8008f4e:	4621      	mov	r1, r4
 8008f50:	f7ff f930 	bl	80081b4 <_Bfree>
 8008f54:	e5f9      	b.n	8008b4a <_strtod_l+0x72>
 8008f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	dbbc      	blt.n	8008eda <_strtod_l+0x402>
 8008f60:	4c41      	ldr	r4, [pc, #260]	@ (8009068 <_strtod_l+0x590>)
 8008f62:	f1c5 050f 	rsb	r5, r5, #15
 8008f66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008f6a:	4652      	mov	r2, sl
 8008f6c:	465b      	mov	r3, fp
 8008f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f78:	1b5d      	subs	r5, r3, r5
 8008f7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008f7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008f82:	e78f      	b.n	8008ea4 <_strtod_l+0x3cc>
 8008f84:	3316      	adds	r3, #22
 8008f86:	dba8      	blt.n	8008eda <_strtod_l+0x402>
 8008f88:	4b37      	ldr	r3, [pc, #220]	@ (8009068 <_strtod_l+0x590>)
 8008f8a:	eba9 0808 	sub.w	r8, r9, r8
 8008f8e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008f92:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008f96:	4650      	mov	r0, sl
 8008f98:	4659      	mov	r1, fp
 8008f9a:	f7f7 fc57 	bl	800084c <__aeabi_ddiv>
 8008f9e:	e783      	b.n	8008ea8 <_strtod_l+0x3d0>
 8008fa0:	4b32      	ldr	r3, [pc, #200]	@ (800906c <_strtod_l+0x594>)
 8008fa2:	9308      	str	r3, [sp, #32]
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	1124      	asrs	r4, r4, #4
 8008fa8:	4650      	mov	r0, sl
 8008faa:	4659      	mov	r1, fp
 8008fac:	461e      	mov	r6, r3
 8008fae:	2c01      	cmp	r4, #1
 8008fb0:	dc21      	bgt.n	8008ff6 <_strtod_l+0x51e>
 8008fb2:	b10b      	cbz	r3, 8008fb8 <_strtod_l+0x4e0>
 8008fb4:	4682      	mov	sl, r0
 8008fb6:	468b      	mov	fp, r1
 8008fb8:	492c      	ldr	r1, [pc, #176]	@ (800906c <_strtod_l+0x594>)
 8008fba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008fbe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008fc2:	4652      	mov	r2, sl
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fca:	f7f7 fb15 	bl	80005f8 <__aeabi_dmul>
 8008fce:	4b28      	ldr	r3, [pc, #160]	@ (8009070 <_strtod_l+0x598>)
 8008fd0:	460a      	mov	r2, r1
 8008fd2:	400b      	ands	r3, r1
 8008fd4:	4927      	ldr	r1, [pc, #156]	@ (8009074 <_strtod_l+0x59c>)
 8008fd6:	428b      	cmp	r3, r1
 8008fd8:	4682      	mov	sl, r0
 8008fda:	d898      	bhi.n	8008f0e <_strtod_l+0x436>
 8008fdc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf86      	itte	hi
 8008fe4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009078 <_strtod_l+0x5a0>
 8008fe8:	f04f 3aff 	movhi.w	sl, #4294967295
 8008fec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9308      	str	r3, [sp, #32]
 8008ff4:	e07a      	b.n	80090ec <_strtod_l+0x614>
 8008ff6:	07e2      	lsls	r2, r4, #31
 8008ff8:	d505      	bpl.n	8009006 <_strtod_l+0x52e>
 8008ffa:	9b08      	ldr	r3, [sp, #32]
 8008ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009000:	f7f7 fafa 	bl	80005f8 <__aeabi_dmul>
 8009004:	2301      	movs	r3, #1
 8009006:	9a08      	ldr	r2, [sp, #32]
 8009008:	3208      	adds	r2, #8
 800900a:	3601      	adds	r6, #1
 800900c:	1064      	asrs	r4, r4, #1
 800900e:	9208      	str	r2, [sp, #32]
 8009010:	e7cd      	b.n	8008fae <_strtod_l+0x4d6>
 8009012:	d0ed      	beq.n	8008ff0 <_strtod_l+0x518>
 8009014:	4264      	negs	r4, r4
 8009016:	f014 020f 	ands.w	r2, r4, #15
 800901a:	d00a      	beq.n	8009032 <_strtod_l+0x55a>
 800901c:	4b12      	ldr	r3, [pc, #72]	@ (8009068 <_strtod_l+0x590>)
 800901e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009022:	4650      	mov	r0, sl
 8009024:	4659      	mov	r1, fp
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f7f7 fc0f 	bl	800084c <__aeabi_ddiv>
 800902e:	4682      	mov	sl, r0
 8009030:	468b      	mov	fp, r1
 8009032:	1124      	asrs	r4, r4, #4
 8009034:	d0dc      	beq.n	8008ff0 <_strtod_l+0x518>
 8009036:	2c1f      	cmp	r4, #31
 8009038:	dd20      	ble.n	800907c <_strtod_l+0x5a4>
 800903a:	2400      	movs	r4, #0
 800903c:	46a0      	mov	r8, r4
 800903e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009040:	46a1      	mov	r9, r4
 8009042:	9a05      	ldr	r2, [sp, #20]
 8009044:	2322      	movs	r3, #34	@ 0x22
 8009046:	f04f 0a00 	mov.w	sl, #0
 800904a:	f04f 0b00 	mov.w	fp, #0
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	e768      	b.n	8008f24 <_strtod_l+0x44c>
 8009052:	bf00      	nop
 8009054:	0800af45 	.word	0x0800af45
 8009058:	0800b15c 	.word	0x0800b15c
 800905c:	0800af3d 	.word	0x0800af3d
 8009060:	0800af74 	.word	0x0800af74
 8009064:	0800b305 	.word	0x0800b305
 8009068:	0800b090 	.word	0x0800b090
 800906c:	0800b068 	.word	0x0800b068
 8009070:	7ff00000 	.word	0x7ff00000
 8009074:	7ca00000 	.word	0x7ca00000
 8009078:	7fefffff 	.word	0x7fefffff
 800907c:	f014 0310 	ands.w	r3, r4, #16
 8009080:	bf18      	it	ne
 8009082:	236a      	movne	r3, #106	@ 0x6a
 8009084:	4ea9      	ldr	r6, [pc, #676]	@ (800932c <_strtod_l+0x854>)
 8009086:	9308      	str	r3, [sp, #32]
 8009088:	4650      	mov	r0, sl
 800908a:	4659      	mov	r1, fp
 800908c:	2300      	movs	r3, #0
 800908e:	07e2      	lsls	r2, r4, #31
 8009090:	d504      	bpl.n	800909c <_strtod_l+0x5c4>
 8009092:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009096:	f7f7 faaf 	bl	80005f8 <__aeabi_dmul>
 800909a:	2301      	movs	r3, #1
 800909c:	1064      	asrs	r4, r4, #1
 800909e:	f106 0608 	add.w	r6, r6, #8
 80090a2:	d1f4      	bne.n	800908e <_strtod_l+0x5b6>
 80090a4:	b10b      	cbz	r3, 80090aa <_strtod_l+0x5d2>
 80090a6:	4682      	mov	sl, r0
 80090a8:	468b      	mov	fp, r1
 80090aa:	9b08      	ldr	r3, [sp, #32]
 80090ac:	b1b3      	cbz	r3, 80090dc <_strtod_l+0x604>
 80090ae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80090b2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	4659      	mov	r1, fp
 80090ba:	dd0f      	ble.n	80090dc <_strtod_l+0x604>
 80090bc:	2b1f      	cmp	r3, #31
 80090be:	dd55      	ble.n	800916c <_strtod_l+0x694>
 80090c0:	2b34      	cmp	r3, #52	@ 0x34
 80090c2:	bfde      	ittt	le
 80090c4:	f04f 33ff 	movle.w	r3, #4294967295
 80090c8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80090cc:	4093      	lslle	r3, r2
 80090ce:	f04f 0a00 	mov.w	sl, #0
 80090d2:	bfcc      	ite	gt
 80090d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80090d8:	ea03 0b01 	andle.w	fp, r3, r1
 80090dc:	2200      	movs	r2, #0
 80090de:	2300      	movs	r3, #0
 80090e0:	4650      	mov	r0, sl
 80090e2:	4659      	mov	r1, fp
 80090e4:	f7f7 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	d1a6      	bne.n	800903a <_strtod_l+0x562>
 80090ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80090f2:	9805      	ldr	r0, [sp, #20]
 80090f4:	462b      	mov	r3, r5
 80090f6:	463a      	mov	r2, r7
 80090f8:	f7ff f8c4 	bl	8008284 <__s2b>
 80090fc:	900a      	str	r0, [sp, #40]	@ 0x28
 80090fe:	2800      	cmp	r0, #0
 8009100:	f43f af05 	beq.w	8008f0e <_strtod_l+0x436>
 8009104:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009106:	2a00      	cmp	r2, #0
 8009108:	eba9 0308 	sub.w	r3, r9, r8
 800910c:	bfa8      	it	ge
 800910e:	2300      	movge	r3, #0
 8009110:	9312      	str	r3, [sp, #72]	@ 0x48
 8009112:	2400      	movs	r4, #0
 8009114:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009118:	9316      	str	r3, [sp, #88]	@ 0x58
 800911a:	46a0      	mov	r8, r4
 800911c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800911e:	9805      	ldr	r0, [sp, #20]
 8009120:	6859      	ldr	r1, [r3, #4]
 8009122:	f7ff f807 	bl	8008134 <_Balloc>
 8009126:	4681      	mov	r9, r0
 8009128:	2800      	cmp	r0, #0
 800912a:	f43f aef4 	beq.w	8008f16 <_strtod_l+0x43e>
 800912e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009130:	691a      	ldr	r2, [r3, #16]
 8009132:	3202      	adds	r2, #2
 8009134:	f103 010c 	add.w	r1, r3, #12
 8009138:	0092      	lsls	r2, r2, #2
 800913a:	300c      	adds	r0, #12
 800913c:	f000 fd62 	bl	8009c04 <memcpy>
 8009140:	ec4b ab10 	vmov	d0, sl, fp
 8009144:	9805      	ldr	r0, [sp, #20]
 8009146:	aa1c      	add	r2, sp, #112	@ 0x70
 8009148:	a91b      	add	r1, sp, #108	@ 0x6c
 800914a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800914e:	f7ff fbd5 	bl	80088fc <__d2b>
 8009152:	901a      	str	r0, [sp, #104]	@ 0x68
 8009154:	2800      	cmp	r0, #0
 8009156:	f43f aede 	beq.w	8008f16 <_strtod_l+0x43e>
 800915a:	9805      	ldr	r0, [sp, #20]
 800915c:	2101      	movs	r1, #1
 800915e:	f7ff f927 	bl	80083b0 <__i2b>
 8009162:	4680      	mov	r8, r0
 8009164:	b948      	cbnz	r0, 800917a <_strtod_l+0x6a2>
 8009166:	f04f 0800 	mov.w	r8, #0
 800916a:	e6d4      	b.n	8008f16 <_strtod_l+0x43e>
 800916c:	f04f 32ff 	mov.w	r2, #4294967295
 8009170:	fa02 f303 	lsl.w	r3, r2, r3
 8009174:	ea03 0a0a 	and.w	sl, r3, sl
 8009178:	e7b0      	b.n	80090dc <_strtod_l+0x604>
 800917a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800917c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800917e:	2d00      	cmp	r5, #0
 8009180:	bfab      	itete	ge
 8009182:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009184:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009186:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009188:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800918a:	bfac      	ite	ge
 800918c:	18ef      	addge	r7, r5, r3
 800918e:	1b5e      	sublt	r6, r3, r5
 8009190:	9b08      	ldr	r3, [sp, #32]
 8009192:	1aed      	subs	r5, r5, r3
 8009194:	4415      	add	r5, r2
 8009196:	4b66      	ldr	r3, [pc, #408]	@ (8009330 <_strtod_l+0x858>)
 8009198:	3d01      	subs	r5, #1
 800919a:	429d      	cmp	r5, r3
 800919c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80091a0:	da50      	bge.n	8009244 <_strtod_l+0x76c>
 80091a2:	1b5b      	subs	r3, r3, r5
 80091a4:	2b1f      	cmp	r3, #31
 80091a6:	eba2 0203 	sub.w	r2, r2, r3
 80091aa:	f04f 0101 	mov.w	r1, #1
 80091ae:	dc3d      	bgt.n	800922c <_strtod_l+0x754>
 80091b0:	fa01 f303 	lsl.w	r3, r1, r3
 80091b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80091b6:	2300      	movs	r3, #0
 80091b8:	9310      	str	r3, [sp, #64]	@ 0x40
 80091ba:	18bd      	adds	r5, r7, r2
 80091bc:	9b08      	ldr	r3, [sp, #32]
 80091be:	42af      	cmp	r7, r5
 80091c0:	4416      	add	r6, r2
 80091c2:	441e      	add	r6, r3
 80091c4:	463b      	mov	r3, r7
 80091c6:	bfa8      	it	ge
 80091c8:	462b      	movge	r3, r5
 80091ca:	42b3      	cmp	r3, r6
 80091cc:	bfa8      	it	ge
 80091ce:	4633      	movge	r3, r6
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	bfc2      	ittt	gt
 80091d4:	1aed      	subgt	r5, r5, r3
 80091d6:	1af6      	subgt	r6, r6, r3
 80091d8:	1aff      	subgt	r7, r7, r3
 80091da:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dd16      	ble.n	800920e <_strtod_l+0x736>
 80091e0:	4641      	mov	r1, r8
 80091e2:	9805      	ldr	r0, [sp, #20]
 80091e4:	461a      	mov	r2, r3
 80091e6:	f7ff f9a3 	bl	8008530 <__pow5mult>
 80091ea:	4680      	mov	r8, r0
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0ba      	beq.n	8009166 <_strtod_l+0x68e>
 80091f0:	4601      	mov	r1, r0
 80091f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091f4:	9805      	ldr	r0, [sp, #20]
 80091f6:	f7ff f8f1 	bl	80083dc <__multiply>
 80091fa:	900e      	str	r0, [sp, #56]	@ 0x38
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f43f ae8a 	beq.w	8008f16 <_strtod_l+0x43e>
 8009202:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009204:	9805      	ldr	r0, [sp, #20]
 8009206:	f7fe ffd5 	bl	80081b4 <_Bfree>
 800920a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800920c:	931a      	str	r3, [sp, #104]	@ 0x68
 800920e:	2d00      	cmp	r5, #0
 8009210:	dc1d      	bgt.n	800924e <_strtod_l+0x776>
 8009212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	dd23      	ble.n	8009260 <_strtod_l+0x788>
 8009218:	4649      	mov	r1, r9
 800921a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800921c:	9805      	ldr	r0, [sp, #20]
 800921e:	f7ff f987 	bl	8008530 <__pow5mult>
 8009222:	4681      	mov	r9, r0
 8009224:	b9e0      	cbnz	r0, 8009260 <_strtod_l+0x788>
 8009226:	f04f 0900 	mov.w	r9, #0
 800922a:	e674      	b.n	8008f16 <_strtod_l+0x43e>
 800922c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009230:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009234:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009238:	35e2      	adds	r5, #226	@ 0xe2
 800923a:	fa01 f305 	lsl.w	r3, r1, r5
 800923e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009240:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009242:	e7ba      	b.n	80091ba <_strtod_l+0x6e2>
 8009244:	2300      	movs	r3, #0
 8009246:	9310      	str	r3, [sp, #64]	@ 0x40
 8009248:	2301      	movs	r3, #1
 800924a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800924c:	e7b5      	b.n	80091ba <_strtod_l+0x6e2>
 800924e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009250:	9805      	ldr	r0, [sp, #20]
 8009252:	462a      	mov	r2, r5
 8009254:	f7ff f9c6 	bl	80085e4 <__lshift>
 8009258:	901a      	str	r0, [sp, #104]	@ 0x68
 800925a:	2800      	cmp	r0, #0
 800925c:	d1d9      	bne.n	8009212 <_strtod_l+0x73a>
 800925e:	e65a      	b.n	8008f16 <_strtod_l+0x43e>
 8009260:	2e00      	cmp	r6, #0
 8009262:	dd07      	ble.n	8009274 <_strtod_l+0x79c>
 8009264:	4649      	mov	r1, r9
 8009266:	9805      	ldr	r0, [sp, #20]
 8009268:	4632      	mov	r2, r6
 800926a:	f7ff f9bb 	bl	80085e4 <__lshift>
 800926e:	4681      	mov	r9, r0
 8009270:	2800      	cmp	r0, #0
 8009272:	d0d8      	beq.n	8009226 <_strtod_l+0x74e>
 8009274:	2f00      	cmp	r7, #0
 8009276:	dd08      	ble.n	800928a <_strtod_l+0x7b2>
 8009278:	4641      	mov	r1, r8
 800927a:	9805      	ldr	r0, [sp, #20]
 800927c:	463a      	mov	r2, r7
 800927e:	f7ff f9b1 	bl	80085e4 <__lshift>
 8009282:	4680      	mov	r8, r0
 8009284:	2800      	cmp	r0, #0
 8009286:	f43f ae46 	beq.w	8008f16 <_strtod_l+0x43e>
 800928a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800928c:	9805      	ldr	r0, [sp, #20]
 800928e:	464a      	mov	r2, r9
 8009290:	f7ff fa30 	bl	80086f4 <__mdiff>
 8009294:	4604      	mov	r4, r0
 8009296:	2800      	cmp	r0, #0
 8009298:	f43f ae3d 	beq.w	8008f16 <_strtod_l+0x43e>
 800929c:	68c3      	ldr	r3, [r0, #12]
 800929e:	930f      	str	r3, [sp, #60]	@ 0x3c
 80092a0:	2300      	movs	r3, #0
 80092a2:	60c3      	str	r3, [r0, #12]
 80092a4:	4641      	mov	r1, r8
 80092a6:	f7ff fa09 	bl	80086bc <__mcmp>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	da46      	bge.n	800933c <_strtod_l+0x864>
 80092ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092b0:	ea53 030a 	orrs.w	r3, r3, sl
 80092b4:	d16c      	bne.n	8009390 <_strtod_l+0x8b8>
 80092b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d168      	bne.n	8009390 <_strtod_l+0x8b8>
 80092be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092c2:	0d1b      	lsrs	r3, r3, #20
 80092c4:	051b      	lsls	r3, r3, #20
 80092c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092ca:	d961      	bls.n	8009390 <_strtod_l+0x8b8>
 80092cc:	6963      	ldr	r3, [r4, #20]
 80092ce:	b913      	cbnz	r3, 80092d6 <_strtod_l+0x7fe>
 80092d0:	6923      	ldr	r3, [r4, #16]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	dd5c      	ble.n	8009390 <_strtod_l+0x8b8>
 80092d6:	4621      	mov	r1, r4
 80092d8:	2201      	movs	r2, #1
 80092da:	9805      	ldr	r0, [sp, #20]
 80092dc:	f7ff f982 	bl	80085e4 <__lshift>
 80092e0:	4641      	mov	r1, r8
 80092e2:	4604      	mov	r4, r0
 80092e4:	f7ff f9ea 	bl	80086bc <__mcmp>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	dd51      	ble.n	8009390 <_strtod_l+0x8b8>
 80092ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092f0:	9a08      	ldr	r2, [sp, #32]
 80092f2:	0d1b      	lsrs	r3, r3, #20
 80092f4:	051b      	lsls	r3, r3, #20
 80092f6:	2a00      	cmp	r2, #0
 80092f8:	d06b      	beq.n	80093d2 <_strtod_l+0x8fa>
 80092fa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092fe:	d868      	bhi.n	80093d2 <_strtod_l+0x8fa>
 8009300:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009304:	f67f ae9d 	bls.w	8009042 <_strtod_l+0x56a>
 8009308:	4b0a      	ldr	r3, [pc, #40]	@ (8009334 <_strtod_l+0x85c>)
 800930a:	4650      	mov	r0, sl
 800930c:	4659      	mov	r1, fp
 800930e:	2200      	movs	r2, #0
 8009310:	f7f7 f972 	bl	80005f8 <__aeabi_dmul>
 8009314:	4b08      	ldr	r3, [pc, #32]	@ (8009338 <_strtod_l+0x860>)
 8009316:	400b      	ands	r3, r1
 8009318:	4682      	mov	sl, r0
 800931a:	468b      	mov	fp, r1
 800931c:	2b00      	cmp	r3, #0
 800931e:	f47f ae05 	bne.w	8008f2c <_strtod_l+0x454>
 8009322:	9a05      	ldr	r2, [sp, #20]
 8009324:	2322      	movs	r3, #34	@ 0x22
 8009326:	6013      	str	r3, [r2, #0]
 8009328:	e600      	b.n	8008f2c <_strtod_l+0x454>
 800932a:	bf00      	nop
 800932c:	0800b188 	.word	0x0800b188
 8009330:	fffffc02 	.word	0xfffffc02
 8009334:	39500000 	.word	0x39500000
 8009338:	7ff00000 	.word	0x7ff00000
 800933c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009340:	d165      	bne.n	800940e <_strtod_l+0x936>
 8009342:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009344:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009348:	b35a      	cbz	r2, 80093a2 <_strtod_l+0x8ca>
 800934a:	4a9f      	ldr	r2, [pc, #636]	@ (80095c8 <_strtod_l+0xaf0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d12b      	bne.n	80093a8 <_strtod_l+0x8d0>
 8009350:	9b08      	ldr	r3, [sp, #32]
 8009352:	4651      	mov	r1, sl
 8009354:	b303      	cbz	r3, 8009398 <_strtod_l+0x8c0>
 8009356:	4b9d      	ldr	r3, [pc, #628]	@ (80095cc <_strtod_l+0xaf4>)
 8009358:	465a      	mov	r2, fp
 800935a:	4013      	ands	r3, r2
 800935c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009360:	f04f 32ff 	mov.w	r2, #4294967295
 8009364:	d81b      	bhi.n	800939e <_strtod_l+0x8c6>
 8009366:	0d1b      	lsrs	r3, r3, #20
 8009368:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800936c:	fa02 f303 	lsl.w	r3, r2, r3
 8009370:	4299      	cmp	r1, r3
 8009372:	d119      	bne.n	80093a8 <_strtod_l+0x8d0>
 8009374:	4b96      	ldr	r3, [pc, #600]	@ (80095d0 <_strtod_l+0xaf8>)
 8009376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009378:	429a      	cmp	r2, r3
 800937a:	d102      	bne.n	8009382 <_strtod_l+0x8aa>
 800937c:	3101      	adds	r1, #1
 800937e:	f43f adca 	beq.w	8008f16 <_strtod_l+0x43e>
 8009382:	4b92      	ldr	r3, [pc, #584]	@ (80095cc <_strtod_l+0xaf4>)
 8009384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009386:	401a      	ands	r2, r3
 8009388:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800938c:	f04f 0a00 	mov.w	sl, #0
 8009390:	9b08      	ldr	r3, [sp, #32]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1b8      	bne.n	8009308 <_strtod_l+0x830>
 8009396:	e5c9      	b.n	8008f2c <_strtod_l+0x454>
 8009398:	f04f 33ff 	mov.w	r3, #4294967295
 800939c:	e7e8      	b.n	8009370 <_strtod_l+0x898>
 800939e:	4613      	mov	r3, r2
 80093a0:	e7e6      	b.n	8009370 <_strtod_l+0x898>
 80093a2:	ea53 030a 	orrs.w	r3, r3, sl
 80093a6:	d0a1      	beq.n	80092ec <_strtod_l+0x814>
 80093a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80093aa:	b1db      	cbz	r3, 80093e4 <_strtod_l+0x90c>
 80093ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093ae:	4213      	tst	r3, r2
 80093b0:	d0ee      	beq.n	8009390 <_strtod_l+0x8b8>
 80093b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093b4:	9a08      	ldr	r2, [sp, #32]
 80093b6:	4650      	mov	r0, sl
 80093b8:	4659      	mov	r1, fp
 80093ba:	b1bb      	cbz	r3, 80093ec <_strtod_l+0x914>
 80093bc:	f7ff fb6c 	bl	8008a98 <sulp>
 80093c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093c4:	ec53 2b10 	vmov	r2, r3, d0
 80093c8:	f7f6 ff60 	bl	800028c <__adddf3>
 80093cc:	4682      	mov	sl, r0
 80093ce:	468b      	mov	fp, r1
 80093d0:	e7de      	b.n	8009390 <_strtod_l+0x8b8>
 80093d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80093d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80093da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80093de:	f04f 3aff 	mov.w	sl, #4294967295
 80093e2:	e7d5      	b.n	8009390 <_strtod_l+0x8b8>
 80093e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80093e6:	ea13 0f0a 	tst.w	r3, sl
 80093ea:	e7e1      	b.n	80093b0 <_strtod_l+0x8d8>
 80093ec:	f7ff fb54 	bl	8008a98 <sulp>
 80093f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093f4:	ec53 2b10 	vmov	r2, r3, d0
 80093f8:	f7f6 ff46 	bl	8000288 <__aeabi_dsub>
 80093fc:	2200      	movs	r2, #0
 80093fe:	2300      	movs	r3, #0
 8009400:	4682      	mov	sl, r0
 8009402:	468b      	mov	fp, r1
 8009404:	f7f7 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8009408:	2800      	cmp	r0, #0
 800940a:	d0c1      	beq.n	8009390 <_strtod_l+0x8b8>
 800940c:	e619      	b.n	8009042 <_strtod_l+0x56a>
 800940e:	4641      	mov	r1, r8
 8009410:	4620      	mov	r0, r4
 8009412:	f7ff facb 	bl	80089ac <__ratio>
 8009416:	ec57 6b10 	vmov	r6, r7, d0
 800941a:	2200      	movs	r2, #0
 800941c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009420:	4630      	mov	r0, r6
 8009422:	4639      	mov	r1, r7
 8009424:	f7f7 fb64 	bl	8000af0 <__aeabi_dcmple>
 8009428:	2800      	cmp	r0, #0
 800942a:	d06f      	beq.n	800950c <_strtod_l+0xa34>
 800942c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800942e:	2b00      	cmp	r3, #0
 8009430:	d17a      	bne.n	8009528 <_strtod_l+0xa50>
 8009432:	f1ba 0f00 	cmp.w	sl, #0
 8009436:	d158      	bne.n	80094ea <_strtod_l+0xa12>
 8009438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800943a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800943e:	2b00      	cmp	r3, #0
 8009440:	d15a      	bne.n	80094f8 <_strtod_l+0xa20>
 8009442:	4b64      	ldr	r3, [pc, #400]	@ (80095d4 <_strtod_l+0xafc>)
 8009444:	2200      	movs	r2, #0
 8009446:	4630      	mov	r0, r6
 8009448:	4639      	mov	r1, r7
 800944a:	f7f7 fb47 	bl	8000adc <__aeabi_dcmplt>
 800944e:	2800      	cmp	r0, #0
 8009450:	d159      	bne.n	8009506 <_strtod_l+0xa2e>
 8009452:	4630      	mov	r0, r6
 8009454:	4639      	mov	r1, r7
 8009456:	4b60      	ldr	r3, [pc, #384]	@ (80095d8 <_strtod_l+0xb00>)
 8009458:	2200      	movs	r2, #0
 800945a:	f7f7 f8cd 	bl	80005f8 <__aeabi_dmul>
 800945e:	4606      	mov	r6, r0
 8009460:	460f      	mov	r7, r1
 8009462:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009466:	9606      	str	r6, [sp, #24]
 8009468:	9307      	str	r3, [sp, #28]
 800946a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800946e:	4d57      	ldr	r5, [pc, #348]	@ (80095cc <_strtod_l+0xaf4>)
 8009470:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009476:	401d      	ands	r5, r3
 8009478:	4b58      	ldr	r3, [pc, #352]	@ (80095dc <_strtod_l+0xb04>)
 800947a:	429d      	cmp	r5, r3
 800947c:	f040 80b2 	bne.w	80095e4 <_strtod_l+0xb0c>
 8009480:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009482:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009486:	ec4b ab10 	vmov	d0, sl, fp
 800948a:	f7ff f9c7 	bl	800881c <__ulp>
 800948e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009492:	ec51 0b10 	vmov	r0, r1, d0
 8009496:	f7f7 f8af 	bl	80005f8 <__aeabi_dmul>
 800949a:	4652      	mov	r2, sl
 800949c:	465b      	mov	r3, fp
 800949e:	f7f6 fef5 	bl	800028c <__adddf3>
 80094a2:	460b      	mov	r3, r1
 80094a4:	4949      	ldr	r1, [pc, #292]	@ (80095cc <_strtod_l+0xaf4>)
 80094a6:	4a4e      	ldr	r2, [pc, #312]	@ (80095e0 <_strtod_l+0xb08>)
 80094a8:	4019      	ands	r1, r3
 80094aa:	4291      	cmp	r1, r2
 80094ac:	4682      	mov	sl, r0
 80094ae:	d942      	bls.n	8009536 <_strtod_l+0xa5e>
 80094b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094b2:	4b47      	ldr	r3, [pc, #284]	@ (80095d0 <_strtod_l+0xaf8>)
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d103      	bne.n	80094c0 <_strtod_l+0x9e8>
 80094b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094ba:	3301      	adds	r3, #1
 80094bc:	f43f ad2b 	beq.w	8008f16 <_strtod_l+0x43e>
 80094c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80095d0 <_strtod_l+0xaf8>
 80094c4:	f04f 3aff 	mov.w	sl, #4294967295
 80094c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80094ca:	9805      	ldr	r0, [sp, #20]
 80094cc:	f7fe fe72 	bl	80081b4 <_Bfree>
 80094d0:	9805      	ldr	r0, [sp, #20]
 80094d2:	4649      	mov	r1, r9
 80094d4:	f7fe fe6e 	bl	80081b4 <_Bfree>
 80094d8:	9805      	ldr	r0, [sp, #20]
 80094da:	4641      	mov	r1, r8
 80094dc:	f7fe fe6a 	bl	80081b4 <_Bfree>
 80094e0:	9805      	ldr	r0, [sp, #20]
 80094e2:	4621      	mov	r1, r4
 80094e4:	f7fe fe66 	bl	80081b4 <_Bfree>
 80094e8:	e618      	b.n	800911c <_strtod_l+0x644>
 80094ea:	f1ba 0f01 	cmp.w	sl, #1
 80094ee:	d103      	bne.n	80094f8 <_strtod_l+0xa20>
 80094f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f43f ada5 	beq.w	8009042 <_strtod_l+0x56a>
 80094f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80095a8 <_strtod_l+0xad0>
 80094fc:	4f35      	ldr	r7, [pc, #212]	@ (80095d4 <_strtod_l+0xafc>)
 80094fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009502:	2600      	movs	r6, #0
 8009504:	e7b1      	b.n	800946a <_strtod_l+0x992>
 8009506:	4f34      	ldr	r7, [pc, #208]	@ (80095d8 <_strtod_l+0xb00>)
 8009508:	2600      	movs	r6, #0
 800950a:	e7aa      	b.n	8009462 <_strtod_l+0x98a>
 800950c:	4b32      	ldr	r3, [pc, #200]	@ (80095d8 <_strtod_l+0xb00>)
 800950e:	4630      	mov	r0, r6
 8009510:	4639      	mov	r1, r7
 8009512:	2200      	movs	r2, #0
 8009514:	f7f7 f870 	bl	80005f8 <__aeabi_dmul>
 8009518:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800951a:	4606      	mov	r6, r0
 800951c:	460f      	mov	r7, r1
 800951e:	2b00      	cmp	r3, #0
 8009520:	d09f      	beq.n	8009462 <_strtod_l+0x98a>
 8009522:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009526:	e7a0      	b.n	800946a <_strtod_l+0x992>
 8009528:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80095b0 <_strtod_l+0xad8>
 800952c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009530:	ec57 6b17 	vmov	r6, r7, d7
 8009534:	e799      	b.n	800946a <_strtod_l+0x992>
 8009536:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800953a:	9b08      	ldr	r3, [sp, #32]
 800953c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1c1      	bne.n	80094c8 <_strtod_l+0x9f0>
 8009544:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009548:	0d1b      	lsrs	r3, r3, #20
 800954a:	051b      	lsls	r3, r3, #20
 800954c:	429d      	cmp	r5, r3
 800954e:	d1bb      	bne.n	80094c8 <_strtod_l+0x9f0>
 8009550:	4630      	mov	r0, r6
 8009552:	4639      	mov	r1, r7
 8009554:	f7f7 fbb0 	bl	8000cb8 <__aeabi_d2lz>
 8009558:	f7f7 f820 	bl	800059c <__aeabi_l2d>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4630      	mov	r0, r6
 8009562:	4639      	mov	r1, r7
 8009564:	f7f6 fe90 	bl	8000288 <__aeabi_dsub>
 8009568:	460b      	mov	r3, r1
 800956a:	4602      	mov	r2, r0
 800956c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009570:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009576:	ea46 060a 	orr.w	r6, r6, sl
 800957a:	431e      	orrs	r6, r3
 800957c:	d06f      	beq.n	800965e <_strtod_l+0xb86>
 800957e:	a30e      	add	r3, pc, #56	@ (adr r3, 80095b8 <_strtod_l+0xae0>)
 8009580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009584:	f7f7 faaa 	bl	8000adc <__aeabi_dcmplt>
 8009588:	2800      	cmp	r0, #0
 800958a:	f47f accf 	bne.w	8008f2c <_strtod_l+0x454>
 800958e:	a30c      	add	r3, pc, #48	@ (adr r3, 80095c0 <_strtod_l+0xae8>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009598:	f7f7 fabe 	bl	8000b18 <__aeabi_dcmpgt>
 800959c:	2800      	cmp	r0, #0
 800959e:	d093      	beq.n	80094c8 <_strtod_l+0x9f0>
 80095a0:	e4c4      	b.n	8008f2c <_strtod_l+0x454>
 80095a2:	bf00      	nop
 80095a4:	f3af 8000 	nop.w
 80095a8:	00000000 	.word	0x00000000
 80095ac:	bff00000 	.word	0xbff00000
 80095b0:	00000000 	.word	0x00000000
 80095b4:	3ff00000 	.word	0x3ff00000
 80095b8:	94a03595 	.word	0x94a03595
 80095bc:	3fdfffff 	.word	0x3fdfffff
 80095c0:	35afe535 	.word	0x35afe535
 80095c4:	3fe00000 	.word	0x3fe00000
 80095c8:	000fffff 	.word	0x000fffff
 80095cc:	7ff00000 	.word	0x7ff00000
 80095d0:	7fefffff 	.word	0x7fefffff
 80095d4:	3ff00000 	.word	0x3ff00000
 80095d8:	3fe00000 	.word	0x3fe00000
 80095dc:	7fe00000 	.word	0x7fe00000
 80095e0:	7c9fffff 	.word	0x7c9fffff
 80095e4:	9b08      	ldr	r3, [sp, #32]
 80095e6:	b323      	cbz	r3, 8009632 <_strtod_l+0xb5a>
 80095e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80095ec:	d821      	bhi.n	8009632 <_strtod_l+0xb5a>
 80095ee:	a328      	add	r3, pc, #160	@ (adr r3, 8009690 <_strtod_l+0xbb8>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f7 fa7a 	bl	8000af0 <__aeabi_dcmple>
 80095fc:	b1a0      	cbz	r0, 8009628 <_strtod_l+0xb50>
 80095fe:	4639      	mov	r1, r7
 8009600:	4630      	mov	r0, r6
 8009602:	f7f7 fad1 	bl	8000ba8 <__aeabi_d2uiz>
 8009606:	2801      	cmp	r0, #1
 8009608:	bf38      	it	cc
 800960a:	2001      	movcc	r0, #1
 800960c:	f7f6 ff7a 	bl	8000504 <__aeabi_ui2d>
 8009610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	b9fb      	cbnz	r3, 8009658 <_strtod_l+0xb80>
 8009618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800961c:	9014      	str	r0, [sp, #80]	@ 0x50
 800961e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009620:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009624:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009628:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800962a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800962e:	1b5b      	subs	r3, r3, r5
 8009630:	9311      	str	r3, [sp, #68]	@ 0x44
 8009632:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009636:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800963a:	f7ff f8ef 	bl	800881c <__ulp>
 800963e:	4650      	mov	r0, sl
 8009640:	ec53 2b10 	vmov	r2, r3, d0
 8009644:	4659      	mov	r1, fp
 8009646:	f7f6 ffd7 	bl	80005f8 <__aeabi_dmul>
 800964a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800964e:	f7f6 fe1d 	bl	800028c <__adddf3>
 8009652:	4682      	mov	sl, r0
 8009654:	468b      	mov	fp, r1
 8009656:	e770      	b.n	800953a <_strtod_l+0xa62>
 8009658:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800965c:	e7e0      	b.n	8009620 <_strtod_l+0xb48>
 800965e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009698 <_strtod_l+0xbc0>)
 8009660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009664:	f7f7 fa3a 	bl	8000adc <__aeabi_dcmplt>
 8009668:	e798      	b.n	800959c <_strtod_l+0xac4>
 800966a:	2300      	movs	r3, #0
 800966c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800966e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009670:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	f7ff ba6d 	b.w	8008b52 <_strtod_l+0x7a>
 8009678:	2a65      	cmp	r2, #101	@ 0x65
 800967a:	f43f ab66 	beq.w	8008d4a <_strtod_l+0x272>
 800967e:	2a45      	cmp	r2, #69	@ 0x45
 8009680:	f43f ab63 	beq.w	8008d4a <_strtod_l+0x272>
 8009684:	2301      	movs	r3, #1
 8009686:	f7ff bb9e 	b.w	8008dc6 <_strtod_l+0x2ee>
 800968a:	bf00      	nop
 800968c:	f3af 8000 	nop.w
 8009690:	ffc00000 	.word	0xffc00000
 8009694:	41dfffff 	.word	0x41dfffff
 8009698:	94a03595 	.word	0x94a03595
 800969c:	3fcfffff 	.word	0x3fcfffff

080096a0 <_strtod_r>:
 80096a0:	4b01      	ldr	r3, [pc, #4]	@ (80096a8 <_strtod_r+0x8>)
 80096a2:	f7ff ba19 	b.w	8008ad8 <_strtod_l>
 80096a6:	bf00      	nop
 80096a8:	2000006c 	.word	0x2000006c

080096ac <_strtol_l.constprop.0>:
 80096ac:	2b24      	cmp	r3, #36	@ 0x24
 80096ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b2:	4686      	mov	lr, r0
 80096b4:	4690      	mov	r8, r2
 80096b6:	d801      	bhi.n	80096bc <_strtol_l.constprop.0+0x10>
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d106      	bne.n	80096ca <_strtol_l.constprop.0+0x1e>
 80096bc:	f7fd fe70 	bl	80073a0 <__errno>
 80096c0:	2316      	movs	r3, #22
 80096c2:	6003      	str	r3, [r0, #0]
 80096c4:	2000      	movs	r0, #0
 80096c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ca:	4834      	ldr	r0, [pc, #208]	@ (800979c <_strtol_l.constprop.0+0xf0>)
 80096cc:	460d      	mov	r5, r1
 80096ce:	462a      	mov	r2, r5
 80096d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096d4:	5d06      	ldrb	r6, [r0, r4]
 80096d6:	f016 0608 	ands.w	r6, r6, #8
 80096da:	d1f8      	bne.n	80096ce <_strtol_l.constprop.0+0x22>
 80096dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80096de:	d12d      	bne.n	800973c <_strtol_l.constprop.0+0x90>
 80096e0:	782c      	ldrb	r4, [r5, #0]
 80096e2:	2601      	movs	r6, #1
 80096e4:	1c95      	adds	r5, r2, #2
 80096e6:	f033 0210 	bics.w	r2, r3, #16
 80096ea:	d109      	bne.n	8009700 <_strtol_l.constprop.0+0x54>
 80096ec:	2c30      	cmp	r4, #48	@ 0x30
 80096ee:	d12a      	bne.n	8009746 <_strtol_l.constprop.0+0x9a>
 80096f0:	782a      	ldrb	r2, [r5, #0]
 80096f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096f6:	2a58      	cmp	r2, #88	@ 0x58
 80096f8:	d125      	bne.n	8009746 <_strtol_l.constprop.0+0x9a>
 80096fa:	786c      	ldrb	r4, [r5, #1]
 80096fc:	2310      	movs	r3, #16
 80096fe:	3502      	adds	r5, #2
 8009700:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009704:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009708:	2200      	movs	r2, #0
 800970a:	fbbc f9f3 	udiv	r9, ip, r3
 800970e:	4610      	mov	r0, r2
 8009710:	fb03 ca19 	mls	sl, r3, r9, ip
 8009714:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009718:	2f09      	cmp	r7, #9
 800971a:	d81b      	bhi.n	8009754 <_strtol_l.constprop.0+0xa8>
 800971c:	463c      	mov	r4, r7
 800971e:	42a3      	cmp	r3, r4
 8009720:	dd27      	ble.n	8009772 <_strtol_l.constprop.0+0xc6>
 8009722:	1c57      	adds	r7, r2, #1
 8009724:	d007      	beq.n	8009736 <_strtol_l.constprop.0+0x8a>
 8009726:	4581      	cmp	r9, r0
 8009728:	d320      	bcc.n	800976c <_strtol_l.constprop.0+0xc0>
 800972a:	d101      	bne.n	8009730 <_strtol_l.constprop.0+0x84>
 800972c:	45a2      	cmp	sl, r4
 800972e:	db1d      	blt.n	800976c <_strtol_l.constprop.0+0xc0>
 8009730:	fb00 4003 	mla	r0, r0, r3, r4
 8009734:	2201      	movs	r2, #1
 8009736:	f815 4b01 	ldrb.w	r4, [r5], #1
 800973a:	e7eb      	b.n	8009714 <_strtol_l.constprop.0+0x68>
 800973c:	2c2b      	cmp	r4, #43	@ 0x2b
 800973e:	bf04      	itt	eq
 8009740:	782c      	ldrbeq	r4, [r5, #0]
 8009742:	1c95      	addeq	r5, r2, #2
 8009744:	e7cf      	b.n	80096e6 <_strtol_l.constprop.0+0x3a>
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1da      	bne.n	8009700 <_strtol_l.constprop.0+0x54>
 800974a:	2c30      	cmp	r4, #48	@ 0x30
 800974c:	bf0c      	ite	eq
 800974e:	2308      	moveq	r3, #8
 8009750:	230a      	movne	r3, #10
 8009752:	e7d5      	b.n	8009700 <_strtol_l.constprop.0+0x54>
 8009754:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009758:	2f19      	cmp	r7, #25
 800975a:	d801      	bhi.n	8009760 <_strtol_l.constprop.0+0xb4>
 800975c:	3c37      	subs	r4, #55	@ 0x37
 800975e:	e7de      	b.n	800971e <_strtol_l.constprop.0+0x72>
 8009760:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009764:	2f19      	cmp	r7, #25
 8009766:	d804      	bhi.n	8009772 <_strtol_l.constprop.0+0xc6>
 8009768:	3c57      	subs	r4, #87	@ 0x57
 800976a:	e7d8      	b.n	800971e <_strtol_l.constprop.0+0x72>
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	e7e1      	b.n	8009736 <_strtol_l.constprop.0+0x8a>
 8009772:	1c53      	adds	r3, r2, #1
 8009774:	d108      	bne.n	8009788 <_strtol_l.constprop.0+0xdc>
 8009776:	2322      	movs	r3, #34	@ 0x22
 8009778:	f8ce 3000 	str.w	r3, [lr]
 800977c:	4660      	mov	r0, ip
 800977e:	f1b8 0f00 	cmp.w	r8, #0
 8009782:	d0a0      	beq.n	80096c6 <_strtol_l.constprop.0+0x1a>
 8009784:	1e69      	subs	r1, r5, #1
 8009786:	e006      	b.n	8009796 <_strtol_l.constprop.0+0xea>
 8009788:	b106      	cbz	r6, 800978c <_strtol_l.constprop.0+0xe0>
 800978a:	4240      	negs	r0, r0
 800978c:	f1b8 0f00 	cmp.w	r8, #0
 8009790:	d099      	beq.n	80096c6 <_strtol_l.constprop.0+0x1a>
 8009792:	2a00      	cmp	r2, #0
 8009794:	d1f6      	bne.n	8009784 <_strtol_l.constprop.0+0xd8>
 8009796:	f8c8 1000 	str.w	r1, [r8]
 800979a:	e794      	b.n	80096c6 <_strtol_l.constprop.0+0x1a>
 800979c:	0800b1b1 	.word	0x0800b1b1

080097a0 <_strtol_r>:
 80097a0:	f7ff bf84 	b.w	80096ac <_strtol_l.constprop.0>

080097a4 <__ssputs_r>:
 80097a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a8:	688e      	ldr	r6, [r1, #8]
 80097aa:	461f      	mov	r7, r3
 80097ac:	42be      	cmp	r6, r7
 80097ae:	680b      	ldr	r3, [r1, #0]
 80097b0:	4682      	mov	sl, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	4690      	mov	r8, r2
 80097b6:	d82d      	bhi.n	8009814 <__ssputs_r+0x70>
 80097b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097c0:	d026      	beq.n	8009810 <__ssputs_r+0x6c>
 80097c2:	6965      	ldr	r5, [r4, #20]
 80097c4:	6909      	ldr	r1, [r1, #16]
 80097c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097ca:	eba3 0901 	sub.w	r9, r3, r1
 80097ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097d2:	1c7b      	adds	r3, r7, #1
 80097d4:	444b      	add	r3, r9
 80097d6:	106d      	asrs	r5, r5, #1
 80097d8:	429d      	cmp	r5, r3
 80097da:	bf38      	it	cc
 80097dc:	461d      	movcc	r5, r3
 80097de:	0553      	lsls	r3, r2, #21
 80097e0:	d527      	bpl.n	8009832 <__ssputs_r+0x8e>
 80097e2:	4629      	mov	r1, r5
 80097e4:	f7fc fce4 	bl	80061b0 <_malloc_r>
 80097e8:	4606      	mov	r6, r0
 80097ea:	b360      	cbz	r0, 8009846 <__ssputs_r+0xa2>
 80097ec:	6921      	ldr	r1, [r4, #16]
 80097ee:	464a      	mov	r2, r9
 80097f0:	f000 fa08 	bl	8009c04 <memcpy>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	6126      	str	r6, [r4, #16]
 8009802:	6165      	str	r5, [r4, #20]
 8009804:	444e      	add	r6, r9
 8009806:	eba5 0509 	sub.w	r5, r5, r9
 800980a:	6026      	str	r6, [r4, #0]
 800980c:	60a5      	str	r5, [r4, #8]
 800980e:	463e      	mov	r6, r7
 8009810:	42be      	cmp	r6, r7
 8009812:	d900      	bls.n	8009816 <__ssputs_r+0x72>
 8009814:	463e      	mov	r6, r7
 8009816:	6820      	ldr	r0, [r4, #0]
 8009818:	4632      	mov	r2, r6
 800981a:	4641      	mov	r1, r8
 800981c:	f000 f9c6 	bl	8009bac <memmove>
 8009820:	68a3      	ldr	r3, [r4, #8]
 8009822:	1b9b      	subs	r3, r3, r6
 8009824:	60a3      	str	r3, [r4, #8]
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	4433      	add	r3, r6
 800982a:	6023      	str	r3, [r4, #0]
 800982c:	2000      	movs	r0, #0
 800982e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009832:	462a      	mov	r2, r5
 8009834:	f000 fd79 	bl	800a32a <_realloc_r>
 8009838:	4606      	mov	r6, r0
 800983a:	2800      	cmp	r0, #0
 800983c:	d1e0      	bne.n	8009800 <__ssputs_r+0x5c>
 800983e:	6921      	ldr	r1, [r4, #16]
 8009840:	4650      	mov	r0, sl
 8009842:	f7fe fc2d 	bl	80080a0 <_free_r>
 8009846:	230c      	movs	r3, #12
 8009848:	f8ca 3000 	str.w	r3, [sl]
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009852:	81a3      	strh	r3, [r4, #12]
 8009854:	f04f 30ff 	mov.w	r0, #4294967295
 8009858:	e7e9      	b.n	800982e <__ssputs_r+0x8a>
	...

0800985c <_svfiprintf_r>:
 800985c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009860:	4698      	mov	r8, r3
 8009862:	898b      	ldrh	r3, [r1, #12]
 8009864:	061b      	lsls	r3, r3, #24
 8009866:	b09d      	sub	sp, #116	@ 0x74
 8009868:	4607      	mov	r7, r0
 800986a:	460d      	mov	r5, r1
 800986c:	4614      	mov	r4, r2
 800986e:	d510      	bpl.n	8009892 <_svfiprintf_r+0x36>
 8009870:	690b      	ldr	r3, [r1, #16]
 8009872:	b973      	cbnz	r3, 8009892 <_svfiprintf_r+0x36>
 8009874:	2140      	movs	r1, #64	@ 0x40
 8009876:	f7fc fc9b 	bl	80061b0 <_malloc_r>
 800987a:	6028      	str	r0, [r5, #0]
 800987c:	6128      	str	r0, [r5, #16]
 800987e:	b930      	cbnz	r0, 800988e <_svfiprintf_r+0x32>
 8009880:	230c      	movs	r3, #12
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	f04f 30ff 	mov.w	r0, #4294967295
 8009888:	b01d      	add	sp, #116	@ 0x74
 800988a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800988e:	2340      	movs	r3, #64	@ 0x40
 8009890:	616b      	str	r3, [r5, #20]
 8009892:	2300      	movs	r3, #0
 8009894:	9309      	str	r3, [sp, #36]	@ 0x24
 8009896:	2320      	movs	r3, #32
 8009898:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800989c:	f8cd 800c 	str.w	r8, [sp, #12]
 80098a0:	2330      	movs	r3, #48	@ 0x30
 80098a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a40 <_svfiprintf_r+0x1e4>
 80098a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098aa:	f04f 0901 	mov.w	r9, #1
 80098ae:	4623      	mov	r3, r4
 80098b0:	469a      	mov	sl, r3
 80098b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098b6:	b10a      	cbz	r2, 80098bc <_svfiprintf_r+0x60>
 80098b8:	2a25      	cmp	r2, #37	@ 0x25
 80098ba:	d1f9      	bne.n	80098b0 <_svfiprintf_r+0x54>
 80098bc:	ebba 0b04 	subs.w	fp, sl, r4
 80098c0:	d00b      	beq.n	80098da <_svfiprintf_r+0x7e>
 80098c2:	465b      	mov	r3, fp
 80098c4:	4622      	mov	r2, r4
 80098c6:	4629      	mov	r1, r5
 80098c8:	4638      	mov	r0, r7
 80098ca:	f7ff ff6b 	bl	80097a4 <__ssputs_r>
 80098ce:	3001      	adds	r0, #1
 80098d0:	f000 80a7 	beq.w	8009a22 <_svfiprintf_r+0x1c6>
 80098d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098d6:	445a      	add	r2, fp
 80098d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80098da:	f89a 3000 	ldrb.w	r3, [sl]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 809f 	beq.w	8009a22 <_svfiprintf_r+0x1c6>
 80098e4:	2300      	movs	r3, #0
 80098e6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098ee:	f10a 0a01 	add.w	sl, sl, #1
 80098f2:	9304      	str	r3, [sp, #16]
 80098f4:	9307      	str	r3, [sp, #28]
 80098f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80098fc:	4654      	mov	r4, sl
 80098fe:	2205      	movs	r2, #5
 8009900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009904:	484e      	ldr	r0, [pc, #312]	@ (8009a40 <_svfiprintf_r+0x1e4>)
 8009906:	f7f6 fc63 	bl	80001d0 <memchr>
 800990a:	9a04      	ldr	r2, [sp, #16]
 800990c:	b9d8      	cbnz	r0, 8009946 <_svfiprintf_r+0xea>
 800990e:	06d0      	lsls	r0, r2, #27
 8009910:	bf44      	itt	mi
 8009912:	2320      	movmi	r3, #32
 8009914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009918:	0711      	lsls	r1, r2, #28
 800991a:	bf44      	itt	mi
 800991c:	232b      	movmi	r3, #43	@ 0x2b
 800991e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009922:	f89a 3000 	ldrb.w	r3, [sl]
 8009926:	2b2a      	cmp	r3, #42	@ 0x2a
 8009928:	d015      	beq.n	8009956 <_svfiprintf_r+0xfa>
 800992a:	9a07      	ldr	r2, [sp, #28]
 800992c:	4654      	mov	r4, sl
 800992e:	2000      	movs	r0, #0
 8009930:	f04f 0c0a 	mov.w	ip, #10
 8009934:	4621      	mov	r1, r4
 8009936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800993a:	3b30      	subs	r3, #48	@ 0x30
 800993c:	2b09      	cmp	r3, #9
 800993e:	d94b      	bls.n	80099d8 <_svfiprintf_r+0x17c>
 8009940:	b1b0      	cbz	r0, 8009970 <_svfiprintf_r+0x114>
 8009942:	9207      	str	r2, [sp, #28]
 8009944:	e014      	b.n	8009970 <_svfiprintf_r+0x114>
 8009946:	eba0 0308 	sub.w	r3, r0, r8
 800994a:	fa09 f303 	lsl.w	r3, r9, r3
 800994e:	4313      	orrs	r3, r2
 8009950:	9304      	str	r3, [sp, #16]
 8009952:	46a2      	mov	sl, r4
 8009954:	e7d2      	b.n	80098fc <_svfiprintf_r+0xa0>
 8009956:	9b03      	ldr	r3, [sp, #12]
 8009958:	1d19      	adds	r1, r3, #4
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	9103      	str	r1, [sp, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	bfbb      	ittet	lt
 8009962:	425b      	neglt	r3, r3
 8009964:	f042 0202 	orrlt.w	r2, r2, #2
 8009968:	9307      	strge	r3, [sp, #28]
 800996a:	9307      	strlt	r3, [sp, #28]
 800996c:	bfb8      	it	lt
 800996e:	9204      	strlt	r2, [sp, #16]
 8009970:	7823      	ldrb	r3, [r4, #0]
 8009972:	2b2e      	cmp	r3, #46	@ 0x2e
 8009974:	d10a      	bne.n	800998c <_svfiprintf_r+0x130>
 8009976:	7863      	ldrb	r3, [r4, #1]
 8009978:	2b2a      	cmp	r3, #42	@ 0x2a
 800997a:	d132      	bne.n	80099e2 <_svfiprintf_r+0x186>
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	1d1a      	adds	r2, r3, #4
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	9203      	str	r2, [sp, #12]
 8009984:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009988:	3402      	adds	r4, #2
 800998a:	9305      	str	r3, [sp, #20]
 800998c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a50 <_svfiprintf_r+0x1f4>
 8009990:	7821      	ldrb	r1, [r4, #0]
 8009992:	2203      	movs	r2, #3
 8009994:	4650      	mov	r0, sl
 8009996:	f7f6 fc1b 	bl	80001d0 <memchr>
 800999a:	b138      	cbz	r0, 80099ac <_svfiprintf_r+0x150>
 800999c:	9b04      	ldr	r3, [sp, #16]
 800999e:	eba0 000a 	sub.w	r0, r0, sl
 80099a2:	2240      	movs	r2, #64	@ 0x40
 80099a4:	4082      	lsls	r2, r0
 80099a6:	4313      	orrs	r3, r2
 80099a8:	3401      	adds	r4, #1
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099b0:	4824      	ldr	r0, [pc, #144]	@ (8009a44 <_svfiprintf_r+0x1e8>)
 80099b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099b6:	2206      	movs	r2, #6
 80099b8:	f7f6 fc0a 	bl	80001d0 <memchr>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d036      	beq.n	8009a2e <_svfiprintf_r+0x1d2>
 80099c0:	4b21      	ldr	r3, [pc, #132]	@ (8009a48 <_svfiprintf_r+0x1ec>)
 80099c2:	bb1b      	cbnz	r3, 8009a0c <_svfiprintf_r+0x1b0>
 80099c4:	9b03      	ldr	r3, [sp, #12]
 80099c6:	3307      	adds	r3, #7
 80099c8:	f023 0307 	bic.w	r3, r3, #7
 80099cc:	3308      	adds	r3, #8
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d2:	4433      	add	r3, r6
 80099d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80099d6:	e76a      	b.n	80098ae <_svfiprintf_r+0x52>
 80099d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80099dc:	460c      	mov	r4, r1
 80099de:	2001      	movs	r0, #1
 80099e0:	e7a8      	b.n	8009934 <_svfiprintf_r+0xd8>
 80099e2:	2300      	movs	r3, #0
 80099e4:	3401      	adds	r4, #1
 80099e6:	9305      	str	r3, [sp, #20]
 80099e8:	4619      	mov	r1, r3
 80099ea:	f04f 0c0a 	mov.w	ip, #10
 80099ee:	4620      	mov	r0, r4
 80099f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099f4:	3a30      	subs	r2, #48	@ 0x30
 80099f6:	2a09      	cmp	r2, #9
 80099f8:	d903      	bls.n	8009a02 <_svfiprintf_r+0x1a6>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d0c6      	beq.n	800998c <_svfiprintf_r+0x130>
 80099fe:	9105      	str	r1, [sp, #20]
 8009a00:	e7c4      	b.n	800998c <_svfiprintf_r+0x130>
 8009a02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a06:	4604      	mov	r4, r0
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e7f0      	b.n	80099ee <_svfiprintf_r+0x192>
 8009a0c:	ab03      	add	r3, sp, #12
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	462a      	mov	r2, r5
 8009a12:	4b0e      	ldr	r3, [pc, #56]	@ (8009a4c <_svfiprintf_r+0x1f0>)
 8009a14:	a904      	add	r1, sp, #16
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7fc fcf6 	bl	8006408 <_printf_float>
 8009a1c:	1c42      	adds	r2, r0, #1
 8009a1e:	4606      	mov	r6, r0
 8009a20:	d1d6      	bne.n	80099d0 <_svfiprintf_r+0x174>
 8009a22:	89ab      	ldrh	r3, [r5, #12]
 8009a24:	065b      	lsls	r3, r3, #25
 8009a26:	f53f af2d 	bmi.w	8009884 <_svfiprintf_r+0x28>
 8009a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a2c:	e72c      	b.n	8009888 <_svfiprintf_r+0x2c>
 8009a2e:	ab03      	add	r3, sp, #12
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	462a      	mov	r2, r5
 8009a34:	4b05      	ldr	r3, [pc, #20]	@ (8009a4c <_svfiprintf_r+0x1f0>)
 8009a36:	a904      	add	r1, sp, #16
 8009a38:	4638      	mov	r0, r7
 8009a3a:	f7fc ff7d 	bl	8006938 <_printf_i>
 8009a3e:	e7ed      	b.n	8009a1c <_svfiprintf_r+0x1c0>
 8009a40:	0800b2b1 	.word	0x0800b2b1
 8009a44:	0800b2bb 	.word	0x0800b2bb
 8009a48:	08006409 	.word	0x08006409
 8009a4c:	080097a5 	.word	0x080097a5
 8009a50:	0800b2b7 	.word	0x0800b2b7

08009a54 <__sflush_r>:
 8009a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5c:	0716      	lsls	r6, r2, #28
 8009a5e:	4605      	mov	r5, r0
 8009a60:	460c      	mov	r4, r1
 8009a62:	d454      	bmi.n	8009b0e <__sflush_r+0xba>
 8009a64:	684b      	ldr	r3, [r1, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	dc02      	bgt.n	8009a70 <__sflush_r+0x1c>
 8009a6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dd48      	ble.n	8009b02 <__sflush_r+0xae>
 8009a70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a72:	2e00      	cmp	r6, #0
 8009a74:	d045      	beq.n	8009b02 <__sflush_r+0xae>
 8009a76:	2300      	movs	r3, #0
 8009a78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a7c:	682f      	ldr	r7, [r5, #0]
 8009a7e:	6a21      	ldr	r1, [r4, #32]
 8009a80:	602b      	str	r3, [r5, #0]
 8009a82:	d030      	beq.n	8009ae6 <__sflush_r+0x92>
 8009a84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	0759      	lsls	r1, r3, #29
 8009a8a:	d505      	bpl.n	8009a98 <__sflush_r+0x44>
 8009a8c:	6863      	ldr	r3, [r4, #4]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a92:	b10b      	cbz	r3, 8009a98 <__sflush_r+0x44>
 8009a94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a96:	1ad2      	subs	r2, r2, r3
 8009a98:	2300      	movs	r3, #0
 8009a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a9c:	6a21      	ldr	r1, [r4, #32]
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b0      	blx	r6
 8009aa2:	1c43      	adds	r3, r0, #1
 8009aa4:	89a3      	ldrh	r3, [r4, #12]
 8009aa6:	d106      	bne.n	8009ab6 <__sflush_r+0x62>
 8009aa8:	6829      	ldr	r1, [r5, #0]
 8009aaa:	291d      	cmp	r1, #29
 8009aac:	d82b      	bhi.n	8009b06 <__sflush_r+0xb2>
 8009aae:	4a2a      	ldr	r2, [pc, #168]	@ (8009b58 <__sflush_r+0x104>)
 8009ab0:	410a      	asrs	r2, r1
 8009ab2:	07d6      	lsls	r6, r2, #31
 8009ab4:	d427      	bmi.n	8009b06 <__sflush_r+0xb2>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	6062      	str	r2, [r4, #4]
 8009aba:	04d9      	lsls	r1, r3, #19
 8009abc:	6922      	ldr	r2, [r4, #16]
 8009abe:	6022      	str	r2, [r4, #0]
 8009ac0:	d504      	bpl.n	8009acc <__sflush_r+0x78>
 8009ac2:	1c42      	adds	r2, r0, #1
 8009ac4:	d101      	bne.n	8009aca <__sflush_r+0x76>
 8009ac6:	682b      	ldr	r3, [r5, #0]
 8009ac8:	b903      	cbnz	r3, 8009acc <__sflush_r+0x78>
 8009aca:	6560      	str	r0, [r4, #84]	@ 0x54
 8009acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ace:	602f      	str	r7, [r5, #0]
 8009ad0:	b1b9      	cbz	r1, 8009b02 <__sflush_r+0xae>
 8009ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	d002      	beq.n	8009ae0 <__sflush_r+0x8c>
 8009ada:	4628      	mov	r0, r5
 8009adc:	f7fe fae0 	bl	80080a0 <_free_r>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ae4:	e00d      	b.n	8009b02 <__sflush_r+0xae>
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	4628      	mov	r0, r5
 8009aea:	47b0      	blx	r6
 8009aec:	4602      	mov	r2, r0
 8009aee:	1c50      	adds	r0, r2, #1
 8009af0:	d1c9      	bne.n	8009a86 <__sflush_r+0x32>
 8009af2:	682b      	ldr	r3, [r5, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d0c6      	beq.n	8009a86 <__sflush_r+0x32>
 8009af8:	2b1d      	cmp	r3, #29
 8009afa:	d001      	beq.n	8009b00 <__sflush_r+0xac>
 8009afc:	2b16      	cmp	r3, #22
 8009afe:	d11e      	bne.n	8009b3e <__sflush_r+0xea>
 8009b00:	602f      	str	r7, [r5, #0]
 8009b02:	2000      	movs	r0, #0
 8009b04:	e022      	b.n	8009b4c <__sflush_r+0xf8>
 8009b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b0a:	b21b      	sxth	r3, r3
 8009b0c:	e01b      	b.n	8009b46 <__sflush_r+0xf2>
 8009b0e:	690f      	ldr	r7, [r1, #16]
 8009b10:	2f00      	cmp	r7, #0
 8009b12:	d0f6      	beq.n	8009b02 <__sflush_r+0xae>
 8009b14:	0793      	lsls	r3, r2, #30
 8009b16:	680e      	ldr	r6, [r1, #0]
 8009b18:	bf08      	it	eq
 8009b1a:	694b      	ldreq	r3, [r1, #20]
 8009b1c:	600f      	str	r7, [r1, #0]
 8009b1e:	bf18      	it	ne
 8009b20:	2300      	movne	r3, #0
 8009b22:	eba6 0807 	sub.w	r8, r6, r7
 8009b26:	608b      	str	r3, [r1, #8]
 8009b28:	f1b8 0f00 	cmp.w	r8, #0
 8009b2c:	dde9      	ble.n	8009b02 <__sflush_r+0xae>
 8009b2e:	6a21      	ldr	r1, [r4, #32]
 8009b30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b32:	4643      	mov	r3, r8
 8009b34:	463a      	mov	r2, r7
 8009b36:	4628      	mov	r0, r5
 8009b38:	47b0      	blx	r6
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	dc08      	bgt.n	8009b50 <__sflush_r+0xfc>
 8009b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b50:	4407      	add	r7, r0
 8009b52:	eba8 0800 	sub.w	r8, r8, r0
 8009b56:	e7e7      	b.n	8009b28 <__sflush_r+0xd4>
 8009b58:	dfbffffe 	.word	0xdfbffffe

08009b5c <_fflush_r>:
 8009b5c:	b538      	push	{r3, r4, r5, lr}
 8009b5e:	690b      	ldr	r3, [r1, #16]
 8009b60:	4605      	mov	r5, r0
 8009b62:	460c      	mov	r4, r1
 8009b64:	b913      	cbnz	r3, 8009b6c <_fflush_r+0x10>
 8009b66:	2500      	movs	r5, #0
 8009b68:	4628      	mov	r0, r5
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	b118      	cbz	r0, 8009b76 <_fflush_r+0x1a>
 8009b6e:	6a03      	ldr	r3, [r0, #32]
 8009b70:	b90b      	cbnz	r3, 8009b76 <_fflush_r+0x1a>
 8009b72:	f7fd faa1 	bl	80070b8 <__sinit>
 8009b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d0f3      	beq.n	8009b66 <_fflush_r+0xa>
 8009b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b80:	07d0      	lsls	r0, r2, #31
 8009b82:	d404      	bmi.n	8009b8e <_fflush_r+0x32>
 8009b84:	0599      	lsls	r1, r3, #22
 8009b86:	d402      	bmi.n	8009b8e <_fflush_r+0x32>
 8009b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b8a:	f7fd fc34 	bl	80073f6 <__retarget_lock_acquire_recursive>
 8009b8e:	4628      	mov	r0, r5
 8009b90:	4621      	mov	r1, r4
 8009b92:	f7ff ff5f 	bl	8009a54 <__sflush_r>
 8009b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b98:	07da      	lsls	r2, r3, #31
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	d4e4      	bmi.n	8009b68 <_fflush_r+0xc>
 8009b9e:	89a3      	ldrh	r3, [r4, #12]
 8009ba0:	059b      	lsls	r3, r3, #22
 8009ba2:	d4e1      	bmi.n	8009b68 <_fflush_r+0xc>
 8009ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ba6:	f7fd fc27 	bl	80073f8 <__retarget_lock_release_recursive>
 8009baa:	e7dd      	b.n	8009b68 <_fflush_r+0xc>

08009bac <memmove>:
 8009bac:	4288      	cmp	r0, r1
 8009bae:	b510      	push	{r4, lr}
 8009bb0:	eb01 0402 	add.w	r4, r1, r2
 8009bb4:	d902      	bls.n	8009bbc <memmove+0x10>
 8009bb6:	4284      	cmp	r4, r0
 8009bb8:	4623      	mov	r3, r4
 8009bba:	d807      	bhi.n	8009bcc <memmove+0x20>
 8009bbc:	1e43      	subs	r3, r0, #1
 8009bbe:	42a1      	cmp	r1, r4
 8009bc0:	d008      	beq.n	8009bd4 <memmove+0x28>
 8009bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bca:	e7f8      	b.n	8009bbe <memmove+0x12>
 8009bcc:	4402      	add	r2, r0
 8009bce:	4601      	mov	r1, r0
 8009bd0:	428a      	cmp	r2, r1
 8009bd2:	d100      	bne.n	8009bd6 <memmove+0x2a>
 8009bd4:	bd10      	pop	{r4, pc}
 8009bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bde:	e7f7      	b.n	8009bd0 <memmove+0x24>

08009be0 <strncmp>:
 8009be0:	b510      	push	{r4, lr}
 8009be2:	b16a      	cbz	r2, 8009c00 <strncmp+0x20>
 8009be4:	3901      	subs	r1, #1
 8009be6:	1884      	adds	r4, r0, r2
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d103      	bne.n	8009bfc <strncmp+0x1c>
 8009bf4:	42a0      	cmp	r0, r4
 8009bf6:	d001      	beq.n	8009bfc <strncmp+0x1c>
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	d1f5      	bne.n	8009be8 <strncmp+0x8>
 8009bfc:	1ad0      	subs	r0, r2, r3
 8009bfe:	bd10      	pop	{r4, pc}
 8009c00:	4610      	mov	r0, r2
 8009c02:	e7fc      	b.n	8009bfe <strncmp+0x1e>

08009c04 <memcpy>:
 8009c04:	440a      	add	r2, r1
 8009c06:	4291      	cmp	r1, r2
 8009c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c0c:	d100      	bne.n	8009c10 <memcpy+0xc>
 8009c0e:	4770      	bx	lr
 8009c10:	b510      	push	{r4, lr}
 8009c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c1a:	4291      	cmp	r1, r2
 8009c1c:	d1f9      	bne.n	8009c12 <memcpy+0xe>
 8009c1e:	bd10      	pop	{r4, pc}

08009c20 <nan>:
 8009c20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009c28 <nan+0x8>
 8009c24:	4770      	bx	lr
 8009c26:	bf00      	nop
 8009c28:	00000000 	.word	0x00000000
 8009c2c:	7ff80000 	.word	0x7ff80000

08009c30 <__assert_func>:
 8009c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c32:	4614      	mov	r4, r2
 8009c34:	461a      	mov	r2, r3
 8009c36:	4b09      	ldr	r3, [pc, #36]	@ (8009c5c <__assert_func+0x2c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	68d8      	ldr	r0, [r3, #12]
 8009c3e:	b954      	cbnz	r4, 8009c56 <__assert_func+0x26>
 8009c40:	4b07      	ldr	r3, [pc, #28]	@ (8009c60 <__assert_func+0x30>)
 8009c42:	461c      	mov	r4, r3
 8009c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c48:	9100      	str	r1, [sp, #0]
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	4905      	ldr	r1, [pc, #20]	@ (8009c64 <__assert_func+0x34>)
 8009c4e:	f000 fba7 	bl	800a3a0 <fiprintf>
 8009c52:	f7fc fa73 	bl	800613c <abort>
 8009c56:	4b04      	ldr	r3, [pc, #16]	@ (8009c68 <__assert_func+0x38>)
 8009c58:	e7f4      	b.n	8009c44 <__assert_func+0x14>
 8009c5a:	bf00      	nop
 8009c5c:	2000001c 	.word	0x2000001c
 8009c60:	0800b305 	.word	0x0800b305
 8009c64:	0800b2d7 	.word	0x0800b2d7
 8009c68:	0800b2ca 	.word	0x0800b2ca

08009c6c <_calloc_r>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	fba1 5402 	umull	r5, r4, r1, r2
 8009c72:	b93c      	cbnz	r4, 8009c84 <_calloc_r+0x18>
 8009c74:	4629      	mov	r1, r5
 8009c76:	f7fc fa9b 	bl	80061b0 <_malloc_r>
 8009c7a:	4606      	mov	r6, r0
 8009c7c:	b928      	cbnz	r0, 8009c8a <_calloc_r+0x1e>
 8009c7e:	2600      	movs	r6, #0
 8009c80:	4630      	mov	r0, r6
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	220c      	movs	r2, #12
 8009c86:	6002      	str	r2, [r0, #0]
 8009c88:	e7f9      	b.n	8009c7e <_calloc_r+0x12>
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	f7fd fae0 	bl	8007252 <memset>
 8009c92:	e7f5      	b.n	8009c80 <_calloc_r+0x14>

08009c94 <rshift>:
 8009c94:	6903      	ldr	r3, [r0, #16]
 8009c96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ca2:	f100 0414 	add.w	r4, r0, #20
 8009ca6:	dd45      	ble.n	8009d34 <rshift+0xa0>
 8009ca8:	f011 011f 	ands.w	r1, r1, #31
 8009cac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cb4:	d10c      	bne.n	8009cd0 <rshift+0x3c>
 8009cb6:	f100 0710 	add.w	r7, r0, #16
 8009cba:	4629      	mov	r1, r5
 8009cbc:	42b1      	cmp	r1, r6
 8009cbe:	d334      	bcc.n	8009d2a <rshift+0x96>
 8009cc0:	1a9b      	subs	r3, r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	1eea      	subs	r2, r5, #3
 8009cc6:	4296      	cmp	r6, r2
 8009cc8:	bf38      	it	cc
 8009cca:	2300      	movcc	r3, #0
 8009ccc:	4423      	add	r3, r4
 8009cce:	e015      	b.n	8009cfc <rshift+0x68>
 8009cd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cd4:	f1c1 0820 	rsb	r8, r1, #32
 8009cd8:	40cf      	lsrs	r7, r1
 8009cda:	f105 0e04 	add.w	lr, r5, #4
 8009cde:	46a1      	mov	r9, r4
 8009ce0:	4576      	cmp	r6, lr
 8009ce2:	46f4      	mov	ip, lr
 8009ce4:	d815      	bhi.n	8009d12 <rshift+0x7e>
 8009ce6:	1a9a      	subs	r2, r3, r2
 8009ce8:	0092      	lsls	r2, r2, #2
 8009cea:	3a04      	subs	r2, #4
 8009cec:	3501      	adds	r5, #1
 8009cee:	42ae      	cmp	r6, r5
 8009cf0:	bf38      	it	cc
 8009cf2:	2200      	movcc	r2, #0
 8009cf4:	18a3      	adds	r3, r4, r2
 8009cf6:	50a7      	str	r7, [r4, r2]
 8009cf8:	b107      	cbz	r7, 8009cfc <rshift+0x68>
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	1b1a      	subs	r2, r3, r4
 8009cfe:	42a3      	cmp	r3, r4
 8009d00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d04:	bf08      	it	eq
 8009d06:	2300      	moveq	r3, #0
 8009d08:	6102      	str	r2, [r0, #16]
 8009d0a:	bf08      	it	eq
 8009d0c:	6143      	streq	r3, [r0, #20]
 8009d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d12:	f8dc c000 	ldr.w	ip, [ip]
 8009d16:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d1a:	ea4c 0707 	orr.w	r7, ip, r7
 8009d1e:	f849 7b04 	str.w	r7, [r9], #4
 8009d22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d26:	40cf      	lsrs	r7, r1
 8009d28:	e7da      	b.n	8009ce0 <rshift+0x4c>
 8009d2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d32:	e7c3      	b.n	8009cbc <rshift+0x28>
 8009d34:	4623      	mov	r3, r4
 8009d36:	e7e1      	b.n	8009cfc <rshift+0x68>

08009d38 <__hexdig_fun>:
 8009d38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d3c:	2b09      	cmp	r3, #9
 8009d3e:	d802      	bhi.n	8009d46 <__hexdig_fun+0xe>
 8009d40:	3820      	subs	r0, #32
 8009d42:	b2c0      	uxtb	r0, r0
 8009d44:	4770      	bx	lr
 8009d46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d4a:	2b05      	cmp	r3, #5
 8009d4c:	d801      	bhi.n	8009d52 <__hexdig_fun+0x1a>
 8009d4e:	3847      	subs	r0, #71	@ 0x47
 8009d50:	e7f7      	b.n	8009d42 <__hexdig_fun+0xa>
 8009d52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d56:	2b05      	cmp	r3, #5
 8009d58:	d801      	bhi.n	8009d5e <__hexdig_fun+0x26>
 8009d5a:	3827      	subs	r0, #39	@ 0x27
 8009d5c:	e7f1      	b.n	8009d42 <__hexdig_fun+0xa>
 8009d5e:	2000      	movs	r0, #0
 8009d60:	4770      	bx	lr
	...

08009d64 <__gethex>:
 8009d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d68:	b085      	sub	sp, #20
 8009d6a:	468a      	mov	sl, r1
 8009d6c:	9302      	str	r3, [sp, #8]
 8009d6e:	680b      	ldr	r3, [r1, #0]
 8009d70:	9001      	str	r0, [sp, #4]
 8009d72:	4690      	mov	r8, r2
 8009d74:	1c9c      	adds	r4, r3, #2
 8009d76:	46a1      	mov	r9, r4
 8009d78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d7c:	2830      	cmp	r0, #48	@ 0x30
 8009d7e:	d0fa      	beq.n	8009d76 <__gethex+0x12>
 8009d80:	eba9 0303 	sub.w	r3, r9, r3
 8009d84:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d88:	f7ff ffd6 	bl	8009d38 <__hexdig_fun>
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d168      	bne.n	8009e64 <__gethex+0x100>
 8009d92:	49a0      	ldr	r1, [pc, #640]	@ (800a014 <__gethex+0x2b0>)
 8009d94:	2201      	movs	r2, #1
 8009d96:	4648      	mov	r0, r9
 8009d98:	f7ff ff22 	bl	8009be0 <strncmp>
 8009d9c:	4607      	mov	r7, r0
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d167      	bne.n	8009e72 <__gethex+0x10e>
 8009da2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009da6:	4626      	mov	r6, r4
 8009da8:	f7ff ffc6 	bl	8009d38 <__hexdig_fun>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d062      	beq.n	8009e76 <__gethex+0x112>
 8009db0:	4623      	mov	r3, r4
 8009db2:	7818      	ldrb	r0, [r3, #0]
 8009db4:	2830      	cmp	r0, #48	@ 0x30
 8009db6:	4699      	mov	r9, r3
 8009db8:	f103 0301 	add.w	r3, r3, #1
 8009dbc:	d0f9      	beq.n	8009db2 <__gethex+0x4e>
 8009dbe:	f7ff ffbb 	bl	8009d38 <__hexdig_fun>
 8009dc2:	fab0 f580 	clz	r5, r0
 8009dc6:	096d      	lsrs	r5, r5, #5
 8009dc8:	f04f 0b01 	mov.w	fp, #1
 8009dcc:	464a      	mov	r2, r9
 8009dce:	4616      	mov	r6, r2
 8009dd0:	3201      	adds	r2, #1
 8009dd2:	7830      	ldrb	r0, [r6, #0]
 8009dd4:	f7ff ffb0 	bl	8009d38 <__hexdig_fun>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d1f8      	bne.n	8009dce <__gethex+0x6a>
 8009ddc:	498d      	ldr	r1, [pc, #564]	@ (800a014 <__gethex+0x2b0>)
 8009dde:	2201      	movs	r2, #1
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff fefd 	bl	8009be0 <strncmp>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d13f      	bne.n	8009e6a <__gethex+0x106>
 8009dea:	b944      	cbnz	r4, 8009dfe <__gethex+0x9a>
 8009dec:	1c74      	adds	r4, r6, #1
 8009dee:	4622      	mov	r2, r4
 8009df0:	4616      	mov	r6, r2
 8009df2:	3201      	adds	r2, #1
 8009df4:	7830      	ldrb	r0, [r6, #0]
 8009df6:	f7ff ff9f 	bl	8009d38 <__hexdig_fun>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d1f8      	bne.n	8009df0 <__gethex+0x8c>
 8009dfe:	1ba4      	subs	r4, r4, r6
 8009e00:	00a7      	lsls	r7, r4, #2
 8009e02:	7833      	ldrb	r3, [r6, #0]
 8009e04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e08:	2b50      	cmp	r3, #80	@ 0x50
 8009e0a:	d13e      	bne.n	8009e8a <__gethex+0x126>
 8009e0c:	7873      	ldrb	r3, [r6, #1]
 8009e0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e10:	d033      	beq.n	8009e7a <__gethex+0x116>
 8009e12:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e14:	d034      	beq.n	8009e80 <__gethex+0x11c>
 8009e16:	1c71      	adds	r1, r6, #1
 8009e18:	2400      	movs	r4, #0
 8009e1a:	7808      	ldrb	r0, [r1, #0]
 8009e1c:	f7ff ff8c 	bl	8009d38 <__hexdig_fun>
 8009e20:	1e43      	subs	r3, r0, #1
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b18      	cmp	r3, #24
 8009e26:	d830      	bhi.n	8009e8a <__gethex+0x126>
 8009e28:	f1a0 0210 	sub.w	r2, r0, #16
 8009e2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e30:	f7ff ff82 	bl	8009d38 <__hexdig_fun>
 8009e34:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e38:	fa5f fc8c 	uxtb.w	ip, ip
 8009e3c:	f1bc 0f18 	cmp.w	ip, #24
 8009e40:	f04f 030a 	mov.w	r3, #10
 8009e44:	d91e      	bls.n	8009e84 <__gethex+0x120>
 8009e46:	b104      	cbz	r4, 8009e4a <__gethex+0xe6>
 8009e48:	4252      	negs	r2, r2
 8009e4a:	4417      	add	r7, r2
 8009e4c:	f8ca 1000 	str.w	r1, [sl]
 8009e50:	b1ed      	cbz	r5, 8009e8e <__gethex+0x12a>
 8009e52:	f1bb 0f00 	cmp.w	fp, #0
 8009e56:	bf0c      	ite	eq
 8009e58:	2506      	moveq	r5, #6
 8009e5a:	2500      	movne	r5, #0
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	b005      	add	sp, #20
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	2500      	movs	r5, #0
 8009e66:	462c      	mov	r4, r5
 8009e68:	e7b0      	b.n	8009dcc <__gethex+0x68>
 8009e6a:	2c00      	cmp	r4, #0
 8009e6c:	d1c7      	bne.n	8009dfe <__gethex+0x9a>
 8009e6e:	4627      	mov	r7, r4
 8009e70:	e7c7      	b.n	8009e02 <__gethex+0x9e>
 8009e72:	464e      	mov	r6, r9
 8009e74:	462f      	mov	r7, r5
 8009e76:	2501      	movs	r5, #1
 8009e78:	e7c3      	b.n	8009e02 <__gethex+0x9e>
 8009e7a:	2400      	movs	r4, #0
 8009e7c:	1cb1      	adds	r1, r6, #2
 8009e7e:	e7cc      	b.n	8009e1a <__gethex+0xb6>
 8009e80:	2401      	movs	r4, #1
 8009e82:	e7fb      	b.n	8009e7c <__gethex+0x118>
 8009e84:	fb03 0002 	mla	r0, r3, r2, r0
 8009e88:	e7ce      	b.n	8009e28 <__gethex+0xc4>
 8009e8a:	4631      	mov	r1, r6
 8009e8c:	e7de      	b.n	8009e4c <__gethex+0xe8>
 8009e8e:	eba6 0309 	sub.w	r3, r6, r9
 8009e92:	3b01      	subs	r3, #1
 8009e94:	4629      	mov	r1, r5
 8009e96:	2b07      	cmp	r3, #7
 8009e98:	dc0a      	bgt.n	8009eb0 <__gethex+0x14c>
 8009e9a:	9801      	ldr	r0, [sp, #4]
 8009e9c:	f7fe f94a 	bl	8008134 <_Balloc>
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	b940      	cbnz	r0, 8009eb6 <__gethex+0x152>
 8009ea4:	4b5c      	ldr	r3, [pc, #368]	@ (800a018 <__gethex+0x2b4>)
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	21e4      	movs	r1, #228	@ 0xe4
 8009eaa:	485c      	ldr	r0, [pc, #368]	@ (800a01c <__gethex+0x2b8>)
 8009eac:	f7ff fec0 	bl	8009c30 <__assert_func>
 8009eb0:	3101      	adds	r1, #1
 8009eb2:	105b      	asrs	r3, r3, #1
 8009eb4:	e7ef      	b.n	8009e96 <__gethex+0x132>
 8009eb6:	f100 0a14 	add.w	sl, r0, #20
 8009eba:	2300      	movs	r3, #0
 8009ebc:	4655      	mov	r5, sl
 8009ebe:	469b      	mov	fp, r3
 8009ec0:	45b1      	cmp	r9, r6
 8009ec2:	d337      	bcc.n	8009f34 <__gethex+0x1d0>
 8009ec4:	f845 bb04 	str.w	fp, [r5], #4
 8009ec8:	eba5 050a 	sub.w	r5, r5, sl
 8009ecc:	10ad      	asrs	r5, r5, #2
 8009ece:	6125      	str	r5, [r4, #16]
 8009ed0:	4658      	mov	r0, fp
 8009ed2:	f7fe fa21 	bl	8008318 <__hi0bits>
 8009ed6:	016d      	lsls	r5, r5, #5
 8009ed8:	f8d8 6000 	ldr.w	r6, [r8]
 8009edc:	1a2d      	subs	r5, r5, r0
 8009ede:	42b5      	cmp	r5, r6
 8009ee0:	dd54      	ble.n	8009f8c <__gethex+0x228>
 8009ee2:	1bad      	subs	r5, r5, r6
 8009ee4:	4629      	mov	r1, r5
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f7fe fdb5 	bl	8008a56 <__any_on>
 8009eec:	4681      	mov	r9, r0
 8009eee:	b178      	cbz	r0, 8009f10 <__gethex+0x1ac>
 8009ef0:	1e6b      	subs	r3, r5, #1
 8009ef2:	1159      	asrs	r1, r3, #5
 8009ef4:	f003 021f 	and.w	r2, r3, #31
 8009ef8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009efc:	f04f 0901 	mov.w	r9, #1
 8009f00:	fa09 f202 	lsl.w	r2, r9, r2
 8009f04:	420a      	tst	r2, r1
 8009f06:	d003      	beq.n	8009f10 <__gethex+0x1ac>
 8009f08:	454b      	cmp	r3, r9
 8009f0a:	dc36      	bgt.n	8009f7a <__gethex+0x216>
 8009f0c:	f04f 0902 	mov.w	r9, #2
 8009f10:	4629      	mov	r1, r5
 8009f12:	4620      	mov	r0, r4
 8009f14:	f7ff febe 	bl	8009c94 <rshift>
 8009f18:	442f      	add	r7, r5
 8009f1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f1e:	42bb      	cmp	r3, r7
 8009f20:	da42      	bge.n	8009fa8 <__gethex+0x244>
 8009f22:	9801      	ldr	r0, [sp, #4]
 8009f24:	4621      	mov	r1, r4
 8009f26:	f7fe f945 	bl	80081b4 <_Bfree>
 8009f2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	25a3      	movs	r5, #163	@ 0xa3
 8009f32:	e793      	b.n	8009e5c <__gethex+0xf8>
 8009f34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f38:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f3a:	d012      	beq.n	8009f62 <__gethex+0x1fe>
 8009f3c:	2b20      	cmp	r3, #32
 8009f3e:	d104      	bne.n	8009f4a <__gethex+0x1e6>
 8009f40:	f845 bb04 	str.w	fp, [r5], #4
 8009f44:	f04f 0b00 	mov.w	fp, #0
 8009f48:	465b      	mov	r3, fp
 8009f4a:	7830      	ldrb	r0, [r6, #0]
 8009f4c:	9303      	str	r3, [sp, #12]
 8009f4e:	f7ff fef3 	bl	8009d38 <__hexdig_fun>
 8009f52:	9b03      	ldr	r3, [sp, #12]
 8009f54:	f000 000f 	and.w	r0, r0, #15
 8009f58:	4098      	lsls	r0, r3
 8009f5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f5e:	3304      	adds	r3, #4
 8009f60:	e7ae      	b.n	8009ec0 <__gethex+0x15c>
 8009f62:	45b1      	cmp	r9, r6
 8009f64:	d8ea      	bhi.n	8009f3c <__gethex+0x1d8>
 8009f66:	492b      	ldr	r1, [pc, #172]	@ (800a014 <__gethex+0x2b0>)
 8009f68:	9303      	str	r3, [sp, #12]
 8009f6a:	2201      	movs	r2, #1
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f7ff fe37 	bl	8009be0 <strncmp>
 8009f72:	9b03      	ldr	r3, [sp, #12]
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d1e1      	bne.n	8009f3c <__gethex+0x1d8>
 8009f78:	e7a2      	b.n	8009ec0 <__gethex+0x15c>
 8009f7a:	1ea9      	subs	r1, r5, #2
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f7fe fd6a 	bl	8008a56 <__any_on>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d0c2      	beq.n	8009f0c <__gethex+0x1a8>
 8009f86:	f04f 0903 	mov.w	r9, #3
 8009f8a:	e7c1      	b.n	8009f10 <__gethex+0x1ac>
 8009f8c:	da09      	bge.n	8009fa2 <__gethex+0x23e>
 8009f8e:	1b75      	subs	r5, r6, r5
 8009f90:	4621      	mov	r1, r4
 8009f92:	9801      	ldr	r0, [sp, #4]
 8009f94:	462a      	mov	r2, r5
 8009f96:	f7fe fb25 	bl	80085e4 <__lshift>
 8009f9a:	1b7f      	subs	r7, r7, r5
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	f100 0a14 	add.w	sl, r0, #20
 8009fa2:	f04f 0900 	mov.w	r9, #0
 8009fa6:	e7b8      	b.n	8009f1a <__gethex+0x1b6>
 8009fa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fac:	42bd      	cmp	r5, r7
 8009fae:	dd6f      	ble.n	800a090 <__gethex+0x32c>
 8009fb0:	1bed      	subs	r5, r5, r7
 8009fb2:	42ae      	cmp	r6, r5
 8009fb4:	dc34      	bgt.n	800a020 <__gethex+0x2bc>
 8009fb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d022      	beq.n	800a004 <__gethex+0x2a0>
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d024      	beq.n	800a00c <__gethex+0x2a8>
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d115      	bne.n	8009ff2 <__gethex+0x28e>
 8009fc6:	42ae      	cmp	r6, r5
 8009fc8:	d113      	bne.n	8009ff2 <__gethex+0x28e>
 8009fca:	2e01      	cmp	r6, #1
 8009fcc:	d10b      	bne.n	8009fe6 <__gethex+0x282>
 8009fce:	9a02      	ldr	r2, [sp, #8]
 8009fd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	6123      	str	r3, [r4, #16]
 8009fda:	f8ca 3000 	str.w	r3, [sl]
 8009fde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fe0:	2562      	movs	r5, #98	@ 0x62
 8009fe2:	601c      	str	r4, [r3, #0]
 8009fe4:	e73a      	b.n	8009e5c <__gethex+0xf8>
 8009fe6:	1e71      	subs	r1, r6, #1
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f7fe fd34 	bl	8008a56 <__any_on>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d1ed      	bne.n	8009fce <__gethex+0x26a>
 8009ff2:	9801      	ldr	r0, [sp, #4]
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	f7fe f8dd 	bl	80081b4 <_Bfree>
 8009ffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	6013      	str	r3, [r2, #0]
 800a000:	2550      	movs	r5, #80	@ 0x50
 800a002:	e72b      	b.n	8009e5c <__gethex+0xf8>
 800a004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1f3      	bne.n	8009ff2 <__gethex+0x28e>
 800a00a:	e7e0      	b.n	8009fce <__gethex+0x26a>
 800a00c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1dd      	bne.n	8009fce <__gethex+0x26a>
 800a012:	e7ee      	b.n	8009ff2 <__gethex+0x28e>
 800a014:	0800b158 	.word	0x0800b158
 800a018:	0800afed 	.word	0x0800afed
 800a01c:	0800b306 	.word	0x0800b306
 800a020:	1e6f      	subs	r7, r5, #1
 800a022:	f1b9 0f00 	cmp.w	r9, #0
 800a026:	d130      	bne.n	800a08a <__gethex+0x326>
 800a028:	b127      	cbz	r7, 800a034 <__gethex+0x2d0>
 800a02a:	4639      	mov	r1, r7
 800a02c:	4620      	mov	r0, r4
 800a02e:	f7fe fd12 	bl	8008a56 <__any_on>
 800a032:	4681      	mov	r9, r0
 800a034:	117a      	asrs	r2, r7, #5
 800a036:	2301      	movs	r3, #1
 800a038:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a03c:	f007 071f 	and.w	r7, r7, #31
 800a040:	40bb      	lsls	r3, r7
 800a042:	4213      	tst	r3, r2
 800a044:	4629      	mov	r1, r5
 800a046:	4620      	mov	r0, r4
 800a048:	bf18      	it	ne
 800a04a:	f049 0902 	orrne.w	r9, r9, #2
 800a04e:	f7ff fe21 	bl	8009c94 <rshift>
 800a052:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a056:	1b76      	subs	r6, r6, r5
 800a058:	2502      	movs	r5, #2
 800a05a:	f1b9 0f00 	cmp.w	r9, #0
 800a05e:	d047      	beq.n	800a0f0 <__gethex+0x38c>
 800a060:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a064:	2b02      	cmp	r3, #2
 800a066:	d015      	beq.n	800a094 <__gethex+0x330>
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d017      	beq.n	800a09c <__gethex+0x338>
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	d109      	bne.n	800a084 <__gethex+0x320>
 800a070:	f019 0f02 	tst.w	r9, #2
 800a074:	d006      	beq.n	800a084 <__gethex+0x320>
 800a076:	f8da 3000 	ldr.w	r3, [sl]
 800a07a:	ea49 0903 	orr.w	r9, r9, r3
 800a07e:	f019 0f01 	tst.w	r9, #1
 800a082:	d10e      	bne.n	800a0a2 <__gethex+0x33e>
 800a084:	f045 0510 	orr.w	r5, r5, #16
 800a088:	e032      	b.n	800a0f0 <__gethex+0x38c>
 800a08a:	f04f 0901 	mov.w	r9, #1
 800a08e:	e7d1      	b.n	800a034 <__gethex+0x2d0>
 800a090:	2501      	movs	r5, #1
 800a092:	e7e2      	b.n	800a05a <__gethex+0x2f6>
 800a094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a096:	f1c3 0301 	rsb	r3, r3, #1
 800a09a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a09c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d0f0      	beq.n	800a084 <__gethex+0x320>
 800a0a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0a6:	f104 0314 	add.w	r3, r4, #20
 800a0aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0b2:	f04f 0c00 	mov.w	ip, #0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a0c0:	d01b      	beq.n	800a0fa <__gethex+0x396>
 800a0c2:	3201      	adds	r2, #1
 800a0c4:	6002      	str	r2, [r0, #0]
 800a0c6:	2d02      	cmp	r5, #2
 800a0c8:	f104 0314 	add.w	r3, r4, #20
 800a0cc:	d13c      	bne.n	800a148 <__gethex+0x3e4>
 800a0ce:	f8d8 2000 	ldr.w	r2, [r8]
 800a0d2:	3a01      	subs	r2, #1
 800a0d4:	42b2      	cmp	r2, r6
 800a0d6:	d109      	bne.n	800a0ec <__gethex+0x388>
 800a0d8:	1171      	asrs	r1, r6, #5
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a0e0:	f006 061f 	and.w	r6, r6, #31
 800a0e4:	fa02 f606 	lsl.w	r6, r2, r6
 800a0e8:	421e      	tst	r6, r3
 800a0ea:	d13a      	bne.n	800a162 <__gethex+0x3fe>
 800a0ec:	f045 0520 	orr.w	r5, r5, #32
 800a0f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0f2:	601c      	str	r4, [r3, #0]
 800a0f4:	9b02      	ldr	r3, [sp, #8]
 800a0f6:	601f      	str	r7, [r3, #0]
 800a0f8:	e6b0      	b.n	8009e5c <__gethex+0xf8>
 800a0fa:	4299      	cmp	r1, r3
 800a0fc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a100:	d8d9      	bhi.n	800a0b6 <__gethex+0x352>
 800a102:	68a3      	ldr	r3, [r4, #8]
 800a104:	459b      	cmp	fp, r3
 800a106:	db17      	blt.n	800a138 <__gethex+0x3d4>
 800a108:	6861      	ldr	r1, [r4, #4]
 800a10a:	9801      	ldr	r0, [sp, #4]
 800a10c:	3101      	adds	r1, #1
 800a10e:	f7fe f811 	bl	8008134 <_Balloc>
 800a112:	4681      	mov	r9, r0
 800a114:	b918      	cbnz	r0, 800a11e <__gethex+0x3ba>
 800a116:	4b1a      	ldr	r3, [pc, #104]	@ (800a180 <__gethex+0x41c>)
 800a118:	4602      	mov	r2, r0
 800a11a:	2184      	movs	r1, #132	@ 0x84
 800a11c:	e6c5      	b.n	8009eaa <__gethex+0x146>
 800a11e:	6922      	ldr	r2, [r4, #16]
 800a120:	3202      	adds	r2, #2
 800a122:	f104 010c 	add.w	r1, r4, #12
 800a126:	0092      	lsls	r2, r2, #2
 800a128:	300c      	adds	r0, #12
 800a12a:	f7ff fd6b 	bl	8009c04 <memcpy>
 800a12e:	4621      	mov	r1, r4
 800a130:	9801      	ldr	r0, [sp, #4]
 800a132:	f7fe f83f 	bl	80081b4 <_Bfree>
 800a136:	464c      	mov	r4, r9
 800a138:	6923      	ldr	r3, [r4, #16]
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a140:	6122      	str	r2, [r4, #16]
 800a142:	2201      	movs	r2, #1
 800a144:	615a      	str	r2, [r3, #20]
 800a146:	e7be      	b.n	800a0c6 <__gethex+0x362>
 800a148:	6922      	ldr	r2, [r4, #16]
 800a14a:	455a      	cmp	r2, fp
 800a14c:	dd0b      	ble.n	800a166 <__gethex+0x402>
 800a14e:	2101      	movs	r1, #1
 800a150:	4620      	mov	r0, r4
 800a152:	f7ff fd9f 	bl	8009c94 <rshift>
 800a156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a15a:	3701      	adds	r7, #1
 800a15c:	42bb      	cmp	r3, r7
 800a15e:	f6ff aee0 	blt.w	8009f22 <__gethex+0x1be>
 800a162:	2501      	movs	r5, #1
 800a164:	e7c2      	b.n	800a0ec <__gethex+0x388>
 800a166:	f016 061f 	ands.w	r6, r6, #31
 800a16a:	d0fa      	beq.n	800a162 <__gethex+0x3fe>
 800a16c:	4453      	add	r3, sl
 800a16e:	f1c6 0620 	rsb	r6, r6, #32
 800a172:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a176:	f7fe f8cf 	bl	8008318 <__hi0bits>
 800a17a:	42b0      	cmp	r0, r6
 800a17c:	dbe7      	blt.n	800a14e <__gethex+0x3ea>
 800a17e:	e7f0      	b.n	800a162 <__gethex+0x3fe>
 800a180:	0800afed 	.word	0x0800afed

0800a184 <L_shift>:
 800a184:	f1c2 0208 	rsb	r2, r2, #8
 800a188:	0092      	lsls	r2, r2, #2
 800a18a:	b570      	push	{r4, r5, r6, lr}
 800a18c:	f1c2 0620 	rsb	r6, r2, #32
 800a190:	6843      	ldr	r3, [r0, #4]
 800a192:	6804      	ldr	r4, [r0, #0]
 800a194:	fa03 f506 	lsl.w	r5, r3, r6
 800a198:	432c      	orrs	r4, r5
 800a19a:	40d3      	lsrs	r3, r2
 800a19c:	6004      	str	r4, [r0, #0]
 800a19e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1a2:	4288      	cmp	r0, r1
 800a1a4:	d3f4      	bcc.n	800a190 <L_shift+0xc>
 800a1a6:	bd70      	pop	{r4, r5, r6, pc}

0800a1a8 <__match>:
 800a1a8:	b530      	push	{r4, r5, lr}
 800a1aa:	6803      	ldr	r3, [r0, #0]
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1b2:	b914      	cbnz	r4, 800a1ba <__match+0x12>
 800a1b4:	6003      	str	r3, [r0, #0]
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	bd30      	pop	{r4, r5, pc}
 800a1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a1c2:	2d19      	cmp	r5, #25
 800a1c4:	bf98      	it	ls
 800a1c6:	3220      	addls	r2, #32
 800a1c8:	42a2      	cmp	r2, r4
 800a1ca:	d0f0      	beq.n	800a1ae <__match+0x6>
 800a1cc:	2000      	movs	r0, #0
 800a1ce:	e7f3      	b.n	800a1b8 <__match+0x10>

0800a1d0 <__hexnan>:
 800a1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d4:	680b      	ldr	r3, [r1, #0]
 800a1d6:	6801      	ldr	r1, [r0, #0]
 800a1d8:	115e      	asrs	r6, r3, #5
 800a1da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a1de:	f013 031f 	ands.w	r3, r3, #31
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	bf18      	it	ne
 800a1e6:	3604      	addne	r6, #4
 800a1e8:	2500      	movs	r5, #0
 800a1ea:	1f37      	subs	r7, r6, #4
 800a1ec:	4682      	mov	sl, r0
 800a1ee:	4690      	mov	r8, r2
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1f6:	46b9      	mov	r9, r7
 800a1f8:	463c      	mov	r4, r7
 800a1fa:	9502      	str	r5, [sp, #8]
 800a1fc:	46ab      	mov	fp, r5
 800a1fe:	784a      	ldrb	r2, [r1, #1]
 800a200:	1c4b      	adds	r3, r1, #1
 800a202:	9303      	str	r3, [sp, #12]
 800a204:	b342      	cbz	r2, 800a258 <__hexnan+0x88>
 800a206:	4610      	mov	r0, r2
 800a208:	9105      	str	r1, [sp, #20]
 800a20a:	9204      	str	r2, [sp, #16]
 800a20c:	f7ff fd94 	bl	8009d38 <__hexdig_fun>
 800a210:	2800      	cmp	r0, #0
 800a212:	d151      	bne.n	800a2b8 <__hexnan+0xe8>
 800a214:	9a04      	ldr	r2, [sp, #16]
 800a216:	9905      	ldr	r1, [sp, #20]
 800a218:	2a20      	cmp	r2, #32
 800a21a:	d818      	bhi.n	800a24e <__hexnan+0x7e>
 800a21c:	9b02      	ldr	r3, [sp, #8]
 800a21e:	459b      	cmp	fp, r3
 800a220:	dd13      	ble.n	800a24a <__hexnan+0x7a>
 800a222:	454c      	cmp	r4, r9
 800a224:	d206      	bcs.n	800a234 <__hexnan+0x64>
 800a226:	2d07      	cmp	r5, #7
 800a228:	dc04      	bgt.n	800a234 <__hexnan+0x64>
 800a22a:	462a      	mov	r2, r5
 800a22c:	4649      	mov	r1, r9
 800a22e:	4620      	mov	r0, r4
 800a230:	f7ff ffa8 	bl	800a184 <L_shift>
 800a234:	4544      	cmp	r4, r8
 800a236:	d952      	bls.n	800a2de <__hexnan+0x10e>
 800a238:	2300      	movs	r3, #0
 800a23a:	f1a4 0904 	sub.w	r9, r4, #4
 800a23e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a242:	f8cd b008 	str.w	fp, [sp, #8]
 800a246:	464c      	mov	r4, r9
 800a248:	461d      	mov	r5, r3
 800a24a:	9903      	ldr	r1, [sp, #12]
 800a24c:	e7d7      	b.n	800a1fe <__hexnan+0x2e>
 800a24e:	2a29      	cmp	r2, #41	@ 0x29
 800a250:	d157      	bne.n	800a302 <__hexnan+0x132>
 800a252:	3102      	adds	r1, #2
 800a254:	f8ca 1000 	str.w	r1, [sl]
 800a258:	f1bb 0f00 	cmp.w	fp, #0
 800a25c:	d051      	beq.n	800a302 <__hexnan+0x132>
 800a25e:	454c      	cmp	r4, r9
 800a260:	d206      	bcs.n	800a270 <__hexnan+0xa0>
 800a262:	2d07      	cmp	r5, #7
 800a264:	dc04      	bgt.n	800a270 <__hexnan+0xa0>
 800a266:	462a      	mov	r2, r5
 800a268:	4649      	mov	r1, r9
 800a26a:	4620      	mov	r0, r4
 800a26c:	f7ff ff8a 	bl	800a184 <L_shift>
 800a270:	4544      	cmp	r4, r8
 800a272:	d936      	bls.n	800a2e2 <__hexnan+0x112>
 800a274:	f1a8 0204 	sub.w	r2, r8, #4
 800a278:	4623      	mov	r3, r4
 800a27a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a27e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a282:	429f      	cmp	r7, r3
 800a284:	d2f9      	bcs.n	800a27a <__hexnan+0xaa>
 800a286:	1b3b      	subs	r3, r7, r4
 800a288:	f023 0303 	bic.w	r3, r3, #3
 800a28c:	3304      	adds	r3, #4
 800a28e:	3401      	adds	r4, #1
 800a290:	3e03      	subs	r6, #3
 800a292:	42b4      	cmp	r4, r6
 800a294:	bf88      	it	hi
 800a296:	2304      	movhi	r3, #4
 800a298:	4443      	add	r3, r8
 800a29a:	2200      	movs	r2, #0
 800a29c:	f843 2b04 	str.w	r2, [r3], #4
 800a2a0:	429f      	cmp	r7, r3
 800a2a2:	d2fb      	bcs.n	800a29c <__hexnan+0xcc>
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	b91b      	cbnz	r3, 800a2b0 <__hexnan+0xe0>
 800a2a8:	4547      	cmp	r7, r8
 800a2aa:	d128      	bne.n	800a2fe <__hexnan+0x12e>
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	2005      	movs	r0, #5
 800a2b2:	b007      	add	sp, #28
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	3501      	adds	r5, #1
 800a2ba:	2d08      	cmp	r5, #8
 800a2bc:	f10b 0b01 	add.w	fp, fp, #1
 800a2c0:	dd06      	ble.n	800a2d0 <__hexnan+0x100>
 800a2c2:	4544      	cmp	r4, r8
 800a2c4:	d9c1      	bls.n	800a24a <__hexnan+0x7a>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2cc:	2501      	movs	r5, #1
 800a2ce:	3c04      	subs	r4, #4
 800a2d0:	6822      	ldr	r2, [r4, #0]
 800a2d2:	f000 000f 	and.w	r0, r0, #15
 800a2d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a2da:	6020      	str	r0, [r4, #0]
 800a2dc:	e7b5      	b.n	800a24a <__hexnan+0x7a>
 800a2de:	2508      	movs	r5, #8
 800a2e0:	e7b3      	b.n	800a24a <__hexnan+0x7a>
 800a2e2:	9b01      	ldr	r3, [sp, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0dd      	beq.n	800a2a4 <__hexnan+0xd4>
 800a2e8:	f1c3 0320 	rsb	r3, r3, #32
 800a2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a2f0:	40da      	lsrs	r2, r3
 800a2f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2fc:	e7d2      	b.n	800a2a4 <__hexnan+0xd4>
 800a2fe:	3f04      	subs	r7, #4
 800a300:	e7d0      	b.n	800a2a4 <__hexnan+0xd4>
 800a302:	2004      	movs	r0, #4
 800a304:	e7d5      	b.n	800a2b2 <__hexnan+0xe2>

0800a306 <__ascii_mbtowc>:
 800a306:	b082      	sub	sp, #8
 800a308:	b901      	cbnz	r1, 800a30c <__ascii_mbtowc+0x6>
 800a30a:	a901      	add	r1, sp, #4
 800a30c:	b142      	cbz	r2, 800a320 <__ascii_mbtowc+0x1a>
 800a30e:	b14b      	cbz	r3, 800a324 <__ascii_mbtowc+0x1e>
 800a310:	7813      	ldrb	r3, [r2, #0]
 800a312:	600b      	str	r3, [r1, #0]
 800a314:	7812      	ldrb	r2, [r2, #0]
 800a316:	1e10      	subs	r0, r2, #0
 800a318:	bf18      	it	ne
 800a31a:	2001      	movne	r0, #1
 800a31c:	b002      	add	sp, #8
 800a31e:	4770      	bx	lr
 800a320:	4610      	mov	r0, r2
 800a322:	e7fb      	b.n	800a31c <__ascii_mbtowc+0x16>
 800a324:	f06f 0001 	mvn.w	r0, #1
 800a328:	e7f8      	b.n	800a31c <__ascii_mbtowc+0x16>

0800a32a <_realloc_r>:
 800a32a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a32e:	4680      	mov	r8, r0
 800a330:	4615      	mov	r5, r2
 800a332:	460c      	mov	r4, r1
 800a334:	b921      	cbnz	r1, 800a340 <_realloc_r+0x16>
 800a336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	4611      	mov	r1, r2
 800a33c:	f7fb bf38 	b.w	80061b0 <_malloc_r>
 800a340:	b92a      	cbnz	r2, 800a34e <_realloc_r+0x24>
 800a342:	f7fd fead 	bl	80080a0 <_free_r>
 800a346:	2400      	movs	r4, #0
 800a348:	4620      	mov	r0, r4
 800a34a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a34e:	f000 f839 	bl	800a3c4 <_malloc_usable_size_r>
 800a352:	4285      	cmp	r5, r0
 800a354:	4606      	mov	r6, r0
 800a356:	d802      	bhi.n	800a35e <_realloc_r+0x34>
 800a358:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a35c:	d8f4      	bhi.n	800a348 <_realloc_r+0x1e>
 800a35e:	4629      	mov	r1, r5
 800a360:	4640      	mov	r0, r8
 800a362:	f7fb ff25 	bl	80061b0 <_malloc_r>
 800a366:	4607      	mov	r7, r0
 800a368:	2800      	cmp	r0, #0
 800a36a:	d0ec      	beq.n	800a346 <_realloc_r+0x1c>
 800a36c:	42b5      	cmp	r5, r6
 800a36e:	462a      	mov	r2, r5
 800a370:	4621      	mov	r1, r4
 800a372:	bf28      	it	cs
 800a374:	4632      	movcs	r2, r6
 800a376:	f7ff fc45 	bl	8009c04 <memcpy>
 800a37a:	4621      	mov	r1, r4
 800a37c:	4640      	mov	r0, r8
 800a37e:	f7fd fe8f 	bl	80080a0 <_free_r>
 800a382:	463c      	mov	r4, r7
 800a384:	e7e0      	b.n	800a348 <_realloc_r+0x1e>

0800a386 <__ascii_wctomb>:
 800a386:	4603      	mov	r3, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	b141      	cbz	r1, 800a39e <__ascii_wctomb+0x18>
 800a38c:	2aff      	cmp	r2, #255	@ 0xff
 800a38e:	d904      	bls.n	800a39a <__ascii_wctomb+0x14>
 800a390:	228a      	movs	r2, #138	@ 0x8a
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	f04f 30ff 	mov.w	r0, #4294967295
 800a398:	4770      	bx	lr
 800a39a:	700a      	strb	r2, [r1, #0]
 800a39c:	2001      	movs	r0, #1
 800a39e:	4770      	bx	lr

0800a3a0 <fiprintf>:
 800a3a0:	b40e      	push	{r1, r2, r3}
 800a3a2:	b503      	push	{r0, r1, lr}
 800a3a4:	4601      	mov	r1, r0
 800a3a6:	ab03      	add	r3, sp, #12
 800a3a8:	4805      	ldr	r0, [pc, #20]	@ (800a3c0 <fiprintf+0x20>)
 800a3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3ae:	6800      	ldr	r0, [r0, #0]
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	f000 f839 	bl	800a428 <_vfiprintf_r>
 800a3b6:	b002      	add	sp, #8
 800a3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3bc:	b003      	add	sp, #12
 800a3be:	4770      	bx	lr
 800a3c0:	2000001c 	.word	0x2000001c

0800a3c4 <_malloc_usable_size_r>:
 800a3c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3c8:	1f18      	subs	r0, r3, #4
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bfbc      	itt	lt
 800a3ce:	580b      	ldrlt	r3, [r1, r0]
 800a3d0:	18c0      	addlt	r0, r0, r3
 800a3d2:	4770      	bx	lr

0800a3d4 <__sfputc_r>:
 800a3d4:	6893      	ldr	r3, [r2, #8]
 800a3d6:	3b01      	subs	r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	b410      	push	{r4}
 800a3dc:	6093      	str	r3, [r2, #8]
 800a3de:	da08      	bge.n	800a3f2 <__sfputc_r+0x1e>
 800a3e0:	6994      	ldr	r4, [r2, #24]
 800a3e2:	42a3      	cmp	r3, r4
 800a3e4:	db01      	blt.n	800a3ea <__sfputc_r+0x16>
 800a3e6:	290a      	cmp	r1, #10
 800a3e8:	d103      	bne.n	800a3f2 <__sfputc_r+0x1e>
 800a3ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ee:	f000 b933 	b.w	800a658 <__swbuf_r>
 800a3f2:	6813      	ldr	r3, [r2, #0]
 800a3f4:	1c58      	adds	r0, r3, #1
 800a3f6:	6010      	str	r0, [r2, #0]
 800a3f8:	7019      	strb	r1, [r3, #0]
 800a3fa:	4608      	mov	r0, r1
 800a3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <__sfputs_r>:
 800a402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a404:	4606      	mov	r6, r0
 800a406:	460f      	mov	r7, r1
 800a408:	4614      	mov	r4, r2
 800a40a:	18d5      	adds	r5, r2, r3
 800a40c:	42ac      	cmp	r4, r5
 800a40e:	d101      	bne.n	800a414 <__sfputs_r+0x12>
 800a410:	2000      	movs	r0, #0
 800a412:	e007      	b.n	800a424 <__sfputs_r+0x22>
 800a414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a418:	463a      	mov	r2, r7
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7ff ffda 	bl	800a3d4 <__sfputc_r>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d1f3      	bne.n	800a40c <__sfputs_r+0xa>
 800a424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a428 <_vfiprintf_r>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	460d      	mov	r5, r1
 800a42e:	b09d      	sub	sp, #116	@ 0x74
 800a430:	4614      	mov	r4, r2
 800a432:	4698      	mov	r8, r3
 800a434:	4606      	mov	r6, r0
 800a436:	b118      	cbz	r0, 800a440 <_vfiprintf_r+0x18>
 800a438:	6a03      	ldr	r3, [r0, #32]
 800a43a:	b90b      	cbnz	r3, 800a440 <_vfiprintf_r+0x18>
 800a43c:	f7fc fe3c 	bl	80070b8 <__sinit>
 800a440:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a442:	07d9      	lsls	r1, r3, #31
 800a444:	d405      	bmi.n	800a452 <_vfiprintf_r+0x2a>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	059a      	lsls	r2, r3, #22
 800a44a:	d402      	bmi.n	800a452 <_vfiprintf_r+0x2a>
 800a44c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a44e:	f7fc ffd2 	bl	80073f6 <__retarget_lock_acquire_recursive>
 800a452:	89ab      	ldrh	r3, [r5, #12]
 800a454:	071b      	lsls	r3, r3, #28
 800a456:	d501      	bpl.n	800a45c <_vfiprintf_r+0x34>
 800a458:	692b      	ldr	r3, [r5, #16]
 800a45a:	b99b      	cbnz	r3, 800a484 <_vfiprintf_r+0x5c>
 800a45c:	4629      	mov	r1, r5
 800a45e:	4630      	mov	r0, r6
 800a460:	f000 f938 	bl	800a6d4 <__swsetup_r>
 800a464:	b170      	cbz	r0, 800a484 <_vfiprintf_r+0x5c>
 800a466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a468:	07dc      	lsls	r4, r3, #31
 800a46a:	d504      	bpl.n	800a476 <_vfiprintf_r+0x4e>
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	b01d      	add	sp, #116	@ 0x74
 800a472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a476:	89ab      	ldrh	r3, [r5, #12]
 800a478:	0598      	lsls	r0, r3, #22
 800a47a:	d4f7      	bmi.n	800a46c <_vfiprintf_r+0x44>
 800a47c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a47e:	f7fc ffbb 	bl	80073f8 <__retarget_lock_release_recursive>
 800a482:	e7f3      	b.n	800a46c <_vfiprintf_r+0x44>
 800a484:	2300      	movs	r3, #0
 800a486:	9309      	str	r3, [sp, #36]	@ 0x24
 800a488:	2320      	movs	r3, #32
 800a48a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a48e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a492:	2330      	movs	r3, #48	@ 0x30
 800a494:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a644 <_vfiprintf_r+0x21c>
 800a498:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a49c:	f04f 0901 	mov.w	r9, #1
 800a4a0:	4623      	mov	r3, r4
 800a4a2:	469a      	mov	sl, r3
 800a4a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4a8:	b10a      	cbz	r2, 800a4ae <_vfiprintf_r+0x86>
 800a4aa:	2a25      	cmp	r2, #37	@ 0x25
 800a4ac:	d1f9      	bne.n	800a4a2 <_vfiprintf_r+0x7a>
 800a4ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a4b2:	d00b      	beq.n	800a4cc <_vfiprintf_r+0xa4>
 800a4b4:	465b      	mov	r3, fp
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f7ff ffa1 	bl	800a402 <__sfputs_r>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f000 80a7 	beq.w	800a614 <_vfiprintf_r+0x1ec>
 800a4c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4c8:	445a      	add	r2, fp
 800a4ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800a4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 809f 	beq.w	800a614 <_vfiprintf_r+0x1ec>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e0:	f10a 0a01 	add.w	sl, sl, #1
 800a4e4:	9304      	str	r3, [sp, #16]
 800a4e6:	9307      	str	r3, [sp, #28]
 800a4e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4ee:	4654      	mov	r4, sl
 800a4f0:	2205      	movs	r2, #5
 800a4f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f6:	4853      	ldr	r0, [pc, #332]	@ (800a644 <_vfiprintf_r+0x21c>)
 800a4f8:	f7f5 fe6a 	bl	80001d0 <memchr>
 800a4fc:	9a04      	ldr	r2, [sp, #16]
 800a4fe:	b9d8      	cbnz	r0, 800a538 <_vfiprintf_r+0x110>
 800a500:	06d1      	lsls	r1, r2, #27
 800a502:	bf44      	itt	mi
 800a504:	2320      	movmi	r3, #32
 800a506:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a50a:	0713      	lsls	r3, r2, #28
 800a50c:	bf44      	itt	mi
 800a50e:	232b      	movmi	r3, #43	@ 0x2b
 800a510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a514:	f89a 3000 	ldrb.w	r3, [sl]
 800a518:	2b2a      	cmp	r3, #42	@ 0x2a
 800a51a:	d015      	beq.n	800a548 <_vfiprintf_r+0x120>
 800a51c:	9a07      	ldr	r2, [sp, #28]
 800a51e:	4654      	mov	r4, sl
 800a520:	2000      	movs	r0, #0
 800a522:	f04f 0c0a 	mov.w	ip, #10
 800a526:	4621      	mov	r1, r4
 800a528:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a52c:	3b30      	subs	r3, #48	@ 0x30
 800a52e:	2b09      	cmp	r3, #9
 800a530:	d94b      	bls.n	800a5ca <_vfiprintf_r+0x1a2>
 800a532:	b1b0      	cbz	r0, 800a562 <_vfiprintf_r+0x13a>
 800a534:	9207      	str	r2, [sp, #28]
 800a536:	e014      	b.n	800a562 <_vfiprintf_r+0x13a>
 800a538:	eba0 0308 	sub.w	r3, r0, r8
 800a53c:	fa09 f303 	lsl.w	r3, r9, r3
 800a540:	4313      	orrs	r3, r2
 800a542:	9304      	str	r3, [sp, #16]
 800a544:	46a2      	mov	sl, r4
 800a546:	e7d2      	b.n	800a4ee <_vfiprintf_r+0xc6>
 800a548:	9b03      	ldr	r3, [sp, #12]
 800a54a:	1d19      	adds	r1, r3, #4
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	9103      	str	r1, [sp, #12]
 800a550:	2b00      	cmp	r3, #0
 800a552:	bfbb      	ittet	lt
 800a554:	425b      	neglt	r3, r3
 800a556:	f042 0202 	orrlt.w	r2, r2, #2
 800a55a:	9307      	strge	r3, [sp, #28]
 800a55c:	9307      	strlt	r3, [sp, #28]
 800a55e:	bfb8      	it	lt
 800a560:	9204      	strlt	r2, [sp, #16]
 800a562:	7823      	ldrb	r3, [r4, #0]
 800a564:	2b2e      	cmp	r3, #46	@ 0x2e
 800a566:	d10a      	bne.n	800a57e <_vfiprintf_r+0x156>
 800a568:	7863      	ldrb	r3, [r4, #1]
 800a56a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a56c:	d132      	bne.n	800a5d4 <_vfiprintf_r+0x1ac>
 800a56e:	9b03      	ldr	r3, [sp, #12]
 800a570:	1d1a      	adds	r2, r3, #4
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	9203      	str	r2, [sp, #12]
 800a576:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a57a:	3402      	adds	r4, #2
 800a57c:	9305      	str	r3, [sp, #20]
 800a57e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a654 <_vfiprintf_r+0x22c>
 800a582:	7821      	ldrb	r1, [r4, #0]
 800a584:	2203      	movs	r2, #3
 800a586:	4650      	mov	r0, sl
 800a588:	f7f5 fe22 	bl	80001d0 <memchr>
 800a58c:	b138      	cbz	r0, 800a59e <_vfiprintf_r+0x176>
 800a58e:	9b04      	ldr	r3, [sp, #16]
 800a590:	eba0 000a 	sub.w	r0, r0, sl
 800a594:	2240      	movs	r2, #64	@ 0x40
 800a596:	4082      	lsls	r2, r0
 800a598:	4313      	orrs	r3, r2
 800a59a:	3401      	adds	r4, #1
 800a59c:	9304      	str	r3, [sp, #16]
 800a59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a2:	4829      	ldr	r0, [pc, #164]	@ (800a648 <_vfiprintf_r+0x220>)
 800a5a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a5a8:	2206      	movs	r2, #6
 800a5aa:	f7f5 fe11 	bl	80001d0 <memchr>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	d03f      	beq.n	800a632 <_vfiprintf_r+0x20a>
 800a5b2:	4b26      	ldr	r3, [pc, #152]	@ (800a64c <_vfiprintf_r+0x224>)
 800a5b4:	bb1b      	cbnz	r3, 800a5fe <_vfiprintf_r+0x1d6>
 800a5b6:	9b03      	ldr	r3, [sp, #12]
 800a5b8:	3307      	adds	r3, #7
 800a5ba:	f023 0307 	bic.w	r3, r3, #7
 800a5be:	3308      	adds	r3, #8
 800a5c0:	9303      	str	r3, [sp, #12]
 800a5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5c4:	443b      	add	r3, r7
 800a5c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5c8:	e76a      	b.n	800a4a0 <_vfiprintf_r+0x78>
 800a5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5ce:	460c      	mov	r4, r1
 800a5d0:	2001      	movs	r0, #1
 800a5d2:	e7a8      	b.n	800a526 <_vfiprintf_r+0xfe>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	3401      	adds	r4, #1
 800a5d8:	9305      	str	r3, [sp, #20]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	f04f 0c0a 	mov.w	ip, #10
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5e6:	3a30      	subs	r2, #48	@ 0x30
 800a5e8:	2a09      	cmp	r2, #9
 800a5ea:	d903      	bls.n	800a5f4 <_vfiprintf_r+0x1cc>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d0c6      	beq.n	800a57e <_vfiprintf_r+0x156>
 800a5f0:	9105      	str	r1, [sp, #20]
 800a5f2:	e7c4      	b.n	800a57e <_vfiprintf_r+0x156>
 800a5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e7f0      	b.n	800a5e0 <_vfiprintf_r+0x1b8>
 800a5fe:	ab03      	add	r3, sp, #12
 800a600:	9300      	str	r3, [sp, #0]
 800a602:	462a      	mov	r2, r5
 800a604:	4b12      	ldr	r3, [pc, #72]	@ (800a650 <_vfiprintf_r+0x228>)
 800a606:	a904      	add	r1, sp, #16
 800a608:	4630      	mov	r0, r6
 800a60a:	f7fb fefd 	bl	8006408 <_printf_float>
 800a60e:	4607      	mov	r7, r0
 800a610:	1c78      	adds	r0, r7, #1
 800a612:	d1d6      	bne.n	800a5c2 <_vfiprintf_r+0x19a>
 800a614:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a616:	07d9      	lsls	r1, r3, #31
 800a618:	d405      	bmi.n	800a626 <_vfiprintf_r+0x1fe>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	059a      	lsls	r2, r3, #22
 800a61e:	d402      	bmi.n	800a626 <_vfiprintf_r+0x1fe>
 800a620:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a622:	f7fc fee9 	bl	80073f8 <__retarget_lock_release_recursive>
 800a626:	89ab      	ldrh	r3, [r5, #12]
 800a628:	065b      	lsls	r3, r3, #25
 800a62a:	f53f af1f 	bmi.w	800a46c <_vfiprintf_r+0x44>
 800a62e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a630:	e71e      	b.n	800a470 <_vfiprintf_r+0x48>
 800a632:	ab03      	add	r3, sp, #12
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	462a      	mov	r2, r5
 800a638:	4b05      	ldr	r3, [pc, #20]	@ (800a650 <_vfiprintf_r+0x228>)
 800a63a:	a904      	add	r1, sp, #16
 800a63c:	4630      	mov	r0, r6
 800a63e:	f7fc f97b 	bl	8006938 <_printf_i>
 800a642:	e7e4      	b.n	800a60e <_vfiprintf_r+0x1e6>
 800a644:	0800b2b1 	.word	0x0800b2b1
 800a648:	0800b2bb 	.word	0x0800b2bb
 800a64c:	08006409 	.word	0x08006409
 800a650:	0800a403 	.word	0x0800a403
 800a654:	0800b2b7 	.word	0x0800b2b7

0800a658 <__swbuf_r>:
 800a658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65a:	460e      	mov	r6, r1
 800a65c:	4614      	mov	r4, r2
 800a65e:	4605      	mov	r5, r0
 800a660:	b118      	cbz	r0, 800a66a <__swbuf_r+0x12>
 800a662:	6a03      	ldr	r3, [r0, #32]
 800a664:	b90b      	cbnz	r3, 800a66a <__swbuf_r+0x12>
 800a666:	f7fc fd27 	bl	80070b8 <__sinit>
 800a66a:	69a3      	ldr	r3, [r4, #24]
 800a66c:	60a3      	str	r3, [r4, #8]
 800a66e:	89a3      	ldrh	r3, [r4, #12]
 800a670:	071a      	lsls	r2, r3, #28
 800a672:	d501      	bpl.n	800a678 <__swbuf_r+0x20>
 800a674:	6923      	ldr	r3, [r4, #16]
 800a676:	b943      	cbnz	r3, 800a68a <__swbuf_r+0x32>
 800a678:	4621      	mov	r1, r4
 800a67a:	4628      	mov	r0, r5
 800a67c:	f000 f82a 	bl	800a6d4 <__swsetup_r>
 800a680:	b118      	cbz	r0, 800a68a <__swbuf_r+0x32>
 800a682:	f04f 37ff 	mov.w	r7, #4294967295
 800a686:	4638      	mov	r0, r7
 800a688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	6922      	ldr	r2, [r4, #16]
 800a68e:	1a98      	subs	r0, r3, r2
 800a690:	6963      	ldr	r3, [r4, #20]
 800a692:	b2f6      	uxtb	r6, r6
 800a694:	4283      	cmp	r3, r0
 800a696:	4637      	mov	r7, r6
 800a698:	dc05      	bgt.n	800a6a6 <__swbuf_r+0x4e>
 800a69a:	4621      	mov	r1, r4
 800a69c:	4628      	mov	r0, r5
 800a69e:	f7ff fa5d 	bl	8009b5c <_fflush_r>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d1ed      	bne.n	800a682 <__swbuf_r+0x2a>
 800a6a6:	68a3      	ldr	r3, [r4, #8]
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	60a3      	str	r3, [r4, #8]
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	1c5a      	adds	r2, r3, #1
 800a6b0:	6022      	str	r2, [r4, #0]
 800a6b2:	701e      	strb	r6, [r3, #0]
 800a6b4:	6962      	ldr	r2, [r4, #20]
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d004      	beq.n	800a6c6 <__swbuf_r+0x6e>
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	07db      	lsls	r3, r3, #31
 800a6c0:	d5e1      	bpl.n	800a686 <__swbuf_r+0x2e>
 800a6c2:	2e0a      	cmp	r6, #10
 800a6c4:	d1df      	bne.n	800a686 <__swbuf_r+0x2e>
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f7ff fa47 	bl	8009b5c <_fflush_r>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d0d9      	beq.n	800a686 <__swbuf_r+0x2e>
 800a6d2:	e7d6      	b.n	800a682 <__swbuf_r+0x2a>

0800a6d4 <__swsetup_r>:
 800a6d4:	b538      	push	{r3, r4, r5, lr}
 800a6d6:	4b29      	ldr	r3, [pc, #164]	@ (800a77c <__swsetup_r+0xa8>)
 800a6d8:	4605      	mov	r5, r0
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	460c      	mov	r4, r1
 800a6de:	b118      	cbz	r0, 800a6e8 <__swsetup_r+0x14>
 800a6e0:	6a03      	ldr	r3, [r0, #32]
 800a6e2:	b90b      	cbnz	r3, 800a6e8 <__swsetup_r+0x14>
 800a6e4:	f7fc fce8 	bl	80070b8 <__sinit>
 800a6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ec:	0719      	lsls	r1, r3, #28
 800a6ee:	d422      	bmi.n	800a736 <__swsetup_r+0x62>
 800a6f0:	06da      	lsls	r2, r3, #27
 800a6f2:	d407      	bmi.n	800a704 <__swsetup_r+0x30>
 800a6f4:	2209      	movs	r2, #9
 800a6f6:	602a      	str	r2, [r5, #0]
 800a6f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6fc:	81a3      	strh	r3, [r4, #12]
 800a6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a702:	e033      	b.n	800a76c <__swsetup_r+0x98>
 800a704:	0758      	lsls	r0, r3, #29
 800a706:	d512      	bpl.n	800a72e <__swsetup_r+0x5a>
 800a708:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a70a:	b141      	cbz	r1, 800a71e <__swsetup_r+0x4a>
 800a70c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a710:	4299      	cmp	r1, r3
 800a712:	d002      	beq.n	800a71a <__swsetup_r+0x46>
 800a714:	4628      	mov	r0, r5
 800a716:	f7fd fcc3 	bl	80080a0 <_free_r>
 800a71a:	2300      	movs	r3, #0
 800a71c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a724:	81a3      	strh	r3, [r4, #12]
 800a726:	2300      	movs	r3, #0
 800a728:	6063      	str	r3, [r4, #4]
 800a72a:	6923      	ldr	r3, [r4, #16]
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	89a3      	ldrh	r3, [r4, #12]
 800a730:	f043 0308 	orr.w	r3, r3, #8
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	b94b      	cbnz	r3, 800a74e <__swsetup_r+0x7a>
 800a73a:	89a3      	ldrh	r3, [r4, #12]
 800a73c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a740:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a744:	d003      	beq.n	800a74e <__swsetup_r+0x7a>
 800a746:	4621      	mov	r1, r4
 800a748:	4628      	mov	r0, r5
 800a74a:	f000 f83f 	bl	800a7cc <__smakebuf_r>
 800a74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a752:	f013 0201 	ands.w	r2, r3, #1
 800a756:	d00a      	beq.n	800a76e <__swsetup_r+0x9a>
 800a758:	2200      	movs	r2, #0
 800a75a:	60a2      	str	r2, [r4, #8]
 800a75c:	6962      	ldr	r2, [r4, #20]
 800a75e:	4252      	negs	r2, r2
 800a760:	61a2      	str	r2, [r4, #24]
 800a762:	6922      	ldr	r2, [r4, #16]
 800a764:	b942      	cbnz	r2, 800a778 <__swsetup_r+0xa4>
 800a766:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a76a:	d1c5      	bne.n	800a6f8 <__swsetup_r+0x24>
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
 800a76e:	0799      	lsls	r1, r3, #30
 800a770:	bf58      	it	pl
 800a772:	6962      	ldrpl	r2, [r4, #20]
 800a774:	60a2      	str	r2, [r4, #8]
 800a776:	e7f4      	b.n	800a762 <__swsetup_r+0x8e>
 800a778:	2000      	movs	r0, #0
 800a77a:	e7f7      	b.n	800a76c <__swsetup_r+0x98>
 800a77c:	2000001c 	.word	0x2000001c

0800a780 <__swhatbuf_r>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	460c      	mov	r4, r1
 800a784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a788:	2900      	cmp	r1, #0
 800a78a:	b096      	sub	sp, #88	@ 0x58
 800a78c:	4615      	mov	r5, r2
 800a78e:	461e      	mov	r6, r3
 800a790:	da0d      	bge.n	800a7ae <__swhatbuf_r+0x2e>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a798:	f04f 0100 	mov.w	r1, #0
 800a79c:	bf14      	ite	ne
 800a79e:	2340      	movne	r3, #64	@ 0x40
 800a7a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	6031      	str	r1, [r6, #0]
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	b016      	add	sp, #88	@ 0x58
 800a7ac:	bd70      	pop	{r4, r5, r6, pc}
 800a7ae:	466a      	mov	r2, sp
 800a7b0:	f000 f848 	bl	800a844 <_fstat_r>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	dbec      	blt.n	800a792 <__swhatbuf_r+0x12>
 800a7b8:	9901      	ldr	r1, [sp, #4]
 800a7ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a7be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a7c2:	4259      	negs	r1, r3
 800a7c4:	4159      	adcs	r1, r3
 800a7c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7ca:	e7eb      	b.n	800a7a4 <__swhatbuf_r+0x24>

0800a7cc <__smakebuf_r>:
 800a7cc:	898b      	ldrh	r3, [r1, #12]
 800a7ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7d0:	079d      	lsls	r5, r3, #30
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	460c      	mov	r4, r1
 800a7d6:	d507      	bpl.n	800a7e8 <__smakebuf_r+0x1c>
 800a7d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a7dc:	6023      	str	r3, [r4, #0]
 800a7de:	6123      	str	r3, [r4, #16]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	6163      	str	r3, [r4, #20]
 800a7e4:	b003      	add	sp, #12
 800a7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e8:	ab01      	add	r3, sp, #4
 800a7ea:	466a      	mov	r2, sp
 800a7ec:	f7ff ffc8 	bl	800a780 <__swhatbuf_r>
 800a7f0:	9f00      	ldr	r7, [sp, #0]
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7fb fcda 	bl	80061b0 <_malloc_r>
 800a7fc:	b948      	cbnz	r0, 800a812 <__smakebuf_r+0x46>
 800a7fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a802:	059a      	lsls	r2, r3, #22
 800a804:	d4ee      	bmi.n	800a7e4 <__smakebuf_r+0x18>
 800a806:	f023 0303 	bic.w	r3, r3, #3
 800a80a:	f043 0302 	orr.w	r3, r3, #2
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	e7e2      	b.n	800a7d8 <__smakebuf_r+0xc>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	6020      	str	r0, [r4, #0]
 800a816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	9b01      	ldr	r3, [sp, #4]
 800a81e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a822:	b15b      	cbz	r3, 800a83c <__smakebuf_r+0x70>
 800a824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a828:	4630      	mov	r0, r6
 800a82a:	f000 f81d 	bl	800a868 <_isatty_r>
 800a82e:	b128      	cbz	r0, 800a83c <__smakebuf_r+0x70>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f023 0303 	bic.w	r3, r3, #3
 800a836:	f043 0301 	orr.w	r3, r3, #1
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	431d      	orrs	r5, r3
 800a840:	81a5      	strh	r5, [r4, #12]
 800a842:	e7cf      	b.n	800a7e4 <__smakebuf_r+0x18>

0800a844 <_fstat_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d07      	ldr	r5, [pc, #28]	@ (800a864 <_fstat_r+0x20>)
 800a848:	2300      	movs	r3, #0
 800a84a:	4604      	mov	r4, r0
 800a84c:	4608      	mov	r0, r1
 800a84e:	4611      	mov	r1, r2
 800a850:	602b      	str	r3, [r5, #0]
 800a852:	f7f8 fb03 	bl	8002e5c <_fstat>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	d102      	bne.n	800a860 <_fstat_r+0x1c>
 800a85a:	682b      	ldr	r3, [r5, #0]
 800a85c:	b103      	cbz	r3, 800a860 <_fstat_r+0x1c>
 800a85e:	6023      	str	r3, [r4, #0]
 800a860:	bd38      	pop	{r3, r4, r5, pc}
 800a862:	bf00      	nop
 800a864:	200008a8 	.word	0x200008a8

0800a868 <_isatty_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d06      	ldr	r5, [pc, #24]	@ (800a884 <_isatty_r+0x1c>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f8 fb02 	bl	8002e7c <_isatty>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_isatty_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_isatty_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	200008a8 	.word	0x200008a8

0800a888 <_init>:
 800a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88a:	bf00      	nop
 800a88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88e:	bc08      	pop	{r3}
 800a890:	469e      	mov	lr, r3
 800a892:	4770      	bx	lr

0800a894 <_fini>:
 800a894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a896:	bf00      	nop
 800a898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89a:	bc08      	pop	{r3}
 800a89c:	469e      	mov	lr, r3
 800a89e:	4770      	bx	lr
