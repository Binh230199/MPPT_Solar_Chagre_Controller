
MPPT_Solar_Charge_Official.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b474  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010c8  0800b608  0800b608  0001b608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6d0  0800c6d0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6d0  0800c6d0  0001c6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6d8  0800c6d8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6d8  0800c6d8  0001c6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6dc  0800c6dc  0001c6dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c6e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000798  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000978  20000978  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003af06  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006f96  00000000  00000000  0005b159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000c7be  00000000  00000000  000620ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012e8  00000000  00000000  0006e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000012fb  00000000  00000000  0006fb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b722  00000000  00000000  00070e93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00029499  00000000  00000000  0009c5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ef9b3  00000000  00000000  000c5a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005234  00000000  00000000  001b5404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000076  00000000  00000000  001ba638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5ec 	.word	0x0800b5ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800b5ec 	.word	0x0800b5ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ZN4blib13SystemManagerD1Ev>:

            }
            virtual ~SystemManager()
            {

            }
 8000ff0:	4770      	bx	lr

08000ff2 <_ZN8ConstantD1Ev>:
enum class OutputMode
{
    PSU, CHARGER, INVERTER,
};

class Constant : public blib::dp::Singleton<Constant>
 8000ff2:	4770      	bx	lr

08000ff4 <_ZN4blib13SystemManagerD0Ev>:
            virtual ~SystemManager()
 8000ff4:	b510      	push	{r4, lr}
            }
 8000ff6:	2108      	movs	r1, #8
            virtual ~SystemManager()
 8000ff8:	4604      	mov	r4, r0
            }
 8000ffa:	f005 fcb3 	bl	8006964 <_ZdlPvj>
 8000ffe:	4620      	mov	r0, r4
 8001000:	bd10      	pop	{r4, pc}

08001002 <_ZN8ConstantD0Ev>:
 8001002:	b510      	push	{r4, lr}
 8001004:	2118      	movs	r1, #24
 8001006:	4604      	mov	r4, r0
 8001008:	f005 fcac 	bl	8006964 <_ZdlPvj>
 800100c:	4620      	mov	r0, r4
 800100e:	bd10      	pop	{r4, pc}

08001010 <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8001010:	b507      	push	{r0, r1, r2, lr}
 8001012:	9001      	str	r0, [sp, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8001014:	f7ff f92c 	bl	8000270 <strlen>
 8001018:	b282      	uxth	r2, r0
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <_ZN4blib6Logger5printEPKc+0x20>)
 800101c:	9901      	ldr	r1, [sp, #4]
 800101e:	6800      	ldr	r0, [r0, #0]
 8001020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            }
 8001024:	b003      	add	sp, #12
 8001026:	f85d eb04 	ldr.w	lr, [sp], #4
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 800102a:	f004 bc37 	b.w	800589c <HAL_UART_Transmit>
 800102e:	bf00      	nop
 8001030:	20000014 	.word	0x20000014

08001034 <_ZN4blib11LcdSimulateC1Ev>:
    using Callback = void (LcdSimulate::*)();

    class LcdSimulate : public dp::Singleton<LcdSimulate>
    {
        public:
            LcdSimulate() : mLcd(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 8001034:	b538      	push	{r3, r4, r5, lr}
 8001036:	4604      	mov	r4, r0
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <_ZN4blib11LcdSimulateC1Ev+0x68>)
 800103a:	f844 3b0c 	str.w	r3, [r4], #12
 800103e:	4605      	mov	r5, r0
 8001040:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <_ZN4blib11LcdSimulateC1Ev+0x6c>)
 8001042:	234e      	movs	r3, #78	; 0x4e
 8001044:	2101      	movs	r1, #1
 8001046:	4620      	mov	r0, r4
 8001048:	f005 fa24 	bl	8006494 <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh>
            {
                mLcd.clearDisplay();
 800104c:	4620      	mov	r0, r4
 800104e:	f005 f9c7 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "DO AN TOT NGHIEP");
 8001052:	4620      	mov	r0, r4
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_ZN4blib11LcdSimulateC1Ev+0x70>)
 8001056:	2201      	movs	r2, #1
 8001058:	2100      	movs	r1, #0
 800105a:	f005 f923 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "NAM HOC: 2023-2024");
 800105e:	2201      	movs	r2, #1
 8001060:	4611      	mov	r1, r2
 8001062:	4620      	mov	r0, r4
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_ZN4blib11LcdSimulateC1Ev+0x74>)
 8001066:	f005 f91d 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "LOP: DTD61DH");
 800106a:	4620      	mov	r0, r4
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <_ZN4blib11LcdSimulateC1Ev+0x78>)
 800106e:	2201      	movs	r2, #1
 8001070:	2102      	movs	r1, #2
 8001072:	f005 f917 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 1, "DAI HOC HANG HAI VN");
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <_ZN4blib11LcdSimulateC1Ev+0x7c>)
 8001078:	2201      	movs	r2, #1
 800107a:	2103      	movs	r1, #3
 800107c:	4620      	mov	r0, r4
 800107e:	f005 f911 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.clearDisplay();
 8001082:	4620      	mov	r0, r4
 8001084:	f005 f9ac 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                HAL_Delay(2000);
 8001088:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800108c:	f002 fb3c 	bl	8003708 <HAL_Delay>
                mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_ZN4blib11LcdSimulateC1Ev+0x80>)
 8001092:	606b      	str	r3, [r5, #4]
 8001094:	2300      	movs	r3, #0
 8001096:	60ab      	str	r3, [r5, #8]
            }
 8001098:	4628      	mov	r0, r5
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	0800c044 	.word	0x0800c044
 80010a0:	2000030c 	.word	0x2000030c
 80010a4:	0800b76d 	.word	0x0800b76d
 80010a8:	0800b77e 	.word	0x0800b77e
 80010ac:	0800b791 	.word	0x0800b791
 80010b0:	0800b79e 	.word	0x0800b79e
 80010b4:	08001391 	.word	0x08001391

080010b8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010b8:	b530      	push	{r4, r5, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ba:	2400      	movs	r4, #0
{
 80010bc:	b095      	sub	sp, #84	; 0x54
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010be:	2214      	movs	r2, #20
 80010c0:	4621      	mov	r1, r4
 80010c2:	a803      	add	r0, sp, #12
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010c8:	f006 ff0f 	bl	8007eea <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <_Z18SystemClock_Configv+0x90>)
 80010ce:	9401      	str	r4, [sp, #4]
 80010d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	9b01      	ldr	r3, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <_Z18SystemClock_Configv+0x94>)
 80010e4:	9402      	str	r4, [sp, #8]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	9b02      	ldr	r3, [sp, #8]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 80010f8:	230a      	movs	r3, #10
 80010fa:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fc:	2210      	movs	r2, #16
 80010fe:	2301      	movs	r3, #1
 8001100:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001104:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 72;
 8001106:	2108      	movs	r1, #8
 8001108:	2348      	movs	r3, #72	; 0x48
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2502      	movs	r5, #2
    RCC_OscInitStruct.PLL.PLLN = 72;
 800110c:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001112:	2304      	movs	r3, #4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001118:	9512      	str	r5, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800111a:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f003 fb14 	bl	8004748 <HAL_RCC_OscConfig>
 8001120:	b108      	cbz	r0, 8001126 <_Z18SystemClock_Configv+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001122:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001124:	e7fe      	b.n	8001124 <_Z18SystemClock_Configv+0x6c>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001126:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	e9cd 3503 	strd	r3, r5, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	e9cd 3006 	strd	r3, r0, [sp, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	9005      	str	r0, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001136:	4629      	mov	r1, r5
 8001138:	a803      	add	r0, sp, #12
 800113a:	f003 fcdf 	bl	8004afc <HAL_RCC_ClockConfig>
 800113e:	b108      	cbz	r0, 8001144 <_Z18SystemClock_Configv+0x8c>
 8001140:	b672      	cpsid	i
    while (1)
 8001142:	e7fe      	b.n	8001142 <_Z18SystemClock_Configv+0x8a>
}
 8001144:	b015      	add	sp, #84	; 0x54
 8001146:	bd30      	pop	{r4, r5, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <Error_Handler>:
 8001150:	b672      	cpsid	i
    while (1)
 8001152:	e7fe      	b.n	8001152 <Error_Handler+0x2>

08001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
    {
        template<typename T>
        class Singleton
        {
            public:
                static T& getInstance()
 8001154:	b538      	push	{r3, r4, r5, lr}
                {
                    if (mInstance == nullptr)
 8001156:	4c06      	ldr	r4, [pc, #24]	; (8001170 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x1c>)
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	b933      	cbnz	r3, 800116a <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x16>
                    {
                        mInstance = new T();
 800115c:	2048      	movs	r0, #72	; 0x48
 800115e:	f005 fc12 	bl	8006986 <_Znwj>
 8001162:	4605      	mov	r5, r0
 8001164:	f004 fc0c 	bl	8005980 <_ZN4blib6AnalogC1Ev>
 8001168:	6025      	str	r5, [r4, #0]
                    }

                    return *mInstance;
                }
 800116a:	6820      	ldr	r0, [r4, #0]
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop
 8001170:	20000210 	.word	0x20000210

08001174 <HAL_ADC_ConvCpltCallback>:
{
 8001174:	b508      	push	{r3, lr}
    blib::Analog::getInstance().sampling();
 8001176:	f7ff ffed 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
}
 800117a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    blib::Analog::getInstance().sampling();
 800117e:	f004 bbf9 	b.w	8005974 <_ZN4blib6Analog8samplingEv>
	...

08001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 8001184:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 8001186:	4c06      	ldr	r4, [pc, #24]	; (80011a0 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x1c>)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	b933      	cbnz	r3, 800119a <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x16>
                        mInstance = new T();
 800118c:	2024      	movs	r0, #36	; 0x24
 800118e:	f005 fbfa 	bl	8006986 <_Znwj>
 8001192:	4605      	mov	r5, r0
 8001194:	f004 fe4e 	bl	8005e34 <_ZN4blib13ChargeControlC1Ev>
 8001198:	6025      	str	r5, [r4, #0]
                }
 800119a:	6820      	ldr	r0, [r4, #0]
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	bf00      	nop
 80011a0:	2000020c 	.word	0x2000020c

080011a4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>:
                static T& getInstance()
 80011a4:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 80011a6:	4c06      	ldr	r4, [pc, #24]	; (80011c0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x1c>)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	b933      	cbnz	r3, 80011ba <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x16>
                        mInstance = new T();
 80011ac:	2020      	movs	r0, #32
 80011ae:	f005 fbea 	bl	8006986 <_Znwj>
 80011b2:	4605      	mov	r5, r0
 80011b4:	f7ff ff3e 	bl	8001034 <_ZN4blib11LcdSimulateC1Ev>
 80011b8:	6025      	str	r5, [r4, #0]
                }
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
 80011be:	bf00      	nop
 80011c0:	200001fc 	.word	0x200001fc

080011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 80011c4:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 80011c6:	4c06      	ldr	r4, [pc, #24]	; (80011e0 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x1c>)
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	b933      	cbnz	r3, 80011da <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x16>
                        mInstance = new T();
 80011cc:	2008      	movs	r0, #8
 80011ce:	f005 fbda 	bl	8006986 <_Znwj>
 80011d2:	4605      	mov	r5, r0
 80011d4:	f004 fd78 	bl	8005cc8 <_ZN4blib6ButtonC1Ev>
 80011d8:	6025      	str	r5, [r4, #0]
                }
 80011da:	6820      	ldr	r0, [r4, #0]
 80011dc:	bd38      	pop	{r3, r4, r5, pc}
 80011de:	bf00      	nop
 80011e0:	20000218 	.word	0x20000218

080011e4 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv>:
                mLcd.displayLine(arrowLine, 0, ">");

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
            }

            void impl_3_AboutScreen()
 80011e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011e6:	4604      	mov	r4, r0
            {
                auto &button = Button::getInstance();
 80011e8:	f7ff ffec 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80011ec:	4605      	mov	r5, r0

                mLcd.clearDisplay();
 80011ee:	f104 000c 	add.w	r0, r4, #12
 80011f2:	9001      	str	r0, [sp, #4]
 80011f4:	f005 f8f4 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MPPT SOLAR CHARGER");
 80011f8:	2200      	movs	r2, #0
 80011fa:	9801      	ldr	r0, [sp, #4]
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x6c>)
 80011fe:	4611      	mov	r1, r2
 8001200:	f005 f850 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, "FIRMWARE VER: 1.0.0");
 8001204:	9801      	ldr	r0, [sp, #4]
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x70>)
 8001208:	2200      	movs	r2, #0
 800120a:	2101      	movs	r1, #1
 800120c:	f005 f84a 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, "CONTACT:09123123123");
 8001210:	9801      	ldr	r0, [sp, #4]
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	2102      	movs	r1, #2
 8001218:	f005 f844 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, "4BACK");
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x78>)
 800121e:	9801      	ldr	r0, [sp, #4]
 8001220:	220f      	movs	r2, #15
 8001222:	2103      	movs	r1, #3
 8001224:	f005 f83e 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001228:	4628      	mov	r0, r5
 800122a:	f004 fd55 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800122e:	2804      	cmp	r0, #4
                {
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001230:	bf04      	itt	eq
 8001232:	4b0b      	ldreq	r3, [pc, #44]	; (8001260 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x7c>)
 8001234:	6063      	streq	r3, [r4, #4]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001236:	f04f 0100 	mov.w	r1, #0
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 800123a:	bf08      	it	eq
 800123c:	2300      	moveq	r3, #0
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800123e:	4628      	mov	r0, r5
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001240:	bf08      	it	eq
 8001242:	60a3      	streq	r3, [r4, #8]
            }
 8001244:	b003      	add	sp, #12
 8001246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800124a:	f004 bd43 	b.w	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 800124e:	bf00      	nop
 8001250:	0800b7b2 	.word	0x0800b7b2
 8001254:	0800b7c5 	.word	0x0800b7c5
 8001258:	0800b7d9 	.word	0x0800b7d9
 800125c:	0800be0c 	.word	0x0800be0c
 8001260:	080014f5 	.word	0x080014f5

08001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8001264:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8001268:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80012a8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>
            static void Log(const char *message, Args ... args)
 800126c:	460d      	mov	r5, r1
 800126e:	4616      	mov	r6, r2
 8001270:	461f      	mov	r7, r3
 8001272:	4604      	mov	r4, r0
                print("[>]  ");
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x3c>)
 8001276:	f7ff fecb 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 800127a:	462b      	mov	r3, r5
 800127c:	4622      	mov	r2, r4
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	e9cd 6700 	strd	r6, r7, [sp]
 8001286:	4640      	mov	r0, r8
 8001288:	f006 fd98 	bl	8007dbc <sniprintf>
                print(mBuffer);
 800128c:	4640      	mov	r0, r8
 800128e:	f7ff febf 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8001294:	f7ff febc 	bl	8001010 <_ZN4blib6Logger5printEPKc>
            }
 8001298:	b002      	add	sp, #8
 800129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129e:	bf00      	nop
 80012a0:	0800b7ed 	.word	0x0800b7ed
 80012a4:	0800c66c 	.word	0x0800c66c
 80012a8:	20000428 	.word	0x20000428

080012ac <HAL_GPIO_EXTI_Callback>:
{
 80012ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    for (volatile uint32_t i = 0; i < timedelay; i++);
 80012ae:	2300      	movs	r3, #0
 80012b0:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <HAL_GPIO_EXTI_Callback+0xb8>)
 80012b2:	9301      	str	r3, [sp, #4]
{
 80012b4:	4604      	mov	r4, r0
    for (volatile uint32_t i = 0; i < timedelay; i++);
 80012b6:	9b01      	ldr	r3, [sp, #4]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d324      	bcc.n	8001306 <HAL_GPIO_EXTI_Callback+0x5a>
    volatile uint32_t i = 0;
 80012bc:	2500      	movs	r5, #0
    if (GPIO_pin == BUT_UP_Pin)
 80012be:	2c01      	cmp	r4, #1
        LOGI("Button Up pin");
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_GPIO_EXTI_Callback+0xbc>)
 80012c2:	4e2a      	ldr	r6, [pc, #168]	; (800136c <HAL_GPIO_EXTI_Callback+0xc0>)
    volatile uint32_t i = 0;
 80012c4:	9502      	str	r5, [sp, #8]
    if (GPIO_pin == BUT_UP_Pin)
 80012c6:	d122      	bne.n	800130e <HAL_GPIO_EXTI_Callback+0x62>
        LOGI("Button Up pin");
 80012c8:	4929      	ldr	r1, [pc, #164]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 80012ca:	482a      	ldr	r0, [pc, #168]	; (8001374 <HAL_GPIO_EXTI_Callback+0xc8>)
 80012cc:	2259      	movs	r2, #89	; 0x59
        LOGI("Button Down pin");
 80012ce:	f7ff ffc9 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::DOWN;
 80012d2:	6034      	str	r4, [r6, #0]
        pGPIOx = BUT_DOWN_GPIO_Port;
 80012d4:	4d28      	ldr	r5, [pc, #160]	; (8001378 <HAL_GPIO_EXTI_Callback+0xcc>)
    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 80012d6:	f7ff ff75 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80012da:	6831      	ldr	r1, [r6, #0]
 80012dc:	f004 fcfa 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 80012e0:	f7ff ff70 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80012e4:	f004 fcfa 	bl	8005cdc <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 80012e8:	b36d      	cbz	r5, 8001346 <HAL_GPIO_EXTI_Callback+0x9a>
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) && (i < (timedelay)))
 80012ea:	4d23      	ldr	r5, [pc, #140]	; (8001378 <HAL_GPIO_EXTI_Callback+0xcc>)
 80012ec:	4e1d      	ldr	r6, [pc, #116]	; (8001364 <HAL_GPIO_EXTI_Callback+0xb8>)
 80012ee:	4621      	mov	r1, r4
 80012f0:	4628      	mov	r0, r5
 80012f2:	f002 ff8f 	bl	8004214 <HAL_GPIO_ReadPin>
 80012f6:	bb30      	cbnz	r0, 8001346 <HAL_GPIO_EXTI_Callback+0x9a>
 80012f8:	9b02      	ldr	r3, [sp, #8]
 80012fa:	42b3      	cmp	r3, r6
 80012fc:	d223      	bcs.n	8001346 <HAL_GPIO_EXTI_Callback+0x9a>
            i++;
 80012fe:	9b02      	ldr	r3, [sp, #8]
 8001300:	3301      	adds	r3, #1
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	e7f3      	b.n	80012ee <HAL_GPIO_EXTI_Callback+0x42>
    for (volatile uint32_t i = 0; i < timedelay; i++);
 8001306:	9b01      	ldr	r3, [sp, #4]
 8001308:	3301      	adds	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	e7d3      	b.n	80012b6 <HAL_GPIO_EXTI_Callback+0xa>
    else if (GPIO_pin == BUT_DOWN_Pin)
 800130e:	2c02      	cmp	r4, #2
 8001310:	d103      	bne.n	800131a <HAL_GPIO_EXTI_Callback+0x6e>
        LOGI("Button Down pin");
 8001312:	4917      	ldr	r1, [pc, #92]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001314:	4819      	ldr	r0, [pc, #100]	; (800137c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001316:	225f      	movs	r2, #95	; 0x5f
 8001318:	e7d9      	b.n	80012ce <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_pin == BUT_BACK_Pin)
 800131a:	2c04      	cmp	r4, #4
 800131c:	d103      	bne.n	8001326 <HAL_GPIO_EXTI_Callback+0x7a>
        LOGI("Button Back pin");
 800131e:	4914      	ldr	r1, [pc, #80]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001320:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001322:	2265      	movs	r2, #101	; 0x65
 8001324:	e7d3      	b.n	80012ce <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_pin == BUT_SEL_Pin)
 8001326:	2c08      	cmp	r4, #8
 8001328:	d107      	bne.n	800133a <HAL_GPIO_EXTI_Callback+0x8e>
        LOGI("Button Select pin");
 800132a:	4911      	ldr	r1, [pc, #68]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <HAL_GPIO_EXTI_Callback+0xd8>)
 800132e:	226b      	movs	r2, #107	; 0x6b
 8001330:	f7ff ff98 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SEL;
 8001334:	2303      	movs	r3, #3
 8001336:	6033      	str	r3, [r6, #0]
        pGPIOx = BUT_SEL_GPIO_Port;
 8001338:	e7cc      	b.n	80012d4 <HAL_GPIO_EXTI_Callback+0x28>
        LOGI("Undefined Exti Signal");
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 800133c:	4812      	ldr	r0, [pc, #72]	; (8001388 <HAL_GPIO_EXTI_Callback+0xdc>)
 800133e:	2271      	movs	r2, #113	; 0x71
 8001340:	f7ff ff90 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
 8001344:	e7c7      	b.n	80012d6 <HAL_GPIO_EXTI_Callback+0x2a>
    for (volatile uint32_t i = 0; i < timedelay; i++);
 8001346:	2300      	movs	r3, #0
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_GPIO_EXTI_Callback+0xb8>)
 800134a:	9303      	str	r3, [sp, #12]
 800134c:	9b03      	ldr	r3, [sp, #12]
 800134e:	4293      	cmp	r3, r2
 8001350:	d303      	bcc.n	800135a <HAL_GPIO_EXTI_Callback+0xae>
    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001354:	615c      	str	r4, [r3, #20]
}
 8001356:	b004      	add	sp, #16
 8001358:	bd70      	pop	{r4, r5, r6, pc}
    for (volatile uint32_t i = 0; i < timedelay; i++);
 800135a:	9b03      	ldr	r3, [sp, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	9303      	str	r3, [sp, #12]
 8001360:	e7f4      	b.n	800134c <HAL_GPIO_EXTI_Callback+0xa0>
 8001362:	bf00      	nop
 8001364:	0027ac40 	.word	0x0027ac40
 8001368:	0800b7f3 	.word	0x0800b7f3
 800136c:	20000260 	.word	0x20000260
 8001370:	0800b80a 	.word	0x0800b80a
 8001374:	0800b813 	.word	0x0800b813
 8001378:	40020800 	.word	0x40020800
 800137c:	0800b82e 	.word	0x0800b82e
 8001380:	0800b84b 	.word	0x0800b84b
 8001384:	0800b868 	.word	0x0800b868
 8001388:	0800b887 	.word	0x0800b887
 800138c:	40013c00 	.word	0x40013c00

08001390 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv>:
            void impl_1_HomeScreen()
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	b09b      	sub	sp, #108	; 0x6c
 8001394:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8001396:	f7ff ff15 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800139a:	4605      	mov	r5, r0
                auto &analog = Analog::getInstance();
 800139c:	f7ff feda 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 };
 80013a0:	2600      	movs	r6, #0
                auto &analog = Analog::getInstance();
 80013a2:	4604      	mov	r4, r0
                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 };
 80013a4:	2211      	movs	r2, #17
 80013a6:	4631      	mov	r1, r6
 80013a8:	a809      	add	r0, sp, #36	; 0x24
 80013aa:	9608      	str	r6, [sp, #32]
 80013ac:	f006 fd9d 	bl	8007eea <memset>
 80013b0:	2211      	movs	r2, #17
 80013b2:	4631      	mov	r1, r6
 80013b4:	a80f      	add	r0, sp, #60	; 0x3c
 80013b6:	960e      	str	r6, [sp, #56]	; 0x38
 80013b8:	f006 fd97 	bl	8007eea <memset>
 80013bc:	2211      	movs	r2, #17
 80013be:	4631      	mov	r1, r6
 80013c0:	a815      	add	r0, sp, #84	; 0x54
 80013c2:	9614      	str	r6, [sp, #80]	; 0x50
 80013c4:	f006 fd91 	bl	8007eea <memset>
                snprintf(line0, 21, "I:%2.1fV %2.1fA %2.1fW", analog.mVin, analog.mIin,
 80013c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80013ca:	f7ff f8bd 	bl	8000548 <__aeabi_f2d>
 80013ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013d4:	f7ff f8b8 	bl	8000548 <__aeabi_f2d>
 80013d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013dc:	6a20      	ldr	r0, [r4, #32]
 80013de:	f7ff f8b3 	bl	8000548 <__aeabi_f2d>
 80013e2:	4a3a      	ldr	r2, [pc, #232]	; (80014cc <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x13c>)
 80013e4:	e9cd 0100 	strd	r0, r1, [sp]
 80013e8:	2115      	movs	r1, #21
 80013ea:	a808      	add	r0, sp, #32
 80013ec:	f006 fce6 	bl	8007dbc <sniprintf>
                snprintf(line1, 21, "O:%2.1fV %2.1fA %2.1fW", analog.mVout, analog.mIout,
 80013f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013f2:	f7ff f8a9 	bl	8000548 <__aeabi_f2d>
 80013f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80013fc:	f7ff f8a4 	bl	8000548 <__aeabi_f2d>
 8001400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001404:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001406:	f7ff f89f 	bl	8000548 <__aeabi_f2d>
 800140a:	4a31      	ldr	r2, [pc, #196]	; (80014d0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x140>)
 800140c:	e9cd 0100 	strd	r0, r1, [sp]
 8001410:	2115      	movs	r1, #21
 8001412:	a80e      	add	r0, sp, #56	; 0x38
 8001414:	f006 fcd2 	bl	8007dbc <sniprintf>
                if (analog.mInputSource == PowerSrc::USB_PORT)
 8001418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800141a:	2b00      	cmp	r3, #0
 800141c:	d134      	bne.n	8001488 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xf8>
                    snprintf(line2, 21, "Src: USB");
 800141e:	492d      	ldr	r1, [pc, #180]	; (80014d4 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x144>)
                    snprintf(line2, 21, "Src: SOLAR");
 8001420:	a814      	add	r0, sp, #80	; 0x50
 8001422:	f006 fe36 	bl	8008092 <strcpy>
                mLcd.clearDisplay();
 8001426:	f107 000c 	add.w	r0, r7, #12
 800142a:	9007      	str	r0, [sp, #28]
 800142c:	f004 ffd8 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, line0);
 8001430:	2200      	movs	r2, #0
 8001432:	4611      	mov	r1, r2
 8001434:	9807      	ldr	r0, [sp, #28]
 8001436:	ab08      	add	r3, sp, #32
 8001438:	f004 ff34 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, line1);
 800143c:	9807      	ldr	r0, [sp, #28]
 800143e:	ab0e      	add	r3, sp, #56	; 0x38
 8001440:	2200      	movs	r2, #0
 8001442:	2101      	movs	r1, #1
 8001444:	f004 ff2e 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, line2);
 8001448:	9807      	ldr	r0, [sp, #28]
 800144a:	ab14      	add	r3, sp, #80	; 0x50
 800144c:	2200      	movs	r2, #0
 800144e:	2102      	movs	r1, #2
 8001450:	f004 ff28 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 2, "Press any button");
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x148>)
 8001456:	9807      	ldr	r0, [sp, #28]
 8001458:	2202      	movs	r2, #2
 800145a:	2103      	movs	r1, #3
 800145c:	f004 ff22 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001460:	4628      	mov	r0, r5
 8001462:	f004 fc39 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001466:	2801      	cmp	r0, #1
 8001468:	d11f      	bne.n	80014aa <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x11a>
                    LOGI("Go to menu screen");
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x14c>)
 800146c:	491c      	ldr	r1, [pc, #112]	; (80014e0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x150>)
 800146e:	481d      	ldr	r0, [pc, #116]	; (80014e4 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x154>)
 8001470:	225a      	movs	r2, #90	; 0x5a
 8001472:	f7ff fef7 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x158>)
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	2100      	movs	r1, #0
 800147c:	60b9      	str	r1, [r7, #8]
                    button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800147e:	4628      	mov	r0, r5
 8001480:	f004 fc28 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001484:	b01b      	add	sp, #108	; 0x6c
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}
                else if (analog.mInputSource == PowerSrc::SOLAR)
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x100>
                    snprintf(line2, 21, "Src: SOLAR");
 800148c:	4917      	ldr	r1, [pc, #92]	; (80014ec <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x15c>)
 800148e:	e7c7      	b.n	8001420 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x90>
                else if (analog.mInputSource == PowerSrc::BATTERY)
 8001490:	2b02      	cmp	r3, #2
 8001492:	d1c8      	bne.n	8001426 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x96>
                    snprintf(line2, 21, "Src: BAT [%.1f%%]", analog.mBatteryPercent);
 8001494:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001496:	f7ff f857 	bl	8000548 <__aeabi_f2d>
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x160>)
 800149c:	e9cd 0100 	strd	r0, r1, [sp]
 80014a0:	2115      	movs	r1, #21
 80014a2:	a814      	add	r0, sp, #80	; 0x50
 80014a4:	f006 fc8a 	bl	8007dbc <sniprintf>
 80014a8:	e7bd      	b.n	8001426 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x96>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
 80014aa:	4628      	mov	r0, r5
 80014ac:	f004 fc14 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80014b0:	2802      	cmp	r0, #2
 80014b2:	d0da      	beq.n	800146a <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xda>
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
 80014b4:	4628      	mov	r0, r5
 80014b6:	f004 fc0f 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80014ba:	2803      	cmp	r0, #3
 80014bc:	d0d5      	beq.n	800146a <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xda>
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 80014be:	4628      	mov	r0, r5
 80014c0:	f004 fc0a 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80014c4:	2804      	cmp	r0, #4
 80014c6:	d1dd      	bne.n	8001484 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xf4>
 80014c8:	e7cf      	b.n	800146a <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xda>
 80014ca:	bf00      	nop
 80014cc:	0800b8aa 	.word	0x0800b8aa
 80014d0:	0800b8c1 	.word	0x0800b8c1
 80014d4:	0800b8d8 	.word	0x0800b8d8
 80014d8:	0800b8fe 	.word	0x0800b8fe
 80014dc:	0800b90f 	.word	0x0800b90f
 80014e0:	0800b921 	.word	0x0800b921
 80014e4:	0800b92b 	.word	0x0800b92b
 80014e8:	080014f5 	.word	0x080014f5
 80014ec:	0800b8e1 	.word	0x0800b8e1
 80014f0:	0800b8ec 	.word	0x0800b8ec

080014f4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv>:
            void impl_2_MenuScreen()
 80014f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014f6:	4604      	mov	r4, r0
                auto &button = Button::getInstance();
 80014f8:	f7ff fe64 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80014fc:	4606      	mov	r6, r0
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 80014fe:	f004 fbeb 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001502:	2801      	cmp	r0, #1
 8001504:	4d3a      	ldr	r5, [pc, #232]	; (80015f0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xfc>)
 8001506:	d12f      	bne.n	8001568 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x74>
                    if (arrowLine == 0)
 8001508:	682b      	ldr	r3, [r5, #0]
 800150a:	bb5b      	cbnz	r3, 8001564 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x70>
                        arrowLine = 2;
 800150c:	2302      	movs	r3, #2
                        arrowLine = 0;
 800150e:	602b      	str	r3, [r5, #0]
                mLcd.clearDisplay();
 8001510:	f104 000c 	add.w	r0, r4, #12
 8001514:	9001      	str	r0, [sp, #4]
 8001516:	f004 ff63 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
 800151a:	9801      	ldr	r0, [sp, #4]
 800151c:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x100>)
 800151e:	2201      	movs	r2, #1
 8001520:	2100      	movs	r1, #0
 8001522:	f004 febf 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "2 SETTING MODE");
 8001526:	2201      	movs	r2, #1
 8001528:	9801      	ldr	r0, [sp, #4]
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x104>)
 800152c:	4611      	mov	r1, r2
 800152e:	f004 feb9 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "3 ABOUT");
 8001532:	9801      	ldr	r0, [sp, #4]
 8001534:	4b31      	ldr	r3, [pc, #196]	; (80015fc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x108>)
 8001536:	2201      	movs	r2, #1
 8001538:	2102      	movs	r1, #2
 800153a:	f004 feb3 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 800153e:	9801      	ldr	r0, [sp, #4]
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x10c>)
 8001542:	2200      	movs	r2, #0
 8001544:	2103      	movs	r1, #3
 8001546:	f004 fead 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 800154a:	7829      	ldrb	r1, [r5, #0]
 800154c:	9801      	ldr	r0, [sp, #4]
 800154e:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x110>)
 8001550:	2200      	movs	r2, #0
 8001552:	f004 fea7 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001556:	2100      	movs	r1, #0
 8001558:	4630      	mov	r0, r6
            }
 800155a:	b003      	add	sp, #12
 800155c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001560:	f004 bbb8 	b.w	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        arrowLine--;
 8001564:	3b01      	subs	r3, #1
 8001566:	e7d2      	b.n	800150e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a>
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001568:	4630      	mov	r0, r6
 800156a:	f004 fbb5 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800156e:	2802      	cmp	r0, #2
 8001570:	d106      	bne.n	8001580 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x8c>
                    if (arrowLine == 2)
 8001572:	682b      	ldr	r3, [r5, #0]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d101      	bne.n	800157c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x88>
                        arrowLine = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e7c8      	b.n	800150e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a>
                        arrowLine++;
 800157c:	3301      	adds	r3, #1
 800157e:	e7c6      	b.n	800150e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a>
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001580:	4630      	mov	r0, r6
 8001582:	f004 fba9 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001586:	2804      	cmp	r0, #4
 8001588:	d10a      	bne.n	80015a0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xac>
                    LOGI("Go back to homescreen");
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x114>)
 800158c:	491f      	ldr	r1, [pc, #124]	; (800160c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x118>)
 800158e:	4820      	ldr	r0, [pc, #128]	; (8001610 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x11c>)
 8001590:	2281      	movs	r2, #129	; 0x81
 8001592:	f7ff fe67 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x120>)
 8001598:	6063      	str	r3, [r4, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	60a3      	str	r3, [r4, #8]
                    arrowLine = 0;
 800159e:	e7b6      	b.n	800150e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a>
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80015a0:	4630      	mov	r0, r6
 80015a2:	f004 fb99 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80015a6:	2803      	cmp	r0, #3
 80015a8:	d1b2      	bne.n	8001510 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c>
                    if (arrowLine == 0)
 80015aa:	682f      	ldr	r7, [r5, #0]
 80015ac:	b94f      	cbnz	r7, 80015c2 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xce>
                        LOGI("Go to Display Menu");
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x114>)
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x118>)
 80015b2:	4819      	ldr	r0, [pc, #100]	; (8001618 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x124>)
 80015b4:	228b      	movs	r2, #139	; 0x8b
 80015b6:	f7ff fe55 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_DisplayScroll;
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x128>)
 80015bc:	e9c4 3701 	strd	r3, r7, [r4, #4]
 80015c0:	e7a6      	b.n	8001510 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c>
                    else if (arrowLine == 1)
 80015c2:	2f01      	cmp	r7, #1
 80015c4:	d10a      	bne.n	80015dc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xe8>
                        LOGI("Go to Setting Menu");
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x114>)
 80015c8:	4910      	ldr	r1, [pc, #64]	; (800160c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x118>)
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x12c>)
 80015cc:	2291      	movs	r2, #145	; 0x91
 80015ce:	f7ff fe49 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_SettingScroll;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x130>)
                        mCallback = &LcdSimulate::impl_3_AboutScreen;
 80015d4:	6063      	str	r3, [r4, #4]
 80015d6:	2300      	movs	r3, #0
 80015d8:	60a3      	str	r3, [r4, #8]
 80015da:	e799      	b.n	8001510 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c>
                    else if (arrowLine == 2)
 80015dc:	2f02      	cmp	r7, #2
 80015de:	d197      	bne.n	8001510 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c>
                        LOGI("Go to About");
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x114>)
 80015e2:	490a      	ldr	r1, [pc, #40]	; (800160c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x118>)
 80015e4:	4810      	ldr	r0, [pc, #64]	; (8001628 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x134>)
 80015e6:	2297      	movs	r2, #151	; 0x97
 80015e8:	f7ff fe3c 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_AboutScreen;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x138>)
 80015ee:	e7f1      	b.n	80015d4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xe0>
 80015f0:	2000025c 	.word	0x2000025c
 80015f4:	0800b9d8 	.word	0x0800b9d8
 80015f8:	0800b9e7 	.word	0x0800b9e7
 80015fc:	0800b9f6 	.word	0x0800b9f6
 8001600:	0800b9fe 	.word	0x0800b9fe
 8001604:	0800ba13 	.word	0x0800ba13
 8001608:	0800b94a 	.word	0x0800b94a
 800160c:	0800b921 	.word	0x0800b921
 8001610:	0800b95c 	.word	0x0800b95c
 8001614:	08001391 	.word	0x08001391
 8001618:	0800b97f 	.word	0x0800b97f
 800161c:	08001ecd 	.word	0x08001ecd
 8001620:	0800b99f 	.word	0x0800b99f
 8001624:	08001631 	.word	0x08001631
 8001628:	0800b9bf 	.word	0x0800b9bf
 800162c:	080011e5 	.word	0x080011e5

08001630 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv>:
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                mLcd.displayLine(arrowLine, 0, ">");
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
            }

            void impl_3_SettingScroll()
 8001630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001634:	b0c3      	sub	sp, #268	; 0x10c
 8001636:	4604      	mov	r4, r0
            {
                // Trong che do setting thi dung sac
                ChargeControl::getInstance().mChargePause = true;
 8001638:	f7ff fda4 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 800163c:	f04f 0901 	mov.w	r9, #1

                const int COL = 21;
                const int ROW = 12;

                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
 8001640:	49a0      	ldr	r1, [pc, #640]	; (80018c4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x294>)
                ChargeControl::getInstance().mChargePause = true;
 8001642:	f880 9008 	strb.w	r9, [r0, #8]
                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
 8001646:	22fc      	movs	r2, #252	; 0xfc
 8001648:	a803      	add	r0, sp, #12
 800164a:	f006 fd2a 	bl	80080a2 <memcpy>
                        "7 FAN TRIGGER TEMP", "8 SHUTDOWN TEMP", "9 AUTOLOAD", "10 SET TIME",
                        "11 FACTORY RESET" };
                static int arrowLine = 0;
                static int mIndexLine = 1;

                auto &button = Button::getInstance();
 800164e:	f7ff fdb9 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001652:	4607      	mov	r7, r0
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001654:	f004 fb40 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001658:	4548      	cmp	r0, r9
 800165a:	4d9b      	ldr	r5, [pc, #620]	; (80018c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x298>)
 800165c:	4e9b      	ldr	r6, [pc, #620]	; (80018cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x29c>)
 800165e:	d14e      	bne.n	80016fe <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xce>
                    /*
                     Feature: Dong bo giua index va mui ten '>'
                     - Mui ten phu thuoc vao index.
                     - Moi lan, chi hien thi 3 tuy chon, nen index va mui ten phai dong bo voi nhau
                     */
                    if (mIndexLine == 1)
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	454b      	cmp	r3, r9
                    {
                        mIndexLine = ROW - 1;
 8001664:	bf0b      	itete	eq
 8001666:	230b      	moveq	r3, #11
                        arrowLine = 2;
                    }
                    else
                    {
                        mIndexLine--;
 8001668:	f103 33ff 	addne.w	r3, r3, #4294967295
                        mIndexLine = ROW - 1;
 800166c:	602b      	streq	r3, [r5, #0]
                        mIndexLine--;
 800166e:	602b      	strne	r3, [r5, #0]
                        arrowLine = 2;
 8001670:	bf04      	itt	eq
 8001672:	2302      	moveq	r3, #2
 8001674:	6033      	streq	r3, [r6, #0]
                    }

                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d001      	beq.n	8001680 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x50>
 800167c:	2b0a      	cmp	r3, #10
 800167e:	d104      	bne.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                    {
                        if (arrowLine == 0)
 8001680:	6833      	ldr	r3, [r6, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d139      	bne.n	80016fa <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xca>
                        {
                            arrowLine = 2;
 8001686:	2302      	movs	r3, #2
                    }

                    if (mIndexLine == ROW - 1)
                    {
                        mIndexLine = 1;
                        arrowLine = 0;
 8001688:	6033      	str	r3, [r6, #0]
                else
                {

                }

                mLcd.clearDisplay();
 800168a:	340c      	adds	r4, #12
 800168c:	4620      	mov	r0, r4
 800168e:	f004 fea7 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                if (mIndexLine == 1)
 8001692:	682a      	ldr	r2, [r5, #0]
 8001694:	2a01      	cmp	r2, #1
 8001696:	f040 80df 	bne.w	8001858 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x228>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 800169a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 800169e:	2100      	movs	r1, #0
 80016a0:	4620      	mov	r0, r4
 80016a2:	9201      	str	r2, [sp, #4]
 80016a4:	f004 fdfe 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	f04f 0815 	mov.w	r8, #21
 80016ae:	aa03      	add	r2, sp, #12
 80016b0:	fb03 8308 	mla	r3, r3, r8, r8
 80016b4:	4413      	add	r3, r2
 80016b6:	9a01      	ldr	r2, [sp, #4]
 80016b8:	4620      	mov	r0, r4
 80016ba:	4611      	mov	r1, r2
 80016bc:	f004 fdf2 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	aa03      	add	r2, sp, #12
 80016c4:	3302      	adds	r3, #2
 80016c6:	fb08 2303 	mla	r3, r8, r3, r2
 80016ca:	9a01      	ldr	r2, [sp, #4]
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
                    mLcd.displayLine(1, 1, list[mIndexLine]);
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 80016cc:	4620      	mov	r0, r4
 80016ce:	2102      	movs	r1, #2
 80016d0:	f004 fde8 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 80016d4:	4620      	mov	r0, r4
 80016d6:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	2103      	movs	r1, #3
 80016dc:	f004 fde2 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 80016e0:	4b7c      	ldr	r3, [pc, #496]	; (80018d4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a4>)
 80016e2:	7831      	ldrb	r1, [r6, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	4620      	mov	r0, r4
 80016e8:	f004 fddc 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80016ec:	2100      	movs	r1, #0
 80016ee:	4638      	mov	r0, r7
 80016f0:	f004 faf0 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80016f4:	b043      	add	sp, #268	; 0x10c
 80016f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            arrowLine--;
 80016fa:	3b01      	subs	r3, #1
 80016fc:	e7c4      	b.n	8001688 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x58>
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80016fe:	4638      	mov	r0, r7
 8001700:	f004 faea 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001704:	2802      	cmp	r0, #2
 8001706:	d113      	bne.n	8001730 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x100>
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d001      	beq.n	8001712 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xe2>
 800170e:	2b0a      	cmp	r3, #10
 8001710:	d105      	bne.n	800171e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xee>
                        if (arrowLine == 2)
 8001712:	6832      	ldr	r2, [r6, #0]
 8001714:	2a02      	cmp	r2, #2
                            arrowLine = 0;
 8001716:	bf0c      	ite	eq
 8001718:	2200      	moveq	r2, #0
                            arrowLine++;
 800171a:	3201      	addne	r2, #1
 800171c:	6032      	str	r2, [r6, #0]
                    if (mIndexLine == ROW - 1)
 800171e:	2b0b      	cmp	r3, #11
 8001720:	d103      	bne.n	800172a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xfa>
                        mIndexLine = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	602b      	str	r3, [r5, #0]
                        arrowLine = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	e7ae      	b.n	8001688 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x58>
                        mIndexLine++;
 800172a:	3301      	adds	r3, #1
 800172c:	602b      	str	r3, [r5, #0]
 800172e:	e7ac      	b.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001730:	4638      	mov	r0, r7
 8001732:	f004 fad1 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001736:	2804      	cmp	r0, #4
 8001738:	d115      	bne.n	8001766 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x136>
                    LOGI("Go back to Menu screen");
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 800173c:	4967      	ldr	r1, [pc, #412]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 800173e:	4868      	ldr	r0, [pc, #416]	; (80018e0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2b0>)
 8001740:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001744:	f7ff fd8e 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 8001748:	f04f 0800 	mov.w	r8, #0
 800174c:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2b4>)
 800174e:	6063      	str	r3, [r4, #4]
 8001750:	f8c4 8008 	str.w	r8, [r4, #8]
                    arrowLine = 0;
 8001754:	f8c6 8000 	str.w	r8, [r6]
                    mIndexLine = 1;
 8001758:	f8c5 9000 	str.w	r9, [r5]
                    ChargeControl::getInstance().mChargePause = false;
 800175c:	f7ff fd12 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8001760:	f880 8008 	strb.w	r8, [r0, #8]
 8001764:	e791      	b.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001766:	4638      	mov	r0, r7
 8001768:	f004 fab6 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800176c:	2803      	cmp	r0, #3
 800176e:	d18c      	bne.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                    if (mIndexLine == 1)
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10b      	bne.n	800178e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x15e>
                        LOGI("Go to Supply Algorithm");
 8001776:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001778:	4958      	ldr	r1, [pc, #352]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 800177a:	485b      	ldr	r0, [pc, #364]	; (80018e8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2b8>)
 800177c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8001780:	f7ff fd70 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_SupplyAlgorithm;
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2bc>)
                        mCallback = &LcdSimulate::impl_3_2_FactoryReset;
 8001786:	6063      	str	r3, [r4, #4]
 8001788:	2300      	movs	r3, #0
 800178a:	60a3      	str	r3, [r4, #8]
 800178c:	e77d      	b.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                    else if (mIndexLine == 2)
 800178e:	3b02      	subs	r3, #2
 8001790:	2b09      	cmp	r3, #9
 8001792:	f63f af7a 	bhi.w	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
 8001796:	e8df f003 	tbb	[pc, r3]
 800179a:	0e05      	.short	0x0e05
 800179c:	32292017 	.word	0x32292017
 80017a0:	564d443b 	.word	0x564d443b
                        LOGI("Go to Charge mode");
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017a6:	494d      	ldr	r1, [pc, #308]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017a8:	4851      	ldr	r0, [pc, #324]	; (80018f0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80017aa:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80017ae:	f7ff fd59 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargeMode;
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 80017b4:	e7e7      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Max battery voltage");
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017b8:	4948      	ldr	r1, [pc, #288]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017ba:	484f      	ldr	r0, [pc, #316]	; (80018f8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 80017bc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80017c0:	f7ff fd50 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MaxBatteryVolt;
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 80017c6:	e7de      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Min battery voltage");
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017ca:	4944      	ldr	r1, [pc, #272]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017cc:	484c      	ldr	r0, [pc, #304]	; (8001900 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d0>)
 80017ce:	f240 12af 	movw	r2, #431	; 0x1af
 80017d2:	f7ff fd47 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MinBatteryVolt;
 80017d6:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d4>)
 80017d8:	e7d5      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Charging current");
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017dc:	493f      	ldr	r1, [pc, #252]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017de:	484a      	ldr	r0, [pc, #296]	; (8001908 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d8>)
 80017e0:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80017e4:	f7ff fd3e 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargingCurrent;
 80017e8:	4b48      	ldr	r3, [pc, #288]	; (800190c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2dc>)
 80017ea:	e7cc      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Cooling fan");
 80017ec:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017ee:	493b      	ldr	r1, [pc, #236]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017f0:	4847      	ldr	r0, [pc, #284]	; (8001910 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e0>)
 80017f2:	f240 12b9 	movw	r2, #441	; 0x1b9
 80017f6:	f7ff fd35 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_CoolingFan;
 80017fa:	4b46      	ldr	r3, [pc, #280]	; (8001914 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e4>)
 80017fc:	e7c3      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Fan trigger temp");
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001800:	4936      	ldr	r1, [pc, #216]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 8001802:	4845      	ldr	r0, [pc, #276]	; (8001918 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e8>)
 8001804:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8001808:	f7ff fd2c 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FanTriggerTemp;
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ec>)
 800180e:	e7ba      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Shutdown temp");
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001812:	4932      	ldr	r1, [pc, #200]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 8001814:	4842      	ldr	r0, [pc, #264]	; (8001920 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f0>)
 8001816:	f240 12c3 	movw	r2, #451	; 0x1c3
 800181a:	f7ff fd23 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ShutdownTemp;
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f4>)
 8001820:	e7b1      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Autoload config");
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001824:	492d      	ldr	r1, [pc, #180]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 8001826:	4840      	ldr	r0, [pc, #256]	; (8001928 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f8>)
 8001828:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 800182c:	f7ff fd1a 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_AutoloadCfg;
 8001830:	4b3e      	ldr	r3, [pc, #248]	; (800192c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2fc>)
 8001832:	e7a8      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Backlight");
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001836:	4929      	ldr	r1, [pc, #164]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 8001838:	483d      	ldr	r0, [pc, #244]	; (8001930 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x300>)
 800183a:	f240 12cd 	movw	r2, #461	; 0x1cd
 800183e:	f7ff fd11 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_Settime;
 8001842:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x304>)
 8001844:	e79f      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Factory reset");
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001848:	4924      	ldr	r1, [pc, #144]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 800184a:	483b      	ldr	r0, [pc, #236]	; (8001938 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x308>)
 800184c:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 8001850:	f7ff fd08 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FactoryReset;
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x30c>)
 8001856:	e796      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                else if (mIndexLine == ROW - 1)
 8001858:	2a0b      	cmp	r2, #11
 800185a:	d118      	bne.n	800188e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x25e>
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 800185c:	f10d 03c9 	add.w	r3, sp, #201	; 0xc9
 8001860:	2201      	movs	r2, #1
 8001862:	2100      	movs	r1, #0
 8001864:	4620      	mov	r0, r4
 8001866:	f004 fd1d 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	f04f 0815 	mov.w	r8, #21
 8001870:	aa03      	add	r2, sp, #12
 8001872:	3b01      	subs	r3, #1
 8001874:	fb08 2303 	mla	r3, r8, r3, r2
 8001878:	2201      	movs	r2, #1
 800187a:	4611      	mov	r1, r2
 800187c:	4620      	mov	r0, r4
 800187e:	f004 fd11 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	aa03      	add	r2, sp, #12
 8001886:	fb08 2303 	mla	r3, r8, r3, r2
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 800188a:	2201      	movs	r2, #1
 800188c:	e71e      	b.n	80016cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x9c>
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 800188e:	f04f 0815 	mov.w	r8, #21
 8001892:	1e53      	subs	r3, r2, #1
 8001894:	aa03      	add	r2, sp, #12
 8001896:	fb08 2303 	mla	r3, r8, r3, r2
 800189a:	2100      	movs	r1, #0
 800189c:	2201      	movs	r2, #1
 800189e:	4620      	mov	r0, r4
 80018a0:	f004 fd00 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	aa03      	add	r2, sp, #12
 80018a8:	fb08 2303 	mla	r3, r8, r3, r2
 80018ac:	2201      	movs	r2, #1
 80018ae:	4611      	mov	r1, r2
 80018b0:	4620      	mov	r0, r4
 80018b2:	f004 fcf7 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 80018b6:	682b      	ldr	r3, [r5, #0]
 80018b8:	fb03 8808 	mla	r8, r3, r8, r8
 80018bc:	ab03      	add	r3, sp, #12
 80018be:	4443      	add	r3, r8
 80018c0:	e7e3      	b.n	800188a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x25a>
 80018c2:	bf00      	nop
 80018c4:	0800b608 	.word	0x0800b608
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000254 	.word	0x20000254
 80018d0:	0800b9fe 	.word	0x0800b9fe
 80018d4:	0800ba13 	.word	0x0800ba13
 80018d8:	0800ba15 	.word	0x0800ba15
 80018dc:	0800b921 	.word	0x0800b921
 80018e0:	0800ba2a 	.word	0x0800ba2a
 80018e4:	080014f5 	.word	0x080014f5
 80018e8:	0800ba4e 	.word	0x0800ba4e
 80018ec:	08001dc9 	.word	0x08001dc9
 80018f0:	0800ba72 	.word	0x0800ba72
 80018f4:	08001c81 	.word	0x08001c81
 80018f8:	0800ba91 	.word	0x0800ba91
 80018fc:	080030fd 	.word	0x080030fd
 8001900:	0800bab8 	.word	0x0800bab8
 8001904:	08002f7d 	.word	0x08002f7d
 8001908:	0800badf 	.word	0x0800badf
 800190c:	08002dfd 	.word	0x08002dfd
 8001910:	0800bb03 	.word	0x0800bb03
 8001914:	080028b5 	.word	0x080028b5
 8001918:	0800bb22 	.word	0x0800bb22
 800191c:	08002c81 	.word	0x08002c81
 8001920:	0800bb46 	.word	0x0800bb46
 8001924:	08002b05 	.word	0x08002b05
 8001928:	0800bb67 	.word	0x0800bb67
 800192c:	080027b1 	.word	0x080027b1
 8001930:	0800bb8a 	.word	0x0800bb8a
 8001934:	08001985 	.word	0x08001985
 8001938:	0800bba7 	.word	0x0800bba7
 800193c:	08001941 	.word	0x08001941

08001940 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv>:
                }

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
            }

            void impl_3_2_FactoryReset()
 8001940:	b538      	push	{r3, r4, r5, lr}
 8001942:	4604      	mov	r4, r0
            {
                auto &button = Button::getInstance();
 8001944:	f7ff fc3e 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001948:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800194a:	f004 f9c5 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800194e:	2804      	cmp	r0, #4
 8001950:	d10a      	bne.n	8001968 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x28>
                {
                    LOGI("Go back to Setting screen");
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x34>)
 8001954:	4908      	ldr	r1, [pc, #32]	; (8001978 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x38>)
 8001956:	4809      	ldr	r0, [pc, #36]	; (800197c <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x3c>)
 8001958:	f240 42d3 	movw	r2, #1235	; 0x4d3
 800195c:	f7ff fc82 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x40>)
 8001962:	6063      	str	r3, [r4, #4]
 8001964:	2300      	movs	r3, #0
 8001966:	60a3      	str	r3, [r4, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001968:	4628      	mov	r0, r5
 800196a:	2100      	movs	r1, #0
            }
 800196c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001970:	f004 b9b0 	b.w	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 8001974:	0800bbc8 	.word	0x0800bbc8
 8001978:	0800b921 	.word	0x0800b921
 800197c:	0800bbde 	.word	0x0800bbde
 8001980:	08001631 	.word	0x08001631

08001984 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv>:
            void impl_3_1_Settime()
 8001984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001988:	b090      	sub	sp, #64	; 0x40
 800198a:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 800198c:	f7ff fc1a 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001990:	4604      	mov	r4, r0
                Rtc rtc;
 8001992:	a807      	add	r0, sp, #28
                char line1[21] = { 0 };
 8001994:	2600      	movs	r6, #0
                Rtc rtc;
 8001996:	f004 fda7 	bl	80064e8 <_ZN4blib3RtcC1Ev>
                rtc.readTime();
 800199a:	a807      	add	r0, sp, #28
 800199c:	f004 fd89 	bl	80064b2 <_ZN4blib3Rtc8readTimeEv>
                uint8_t hour = rtc.mHour, minute = rtc.mMinute, date = rtc.mDate,
 80019a0:	f89d 5020 	ldrb.w	r5, [sp, #32]
 80019a4:	f89d 8021 	ldrb.w	r8, [sp, #33]	; 0x21
 80019a8:	f89d 9022 	ldrb.w	r9, [sp, #34]	; 0x22
                        month = rtc.mMonth, year = 25;
 80019ac:	f89d a023 	ldrb.w	sl, [sp, #35]	; 0x23
                uint8_t hour = rtc.mHour, minute = rtc.mMinute, date = rtc.mDate,
 80019b0:	f88d 5017 	strb.w	r5, [sp, #23]
                        month = rtc.mMonth, year = 25;
 80019b4:	2319      	movs	r3, #25
                char line1[21] = { 0 };
 80019b6:	4631      	mov	r1, r6
 80019b8:	2211      	movs	r2, #17
 80019ba:	a80b      	add	r0, sp, #44	; 0x2c
                uint8_t hour = rtc.mHour, minute = rtc.mMinute, date = rtc.mDate,
 80019bc:	f88d 8018 	strb.w	r8, [sp, #24]
 80019c0:	f88d 9019 	strb.w	r9, [sp, #25]
                        month = rtc.mMonth, year = 25;
 80019c4:	f88d 301b 	strb.w	r3, [sp, #27]
                char line1[21] = { 0 };
 80019c8:	960a      	str	r6, [sp, #40]	; 0x28
                        month = rtc.mMonth, year = 25;
 80019ca:	f88d a01a 	strb.w	sl, [sp, #26]
                char line1[21] = { 0 };
 80019ce:	f006 fa8c 	bl	8007eea <memset>
                        rtc.mMonth, 2000 + rtc.mYear);
 80019d2:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
                snprintf(line1, 21, "%02d:%02d %02d/%02d/%d", rtc.mHour, rtc.mMinute, rtc.mDate,
 80019d6:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 80019da:	462b      	mov	r3, r5
 80019dc:	e9cd 8900 	strd	r8, r9, [sp]
                mLcd.clearDisplay();
 80019e0:	f107 050c 	add.w	r5, r7, #12
                snprintf(line1, 21, "%02d:%02d %02d/%02d/%d", rtc.mHour, rtc.mMinute, rtc.mDate,
 80019e4:	2115      	movs	r1, #21
 80019e6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80019ea:	a80a      	add	r0, sp, #40	; 0x28
 80019ec:	4a9c      	ldr	r2, [pc, #624]	; (8001c60 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2dc>)
                    snprintf(line1, 21, "%02d:%02d %02d/%02d/%d", hour, minute, date, month,
 80019ee:	f8df 8270 	ldr.w	r8, [pc, #624]	; 8001c60 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2dc>
                    mLcd.displayLine(2, powSignCol, "^");
 80019f2:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8001c7c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2f8>
                snprintf(line1, 21, "%02d:%02d %02d/%02d/%d", rtc.mHour, rtc.mMinute, rtc.mDate,
 80019f6:	f006 f9e1 	bl	8007dbc <sniprintf>
                mLcd.clearDisplay();
 80019fa:	4628      	mov	r0, r5
 80019fc:	f004 fcf0 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SET TIME");
 8001a00:	4632      	mov	r2, r6
 8001a02:	4631      	mov	r1, r6
 8001a04:	4b97      	ldr	r3, [pc, #604]	; (8001c64 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2e0>)
 8001a06:	4628      	mov	r0, r5
 8001a08:	f004 fc4c 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 2, line1);
 8001a0c:	ab0a      	add	r3, sp, #40	; 0x28
 8001a0e:	2202      	movs	r2, #2
 8001a10:	2101      	movs	r1, #1
 8001a12:	4628      	mov	r0, r5
 8001a14:	f004 fc46 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8001a18:	4632      	mov	r2, r6
 8001a1a:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2e4>)
 8001a1c:	2103      	movs	r1, #3
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f004 fc40 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                int powSignCol = 2;
 8001a24:	2602      	movs	r6, #2
                while (button.getLatestPressedButton() != Button::ButtonName::BACK)
 8001a26:	4620      	mov	r0, r4
 8001a28:	f004 f956 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001a2c:	2804      	cmp	r0, #4
 8001a2e:	f000 80fb 	beq.w	8001c28 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2a4>
                    if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001a32:	4620      	mov	r0, r4
 8001a34:	f004 f950 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001a38:	2801      	cmp	r0, #1
 8001a3a:	d176      	bne.n	8001b2a <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x1a6>
                        switch (powSignCol)
 8001a3c:	1eb3      	subs	r3, r6, #2
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d816      	bhi.n	8001a70 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xec>
 8001a42:	e8df f003 	tbb	[pc, r3]
 8001a46:	1507      	.short	0x1507
 8001a48:	15153e15 	.word	0x15153e15
 8001a4c:	5815154b 	.word	0x5815154b
 8001a50:	1515      	.short	0x1515
 8001a52:	65          	.byte	0x65
 8001a53:	00          	.byte	0x00
                                Rtc::incrementParameter(0, hour, minute, date, month, year);
 8001a54:	f10d 031b 	add.w	r3, sp, #27
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	f10d 031a 	add.w	r3, sp, #26
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	aa06      	add	r2, sp, #24
 8001a62:	f10d 0319 	add.w	r3, sp, #25
 8001a66:	f10d 0117 	add.w	r1, sp, #23
 8001a6a:	2000      	movs	r0, #0
                                Rtc::incrementParameter(4, hour, minute, date, month, year);
 8001a6c:	f004 fdbe 	bl	80065ec <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_>
                            2000 + year);
 8001a70:	f89d 301b 	ldrb.w	r3, [sp, #27]
                    snprintf(line1, 21, "%02d:%02d %02d/%02d/%d", hour, minute, date, month,
 8001a74:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001a78:	9303      	str	r3, [sp, #12]
 8001a7a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4642      	mov	r2, r8
 8001a8e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001a92:	2115      	movs	r1, #21
 8001a94:	a80a      	add	r0, sp, #40	; 0x28
 8001a96:	f006 f991 	bl	8007dbc <sniprintf>
                    mLcd.displayLine(1, 2, line1);
 8001a9a:	ab0a      	add	r3, sp, #40	; 0x28
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	f004 fbff 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, powSignCol, "^");
 8001aa6:	464b      	mov	r3, r9
 8001aa8:	b2f2      	uxtb	r2, r6
 8001aaa:	4628      	mov	r0, r5
 8001aac:	2102      	movs	r1, #2
 8001aae:	f004 fbf9 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	f004 f90d 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                    HAL_Delay(100);
 8001aba:	2064      	movs	r0, #100	; 0x64
 8001abc:	f001 fe24 	bl	8003708 <HAL_Delay>
 8001ac0:	e7b1      	b.n	8001a26 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xa2>
                                Rtc::incrementParameter(1, hour, minute, date, month, year);
 8001ac2:	f10d 031b 	add.w	r3, sp, #27
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	f10d 031a 	add.w	r3, sp, #26
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	aa06      	add	r2, sp, #24
 8001ad0:	f10d 0319 	add.w	r3, sp, #25
 8001ad4:	f10d 0117 	add.w	r1, sp, #23
 8001ad8:	2001      	movs	r0, #1
 8001ada:	e7c7      	b.n	8001a6c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xe8>
                                Rtc::incrementParameter(2, hour, minute, date, month, year);
 8001adc:	f10d 031b 	add.w	r3, sp, #27
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	f10d 031a 	add.w	r3, sp, #26
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	aa06      	add	r2, sp, #24
 8001aea:	f10d 0319 	add.w	r3, sp, #25
 8001aee:	f10d 0117 	add.w	r1, sp, #23
 8001af2:	2002      	movs	r0, #2
 8001af4:	e7ba      	b.n	8001a6c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xe8>
                                Rtc::incrementParameter(3, hour, minute, date, month, year);
 8001af6:	f10d 031b 	add.w	r3, sp, #27
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	f10d 031a 	add.w	r3, sp, #26
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	aa06      	add	r2, sp, #24
 8001b04:	f10d 0319 	add.w	r3, sp, #25
 8001b08:	f10d 0117 	add.w	r1, sp, #23
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	e7ad      	b.n	8001a6c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xe8>
                                Rtc::incrementParameter(4, hour, minute, date, month, year);
 8001b10:	f10d 031b 	add.w	r3, sp, #27
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f10d 031a 	add.w	r3, sp, #26
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	aa06      	add	r2, sp, #24
 8001b1e:	f10d 0319 	add.w	r3, sp, #25
 8001b22:	f10d 0117 	add.w	r1, sp, #23
 8001b26:	2004      	movs	r0, #4
 8001b28:	e7a0      	b.n	8001a6c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xe8>
                    else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f004 f8d4 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001b30:	2802      	cmp	r0, #2
 8001b32:	d162      	bne.n	8001bfa <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x276>
                        switch (powSignCol)
 8001b34:	1eb3      	subs	r3, r6, #2
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d89a      	bhi.n	8001a70 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xec>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x1bc>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b75 	.word	0x08001b75
 8001b44:	08001a71 	.word	0x08001a71
 8001b48:	08001a71 	.word	0x08001a71
 8001b4c:	08001b93 	.word	0x08001b93
 8001b50:	08001a71 	.word	0x08001a71
 8001b54:	08001a71 	.word	0x08001a71
 8001b58:	08001bad 	.word	0x08001bad
 8001b5c:	08001a71 	.word	0x08001a71
 8001b60:	08001a71 	.word	0x08001a71
 8001b64:	08001bc7 	.word	0x08001bc7
 8001b68:	08001a71 	.word	0x08001a71
 8001b6c:	08001a71 	.word	0x08001a71
 8001b70:	08001be1 	.word	0x08001be1
                                Rtc::decrementParameter(0, hour, minute, date, month, year);
 8001b74:	f10d 031b 	add.w	r3, sp, #27
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	f10d 031a 	add.w	r3, sp, #26
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	aa06      	add	r2, sp, #24
 8001b82:	f10d 0319 	add.w	r3, sp, #25
 8001b86:	f10d 0117 	add.w	r1, sp, #23
 8001b8a:	2000      	movs	r0, #0
                                Rtc::decrementParameter(4, hour, minute, date, month, year);
 8001b8c:	f004 fd84 	bl	8006698 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_>
                                break;
 8001b90:	e76e      	b.n	8001a70 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xec>
                                Rtc::decrementParameter(1, hour, minute, date, month, year);
 8001b92:	f10d 031b 	add.w	r3, sp, #27
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	f10d 031a 	add.w	r3, sp, #26
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	aa06      	add	r2, sp, #24
 8001ba0:	f10d 0319 	add.w	r3, sp, #25
 8001ba4:	f10d 0117 	add.w	r1, sp, #23
 8001ba8:	2001      	movs	r0, #1
 8001baa:	e7ef      	b.n	8001b8c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x208>
                                Rtc::decrementParameter(2, hour, minute, date, month, year);
 8001bac:	f10d 031b 	add.w	r3, sp, #27
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	f10d 031a 	add.w	r3, sp, #26
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	aa06      	add	r2, sp, #24
 8001bba:	f10d 0319 	add.w	r3, sp, #25
 8001bbe:	f10d 0117 	add.w	r1, sp, #23
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	e7e2      	b.n	8001b8c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x208>
                                Rtc::decrementParameter(3, hour, minute, date, month, year);
 8001bc6:	f10d 031b 	add.w	r3, sp, #27
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	f10d 031a 	add.w	r3, sp, #26
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	aa06      	add	r2, sp, #24
 8001bd4:	f10d 0319 	add.w	r3, sp, #25
 8001bd8:	f10d 0117 	add.w	r1, sp, #23
 8001bdc:	2003      	movs	r0, #3
 8001bde:	e7d5      	b.n	8001b8c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x208>
                                Rtc::decrementParameter(4, hour, minute, date, month, year);
 8001be0:	f10d 031b 	add.w	r3, sp, #27
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	f10d 031a 	add.w	r3, sp, #26
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	aa06      	add	r2, sp, #24
 8001bee:	f10d 0319 	add.w	r3, sp, #25
 8001bf2:	f10d 0117 	add.w	r1, sp, #23
 8001bf6:	2004      	movs	r0, #4
 8001bf8:	e7c8      	b.n	8001b8c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x208>
                    else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f004 f86c 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001c00:	2803      	cmp	r0, #3
 8001c02:	f47f af35 	bne.w	8001a70 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xec>
                        if (powSignCol == 14)
 8001c06:	2e0e      	cmp	r6, #14
 8001c08:	d128      	bne.n	8001c5c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2d8>
                            rtc.setTime(hour, minute, date, month, year);
 8001c0a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001c1a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001c1e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8001c22:	a807      	add	r0, sp, #28
 8001c24:	f004 fca0 	bl	8006568 <_ZN4blib3Rtc7setTimeEhhhhh>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f004 f855 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001c2e:	2804      	cmp	r0, #4
 8001c30:	d10a      	bne.n	8001c48 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2c4>
                    LOGI("Go back to Setting screen");
 8001c32:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2e8>)
 8001c34:	490e      	ldr	r1, [pc, #56]	; (8001c70 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2ec>)
 8001c36:	480f      	ldr	r0, [pc, #60]	; (8001c74 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2f0>)
 8001c38:	f240 42c7 	movw	r2, #1223	; 0x4c7
 8001c3c:	f7ff fb12 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8001c40:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0x2f4>)
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	2300      	movs	r3, #0
 8001c46:	60bb      	str	r3, [r7, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	f004 f842 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001c50:	a807      	add	r0, sp, #28
 8001c52:	f004 fc2d 	bl	80064b0 <_ZN4blib3RtcD1Ev>
 8001c56:	b010      	add	sp, #64	; 0x40
 8001c58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                            powSignCol += 3;
 8001c5c:	3603      	adds	r6, #3
 8001c5e:	e707      	b.n	8001a70 <_ZN4blib11LcdSimulate16impl_3_1_SettimeEv+0xec>
 8001c60:	0800bc05 	.word	0x0800bc05
 8001c64:	0800bc1c 	.word	0x0800bc1c
 8001c68:	0800bc25 	.word	0x0800bc25
 8001c6c:	0800bc3c 	.word	0x0800bc3c
 8001c70:	0800b921 	.word	0x0800b921
 8001c74:	0800bbde 	.word	0x0800bbde
 8001c78:	08001631 	.word	0x08001631
 8001c7c:	0800bc3a 	.word	0x0800bc3a

08001c80 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv>:
            void impl_3_2_ChargeMode()
 8001c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c84:	4680      	mov	r8, r0
                auto &button = Button::getInstance();
 8001c86:	f7ff fa9d 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001c8a:	4606      	mov	r6, r0
                auto &chargeCtrl = ChargeControl::getInstance();
 8001c8c:	f7ff fa7a 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
                mLcd.clearDisplay();
 8001c90:	f108 040c 	add.w	r4, r8, #12
                auto &chargeCtrl = ChargeControl::getInstance();
 8001c94:	4607      	mov	r7, r0
                mLcd.clearDisplay();
 8001c96:	4620      	mov	r0, r4
 8001c98:	f004 fba2 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MODE");
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x110>)
 8001ca0:	4d3c      	ldr	r5, [pc, #240]	; (8001d94 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x114>)
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f004 fafd 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001caa:	4630      	mov	r0, r6
 8001cac:	f004 f814 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001cb0:	2801      	cmp	r0, #1
 8001cb2:	d11b      	bne.n	8001cec <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x6c>
                    if (ouputMode == OutputMode::PSU)
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	b9ab      	cbnz	r3, 8001ce4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x64>
                        ouputMode = OutputMode::INVERTER;
 8001cb8:	2302      	movs	r3, #2
                        ouputMode = (OutputMode) u8;
 8001cba:	602b      	str	r3, [r5, #0]
                if (ouputMode == OutputMode::PSU)
 8001cbc:	6829      	ldr	r1, [r5, #0]
 8001cbe:	bb09      	cbnz	r1, 8001d04 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x84>
                    mLcd.displayLine(2, 0, "PSU");
 8001cc0:	4b35      	ldr	r3, [pc, #212]	; (8001d98 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x118>)
                    mLcd.displayLine(2, 0, "Charger");
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2102      	movs	r1, #2
                    mLcd.displayLine(2, 0, "Inverter");
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f004 faec 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001ccc:	4630      	mov	r0, r6
 8001cce:	f004 f803 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001cd2:	2803      	cmp	r0, #3
 8001cd4:	d127      	bne.n	8001d26 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa6>
                    if (ouputMode == OutputMode::PSU)
 8001cd6:	6829      	ldr	r1, [r5, #0]
 8001cd8:	b9e9      	cbnz	r1, 8001d16 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x96>
                        mLcd.displayLine(1, 0, ">>PSU");
 8001cda:	4b30      	ldr	r3, [pc, #192]	; (8001d9c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x11c>)
                        chargeCtrl.mOutputMode = ouputMode;
 8001cdc:	60f9      	str	r1, [r7, #12]
                        mLcd.displayLine(1, 0, "Error mode");
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	e01d      	b.n	8001d20 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                        u8--;
 8001ce4:	3b01      	subs	r3, #1
                        ouputMode = (OutputMode) u8;
 8001ce6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001cea:	e7e6      	b.n	8001cba <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x3a>
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001cec:	4630      	mov	r0, r6
 8001cee:	f003 fff3 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001cf2:	2802      	cmp	r0, #2
 8001cf4:	d1e2      	bne.n	8001cbc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x3c>
                    if (ouputMode == OutputMode::INVERTER)
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d101      	bne.n	8001d00 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x80>
                        ouputMode = OutputMode::PSU;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	e7dc      	b.n	8001cba <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x3a>
                        u8++;
 8001d00:	3301      	adds	r3, #1
 8001d02:	e7f0      	b.n	8001ce6 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x66>
                else if (ouputMode == OutputMode::CHARGER)
 8001d04:	2901      	cmp	r1, #1
 8001d06:	d101      	bne.n	8001d0c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x8c>
                    mLcd.displayLine(2, 0, "Charger");
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x120>)
 8001d0a:	e7da      	b.n	8001cc2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x42>
                else if (ouputMode == OutputMode::INVERTER)
 8001d0c:	2902      	cmp	r1, #2
 8001d0e:	d1dd      	bne.n	8001ccc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x4c>
                    mLcd.displayLine(2, 0, "Inverter");
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x124>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	e7d7      	b.n	8001cc6 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x46>
                    else if (ouputMode == OutputMode::CHARGER)
 8001d16:	2901      	cmp	r1, #1
 8001d18:	d10b      	bne.n	8001d32 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xb2>
                        mLcd.displayLine(1, 0, ">>Charger");
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x128>)
                        chargeCtrl.mOutputMode = ouputMode;
 8001d1c:	60f9      	str	r1, [r7, #12]
                        mLcd.displayLine(1, 0, ">>Charger");
 8001d1e:	2200      	movs	r2, #0
                        mLcd.displayLine(1, 0, "Error mode");
 8001d20:	4620      	mov	r0, r4
 8001d22:	f004 fabf 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (chargeCtrl.mOutputMode == OutputMode::PSU)
 8001d26:	68f9      	ldr	r1, [r7, #12]
 8001d28:	b949      	cbnz	r1, 8001d3e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xbe>
                    mLcd.displayLine(1, 0, "PSU");
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x118>)
                    mLcd.displayLine(1, 0, "Inverter");
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2101      	movs	r1, #1
 8001d30:	e009      	b.n	8001d46 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xc6>
                    else if (ouputMode == OutputMode::INVERTER)
 8001d32:	2902      	cmp	r1, #2
                        mLcd.displayLine(1, 0, ">>Inverter");
 8001d34:	bf0a      	itet	eq
 8001d36:	4b1d      	ldreq	r3, [pc, #116]	; (8001dac <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x12c>)
                        mLcd.displayLine(1, 0, "Error mode");
 8001d38:	4b1d      	ldrne	r3, [pc, #116]	; (8001db0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x130>)
                        chargeCtrl.mOutputMode = ouputMode;
 8001d3a:	60f9      	streq	r1, [r7, #12]
                        mLcd.displayLine(1, 0, "Error mode");
 8001d3c:	e7cf      	b.n	8001cde <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x5e>
                else if (chargeCtrl.mOutputMode == OutputMode::CHARGER)
 8001d3e:	2901      	cmp	r1, #1
 8001d40:	d122      	bne.n	8001d88 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x108>
                    mLcd.displayLine(1, 0, "Charger");
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x120>)
 8001d44:	2200      	movs	r2, #0
                    mLcd.displayLine(1, 0, "Inverter");
 8001d46:	4620      	mov	r0, r4
 8001d48:	f004 faac 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x134>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2103      	movs	r1, #3
 8001d52:	4620      	mov	r0, r4
 8001d54:	f004 faa6 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001d58:	4630      	mov	r0, r6
 8001d5a:	f003 ffbd 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001d5e:	2804      	cmp	r0, #4
 8001d60:	d10c      	bne.n	8001d7c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xfc>
                    LOGI("Go back to Setting screen");
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x138>)
 8001d64:	4915      	ldr	r1, [pc, #84]	; (8001dbc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x13c>)
 8001d66:	4816      	ldr	r0, [pc, #88]	; (8001dc0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x140>)
 8001d68:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001d6c:	f7ff fa7a 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x144>)
 8001d72:	f8c8 3004 	str.w	r3, [r8, #4]
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c8 3008 	str.w	r3, [r8, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001d7c:	4630      	mov	r0, r6
 8001d7e:	2100      	movs	r1, #0
            }
 8001d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001d84:	f003 bfa6 	b.w	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                else if (chargeCtrl.mOutputMode == OutputMode::INVERTER)
 8001d88:	2902      	cmp	r1, #2
 8001d8a:	d1df      	bne.n	8001d4c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xcc>
                    mLcd.displayLine(1, 0, "Inverter");
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x124>)
 8001d8e:	e7cd      	b.n	8001d2c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xac>
 8001d90:	0800b9f1 	.word	0x0800b9f1
 8001d94:	2000024c 	.word	0x2000024c
 8001d98:	0800bc4f 	.word	0x0800bc4f
 8001d9c:	0800bc4d 	.word	0x0800bc4d
 8001da0:	0800bc55 	.word	0x0800bc55
 8001da4:	0800bc5f 	.word	0x0800bc5f
 8001da8:	0800bc53 	.word	0x0800bc53
 8001dac:	0800bc5d 	.word	0x0800bc5d
 8001db0:	0800bc68 	.word	0x0800bc68
 8001db4:	0800bc25 	.word	0x0800bc25
 8001db8:	0800bc73 	.word	0x0800bc73
 8001dbc:	0800b921 	.word	0x0800b921
 8001dc0:	0800bbde 	.word	0x0800bbde
 8001dc4:	08001631 	.word	0x08001631

08001dc8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv>:
            void impl_3_2_SupplyAlgorithm()
 8001dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dcc:	4606      	mov	r6, r0
                auto &button = Button::getInstance();
 8001dce:	f7ff f9f9 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001dd2:	4605      	mov	r5, r0
                auto &chargeCtrl = ChargeControl::getInstance();
 8001dd4:	f7ff f9d6 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
                mLcd.clearDisplay();
 8001dd8:	f106 040c 	add.w	r4, r6, #12
                auto &chargeCtrl = ChargeControl::getInstance();
 8001ddc:	4607      	mov	r7, r0
                mLcd.clearDisplay();
 8001dde:	4620      	mov	r0, r4
 8001de0:	f004 fafe 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 8001de4:	2200      	movs	r2, #0
 8001de6:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xd8>)
 8001de8:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001ec8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x100>
 8001dec:	4611      	mov	r1, r2
 8001dee:	4620      	mov	r0, r4
 8001df0:	f004 fa58 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001df4:	4628      	mov	r0, r5
 8001df6:	f003 ff6f 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001dfa:	2801      	cmp	r0, #1
 8001dfc:	d13f      	bne.n	8001e7e <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xb6>
                    supplyAlgorithm = !supplyAlgorithm;
 8001dfe:	f898 3000 	ldrb.w	r3, [r8]
 8001e02:	f083 0301 	eor.w	r3, r3, #1
 8001e06:	f888 3000 	strb.w	r3, [r8]
                if (supplyAlgorithm == 0)
 8001e0a:	f898 2000 	ldrb.w	r2, [r8]
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d13b      	bne.n	8001e8a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xc2>
                    mLcd.displayLine(2, 0, "CC-CV Only");
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xdc>)
                    mLcd.displayLine(2, 0, "MPPT+CC-CV");
 8001e14:	2102      	movs	r1, #2
 8001e16:	4620      	mov	r0, r4
 8001e18:	f004 fa44 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001e1c:	4628      	mov	r0, r5
 8001e1e:	f003 ff5b 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001e22:	2803      	cmp	r0, #3
 8001e24:	d108      	bne.n	8001e38 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x70>
                    if (supplyAlgorithm == 0)
 8001e26:	f898 2000 	ldrb.w	r2, [r8]
 8001e2a:	bb8a      	cbnz	r2, 8001e90 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xc8>
                        mLcd.displayLine(1, 0, ">> CC-CV Only");
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xe0>)
                        chargeCtrl.mMpptMode = supplyAlgorithm;
 8001e2e:	743a      	strb	r2, [r7, #16]
                        mLcd.displayLine(1, 0, ">> CC-CV Only");
 8001e30:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> MPPT+CC-CV");
 8001e32:	4620      	mov	r0, r4
 8001e34:	f004 fa36 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (chargeCtrl.mMpptMode == 0)
 8001e38:	7c3a      	ldrb	r2, [r7, #16]
 8001e3a:	bb72      	cbnz	r2, 8001e9a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xd2>
                    mLcd.displayLine(1, 0, "CC-CV Only");
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xdc>)
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
 8001e3e:	2101      	movs	r1, #1
 8001e40:	4620      	mov	r0, r4
 8001e42:	f004 fa2f 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xe4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f004 fa29 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001e52:	4628      	mov	r0, r5
 8001e54:	f003 ff40 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001e58:	2804      	cmp	r0, #4
 8001e5a:	d10a      	bne.n	8001e72 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xaa>
                    LOGI("Go back to Setting screen");
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xe8>)
 8001e5e:	4915      	ldr	r1, [pc, #84]	; (8001eb4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xec>)
 8001e60:	4815      	ldr	r0, [pc, #84]	; (8001eb8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xf0>)
 8001e62:	f240 229e 	movw	r2, #670	; 0x29e
 8001e66:	f7ff f9fd 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xf4>)
 8001e6c:	6073      	str	r3, [r6, #4]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60b3      	str	r3, [r6, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001e72:	4628      	mov	r0, r5
 8001e74:	2100      	movs	r1, #0
            }
 8001e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001e7a:	f003 bf2b 	b.w	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001e7e:	4628      	mov	r0, r5
 8001e80:	f003 ff2a 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001e84:	2802      	cmp	r0, #2
 8001e86:	d1c0      	bne.n	8001e0a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x42>
 8001e88:	e7b9      	b.n	8001dfe <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x36>
                    mLcd.displayLine(2, 0, "MPPT+CC-CV");
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ec0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xf8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	e7c1      	b.n	8001e14 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x4c>
                        chargeCtrl.mMpptMode = supplyAlgorithm;
 8001e90:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> MPPT+CC-CV");
 8001e92:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>)
                        chargeCtrl.mMpptMode = supplyAlgorithm;
 8001e94:	7439      	strb	r1, [r7, #16]
                        mLcd.displayLine(1, 0, ">> MPPT+CC-CV");
 8001e96:	2200      	movs	r2, #0
 8001e98:	e7cb      	b.n	8001e32 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x6a>
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xf8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	e7ce      	b.n	8001e3e <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x76>
 8001ea0:	0800bc87 	.word	0x0800bc87
 8001ea4:	0800bc9b 	.word	0x0800bc9b
 8001ea8:	0800bc98 	.word	0x0800bc98
 8001eac:	0800bc25 	.word	0x0800bc25
 8001eb0:	0800bcb4 	.word	0x0800bcb4
 8001eb4:	0800b921 	.word	0x0800b921
 8001eb8:	0800bbde 	.word	0x0800bbde
 8001ebc:	08001631 	.word	0x08001631
 8001ec0:	0800bca9 	.word	0x0800bca9
 8001ec4:	0800bca6 	.word	0x0800bca6
 8001ec8:	20000250 	.word	0x20000250

08001ecc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv>:
            void impl_3_DisplayScroll()
 8001ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed0:	b09e      	sub	sp, #120	; 0x78
                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
 8001ed2:	4978      	ldr	r1, [pc, #480]	; (80020b4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1e8>)
 8001ed4:	4d78      	ldr	r5, [pc, #480]	; (80020b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ec>)
 8001ed6:	4e79      	ldr	r6, [pc, #484]	; (80020bc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1f0>)
 8001ed8:	2269      	movs	r2, #105	; 0x69
            void impl_3_DisplayScroll()
 8001eda:	4604      	mov	r4, r0
                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
 8001edc:	a803      	add	r0, sp, #12
 8001ede:	f006 f8e0 	bl	80080a2 <memcpy>
                auto &button = Button::getInstance();
 8001ee2:	f7ff f96f 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001ee6:	4607      	mov	r7, r0
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001ee8:	f003 fef6 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001eec:	2801      	cmp	r0, #1
 8001eee:	d149      	bne.n	8001f84 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xb8>
                    if (mIndexLine == 1)
 8001ef0:	682b      	ldr	r3, [r5, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d13b      	bne.n	8001f6e <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xa2>
                        mIndexLine = ROW - 1;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	602b      	str	r3, [r5, #0]
                            arrowLine = 2;
 8001efa:	2302      	movs	r3, #2
                        arrowLine = 0;
 8001efc:	6033      	str	r3, [r6, #0]
                mLcd.clearDisplay();
 8001efe:	340c      	adds	r4, #12
 8001f00:	4620      	mov	r0, r4
 8001f02:	f004 fa6d 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                if (mIndexLine == 1)
 8001f06:	682a      	ldr	r2, [r5, #0]
 8001f08:	2a01      	cmp	r2, #1
 8001f0a:	f040 809d 	bne.w	8002048 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x17c>
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 8001f0e:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8001f12:	2100      	movs	r1, #0
 8001f14:	4620      	mov	r0, r4
 8001f16:	9201      	str	r2, [sp, #4]
 8001f18:	f004 f9c4 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 8001f1c:	682b      	ldr	r3, [r5, #0]
 8001f1e:	f04f 0815 	mov.w	r8, #21
 8001f22:	aa03      	add	r2, sp, #12
 8001f24:	fb03 8308 	mla	r3, r3, r8, r8
 8001f28:	4413      	add	r3, r2
 8001f2a:	9a01      	ldr	r2, [sp, #4]
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4611      	mov	r1, r2
 8001f30:	f004 f9b8 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 8001f34:	682b      	ldr	r3, [r5, #0]
 8001f36:	aa03      	add	r2, sp, #12
 8001f38:	3302      	adds	r3, #2
 8001f3a:	fb08 2303 	mla	r3, r8, r3, r2
 8001f3e:	9a01      	ldr	r2, [sp, #4]
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8001f40:	4620      	mov	r0, r4
 8001f42:	2102      	movs	r1, #2
 8001f44:	f004 f9ae 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 8001f48:	4620      	mov	r0, r4
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	; (80020c0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1f4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2103      	movs	r1, #3
 8001f50:	f004 f9a8 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 8001f54:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1f8>)
 8001f56:	7831      	ldrb	r1, [r6, #0]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f004 f9a2 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f60:	2100      	movs	r1, #0
 8001f62:	4638      	mov	r0, r7
 8001f64:	f003 feb6 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001f68:	b01e      	add	sp, #120	; 0x78
 8001f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        mIndexLine--;
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	602b      	str	r3, [r5, #0]
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001f72:	f023 0302 	bic.w	r3, r3, #2
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d1c1      	bne.n	8001efe <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                        if (arrowLine == 0)
 8001f7a:	6833      	ldr	r3, [r6, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0bc      	beq.n	8001efa <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2e>
                            arrowLine--;
 8001f80:	3b01      	subs	r3, #1
 8001f82:	e7bb      	b.n	8001efc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x30>
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001f84:	4638      	mov	r0, r7
 8001f86:	f003 fea7 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f8a:	2802      	cmp	r0, #2
 8001f8c:	d113      	bne.n	8001fb6 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xea>
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001f8e:	682b      	ldr	r3, [r5, #0]
 8001f90:	f023 0202 	bic.w	r2, r3, #2
 8001f94:	2a01      	cmp	r2, #1
 8001f96:	d108      	bne.n	8001faa <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xde>
                        if (arrowLine == 2)
 8001f98:	6832      	ldr	r2, [r6, #0]
 8001f9a:	2a02      	cmp	r2, #2
                            arrowLine = 0;
 8001f9c:	bf0c      	ite	eq
 8001f9e:	2200      	moveq	r2, #0
                            arrowLine++;
 8001fa0:	3201      	addne	r2, #1
 8001fa2:	6032      	str	r2, [r6, #0]
                        mIndexLine++;
 8001fa4:	3301      	adds	r3, #1
                    mIndexLine = 1;
 8001fa6:	602b      	str	r3, [r5, #0]
 8001fa8:	e7a9      	b.n	8001efe <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                    if (mIndexLine == ROW - 1)
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d1fa      	bne.n	8001fa4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xd8>
                        mIndexLine = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	602b      	str	r3, [r5, #0]
                        arrowLine = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e7a2      	b.n	8001efc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x30>
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001fb6:	4638      	mov	r0, r7
 8001fb8:	f003 fe8e 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001fbc:	2804      	cmp	r0, #4
 8001fbe:	d10d      	bne.n	8001fdc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x110>
                    LOGI("Go back to Menu screen");
 8001fc0:	4b41      	ldr	r3, [pc, #260]	; (80020c8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8001fc2:	4942      	ldr	r1, [pc, #264]	; (80020cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 8001fc4:	4842      	ldr	r0, [pc, #264]	; (80020d0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x204>)
 8001fc6:	f44f 7281 	mov.w	r2, #258	; 0x102
 8001fca:	f7ff f94b 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 8001fce:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x208>)
 8001fd0:	6063      	str	r3, [r4, #4]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60a3      	str	r3, [r4, #8]
                    arrowLine = 0;
 8001fd6:	6033      	str	r3, [r6, #0]
                    mIndexLine = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e7e4      	b.n	8001fa6 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xda>
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001fdc:	4638      	mov	r0, r7
 8001fde:	f003 fe7b 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001fe2:	2803      	cmp	r0, #3
 8001fe4:	d18b      	bne.n	8001efe <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                    if (mIndexLine == 1)
 8001fe6:	682b      	ldr	r3, [r5, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d10b      	bne.n	8002004 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x138>
                        LOGI("Go to Display Config 1");
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8001fee:	4937      	ldr	r1, [pc, #220]	; (80020cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 8001ff0:	4839      	ldr	r0, [pc, #228]	; (80020d8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x20c>)
 8001ff2:	f240 120d 	movw	r2, #269	; 0x10d
 8001ff6:	f7ff f935 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayTime;
 8001ffa:	4b38      	ldr	r3, [pc, #224]	; (80020dc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x210>)
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig4;
 8001ffc:	6063      	str	r3, [r4, #4]
 8001ffe:	2300      	movs	r3, #0
 8002000:	60a3      	str	r3, [r4, #8]
 8002002:	e77c      	b.n	8001efe <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                    else if (mIndexLine == 2)
 8002004:	2b02      	cmp	r3, #2
 8002006:	d108      	bne.n	800201a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x14e>
                        LOGI("Go to Display Config 2");
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 800200a:	4930      	ldr	r1, [pc, #192]	; (80020cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 800200c:	4834      	ldr	r0, [pc, #208]	; (80020e0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x214>)
 800200e:	f240 1213 	movw	r2, #275	; 0x113
 8002012:	f7ff f927 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayError;
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x218>)
 8002018:	e7f0      	b.n	8001ffc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x130>
                    else if (mIndexLine == 3)
 800201a:	2b03      	cmp	r3, #3
 800201c:	d108      	bne.n	8002030 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x164>
                        LOGI("Go to Display Config 3");
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8002020:	492a      	ldr	r1, [pc, #168]	; (80020cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 8002022:	4831      	ldr	r0, [pc, #196]	; (80020e8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x21c>)
 8002024:	f240 1219 	movw	r2, #281	; 0x119
 8002028:	f7ff f91c 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayControl;
 800202c:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x220>)
 800202e:	e7e5      	b.n	8001ffc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x130>
                    else if (mIndexLine == 4)
 8002030:	2b04      	cmp	r3, #4
 8002032:	f47f af64 	bne.w	8001efe <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                        LOGI("Go to Display Config 4");
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8002038:	4924      	ldr	r1, [pc, #144]	; (80020cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 800203a:	482d      	ldr	r0, [pc, #180]	; (80020f0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x224>)
 800203c:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8002040:	f7ff f910 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig4;
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x228>)
 8002046:	e7d9      	b.n	8001ffc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x130>
                else if (mIndexLine == ROW - 1)
 8002048:	2a04      	cmp	r2, #4
 800204a:	d118      	bne.n	800207e <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1b2>
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 800204c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8002050:	2201      	movs	r2, #1
 8002052:	2100      	movs	r1, #0
 8002054:	4620      	mov	r0, r4
 8002056:	f004 f925 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 800205a:	682b      	ldr	r3, [r5, #0]
 800205c:	f04f 0815 	mov.w	r8, #21
 8002060:	aa03      	add	r2, sp, #12
 8002062:	3b01      	subs	r3, #1
 8002064:	fb08 2303 	mla	r3, r8, r3, r2
 8002068:	2201      	movs	r2, #1
 800206a:	4611      	mov	r1, r2
 800206c:	4620      	mov	r0, r4
 800206e:	f004 f919 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 8002072:	682b      	ldr	r3, [r5, #0]
 8002074:	aa03      	add	r2, sp, #12
 8002076:	fb08 2303 	mla	r3, r8, r3, r2
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 800207a:	2201      	movs	r2, #1
 800207c:	e760      	b.n	8001f40 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x74>
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 800207e:	f04f 0815 	mov.w	r8, #21
 8002082:	1e53      	subs	r3, r2, #1
 8002084:	aa03      	add	r2, sp, #12
 8002086:	fb08 2303 	mla	r3, r8, r3, r2
 800208a:	2100      	movs	r1, #0
 800208c:	2201      	movs	r2, #1
 800208e:	4620      	mov	r0, r4
 8002090:	f004 f908 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	aa03      	add	r2, sp, #12
 8002098:	fb08 2303 	mla	r3, r8, r3, r2
 800209c:	2201      	movs	r2, #1
 800209e:	4611      	mov	r1, r2
 80020a0:	4620      	mov	r0, r4
 80020a2:	f004 f8ff 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 80020a6:	682b      	ldr	r3, [r5, #0]
 80020a8:	fb03 8808 	mla	r8, r3, r8, r8
 80020ac:	ab03      	add	r3, sp, #12
 80020ae:	4443      	add	r3, r8
 80020b0:	e7e3      	b.n	800207a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ae>
 80020b2:	bf00      	nop
 80020b4:	0800b704 	.word	0x0800b704
 80020b8:	20000004 	.word	0x20000004
 80020bc:	20000258 	.word	0x20000258
 80020c0:	0800b9fe 	.word	0x0800b9fe
 80020c4:	0800ba13 	.word	0x0800ba13
 80020c8:	0800bccd 	.word	0x0800bccd
 80020cc:	0800b921 	.word	0x0800b921
 80020d0:	0800ba2a 	.word	0x0800ba2a
 80020d4:	080014f5 	.word	0x080014f5
 80020d8:	0800bce2 	.word	0x0800bce2
 80020dc:	0800213d 	.word	0x0800213d
 80020e0:	0800bd06 	.word	0x0800bd06
 80020e4:	08002239 	.word	0x08002239
 80020e8:	0800bd2a 	.word	0x0800bd2a
 80020ec:	080029b9 	.word	0x080029b9
 80020f0:	0800bd4e 	.word	0x0800bd4e
 80020f4:	080020f9 	.word	0x080020f9

080020f8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev>:
            void impl_3_1_DisplayConfig4()
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	4604      	mov	r4, r0
                auto &button = Button::getInstance();
 80020fc:	f7ff f862 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002100:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002102:	f003 fde9 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002106:	2804      	cmp	r0, #4
 8002108:	d10a      	bne.n	8002120 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x28>
                    LOGI("Go back to Display screen");
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x34>)
 800210c:	4908      	ldr	r1, [pc, #32]	; (8002130 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x38>)
 800210e:	4809      	ldr	r0, [pc, #36]	; (8002134 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x3c>)
 8002110:	f240 2256 	movw	r2, #598	; 0x256
 8002114:	f7ff f8a6 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x40>)
 800211a:	6063      	str	r3, [r4, #4]
 800211c:	2300      	movs	r3, #0
 800211e:	60a3      	str	r3, [r4, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002120:	4628      	mov	r0, r5
 8002122:	2100      	movs	r1, #0
            }
 8002124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002128:	f003 bdd4 	b.w	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 800212c:	0800bd72 	.word	0x0800bd72
 8002130:	0800b921 	.word	0x0800b921
 8002134:	0800bd8a 	.word	0x0800bd8a
 8002138:	08001ecd 	.word	0x08001ecd

0800213c <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv>:
            void impl_3_1_DisplayTime()
 800213c:	b570      	push	{r4, r5, r6, lr}
 800213e:	b096      	sub	sp, #88	; 0x58
 8002140:	4605      	mov	r5, r0
                Rtc rtc;
 8002142:	a807      	add	r0, sp, #28
 8002144:	f004 f9d0 	bl	80064e8 <_ZN4blib3RtcC1Ev>
                char line0[21] = { 0 }, line1[21] = { 0 };
 8002148:	2400      	movs	r4, #0
                rtc.readTime();
 800214a:	a807      	add	r0, sp, #28
 800214c:	f004 f9b1 	bl	80064b2 <_ZN4blib3Rtc8readTimeEv>
                char line0[21] = { 0 }, line1[21] = { 0 };
 8002150:	2211      	movs	r2, #17
 8002152:	4621      	mov	r1, r4
 8002154:	a80b      	add	r0, sp, #44	; 0x2c
 8002156:	940a      	str	r4, [sp, #40]	; 0x28
 8002158:	f005 fec7 	bl	8007eea <memset>
 800215c:	2211      	movs	r2, #17
 800215e:	4621      	mov	r1, r4
 8002160:	a811      	add	r0, sp, #68	; 0x44
 8002162:	9410      	str	r4, [sp, #64]	; 0x40
 8002164:	f005 fec1 	bl	8007eea <memset>
                snprintf(line0, 21, "RTC TIME");    //P:025.1W A:0003.4Wh
 8002168:	4924      	ldr	r1, [pc, #144]	; (80021fc <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv+0xc0>)
 800216a:	a80a      	add	r0, sp, #40	; 0x28
 800216c:	f005 ff91 	bl	8008092 <strcpy>
                        rtc.mMonth, 2000 + rtc.mYear);
 8002170:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                snprintf(line1, 21, "%02d:%02d %02d/%02d/%d", rtc.mHour, rtc.mMinute, rtc.mDate,
 8002174:	4a22      	ldr	r2, [pc, #136]	; (8002200 <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv+0xc4>)
 8002176:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800217a:	9303      	str	r3, [sp, #12]
 800217c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002180:	9302      	str	r3, [sp, #8]
 8002182:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2115      	movs	r1, #21
 8002190:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002194:	a810      	add	r0, sp, #64	; 0x40
 8002196:	f005 fe11 	bl	8007dbc <sniprintf>
                mLcd.clearDisplay();
 800219a:	f105 000c 	add.w	r0, r5, #12
 800219e:	9005      	str	r0, [sp, #20]
 80021a0:	f004 f91e 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, line0);
 80021a4:	9805      	ldr	r0, [sp, #20]
 80021a6:	ab0a      	add	r3, sp, #40	; 0x28
 80021a8:	4622      	mov	r2, r4
 80021aa:	4621      	mov	r1, r4
 80021ac:	f004 f87a 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 2, line1);
 80021b0:	9805      	ldr	r0, [sp, #20]
 80021b2:	ab10      	add	r3, sp, #64	; 0x40
 80021b4:	2202      	movs	r2, #2
 80021b6:	2101      	movs	r1, #1
 80021b8:	f004 f874 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, "4BACK");
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv+0xc8>)
 80021be:	9805      	ldr	r0, [sp, #20]
 80021c0:	220f      	movs	r2, #15
 80021c2:	2103      	movs	r1, #3
 80021c4:	f004 f86e 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                auto &button = Button::getInstance();
 80021c8:	f7fe fffc 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80021cc:	4606      	mov	r6, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80021ce:	f003 fd83 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80021d2:	2804      	cmp	r0, #4
 80021d4:	d109      	bne.n	80021ea <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv+0xae>
                    LOGI("Go back to Display screen");
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv+0xcc>)
 80021d8:	490c      	ldr	r1, [pc, #48]	; (800220c <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv+0xd0>)
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv+0xd4>)
 80021dc:	f44f 7203 	mov.w	r2, #524	; 0x20c
 80021e0:	f7ff f840 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <_ZN4blib11LcdSimulate20impl_3_1_DisplayTimeEv+0xd8>)
 80021e6:	e9c5 3401 	strd	r3, r4, [r5, #4]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80021ea:	2100      	movs	r1, #0
 80021ec:	4630      	mov	r0, r6
 80021ee:	f003 fd71 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80021f2:	a807      	add	r0, sp, #28
 80021f4:	f004 f95c 	bl	80064b0 <_ZN4blib3RtcD1Ev>
 80021f8:	b016      	add	sp, #88	; 0x58
 80021fa:	bd70      	pop	{r4, r5, r6, pc}
 80021fc:	0800bdb1 	.word	0x0800bdb1
 8002200:	0800bc05 	.word	0x0800bc05
 8002204:	0800be0c 	.word	0x0800be0c
 8002208:	0800bdba 	.word	0x0800bdba
 800220c:	0800b921 	.word	0x0800b921
 8002210:	0800bd8a 	.word	0x0800bd8a
 8002214:	08001ecd 	.word	0x08001ecd

08002218 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv>:
                static T& getInstance()
 8002218:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 800221a:	4c06      	ldr	r4, [pc, #24]	; (8002234 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x1c>)
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	b933      	cbnz	r3, 800222e <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x16>
                        mInstance = new T();
 8002220:	201c      	movs	r0, #28
 8002222:	f004 fbb0 	bl	8006986 <_Znwj>
 8002226:	4605      	mov	r5, r0
 8002228:	f003 fed6 	bl	8005fd8 <_ZN4blib16DeviceProtectionC1Ev>
 800222c:	6025      	str	r5, [r4, #0]
                }
 800222e:	6820      	ldr	r0, [r4, #0]
 8002230:	bd38      	pop	{r3, r4, r5, pc}
 8002232:	bf00      	nop
 8002234:	20000204 	.word	0x20000204

08002238 <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv>:
            void impl_3_1_DisplayError()
 8002238:	b570      	push	{r4, r5, r6, lr}
 800223a:	b096      	sub	sp, #88	; 0x58
 800223c:	4606      	mov	r6, r0
                auto &devPrt = blib::DeviceProtection::getInstance();
 800223e:	f7ff ffeb 	bl	8002218 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv>
                char line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };
 8002242:	2400      	movs	r4, #0
                auto &devPrt = blib::DeviceProtection::getInstance();
 8002244:	4605      	mov	r5, r0
                char line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };
 8002246:	2211      	movs	r2, #17
 8002248:	4621      	mov	r1, r4
 800224a:	a805      	add	r0, sp, #20
 800224c:	9404      	str	r4, [sp, #16]
 800224e:	f005 fe4c 	bl	8007eea <memset>
 8002252:	2211      	movs	r2, #17
 8002254:	4621      	mov	r1, r4
 8002256:	a80b      	add	r0, sp, #44	; 0x2c
 8002258:	940a      	str	r4, [sp, #40]	; 0x28
 800225a:	f005 fe46 	bl	8007eea <memset>
 800225e:	2211      	movs	r2, #17
 8002260:	4621      	mov	r1, r4
 8002262:	a811      	add	r0, sp, #68	; 0x44
 8002264:	9410      	str	r4, [sp, #64]	; 0x40
 8002266:	f005 fe40 	bl	8007eea <memset>
                snprintf(line1, 21, " ERR:%d" " FLV:%d" " BNC:%d", devPrt.mERR, devPrt.mFLV,
 800226a:	7c2b      	ldrb	r3, [r5, #16]
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	7cab      	ldrb	r3, [r5, #18]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	68eb      	ldr	r3, [r5, #12]
 8002274:	4a23      	ldr	r2, [pc, #140]	; (8002304 <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xcc>)
 8002276:	2115      	movs	r1, #21
 8002278:	a804      	add	r0, sp, #16
 800227a:	f005 fd9f 	bl	8007dbc <sniprintf>
                snprintf(line2, 21, " IUV:%d" " IOC:%d" " OOV:%d", devPrt.mIUV, devPrt.mIOC,
 800227e:	7dea      	ldrb	r2, [r5, #23]
 8002280:	7ceb      	ldrb	r3, [r5, #19]
 8002282:	9201      	str	r2, [sp, #4]
 8002284:	7d6a      	ldrb	r2, [r5, #21]
 8002286:	9200      	str	r2, [sp, #0]
 8002288:	2115      	movs	r1, #21
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xd0>)
 800228c:	a80a      	add	r0, sp, #40	; 0x28
 800228e:	f005 fd95 	bl	8007dbc <sniprintf>
                snprintf(line3, 21, " OOC:%d OTE:%d   4BACK", devPrt.mOOC, devPrt.mOTE);
 8002292:	7e6a      	ldrb	r2, [r5, #25]
 8002294:	7e2b      	ldrb	r3, [r5, #24]
 8002296:	9200      	str	r2, [sp, #0]
 8002298:	2115      	movs	r1, #21
 800229a:	4a1c      	ldr	r2, [pc, #112]	; (800230c <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xd4>)
 800229c:	a810      	add	r0, sp, #64	; 0x40
 800229e:	f005 fd8d 	bl	8007dbc <sniprintf>
                mLcd.displayLine(0, 0, "ERROR CHECKING      ");
 80022a2:	f106 000c 	add.w	r0, r6, #12
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xd8>)
 80022a8:	9003      	str	r0, [sp, #12]
 80022aa:	4622      	mov	r2, r4
 80022ac:	4621      	mov	r1, r4
 80022ae:	f003 fff9 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, line1);
 80022b2:	9803      	ldr	r0, [sp, #12]
 80022b4:	ab04      	add	r3, sp, #16
 80022b6:	4622      	mov	r2, r4
 80022b8:	2101      	movs	r1, #1
 80022ba:	f003 fff3 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, line2);
 80022be:	9803      	ldr	r0, [sp, #12]
 80022c0:	ab0a      	add	r3, sp, #40	; 0x28
 80022c2:	4622      	mov	r2, r4
 80022c4:	2102      	movs	r1, #2
 80022c6:	f003 ffed 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, line3);
 80022ca:	ab10      	add	r3, sp, #64	; 0x40
 80022cc:	4622      	mov	r2, r4
 80022ce:	2103      	movs	r1, #3
 80022d0:	9803      	ldr	r0, [sp, #12]
 80022d2:	f003 ffe7 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                auto &button = Button::getInstance();
 80022d6:	f7fe ff75 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80022da:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80022dc:	f003 fcfc 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80022e0:	2804      	cmp	r0, #4
 80022e2:	d109      	bne.n	80022f8 <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xc0>
                    LOGI("Go back to Display screen");
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xdc>)
 80022e6:	490c      	ldr	r1, [pc, #48]	; (8002318 <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xe0>)
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xe4>)
 80022ea:	f240 2225 	movw	r2, #549	; 0x225
 80022ee:	f7fe ffb9 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <_ZN4blib11LcdSimulate21impl_3_1_DisplayErrorEv+0xe8>)
 80022f4:	e9c6 3401 	strd	r3, r4, [r6, #4]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80022f8:	2100      	movs	r1, #0
 80022fa:	4628      	mov	r0, r5
 80022fc:	f003 fcea 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002300:	b016      	add	sp, #88	; 0x58
 8002302:	bd70      	pop	{r4, r5, r6, pc}
 8002304:	0800bdcf 	.word	0x0800bdcf
 8002308:	0800bde5 	.word	0x0800bde5
 800230c:	0800bdfb 	.word	0x0800bdfb
 8002310:	0800be12 	.word	0x0800be12
 8002314:	0800be27 	.word	0x0800be27
 8002318:	0800b921 	.word	0x0800b921
 800231c:	0800bd8a 	.word	0x0800bd8a
 8002320:	08001ecd 	.word	0x08001ecd

08002324 <main>:
{
 8002324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002328:	b095      	sub	sp, #84	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232a:	2400      	movs	r4, #0
 800232c:	4daa      	ldr	r5, [pc, #680]	; (80025d8 <main+0x2b4>)
    HAL_Init();
 800232e:	f001 f9bf 	bl	80036b0 <HAL_Init>
    SystemClock_Config();
 8002332:	f7fe fec1 	bl	80010b8 <_Z18SystemClock_Configv>
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002336:	2214      	movs	r2, #20
 8002338:	2100      	movs	r1, #0
 800233a:	a80d      	add	r0, sp, #52	; 0x34
 800233c:	f005 fdd5 	bl	8007eea <memset>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002340:	9403      	str	r4, [sp, #12]
 8002342:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | LOAD_CTRL_Pin | BUCK_EN_Pin | FAN_Pin,
 8002344:	48a5      	ldr	r0, [pc, #660]	; (80025dc <main+0x2b8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	632b      	str	r3, [r5, #48]	; 0x30
 800234c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	9303      	str	r3, [sp, #12]
 8002354:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	9404      	str	r4, [sp, #16]
 8002358:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	632b      	str	r3, [r5, #48]	; 0x30
 8002360:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	9304      	str	r3, [sp, #16]
 8002368:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	9405      	str	r4, [sp, #20]
 800236c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	632b      	str	r3, [r5, #48]	; 0x30
 8002374:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	9305      	str	r3, [sp, #20]
 800237c:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800237e:	9406      	str	r4, [sp, #24]
 8002380:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002382:	f043 0308 	orr.w	r3, r3, #8
 8002386:	632b      	str	r3, [r5, #48]	; 0x30
 8002388:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | LOAD_CTRL_Pin | BUCK_EN_Pin | FAN_Pin,
 8002390:	2201      	movs	r2, #1
 8002392:	f44f 6154 	mov.w	r1, #3392	; 0xd40
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002396:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | LOAD_CTRL_Pin | BUCK_EN_Pin | FAN_Pin,
 8002398:	f001 ff42 	bl	8004220 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BFC_GPIO_Port, BFC_Pin, GPIO_PIN_SET);
 800239c:	4890      	ldr	r0, [pc, #576]	; (80025e0 <main+0x2bc>)
 800239e:	2201      	movs	r2, #1
 80023a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023a4:	f001 ff3c 	bl	8004220 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin | LED_YEL_Pin | LED_RED_Pin, GPIO_PIN_SET);
 80023a8:	2201      	movs	r2, #1
 80023aa:	488e      	ldr	r0, [pc, #568]	; (80025e4 <main+0x2c0>)
 80023ac:	2115      	movs	r1, #21
 80023ae:	f001 ff37 	bl	8004220 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b2:	2601      	movs	r6, #1
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b8:	4888      	ldr	r0, [pc, #544]	; (80025dc <main+0x2b8>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ba:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023bc:	270f      	movs	r7, #15
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023be:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023c0:	e9cd 730d 	strd	r7, r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c4:	f001 fe4c 	bl	8004060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INVERTER_CTRL_Pin | LOAD_CTRL_Pin | BUCK_EN_Pin | FAN_Pin;
 80023c8:	f44f 6354 	mov.w	r3, #3392	; 0xd40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023cc:	4883      	ldr	r0, [pc, #524]	; (80025dc <main+0x2b8>)
 80023ce:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f001 fe42 	bl	8004060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BFC_Pin;
 80023dc:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(BFC_GPIO_Port, &GPIO_InitStruct);
 80023e0:	487f      	ldr	r0, [pc, #508]	; (80025e0 <main+0x2bc>)
 80023e2:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(BFC_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f001 fe38 	bl	8004060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_GRE_Pin | LED_YEL_Pin | LED_RED_Pin;
 80023f0:	2315      	movs	r3, #21
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023f2:	487c      	ldr	r0, [pc, #496]	; (80025e4 <main+0x2c0>)
 80023f4:	a90d      	add	r1, sp, #52	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fe:	f001 fe2f 	bl	8004060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002402:	4622      	mov	r2, r4
 8002404:	4621      	mov	r1, r4
 8002406:	2006      	movs	r0, #6
 8002408:	f001 fc0a 	bl	8003c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800240c:	2006      	movs	r0, #6
 800240e:	f001 fc39 	bl	8003c84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002412:	4622      	mov	r2, r4
 8002414:	4621      	mov	r1, r4
 8002416:	2007      	movs	r0, #7
 8002418:	f001 fc02 	bl	8003c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800241c:	2007      	movs	r0, #7
 800241e:	f001 fc31 	bl	8003c84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002422:	4622      	mov	r2, r4
 8002424:	4621      	mov	r1, r4
 8002426:	2008      	movs	r0, #8
 8002428:	f001 fbfa 	bl	8003c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800242c:	2008      	movs	r0, #8
 800242e:	f001 fc29 	bl	8003c84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002432:	4622      	mov	r2, r4
 8002434:	4621      	mov	r1, r4
 8002436:	2009      	movs	r0, #9
 8002438:	f001 fbf2 	bl	8003c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800243c:	2009      	movs	r0, #9
 800243e:	f001 fc21 	bl	8003c84 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002442:	9402      	str	r4, [sp, #8]
 8002444:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800244a:	632b      	str	r3, [r5, #48]	; 0x30
 800244c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    hadc1.Instance = ADC1;
 800244e:	4d66      	ldr	r5, [pc, #408]	; (80025e8 <main+0x2c4>)
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002454:	4622      	mov	r2, r4
 8002456:	4621      	mov	r1, r4
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002458:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800245a:	2038      	movs	r0, #56	; 0x38
    __HAL_RCC_DMA2_CLK_ENABLE();
 800245c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800245e:	f001 fbdf 	bl	8003c20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002462:	2038      	movs	r0, #56	; 0x38
 8002464:	f001 fc0e 	bl	8003c84 <HAL_NVIC_EnableIRQ>
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8002468:	2210      	movs	r2, #16
 800246a:	4621      	mov	r1, r4
 800246c:	a80d      	add	r0, sp, #52	; 0x34
 800246e:	f005 fd3c 	bl	8007eea <memset>
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002472:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002608 <main+0x2e4>
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002476:	60ac      	str	r4, [r5, #8]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002478:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800247c:	e9c5 c300 	strd	ip, r3, [r5]
    hadc1.Init.NbrOfConversion = 5;
 8002480:	2705      	movs	r7, #5
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002482:	4b5a      	ldr	r3, [pc, #360]	; (80025ec <main+0x2c8>)
    hadc1.Init.ScanConvMode = ENABLE;
 8002484:	612e      	str	r6, [r5, #16]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002486:	4628      	mov	r0, r5
    hadc1.Init.ContinuousConvMode = ENABLE;
 8002488:	762e      	strb	r6, [r5, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800248a:	f885 4020 	strb.w	r4, [r5, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800248e:	62ec      	str	r4, [r5, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002490:	62ab      	str	r3, [r5, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002492:	60ec      	str	r4, [r5, #12]
    hadc1.Init.NbrOfConversion = 5;
 8002494:	61ef      	str	r7, [r5, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8002496:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800249a:	616c      	str	r4, [r5, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800249c:	f001 f948 	bl	8003730 <HAL_ADC_Init>
 80024a0:	b108      	cbz	r0, 80024a6 <main+0x182>
 80024a2:	b672      	cpsid	i
    while (1)
 80024a4:	e7fe      	b.n	80024a4 <main+0x180>
    sConfig.Rank = 1;
 80024a6:	e9cd 060d 	strd	r0, r6, [sp, #52]	; 0x34
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024aa:	2307      	movs	r3, #7
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ac:	a90d      	add	r1, sp, #52	; 0x34
 80024ae:	4628      	mov	r0, r5
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80024b0:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b2:	f001 fb13 	bl	8003adc <HAL_ADC_ConfigChannel>
 80024b6:	b108      	cbz	r0, 80024bc <main+0x198>
 80024b8:	b672      	cpsid	i
    while (1)
 80024ba:	e7fe      	b.n	80024ba <main+0x196>
    sConfig.Rank = 2;
 80024bc:	2402      	movs	r4, #2
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024be:	a90d      	add	r1, sp, #52	; 0x34
 80024c0:	4628      	mov	r0, r5
    sConfig.Channel = ADC_CHANNEL_1;
 80024c2:	960d      	str	r6, [sp, #52]	; 0x34
    sConfig.Rank = 2;
 80024c4:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024c6:	f001 fb09 	bl	8003adc <HAL_ADC_ConfigChannel>
 80024ca:	b108      	cbz	r0, 80024d0 <main+0x1ac>
 80024cc:	b672      	cpsid	i
    while (1)
 80024ce:	e7fe      	b.n	80024ce <main+0x1aa>
    sConfig.Channel = ADC_CHANNEL_2;
 80024d0:	940d      	str	r4, [sp, #52]	; 0x34
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d2:	a90d      	add	r1, sp, #52	; 0x34
    sConfig.Rank = 3;
 80024d4:	2403      	movs	r4, #3
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d6:	4628      	mov	r0, r5
    sConfig.Rank = 3;
 80024d8:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024da:	f001 faff 	bl	8003adc <HAL_ADC_ConfigChannel>
 80024de:	b108      	cbz	r0, 80024e4 <main+0x1c0>
 80024e0:	b672      	cpsid	i
    while (1)
 80024e2:	e7fe      	b.n	80024e2 <main+0x1be>
    sConfig.Channel = ADC_CHANNEL_3;
 80024e4:	940d      	str	r4, [sp, #52]	; 0x34
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024e6:	a90d      	add	r1, sp, #52	; 0x34
    sConfig.Rank = 4;
 80024e8:	2404      	movs	r4, #4
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ea:	4628      	mov	r0, r5
    sConfig.Rank = 4;
 80024ec:	940e      	str	r4, [sp, #56]	; 0x38
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ee:	f001 faf5 	bl	8003adc <HAL_ADC_ConfigChannel>
 80024f2:	b108      	cbz	r0, 80024f8 <main+0x1d4>
 80024f4:	b672      	cpsid	i
    while (1)
 80024f6:	e7fe      	b.n	80024f6 <main+0x1d2>
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f8:	a90d      	add	r1, sp, #52	; 0x34
 80024fa:	4628      	mov	r0, r5
    sConfig.Rank = 5;
 80024fc:	e9cd 470d 	strd	r4, r7, [sp, #52]	; 0x34
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002500:	f001 faec 	bl	8003adc <HAL_ADC_ConfigChannel>
 8002504:	b108      	cbz	r0, 800250a <main+0x1e6>
 8002506:	b672      	cpsid	i
    while (1)
 8002508:	e7fe      	b.n	8002508 <main+0x1e4>
    hiwdg.Instance = IWDG;
 800250a:	4839      	ldr	r0, [pc, #228]	; (80025f0 <main+0x2cc>)
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <main+0x2d0>)
    hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800250e:	e9c0 3400 	strd	r3, r4, [r0]
    hiwdg.Init.Reload = 4095;
 8002512:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002516:	6083      	str	r3, [r0, #8]
    if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002518:	f002 f8e8 	bl	80046ec <HAL_IWDG_Init>
 800251c:	b108      	cbz	r0, 8002522 <main+0x1fe>
 800251e:	b672      	cpsid	i
    while (1)
 8002520:	e7fe      	b.n	8002520 <main+0x1fc>
    hi2c1.Instance = I2C1;
 8002522:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <main+0x2d4>)
    hi2c1.Init.ClockSpeed = 100000;
 8002524:	4a35      	ldr	r2, [pc, #212]	; (80025fc <main+0x2d8>)
 8002526:	4e36      	ldr	r6, [pc, #216]	; (8002600 <main+0x2dc>)
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002528:	6218      	str	r0, [r3, #32]
    hi2c1.Init.ClockSpeed = 100000;
 800252a:	e9c3 6200 	strd	r6, r2, [r3]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800252e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c1.Init.OwnAddress1 = 0;
 8002532:	e9c3 0002 	strd	r0, r0, [r3, #8]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002536:	e9c3 2004 	strd	r2, r0, [r3, #16]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800253a:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800253e:	4618      	mov	r0, r3
 8002540:	f001 ff54 	bl	80043ec <HAL_I2C_Init>
 8002544:	4604      	mov	r4, r0
 8002546:	b108      	cbz	r0, 800254c <main+0x228>
 8002548:	b672      	cpsid	i
    while (1)
 800254a:	e7fe      	b.n	800254a <main+0x226>
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800254c:	4601      	mov	r1, r0
 800254e:	2210      	movs	r2, #16
 8002550:	a809      	add	r0, sp, #36	; 0x24
 8002552:	f005 fcca 	bl	8007eea <memset>
    htim2.Instance = TIM2;
 8002556:	4d2b      	ldr	r5, [pc, #172]	; (8002604 <main+0x2e0>)
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002558:	221c      	movs	r2, #28
 800255a:	4621      	mov	r1, r4
 800255c:	a80d      	add	r0, sp, #52	; 0x34
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800255e:	e9cd 4407 	strd	r4, r4, [sp, #28]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002562:	f005 fcc2 	bl	8007eea <memset>
    htim2.Instance = TIM2;
 8002566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    htim2.Init.Prescaler = 0;
 800256a:	e9c5 3400 	strd	r3, r4, [r5]
    htim2.Init.Period = 3600;
 800256e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002572:	e9c5 3403 	strd	r3, r4, [r5, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002576:	4628      	mov	r0, r5
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002578:	2380      	movs	r3, #128	; 0x80
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	60ac      	str	r4, [r5, #8]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800257c:	61ab      	str	r3, [r5, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800257e:	f002 fe8d 	bl	800529c <HAL_TIM_Base_Init>
 8002582:	b108      	cbz	r0, 8002588 <main+0x264>
 8002584:	b672      	cpsid	i
    while (1)
 8002586:	e7fe      	b.n	8002586 <main+0x262>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800258c:	a909      	add	r1, sp, #36	; 0x24
 800258e:	4628      	mov	r0, r5
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002590:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002592:	f002 ff74 	bl	800547e <HAL_TIM_ConfigClockSource>
 8002596:	b108      	cbz	r0, 800259c <main+0x278>
 8002598:	b672      	cpsid	i
    while (1)
 800259a:	e7fe      	b.n	800259a <main+0x276>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800259c:	4819      	ldr	r0, [pc, #100]	; (8002604 <main+0x2e0>)
 800259e:	f002 fea9 	bl	80052f4 <HAL_TIM_PWM_Init>
 80025a2:	b108      	cbz	r0, 80025a8 <main+0x284>
 80025a4:	b672      	cpsid	i
    while (1)
 80025a6:	e7fe      	b.n	80025a6 <main+0x282>
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a8:	e9cd 0007 	strd	r0, r0, [sp, #28]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025ac:	a907      	add	r1, sp, #28
 80025ae:	4815      	ldr	r0, [pc, #84]	; (8002604 <main+0x2e0>)
 80025b0:	f003 f874 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 80025b4:	4602      	mov	r2, r0
 80025b6:	b108      	cbz	r0, 80025bc <main+0x298>
 80025b8:	b672      	cpsid	i
    while (1)
 80025ba:	e7fe      	b.n	80025ba <main+0x296>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025bc:	2360      	movs	r3, #96	; 0x60
    sConfigOC.Pulse = 0;
 80025be:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c2:	900f      	str	r0, [sp, #60]	; 0x3c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c4:	9011      	str	r0, [sp, #68]	; 0x44
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025c6:	a90d      	add	r1, sp, #52	; 0x34
 80025c8:	480e      	ldr	r0, [pc, #56]	; (8002604 <main+0x2e0>)
 80025ca:	f002 fef5 	bl	80053b8 <HAL_TIM_PWM_ConfigChannel>
 80025ce:	4604      	mov	r4, r0
 80025d0:	b1e0      	cbz	r0, 800260c <main+0x2e8>
 80025d2:	b672      	cpsid	i
    while (1)
 80025d4:	e7fe      	b.n	80025d4 <main+0x2b0>
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020000 	.word	0x40020000
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	20000264 	.word	0x20000264
 80025ec:	0f000001 	.word	0x0f000001
 80025f0:	20000360 	.word	0x20000360
 80025f4:	40003000 	.word	0x40003000
 80025f8:	2000030c 	.word	0x2000030c
 80025fc:	000186a0 	.word	0x000186a0
 8002600:	40005400 	.word	0x40005400
 8002604:	2000038c 	.word	0x2000038c
 8002608:	40012000 	.word	0x40012000
    HAL_TIM_MspPostInit(&htim2);
 800260c:	4852      	ldr	r0, [pc, #328]	; (8002758 <main+0x434>)
    huart3.Init.BaudRate = 115200;
 800260e:	4d53      	ldr	r5, [pc, #332]	; (800275c <main+0x438>)
    HAL_TIM_MspPostInit(&htim2);
 8002610:	f000 ff24 	bl	800345c <HAL_TIM_MspPostInit>
    huart3.Instance = USART3;
 8002614:	4852      	ldr	r0, [pc, #328]	; (8002760 <main+0x43c>)
    huart3.Init.BaudRate = 115200;
 8002616:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800261a:	e9c0 5300 	strd	r5, r3, [r0]
    huart3.Init.Mode = UART_MODE_TX_RX;
 800261e:	230c      	movs	r3, #12
    huart3.Init.StopBits = UART_STOPBITS_1;
 8002620:	e9c0 4402 	strd	r4, r4, [r0, #8]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002624:	e9c0 3405 	strd	r3, r4, [r0, #20]
    huart3.Init.Parity = UART_PARITY_NONE;
 8002628:	6104      	str	r4, [r0, #16]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800262a:	61c4      	str	r4, [r0, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 800262c:	f003 f908 	bl	8005840 <HAL_UART_Init>
 8002630:	4605      	mov	r5, r0
 8002632:	b108      	cbz	r0, 8002638 <main+0x314>
 8002634:	b672      	cpsid	i
    while (1)
 8002636:	e7fe      	b.n	8002636 <main+0x312>
    RTC_TimeTypeDef sTime = { 0 };
 8002638:	4601      	mov	r1, r0
 800263a:	2214      	movs	r2, #20
 800263c:	a80d      	add	r0, sp, #52	; 0x34
 800263e:	f005 fc54 	bl	8007eea <memset>
    hrtc.Instance = RTC;
 8002642:	4c48      	ldr	r4, [pc, #288]	; (8002764 <main+0x440>)
 8002644:	4b48      	ldr	r3, [pc, #288]	; (8002768 <main+0x444>)
    RTC_DateTypeDef sDate = { 0 };
 8002646:	9509      	str	r5, [sp, #36]	; 0x24
    hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002648:	e9c4 3500 	strd	r3, r5, [r4]
    hrtc.Init.SynchPrediv = 249;
 800264c:	217f      	movs	r1, #127	; 0x7f
 800264e:	23f9      	movs	r3, #249	; 0xf9
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002650:	4620      	mov	r0, r4
    hrtc.Init.SynchPrediv = 249;
 8002652:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002656:	e9c4 5504 	strd	r5, r5, [r4, #16]
    hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800265a:	61a5      	str	r5, [r4, #24]
    if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800265c:	f002 fbed 	bl	8004e3a <HAL_RTC_Init>
 8002660:	b108      	cbz	r0, 8002666 <main+0x342>
 8002662:	b672      	cpsid	i
    while (1)
 8002664:	e7fe      	b.n	8002664 <main+0x340>
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002666:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    sTime.Hours = 0x0;
 800266a:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
    sTime.Seconds = 0x0;
 800266e:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002672:	2201      	movs	r2, #1
 8002674:	a90d      	add	r1, sp, #52	; 0x34
 8002676:	4620      	mov	r0, r4
 8002678:	f002 fc2d 	bl	8004ed6 <HAL_RTC_SetTime>
 800267c:	b108      	cbz	r0, 8002682 <main+0x35e>
 800267e:	b672      	cpsid	i
    while (1)
 8002680:	e7fe      	b.n	8002680 <main+0x35c>
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002682:	4b3a      	ldr	r3, [pc, #232]	; (800276c <main+0x448>)
 8002684:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002686:	4620      	mov	r0, r4
 8002688:	2201      	movs	r2, #1
 800268a:	a909      	add	r1, sp, #36	; 0x24
 800268c:	f002 fc7d 	bl	8004f8a <HAL_RTC_SetDate>
 8002690:	4604      	mov	r4, r0
 8002692:	b108      	cbz	r0, 8002698 <main+0x374>
 8002694:	b672      	cpsid	i
    while (1)
 8002696:	e7fe      	b.n	8002696 <main+0x372>
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8002698:	4b35      	ldr	r3, [pc, #212]	; (8002770 <main+0x44c>)
 800269a:	4936      	ldr	r1, [pc, #216]	; (8002774 <main+0x450>)
 800269c:	4836      	ldr	r0, [pc, #216]	; (8002778 <main+0x454>)
                    if (mInstance == nullptr)
 800269e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8002784 <main+0x460>
 80026a2:	22b4      	movs	r2, #180	; 0xb4
 80026a4:	f7fe fdde 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 80026a8:	4b31      	ldr	r3, [pc, #196]	; (8002770 <main+0x44c>)
 80026aa:	4932      	ldr	r1, [pc, #200]	; (8002774 <main+0x450>)
 80026ac:	4833      	ldr	r0, [pc, #204]	; (800277c <main+0x458>)
 80026ae:	22b5      	movs	r2, #181	; 0xb5
 80026b0:	f7fe fdd8 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <main+0x44c>)
 80026b6:	492f      	ldr	r1, [pc, #188]	; (8002774 <main+0x450>)
 80026b8:	4831      	ldr	r0, [pc, #196]	; (8002780 <main+0x45c>)
 80026ba:	22b6      	movs	r2, #182	; 0xb6
 80026bc:	f7fe fdd2 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    blib::Rtc rtc;
 80026c0:	a80d      	add	r0, sp, #52	; 0x34
 80026c2:	f003 ff11 	bl	80064e8 <_ZN4blib3RtcC1Ev>
    rtc.setTime(0, 0, 1, 5, 24);
 80026c6:	2305      	movs	r3, #5
 80026c8:	2218      	movs	r2, #24
 80026ca:	4621      	mov	r1, r4
 80026cc:	e9cd 3200 	strd	r3, r2, [sp]
 80026d0:	a80d      	add	r0, sp, #52	; 0x34
 80026d2:	2301      	movs	r3, #1
 80026d4:	4622      	mov	r2, r4
 80026d6:	f003 ff47 	bl	8006568 <_ZN4blib3Rtc7setTimeEhhhhh>
    auto &analog = blib::Analog::getInstance();
 80026da:	f7fe fd3b 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80026de:	4605      	mov	r5, r0
    auto &devProtection = blib::DeviceProtection::getInstance();
 80026e0:	f7ff fd9a 	bl	8002218 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv>
 80026e4:	4606      	mov	r6, r0
    auto &chargeCtrl = blib::ChargeControl::getInstance();
 80026e6:	f7fe fd4d 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 80026ea:	4607      	mov	r7, r0
    auto &lcdSimulate = blib::LcdSimulate::getInstance();
 80026ec:	f7fe fd5a 	bl	80011a4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 80026f0:	f8d8 3000 	ldr.w	r3, [r8]
 80026f4:	4604      	mov	r4, r0
 80026f6:	b93b      	cbnz	r3, 8002708 <main+0x3e4>
                        mInstance = new T();
 80026f8:	2008      	movs	r0, #8
 80026fa:	f004 f944 	bl	8006986 <_Znwj>
 80026fe:	4681      	mov	r9, r0
 8002700:	f004 f838 	bl	8006774 <_ZN4blib13SerialMonitorC1Ev>
 8002704:	f8c8 9000 	str.w	r9, [r8]
                    return *mInstance;
 8002708:	f8d8 9000 	ldr.w	r9, [r8]
        HAL_IWDG_Refresh(&hiwdg);
 800270c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8002788 <main+0x464>
        analog.readAnalog();
 8002710:	4628      	mov	r0, r5
 8002712:	f003 fa5f 	bl	8005bd4 <_ZN4blib6Analog10readAnalogEv>
        devProtection.run();
 8002716:	4630      	mov	r0, r6
 8002718:	f003 fc96 	bl	8006048 <_ZN4blib16DeviceProtection3runEv>
        chargeCtrl.run();
 800271c:	4638      	mov	r0, r7
 800271e:	f003 fba1 	bl	8005e64 <_ZN4blib13ChargeControl3runEv>
        serialMnt.show();
 8002722:	4648      	mov	r0, r9
 8002724:	f004 f910 	bl	8006948 <_ZN4blib13SerialMonitor4showEv>
                (LcdSimulate::getInstance().*mCallback)();
 8002728:	f7fe fd3c 	bl	80011a4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 800272c:	68a3      	ldr	r3, [r4, #8]
 800272e:	4602      	mov	r2, r0
 8002730:	1059      	asrs	r1, r3, #1
 8002732:	f013 0f01 	tst.w	r3, #1
 8002736:	bf18      	it	ne
 8002738:	5852      	ldrne	r2, [r2, r1]
 800273a:	eb00 0063 	add.w	r0, r0, r3, asr #1
 800273e:	6863      	ldr	r3, [r4, #4]
 8002740:	bf18      	it	ne
 8002742:	58d3      	ldrne	r3, [r2, r3]
 8002744:	4798      	blx	r3
        HAL_Delay(500);
 8002746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800274a:	f000 ffdd 	bl	8003708 <HAL_Delay>
        HAL_IWDG_Refresh(&hiwdg);
 800274e:	4640      	mov	r0, r8
 8002750:	f001 fff4 	bl	800473c <HAL_IWDG_Refresh>
    while (1)
 8002754:	e7dc      	b.n	8002710 <main+0x3ec>
 8002756:	bf00      	nop
 8002758:	2000038c 	.word	0x2000038c
 800275c:	40004800 	.word	0x40004800
 8002760:	200003d4 	.word	0x200003d4
 8002764:	2000036c 	.word	0x2000036c
 8002768:	40002800 	.word	0x40002800
 800276c:	00010101 	.word	0x00010101
 8002770:	0800be3d 	.word	0x0800be3d
 8002774:	0800b80a 	.word	0x0800b80a
 8002778:	0800be42 	.word	0x0800be42
 800277c:	0800be6c 	.word	0x0800be6c
 8002780:	0800be86 	.word	0x0800be86
 8002784:	20000208 	.word	0x20000208
 8002788:	20000360 	.word	0x20000360

0800278c <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>:
                static T& getInstance()
 800278c:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 800278e:	4c06      	ldr	r4, [pc, #24]	; (80027a8 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x1c>)
 8002790:	6825      	ldr	r5, [r4, #0]
 8002792:	b935      	cbnz	r5, 80027a2 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x16>
                        mInstance = new T();
 8002794:	2008      	movs	r0, #8
 8002796:	f004 f8f6 	bl	8006986 <_Znwj>
            {
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x20>)
 800279c:	6003      	str	r3, [r0, #0]
 800279e:	8085      	strh	r5, [r0, #4]
 80027a0:	6020      	str	r0, [r4, #0]
                }
 80027a2:	6820      	ldr	r0, [r4, #0]
 80027a4:	bd38      	pop	{r3, r4, r5, pc}
 80027a6:	bf00      	nop
 80027a8:	20000200 	.word	0x20000200
 80027ac:	0800c034 	.word	0x0800c034

080027b0 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv>:
            void impl_3_2_AutoloadCfg()
 80027b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027b4:	4606      	mov	r6, r0
                auto &button = Button::getInstance();
 80027b6:	f7fe fd05 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80027ba:	4605      	mov	r5, r0
                auto &sysMgr = SystemManager::getInstance();
 80027bc:	f7ff ffe6 	bl	800278c <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>
                mLcd.clearDisplay();
 80027c0:	f106 040c 	add.w	r4, r6, #12
                auto &sysMgr = SystemManager::getInstance();
 80027c4:	4607      	mov	r7, r0
                mLcd.clearDisplay();
 80027c6:	4620      	mov	r0, r4
 80027c8:	f003 fe0a 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "AUTOLOAD CFG");
 80027cc:	2200      	movs	r2, #0
 80027ce:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xd8>)
 80027d0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80028b0 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x100>
 80027d4:	4611      	mov	r1, r2
 80027d6:	4620      	mov	r0, r4
 80027d8:	f003 fd64 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 80027dc:	4628      	mov	r0, r5
 80027de:	f003 fa7b 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80027e2:	2801      	cmp	r0, #1
 80027e4:	d13f      	bne.n	8002866 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xb6>
                    loadCfgEnable = !loadCfgEnable;
 80027e6:	f898 3000 	ldrb.w	r3, [r8]
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	f888 3000 	strb.w	r3, [r8]
                if (loadCfgEnable == 0)
 80027f2:	f898 2000 	ldrb.w	r2, [r8]
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d13b      	bne.n	8002872 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xc2>
                    mLcd.displayLine(2, 0, "NO ");
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xdc>)
                    mLcd.displayLine(2, 0, "YES");
 80027fc:	2102      	movs	r1, #2
 80027fe:	4620      	mov	r0, r4
 8002800:	f003 fd50 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002804:	4628      	mov	r0, r5
 8002806:	f003 fa67 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800280a:	2803      	cmp	r0, #3
 800280c:	d108      	bne.n	8002820 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x70>
                    if (loadCfgEnable == 0)
 800280e:	f898 2000 	ldrb.w	r2, [r8]
 8002812:	bb8a      	cbnz	r2, 8002878 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xc8>
                        mLcd.displayLine(1, 0, ">> NO ");
 8002814:	4b1e      	ldr	r3, [pc, #120]	; (8002890 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xe0>)
                        sysMgr.isLoadCfgFromFlash = loadCfgEnable;
 8002816:	717a      	strb	r2, [r7, #5]
                        mLcd.displayLine(1, 0, ">> NO ");
 8002818:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> YES");
 800281a:	4620      	mov	r0, r4
 800281c:	f003 fd42 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (sysMgr.isLoadCfgFromFlash == 0)
 8002820:	797a      	ldrb	r2, [r7, #5]
 8002822:	bb72      	cbnz	r2, 8002882 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xd2>
                    mLcd.displayLine(1, 0, "NO ");
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xdc>)
                    mLcd.displayLine(1, 0, "YES");
 8002826:	2101      	movs	r1, #1
 8002828:	4620      	mov	r0, r4
 800282a:	f003 fd3b 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 800282e:	4b19      	ldr	r3, [pc, #100]	; (8002894 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xe4>)
 8002830:	2200      	movs	r2, #0
 8002832:	2103      	movs	r1, #3
 8002834:	4620      	mov	r0, r4
 8002836:	f003 fd35 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800283a:	4628      	mov	r0, r5
 800283c:	f003 fa4c 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002840:	2804      	cmp	r0, #4
 8002842:	d10a      	bne.n	800285a <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xaa>
                    LOGI("Go back to Setting screen");
 8002844:	4b14      	ldr	r3, [pc, #80]	; (8002898 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xe8>)
 8002846:	4915      	ldr	r1, [pc, #84]	; (800289c <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xec>)
 8002848:	4815      	ldr	r0, [pc, #84]	; (80028a0 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xf0>)
 800284a:	f240 426a 	movw	r2, #1130	; 0x46a
 800284e:	f7fe fd09 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002852:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xf4>)
 8002854:	6073      	str	r3, [r6, #4]
 8002856:	2300      	movs	r3, #0
 8002858:	60b3      	str	r3, [r6, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800285a:	4628      	mov	r0, r5
 800285c:	2100      	movs	r1, #0
            }
 800285e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002862:	f003 ba37 	b.w	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002866:	4628      	mov	r0, r5
 8002868:	f003 fa36 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800286c:	2802      	cmp	r0, #2
 800286e:	d1c0      	bne.n	80027f2 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x42>
 8002870:	e7b9      	b.n	80027e6 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x36>
                    mLcd.displayLine(2, 0, "YES");
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xf8>)
 8002874:	2200      	movs	r2, #0
 8002876:	e7c1      	b.n	80027fc <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x4c>
                        sysMgr.isLoadCfgFromFlash = loadCfgEnable;
 8002878:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> YES");
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xfc>)
                        sysMgr.isLoadCfgFromFlash = loadCfgEnable;
 800287c:	7179      	strb	r1, [r7, #5]
                        mLcd.displayLine(1, 0, ">> YES");
 800287e:	2200      	movs	r2, #0
 8002880:	e7cb      	b.n	800281a <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x6a>
                    mLcd.displayLine(1, 0, "YES");
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xf8>)
 8002884:	2200      	movs	r2, #0
 8002886:	e7ce      	b.n	8002826 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x76>
 8002888:	0800bea6 	.word	0x0800bea6
 800288c:	0800beb6 	.word	0x0800beb6
 8002890:	0800beb3 	.word	0x0800beb3
 8002894:	0800bc25 	.word	0x0800bc25
 8002898:	0800bec1 	.word	0x0800bec1
 800289c:	0800b921 	.word	0x0800b921
 80028a0:	0800bbde 	.word	0x0800bbde
 80028a4:	08001631 	.word	0x08001631
 80028a8:	0800bebd 	.word	0x0800bebd
 80028ac:	0800beba 	.word	0x0800beba
 80028b0:	2000021c 	.word	0x2000021c

080028b4 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv>:
            void impl_3_2_CoolingFan()
 80028b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b8:	4606      	mov	r6, r0
                auto &button = Button::getInstance();
 80028ba:	f7fe fc83 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80028be:	4605      	mov	r5, r0
                auto &sysMgr = SystemManager::getInstance();
 80028c0:	f7ff ff64 	bl	800278c <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>
                mLcd.clearDisplay();
 80028c4:	f106 040c 	add.w	r4, r6, #12
                auto &sysMgr = SystemManager::getInstance();
 80028c8:	4607      	mov	r7, r0
                mLcd.clearDisplay();
 80028ca:	4620      	mov	r0, r4
 80028cc:	f003 fd88 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "COOLING FAN");
 80028d0:	2200      	movs	r2, #0
 80028d2:	4b2e      	ldr	r3, [pc, #184]	; (800298c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xd8>)
 80028d4:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 80029b4 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x100>
 80028d8:	4611      	mov	r1, r2
 80028da:	4620      	mov	r0, r4
 80028dc:	f003 fce2 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 80028e0:	4628      	mov	r0, r5
 80028e2:	f003 f9f9 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80028e6:	2801      	cmp	r0, #1
 80028e8:	d13f      	bne.n	800296a <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xb6>
                    fanEnable = !fanEnable;
 80028ea:	f898 3000 	ldrb.w	r3, [r8]
 80028ee:	f083 0301 	eor.w	r3, r3, #1
 80028f2:	f888 3000 	strb.w	r3, [r8]
                if (fanEnable == 0)
 80028f6:	f898 2000 	ldrb.w	r2, [r8]
 80028fa:	2a00      	cmp	r2, #0
 80028fc:	d13b      	bne.n	8002976 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xc2>
                    mLcd.displayLine(2, 0, "OFF");
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xdc>)
                    mLcd.displayLine(2, 0, "ON ");
 8002900:	2102      	movs	r1, #2
 8002902:	4620      	mov	r0, r4
 8002904:	f003 fcce 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002908:	4628      	mov	r0, r5
 800290a:	f003 f9e5 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800290e:	2803      	cmp	r0, #3
 8002910:	d108      	bne.n	8002924 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x70>
                    if (fanEnable == 0)
 8002912:	f898 2000 	ldrb.w	r2, [r8]
 8002916:	bb8a      	cbnz	r2, 800297c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xc8>
                        mLcd.displayLine(1, 0, ">> OFF");
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xe0>)
                        sysMgr.enableFan = fanEnable;
 800291a:	713a      	strb	r2, [r7, #4]
                        mLcd.displayLine(1, 0, ">> OFF");
 800291c:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> ON ");
 800291e:	4620      	mov	r0, r4
 8002920:	f003 fcc0 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (sysMgr.enableFan == 0)
 8002924:	793a      	ldrb	r2, [r7, #4]
 8002926:	bb72      	cbnz	r2, 8002986 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xd2>
                    mLcd.displayLine(1, 0, "OFF");
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xdc>)
                    mLcd.displayLine(1, 0, "ON ");
 800292a:	2101      	movs	r1, #1
 800292c:	4620      	mov	r0, r4
 800292e:	f003 fcb9 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xe4>)
 8002934:	2200      	movs	r2, #0
 8002936:	2103      	movs	r1, #3
 8002938:	4620      	mov	r0, r4
 800293a:	f003 fcb3 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800293e:	4628      	mov	r0, r5
 8002940:	f003 f9ca 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002944:	2804      	cmp	r0, #4
 8002946:	d10a      	bne.n	800295e <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xaa>
                    LOGI("Go back to Setting screen");
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xe8>)
 800294a:	4915      	ldr	r1, [pc, #84]	; (80029a0 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xec>)
 800294c:	4815      	ldr	r0, [pc, #84]	; (80029a4 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xf0>)
 800294e:	f240 32cb 	movw	r2, #971	; 0x3cb
 8002952:	f7fe fc87 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002956:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xf4>)
 8002958:	6073      	str	r3, [r6, #4]
 800295a:	2300      	movs	r3, #0
 800295c:	60b3      	str	r3, [r6, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800295e:	4628      	mov	r0, r5
 8002960:	2100      	movs	r1, #0
            }
 8002962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002966:	f003 b9b5 	b.w	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 800296a:	4628      	mov	r0, r5
 800296c:	f003 f9b4 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002970:	2802      	cmp	r0, #2
 8002972:	d1c0      	bne.n	80028f6 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x42>
 8002974:	e7b9      	b.n	80028ea <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x36>
                    mLcd.displayLine(2, 0, "ON ");
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xf8>)
 8002978:	2200      	movs	r2, #0
 800297a:	e7c1      	b.n	8002900 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x4c>
                        sysMgr.enableFan = fanEnable;
 800297c:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> ON ");
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xfc>)
                        sysMgr.enableFan = fanEnable;
 8002980:	7139      	strb	r1, [r7, #4]
                        mLcd.displayLine(1, 0, ">> ON ");
 8002982:	2200      	movs	r2, #0
 8002984:	e7cb      	b.n	800291e <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x6a>
                    mLcd.displayLine(1, 0, "ON ");
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xf8>)
 8002988:	2200      	movs	r2, #0
 800298a:	e7ce      	b.n	800292a <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x76>
 800298c:	0800bed6 	.word	0x0800bed6
 8002990:	0800bee5 	.word	0x0800bee5
 8002994:	0800bee2 	.word	0x0800bee2
 8002998:	0800bc25 	.word	0x0800bc25
 800299c:	0800bef0 	.word	0x0800bef0
 80029a0:	0800b921 	.word	0x0800b921
 80029a4:	0800bbde 	.word	0x0800bbde
 80029a8:	08001631 	.word	0x08001631
 80029ac:	0800beec 	.word	0x0800beec
 80029b0:	0800bee9 	.word	0x0800bee9
 80029b4:	20000230 	.word	0x20000230

080029b8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv>:
            void impl_3_1_DisplayControl()
 80029b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029bc:	b098      	sub	sp, #96	; 0x60
 80029be:	4605      	mov	r5, r0
                auto &analog = blib::Analog::getInstance();
 80029c0:	f7fe fbc8 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80029c4:	4680      	mov	r8, r0
                auto &chargeCtrl = blib::ChargeControl::getInstance();
 80029c6:	f7fe fbdd 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 80029ca:	4606      	mov	r6, r0
                auto &sysMgr = blib::SystemManager::getInstance();
 80029cc:	f7ff fede 	bl	800278c <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>
                char line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };
 80029d0:	2400      	movs	r4, #0
                auto &sysMgr = blib::SystemManager::getInstance();
 80029d2:	4607      	mov	r7, r0
                char line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };
 80029d4:	2211      	movs	r2, #17
 80029d6:	4621      	mov	r1, r4
 80029d8:	a807      	add	r0, sp, #28
 80029da:	9406      	str	r4, [sp, #24]
 80029dc:	f005 fa85 	bl	8007eea <memset>
 80029e0:	2211      	movs	r2, #17
 80029e2:	4621      	mov	r1, r4
 80029e4:	a80d      	add	r0, sp, #52	; 0x34
 80029e6:	940c      	str	r4, [sp, #48]	; 0x30
 80029e8:	f005 fa7f 	bl	8007eea <memset>
 80029ec:	2211      	movs	r2, #17
 80029ee:	4621      	mov	r1, r4
 80029f0:	a813      	add	r0, sp, #76	; 0x4c
 80029f2:	9412      	str	r4, [sp, #72]	; 0x48
 80029f4:	f005 fa79 	bl	8007eea <memset>
                snprintf(line1, 21, "Buck:%d Fan:%d T:%.1f", chargeCtrl.mBuckEnable,
 80029f8:	7c73      	ldrb	r3, [r6, #17]
 80029fa:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
 80029fe:	9305      	str	r3, [sp, #20]
 8002a00:	f7fd fda2 	bl	8000548 <__aeabi_f2d>
 8002a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a08:	793a      	ldrb	r2, [r7, #4]
 8002a0a:	9b05      	ldr	r3, [sp, #20]
 8002a0c:	9200      	str	r2, [sp, #0]
 8002a0e:	2115      	movs	r1, #21
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0xe4>)
 8002a12:	a806      	add	r0, sp, #24
 8002a14:	f005 f9d2 	bl	8007dbc <sniprintf>
                snprintf(line2, 21, "PWM:%ld PPWM:%ld", chargeCtrl.mPwm, chargeCtrl.mPredictPwm);    // Iout: 005.1A
 8002a18:	69b3      	ldr	r3, [r6, #24]
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	6973      	ldr	r3, [r6, #20]
 8002a1e:	4a20      	ldr	r2, [pc, #128]	; (8002aa0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0xe8>)
 8002a20:	2115      	movs	r1, #21
 8002a22:	a80c      	add	r0, sp, #48	; 0x30
 8002a24:	f005 f9ca 	bl	8007dbc <sniprintf>
                snprintf(line3, 21, "4BACK");
 8002a28:	491e      	ldr	r1, [pc, #120]	; (8002aa4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0xec>)
 8002a2a:	a812      	add	r0, sp, #72	; 0x48
 8002a2c:	f005 fb31 	bl	8008092 <strcpy>
                mLcd.clearDisplay();
 8002a30:	f105 000c 	add.w	r0, r5, #12
 8002a34:	9005      	str	r0, [sp, #20]
 8002a36:	f003 fcd3 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "CONTROL");
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0xf0>)
 8002a3c:	9805      	ldr	r0, [sp, #20]
 8002a3e:	4622      	mov	r2, r4
 8002a40:	4621      	mov	r1, r4
 8002a42:	f003 fc2f 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, line1);
 8002a46:	9805      	ldr	r0, [sp, #20]
 8002a48:	ab06      	add	r3, sp, #24
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	f003 fc29 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, line2);
 8002a52:	9805      	ldr	r0, [sp, #20]
 8002a54:	ab0c      	add	r3, sp, #48	; 0x30
 8002a56:	4622      	mov	r2, r4
 8002a58:	2102      	movs	r1, #2
 8002a5a:	f003 fc23 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, line3);
 8002a5e:	ab12      	add	r3, sp, #72	; 0x48
 8002a60:	220f      	movs	r2, #15
 8002a62:	2103      	movs	r1, #3
 8002a64:	9805      	ldr	r0, [sp, #20]
 8002a66:	f003 fc1d 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                auto &button = Button::getInstance();
 8002a6a:	f7fe fbab 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002a6e:	4606      	mov	r6, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002a70:	f003 f932 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002a74:	2804      	cmp	r0, #4
 8002a76:	d109      	bne.n	8002a8c <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0xd4>
                    LOGI("Go back to Display screen");
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0xf4>)
 8002a7a:	490d      	ldr	r1, [pc, #52]	; (8002ab0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0xf8>)
 8002a7c:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0xfc>)
 8002a7e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8002a82:	f7fe fbef 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayControlEv+0x100>)
 8002a88:	e9c5 3401 	strd	r3, r4, [r5, #4]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f003 f920 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002a94:	b018      	add	sp, #96	; 0x60
 8002a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a9a:	bf00      	nop
 8002a9c:	0800bf04 	.word	0x0800bf04
 8002aa0:	0800bf1a 	.word	0x0800bf1a
 8002aa4:	0800be0c 	.word	0x0800be0c
 8002aa8:	0800bf2b 	.word	0x0800bf2b
 8002aac:	0800bf33 	.word	0x0800bf33
 8002ab0:	0800b921 	.word	0x0800b921
 8002ab4:	0800bd8a 	.word	0x0800bd8a
 8002ab8:	08001ecd 	.word	0x08001ecd

08002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>:
                static T& getInstance()
 8002abc:	b510      	push	{r4, lr}
                    if (mInstance == nullptr)
 8002abe:	4c0a      	ldr	r4, [pc, #40]	; (8002ae8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x2c>)
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	b97b      	cbnz	r3, 8002ae4 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x28>
                        mInstance = new T();
 8002ac4:	2018      	movs	r0, #24
 8002ac6:	f003 ff5e 	bl	8006986 <_Znwj>
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x30>)
 8002acc:	6003      	str	r3, [r0, #0]
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x34>)
 8002ad0:	6043      	str	r3, [r0, #4]
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x38>)
 8002ad4:	6083      	str	r3, [r0, #8]
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x3c>)
 8002ad8:	60c3      	str	r3, [r0, #12]
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x40>)
 8002adc:	6103      	str	r3, [r0, #16]
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x44>)
 8002ae0:	6143      	str	r3, [r0, #20]
 8002ae2:	6020      	str	r0, [r4, #0]
                }
 8002ae4:	6820      	ldr	r0, [r4, #0]
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	20000214 	.word	0x20000214
 8002aec:	0800c024 	.word	0x0800c024
 8002af0:	41700000 	.word	0x41700000
 8002af4:	41200000 	.word	0x41200000
 8002af8:	41f00000 	.word	0x41f00000
 8002afc:	42a00000 	.word	0x42a00000
 8002b00:	42480000 	.word	0x42480000

08002b04 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv>:
            void impl_3_2_ShutdownTemp()
 8002b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b08:	b08e      	sub	sp, #56	; 0x38
 8002b0a:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8002b0c:	f7fe fb5a 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 8002b10:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 8002b14:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 8002b16:	4630      	mov	r0, r6
 8002b18:	f003 fc62 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SHUTDOWN TEMP");
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4b4e      	ldr	r3, [pc, #312]	; (8002c58 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x154>)
                static float setValue = Constant::getInstance().k_temperature_max;
 8002b20:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8002c7c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x178>
                char line1[21] = { 0 };
 8002b24:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "SHUTDOWN TEMP");
 8002b26:	4611      	mov	r1, r2
 8002b28:	4630      	mov	r0, r6
 8002b2a:	f003 fbbb 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 8002b2e:	2211      	movs	r2, #17
 8002b30:	4629      	mov	r1, r5
 8002b32:	a803      	add	r0, sp, #12
 8002b34:	9502      	str	r5, [sp, #8]
 8002b36:	f005 f9d8 	bl	8007eea <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_temperature_max);
 8002b3a:	f7ff ffbf 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002b3e:	6900      	ldr	r0, [r0, #16]
 8002b40:	f7fd fd02 	bl	8000548 <__aeabi_f2d>
 8002b44:	4a45      	ldr	r2, [pc, #276]	; (8002c5c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x158>)
 8002b46:	e9cd 0100 	strd	r0, r1, [sp]
 8002b4a:	2115      	movs	r1, #21
 8002b4c:	a802      	add	r0, sp, #8
 8002b4e:	f005 f935 	bl	8007dbc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 8002b52:	ab02      	add	r3, sp, #8
 8002b54:	462a      	mov	r2, r5
 8002b56:	2101      	movs	r1, #1
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f003 fba3 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_temperature_max;
 8002b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8002b62:	4d3f      	ldr	r5, [pc, #252]	; (8002c60 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x15c>)
 8002b64:	f3bf 8f5b 	dmb	ish
 8002b68:	f013 0f01 	tst.w	r3, #1
 8002b6c:	d10a      	bne.n	8002b84 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x80>
 8002b6e:	4640      	mov	r0, r8
 8002b70:	f003 fefa 	bl	8006968 <__cxa_guard_acquire>
 8002b74:	b130      	cbz	r0, 8002b84 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x80>
 8002b76:	f7ff ffa1 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002b7a:	6903      	ldr	r3, [r0, #16]
 8002b7c:	602b      	str	r3, [r5, #0]
 8002b7e:	4640      	mov	r0, r8
 8002b80:	f003 fefe 	bl	8006980 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002b84:	4620      	mov	r0, r4
 8002b86:	f003 f8a7 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002b8a:	2801      	cmp	r0, #1
 8002b8c:	d158      	bne.n	8002c40 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x13c>
                    setValue += delta;
 8002b8e:	edd5 7a00 	vldr	s15, [r5]
 8002b92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002b96:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 8002b9a:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 8002b9e:	f04f 0800 	mov.w	r8, #0
 8002ba2:	2211      	movs	r2, #17
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	a809      	add	r0, sp, #36	; 0x24
 8002ba8:	f8cd 8020 	str.w	r8, [sp, #32]
 8002bac:	f005 f99d 	bl	8007eea <memset>
                snprintf(line2, 21, "%.2f", setValue);
 8002bb0:	6828      	ldr	r0, [r5, #0]
 8002bb2:	f7fd fcc9 	bl	8000548 <__aeabi_f2d>
 8002bb6:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x158>)
 8002bb8:	e9cd 0100 	strd	r0, r1, [sp]
 8002bbc:	2115      	movs	r1, #21
 8002bbe:	a808      	add	r0, sp, #32
 8002bc0:	f005 f8fc 	bl	8007dbc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 8002bc4:	ab08      	add	r3, sp, #32
 8002bc6:	4642      	mov	r2, r8
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4630      	mov	r0, r6
 8002bcc:	f003 fb6a 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f003 f881 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002bd6:	2803      	cmp	r0, #3
 8002bd8:	d115      	bne.n	8002c06 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x102>
                    Constant::getInstance().k_temperature_max = setValue;
 8002bda:	f7ff ff6f 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	6103      	str	r3, [r0, #16]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_temperature_max);
 8002be2:	f7ff ff6b 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002be6:	6900      	ldr	r0, [r0, #16]
 8002be8:	f7fd fcae 	bl	8000548 <__aeabi_f2d>
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x160>)
 8002bee:	e9cd 0100 	strd	r0, r1, [sp]
 8002bf2:	2115      	movs	r1, #21
 8002bf4:	a802      	add	r0, sp, #8
 8002bf6:	f005 f8e1 	bl	8007dbc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8002bfa:	ab02      	add	r3, sp, #8
 8002bfc:	4642      	mov	r2, r8
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4630      	mov	r0, r6
 8002c02:	f003 fb4f 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002c06:	4620      	mov	r0, r4
 8002c08:	f003 f866 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c0c:	2804      	cmp	r0, #4
 8002c0e:	d10a      	bne.n	8002c26 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x122>
                    LOGI("Go back to Setting screen");
 8002c10:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x164>)
 8002c12:	4916      	ldr	r1, [pc, #88]	; (8002c6c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x168>)
 8002c14:	4816      	ldr	r0, [pc, #88]	; (8002c70 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x16c>)
 8002c16:	f240 4223 	movw	r2, #1059	; 0x423
 8002c1a:	f7fe fb23 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002c1e:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x170>)
 8002c20:	607b      	str	r3, [r7, #4]
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x174>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	2103      	movs	r1, #3
 8002c2e:	f003 fb39 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002c32:	2100      	movs	r1, #0
 8002c34:	4620      	mov	r0, r4
 8002c36:	f003 f84d 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002c3a:	b00e      	add	sp, #56	; 0x38
 8002c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002c40:	4620      	mov	r0, r4
 8002c42:	f003 f849 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c46:	2802      	cmp	r0, #2
 8002c48:	d1a9      	bne.n	8002b9e <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x9a>
                    setValue -= delta;
 8002c4a:	edd5 7a00 	vldr	s15, [r5]
 8002c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c56:	e7a0      	b.n	8002b9a <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x96>
 8002c58:	0800bf4b 	.word	0x0800bf4b
 8002c5c:	0800bf5c 	.word	0x0800bf5c
 8002c60:	20000224 	.word	0x20000224
 8002c64:	0800bf59 	.word	0x0800bf59
 8002c68:	0800bf61 	.word	0x0800bf61
 8002c6c:	0800b921 	.word	0x0800b921
 8002c70:	0800bbde 	.word	0x0800bbde
 8002c74:	08001631 	.word	0x08001631
 8002c78:	0800bc25 	.word	0x0800bc25
 8002c7c:	20000220 	.word	0x20000220

08002c80 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv>:
            void impl_3_2_FanTriggerTemp()
 8002c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c84:	b08e      	sub	sp, #56	; 0x38
 8002c86:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8002c88:	f7fe fa9c 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 8002c8c:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 8002c90:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 8002c92:	4630      	mov	r0, r6
 8002c94:	f003 fba4 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "FAN TRIGGER TEMP");
 8002c98:	2200      	movs	r2, #0
 8002c9a:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x154>)
                static float setValue = Constant::getInstance().k_temperature_turn_on_fan;
 8002c9c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8002df8 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x178>
                char line1[21] = { 0 };
 8002ca0:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "FAN TRIGGER TEMP");
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f003 fafd 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 8002caa:	2211      	movs	r2, #17
 8002cac:	4629      	mov	r1, r5
 8002cae:	a803      	add	r0, sp, #12
 8002cb0:	9502      	str	r5, [sp, #8]
 8002cb2:	f005 f91a 	bl	8007eea <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_temperature_turn_on_fan);
 8002cb6:	f7ff ff01 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002cba:	6940      	ldr	r0, [r0, #20]
 8002cbc:	f7fd fc44 	bl	8000548 <__aeabi_f2d>
 8002cc0:	4a45      	ldr	r2, [pc, #276]	; (8002dd8 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x158>)
 8002cc2:	e9cd 0100 	strd	r0, r1, [sp]
 8002cc6:	2115      	movs	r1, #21
 8002cc8:	a802      	add	r0, sp, #8
 8002cca:	f005 f877 	bl	8007dbc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 8002cce:	ab02      	add	r3, sp, #8
 8002cd0:	462a      	mov	r2, r5
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4630      	mov	r0, r6
 8002cd6:	f003 fae5 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_temperature_turn_on_fan;
 8002cda:	f8d8 3000 	ldr.w	r3, [r8]
 8002cde:	4d3f      	ldr	r5, [pc, #252]	; (8002ddc <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x15c>)
 8002ce0:	f3bf 8f5b 	dmb	ish
 8002ce4:	f013 0f01 	tst.w	r3, #1
 8002ce8:	d10a      	bne.n	8002d00 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x80>
 8002cea:	4640      	mov	r0, r8
 8002cec:	f003 fe3c 	bl	8006968 <__cxa_guard_acquire>
 8002cf0:	b130      	cbz	r0, 8002d00 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x80>
 8002cf2:	f7ff fee3 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002cf6:	6943      	ldr	r3, [r0, #20]
 8002cf8:	602b      	str	r3, [r5, #0]
 8002cfa:	4640      	mov	r0, r8
 8002cfc:	f003 fe40 	bl	8006980 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002d00:	4620      	mov	r0, r4
 8002d02:	f002 ffe9 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d06:	2801      	cmp	r0, #1
 8002d08:	d158      	bne.n	8002dbc <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x13c>
                    setValue += delta;
 8002d0a:	edd5 7a00 	vldr	s15, [r5]
 8002d0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d12:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 8002d16:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 8002d1a:	f04f 0800 	mov.w	r8, #0
 8002d1e:	2211      	movs	r2, #17
 8002d20:	4641      	mov	r1, r8
 8002d22:	a809      	add	r0, sp, #36	; 0x24
 8002d24:	f8cd 8020 	str.w	r8, [sp, #32]
 8002d28:	f005 f8df 	bl	8007eea <memset>
                snprintf(line2, 21, "%.2f", setValue);
 8002d2c:	6828      	ldr	r0, [r5, #0]
 8002d2e:	f7fd fc0b 	bl	8000548 <__aeabi_f2d>
 8002d32:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x158>)
 8002d34:	e9cd 0100 	strd	r0, r1, [sp]
 8002d38:	2115      	movs	r1, #21
 8002d3a:	a808      	add	r0, sp, #32
 8002d3c:	f005 f83e 	bl	8007dbc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 8002d40:	ab08      	add	r3, sp, #32
 8002d42:	4642      	mov	r2, r8
 8002d44:	2102      	movs	r1, #2
 8002d46:	4630      	mov	r0, r6
 8002d48:	f003 faac 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f002 ffc3 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d52:	2803      	cmp	r0, #3
 8002d54:	d115      	bne.n	8002d82 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x102>
                    Constant::getInstance().k_temperature_turn_on_fan = setValue;
 8002d56:	f7ff feb1 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002d5a:	682b      	ldr	r3, [r5, #0]
 8002d5c:	6143      	str	r3, [r0, #20]
                            Constant::getInstance().k_temperature_turn_on_fan);
 8002d5e:	f7ff fead 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    snprintf(line1, 21, ">> %.2f",
 8002d62:	6940      	ldr	r0, [r0, #20]
 8002d64:	f7fd fbf0 	bl	8000548 <__aeabi_f2d>
 8002d68:	4a1d      	ldr	r2, [pc, #116]	; (8002de0 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x160>)
 8002d6a:	e9cd 0100 	strd	r0, r1, [sp]
 8002d6e:	2115      	movs	r1, #21
 8002d70:	a802      	add	r0, sp, #8
 8002d72:	f005 f823 	bl	8007dbc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8002d76:	ab02      	add	r3, sp, #8
 8002d78:	4642      	mov	r2, r8
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	4630      	mov	r0, r6
 8002d7e:	f003 fa91 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002d82:	4620      	mov	r0, r4
 8002d84:	f002 ffa8 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d88:	2804      	cmp	r0, #4
 8002d8a:	d10a      	bne.n	8002da2 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x122>
                    LOGI("Go back to Setting screen");
 8002d8c:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x164>)
 8002d8e:	4916      	ldr	r1, [pc, #88]	; (8002de8 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x168>)
 8002d90:	4816      	ldr	r0, [pc, #88]	; (8002dec <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x16c>)
 8002d92:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8002d96:	f7fe fa65 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x170>)
 8002d9c:	607b      	str	r3, [r7, #4]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x174>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	4630      	mov	r0, r6
 8002da8:	2103      	movs	r1, #3
 8002daa:	f003 fa7b 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002dae:	2100      	movs	r1, #0
 8002db0:	4620      	mov	r0, r4
 8002db2:	f002 ff8f 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002db6:	b00e      	add	sp, #56	; 0x38
 8002db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002dbc:	4620      	mov	r0, r4
 8002dbe:	f002 ff8b 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002dc2:	2802      	cmp	r0, #2
 8002dc4:	d1a9      	bne.n	8002d1a <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x9a>
                    setValue -= delta;
 8002dc6:	edd5 7a00 	vldr	s15, [r5]
 8002dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002dd2:	e7a0      	b.n	8002d16 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x96>
 8002dd4:	0800bf77 	.word	0x0800bf77
 8002dd8:	0800bf5c 	.word	0x0800bf5c
 8002ddc:	2000022c 	.word	0x2000022c
 8002de0:	0800bf59 	.word	0x0800bf59
 8002de4:	0800bf88 	.word	0x0800bf88
 8002de8:	0800b921 	.word	0x0800b921
 8002dec:	0800bbde 	.word	0x0800bbde
 8002df0:	08001631 	.word	0x08001631
 8002df4:	0800bc25 	.word	0x0800bc25
 8002df8:	20000228 	.word	0x20000228

08002dfc <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv>:
            void impl_3_2_ChargingCurrent()
 8002dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e00:	b08e      	sub	sp, #56	; 0x38
 8002e02:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8002e04:	f7fe f9de 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 8002e08:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 8002e0c:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 8002e0e:	4630      	mov	r0, r6
 8002e10:	f003 fae6 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "CHARGING CURRENT");
 8002e14:	2200      	movs	r2, #0
 8002e16:	4b4e      	ldr	r3, [pc, #312]	; (8002f50 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x154>)
                static float setValue = Constant::getInstance().k_current_charging_max;
 8002e18:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8002f78 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x17c>
                char line1[21] = { 0 };
 8002e1c:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "CHARGING CURRENT");
 8002e1e:	4611      	mov	r1, r2
 8002e20:	4630      	mov	r0, r6
 8002e22:	f003 fa3f 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 8002e26:	2211      	movs	r2, #17
 8002e28:	4629      	mov	r1, r5
 8002e2a:	a803      	add	r0, sp, #12
 8002e2c:	9502      	str	r5, [sp, #8]
 8002e2e:	f005 f85c 	bl	8007eea <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_current_charging_max);
 8002e32:	f7ff fe43 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002e36:	68c0      	ldr	r0, [r0, #12]
 8002e38:	f7fd fb86 	bl	8000548 <__aeabi_f2d>
 8002e3c:	4a45      	ldr	r2, [pc, #276]	; (8002f54 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x158>)
 8002e3e:	e9cd 0100 	strd	r0, r1, [sp]
 8002e42:	2115      	movs	r1, #21
 8002e44:	a802      	add	r0, sp, #8
 8002e46:	f004 ffb9 	bl	8007dbc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 8002e4a:	ab02      	add	r3, sp, #8
 8002e4c:	462a      	mov	r2, r5
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4630      	mov	r0, r6
 8002e52:	f003 fa27 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_current_charging_max;
 8002e56:	f8d8 3000 	ldr.w	r3, [r8]
 8002e5a:	4d3f      	ldr	r5, [pc, #252]	; (8002f58 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x15c>)
 8002e5c:	f3bf 8f5b 	dmb	ish
 8002e60:	f013 0f01 	tst.w	r3, #1
 8002e64:	d10a      	bne.n	8002e7c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x80>
 8002e66:	4640      	mov	r0, r8
 8002e68:	f003 fd7e 	bl	8006968 <__cxa_guard_acquire>
 8002e6c:	b130      	cbz	r0, 8002e7c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x80>
 8002e6e:	f7ff fe25 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002e72:	68c3      	ldr	r3, [r0, #12]
 8002e74:	602b      	str	r3, [r5, #0]
 8002e76:	4640      	mov	r0, r8
 8002e78:	f003 fd82 	bl	8006980 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f002 ff2b 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002e82:	2801      	cmp	r0, #1
 8002e84:	d158      	bne.n	8002f38 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x13c>
                    setValue += delta;
 8002e86:	edd5 7a00 	vldr	s15, [r5]
 8002e8a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002f5c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x160>
 8002e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 8002e92:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 8002e96:	f04f 0800 	mov.w	r8, #0
 8002e9a:	2211      	movs	r2, #17
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	a809      	add	r0, sp, #36	; 0x24
 8002ea0:	f8cd 8020 	str.w	r8, [sp, #32]
 8002ea4:	f005 f821 	bl	8007eea <memset>
                snprintf(line2, 21, "%.2f", setValue);
 8002ea8:	6828      	ldr	r0, [r5, #0]
 8002eaa:	f7fd fb4d 	bl	8000548 <__aeabi_f2d>
 8002eae:	4a29      	ldr	r2, [pc, #164]	; (8002f54 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x158>)
 8002eb0:	e9cd 0100 	strd	r0, r1, [sp]
 8002eb4:	2115      	movs	r1, #21
 8002eb6:	a808      	add	r0, sp, #32
 8002eb8:	f004 ff80 	bl	8007dbc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 8002ebc:	ab08      	add	r3, sp, #32
 8002ebe:	4642      	mov	r2, r8
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	f003 f9ee 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f002 ff05 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002ece:	2803      	cmp	r0, #3
 8002ed0:	d115      	bne.n	8002efe <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x102>
                    Constant::getInstance().k_current_charging_max = setValue;
 8002ed2:	f7ff fdf3 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	60c3      	str	r3, [r0, #12]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_current_charging_max);
 8002eda:	f7ff fdef 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002ede:	68c0      	ldr	r0, [r0, #12]
 8002ee0:	f7fd fb32 	bl	8000548 <__aeabi_f2d>
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x164>)
 8002ee6:	e9cd 0100 	strd	r0, r1, [sp]
 8002eea:	2115      	movs	r1, #21
 8002eec:	a802      	add	r0, sp, #8
 8002eee:	f004 ff65 	bl	8007dbc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8002ef2:	ab02      	add	r3, sp, #8
 8002ef4:	4642      	mov	r2, r8
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f003 f9d3 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002efe:	4620      	mov	r0, r4
 8002f00:	f002 feea 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002f04:	2804      	cmp	r0, #4
 8002f06:	d10a      	bne.n	8002f1e <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x122>
                    LOGI("Go back to Setting screen");
 8002f08:	4b16      	ldr	r3, [pc, #88]	; (8002f64 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x168>)
 8002f0a:	4917      	ldr	r1, [pc, #92]	; (8002f68 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x16c>)
 8002f0c:	4817      	ldr	r0, [pc, #92]	; (8002f6c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x170>)
 8002f0e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002f12:	f7fe f9a7 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x174>)
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002f1e:	4b15      	ldr	r3, [pc, #84]	; (8002f74 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x178>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	4630      	mov	r0, r6
 8002f24:	2103      	movs	r1, #3
 8002f26:	f003 f9bd 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f002 fed1 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002f32:	b00e      	add	sp, #56	; 0x38
 8002f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f002 fecd 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002f3e:	2802      	cmp	r0, #2
 8002f40:	d1a9      	bne.n	8002e96 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x9a>
                    setValue -= delta;
 8002f42:	edd5 7a00 	vldr	s15, [r5]
 8002f46:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002f5c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x160>
 8002f4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f4e:	e7a0      	b.n	8002e92 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x96>
 8002f50:	0800bfa0 	.word	0x0800bfa0
 8002f54:	0800bf5c 	.word	0x0800bf5c
 8002f58:	20000238 	.word	0x20000238
 8002f5c:	3dcccccd 	.word	0x3dcccccd
 8002f60:	0800bf59 	.word	0x0800bf59
 8002f64:	0800bfb1 	.word	0x0800bfb1
 8002f68:	0800b921 	.word	0x0800b921
 8002f6c:	0800bbde 	.word	0x0800bbde
 8002f70:	08001631 	.word	0x08001631
 8002f74:	0800bc25 	.word	0x0800bc25
 8002f78:	20000234 	.word	0x20000234

08002f7c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv>:
            void impl_3_2_MinBatteryVolt()
 8002f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f80:	b08e      	sub	sp, #56	; 0x38
 8002f82:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8002f84:	f7fe f91e 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 8002f88:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 8002f8c:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f003 fa26 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MIN BATTERY VOLT");
 8002f94:	2200      	movs	r2, #0
 8002f96:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x154>)
                static float setValue = Constant::getInstance().k_voltage_battery_min;
 8002f98:	f8df 815c 	ldr.w	r8, [pc, #348]	; 80030f8 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x17c>
                char line1[21] = { 0 };
 8002f9c:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "MIN BATTERY VOLT");
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	f003 f97f 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 8002fa6:	2211      	movs	r2, #17
 8002fa8:	4629      	mov	r1, r5
 8002faa:	a803      	add	r0, sp, #12
 8002fac:	9502      	str	r5, [sp, #8]
 8002fae:	f004 ff9c 	bl	8007eea <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_voltage_battery_min);
 8002fb2:	f7ff fd83 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002fb6:	6880      	ldr	r0, [r0, #8]
 8002fb8:	f7fd fac6 	bl	8000548 <__aeabi_f2d>
 8002fbc:	4a45      	ldr	r2, [pc, #276]	; (80030d4 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x158>)
 8002fbe:	e9cd 0100 	strd	r0, r1, [sp]
 8002fc2:	2115      	movs	r1, #21
 8002fc4:	a802      	add	r0, sp, #8
 8002fc6:	f004 fef9 	bl	8007dbc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 8002fca:	ab02      	add	r3, sp, #8
 8002fcc:	462a      	mov	r2, r5
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	f003 f967 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_voltage_battery_min;
 8002fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8002fda:	4d3f      	ldr	r5, [pc, #252]	; (80030d8 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x15c>)
 8002fdc:	f3bf 8f5b 	dmb	ish
 8002fe0:	f013 0f01 	tst.w	r3, #1
 8002fe4:	d10a      	bne.n	8002ffc <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x80>
 8002fe6:	4640      	mov	r0, r8
 8002fe8:	f003 fcbe 	bl	8006968 <__cxa_guard_acquire>
 8002fec:	b130      	cbz	r0, 8002ffc <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x80>
 8002fee:	f7ff fd65 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002ff2:	6883      	ldr	r3, [r0, #8]
 8002ff4:	602b      	str	r3, [r5, #0]
 8002ff6:	4640      	mov	r0, r8
 8002ff8:	f003 fcc2 	bl	8006980 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	f002 fe6b 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003002:	2801      	cmp	r0, #1
 8003004:	d158      	bne.n	80030b8 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x13c>
                    setValue += delta;
 8003006:	edd5 7a00 	vldr	s15, [r5]
 800300a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80030dc <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x160>
 800300e:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 8003012:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 8003016:	f04f 0800 	mov.w	r8, #0
 800301a:	2211      	movs	r2, #17
 800301c:	4641      	mov	r1, r8
 800301e:	a809      	add	r0, sp, #36	; 0x24
 8003020:	f8cd 8020 	str.w	r8, [sp, #32]
 8003024:	f004 ff61 	bl	8007eea <memset>
                snprintf(line2, 21, "%.2f", setValue);
 8003028:	6828      	ldr	r0, [r5, #0]
 800302a:	f7fd fa8d 	bl	8000548 <__aeabi_f2d>
 800302e:	4a29      	ldr	r2, [pc, #164]	; (80030d4 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x158>)
 8003030:	e9cd 0100 	strd	r0, r1, [sp]
 8003034:	2115      	movs	r1, #21
 8003036:	a808      	add	r0, sp, #32
 8003038:	f004 fec0 	bl	8007dbc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 800303c:	ab08      	add	r3, sp, #32
 800303e:	4642      	mov	r2, r8
 8003040:	2102      	movs	r1, #2
 8003042:	4630      	mov	r0, r6
 8003044:	f003 f92e 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8003048:	4620      	mov	r0, r4
 800304a:	f002 fe45 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800304e:	2803      	cmp	r0, #3
 8003050:	d115      	bne.n	800307e <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x102>
                    Constant::getInstance().k_voltage_battery_min = setValue;
 8003052:	f7ff fd33 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003056:	682b      	ldr	r3, [r5, #0]
 8003058:	6083      	str	r3, [r0, #8]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_voltage_battery_min);
 800305a:	f7ff fd2f 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800305e:	6880      	ldr	r0, [r0, #8]
 8003060:	f7fd fa72 	bl	8000548 <__aeabi_f2d>
 8003064:	4a1e      	ldr	r2, [pc, #120]	; (80030e0 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x164>)
 8003066:	e9cd 0100 	strd	r0, r1, [sp]
 800306a:	2115      	movs	r1, #21
 800306c:	a802      	add	r0, sp, #8
 800306e:	f004 fea5 	bl	8007dbc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8003072:	ab02      	add	r3, sp, #8
 8003074:	4642      	mov	r2, r8
 8003076:	2101      	movs	r1, #1
 8003078:	4630      	mov	r0, r6
 800307a:	f003 f913 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800307e:	4620      	mov	r0, r4
 8003080:	f002 fe2a 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003084:	2804      	cmp	r0, #4
 8003086:	d10a      	bne.n	800309e <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x122>
                    LOGI("Go back to Setting screen");
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x168>)
 800308a:	4917      	ldr	r1, [pc, #92]	; (80030e8 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x16c>)
 800308c:	4817      	ldr	r0, [pc, #92]	; (80030ec <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x170>)
 800308e:	f240 3257 	movw	r2, #855	; 0x357
 8003092:	f7fe f8e7 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003096:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x174>)
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x178>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	4630      	mov	r0, r6
 80030a4:	2103      	movs	r1, #3
 80030a6:	f003 f8fd 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80030aa:	2100      	movs	r1, #0
 80030ac:	4620      	mov	r0, r4
 80030ae:	f002 fe11 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80030b2:	b00e      	add	sp, #56	; 0x38
 80030b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80030b8:	4620      	mov	r0, r4
 80030ba:	f002 fe0d 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80030be:	2802      	cmp	r0, #2
 80030c0:	d1a9      	bne.n	8003016 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x9a>
                    setValue -= delta;
 80030c2:	edd5 7a00 	vldr	s15, [r5]
 80030c6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80030dc <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x160>
 80030ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030ce:	e7a0      	b.n	8003012 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x96>
 80030d0:	0800bfca 	.word	0x0800bfca
 80030d4:	0800bf5c 	.word	0x0800bf5c
 80030d8:	20000240 	.word	0x20000240
 80030dc:	3e4ccccd 	.word	0x3e4ccccd
 80030e0:	0800bf59 	.word	0x0800bf59
 80030e4:	0800bfdb 	.word	0x0800bfdb
 80030e8:	0800b921 	.word	0x0800b921
 80030ec:	0800bbde 	.word	0x0800bbde
 80030f0:	08001631 	.word	0x08001631
 80030f4:	0800bc25 	.word	0x0800bc25
 80030f8:	2000023c 	.word	0x2000023c

080030fc <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv>:
            void impl_3_2_MaxBatteryVolt()
 80030fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003100:	b08e      	sub	sp, #56	; 0x38
 8003102:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8003104:	f7fe f85e 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 8003108:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 800310c:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 800310e:	4630      	mov	r0, r6
 8003110:	f003 f966 	bl	80063e0 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MAX BATTERY VOLT");
 8003114:	2200      	movs	r2, #0
 8003116:	4b4e      	ldr	r3, [pc, #312]	; (8003250 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x154>)
                static float setValue = Constant::getInstance().k_voltage_battery_max;
 8003118:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003278 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x17c>
                char line1[21] = { 0 };
 800311c:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "MAX BATTERY VOLT");
 800311e:	4611      	mov	r1, r2
 8003120:	4630      	mov	r0, r6
 8003122:	f003 f8bf 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 8003126:	2211      	movs	r2, #17
 8003128:	4629      	mov	r1, r5
 800312a:	a803      	add	r0, sp, #12
 800312c:	9502      	str	r5, [sp, #8]
 800312e:	f004 fedc 	bl	8007eea <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_voltage_battery_max);
 8003132:	f7ff fcc3 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003136:	6840      	ldr	r0, [r0, #4]
 8003138:	f7fd fa06 	bl	8000548 <__aeabi_f2d>
 800313c:	4a45      	ldr	r2, [pc, #276]	; (8003254 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x158>)
 800313e:	e9cd 0100 	strd	r0, r1, [sp]
 8003142:	2115      	movs	r1, #21
 8003144:	a802      	add	r0, sp, #8
 8003146:	f004 fe39 	bl	8007dbc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 800314a:	ab02      	add	r3, sp, #8
 800314c:	462a      	mov	r2, r5
 800314e:	2101      	movs	r1, #1
 8003150:	4630      	mov	r0, r6
 8003152:	f003 f8a7 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_voltage_battery_max;
 8003156:	f8d8 3000 	ldr.w	r3, [r8]
 800315a:	4d3f      	ldr	r5, [pc, #252]	; (8003258 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x15c>)
 800315c:	f3bf 8f5b 	dmb	ish
 8003160:	f013 0f01 	tst.w	r3, #1
 8003164:	d10a      	bne.n	800317c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x80>
 8003166:	4640      	mov	r0, r8
 8003168:	f003 fbfe 	bl	8006968 <__cxa_guard_acquire>
 800316c:	b130      	cbz	r0, 800317c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x80>
 800316e:	f7ff fca5 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8003172:	6843      	ldr	r3, [r0, #4]
 8003174:	602b      	str	r3, [r5, #0]
 8003176:	4640      	mov	r0, r8
 8003178:	f003 fc02 	bl	8006980 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 800317c:	4620      	mov	r0, r4
 800317e:	f002 fdab 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003182:	2801      	cmp	r0, #1
 8003184:	d158      	bne.n	8003238 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x13c>
                    setValue += delta;
 8003186:	edd5 7a00 	vldr	s15, [r5]
 800318a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800325c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x160>
 800318e:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 8003192:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 8003196:	f04f 0800 	mov.w	r8, #0
 800319a:	2211      	movs	r2, #17
 800319c:	4641      	mov	r1, r8
 800319e:	a809      	add	r0, sp, #36	; 0x24
 80031a0:	f8cd 8020 	str.w	r8, [sp, #32]
 80031a4:	f004 fea1 	bl	8007eea <memset>
                snprintf(line2, 21, "%.2f", setValue);
 80031a8:	6828      	ldr	r0, [r5, #0]
 80031aa:	f7fd f9cd 	bl	8000548 <__aeabi_f2d>
 80031ae:	4a29      	ldr	r2, [pc, #164]	; (8003254 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x158>)
 80031b0:	e9cd 0100 	strd	r0, r1, [sp]
 80031b4:	2115      	movs	r1, #21
 80031b6:	a808      	add	r0, sp, #32
 80031b8:	f004 fe00 	bl	8007dbc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 80031bc:	ab08      	add	r3, sp, #32
 80031be:	4642      	mov	r2, r8
 80031c0:	2102      	movs	r1, #2
 80031c2:	4630      	mov	r0, r6
 80031c4:	f003 f86e 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80031c8:	4620      	mov	r0, r4
 80031ca:	f002 fd85 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80031ce:	2803      	cmp	r0, #3
 80031d0:	d115      	bne.n	80031fe <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x102>
                    Constant::getInstance().k_voltage_battery_max = setValue;
 80031d2:	f7ff fc73 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80031d6:	682b      	ldr	r3, [r5, #0]
 80031d8:	6043      	str	r3, [r0, #4]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_voltage_battery_max);
 80031da:	f7ff fc6f 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80031de:	6840      	ldr	r0, [r0, #4]
 80031e0:	f7fd f9b2 	bl	8000548 <__aeabi_f2d>
 80031e4:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x164>)
 80031e6:	e9cd 0100 	strd	r0, r1, [sp]
 80031ea:	2115      	movs	r1, #21
 80031ec:	a802      	add	r0, sp, #8
 80031ee:	f004 fde5 	bl	8007dbc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 80031f2:	ab02      	add	r3, sp, #8
 80031f4:	4642      	mov	r2, r8
 80031f6:	2101      	movs	r1, #1
 80031f8:	4630      	mov	r0, r6
 80031fa:	f003 f853 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80031fe:	4620      	mov	r0, r4
 8003200:	f002 fd6a 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003204:	2804      	cmp	r0, #4
 8003206:	d10a      	bne.n	800321e <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x122>
                    LOGI("Go back to Setting screen");
 8003208:	4b16      	ldr	r3, [pc, #88]	; (8003264 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x168>)
 800320a:	4917      	ldr	r1, [pc, #92]	; (8003268 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x16c>)
 800320c:	4817      	ldr	r0, [pc, #92]	; (800326c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x170>)
 800320e:	f240 322a 	movw	r2, #810	; 0x32a
 8003212:	f7fe f827 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003216:	4b16      	ldr	r3, [pc, #88]	; (8003270 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x174>)
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x178>)
 8003220:	2200      	movs	r2, #0
 8003222:	4630      	mov	r0, r6
 8003224:	2103      	movs	r1, #3
 8003226:	f003 f83d 	bl	80062a4 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800322a:	2100      	movs	r1, #0
 800322c:	4620      	mov	r0, r4
 800322e:	f002 fd51 	bl	8005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003232:	b00e      	add	sp, #56	; 0x38
 8003234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8003238:	4620      	mov	r0, r4
 800323a:	f002 fd4d 	bl	8005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800323e:	2802      	cmp	r0, #2
 8003240:	d1a9      	bne.n	8003196 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x9a>
                    setValue -= delta;
 8003242:	edd5 7a00 	vldr	s15, [r5]
 8003246:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800325c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x160>
 800324a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800324e:	e7a0      	b.n	8003192 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x96>
 8003250:	0800bff3 	.word	0x0800bff3
 8003254:	0800bf5c 	.word	0x0800bf5c
 8003258:	20000248 	.word	0x20000248
 800325c:	3e4ccccd 	.word	0x3e4ccccd
 8003260:	0800bf59 	.word	0x0800bf59
 8003264:	0800c004 	.word	0x0800c004
 8003268:	0800b921 	.word	0x0800b921
 800326c:	0800bbde 	.word	0x0800bbde
 8003270:	08001631 	.word	0x08001631
 8003274:	0800bc25 	.word	0x0800bc25
 8003278:	20000244 	.word	0x20000244

0800327c <_ZN4blib11LcdSimulateD1Ev>:
            virtual ~LcdSimulate()
 800327c:	b510      	push	{r4, lr}
            {
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <_ZN4blib11LcdSimulateD1Ev+0x14>)
            virtual ~LcdSimulate()
 8003280:	4604      	mov	r4, r0
            {
 8003282:	f840 3b0c 	str.w	r3, [r0], #12
 8003286:	f002 ffc5 	bl	8006214 <_ZN4blib3LcdD1Ev>
            }
 800328a:	4620      	mov	r0, r4
 800328c:	bd10      	pop	{r4, pc}
 800328e:	bf00      	nop
 8003290:	0800c044 	.word	0x0800c044

08003294 <_ZN4blib11LcdSimulateD0Ev>:
            virtual ~LcdSimulate()
 8003294:	b510      	push	{r4, lr}
 8003296:	4604      	mov	r4, r0
            }
 8003298:	f7ff fff0 	bl	800327c <_ZN4blib11LcdSimulateD1Ev>
 800329c:	4620      	mov	r0, r4
 800329e:	2120      	movs	r1, #32
 80032a0:	f003 fb60 	bl	8006964 <_ZdlPvj>
 80032a4:	4620      	mov	r0, r4
 80032a6:	bd10      	pop	{r4, pc}

080032a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <HAL_MspInit+0x34>)
 80032ac:	2100      	movs	r1, #0
 80032ae:	9100      	str	r1, [sp, #0]
 80032b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
 80032b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ba:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80032be:	9200      	str	r2, [sp, #0]
 80032c0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	9101      	str	r1, [sp, #4]
 80032c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d6:	b002      	add	sp, #8
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800

080032e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4606      	mov	r6, r0
 80032e4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e6:	2214      	movs	r2, #20
 80032e8:	2100      	movs	r1, #0
 80032ea:	a803      	add	r0, sp, #12
 80032ec:	f004 fdfd 	bl	8007eea <memset>
  if(hadc->Instance==ADC1)
 80032f0:	6832      	ldr	r2, [r6, #0]
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_ADC_MspInit+0x94>)
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d13a      	bne.n	800336e <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032f8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80032fc:	2500      	movs	r5, #0
 80032fe:	9501      	str	r5, [sp, #4]
 8003300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = I_BATTERY_Pin|TEMPERATURE_Pin|V_SOLAR_Pin|I_SOLAR_Pin
                          |V_BATTERY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003302:	481d      	ldr	r0, [pc, #116]	; (8003378 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003304:	4c1d      	ldr	r4, [pc, #116]	; (800337c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
 800330c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003312:	9201      	str	r2, [sp, #4]
 8003314:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003316:	9502      	str	r5, [sp, #8]
 8003318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	9302      	str	r3, [sp, #8]
 8003328:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800332a:	221f      	movs	r2, #31
 800332c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003330:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	f000 fe94 	bl	8004060 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800333a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800333e:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003346:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800334a:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800334e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003352:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003356:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003358:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800335c:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003360:	f000 fcc8 	bl	8003cf4 <HAL_DMA_Init>
 8003364:	b108      	cbz	r0, 800336a <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8003366:	f7fd fef3 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800336a:	63b4      	str	r4, [r6, #56]	; 0x38
 800336c:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800336e:	b008      	add	sp, #32
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	bf00      	nop
 8003374:	40012000 	.word	0x40012000
 8003378:	40020000 	.word	0x40020000
 800337c:	200002ac 	.word	0x200002ac
 8003380:	40026410 	.word	0x40026410

08003384 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003384:	b530      	push	{r4, r5, lr}
 8003386:	4604      	mov	r4, r0
 8003388:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338a:	2214      	movs	r2, #20
 800338c:	2100      	movs	r1, #0
 800338e:	a803      	add	r0, sp, #12
 8003390:	f004 fdab 	bl	8007eea <memset>
  if(hi2c->Instance==I2C1)
 8003394:	6822      	ldr	r2, [r4, #0]
 8003396:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_I2C_MspInit+0x60>)
 8003398:	429a      	cmp	r2, r3
 800339a:	d121      	bne.n	80033e0 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339c:	4c12      	ldr	r4, [pc, #72]	; (80033e8 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339e:	4813      	ldr	r0, [pc, #76]	; (80033ec <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033a0:	2500      	movs	r5, #0
 80033a2:	9501      	str	r5, [sp, #4]
 80033a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	6323      	str	r3, [r4, #48]	; 0x30
 80033ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b6:	22c0      	movs	r2, #192	; 0xc0
 80033b8:	2312      	movs	r3, #18
 80033ba:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033be:	2103      	movs	r1, #3
 80033c0:	2304      	movs	r3, #4
 80033c2:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c6:	a903      	add	r1, sp, #12
 80033c8:	f000 fe4a 	bl	8004060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033cc:	9502      	str	r5, [sp, #8]
 80033ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033d4:	6423      	str	r3, [r4, #64]	; 0x40
 80033d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033dc:	9302      	str	r3, [sp, #8]
 80033de:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033e0:	b009      	add	sp, #36	; 0x24
 80033e2:	bd30      	pop	{r4, r5, pc}
 80033e4:	40005400 	.word	0x40005400
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40020400 	.word	0x40020400

080033f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033f2:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033f4:	2210      	movs	r2, #16
 80033f6:	2100      	movs	r1, #0
 80033f8:	4668      	mov	r0, sp
 80033fa:	f004 fd76 	bl	8007eea <memset>
  if(hrtc->Instance==RTC)
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RTC_MspInit+0x38>)
 8003402:	429a      	cmp	r2, r3
 8003404:	d10e      	bne.n	8003424 <HAL_RTC_MspInit+0x34>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003406:	2302      	movs	r3, #2
 8003408:	9300      	str	r3, [sp, #0]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800340a:	4668      	mov	r0, sp
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800340c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003410:	9303      	str	r3, [sp, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003412:	f001 fc2d 	bl	8004c70 <HAL_RCCEx_PeriphCLKConfig>
 8003416:	b108      	cbz	r0, 800341c <HAL_RTC_MspInit+0x2c>
    {
      Error_Handler();
 8003418:	f7fd fe9a 	bl	8001150 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800341c:	4b03      	ldr	r3, [pc, #12]	; (800342c <HAL_RTC_MspInit+0x3c>)
 800341e:	2201      	movs	r2, #1
 8003420:	f8c3 2e3c 	str.w	r2, [r3, #3644]	; 0xe3c
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003424:	b004      	add	sp, #16
 8003426:	bd10      	pop	{r4, pc}
 8003428:	40002800 	.word	0x40002800
 800342c:	42470000 	.word	0x42470000

08003430 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8003430:	6803      	ldr	r3, [r0, #0]
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8003436:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8003438:	d10b      	bne.n	8003452 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	9301      	str	r3, [sp, #4]
 800343e:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_TIM_Base_MspInit+0x28>)
 8003440:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003452:	b002      	add	sp, #8
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800

0800345c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800345c:	b510      	push	{r4, lr}
 800345e:	4604      	mov	r4, r0
 8003460:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003462:	2214      	movs	r2, #20
 8003464:	2100      	movs	r1, #0
 8003466:	a801      	add	r0, sp, #4
 8003468:	f004 fd3f 	bl	8007eea <memset>
  if(htim->Instance==TIM2)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003472:	d115      	bne.n	80034a0 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003474:	2300      	movs	r3, #0
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 800347a:	480b      	ldr	r0, [pc, #44]	; (80034a8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800347c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2220      	movs	r2, #32
 8003490:	2302      	movs	r3, #2
 8003492:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8003496:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003498:	2301      	movs	r3, #1
 800349a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 800349c:	f000 fde0 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80034a0:	b006      	add	sp, #24
 80034a2:	bd10      	pop	{r4, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40020000 	.word	0x40020000

080034ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034ac:	b510      	push	{r4, lr}
 80034ae:	4604      	mov	r4, r0
 80034b0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b2:	2214      	movs	r2, #20
 80034b4:	2100      	movs	r1, #0
 80034b6:	a803      	add	r0, sp, #12
 80034b8:	f004 fd17 	bl	8007eea <memset>
  if(huart->Instance==USART3)
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_UART_MspInit+0x64>)
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d123      	bne.n	800350c <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034c4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80034c8:	2100      	movs	r1, #0
 80034ca:	9101      	str	r1, [sp, #4]
 80034cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ce:	4811      	ldr	r0, [pc, #68]	; (8003514 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80034d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
 80034d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034d8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80034dc:	9201      	str	r2, [sp, #4]
 80034de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e0:	9102      	str	r1, [sp, #8]
 80034e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034e4:	f042 0202 	orr.w	r2, r2, #2
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
 80034ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	9302      	str	r3, [sp, #8]
 80034f2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80034f8:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034fa:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003500:	2307      	movs	r3, #7
 8003502:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003506:	a903      	add	r1, sp, #12
 8003508:	f000 fdaa 	bl	8004060 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800350c:	b008      	add	sp, #32
 800350e:	bd10      	pop	{r4, pc}
 8003510:	40004800 	.word	0x40004800
 8003514:	40020400 	.word	0x40020400

08003518 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003518:	e7fe      	b.n	8003518 <NMI_Handler>

0800351a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800351a:	e7fe      	b.n	800351a <HardFault_Handler>

0800351c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <MemManage_Handler>

0800351e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800351e:	e7fe      	b.n	800351e <BusFault_Handler>

08003520 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003520:	e7fe      	b.n	8003520 <UsageFault_Handler>

08003522 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003522:	4770      	bx	lr

08003524 <DebugMon_Handler>:
 8003524:	4770      	bx	lr

08003526 <PendSV_Handler>:
 8003526:	4770      	bx	lr

08003528 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003528:	f000 b8dc 	b.w	80036e4 <HAL_IncTick>

0800352c <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_UP_Pin);
 800352c:	2001      	movs	r0, #1
 800352e:	f000 be7d 	b.w	800422c <HAL_GPIO_EXTI_IRQHandler>

08003532 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_DOWN_Pin);
 8003532:	2002      	movs	r0, #2
 8003534:	f000 be7a 	b.w	800422c <HAL_GPIO_EXTI_IRQHandler>

08003538 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BACK_Pin);
 8003538:	2004      	movs	r0, #4
 800353a:	f000 be77 	b.w	800422c <HAL_GPIO_EXTI_IRQHandler>

0800353e <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SEL_Pin);
 800353e:	2008      	movs	r0, #8
 8003540:	f000 be74 	b.w	800422c <HAL_GPIO_EXTI_IRQHandler>

08003544 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003544:	4801      	ldr	r0, [pc, #4]	; (800354c <DMA2_Stream0_IRQHandler+0x8>)
 8003546:	f000 bccd 	b.w	8003ee4 <HAL_DMA_IRQHandler>
 800354a:	bf00      	nop
 800354c:	200002ac 	.word	0x200002ac

08003550 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003550:	2001      	movs	r0, #1
 8003552:	4770      	bx	lr

08003554 <_kill>:

int _kill(int pid, int sig)
{
 8003554:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003556:	f004 fd6f 	bl	8008038 <__errno>
 800355a:	2316      	movs	r3, #22
 800355c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800355e:	f04f 30ff 	mov.w	r0, #4294967295
 8003562:	bd08      	pop	{r3, pc}

08003564 <_exit>:

void _exit (int status)
{
 8003564:	b508      	push	{r3, lr}
  errno = EINVAL;
 8003566:	f004 fd67 	bl	8008038 <__errno>
 800356a:	2316      	movs	r3, #22
 800356c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800356e:	e7fe      	b.n	800356e <_exit+0xa>

08003570 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003570:	b570      	push	{r4, r5, r6, lr}
 8003572:	460d      	mov	r5, r1
 8003574:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003576:	460e      	mov	r6, r1
 8003578:	1b73      	subs	r3, r6, r5
 800357a:	429c      	cmp	r4, r3
 800357c:	dc01      	bgt.n	8003582 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800357e:	4620      	mov	r0, r4
 8003580:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8003582:	f3af 8000 	nop.w
 8003586:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358a:	e7f5      	b.n	8003578 <_read+0x8>

0800358c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	460d      	mov	r5, r1
 8003590:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003592:	460e      	mov	r6, r1
 8003594:	1b73      	subs	r3, r6, r5
 8003596:	429c      	cmp	r4, r3
 8003598:	dc01      	bgt.n	800359e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800359a:	4620      	mov	r0, r4
 800359c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800359e:	f816 0b01 	ldrb.w	r0, [r6], #1
 80035a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a6:	e7f5      	b.n	8003594 <_write+0x8>

080035a8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	4770      	bx	lr

080035ae <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80035ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b2:	604b      	str	r3, [r1, #4]
  return 0;
}
 80035b4:	2000      	movs	r0, #0
 80035b6:	4770      	bx	lr

080035b8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80035b8:	2001      	movs	r0, #1
 80035ba:	4770      	bx	lr

080035bc <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80035bc:	2000      	movs	r0, #0
 80035be:	4770      	bx	lr

080035c0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c0:	4a0b      	ldr	r2, [pc, #44]	; (80035f0 <_sbrk+0x30>)
 80035c2:	6811      	ldr	r1, [r2, #0]
{
 80035c4:	b510      	push	{r4, lr}
 80035c6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80035c8:	b909      	cbnz	r1, 80035ce <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80035ca:	490a      	ldr	r1, [pc, #40]	; (80035f4 <_sbrk+0x34>)
 80035cc:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ce:	6810      	ldr	r0, [r2, #0]
 80035d0:	4909      	ldr	r1, [pc, #36]	; (80035f8 <_sbrk+0x38>)
 80035d2:	4c0a      	ldr	r4, [pc, #40]	; (80035fc <_sbrk+0x3c>)
 80035d4:	4403      	add	r3, r0
 80035d6:	1b09      	subs	r1, r1, r4
 80035d8:	428b      	cmp	r3, r1
 80035da:	d906      	bls.n	80035ea <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80035dc:	f004 fd2c 	bl	8008038 <__errno>
 80035e0:	230c      	movs	r3, #12
 80035e2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80035e8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80035ea:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80035ec:	e7fc      	b.n	80035e8 <_sbrk+0x28>
 80035ee:	bf00      	nop
 80035f0:	20000418 	.word	0x20000418
 80035f4:	20000978 	.word	0x20000978
 80035f8:	20020000 	.word	0x20020000
 80035fc:	00000400 	.word	0x00000400

08003600 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003600:	4a03      	ldr	r2, [pc, #12]	; (8003610 <SystemInit+0x10>)
 8003602:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003606:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800360a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800360e:	4770      	bx	lr
 8003610:	e000ed00 	.word	0xe000ed00

08003614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800364c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003618:	480d      	ldr	r0, [pc, #52]	; (8003650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800361a:	490e      	ldr	r1, [pc, #56]	; (8003654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800361c:	4a0e      	ldr	r2, [pc, #56]	; (8003658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800361e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003620:	e002      	b.n	8003628 <LoopCopyDataInit>

08003622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003626:	3304      	adds	r3, #4

08003628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800362c:	d3f9      	bcc.n	8003622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003630:	4c0b      	ldr	r4, [pc, #44]	; (8003660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003634:	e001      	b.n	800363a <LoopFillZerobss>

08003636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003638:	3204      	adds	r2, #4

0800363a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800363c:	d3fb      	bcc.n	8003636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800363e:	f7ff ffdf 	bl	8003600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003642:	f004 fcff 	bl	8008044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003646:	f7fe fe6d 	bl	8002324 <main>
  bx  lr    
 800364a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800364c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003654:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003658:	0800c6e0 	.word	0x0800c6e0
  ldr r2, =_sbss
 800365c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003660:	20000978 	.word	0x20000978

08003664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003664:	e7fe      	b.n	8003664 <ADC_IRQHandler>
	...

08003668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003668:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800366a:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_InitTick+0x3c>)
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003672:	fbb3 f3f2 	udiv	r3, r3, r2
 8003676:	4a0c      	ldr	r2, [pc, #48]	; (80036a8 <HAL_InitTick+0x40>)
{
 8003678:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800367a:	6810      	ldr	r0, [r2, #0]
 800367c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003680:	f000 fb0e 	bl	8003ca0 <HAL_SYSTICK_Config>
 8003684:	4604      	mov	r4, r0
 8003686:	b958      	cbnz	r0, 80036a0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003688:	2d0f      	cmp	r5, #15
 800368a:	d809      	bhi.n	80036a0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800368c:	4602      	mov	r2, r0
 800368e:	4629      	mov	r1, r5
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	f000 fac4 	bl	8003c20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003698:	4b04      	ldr	r3, [pc, #16]	; (80036ac <HAL_InitTick+0x44>)
 800369a:	4620      	mov	r0, r4
 800369c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800369e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80036a0:	2001      	movs	r0, #1
 80036a2:	e7fc      	b.n	800369e <HAL_InitTick+0x36>
 80036a4:	2000000c 	.word	0x2000000c
 80036a8:	20000008 	.word	0x20000008
 80036ac:	20000010 	.word	0x20000010

080036b0 <HAL_Init>:
{
 80036b0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <HAL_Init+0x30>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036cc:	2003      	movs	r0, #3
 80036ce:	f000 fa95 	bl	8003bfc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80036d2:	200f      	movs	r0, #15
 80036d4:	f7ff ffc8 	bl	8003668 <HAL_InitTick>
  HAL_MspInit();
 80036d8:	f7ff fde6 	bl	80032a8 <HAL_MspInit>
}
 80036dc:	2000      	movs	r0, #0
 80036de:	bd08      	pop	{r3, pc}
 80036e0:	40023c00 	.word	0x40023c00

080036e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80036e4:	4a03      	ldr	r2, [pc, #12]	; (80036f4 <HAL_IncTick+0x10>)
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <HAL_IncTick+0x14>)
 80036e8:	6811      	ldr	r1, [r2, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	440b      	add	r3, r1
 80036ee:	6013      	str	r3, [r2, #0]
}
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	2000041c 	.word	0x2000041c
 80036f8:	2000000c 	.word	0x2000000c

080036fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80036fc:	4b01      	ldr	r3, [pc, #4]	; (8003704 <HAL_GetTick+0x8>)
 80036fe:	6818      	ldr	r0, [r3, #0]
}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000041c 	.word	0x2000041c

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800370c:	f7ff fff6 	bl	80036fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003710:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003712:	bf1c      	itt	ne
 8003714:	4b05      	ldrne	r3, [pc, #20]	; (800372c <HAL_Delay+0x24>)
 8003716:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003718:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800371a:	bf18      	it	ne
 800371c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800371e:	f7ff ffed 	bl	80036fc <HAL_GetTick>
 8003722:	1b43      	subs	r3, r0, r5
 8003724:	42a3      	cmp	r3, r4
 8003726:	d3fa      	bcc.n	800371e <HAL_Delay+0x16>
  {
  }
}
 8003728:	bd38      	pop	{r3, r4, r5, pc}
 800372a:	bf00      	nop
 800372c:	2000000c 	.word	0x2000000c

08003730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003730:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003732:	4604      	mov	r4, r0
 8003734:	2800      	cmp	r0, #0
 8003736:	f000 809b 	beq.w	8003870 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800373a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800373c:	b925      	cbnz	r5, 8003748 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800373e:	f7ff fdcf 	bl	80032e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003742:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003744:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003748:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800374a:	06db      	lsls	r3, r3, #27
 800374c:	f100 808e 	bmi.w	800386c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003750:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003752:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003756:	f023 0302 	bic.w	r3, r3, #2
 800375a:	f043 0302 	orr.w	r3, r3, #2
 800375e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003760:	4b44      	ldr	r3, [pc, #272]	; (8003874 <HAL_ADC_Init+0x144>)
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003768:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	6861      	ldr	r1, [r4, #4]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003772:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003774:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800377c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003784:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003786:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003788:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800378a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800378e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003796:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003798:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800379a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037a0:	689a      	ldr	r2, [r3, #8]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a6:	4934      	ldr	r1, [pc, #208]	; (8003878 <HAL_ADC_Init+0x148>)
 80037a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80037aa:	428a      	cmp	r2, r1
 80037ac:	d052      	beq.n	8003854 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037ae:	6899      	ldr	r1, [r3, #8]
 80037b0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80037b4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037b6:	6899      	ldr	r1, [r3, #8]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037bc:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ca:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	f022 0202 	bic.w	r2, r2, #2
 80037d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	7e21      	ldrb	r1, [r4, #24]
 80037d8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80037dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037de:	f894 2020 	ldrb.w	r2, [r4, #32]
 80037e2:	2a00      	cmp	r2, #0
 80037e4:	d03e      	beq.n	8003864 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037e6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	3901      	subs	r1, #1
 80037fc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003800:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003804:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800380c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380e:	3901      	subs	r1, #1
 8003810:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003814:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800381c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8003824:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8003828:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800382a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800382c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800382e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003834:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003836:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003838:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800383c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800383e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800384c:	2300      	movs	r3, #0
 800384e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003852:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800385a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003862:	e7b2      	b.n	80037ca <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800386a:	e7c9      	b.n	8003800 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800386c:	2001      	movs	r0, #1
 800386e:	e7ed      	b.n	800384c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8003870:	2001      	movs	r0, #1
 8003872:	e7ee      	b.n	8003852 <HAL_ADC_Init+0x122>
 8003874:	40012300 	.word	0x40012300
 8003878:	0f000001 	.word	0x0f000001

0800387c <HAL_ADC_Start_DMA>:
{
 800387c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800387e:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8003880:	2200      	movs	r2, #0
 8003882:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003884:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003888:	2a01      	cmp	r2, #1
{
 800388a:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 800388c:	f000 8092 	beq.w	80039b4 <HAL_ADC_Start_DMA+0x138>
 8003890:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003892:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 8003894:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003898:	68b2      	ldr	r2, [r6, #8]
 800389a:	07d4      	lsls	r4, r2, #31
 800389c:	d554      	bpl.n	8003948 <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800389e:	68b2      	ldr	r2, [r6, #8]
 80038a0:	05d0      	lsls	r0, r2, #23
 80038a2:	d464      	bmi.n	800396e <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80038a4:	68b4      	ldr	r4, [r6, #8]
 80038a6:	f014 0401 	ands.w	r4, r4, #1
 80038aa:	d079      	beq.n	80039a0 <HAL_ADC_Start_DMA+0x124>
    ADC_STATE_CLR_SET(hadc->State,
 80038ac:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80038ae:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80038b2:	f020 0001 	bic.w	r0, r0, #1
 80038b6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80038ba:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80038bc:	6872      	ldr	r2, [r6, #4]
 80038be:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038c0:	bf41      	itttt	mi
 80038c2:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 80038c4:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80038c8:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80038cc:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038ce:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038d0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038d2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038d6:	bf1c      	itt	ne
 80038d8:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 80038da:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80038de:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80038e0:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038e2:	4a35      	ldr	r2, [pc, #212]	; (80039b8 <HAL_ADC_Start_DMA+0x13c>)
    __HAL_UNLOCK(hadc);   
 80038e4:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038e8:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038ea:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_ADC_Start_DMA+0x140>)
 80038ec:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038ee:	4a34      	ldr	r2, [pc, #208]	; (80039c0 <HAL_ADC_Start_DMA+0x144>)
 80038f0:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80038f6:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038f8:	6872      	ldr	r2, [r6, #4]
 80038fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80038fe:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003900:	68b2      	ldr	r2, [r6, #8]
 8003902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003906:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003908:	460a      	mov	r2, r1
 800390a:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 800390e:	f000 fa6f 	bl	8003df0 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003912:	492c      	ldr	r1, [pc, #176]	; (80039c4 <HAL_ADC_Start_DMA+0x148>)
 8003914:	682b      	ldr	r3, [r5, #0]
 8003916:	684a      	ldr	r2, [r1, #4]
 8003918:	482b      	ldr	r0, [pc, #172]	; (80039c8 <HAL_ADC_Start_DMA+0x14c>)
 800391a:	f012 021f 	ands.w	r2, r2, #31
 800391e:	d132      	bne.n	8003986 <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003920:	4283      	cmp	r3, r0
 8003922:	d007      	beq.n	8003934 <HAL_ADC_Start_DMA+0xb8>
 8003924:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003928:	4283      	cmp	r3, r0
 800392a:	d125      	bne.n	8003978 <HAL_ADC_Start_DMA+0xfc>
 800392c:	6849      	ldr	r1, [r1, #4]
 800392e:	f011 0f1f 	tst.w	r1, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003932:	d132      	bne.n	800399a <HAL_ADC_Start_DMA+0x11e>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003934:	6898      	ldr	r0, [r3, #8]
 8003936:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800393a:	d103      	bne.n	8003944 <HAL_ADC_Start_DMA+0xc8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003942:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003944:	2200      	movs	r2, #0
 8003946:	e028      	b.n	800399a <HAL_ADC_Start_DMA+0x11e>
    __HAL_ADC_ENABLE(hadc);
 8003948:	68b2      	ldr	r2, [r6, #8]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003950:	4a1e      	ldr	r2, [pc, #120]	; (80039cc <HAL_ADC_Start_DMA+0x150>)
 8003952:	6810      	ldr	r0, [r2, #0]
 8003954:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <HAL_ADC_Start_DMA+0x154>)
 8003956:	fbb0 f0f2 	udiv	r0, r0, r2
 800395a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800395e:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8003960:	9a01      	ldr	r2, [sp, #4]
 8003962:	2a00      	cmp	r2, #0
 8003964:	d09b      	beq.n	800389e <HAL_ADC_Start_DMA+0x22>
      counter--;
 8003966:	9a01      	ldr	r2, [sp, #4]
 8003968:	3a01      	subs	r2, #1
 800396a:	9201      	str	r2, [sp, #4]
 800396c:	e7f8      	b.n	8003960 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800396e:	68b2      	ldr	r2, [r6, #8]
 8003970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003974:	60b2      	str	r2, [r6, #8]
 8003976:	e795      	b.n	80038a4 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003978:	4816      	ldr	r0, [pc, #88]	; (80039d4 <HAL_ADC_Start_DMA+0x158>)
 800397a:	4283      	cmp	r3, r0
 800397c:	d10d      	bne.n	800399a <HAL_ADC_Start_DMA+0x11e>
 800397e:	6849      	ldr	r1, [r1, #4]
 8003980:	f011 0f10 	tst.w	r1, #16
 8003984:	e7d5      	b.n	8003932 <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003986:	4283      	cmp	r3, r0
 8003988:	d1dc      	bne.n	8003944 <HAL_ADC_Start_DMA+0xc8>
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	f012 5240 	ands.w	r2, r2, #805306368	; 0x30000000
 8003990:	d10e      	bne.n	80039b0 <HAL_ADC_Start_DMA+0x134>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003992:	6899      	ldr	r1, [r3, #8]
 8003994:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003998:	6099      	str	r1, [r3, #8]
}
 800399a:	4610      	mov	r0, r2
 800399c:	b002      	add	sp, #8
 800399e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80039a2:	f043 0310 	orr.w	r3, r3, #16
 80039a6:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	646b      	str	r3, [r5, #68]	; 0x44
  return HAL_OK;
 80039b0:	4622      	mov	r2, r4
 80039b2:	e7f2      	b.n	800399a <HAL_ADC_Start_DMA+0x11e>
  __HAL_LOCK(hadc);
 80039b4:	2202      	movs	r2, #2
 80039b6:	e7f0      	b.n	800399a <HAL_ADC_Start_DMA+0x11e>
 80039b8:	08003a6f 	.word	0x08003a6f
 80039bc:	08003a4d 	.word	0x08003a4d
 80039c0:	08003a59 	.word	0x08003a59
 80039c4:	40012300 	.word	0x40012300
 80039c8:	40012000 	.word	0x40012000
 80039cc:	20000008 	.word	0x20000008
 80039d0:	000f4240 	.word	0x000f4240
 80039d4:	40012200 	.word	0x40012200

080039d8 <HAL_ADC_Stop_DMA>:
{
 80039d8:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80039da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80039de:	2b01      	cmp	r3, #1
{
 80039e0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80039e2:	d030      	beq.n	8003a46 <HAL_ADC_Stop_DMA+0x6e>
  __HAL_ADC_DISABLE(hadc);
 80039e4:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 80039e6:	2301      	movs	r3, #1
 80039e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 80039ec:	6893      	ldr	r3, [r2, #8]
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80039f4:	6893      	ldr	r3, [r2, #8]
 80039f6:	f013 0301 	ands.w	r3, r3, #1
 80039fa:	d122      	bne.n	8003a42 <HAL_ADC_Stop_DMA+0x6a>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80039fc:	6891      	ldr	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80039fe:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003a00:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003a04:	6091      	str	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003a06:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003a0a:	2a02      	cmp	r2, #2
 8003a0c:	d117      	bne.n	8003a3e <HAL_ADC_Stop_DMA+0x66>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003a0e:	f000 fa29 	bl	8003e64 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8003a12:	b118      	cbz	r0, 8003a1c <HAL_ADC_Stop_DMA+0x44>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a1a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003a1c:	6822      	ldr	r2, [r4, #0]
 8003a1e:	6853      	ldr	r3, [r2, #4]
 8003a20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a24:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8003a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003a36:	2300      	movs	r3, #0
 8003a38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003a3c:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a3e:	4618      	mov	r0, r3
 8003a40:	e7ec      	b.n	8003a1c <HAL_ADC_Stop_DMA+0x44>
 8003a42:	2000      	movs	r0, #0
 8003a44:	e7f7      	b.n	8003a36 <HAL_ADC_Stop_DMA+0x5e>
  __HAL_LOCK(hadc);
 8003a46:	2002      	movs	r0, #2
 8003a48:	e7f8      	b.n	8003a3c <HAL_ADC_Stop_DMA+0x64>

08003a4a <HAL_ADC_ConvHalfCpltCallback>:
 8003a4a:	4770      	bx	lr

08003a4c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a4c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a4e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003a50:	f7ff fffb 	bl	8003a4a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a54:	bd08      	pop	{r3, pc}

08003a56 <HAL_ADC_ErrorCallback>:
 8003a56:	4770      	bx	lr

08003a58 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a58:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003a5a:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a5c:	2340      	movs	r3, #64	; 0x40
 8003a5e:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003a62:	f043 0304 	orr.w	r3, r3, #4
 8003a66:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a68:	f7ff fff5 	bl	8003a56 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a6c:	bd08      	pop	{r3, pc}

08003a6e <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a72:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8003a76:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a7a:	d123      	bne.n	8003ac4 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	6891      	ldr	r1, [r2, #8]
 8003a86:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8003a8a:	d117      	bne.n	8003abc <ADC_DMAConvCplt+0x4e>
 8003a8c:	7e19      	ldrb	r1, [r3, #24]
 8003a8e:	b9a9      	cbnz	r1, 8003abc <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a90:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a92:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8003a96:	d002      	beq.n	8003a9e <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a98:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a9a:	0548      	lsls	r0, r1, #21
 8003a9c:	d40e      	bmi.n	8003abc <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a9e:	6851      	ldr	r1, [r2, #4]
 8003aa0:	f021 0120 	bic.w	r1, r1, #32
 8003aa4:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab0:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab2:	bf5e      	ittt	pl
 8003ab4:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8003ab6:	f042 0201 	orrpl.w	r2, r2, #1
 8003aba:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fb59 	bl	8001174 <HAL_ADC_ConvCpltCallback>
}
 8003ac2:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ac4:	06d2      	lsls	r2, r2, #27
 8003ac6:	d503      	bpl.n	8003ad0 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ffc4 	bl	8003a56 <HAL_ADC_ErrorCallback>
 8003ace:	e7f8      	b.n	8003ac2 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8003ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad8:	4718      	bx	r3
	...

08003adc <HAL_ADC_ConfigChannel>:
{
 8003adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8003ae2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d064      	beq.n	8003bb4 <HAL_ADC_ConfigChannel+0xd8>
 8003aea:	2301      	movs	r3, #1
 8003aec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003af0:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003af2:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003af4:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003af6:	2d09      	cmp	r5, #9
 8003af8:	b2ac      	uxth	r4, r5
 8003afa:	d931      	bls.n	8003b60 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003afc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003b00:	68df      	ldr	r7, [r3, #12]
 8003b02:	3a1e      	subs	r2, #30
 8003b04:	f04f 0c07 	mov.w	ip, #7
 8003b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8003b0c:	ea27 070c 	bic.w	r7, r7, ip
 8003b10:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b12:	68df      	ldr	r7, [r3, #12]
 8003b14:	fa06 f202 	lsl.w	r2, r6, r2
 8003b18:	433a      	orrs	r2, r7
 8003b1a:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003b1c:	6849      	ldr	r1, [r1, #4]
 8003b1e:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b20:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8003b24:	d82b      	bhi.n	8003b7e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003b26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b28:	3a05      	subs	r2, #5
 8003b2a:	261f      	movs	r6, #31
 8003b2c:	4096      	lsls	r6, r2
 8003b2e:	ea21 0106 	bic.w	r1, r1, r6
 8003b32:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003b34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b36:	fa04 f202 	lsl.w	r2, r4, r2
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b3e:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <HAL_ADC_ConfigChannel+0x110>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d107      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x78>
 8003b44:	2d12      	cmp	r5, #18
 8003b46:	d137      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b48:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003b4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b50:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8003b54:	2300      	movs	r3, #0
 8003b56:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003b5a:	4618      	mov	r0, r3
}
 8003b5c:	b003      	add	sp, #12
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8003b66:	2707      	movs	r7, #7
 8003b68:	fa07 f70c 	lsl.w	r7, r7, ip
 8003b6c:	ea22 0207 	bic.w	r2, r2, r7
 8003b70:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b72:	691a      	ldr	r2, [r3, #16]
 8003b74:	fa06 f60c 	lsl.w	r6, r6, ip
 8003b78:	4316      	orrs	r6, r2
 8003b7a:	611e      	str	r6, [r3, #16]
 8003b7c:	e7ce      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8003b7e:	290c      	cmp	r1, #12
 8003b80:	f04f 011f 	mov.w	r1, #31
 8003b84:	d80b      	bhi.n	8003b9e <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b86:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8003b88:	3a23      	subs	r2, #35	; 0x23
 8003b8a:	4091      	lsls	r1, r2
 8003b8c:	ea26 0101 	bic.w	r1, r6, r1
 8003b90:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b94:	fa04 f202 	lsl.w	r2, r4, r2
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b9c:	e7cf      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b9e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8003ba0:	3a41      	subs	r2, #65	; 0x41
 8003ba2:	4091      	lsls	r1, r2
 8003ba4:	ea26 0101 	bic.w	r1, r6, r1
 8003ba8:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003baa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bac:	4094      	lsls	r4, r2
 8003bae:	430c      	orrs	r4, r1
 8003bb0:	62dc      	str	r4, [r3, #44]	; 0x2c
 8003bb2:	e7c4      	b.n	8003b3e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8003bb4:	2002      	movs	r0, #2
 8003bb6:	e7d1      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bb8:	f1a5 0310 	sub.w	r3, r5, #16
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d8c9      	bhi.n	8003b54 <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bc0:	4a0b      	ldr	r2, [pc, #44]	; (8003bf0 <HAL_ADC_ConfigChannel+0x114>)
 8003bc2:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bc4:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bca:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bcc:	d1c2      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_ADC_ConfigChannel+0x118>)
 8003bd0:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <HAL_ADC_ConfigChannel+0x11c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bd8:	220a      	movs	r2, #10
 8003bda:	4353      	muls	r3, r2
        counter--;
 8003bdc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8003bde:	9b01      	ldr	r3, [sp, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0b7      	beq.n	8003b54 <HAL_ADC_ConfigChannel+0x78>
        counter--;
 8003be4:	9b01      	ldr	r3, [sp, #4]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	e7f8      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x100>
 8003bea:	bf00      	nop
 8003bec:	40012000 	.word	0x40012000
 8003bf0:	40012300 	.word	0x40012300
 8003bf4:	20000008 	.word	0x20000008
 8003bf8:	000f4240 	.word	0x000f4240

08003bfc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bfc:	4907      	ldr	r1, [pc, #28]	; (8003c1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003bfe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c04:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c06:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c0c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003c18:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c20:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c22:	b530      	push	{r4, r5, lr}
 8003c24:	68dc      	ldr	r4, [r3, #12]
 8003c26:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c2a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c2e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	bf28      	it	cs
 8003c34:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c36:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c38:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3c:	bf8c      	ite	hi
 8003c3e:	3c03      	subhi	r4, #3
 8003c40:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c42:	fa05 f303 	lsl.w	r3, r5, r3
 8003c46:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c4a:	40a5      	lsls	r5, r4
 8003c4c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8003c52:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c54:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	bfac      	ite	ge
 8003c5a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c5e:	4a08      	ldrlt	r2, [pc, #32]	; (8003c80 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c60:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c64:	bfb8      	it	lt
 8003c66:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	bfaa      	itet	ge
 8003c6e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c72:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c74:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003c78:	bd30      	pop	{r4, r5, pc}
 8003c7a:	bf00      	nop
 8003c7c:	e000ed00 	.word	0xe000ed00
 8003c80:	e000ed14 	.word	0xe000ed14

08003c84 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003c84:	2800      	cmp	r0, #0
 8003c86:	db07      	blt.n	8003c98 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c88:	0941      	lsrs	r1, r0, #5
 8003c8a:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <HAL_NVIC_EnableIRQ+0x18>)
 8003c8c:	f000 001f 	and.w	r0, r0, #31
 8003c90:	2301      	movs	r3, #1
 8003c92:	4083      	lsls	r3, r0
 8003c94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	e000e100 	.word	0xe000e100

08003ca0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ca0:	3801      	subs	r0, #1
 8003ca2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003ca6:	d20b      	bcs.n	8003cc0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cac:	4a05      	ldr	r2, [pc, #20]	; (8003cc4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cae:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb0:	21f0      	movs	r1, #240	; 0xf0
 8003cb2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cb6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cb8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cba:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cbc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cbe:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003cc0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cc8:	6803      	ldr	r3, [r0, #0]
{
 8003cca:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cd0:	4c07      	ldr	r4, [pc, #28]	; (8003cf0 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8003cda:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cdc:	bf88      	it	hi
 8003cde:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ce0:	2118      	movs	r1, #24
 8003ce2:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ce6:	5c61      	ldrb	r1, [r4, r1]
 8003ce8:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cea:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	bd10      	pop	{r4, pc}
 8003cf0:	0800c064 	.word	0x0800c064

08003cf4 <HAL_DMA_Init>:
{
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff fd00 	bl	80036fc <HAL_GetTick>
 8003cfc:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003cfe:	2c00      	cmp	r4, #0
 8003d00:	d071      	beq.n	8003de6 <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d02:	2302      	movs	r3, #2
 8003d04:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003d08:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8003d10:	6813      	ldr	r3, [r2, #0]
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	6813      	ldr	r3, [r2, #0]
 8003d1c:	07d8      	lsls	r0, r3, #31
 8003d1e:	d42e      	bmi.n	8003d7e <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8003d20:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d22:	4832      	ldr	r0, [pc, #200]	; (8003dec <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d24:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d26:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d28:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8003d2c:	432b      	orrs	r3, r5
 8003d2e:	68e5      	ldr	r5, [r4, #12]
 8003d30:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d32:	6925      	ldr	r5, [r4, #16]
 8003d34:	432b      	orrs	r3, r5
 8003d36:	6965      	ldr	r5, [r4, #20]
 8003d38:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3a:	69e5      	ldr	r5, [r4, #28]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d40:	6a25      	ldr	r5, [r4, #32]
 8003d42:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d44:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d46:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003d48:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d4a:	bf02      	ittt	eq
 8003d4c:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8003d50:	4335      	orreq	r5, r6
 8003d52:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8003d54:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 8003d56:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d58:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d5a:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003d5e:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d62:	d132      	bne.n	8003dca <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 8003d64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d66:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003d68:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d6a:	b375      	cbz	r5, 8003dca <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d6c:	b991      	cbnz	r1, 8003d94 <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8003d6e:	2801      	cmp	r0, #1
 8003d70:	d020      	beq.n	8003db4 <HAL_DMA_Init+0xc0>
 8003d72:	f030 0102 	bics.w	r1, r0, #2
 8003d76:	d128      	bne.n	8003dca <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d78:	01e9      	lsls	r1, r5, #7
 8003d7a:	d526      	bpl.n	8003dca <HAL_DMA_Init+0xd6>
 8003d7c:	e01d      	b.n	8003dba <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d7e:	f7ff fcbd 	bl	80036fc <HAL_GetTick>
 8003d82:	1b40      	subs	r0, r0, r5
 8003d84:	2805      	cmp	r0, #5
 8003d86:	d9c7      	bls.n	8003d18 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d88:	2320      	movs	r3, #32
 8003d8a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d8c:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d94:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003d98:	d113      	bne.n	8003dc2 <HAL_DMA_Init+0xce>
    switch (tmp)
 8003d9a:	2803      	cmp	r0, #3
 8003d9c:	d815      	bhi.n	8003dca <HAL_DMA_Init+0xd6>
 8003d9e:	a101      	add	r1, pc, #4	; (adr r1, 8003da4 <HAL_DMA_Init+0xb0>)
 8003da0:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 8003da4:	08003dbb 	.word	0x08003dbb
 8003da8:	08003d79 	.word	0x08003d79
 8003dac:	08003dbb 	.word	0x08003dbb
 8003db0:	08003db5 	.word	0x08003db5
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db4:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003db8:	d107      	bne.n	8003dca <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dba:	2340      	movs	r3, #64	; 0x40
 8003dbc:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	e7e5      	b.n	8003d8e <HAL_DMA_Init+0x9a>
    switch (tmp)
 8003dc2:	2802      	cmp	r0, #2
 8003dc4:	d9f9      	bls.n	8003dba <HAL_DMA_Init+0xc6>
 8003dc6:	2803      	cmp	r0, #3
 8003dc8:	d0d6      	beq.n	8003d78 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 8003dca:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7ff ff7b 	bl	8003cc8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003dd4:	233f      	movs	r3, #63	; 0x3f
 8003dd6:	4093      	lsls	r3, r2
 8003dd8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dda:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003ddc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dde:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003de0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003de4:	e7d5      	b.n	8003d92 <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 8003de6:	2001      	movs	r0, #1
 8003de8:	e7d3      	b.n	8003d92 <HAL_DMA_Init+0x9e>
 8003dea:	bf00      	nop
 8003dec:	f010803f 	.word	0xf010803f

08003df0 <HAL_DMA_Start_IT>:
{
 8003df0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8003df2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003df8:	2c01      	cmp	r4, #1
 8003dfa:	d031      	beq.n	8003e60 <HAL_DMA_Start_IT+0x70>
 8003dfc:	2401      	movs	r4, #1
 8003dfe:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e02:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003e06:	2c01      	cmp	r4, #1
 8003e08:	f04f 0500 	mov.w	r5, #0
 8003e0c:	f04f 0402 	mov.w	r4, #2
 8003e10:	d124      	bne.n	8003e5c <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e12:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e16:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e18:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e1a:	6825      	ldr	r5, [r4, #0]
 8003e1c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003e20:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003e22:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e24:	6883      	ldr	r3, [r0, #8]
 8003e26:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8003e28:	bf0e      	itee	eq
 8003e2a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8003e2c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e2e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e30:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8003e32:	bf08      	it	eq
 8003e34:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e36:	233f      	movs	r3, #63	; 0x3f
 8003e38:	4093      	lsls	r3, r2
 8003e3a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	f043 0316 	orr.w	r3, r3, #22
 8003e42:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003e44:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e46:	b11b      	cbz	r3, 8003e50 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	f043 0308 	orr.w	r3, r3, #8
 8003e4e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e58:	2000      	movs	r0, #0
}
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8003e5c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8003e60:	2002      	movs	r0, #2
 8003e62:	e7fa      	b.n	8003e5a <HAL_DMA_Start_IT+0x6a>

08003e64 <HAL_DMA_Abort>:
{
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e68:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8003e6a:	f7ff fc47 	bl	80036fc <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e6e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003e72:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8003e74:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e76:	d006      	beq.n	8003e86 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003e7c:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	f022 0216 	bic.w	r2, r2, #22
 8003e8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e96:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e9a:	b90a      	cbnz	r2, 8003ea0 <HAL_DMA_Abort+0x3c>
 8003e9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003e9e:	b11a      	cbz	r2, 8003ea8 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	f022 0208 	bic.w	r2, r2, #8
 8003ea6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f013 0301 	ands.w	r3, r3, #1
 8003eb8:	d108      	bne.n	8003ecc <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eba:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003ebc:	223f      	movs	r2, #63	; 0x3f
 8003ebe:	408a      	lsls	r2, r1
 8003ec0:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 8003ec8:	4618      	mov	r0, r3
 8003eca:	e7d8      	b.n	8003e7e <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ecc:	f7ff fc16 	bl	80036fc <HAL_GetTick>
 8003ed0:	1b40      	subs	r0, r0, r5
 8003ed2:	2805      	cmp	r0, #5
 8003ed4:	d9ec      	bls.n	8003eb0 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ed6:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ed8:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eda:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003edc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 8003ee0:	e7cd      	b.n	8003e7e <HAL_DMA_Abort+0x1a>
	...

08003ee4 <HAL_DMA_IRQHandler>:
{
 8003ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eea:	4b5c      	ldr	r3, [pc, #368]	; (800405c <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eec:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8003eee:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8003ef2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef4:	2208      	movs	r2, #8
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	4232      	tst	r2, r6
{
 8003efa:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003efc:	d00c      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003efe:	6801      	ldr	r1, [r0, #0]
 8003f00:	6808      	ldr	r0, [r1, #0]
 8003f02:	0740      	lsls	r0, r0, #29
 8003f04:	d508      	bpl.n	8003f18 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f06:	6808      	ldr	r0, [r1, #0]
 8003f08:	f020 0004 	bic.w	r0, r0, #4
 8003f0c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f0e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f10:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f18:	2201      	movs	r2, #1
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	4232      	tst	r2, r6
 8003f1e:	d008      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f20:	6821      	ldr	r1, [r4, #0]
 8003f22:	6949      	ldr	r1, [r1, #20]
 8003f24:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f26:	bf41      	itttt	mi
 8003f28:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f2a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8003f2c:	f042 0202 	orrmi.w	r2, r2, #2
 8003f30:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f32:	2204      	movs	r2, #4
 8003f34:	409a      	lsls	r2, r3
 8003f36:	4232      	tst	r2, r6
 8003f38:	d008      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f3a:	6821      	ldr	r1, [r4, #0]
 8003f3c:	6809      	ldr	r1, [r1, #0]
 8003f3e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f40:	bf41      	itttt	mi
 8003f42:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f44:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8003f46:	f042 0204 	orrmi.w	r2, r2, #4
 8003f4a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f4c:	2210      	movs	r2, #16
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	4232      	tst	r2, r6
 8003f52:	d010      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	6819      	ldr	r1, [r3, #0]
 8003f58:	0709      	lsls	r1, r1, #28
 8003f5a:	d50c      	bpl.n	8003f76 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f5c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	0350      	lsls	r0, r2, #13
 8003f62:	d537      	bpl.n	8003fd4 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	0319      	lsls	r1, r3, #12
 8003f68:	d401      	bmi.n	8003f6e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8003f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f6c:	e000      	b.n	8003f70 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8003f70:	b10b      	cbz	r3, 8003f76 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8003f72:	4620      	mov	r0, r4
 8003f74:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f76:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003f78:	2220      	movs	r2, #32
 8003f7a:	408a      	lsls	r2, r1
 8003f7c:	4232      	tst	r2, r6
 8003f7e:	d03a      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	06c6      	lsls	r6, r0, #27
 8003f86:	d536      	bpl.n	8003ff6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f88:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f8a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003f8e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f90:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f92:	d127      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f94:	f022 0216 	bic.w	r2, r2, #22
 8003f98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fa0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fa2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003fa4:	b90a      	cbnz	r2, 8003faa <HAL_DMA_IRQHandler+0xc6>
 8003fa6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003fa8:	b11a      	cbz	r2, 8003fb2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	f022 0208 	bic.w	r2, r2, #8
 8003fb0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fb2:	233f      	movs	r3, #63	; 0x3f
 8003fb4:	408b      	lsls	r3, r1
 8003fb6:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8003fc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d045      	beq.n	8004056 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8003fca:	4620      	mov	r0, r4
}
 8003fcc:	b003      	add	sp, #12
 8003fce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003fd2:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fd8:	bf5e      	ittt	pl
 8003fda:	681a      	ldrpl	r2, [r3, #0]
 8003fdc:	f022 0208 	bicpl.w	r2, r2, #8
 8003fe0:	601a      	strpl	r2, [r3, #0]
 8003fe2:	e7c2      	b.n	8003f6a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fe4:	0350      	lsls	r0, r2, #13
 8003fe6:	d527      	bpl.n	8004038 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	0319      	lsls	r1, r3, #12
 8003fec:	d431      	bmi.n	8004052 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8003fee:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8003ff0:	b10b      	cbz	r3, 8003ff6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ff6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ff8:	b36b      	cbz	r3, 8004056 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ffa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ffc:	07da      	lsls	r2, r3, #31
 8003ffe:	d519      	bpl.n	8004034 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8004000:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004002:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004006:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 800400a:	2305      	movs	r3, #5
 800400c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004010:	6813      	ldr	r3, [r2, #0]
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8004018:	9b01      	ldr	r3, [sp, #4]
 800401a:	3301      	adds	r3, #1
 800401c:	42bb      	cmp	r3, r7
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	d802      	bhi.n	8004028 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	07db      	lsls	r3, r3, #31
 8004026:	d4f7      	bmi.n	8004018 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8004028:	2301      	movs	r3, #1
 800402a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800402e:	2300      	movs	r3, #0
 8004030:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8004034:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004036:	e7c6      	b.n	8003fc6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800403e:	d108      	bne.n	8004052 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	f021 0110 	bic.w	r1, r1, #16
 8004046:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004048:	2301      	movs	r3, #1
 800404a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800404e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8004052:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004054:	e7cc      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x10c>
}
 8004056:	b003      	add	sp, #12
 8004058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800405a:	bf00      	nop
 800405c:	20000008 	.word	0x20000008

08004060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004060:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004064:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8004210 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004068:	4a67      	ldr	r2, [pc, #412]	; (8004208 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800406a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800406c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800406e:	2401      	movs	r4, #1
 8004070:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004072:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8004076:	43ac      	bics	r4, r5
 8004078:	f040 80b1 	bne.w	80041de <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800407c:	684d      	ldr	r5, [r1, #4]
 800407e:	f005 0403 	and.w	r4, r5, #3
 8004082:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004086:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004088:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800408a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800408e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004090:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004094:	d834      	bhi.n	8004100 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8004096:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004098:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 800409c:	68cf      	ldr	r7, [r1, #12]
 800409e:	fa07 f708 	lsl.w	r7, r7, r8
 80040a2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80040a6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80040a8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040aa:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040ae:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80040b2:	409f      	lsls	r7, r3
 80040b4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80040b8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80040ba:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040bc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040c0:	688f      	ldr	r7, [r1, #8]
 80040c2:	fa07 f708 	lsl.w	r7, r7, r8
 80040c6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ca:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80040cc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ce:	d119      	bne.n	8004104 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80040d0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80040d4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040d8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80040dc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80040e4:	f04f 0e0f 	mov.w	lr, #15
 80040e8:	fa0e fe0b 	lsl.w	lr, lr, fp
 80040ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040f0:	690f      	ldr	r7, [r1, #16]
 80040f2:	fa07 f70b 	lsl.w	r7, r7, fp
 80040f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80040fa:	f8ca 7020 	str.w	r7, [sl, #32]
 80040fe:	e001      	b.n	8004104 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004100:	2c03      	cmp	r4, #3
 8004102:	d1da      	bne.n	80040ba <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8004104:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004106:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800410a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800410c:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800410e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004112:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004114:	d063      	beq.n	80041de <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	f04f 0a00 	mov.w	sl, #0
 800411a:	f8cd a004 	str.w	sl, [sp, #4]
 800411e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004122:	4c3a      	ldr	r4, [pc, #232]	; (800420c <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004124:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8004128:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 800412c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8004130:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8004134:	9601      	str	r6, [sp, #4]
 8004136:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004138:	f023 0603 	bic.w	r6, r3, #3
 800413c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004140:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004144:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004148:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800414c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8004150:	270f      	movs	r7, #15
 8004152:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004156:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004158:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800415c:	d046      	beq.n	80041ec <HAL_GPIO_Init+0x18c>
 800415e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004162:	42a0      	cmp	r0, r4
 8004164:	d044      	beq.n	80041f0 <HAL_GPIO_Init+0x190>
 8004166:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800416a:	42a0      	cmp	r0, r4
 800416c:	d042      	beq.n	80041f4 <HAL_GPIO_Init+0x194>
 800416e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004172:	42a0      	cmp	r0, r4
 8004174:	d040      	beq.n	80041f8 <HAL_GPIO_Init+0x198>
 8004176:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800417a:	42a0      	cmp	r0, r4
 800417c:	d03e      	beq.n	80041fc <HAL_GPIO_Init+0x19c>
 800417e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004182:	42a0      	cmp	r0, r4
 8004184:	d03c      	beq.n	8004200 <HAL_GPIO_Init+0x1a0>
 8004186:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800418a:	42a0      	cmp	r0, r4
 800418c:	d03a      	beq.n	8004204 <HAL_GPIO_Init+0x1a4>
 800418e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004192:	42a0      	cmp	r0, r4
 8004194:	bf0c      	ite	eq
 8004196:	2407      	moveq	r4, #7
 8004198:	2408      	movne	r4, #8
 800419a:	fa04 f40e 	lsl.w	r4, r4, lr
 800419e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80041a2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80041a4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041a8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80041aa:	bf54      	ite	pl
 80041ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80041ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80041b2:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80041b4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041b6:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80041b8:	bf54      	ite	pl
 80041ba:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80041bc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80041c0:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80041c2:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041c4:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80041c6:	bf54      	ite	pl
 80041c8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80041ca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80041ce:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d2:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80041d4:	bf54      	ite	pl
 80041d6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80041d8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80041dc:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041de:	3301      	adds	r3, #1
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	f47f af43 	bne.w	800406c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80041e6:	b003      	add	sp, #12
 80041e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ec:	4654      	mov	r4, sl
 80041ee:	e7d4      	b.n	800419a <HAL_GPIO_Init+0x13a>
 80041f0:	2401      	movs	r4, #1
 80041f2:	e7d2      	b.n	800419a <HAL_GPIO_Init+0x13a>
 80041f4:	2402      	movs	r4, #2
 80041f6:	e7d0      	b.n	800419a <HAL_GPIO_Init+0x13a>
 80041f8:	2403      	movs	r4, #3
 80041fa:	e7ce      	b.n	800419a <HAL_GPIO_Init+0x13a>
 80041fc:	2404      	movs	r4, #4
 80041fe:	e7cc      	b.n	800419a <HAL_GPIO_Init+0x13a>
 8004200:	2405      	movs	r4, #5
 8004202:	e7ca      	b.n	800419a <HAL_GPIO_Init+0x13a>
 8004204:	2406      	movs	r4, #6
 8004206:	e7c8      	b.n	800419a <HAL_GPIO_Init+0x13a>
 8004208:	40013c00 	.word	0x40013c00
 800420c:	40020000 	.word	0x40020000
 8004210:	40023800 	.word	0x40023800

08004214 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004214:	6903      	ldr	r3, [r0, #16]
 8004216:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004218:	bf14      	ite	ne
 800421a:	2001      	movne	r0, #1
 800421c:	2000      	moveq	r0, #0
 800421e:	4770      	bx	lr

08004220 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004220:	b10a      	cbz	r2, 8004226 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004222:	6181      	str	r1, [r0, #24]
  }
}
 8004224:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004226:	0409      	lsls	r1, r1, #16
 8004228:	e7fb      	b.n	8004222 <HAL_GPIO_WritePin+0x2>
	...

0800422c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800422e:	6951      	ldr	r1, [r2, #20]
 8004230:	4201      	tst	r1, r0
{
 8004232:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004234:	d002      	beq.n	800423c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004236:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004238:	f7fd f838 	bl	80012ac <HAL_GPIO_EXTI_Callback>
  }
}
 800423c:	bd08      	pop	{r3, pc}
 800423e:	bf00      	nop
 8004240:	40013c00 	.word	0x40013c00

08004244 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004244:	6801      	ldr	r1, [r0, #0]
 8004246:	694b      	ldr	r3, [r1, #20]
 8004248:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	d010      	beq.n	8004274 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004256:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004258:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800425a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800425c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004260:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004264:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004266:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8004270:	2001      	movs	r0, #1
 8004272:	4770      	bx	lr
  }
  return HAL_OK;
 8004274:	4618      	mov	r0, r3
}
 8004276:	4770      	bx	lr

08004278 <I2C_WaitOnFlagUntilTimeout>:
{
 8004278:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 800427c:	4606      	mov	r6, r0
 800427e:	460f      	mov	r7, r1
 8004280:	4691      	mov	r9, r2
 8004282:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004284:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004288:	6833      	ldr	r3, [r6, #0]
 800428a:	f1ba 0f01 	cmp.w	sl, #1
 800428e:	bf0c      	ite	eq
 8004290:	695c      	ldreq	r4, [r3, #20]
 8004292:	699c      	ldrne	r4, [r3, #24]
 8004294:	ea27 0404 	bic.w	r4, r7, r4
 8004298:	b2a4      	uxth	r4, r4
 800429a:	fab4 f484 	clz	r4, r4
 800429e:	0964      	lsrs	r4, r4, #5
 80042a0:	45a1      	cmp	r9, r4
 80042a2:	d001      	beq.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80042a4:	2000      	movs	r0, #0
 80042a6:	e017      	b.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 80042a8:	1c6a      	adds	r2, r5, #1
 80042aa:	d0ee      	beq.n	800428a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ac:	f7ff fa26 	bl	80036fc <HAL_GetTick>
 80042b0:	9b08      	ldr	r3, [sp, #32]
 80042b2:	1ac0      	subs	r0, r0, r3
 80042b4:	42a8      	cmp	r0, r5
 80042b6:	d801      	bhi.n	80042bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	d1e5      	bne.n	8004288 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042bc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80042be:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042c0:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042c2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042c6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ca:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80042cc:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042d0:	f042 0220 	orr.w	r2, r2, #32
 80042d4:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 80042d6:	2001      	movs	r0, #1
}
 80042d8:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80042dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e0:	4604      	mov	r4, r0
 80042e2:	460f      	mov	r7, r1
 80042e4:	4616      	mov	r6, r2
 80042e6:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042e8:	6825      	ldr	r5, [r4, #0]
 80042ea:	6968      	ldr	r0, [r5, #20]
 80042ec:	ea27 0000 	bic.w	r0, r7, r0
 80042f0:	b280      	uxth	r0, r0
 80042f2:	b1b8      	cbz	r0, 8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f4:	696b      	ldr	r3, [r5, #20]
 80042f6:	055a      	lsls	r2, r3, #21
 80042f8:	d516      	bpl.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004300:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004302:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8004306:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004308:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800430a:	2300      	movs	r3, #0
 800430c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800430e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004312:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004316:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004318:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800431c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800431e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004322:	2001      	movs	r0, #1
}
 8004324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004328:	1c73      	adds	r3, r6, #1
 800432a:	d0de      	beq.n	80042ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800432c:	f7ff f9e6 	bl	80036fc <HAL_GetTick>
 8004330:	eba0 0008 	sub.w	r0, r0, r8
 8004334:	42b0      	cmp	r0, r6
 8004336:	d801      	bhi.n	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8004338:	2e00      	cmp	r6, #0
 800433a:	d1d5      	bne.n	80042e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800433c:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800433e:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004340:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004342:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004346:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800434a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800434c:	f042 0220 	orr.w	r2, r2, #32
 8004350:	e7e4      	b.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08004352 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004352:	b570      	push	{r4, r5, r6, lr}
 8004354:	4604      	mov	r4, r0
 8004356:	460d      	mov	r5, r1
 8004358:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	d501      	bpl.n	8004366 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004362:	2000      	movs	r0, #0
}
 8004364:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004366:	4620      	mov	r0, r4
 8004368:	f7ff ff6c 	bl	8004244 <I2C_IsAcknowledgeFailed>
 800436c:	b9a8      	cbnz	r0, 800439a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800436e:	1c6a      	adds	r2, r5, #1
 8004370:	d0f3      	beq.n	800435a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004372:	f7ff f9c3 	bl	80036fc <HAL_GetTick>
 8004376:	1b80      	subs	r0, r0, r6
 8004378:	42a8      	cmp	r0, r5
 800437a:	d801      	bhi.n	8004380 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800437c:	2d00      	cmp	r5, #0
 800437e:	d1ec      	bne.n	800435a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004380:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004382:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004384:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004386:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800438a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004390:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004394:	f042 0220 	orr.w	r2, r2, #32
 8004398:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800439a:	2001      	movs	r0, #1
 800439c:	e7e2      	b.n	8004364 <I2C_WaitOnTXEFlagUntilTimeout+0x12>

0800439e <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800439e:	b570      	push	{r4, r5, r6, lr}
 80043a0:	4604      	mov	r4, r0
 80043a2:	460d      	mov	r5, r1
 80043a4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	075b      	lsls	r3, r3, #29
 80043ac:	d501      	bpl.n	80043b2 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80043ae:	2000      	movs	r0, #0
}
 80043b0:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043b2:	4620      	mov	r0, r4
 80043b4:	f7ff ff46 	bl	8004244 <I2C_IsAcknowledgeFailed>
 80043b8:	b9a8      	cbnz	r0, 80043e6 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	1c6a      	adds	r2, r5, #1
 80043bc:	d0f3      	beq.n	80043a6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7ff f99d 	bl	80036fc <HAL_GetTick>
 80043c2:	1b80      	subs	r0, r0, r6
 80043c4:	42a8      	cmp	r0, r5
 80043c6:	d801      	bhi.n	80043cc <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80043c8:	2d00      	cmp	r5, #0
 80043ca:	d1ec      	bne.n	80043a6 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043cc:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80043ce:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80043dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	f042 0220 	orr.w	r2, r2, #32
 80043e4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80043e6:	2001      	movs	r0, #1
 80043e8:	e7e2      	b.n	80043b0 <I2C_WaitOnBTFFlagUntilTimeout+0x12>
	...

080043ec <HAL_I2C_Init>:
{
 80043ec:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80043ee:	4604      	mov	r4, r0
 80043f0:	b908      	cbnz	r0, 80043f6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80043f2:	2001      	movs	r0, #1
}
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80043fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80043fe:	b91b      	cbnz	r3, 8004408 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8004400:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8004404:	f7fe ffbe 	bl	8003384 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004408:	2324      	movs	r3, #36	; 0x24
 800440a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	f022 0201 	bic.w	r2, r2, #1
 8004416:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800441e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004426:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004428:	f000 fc02 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800442c:	4b3f      	ldr	r3, [pc, #252]	; (800452c <HAL_I2C_Init+0x140>)
 800442e:	6865      	ldr	r5, [r4, #4]
 8004430:	429d      	cmp	r5, r3
 8004432:	bf94      	ite	ls
 8004434:	4b3e      	ldrls	r3, [pc, #248]	; (8004530 <HAL_I2C_Init+0x144>)
 8004436:	4b3f      	ldrhi	r3, [pc, #252]	; (8004534 <HAL_I2C_Init+0x148>)
 8004438:	4298      	cmp	r0, r3
 800443a:	bf8c      	ite	hi
 800443c:	2300      	movhi	r3, #0
 800443e:	2301      	movls	r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1d6      	bne.n	80043f2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004444:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004446:	4e39      	ldr	r6, [pc, #228]	; (800452c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004448:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800444a:	4b3b      	ldr	r3, [pc, #236]	; (8004538 <HAL_I2C_Init+0x14c>)
 800444c:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004450:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8004454:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004456:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004458:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800445a:	bf88      	it	hi
 800445c:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8004460:	6a11      	ldr	r1, [r2, #32]
 8004462:	bf88      	it	hi
 8004464:	4373      	mulhi	r3, r6
 8004466:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800446a:	bf84      	itt	hi
 800446c:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8004470:	fbb3 f3f6 	udivhi	r3, r3, r6
 8004474:	3301      	adds	r3, #1
 8004476:	430b      	orrs	r3, r1
 8004478:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800447a:	69d1      	ldr	r1, [r2, #28]
 800447c:	1e43      	subs	r3, r0, #1
 800447e:	482b      	ldr	r0, [pc, #172]	; (800452c <HAL_I2C_Init+0x140>)
 8004480:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8004484:	4285      	cmp	r5, r0
 8004486:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800448a:	d832      	bhi.n	80044f2 <HAL_I2C_Init+0x106>
 800448c:	006d      	lsls	r5, r5, #1
 800448e:	f640 70fc 	movw	r0, #4092	; 0xffc
 8004492:	fbb3 f3f5 	udiv	r3, r3, r5
 8004496:	3301      	adds	r3, #1
 8004498:	4203      	tst	r3, r0
 800449a:	d042      	beq.n	8004522 <HAL_I2C_Init+0x136>
 800449c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a0:	4319      	orrs	r1, r3
 80044a2:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80044a8:	6811      	ldr	r1, [r2, #0]
 80044aa:	4303      	orrs	r3, r0
 80044ac:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044b4:	6891      	ldr	r1, [r2, #8]
 80044b6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80044ba:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80044be:	4303      	orrs	r3, r0
 80044c0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80044cc:	68d1      	ldr	r1, [r2, #12]
 80044ce:	4303      	orrs	r3, r0
 80044d0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80044d4:	430b      	orrs	r3, r1
 80044d6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80044d8:	6813      	ldr	r3, [r2, #0]
 80044da:	f043 0301 	orr.w	r3, r3, #1
 80044de:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044e4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ea:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80044f0:	e780      	b.n	80043f4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044f2:	68a0      	ldr	r0, [r4, #8]
 80044f4:	b950      	cbnz	r0, 800450c <HAL_I2C_Init+0x120>
 80044f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044fa:	fbb3 f3f5 	udiv	r3, r3, r5
 80044fe:	3301      	adds	r3, #1
 8004500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004504:	b17b      	cbz	r3, 8004526 <HAL_I2C_Init+0x13a>
 8004506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800450a:	e7c9      	b.n	80044a0 <HAL_I2C_Init+0xb4>
 800450c:	2019      	movs	r0, #25
 800450e:	4368      	muls	r0, r5
 8004510:	fbb3 f3f0 	udiv	r3, r3, r0
 8004514:	3301      	adds	r3, #1
 8004516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800451a:	b123      	cbz	r3, 8004526 <HAL_I2C_Init+0x13a>
 800451c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004520:	e7be      	b.n	80044a0 <HAL_I2C_Init+0xb4>
 8004522:	2304      	movs	r3, #4
 8004524:	e7bc      	b.n	80044a0 <HAL_I2C_Init+0xb4>
 8004526:	2301      	movs	r3, #1
 8004528:	e7ba      	b.n	80044a0 <HAL_I2C_Init+0xb4>
 800452a:	bf00      	nop
 800452c:	000186a0 	.word	0x000186a0
 8004530:	001e847f 	.word	0x001e847f
 8004534:	003d08ff 	.word	0x003d08ff
 8004538:	000f4240 	.word	0x000f4240

0800453c <HAL_I2C_Master_Transmit>:
{
 800453c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004540:	4604      	mov	r4, r0
 8004542:	b085      	sub	sp, #20
 8004544:	4698      	mov	r8, r3
 8004546:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004548:	460d      	mov	r5, r1
 800454a:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 800454c:	f7ff f8d6 	bl	80036fc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004550:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004554:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8004556:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004558:	d004      	beq.n	8004564 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 800455a:	2502      	movs	r5, #2
}
 800455c:	4628      	mov	r0, r5
 800455e:	b005      	add	sp, #20
 8004560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004564:	9000      	str	r0, [sp, #0]
 8004566:	495d      	ldr	r1, [pc, #372]	; (80046dc <HAL_I2C_Master_Transmit+0x1a0>)
 8004568:	2319      	movs	r3, #25
 800456a:	2201      	movs	r2, #1
 800456c:	4620      	mov	r0, r4
 800456e:	f7ff fe83 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 8004572:	2800      	cmp	r0, #0
 8004574:	d1f1      	bne.n	800455a <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8004576:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800457a:	2b01      	cmp	r3, #1
 800457c:	d0ed      	beq.n	800455a <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800457e:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8004580:	2301      	movs	r3, #1
 8004582:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004586:	680b      	ldr	r3, [r1, #0]
 8004588:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800458a:	bf5e      	ittt	pl
 800458c:	680b      	ldrpl	r3, [r1, #0]
 800458e:	f043 0301 	orrpl.w	r3, r3, #1
 8004592:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004594:	680b      	ldr	r3, [r1, #0]
 8004596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459a:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800459c:	2321      	movs	r3, #33	; 0x21
 800459e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045a2:	2310      	movs	r3, #16
 80045a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80045ac:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80045b2:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045b4:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_I2C_Master_Transmit+0x1a4>)
 80045b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80045ba:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d004      	beq.n	80045cc <HAL_I2C_Master_Transmit+0x90>
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d002      	beq.n	80045cc <HAL_I2C_Master_Transmit+0x90>
 80045c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ca:	d104      	bne.n	80045d6 <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045cc:	680b      	ldr	r3, [r1, #0]
 80045ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d2:	600b      	str	r3, [r1, #0]
 80045d4:	e002      	b.n	80045dc <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045d8:	2b12      	cmp	r3, #18
 80045da:	d0f7      	beq.n	80045cc <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045dc:	2200      	movs	r2, #0
 80045de:	9600      	str	r6, [sp, #0]
 80045e0:	463b      	mov	r3, r7
 80045e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7ff fe46 	bl	8004278 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	b138      	cbz	r0, 8004600 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045f0:	6813      	ldr	r3, [r2, #0]
 80045f2:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f4:	bf44      	itt	mi
 80045f6:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80045fa:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80045fc:	2501      	movs	r5, #1
 80045fe:	e7ad      	b.n	800455c <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004600:	6923      	ldr	r3, [r4, #16]
 8004602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004606:	d121      	bne.n	800464c <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004608:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 800460c:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800460e:	4935      	ldr	r1, [pc, #212]	; (80046e4 <HAL_I2C_Master_Transmit+0x1a8>)
 8004610:	4633      	mov	r3, r6
 8004612:	463a      	mov	r2, r7
 8004614:	4620      	mov	r0, r4
 8004616:	f7ff fe61 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800461a:	4605      	mov	r5, r0
 800461c:	2800      	cmp	r0, #0
 800461e:	d1ed      	bne.n	80045fc <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	9003      	str	r0, [sp, #12]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	9203      	str	r2, [sp, #12]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	9303      	str	r3, [sp, #12]
 800462c:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 800462e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004630:	b9f3      	cbnz	r3, 8004670 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004632:	6821      	ldr	r1, [r4, #0]
 8004634:	680a      	ldr	r2, [r1, #0]
 8004636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800463a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800463c:	2220      	movs	r2, #32
 800463e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004642:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004646:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800464a:	e787      	b.n	800455c <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800464c:	11eb      	asrs	r3, r5, #7
 800464e:	f003 0306 	and.w	r3, r3, #6
 8004652:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8004656:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004658:	4923      	ldr	r1, [pc, #140]	; (80046e8 <HAL_I2C_Master_Transmit+0x1ac>)
 800465a:	4633      	mov	r3, r6
 800465c:	463a      	mov	r2, r7
 800465e:	4620      	mov	r0, r4
 8004660:	f7ff fe3c 	bl	80042dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004664:	2800      	cmp	r0, #0
 8004666:	d1c9      	bne.n	80045fc <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	b2ed      	uxtb	r5, r5
 800466c:	611d      	str	r5, [r3, #16]
 800466e:	e7ce      	b.n	800460e <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004670:	4632      	mov	r2, r6
 8004672:	4639      	mov	r1, r7
 8004674:	4620      	mov	r0, r4
 8004676:	f7ff fe6c 	bl	8004352 <I2C_WaitOnTXEFlagUntilTimeout>
 800467a:	b140      	cbz	r0, 800468e <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d1bc      	bne.n	80045fc <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	6822      	ldr	r2, [r4, #0]
 8004684:	6813      	ldr	r3, [r2, #0]
 8004686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e7b6      	b.n	80045fc <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800468e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004698:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800469a:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800469c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800469e:	3a01      	subs	r2, #1
 80046a0:	b292      	uxth	r2, r2
 80046a2:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80046a4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046a6:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80046aa:	1e51      	subs	r1, r2, #1
 80046ac:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ae:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 80046b2:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046b4:	d00a      	beq.n	80046cc <HAL_I2C_Master_Transmit+0x190>
 80046b6:	b149      	cbz	r1, 80046cc <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046b8:	7859      	ldrb	r1, [r3, #1]
 80046ba:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80046bc:	3302      	adds	r3, #2
 80046be:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80046c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80046c6:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80046c8:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80046ca:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046cc:	4632      	mov	r2, r6
 80046ce:	4639      	mov	r1, r7
 80046d0:	4620      	mov	r0, r4
 80046d2:	f7ff fe64 	bl	800439e <I2C_WaitOnBTFFlagUntilTimeout>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d0a9      	beq.n	800462e <HAL_I2C_Master_Transmit+0xf2>
 80046da:	e7cf      	b.n	800467c <HAL_I2C_Master_Transmit+0x140>
 80046dc:	00100002 	.word	0x00100002
 80046e0:	ffff0000 	.word	0xffff0000
 80046e4:	00010002 	.word	0x00010002
 80046e8:	00010008 	.word	0x00010008

080046ec <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80046ec:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80046ee:	4604      	mov	r4, r0
 80046f0:	b310      	cbz	r0, 8004738 <HAL_IWDG_Init+0x4c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80046f2:	6803      	ldr	r3, [r0, #0]
 80046f4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80046f8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80046fa:	f245 5255 	movw	r2, #21845	; 0x5555
 80046fe:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004700:	6842      	ldr	r2, [r0, #4]
 8004702:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004704:	6882      	ldr	r2, [r0, #8]
 8004706:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004708:	f7fe fff8 	bl	80036fc <HAL_GetTick>
 800470c:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	68d3      	ldr	r3, [r2, #12]
 8004712:	f013 0303 	ands.w	r3, r3, #3
 8004716:	d104      	bne.n	8004722 <HAL_IWDG_Init+0x36>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004718:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 800471c:	6011      	str	r1, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800471e:	4618      	mov	r0, r3
}
 8004720:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004722:	f7fe ffeb 	bl	80036fc <HAL_GetTick>
 8004726:	1b40      	subs	r0, r0, r5
 8004728:	2831      	cmp	r0, #49	; 0x31
 800472a:	d9f0      	bls.n	800470e <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800472c:	6823      	ldr	r3, [r4, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	079b      	lsls	r3, r3, #30
 8004732:	d0ec      	beq.n	800470e <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 8004734:	2003      	movs	r0, #3
 8004736:	e7f3      	b.n	8004720 <HAL_IWDG_Init+0x34>
    return HAL_ERROR;
 8004738:	2001      	movs	r0, #1
 800473a:	e7f1      	b.n	8004720 <HAL_IWDG_Init+0x34>

0800473c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800473c:	6803      	ldr	r3, [r0, #0]
 800473e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004742:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8004744:	2000      	movs	r0, #0
 8004746:	4770      	bx	lr

08004748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004748:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800474c:	4604      	mov	r4, r0
 800474e:	b340      	cbz	r0, 80047a2 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004750:	6803      	ldr	r3, [r0, #0]
 8004752:	07dd      	lsls	r5, r3, #31
 8004754:	d410      	bmi.n	8004778 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	0798      	lsls	r0, r3, #30
 800475a:	d45b      	bmi.n	8004814 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	071a      	lsls	r2, r3, #28
 8004760:	f100 809d 	bmi.w	800489e <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	075b      	lsls	r3, r3, #29
 8004768:	f100 80bd 	bmi.w	80048e6 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800476c:	69a0      	ldr	r0, [r4, #24]
 800476e:	2800      	cmp	r0, #0
 8004770:	f040 8124 	bne.w	80049bc <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004774:	2000      	movs	r0, #0
 8004776:	e02c      	b.n	80047d2 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004778:	4b8d      	ldr	r3, [pc, #564]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	f002 020c 	and.w	r2, r2, #12
 8004780:	2a04      	cmp	r2, #4
 8004782:	d007      	beq.n	8004794 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800478a:	2a08      	cmp	r2, #8
 800478c:	d10b      	bne.n	80047a6 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	0259      	lsls	r1, r3, #9
 8004792:	d508      	bpl.n	80047a6 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	4b86      	ldr	r3, [pc, #536]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	039a      	lsls	r2, r3, #14
 800479a:	d5dc      	bpl.n	8004756 <HAL_RCC_OscConfig+0xe>
 800479c:	6863      	ldr	r3, [r4, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1d9      	bne.n	8004756 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80047a2:	2001      	movs	r0, #1
 80047a4:	e015      	b.n	80047d2 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a6:	6863      	ldr	r3, [r4, #4]
 80047a8:	4d81      	ldr	r5, [pc, #516]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
 80047aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ae:	d113      	bne.n	80047d8 <HAL_RCC_OscConfig+0x90>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80047b8:	f7fe ffa0 	bl	80036fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047bc:	4e7c      	ldr	r6, [pc, #496]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80047be:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c0:	6833      	ldr	r3, [r6, #0]
 80047c2:	039b      	lsls	r3, r3, #14
 80047c4:	d4c7      	bmi.n	8004756 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c6:	f7fe ff99 	bl	80036fc <HAL_GetTick>
 80047ca:	1b40      	subs	r0, r0, r5
 80047cc:	2864      	cmp	r0, #100	; 0x64
 80047ce:	d9f7      	bls.n	80047c0 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80047d0:	2003      	movs	r0, #3
}
 80047d2:	b002      	add	sp, #8
 80047d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047dc:	d104      	bne.n	80047e8 <HAL_RCC_OscConfig+0xa0>
 80047de:	682b      	ldr	r3, [r5, #0]
 80047e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	e7e3      	b.n	80047b0 <HAL_RCC_OscConfig+0x68>
 80047e8:	682a      	ldr	r2, [r5, #0]
 80047ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80047ee:	602a      	str	r2, [r5, #0]
 80047f0:	682a      	ldr	r2, [r5, #0]
 80047f2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047f6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1dd      	bne.n	80047b8 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 80047fc:	f7fe ff7e 	bl	80036fc <HAL_GetTick>
 8004800:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	682b      	ldr	r3, [r5, #0]
 8004804:	039f      	lsls	r7, r3, #14
 8004806:	d5a6      	bpl.n	8004756 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004808:	f7fe ff78 	bl	80036fc <HAL_GetTick>
 800480c:	1b80      	subs	r0, r0, r6
 800480e:	2864      	cmp	r0, #100	; 0x64
 8004810:	d9f7      	bls.n	8004802 <HAL_RCC_OscConfig+0xba>
 8004812:	e7dd      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004814:	4b66      	ldr	r3, [pc, #408]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	f012 0f0c 	tst.w	r2, #12
 800481c:	d007      	beq.n	800482e <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004824:	2a08      	cmp	r2, #8
 8004826:	d111      	bne.n	800484c <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	025e      	lsls	r6, r3, #9
 800482c:	d40e      	bmi.n	800484c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800482e:	4a60      	ldr	r2, [pc, #384]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
 8004830:	6813      	ldr	r3, [r2, #0]
 8004832:	079d      	lsls	r5, r3, #30
 8004834:	d502      	bpl.n	800483c <HAL_RCC_OscConfig+0xf4>
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d1b2      	bne.n	80047a2 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	6813      	ldr	r3, [r2, #0]
 800483e:	6921      	ldr	r1, [r4, #16]
 8004840:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004844:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004848:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484a:	e787      	b.n	800475c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800484c:	68e2      	ldr	r2, [r4, #12]
 800484e:	4b59      	ldr	r3, [pc, #356]	; (80049b4 <HAL_RCC_OscConfig+0x26c>)
 8004850:	b1b2      	cbz	r2, 8004880 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004856:	f7fe ff51 	bl	80036fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485a:	4d55      	ldr	r5, [pc, #340]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800485c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485e:	682b      	ldr	r3, [r5, #0]
 8004860:	0798      	lsls	r0, r3, #30
 8004862:	d507      	bpl.n	8004874 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	6922      	ldr	r2, [r4, #16]
 8004868:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800486c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	e773      	b.n	800475c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004874:	f7fe ff42 	bl	80036fc <HAL_GetTick>
 8004878:	1b80      	subs	r0, r0, r6
 800487a:	2802      	cmp	r0, #2
 800487c:	d9ef      	bls.n	800485e <HAL_RCC_OscConfig+0x116>
 800487e:	e7a7      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8004880:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004882:	f7fe ff3b 	bl	80036fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004886:	4e4a      	ldr	r6, [pc, #296]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004888:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800488a:	6833      	ldr	r3, [r6, #0]
 800488c:	0799      	lsls	r1, r3, #30
 800488e:	f57f af65 	bpl.w	800475c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004892:	f7fe ff33 	bl	80036fc <HAL_GetTick>
 8004896:	1b40      	subs	r0, r0, r5
 8004898:	2802      	cmp	r0, #2
 800489a:	d9f6      	bls.n	800488a <HAL_RCC_OscConfig+0x142>
 800489c:	e798      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800489e:	6962      	ldr	r2, [r4, #20]
 80048a0:	4b44      	ldr	r3, [pc, #272]	; (80049b4 <HAL_RCC_OscConfig+0x26c>)
 80048a2:	b182      	cbz	r2, 80048c6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80048a4:	2201      	movs	r2, #1
 80048a6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80048aa:	f7fe ff27 	bl	80036fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ae:	4e40      	ldr	r6, [pc, #256]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80048b0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80048b4:	079f      	lsls	r7, r3, #30
 80048b6:	f53f af55 	bmi.w	8004764 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ba:	f7fe ff1f 	bl	80036fc <HAL_GetTick>
 80048be:	1b40      	subs	r0, r0, r5
 80048c0:	2802      	cmp	r0, #2
 80048c2:	d9f6      	bls.n	80048b2 <HAL_RCC_OscConfig+0x16a>
 80048c4:	e784      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80048c6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80048ca:	f7fe ff17 	bl	80036fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ce:	4e38      	ldr	r6, [pc, #224]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80048d0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80048d4:	0798      	lsls	r0, r3, #30
 80048d6:	f57f af45 	bpl.w	8004764 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048da:	f7fe ff0f 	bl	80036fc <HAL_GetTick>
 80048de:	1b40      	subs	r0, r0, r5
 80048e0:	2802      	cmp	r0, #2
 80048e2:	d9f6      	bls.n	80048d2 <HAL_RCC_OscConfig+0x18a>
 80048e4:	e774      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048e6:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
 80048e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ea:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80048ee:	d128      	bne.n	8004942 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f0:	9201      	str	r2, [sp, #4]
 80048f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004900:	9301      	str	r3, [sp, #4]
 8004902:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004904:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004906:	4d2c      	ldr	r5, [pc, #176]	; (80049b8 <HAL_RCC_OscConfig+0x270>)
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	05d9      	lsls	r1, r3, #23
 800490c:	d51b      	bpl.n	8004946 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800490e:	68a3      	ldr	r3, [r4, #8]
 8004910:	4d27      	ldr	r5, [pc, #156]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
 8004912:	2b01      	cmp	r3, #1
 8004914:	d127      	bne.n	8004966 <HAL_RCC_OscConfig+0x21e>
 8004916:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800491e:	f7fe feed 	bl	80036fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004922:	4e23      	ldr	r6, [pc, #140]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8004924:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800492c:	079b      	lsls	r3, r3, #30
 800492e:	d539      	bpl.n	80049a4 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8004930:	2f00      	cmp	r7, #0
 8004932:	f43f af1b 	beq.w	800476c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_RCC_OscConfig+0x268>)
 8004938:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800493a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493e:	6413      	str	r3, [r2, #64]	; 0x40
 8004940:	e714      	b.n	800476c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2700      	movs	r7, #0
 8004944:	e7df      	b.n	8004906 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004946:	682b      	ldr	r3, [r5, #0]
 8004948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800494e:	f7fe fed5 	bl	80036fc <HAL_GetTick>
 8004952:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	05da      	lsls	r2, r3, #23
 8004958:	d4d9      	bmi.n	800490e <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fe fecf 	bl	80036fc <HAL_GetTick>
 800495e:	1b80      	subs	r0, r0, r6
 8004960:	2802      	cmp	r0, #2
 8004962:	d9f7      	bls.n	8004954 <HAL_RCC_OscConfig+0x20c>
 8004964:	e734      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004966:	2b05      	cmp	r3, #5
 8004968:	d104      	bne.n	8004974 <HAL_RCC_OscConfig+0x22c>
 800496a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800496c:	f043 0304 	orr.w	r3, r3, #4
 8004970:	672b      	str	r3, [r5, #112]	; 0x70
 8004972:	e7d0      	b.n	8004916 <HAL_RCC_OscConfig+0x1ce>
 8004974:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	672a      	str	r2, [r5, #112]	; 0x70
 800497c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800497e:	f022 0204 	bic.w	r2, r2, #4
 8004982:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ca      	bne.n	800491e <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8004988:	f7fe feb8 	bl	80036fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800498c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004990:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004994:	0798      	lsls	r0, r3, #30
 8004996:	d5cb      	bpl.n	8004930 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004998:	f7fe feb0 	bl	80036fc <HAL_GetTick>
 800499c:	1b80      	subs	r0, r0, r6
 800499e:	4540      	cmp	r0, r8
 80049a0:	d9f7      	bls.n	8004992 <HAL_RCC_OscConfig+0x24a>
 80049a2:	e715      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a4:	f7fe feaa 	bl	80036fc <HAL_GetTick>
 80049a8:	1b40      	subs	r0, r0, r5
 80049aa:	4540      	cmp	r0, r8
 80049ac:	d9bd      	bls.n	800492a <HAL_RCC_OscConfig+0x1e2>
 80049ae:	e70f      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
 80049b0:	40023800 	.word	0x40023800
 80049b4:	42470000 	.word	0x42470000
 80049b8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049bc:	4d36      	ldr	r5, [pc, #216]	; (8004a98 <HAL_RCC_OscConfig+0x350>)
 80049be:	68ab      	ldr	r3, [r5, #8]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d03d      	beq.n	8004a44 <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c8:	4b34      	ldr	r3, [pc, #208]	; (8004a9c <HAL_RCC_OscConfig+0x354>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80049ce:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d0:	d12b      	bne.n	8004a2a <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
 80049d2:	f7fe fe93 	bl	80036fc <HAL_GetTick>
 80049d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d8:	682b      	ldr	r3, [r5, #0]
 80049da:	0199      	lsls	r1, r3, #6
 80049dc:	d41f      	bmi.n	8004a1e <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049de:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049e6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80049ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80049ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80049f0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80049f2:	0852      	lsrs	r2, r2, #1
 80049f4:	3a01      	subs	r2, #1
 80049f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049fa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_RCC_OscConfig+0x354>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fe:	4d26      	ldr	r5, [pc, #152]	; (8004a98 <HAL_RCC_OscConfig+0x350>)
        __HAL_RCC_PLL_ENABLE();
 8004a00:	2201      	movs	r2, #1
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004a04:	f7fe fe7a 	bl	80036fc <HAL_GetTick>
 8004a08:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	019a      	lsls	r2, r3, #6
 8004a0e:	f53f aeb1 	bmi.w	8004774 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a12:	f7fe fe73 	bl	80036fc <HAL_GetTick>
 8004a16:	1b00      	subs	r0, r0, r4
 8004a18:	2802      	cmp	r0, #2
 8004a1a:	d9f6      	bls.n	8004a0a <HAL_RCC_OscConfig+0x2c2>
 8004a1c:	e6d8      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a1e:	f7fe fe6d 	bl	80036fc <HAL_GetTick>
 8004a22:	1b80      	subs	r0, r0, r6
 8004a24:	2802      	cmp	r0, #2
 8004a26:	d9d7      	bls.n	80049d8 <HAL_RCC_OscConfig+0x290>
 8004a28:	e6d2      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8004a2a:	f7fe fe67 	bl	80036fc <HAL_GetTick>
 8004a2e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a30:	682b      	ldr	r3, [r5, #0]
 8004a32:	019b      	lsls	r3, r3, #6
 8004a34:	f57f ae9e 	bpl.w	8004774 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fe fe60 	bl	80036fc <HAL_GetTick>
 8004a3c:	1b00      	subs	r0, r0, r4
 8004a3e:	2802      	cmp	r0, #2
 8004a40:	d9f6      	bls.n	8004a30 <HAL_RCC_OscConfig+0x2e8>
 8004a42:	e6c5      	b.n	80047d0 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a44:	2801      	cmp	r0, #1
 8004a46:	f43f aec4 	beq.w	80047d2 <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
 8004a4a:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a4c:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a4e:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a52:	4291      	cmp	r1, r2
 8004a54:	f47f aea5 	bne.w	80047a2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a58:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	428a      	cmp	r2, r1
 8004a60:	f47f ae9f 	bne.w	80047a2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a64:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a66:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004a70:	f47f ae97 	bne.w	80047a2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004a76:	0852      	lsrs	r2, r2, #1
 8004a78:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004a7c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a7e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004a82:	f47f ae8e 	bne.w	80047a2 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004a88:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a8c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004a90:	f43f ae70 	beq.w	8004774 <HAL_RCC_OscConfig+0x2c>
 8004a94:	e685      	b.n	80047a2 <HAL_RCC_OscConfig+0x5a>
 8004a96:	bf00      	nop
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	42470000 	.word	0x42470000

08004aa0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa0:	4913      	ldr	r1, [pc, #76]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004aa2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa4:	688b      	ldr	r3, [r1, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d01c      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x48>
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d11c      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ab6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004abc:	bf14      	ite	ne
 8004abe:	480d      	ldrne	r0, [pc, #52]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac0:	480d      	ldreq	r0, [pc, #52]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004ac6:	bf18      	it	ne
 8004ac8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ace:	fba1 0100 	umull	r0, r1, r1, r0
 8004ad2:	f7fc f8d9 	bl	8000c88 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <HAL_RCC_GetSysClockFreq+0x50>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004ade:	3301      	adds	r3, #1
 8004ae0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004ae2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004ae6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <HAL_RCC_GetSysClockFreq+0x54>)
 8004aea:	e7fc      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004aec:	4802      	ldr	r0, [pc, #8]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004aee:	e7fa      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x46>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	017d7840 	.word	0x017d7840
 8004af8:	00f42400 	.word	0x00f42400

08004afc <HAL_RCC_ClockConfig>:
{
 8004afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b00:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8004b02:	4604      	mov	r4, r0
 8004b04:	b910      	cbnz	r0, 8004b0c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
}
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b0c:	4b43      	ldr	r3, [pc, #268]	; (8004c1c <HAL_RCC_ClockConfig+0x120>)
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	f002 0207 	and.w	r2, r2, #7
 8004b14:	428a      	cmp	r2, r1
 8004b16:	d328      	bcc.n	8004b6a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b18:	6821      	ldr	r1, [r4, #0]
 8004b1a:	078f      	lsls	r7, r1, #30
 8004b1c:	d42d      	bmi.n	8004b7a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1e:	07c8      	lsls	r0, r1, #31
 8004b20:	d440      	bmi.n	8004ba4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b22:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <HAL_RCC_ClockConfig+0x120>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	f002 0207 	and.w	r2, r2, #7
 8004b2a:	42aa      	cmp	r2, r5
 8004b2c:	d865      	bhi.n	8004bfa <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2e:	6822      	ldr	r2, [r4, #0]
 8004b30:	0751      	lsls	r1, r2, #29
 8004b32:	d46b      	bmi.n	8004c0c <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b34:	0713      	lsls	r3, r2, #28
 8004b36:	d507      	bpl.n	8004b48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b38:	4a39      	ldr	r2, [pc, #228]	; (8004c20 <HAL_RCC_ClockConfig+0x124>)
 8004b3a:	6921      	ldr	r1, [r4, #16]
 8004b3c:	6893      	ldr	r3, [r2, #8]
 8004b3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b42:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004b46:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b48:	f7ff ffaa 	bl	8004aa0 <HAL_RCC_GetSysClockFreq>
 8004b4c:	4b34      	ldr	r3, [pc, #208]	; (8004c20 <HAL_RCC_ClockConfig+0x124>)
 8004b4e:	4a35      	ldr	r2, [pc, #212]	; (8004c24 <HAL_RCC_ClockConfig+0x128>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b56:	5cd3      	ldrb	r3, [r2, r3]
 8004b58:	40d8      	lsrs	r0, r3
 8004b5a:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <HAL_RCC_ClockConfig+0x12c>)
 8004b5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004b5e:	4b33      	ldr	r3, [pc, #204]	; (8004c2c <HAL_RCC_ClockConfig+0x130>)
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	f7fe fd81 	bl	8003668 <HAL_InitTick>
  return HAL_OK;
 8004b66:	2000      	movs	r0, #0
 8004b68:	e7ce      	b.n	8004b08 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	b2ca      	uxtb	r2, r1
 8004b6c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	428b      	cmp	r3, r1
 8004b76:	d1c6      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xa>
 8004b78:	e7ce      	b.n	8004b18 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b7a:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCC_ClockConfig+0x124>)
 8004b7c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b80:	bf1e      	ittt	ne
 8004b82:	689a      	ldrne	r2, [r3, #8]
 8004b84:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8004b88:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b8c:	bf42      	ittt	mi
 8004b8e:	689a      	ldrmi	r2, [r3, #8]
 8004b90:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8004b94:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	68a0      	ldr	r0, [r4, #8]
 8004b9a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004b9e:	4302      	orrs	r2, r0
 8004ba0:	609a      	str	r2, [r3, #8]
 8004ba2:	e7bc      	b.n	8004b1e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba4:	6862      	ldr	r2, [r4, #4]
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <HAL_RCC_ClockConfig+0x124>)
 8004ba8:	2a01      	cmp	r2, #1
 8004baa:	d11c      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	d0a8      	beq.n	8004b06 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bb4:	4e1a      	ldr	r6, [pc, #104]	; (8004c20 <HAL_RCC_ClockConfig+0x124>)
 8004bb6:	68b3      	ldr	r3, [r6, #8]
 8004bb8:	f023 0303 	bic.w	r3, r3, #3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004bc0:	f7fe fd9c 	bl	80036fc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004bc8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bca:	68b3      	ldr	r3, [r6, #8]
 8004bcc:	6862      	ldr	r2, [r4, #4]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004bd6:	d0a4      	beq.n	8004b22 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd8:	f7fe fd90 	bl	80036fc <HAL_GetTick>
 8004bdc:	1bc0      	subs	r0, r0, r7
 8004bde:	4540      	cmp	r0, r8
 8004be0:	d9f3      	bls.n	8004bca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8004be2:	2003      	movs	r0, #3
 8004be4:	e790      	b.n	8004b08 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004be6:	1e91      	subs	r1, r2, #2
 8004be8:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bea:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bec:	d802      	bhi.n	8004bf4 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004bf2:	e7de      	b.n	8004bb2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf4:	f013 0f02 	tst.w	r3, #2
 8004bf8:	e7db      	b.n	8004bb2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	b2ea      	uxtb	r2, r5
 8004bfc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	42ab      	cmp	r3, r5
 8004c06:	f47f af7e 	bne.w	8004b06 <HAL_RCC_ClockConfig+0xa>
 8004c0a:	e790      	b.n	8004b2e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0c:	4904      	ldr	r1, [pc, #16]	; (8004c20 <HAL_RCC_ClockConfig+0x124>)
 8004c0e:	68e0      	ldr	r0, [r4, #12]
 8004c10:	688b      	ldr	r3, [r1, #8]
 8004c12:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004c16:	4303      	orrs	r3, r0
 8004c18:	608b      	str	r3, [r1, #8]
 8004c1a:	e78b      	b.n	8004b34 <HAL_RCC_ClockConfig+0x38>
 8004c1c:	40023c00 	.word	0x40023c00
 8004c20:	40023800 	.word	0x40023800
 8004c24:	0800c04c 	.word	0x0800c04c
 8004c28:	20000008 	.word	0x20000008
 8004c2c:	20000010 	.word	0x20000010

08004c30 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c30:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004c3a:	5cd3      	ldrb	r3, [r2, r3]
 8004c3c:	4a03      	ldr	r2, [pc, #12]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004c3e:	6810      	ldr	r0, [r2, #0]
}
 8004c40:	40d8      	lsrs	r0, r3
 8004c42:	4770      	bx	lr
 8004c44:	40023800 	.word	0x40023800
 8004c48:	0800c05c 	.word	0x0800c05c
 8004c4c:	20000008 	.word	0x20000008

08004c50 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c50:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004c52:	4a05      	ldr	r2, [pc, #20]	; (8004c68 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004c5a:	5cd3      	ldrb	r3, [r2, r3]
 8004c5c:	4a03      	ldr	r2, [pc, #12]	; (8004c6c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004c5e:	6810      	ldr	r0, [r2, #0]
}
 8004c60:	40d8      	lsrs	r0, r3
 8004c62:	4770      	bx	lr
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800c05c 	.word	0x0800c05c
 8004c6c:	20000008 	.word	0x20000008

08004c70 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c70:	6803      	ldr	r3, [r0, #0]
 8004c72:	f013 0f05 	tst.w	r3, #5
{
 8004c76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c78:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c7a:	d105      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	f013 0302 	ands.w	r3, r3, #2
 8004c82:	d12a      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x6a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c84:	2000      	movs	r0, #0
 8004c86:	e026      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x66>
    __HAL_RCC_PLLI2S_DISABLE();
 8004c88:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c8a:	4e43      	ldr	r6, [pc, #268]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_DISABLE();
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8004c90:	f7fe fd34 	bl	80036fc <HAL_GetTick>
 8004c94:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c96:	6833      	ldr	r3, [r6, #0]
 8004c98:	011f      	lsls	r7, r3, #4
 8004c9a:	d416      	bmi.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c9c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8004ca0:	071b      	lsls	r3, r3, #28
 8004ca2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004ca6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004caa:	4b3a      	ldr	r3, [pc, #232]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cac:	4e3a      	ldr	r6, [pc, #232]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PLLI2S_ENABLE();
 8004cae:	2201      	movs	r2, #1
 8004cb0:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8004cb2:	f7fe fd23 	bl	80036fc <HAL_GetTick>
 8004cb6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cb8:	6833      	ldr	r3, [r6, #0]
 8004cba:	0118      	lsls	r0, r3, #4
 8004cbc:	d4de      	bmi.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cbe:	f7fe fd1d 	bl	80036fc <HAL_GetTick>
 8004cc2:	1b40      	subs	r0, r0, r5
 8004cc4:	2802      	cmp	r0, #2
 8004cc6:	d9f7      	bls.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004cc8:	e004      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cca:	f7fe fd17 	bl	80036fc <HAL_GetTick>
 8004cce:	1b40      	subs	r0, r0, r5
 8004cd0:	2802      	cmp	r0, #2
 8004cd2:	d9e0      	bls.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8004cd4:	2003      	movs	r0, #3
}
 8004cd6:	b003      	add	sp, #12
 8004cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    PWR->CR |= PWR_CR_DBP;
 8004ce0:	4d2e      	ldr	r5, [pc, #184]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004cfc:	f7fe fcfe 	bl	80036fc <HAL_GetTick>
 8004d00:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d02:	682b      	ldr	r3, [r5, #0]
 8004d04:	05d9      	lsls	r1, r3, #23
 8004d06:	d51b      	bpl.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d08:	4d23      	ldr	r5, [pc, #140]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d0a:	68e2      	ldr	r2, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d0e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004d12:	d11b      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d14:	68e3      	ldr	r3, [r4, #12]
 8004d16:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004d1a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004d1e:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8004d20:	d134      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004d22:	6891      	ldr	r1, [r2, #8]
 8004d24:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004d28:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004d2c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004d30:	4301      	orrs	r1, r0
 8004d32:	6091      	str	r1, [r2, #8]
 8004d34:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	e7a1      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d40:	f7fe fcdc 	bl	80036fc <HAL_GetTick>
 8004d44:	1b80      	subs	r0, r0, r6
 8004d46:	2802      	cmp	r0, #2
 8004d48:	d9db      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8004d4a:	e7c3      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d4c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d0df      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d56:	4a0f      	ldr	r2, [pc, #60]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8004d58:	2101      	movs	r1, #1
 8004d5a:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d62:	2100      	movs	r1, #0
 8004d64:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8004d68:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d6a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d6c:	07da      	lsls	r2, r3, #31
 8004d6e:	d5d1      	bpl.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tickstart = HAL_GetTick();
 8004d70:	f7fe fcc4 	bl	80036fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004d78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004d7c:	079b      	lsls	r3, r3, #30
 8004d7e:	d4c9      	bmi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xa4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7fe fcbc 	bl	80036fc <HAL_GetTick>
 8004d84:	1b80      	subs	r0, r0, r6
 8004d86:	42b8      	cmp	r0, r7
 8004d88:	d9f7      	bls.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8004d8a:	e7a3      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8c:	6891      	ldr	r1, [r2, #8]
 8004d8e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004d92:	e7ce      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8004d94:	42470000 	.word	0x42470000
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40007000 	.word	0x40007000

08004da0 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004da0:	6802      	ldr	r2, [r0, #0]
{
 8004da2:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004da4:	68d3      	ldr	r3, [r2, #12]
 8004da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004daa:	60d3      	str	r3, [r2, #12]
{
 8004dac:	4604      	mov	r4, r0

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dae:	f7fe fca5 	bl	80036fc <HAL_GetTick>
 8004db2:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004db4:	6823      	ldr	r3, [r4, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	069b      	lsls	r3, r3, #26
 8004dba:	d501      	bpl.n	8004dc0 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004dbc:	2000      	movs	r0, #0
}
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dc0:	f7fe fc9c 	bl	80036fc <HAL_GetTick>
 8004dc4:	1b40      	subs	r0, r0, r5
 8004dc6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004dca:	d9f3      	bls.n	8004db4 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8004dcc:	2003      	movs	r0, #3
 8004dce:	e7f6      	b.n	8004dbe <HAL_RTC_WaitForSynchro+0x1e>

08004dd0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004dd2:	6803      	ldr	r3, [r0, #0]
 8004dd4:	68dc      	ldr	r4, [r3, #12]
 8004dd6:	f014 0440 	ands.w	r4, r4, #64	; 0x40
{
 8004dda:	4605      	mov	r5, r0
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004ddc:	d117      	bne.n	8004e0e <RTC_EnterInitMode+0x3e>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004de6:	f7fe fc89 	bl	80036fc <HAL_GetTick>
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dea:	2704      	movs	r7, #4
    tickstart = HAL_GetTick();
 8004dec:	4606      	mov	r6, r0
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	065b      	lsls	r3, r3, #25
 8004df4:	d400      	bmi.n	8004df8 <RTC_EnterInitMode+0x28>
 8004df6:	b10c      	cbz	r4, 8004dfc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
}
 8004df8:	4620      	mov	r0, r4
 8004dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dfc:	f7fe fc7e 	bl	80036fc <HAL_GetTick>
 8004e00:	1b80      	subs	r0, r0, r6
 8004e02:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e06:	bf84      	itt	hi
 8004e08:	776f      	strbhi	r7, [r5, #29]
        status = HAL_ERROR;
 8004e0a:	2401      	movhi	r4, #1
 8004e0c:	e7ef      	b.n	8004dee <RTC_EnterInitMode+0x1e>
  HAL_StatusTypeDef status = HAL_OK;
 8004e0e:	2400      	movs	r4, #0
 8004e10:	e7f2      	b.n	8004df8 <RTC_EnterInitMode+0x28>

08004e12 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e12:	6803      	ldr	r3, [r0, #0]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
{
 8004e1a:	b510      	push	{r4, lr}
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e1c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	069b      	lsls	r3, r3, #26
{
 8004e22:	4604      	mov	r4, r0
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e24:	d501      	bpl.n	8004e2a <RTC_ExitInitMode+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004e26:	2000      	movs	r0, #0
      status = HAL_ERROR;
    }
  }

  return status;
}
 8004e28:	bd10      	pop	{r4, pc}
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e2a:	f7ff ffb9 	bl	8004da0 <HAL_RTC_WaitForSynchro>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d0f9      	beq.n	8004e26 <RTC_ExitInitMode+0x14>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e32:	2304      	movs	r3, #4
 8004e34:	7763      	strb	r3, [r4, #29]
      status = HAL_ERROR;
 8004e36:	2001      	movs	r0, #1
 8004e38:	e7f6      	b.n	8004e28 <RTC_ExitInitMode+0x16>

08004e3a <HAL_RTC_Init>:
{
 8004e3a:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d03a      	beq.n	8004eb8 <HAL_RTC_Init+0x7e>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e42:	7f43      	ldrb	r3, [r0, #29]
 8004e44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e48:	b913      	cbnz	r3, 8004e50 <HAL_RTC_Init+0x16>
    hrtc->Lock = HAL_UNLOCKED;
 8004e4a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8004e4c:	f7fe fad0 	bl	80033f0 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e50:	2302      	movs	r3, #2
 8004e52:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	22ca      	movs	r2, #202	; 0xca
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24
 8004e5a:	2253      	movs	r2, #83	; 0x53
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f7ff ffb6 	bl	8004dd0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004e64:	bb20      	cbnz	r0, 8004eb0 <HAL_RTC_Init+0x76>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e66:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e68:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8004e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e74:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e76:	6862      	ldr	r2, [r4, #4]
 8004e78:	6899      	ldr	r1, [r3, #8]
 8004e7a:	4302      	orrs	r2, r0
 8004e7c:	6960      	ldr	r0, [r4, #20]
 8004e7e:	4302      	orrs	r2, r0
 8004e80:	430a      	orrs	r2, r1
 8004e82:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e84:	68e2      	ldr	r2, [r4, #12]
 8004e86:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	68a1      	ldr	r1, [r4, #8]
 8004e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e90:	611a      	str	r2, [r3, #16]
    status = RTC_ExitInitMode(hrtc);
 8004e92:	4620      	mov	r0, r4
 8004e94:	f7ff ffbd 	bl	8004e12 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8004e98:	b950      	cbnz	r0, 8004eb0 <HAL_RTC_Init+0x76>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004e9a:	6823      	ldr	r3, [r4, #0]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004e9c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004e9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->State = HAL_RTC_STATE_READY;
 8004eac:	2301      	movs	r3, #1
 8004eae:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	22ff      	movs	r2, #255	; 0xff
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004eb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004eb8:	2001      	movs	r0, #1
 8004eba:	e7fc      	b.n	8004eb6 <HAL_RTC_Init+0x7c>

08004ebc <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
  uint8_t bcdhigh = 0U;

  while (number >= 10U)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2809      	cmp	r0, #9
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	f103 0301 	add.w	r3, r3, #1
 8004ec6:	d803      	bhi.n	8004ed0 <RTC_ByteToBcd2+0x14>
  {
    bcdhigh++;
    number -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004ec8:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
 8004ecc:	b2c0      	uxtb	r0, r0
 8004ece:	4770      	bx	lr
    number -= 10U;
 8004ed0:	380a      	subs	r0, #10
 8004ed2:	b2c0      	uxtb	r0, r0
 8004ed4:	e7f3      	b.n	8004ebe <RTC_ByteToBcd2+0x2>

08004ed6 <HAL_RTC_SetTime>:
{
 8004ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hrtc);
 8004eda:	7f03      	ldrb	r3, [r0, #28]
 8004edc:	2b01      	cmp	r3, #1
{
 8004ede:	4606      	mov	r6, r0
 8004ee0:	460f      	mov	r7, r1
 8004ee2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8004ee6:	d041      	beq.n	8004f6c <HAL_RTC_SetTime+0x96>
 8004ee8:	2301      	movs	r3, #1
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004eea:	6831      	ldr	r1, [r6, #0]
  __HAL_LOCK(hrtc);
 8004eec:	7733      	strb	r3, [r6, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004eee:	7770      	strb	r0, [r6, #29]
  if (Format == RTC_FORMAT_BIN)
 8004ef0:	7838      	ldrb	r0, [r7, #0]
 8004ef2:	787d      	ldrb	r5, [r7, #1]
 8004ef4:	78bc      	ldrb	r4, [r7, #2]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ef6:	688b      	ldr	r3, [r1, #8]
  if (Format == RTC_FORMAT_BIN)
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	d139      	bne.n	8004f70 <HAL_RTC_SetTime+0x9a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004efc:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8004f00:	bf08      	it	eq
 8004f02:	70fb      	strbeq	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f04:	f7ff ffda 	bl	8004ebc <RTC_ByteToBcd2>
 8004f08:	4680      	mov	r8, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	f7ff ffd6 	bl	8004ebc <RTC_ByteToBcd2>
 8004f10:	4605      	mov	r5, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004f12:	4620      	mov	r0, r4
 8004f14:	f7ff ffd2 	bl	8004ebc <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004f18:	78fb      	ldrb	r3, [r7, #3]
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004f1a:	ea40 5383 	orr.w	r3, r0, r3, lsl #22
 8004f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004f22:	ea43 2405 	orr.w	r4, r3, r5, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f26:	23ca      	movs	r3, #202	; 0xca
 8004f28:	624b      	str	r3, [r1, #36]	; 0x24
 8004f2a:	2353      	movs	r3, #83	; 0x53
 8004f2c:	624b      	str	r3, [r1, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f7ff ff4e 	bl	8004dd0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004f34:	b9a8      	cbnz	r0, 8004f62 <HAL_RTC_SetTime+0x8c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f36:	6832      	ldr	r2, [r6, #0]
 8004f38:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8004f3c:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8004f40:	6014      	str	r4, [r2, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004f42:	6893      	ldr	r3, [r2, #8]
 8004f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f48:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f4a:	e9d7 3003 	ldrd	r3, r0, [r7, #12]
 8004f4e:	6891      	ldr	r1, [r2, #8]
 8004f50:	4303      	orrs	r3, r0
 8004f52:	430b      	orrs	r3, r1
 8004f54:	6093      	str	r3, [r2, #8]
    status = RTC_ExitInitMode(hrtc);
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7ff ff5b 	bl	8004e12 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8004f5c:	b908      	cbnz	r0, 8004f62 <HAL_RTC_SetTime+0x8c>
    hrtc->State = HAL_RTC_STATE_READY;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	7773      	strb	r3, [r6, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f62:	6833      	ldr	r3, [r6, #0]
 8004f64:	22ff      	movs	r2, #255	; 0xff
 8004f66:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	7733      	strb	r3, [r6, #28]
}
 8004f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f70:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00U;
 8004f74:	bf08      	it	eq
 8004f76:	70fb      	strbeq	r3, [r7, #3]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f78:	022d      	lsls	r5, r5, #8
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f7c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004f80:	ea45 0304 	orr.w	r3, r5, r4
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004f84:	ea43 5482 	orr.w	r4, r3, r2, lsl #22
 8004f88:	e7cd      	b.n	8004f26 <HAL_RTC_SetTime+0x50>

08004f8a <HAL_RTC_SetDate>:
{
 8004f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004f8c:	7f03      	ldrb	r3, [r0, #28]
 8004f8e:	2b01      	cmp	r3, #1
{
 8004f90:	4605      	mov	r5, r0
 8004f92:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hrtc);
 8004f96:	d039      	beq.n	800500c <HAL_RTC_SetDate+0x82>
 8004f98:	2001      	movs	r0, #1
 8004f9a:	7728      	strb	r0, [r5, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f9c:	776b      	strb	r3, [r5, #29]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f9e:	780c      	ldrb	r4, [r1, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fa0:	78c8      	ldrb	r0, [r1, #3]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004fa2:	784e      	ldrb	r6, [r1, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004fa4:	788f      	ldrb	r7, [r1, #2]
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004fa6:	0364      	lsls	r4, r4, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004fa8:	bb92      	cbnz	r2, 8005010 <HAL_RTC_SetDate+0x86>
 8004faa:	06f3      	lsls	r3, r6, #27
 8004fac:	d503      	bpl.n	8004fb6 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004fae:	f026 0610 	bic.w	r6, r6, #16
 8004fb2:	360a      	adds	r6, #10
 8004fb4:	704e      	strb	r6, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fb6:	f7ff ff81 	bl	8004ebc <RTC_ByteToBcd2>
 8004fba:	4606      	mov	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fbc:	7848      	ldrb	r0, [r1, #1]
 8004fbe:	f7ff ff7d 	bl	8004ebc <RTC_ByteToBcd2>
 8004fc2:	4601      	mov	r1, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f7ff ff79 	bl	8004ebc <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fca:	ea40 0304 	orr.w	r3, r0, r4
 8004fce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004fd2:	ea43 2401 	orr.w	r4, r3, r1, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	22ca      	movs	r2, #202	; 0xca
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24
 8004fdc:	2253      	movs	r2, #83	; 0x53
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	f7ff fef5 	bl	8004dd0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004fe6:	b958      	cbnz	r0, 8005000 <HAL_RTC_SetDate+0x76>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fe8:	682a      	ldr	r2, [r5, #0]
 8004fea:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004fee:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8004ff2:	6054      	str	r4, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f7ff ff0c 	bl	8004e12 <RTC_ExitInitMode>
  if (status == HAL_OK)
 8004ffa:	b908      	cbnz	r0, 8005000 <HAL_RTC_SetDate+0x76>
    hrtc->State = HAL_RTC_STATE_READY;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	776b      	strb	r3, [r5, #29]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005000:	682b      	ldr	r3, [r5, #0]
 8005002:	22ff      	movs	r2, #255	; 0xff
 8005004:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hrtc);
 8005006:	2300      	movs	r3, #0
 8005008:	772b      	strb	r3, [r5, #28]
}
 800500a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hrtc);
 800500c:	4618      	mov	r0, r3
 800500e:	e7fc      	b.n	800500a <HAL_RTC_SetDate+0x80>
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005010:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8005014:	433c      	orrs	r4, r7
 8005016:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800501a:	e7dc      	b.n	8004fd6 <HAL_RTC_SetDate+0x4c>

0800501c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
  uint8_t tmp = 0U;
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800501c:	0903      	lsrs	r3, r0, #4
 800501e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (number & (uint8_t)0x0F));
 8005022:	f000 000f 	and.w	r0, r0, #15
 8005026:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 800502a:	b2c0      	uxtb	r0, r0
 800502c:	4770      	bx	lr

0800502e <HAL_RTC_GetTime>:
{
 800502e:	b538      	push	{r3, r4, r5, lr}
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005030:	6803      	ldr	r3, [r0, #0]
 8005032:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005034:	6048      	str	r0, [r1, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005036:	6918      	ldr	r0, [r3, #16]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005038:	681b      	ldr	r3, [r3, #0]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800503a:	f3c0 000e 	ubfx	r0, r0, #0, #15
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800503e:	f3c3 2506 	ubfx	r5, r3, #8, #7
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005042:	f003 047f 	and.w	r4, r3, #127	; 0x7f
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005046:	6088      	str	r0, [r1, #8]
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005048:	f3c3 4005 	ubfx	r0, r3, #16, #6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800504c:	f3c3 5380 	ubfx	r3, r3, #22, #1
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005050:	7008      	strb	r0, [r1, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005052:	704d      	strb	r5, [r1, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005054:	708c      	strb	r4, [r1, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005056:	70cb      	strb	r3, [r1, #3]
  if (Format == RTC_FORMAT_BIN)
 8005058:	b952      	cbnz	r2, 8005070 <HAL_RTC_GetTime+0x42>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800505a:	f7ff ffdf 	bl	800501c <RTC_Bcd2ToByte>
 800505e:	7008      	strb	r0, [r1, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005060:	4628      	mov	r0, r5
 8005062:	f7ff ffdb 	bl	800501c <RTC_Bcd2ToByte>
 8005066:	7048      	strb	r0, [r1, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005068:	4620      	mov	r0, r4
 800506a:	f7ff ffd7 	bl	800501c <RTC_Bcd2ToByte>
 800506e:	7088      	strb	r0, [r1, #2]
}
 8005070:	2000      	movs	r0, #0
 8005072:	bd38      	pop	{r3, r4, r5, pc}

08005074 <HAL_RTC_GetDate>:
{
 8005074:	b538      	push	{r3, r4, r5, lr}
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005076:	6803      	ldr	r3, [r0, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800507a:	f3c3 4007 	ubfx	r0, r3, #16, #8
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800507e:	f3c3 2504 	ubfx	r5, r3, #8, #5
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005082:	f003 043f 	and.w	r4, r3, #63	; 0x3f
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005086:	f3c3 3342 	ubfx	r3, r3, #13, #3
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800508a:	70c8      	strb	r0, [r1, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800508c:	704d      	strb	r5, [r1, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800508e:	708c      	strb	r4, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005090:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8005092:	b952      	cbnz	r2, 80050aa <HAL_RTC_GetDate+0x36>
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005094:	f7ff ffc2 	bl	800501c <RTC_Bcd2ToByte>
 8005098:	70c8      	strb	r0, [r1, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800509a:	4628      	mov	r0, r5
 800509c:	f7ff ffbe 	bl	800501c <RTC_Bcd2ToByte>
 80050a0:	7048      	strb	r0, [r1, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050a2:	4620      	mov	r0, r4
 80050a4:	f7ff ffba 	bl	800501c <RTC_Bcd2ToByte>
 80050a8:	7088      	strb	r0, [r1, #2]
}
 80050aa:	2000      	movs	r0, #0
 80050ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080050b0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b0:	6a03      	ldr	r3, [r0, #32]
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050b8:	6a03      	ldr	r3, [r0, #32]
{
 80050ba:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050be:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050c2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80050c6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050c8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80050ca:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80050ce:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050d0:	4d0e      	ldr	r5, [pc, #56]	; (800510c <TIM_OC1_SetConfig+0x5c>)
 80050d2:	42a8      	cmp	r0, r5
 80050d4:	d002      	beq.n	80050dc <TIM_OC1_SetConfig+0x2c>
 80050d6:	4e0e      	ldr	r6, [pc, #56]	; (8005110 <TIM_OC1_SetConfig+0x60>)
 80050d8:	42b0      	cmp	r0, r6
 80050da:	d110      	bne.n	80050fe <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050dc:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80050de:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80050e2:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80050e6:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ea:	d002      	beq.n	80050f2 <TIM_OC1_SetConfig+0x42>
 80050ec:	4d08      	ldr	r5, [pc, #32]	; (8005110 <TIM_OC1_SetConfig+0x60>)
 80050ee:	42a8      	cmp	r0, r5
 80050f0:	d105      	bne.n	80050fe <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050f6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80050fa:	4335      	orrs	r5, r6
 80050fc:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fe:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005100:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005102:	684a      	ldr	r2, [r1, #4]
 8005104:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005106:	6203      	str	r3, [r0, #32]
}
 8005108:	bd70      	pop	{r4, r5, r6, pc}
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40010400 	.word	0x40010400

08005114 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005114:	6a03      	ldr	r3, [r0, #32]
 8005116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800511c:	6a03      	ldr	r3, [r0, #32]
{
 800511e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005120:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005122:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005124:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005126:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800512a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800512c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800512e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005132:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005136:	4d11      	ldr	r5, [pc, #68]	; (800517c <TIM_OC3_SetConfig+0x68>)
 8005138:	42a8      	cmp	r0, r5
 800513a:	d003      	beq.n	8005144 <TIM_OC3_SetConfig+0x30>
 800513c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005140:	42a8      	cmp	r0, r5
 8005142:	d114      	bne.n	800516e <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005144:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800514a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	4d0b      	ldr	r5, [pc, #44]	; (800517c <TIM_OC3_SetConfig+0x68>)
 8005150:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005152:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	d003      	beq.n	8005160 <TIM_OC3_SetConfig+0x4c>
 8005158:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800515c:	42a8      	cmp	r0, r5
 800515e:	d106      	bne.n	800516e <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005160:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005164:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005168:	4335      	orrs	r5, r6
 800516a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005170:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005172:	684a      	ldr	r2, [r1, #4]
 8005174:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005176:	6203      	str	r3, [r0, #32]
}
 8005178:	bd70      	pop	{r4, r5, r6, pc}
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000

08005180 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005180:	6a03      	ldr	r3, [r0, #32]
 8005182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005186:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005188:	6a03      	ldr	r3, [r0, #32]
{
 800518a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800518c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800518e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005190:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005192:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005196:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800519a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800519c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a4:	4d08      	ldr	r5, [pc, #32]	; (80051c8 <TIM_OC4_SetConfig+0x48>)
 80051a6:	42a8      	cmp	r0, r5
 80051a8:	d003      	beq.n	80051b2 <TIM_OC4_SetConfig+0x32>
 80051aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80051ae:	42a8      	cmp	r0, r5
 80051b0:	d104      	bne.n	80051bc <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051bc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051be:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051c0:	684a      	ldr	r2, [r1, #4]
 80051c2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	6203      	str	r3, [r0, #32]
}
 80051c6:	bd30      	pop	{r4, r5, pc}
 80051c8:	40010000 	.word	0x40010000

080051cc <HAL_TIM_PWM_MspInit>:
 80051cc:	4770      	bx	lr
	...

080051d0 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d0:	4a30      	ldr	r2, [pc, #192]	; (8005294 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80051d2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051d4:	4290      	cmp	r0, r2
 80051d6:	d012      	beq.n	80051fe <TIM_Base_SetConfig+0x2e>
 80051d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80051dc:	d00f      	beq.n	80051fe <TIM_Base_SetConfig+0x2e>
 80051de:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80051e2:	4290      	cmp	r0, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_Base_SetConfig+0x2e>
 80051e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ea:	4290      	cmp	r0, r2
 80051ec:	d007      	beq.n	80051fe <TIM_Base_SetConfig+0x2e>
 80051ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051f2:	4290      	cmp	r0, r2
 80051f4:	d003      	beq.n	80051fe <TIM_Base_SetConfig+0x2e>
 80051f6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80051fa:	4290      	cmp	r0, r2
 80051fc:	d119      	bne.n	8005232 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80051fe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005204:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005206:	4a23      	ldr	r2, [pc, #140]	; (8005294 <TIM_Base_SetConfig+0xc4>)
 8005208:	4290      	cmp	r0, r2
 800520a:	d029      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 800520c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005210:	d026      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 8005212:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005216:	4290      	cmp	r0, r2
 8005218:	d022      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 800521a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800521e:	4290      	cmp	r0, r2
 8005220:	d01e      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 8005222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005226:	4290      	cmp	r0, r2
 8005228:	d01a      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 800522a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800522e:	4290      	cmp	r0, r2
 8005230:	d016      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 8005232:	4a19      	ldr	r2, [pc, #100]	; (8005298 <TIM_Base_SetConfig+0xc8>)
 8005234:	4290      	cmp	r0, r2
 8005236:	d013      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 8005238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800523c:	4290      	cmp	r0, r2
 800523e:	d00f      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 8005240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005244:	4290      	cmp	r0, r2
 8005246:	d00b      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 8005248:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800524c:	4290      	cmp	r0, r2
 800524e:	d007      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 8005250:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005254:	4290      	cmp	r0, r2
 8005256:	d003      	beq.n	8005260 <TIM_Base_SetConfig+0x90>
 8005258:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800525c:	4290      	cmp	r0, r2
 800525e:	d103      	bne.n	8005268 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005260:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005266:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005268:	694a      	ldr	r2, [r1, #20]
 800526a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005270:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005272:	688b      	ldr	r3, [r1, #8]
 8005274:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005276:	680b      	ldr	r3, [r1, #0]
 8005278:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527a:	4b06      	ldr	r3, [pc, #24]	; (8005294 <TIM_Base_SetConfig+0xc4>)
 800527c:	4298      	cmp	r0, r3
 800527e:	d003      	beq.n	8005288 <TIM_Base_SetConfig+0xb8>
 8005280:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005284:	4298      	cmp	r0, r3
 8005286:	d101      	bne.n	800528c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005288:	690b      	ldr	r3, [r1, #16]
 800528a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800528c:	2301      	movs	r3, #1
 800528e:	6143      	str	r3, [r0, #20]
}
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40010000 	.word	0x40010000
 8005298:	40014000 	.word	0x40014000

0800529c <HAL_TIM_Base_Init>:
{
 800529c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800529e:	4604      	mov	r4, r0
 80052a0:	b330      	cbz	r0, 80052f0 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80052a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80052aa:	b91b      	cbnz	r3, 80052b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80052ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80052b0:	f7fe f8be 	bl	8003430 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80052b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052bc:	1d21      	adds	r1, r4, #4
 80052be:	f7ff ff87 	bl	80051d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80052c8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80052ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80052d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80052d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80052e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80052ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80052ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80052f0:	2001      	movs	r0, #1
 80052f2:	e7fc      	b.n	80052ee <HAL_TIM_Base_Init+0x52>

080052f4 <HAL_TIM_PWM_Init>:
{
 80052f4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80052f6:	4604      	mov	r4, r0
 80052f8:	b330      	cbz	r0, 8005348 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80052fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80052fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005302:	b91b      	cbnz	r3, 800530c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005304:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005308:	f7ff ff60 	bl	80051cc <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800530c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800530e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005314:	1d21      	adds	r1, r4, #4
 8005316:	f7ff ff5b 	bl	80051d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800531a:	2301      	movs	r3, #1
 800531c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8005320:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005326:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800532a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800532e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800533e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005342:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005346:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005348:	2001      	movs	r0, #1
 800534a:	e7fc      	b.n	8005346 <HAL_TIM_PWM_Init+0x52>

0800534c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800534c:	6a03      	ldr	r3, [r0, #32]
 800534e:	f023 0310 	bic.w	r3, r3, #16
 8005352:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005354:	6a03      	ldr	r3, [r0, #32]
{
 8005356:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005358:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800535a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800535c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005362:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005366:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005368:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800536c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005370:	4d10      	ldr	r5, [pc, #64]	; (80053b4 <TIM_OC2_SetConfig+0x68>)
 8005372:	42a8      	cmp	r0, r5
 8005374:	d003      	beq.n	800537e <TIM_OC2_SetConfig+0x32>
 8005376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800537a:	42a8      	cmp	r0, r5
 800537c:	d114      	bne.n	80053a8 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800537e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005384:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005388:	4d0a      	ldr	r5, [pc, #40]	; (80053b4 <TIM_OC2_SetConfig+0x68>)
 800538a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800538c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005390:	d003      	beq.n	800539a <TIM_OC2_SetConfig+0x4e>
 8005392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005396:	42a8      	cmp	r0, r5
 8005398:	d106      	bne.n	80053a8 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800539a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800539e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053a2:	4335      	orrs	r5, r6
 80053a4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80053a8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80053aa:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80053ac:	684a      	ldr	r2, [r1, #4]
 80053ae:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80053b0:	6203      	str	r3, [r0, #32]
}
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	40010000 	.word	0x40010000

080053b8 <HAL_TIM_PWM_ConfigChannel>:
{
 80053b8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80053ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80053be:	2b01      	cmp	r3, #1
{
 80053c0:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80053c2:	d050      	beq.n	8005466 <HAL_TIM_PWM_ConfigChannel+0xae>
 80053c4:	2301      	movs	r3, #1
  switch (Channel)
 80053c6:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80053c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80053cc:	d03b      	beq.n	8005446 <HAL_TIM_PWM_ConfigChannel+0x8e>
 80053ce:	d807      	bhi.n	80053e0 <HAL_TIM_PWM_ConfigChannel+0x28>
 80053d0:	b1c2      	cbz	r2, 8005404 <HAL_TIM_PWM_ConfigChannel+0x4c>
 80053d2:	2a04      	cmp	r2, #4
 80053d4:	d027      	beq.n	8005426 <HAL_TIM_PWM_ConfigChannel+0x6e>
 80053d6:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 80053d8:	2300      	movs	r3, #0
 80053da:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80053de:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80053e0:	2a0c      	cmp	r2, #12
 80053e2:	d1f8      	bne.n	80053d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053e4:	6800      	ldr	r0, [r0, #0]
 80053e6:	f7ff fecb 	bl	8005180 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ea:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ec:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053f2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053f4:	69c3      	ldr	r3, [r0, #28]
 80053f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053fa:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053fc:	69c3      	ldr	r3, [r0, #28]
 80053fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005402:	e02e      	b.n	8005462 <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005404:	6800      	ldr	r0, [r0, #0]
 8005406:	f7ff fe53 	bl	80050b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800540a:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800540c:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800540e:	f043 0308 	orr.w	r3, r3, #8
 8005412:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005414:	6983      	ldr	r3, [r0, #24]
 8005416:	f023 0304 	bic.w	r3, r3, #4
 800541a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800541c:	6983      	ldr	r3, [r0, #24]
 800541e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005420:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	2000      	movs	r0, #0
      break;
 8005424:	e7d8      	b.n	80053d8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005426:	6800      	ldr	r0, [r0, #0]
 8005428:	f7ff ff90 	bl	800534c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800542c:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800542e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005430:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005434:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005436:	6983      	ldr	r3, [r0, #24]
 8005438:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800543c:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800543e:	6983      	ldr	r3, [r0, #24]
 8005440:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005444:	e7ec      	b.n	8005420 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005446:	6800      	ldr	r0, [r0, #0]
 8005448:	f7ff fe64 	bl	8005114 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800544c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800544e:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005450:	f043 0308 	orr.w	r3, r3, #8
 8005454:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005456:	69c3      	ldr	r3, [r0, #28]
 8005458:	f023 0304 	bic.w	r3, r3, #4
 800545c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545e:	69c3      	ldr	r3, [r0, #28]
 8005460:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005462:	61c3      	str	r3, [r0, #28]
 8005464:	e7dd      	b.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8005466:	2002      	movs	r0, #2
 8005468:	e7b9      	b.n	80053de <HAL_TIM_PWM_ConfigChannel+0x26>

0800546a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800546a:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800546c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800546e:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005474:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8005478:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547a:	6083      	str	r3, [r0, #8]
}
 800547c:	bd10      	pop	{r4, pc}

0800547e <HAL_TIM_ConfigClockSource>:
{
 800547e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005480:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005484:	2b01      	cmp	r3, #1
{
 8005486:	4604      	mov	r4, r0
 8005488:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800548c:	f000 808e 	beq.w	80055ac <HAL_TIM_ConfigClockSource+0x12e>
 8005490:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8005492:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005496:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800549e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80054a6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80054a8:	680b      	ldr	r3, [r1, #0]
 80054aa:	2b60      	cmp	r3, #96	; 0x60
 80054ac:	d04f      	beq.n	800554e <HAL_TIM_ConfigClockSource+0xd0>
 80054ae:	d832      	bhi.n	8005516 <HAL_TIM_ConfigClockSource+0x98>
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d064      	beq.n	800557e <HAL_TIM_ConfigClockSource+0x100>
 80054b4:	d816      	bhi.n	80054e4 <HAL_TIM_ConfigClockSource+0x66>
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d00d      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x58>
 80054ba:	d80a      	bhi.n	80054d2 <HAL_TIM_ConfigClockSource+0x54>
 80054bc:	f033 0110 	bics.w	r1, r3, #16
 80054c0:	d009      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80054c8:	2300      	movs	r3, #0
 80054ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80054ce:	4610      	mov	r0, r2
 80054d0:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80054d2:	2b30      	cmp	r3, #48	; 0x30
 80054d4:	d1f5      	bne.n	80054c2 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80054d6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054dc:	4313      	orrs	r3, r2
 80054de:	f043 0307 	orr.w	r3, r3, #7
 80054e2:	e028      	b.n	8005536 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 80054e4:	2b50      	cmp	r3, #80	; 0x50
 80054e6:	d1ec      	bne.n	80054c2 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e8:	684a      	ldr	r2, [r1, #4]
 80054ea:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80054ec:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ee:	6a03      	ldr	r3, [r0, #32]
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f6:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005500:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005504:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8005506:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005508:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800550a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800550c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005510:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005514:	e00f      	b.n	8005536 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8005516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800551a:	d00d      	beq.n	8005538 <HAL_TIM_ConfigClockSource+0xba>
 800551c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005520:	d00c      	beq.n	800553c <HAL_TIM_ConfigClockSource+0xbe>
 8005522:	2b70      	cmp	r3, #112	; 0x70
 8005524:	d1cd      	bne.n	80054c2 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005526:	68cb      	ldr	r3, [r1, #12]
 8005528:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800552c:	f7ff ff9d 	bl	800546a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005530:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005532:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8005536:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2200      	movs	r2, #0
 800553a:	e7c2      	b.n	80054c2 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800553c:	68cb      	ldr	r3, [r1, #12]
 800553e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005542:	f7ff ff92 	bl	800546a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005546:	6883      	ldr	r3, [r0, #8]
 8005548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800554c:	e7f3      	b.n	8005536 <HAL_TIM_ConfigClockSource+0xb8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800554e:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005550:	684d      	ldr	r5, [r1, #4]
 8005552:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005554:	f023 0310 	bic.w	r3, r3, #16
 8005558:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800555c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800555e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005566:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800556a:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800556e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005570:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005572:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005578:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800557c:	e7db      	b.n	8005536 <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	684a      	ldr	r2, [r1, #4]
 8005580:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8005582:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005584:	6a03      	ldr	r3, [r0, #32]
 8005586:	f023 0301 	bic.w	r3, r3, #1
 800558a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800558e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005596:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800559a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800559c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800559e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80055a0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80055aa:	e7c4      	b.n	8005536 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80055ac:	461a      	mov	r2, r3
 80055ae:	e78e      	b.n	80054ce <HAL_TIM_ConfigClockSource+0x50>

080055b0 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055b0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b2:	f001 011f 	and.w	r1, r1, #31
{
 80055b6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055b8:	2401      	movs	r4, #1
 80055ba:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80055bc:	ea23 0304 	bic.w	r3, r3, r4
 80055c0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055c2:	6a03      	ldr	r3, [r0, #32]
 80055c4:	408a      	lsls	r2, r1
 80055c6:	431a      	orrs	r2, r3
 80055c8:	6202      	str	r2, [r0, #32]
}
 80055ca:	bd10      	pop	{r4, pc}

080055cc <HAL_TIM_OC_Start>:
{
 80055cc:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055ce:	b929      	cbnz	r1, 80055dc <HAL_TIM_OC_Start+0x10>
 80055d0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d018      	beq.n	800560a <HAL_TIM_OC_Start+0x3e>
    return HAL_ERROR;
 80055d8:	2001      	movs	r0, #1
 80055da:	e02c      	b.n	8005636 <HAL_TIM_OC_Start+0x6a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055dc:	2904      	cmp	r1, #4
 80055de:	d10d      	bne.n	80055fc <HAL_TIM_OC_Start+0x30>
 80055e0:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80055e4:	3b01      	subs	r3, #1
 80055e6:	bf18      	it	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f4      	bne.n	80055d8 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	2904      	cmp	r1, #4
 80055f0:	f04f 0302 	mov.w	r3, #2
 80055f4:	d120      	bne.n	8005638 <HAL_TIM_OC_Start+0x6c>
 80055f6:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80055fa:	e009      	b.n	8005610 <HAL_TIM_OC_Start+0x44>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055fc:	2908      	cmp	r1, #8
 80055fe:	bf0c      	ite	eq
 8005600:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 8005604:	f890 3041 	ldrbne.w	r3, [r0, #65]	; 0x41
 8005608:	e7ec      	b.n	80055e4 <HAL_TIM_OC_Start+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	2302      	movs	r3, #2
 800560c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005610:	6800      	ldr	r0, [r0, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	f7ff ffcc 	bl	80055b0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005618:	4a1c      	ldr	r2, [pc, #112]	; (800568c <HAL_TIM_OC_Start+0xc0>)
 800561a:	4290      	cmp	r0, r2
 800561c:	d013      	beq.n	8005646 <HAL_TIM_OC_Start+0x7a>
 800561e:	4b1c      	ldr	r3, [pc, #112]	; (8005690 <HAL_TIM_OC_Start+0xc4>)
 8005620:	4298      	cmp	r0, r3
 8005622:	d010      	beq.n	8005646 <HAL_TIM_OC_Start+0x7a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005624:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005628:	d114      	bne.n	8005654 <HAL_TIM_OC_Start+0x88>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562a:	6883      	ldr	r3, [r0, #8]
 800562c:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005630:	2b06      	cmp	r3, #6
 8005632:	d126      	bne.n	8005682 <HAL_TIM_OC_Start+0xb6>
  return HAL_OK;
 8005634:	2000      	movs	r0, #0
}
 8005636:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005638:	2908      	cmp	r1, #8
 800563a:	bf0c      	ite	eq
 800563c:	f880 3040 	strbeq.w	r3, [r0, #64]	; 0x40
 8005640:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
 8005644:	e7e4      	b.n	8005610 <HAL_TIM_OC_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8005646:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005648:	4290      	cmp	r0, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800564a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564e:	6443      	str	r3, [r0, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005650:	d0eb      	beq.n	800562a <HAL_TIM_OC_Start+0x5e>
 8005652:	e7e7      	b.n	8005624 <HAL_TIM_OC_Start+0x58>
 8005654:	4b0f      	ldr	r3, [pc, #60]	; (8005694 <HAL_TIM_OC_Start+0xc8>)
 8005656:	4298      	cmp	r0, r3
 8005658:	d0e7      	beq.n	800562a <HAL_TIM_OC_Start+0x5e>
 800565a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565e:	4298      	cmp	r0, r3
 8005660:	d0e3      	beq.n	800562a <HAL_TIM_OC_Start+0x5e>
 8005662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005666:	4298      	cmp	r0, r3
 8005668:	d0df      	beq.n	800562a <HAL_TIM_OC_Start+0x5e>
 800566a:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800566e:	4298      	cmp	r0, r3
 8005670:	d0db      	beq.n	800562a <HAL_TIM_OC_Start+0x5e>
 8005672:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8005676:	4298      	cmp	r0, r3
 8005678:	d0d7      	beq.n	800562a <HAL_TIM_OC_Start+0x5e>
 800567a:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 800567e:	4298      	cmp	r0, r3
 8005680:	d0d3      	beq.n	800562a <HAL_TIM_OC_Start+0x5e>
    __HAL_TIM_ENABLE(htim);
 8005682:	6803      	ldr	r3, [r0, #0]
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6003      	str	r3, [r0, #0]
 800568a:	e7d3      	b.n	8005634 <HAL_TIM_OC_Start+0x68>
 800568c:	40010000 	.word	0x40010000
 8005690:	40010400 	.word	0x40010400
 8005694:	40000400 	.word	0x40000400

08005698 <HAL_TIM_PWM_Start>:
 8005698:	f7ff bf98 	b.w	80055cc <HAL_TIM_OC_Start>

0800569c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800569c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	f04f 0302 	mov.w	r3, #2
 80056a8:	d032      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056ae:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80056b2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80056b6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ba:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056bc:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	4c15      	ldr	r4, [pc, #84]	; (8005714 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80056c0:	42a3      	cmp	r3, r4
 80056c2:	d01a      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80056c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c8:	d017      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80056ca:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	d013      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80056d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056d6:	42a3      	cmp	r3, r4
 80056d8:	d00f      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80056da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80056de:	42a3      	cmp	r3, r4
 80056e0:	d00b      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80056e2:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	d007      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80056ea:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	d003      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80056f2:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80056f6:	42a3      	cmp	r3, r4
 80056f8:	d104      	bne.n	8005704 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fa:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005700:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005702:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005704:	2301      	movs	r3, #1
 8005706:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800570a:	2300      	movs	r3, #0
 800570c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005710:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005712:	bd30      	pop	{r4, r5, pc}
 8005714:	40010000 	.word	0x40010000

08005718 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005718:	6802      	ldr	r2, [r0, #0]
 800571a:	68c1      	ldr	r1, [r0, #12]
 800571c:	6913      	ldr	r3, [r2, #16]
 800571e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005722:	430b      	orrs	r3, r1
{
 8005724:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005726:	6113      	str	r3, [r2, #16]
{
 8005728:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800572a:	6883      	ldr	r3, [r0, #8]
 800572c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800572e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005730:	4303      	orrs	r3, r0
 8005732:	6968      	ldr	r0, [r5, #20]
 8005734:	4303      	orrs	r3, r0
 8005736:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005738:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800573c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005740:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8005742:	430b      	orrs	r3, r1
 8005744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005746:	6953      	ldr	r3, [r2, #20]
 8005748:	69a9      	ldr	r1, [r5, #24]
 800574a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574e:	430b      	orrs	r3, r1
 8005750:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005752:	4b1f      	ldr	r3, [pc, #124]	; (80057d0 <UART_SetConfig+0xb8>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d003      	beq.n	8005760 <UART_SetConfig+0x48>
 8005758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800575c:	429a      	cmp	r2, r3
 800575e:	d123      	bne.n	80057a8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005760:	f7ff fa76 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005764:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005766:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800576c:	e9d5 4600 	ldrd	r4, r6, [r5]
 8005770:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005774:	d11b      	bne.n	80057ae <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005776:	19b2      	adds	r2, r6, r6
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	415b      	adcs	r3, r3
 800577e:	f7fb fa83 	bl	8000c88 <__aeabi_uldivmod>
 8005782:	2264      	movs	r2, #100	; 0x64
 8005784:	fbb0 f1f2 	udiv	r1, r0, r2
 8005788:	fb02 0311 	mls	r3, r2, r1, r0
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	3332      	adds	r3, #50	; 0x32
 8005790:	fbb3 f3f2 	udiv	r3, r3, r2
 8005794:	f003 0207 	and.w	r2, r3, #7
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800579e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057a2:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057a4:	60a3      	str	r3, [r4, #8]
  }
}
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80057a8:	f7ff fa42 	bl	8004c30 <HAL_RCC_GetPCLK1Freq>
 80057ac:	e7da      	b.n	8005764 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ae:	00b2      	lsls	r2, r6, #2
 80057b0:	0fb3      	lsrs	r3, r6, #30
 80057b2:	f7fb fa69 	bl	8000c88 <__aeabi_uldivmod>
 80057b6:	2264      	movs	r2, #100	; 0x64
 80057b8:	fbb0 f1f2 	udiv	r1, r0, r2
 80057bc:	fb02 0311 	mls	r3, r2, r1, r0
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	3332      	adds	r3, #50	; 0x32
 80057c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80057cc:	e7ea      	b.n	80057a4 <UART_SetConfig+0x8c>
 80057ce:	bf00      	nop
 80057d0:	40011000 	.word	0x40011000

080057d4 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	4604      	mov	r4, r0
 80057d8:	460e      	mov	r6, r1
 80057da:	4617      	mov	r7, r2
 80057dc:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057de:	6822      	ldr	r2, [r4, #0]
 80057e0:	6813      	ldr	r3, [r2, #0]
 80057e2:	ea36 0303 	bics.w	r3, r6, r3
 80057e6:	d101      	bne.n	80057ec <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80057e8:	2000      	movs	r0, #0
 80057ea:	e028      	b.n	800583e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	1c6b      	adds	r3, r5, #1
 80057ee:	d0f7      	beq.n	80057e0 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057f0:	b125      	cbz	r5, 80057fc <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 80057f2:	f7fd ff83 	bl	80036fc <HAL_GetTick>
 80057f6:	1bc0      	subs	r0, r0, r7
 80057f8:	4285      	cmp	r5, r0
 80057fa:	d2f0      	bcs.n	80057de <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057fc:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	f102 030c 	add.w	r3, r2, #12
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	320c      	adds	r2, #12
 800580c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8005810:	6821      	ldr	r1, [r4, #0]
 8005812:	2800      	cmp	r0, #0
 8005814:	d1f2      	bne.n	80057fc <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	f101 0314 	add.w	r3, r1, #20
 800581a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005822:	f101 0014 	add.w	r0, r1, #20
 8005826:	e840 3200 	strex	r2, r3, [r0]
 800582a:	2a00      	cmp	r2, #0
 800582c:	d1f3      	bne.n	8005816 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800582e:	2320      	movs	r3, #32
 8005830:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8005834:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8005838:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800583c:	2003      	movs	r0, #3
}
 800583e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005840 <HAL_UART_Init>:
{
 8005840:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005842:	4604      	mov	r4, r0
 8005844:	b340      	cbz	r0, 8005898 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800584a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800584e:	b91b      	cbnz	r3, 8005858 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005850:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005854:	f7fd fe2a 	bl	80034ac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005858:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800585a:	2324      	movs	r3, #36	; 0x24
 800585c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005860:	68d3      	ldr	r3, [r2, #12]
 8005862:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005866:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005868:	4620      	mov	r0, r4
 800586a:	f7ff ff55 	bl	8005718 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800586e:	6823      	ldr	r3, [r4, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005876:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005878:	695a      	ldr	r2, [r3, #20]
 800587a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800587e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005886:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005888:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800588a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800588c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800588e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005892:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005896:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005898:	2001      	movs	r0, #1
 800589a:	e7fc      	b.n	8005896 <HAL_UART_Init+0x56>

0800589c <HAL_UART_Transmit>:
{
 800589c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800589e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80058a0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80058a4:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80058a6:	2a20      	cmp	r2, #32
{
 80058a8:	4604      	mov	r4, r0
 80058aa:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80058ac:	d149      	bne.n	8005942 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80058ae:	2900      	cmp	r1, #0
 80058b0:	d045      	beq.n	800593e <HAL_UART_Transmit+0xa2>
 80058b2:	2f00      	cmp	r7, #0
 80058b4:	d043      	beq.n	800593e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80058b6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80058ba:	2a01      	cmp	r2, #1
 80058bc:	d041      	beq.n	8005942 <HAL_UART_Transmit+0xa6>
 80058be:	2201      	movs	r2, #1
 80058c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058c6:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c8:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ca:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80058ce:	f7fd ff15 	bl	80036fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d2:	68a1      	ldr	r1, [r4, #8]
 80058d4:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80058d6:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058d8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80058dc:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80058de:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058e0:	d103      	bne.n	80058ea <HAL_UART_Transmit+0x4e>
 80058e2:	6921      	ldr	r1, [r4, #16]
 80058e4:	b909      	cbnz	r1, 80058ea <HAL_UART_Transmit+0x4e>
 80058e6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80058e8:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 80058ea:	2100      	movs	r1, #0
 80058ec:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80058f0:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80058f2:	b289      	uxth	r1, r1
 80058f4:	b941      	cbnz	r1, 8005908 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058f6:	2140      	movs	r1, #64	; 0x40
 80058f8:	4620      	mov	r0, r4
 80058fa:	f7ff ff6b 	bl	80057d4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80058fe:	b960      	cbnz	r0, 800591a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8005900:	2320      	movs	r3, #32
 8005902:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8005906:	e009      	b.n	800591c <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005908:	2180      	movs	r1, #128	; 0x80
 800590a:	4620      	mov	r0, r4
 800590c:	e9cd 2300 	strd	r2, r3, [sp]
 8005910:	f7ff ff60 	bl	80057d4 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8005914:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005918:	b110      	cbz	r0, 8005920 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800591a:	2003      	movs	r0, #3
}
 800591c:	b003      	add	sp, #12
 800591e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005920:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8005922:	b94e      	cbnz	r6, 8005938 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005924:	f835 1b02 	ldrh.w	r1, [r5], #2
 8005928:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800592c:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800592e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8005930:	3901      	subs	r1, #1
 8005932:	b289      	uxth	r1, r1
 8005934:	84e1      	strh	r1, [r4, #38]	; 0x26
 8005936:	e7db      	b.n	80058f0 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005938:	f816 1b01 	ldrb.w	r1, [r6], #1
 800593c:	e7f6      	b.n	800592c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800593e:	2001      	movs	r0, #1
 8005940:	e7ec      	b.n	800591c <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8005942:	2002      	movs	r0, #2
 8005944:	e7ea      	b.n	800591c <HAL_UART_Transmit+0x80>
	...

08005948 <_ZN4blib6AnalogD1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
    {
        sampling();
    }

    Analog::~Analog()
 8005948:	b510      	push	{r4, lr}
 800594a:	4b04      	ldr	r3, [pc, #16]	; (800595c <_ZN4blib6AnalogD1Ev+0x14>)
 800594c:	6003      	str	r3, [r0, #0]
 800594e:	4604      	mov	r4, r0
    {
        HAL_ADC_Stop_DMA(mHadc);
 8005950:	6980      	ldr	r0, [r0, #24]
 8005952:	f7fe f841 	bl	80039d8 <HAL_ADC_Stop_DMA>
    }
 8005956:	4620      	mov	r0, r4
 8005958:	bd10      	pop	{r4, pc}
 800595a:	bf00      	nop
 800595c:	0800c074 	.word	0x0800c074

08005960 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8005960:	b510      	push	{r4, lr}
 8005962:	4604      	mov	r4, r0
    }
 8005964:	f7ff fff0 	bl	8005948 <_ZN4blib6AnalogD1Ev>
 8005968:	4620      	mov	r0, r4
 800596a:	2148      	movs	r1, #72	; 0x48
 800596c:	f000 fffa 	bl	8006964 <_ZdlPvj>
 8005970:	4620      	mov	r0, r4
 8005972:	bd10      	pop	{r4, pc}

08005974 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8005974:	1d01      	adds	r1, r0, #4
 8005976:	2205      	movs	r2, #5
 8005978:	6980      	ldr	r0, [r0, #24]
 800597a:	f7fd bf7f 	b.w	800387c <HAL_ADC_Start_DMA>
	...

08005980 <_ZN4blib6AnalogC1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8005980:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <_ZN4blib6AnalogC1Ev+0x28>)
 8005982:	b510      	push	{r4, lr}
 8005984:	2214      	movs	r2, #20
 8005986:	4604      	mov	r4, r0
 8005988:	2100      	movs	r1, #0
 800598a:	f840 3b04 	str.w	r3, [r0], #4
 800598e:	f002 faac 	bl	8007eea <memset>
 8005992:	4b06      	ldr	r3, [pc, #24]	; (80059ac <_ZN4blib6AnalogC1Ev+0x2c>)
 8005994:	61a3      	str	r3, [r4, #24]
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <_ZN4blib6AnalogC1Ev+0x30>)
 8005998:	61e3      	str	r3, [r4, #28]
 800599a:	2300      	movs	r3, #0
        sampling();
 800599c:	4620      	mov	r0, r4
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 800599e:	6463      	str	r3, [r4, #68]	; 0x44
        sampling();
 80059a0:	f7ff ffe8 	bl	8005974 <_ZN4blib6Analog8samplingEv>
    }
 80059a4:	4620      	mov	r0, r4
 80059a6:	bd10      	pop	{r4, pc}
 80059a8:	0800c074 	.word	0x0800c074
 80059ac:	20000264 	.word	0x20000264
 80059b0:	200002ac 	.word	0x200002ac

080059b4 <_ZNK4blib6Analog15getSolarVoltageEv>:
    }

    float Analog::getSolarVoltage() const
    {
        return mVin;
    }
 80059b4:	ed90 0a08 	vldr	s0, [r0, #32]
 80059b8:	4770      	bx	lr

080059ba <_ZNK4blib6Analog15getSolarCurrentEv>:
    float Analog::getSolarCurrent() const
    {
        return mIin;
    }
 80059ba:	ed90 0a09 	vldr	s0, [r0, #36]	; 0x24
 80059be:	4770      	bx	lr

080059c0 <_ZNK4blib6Analog7getVoutEv>:
    float Analog::getVout() const
    {
        return mVout;
    }
 80059c0:	ed90 0a0a 	vldr	s0, [r0, #40]	; 0x28
 80059c4:	4770      	bx	lr

080059c6 <_ZNK4blib6Analog7getIoutEv>:
    float Analog::getIout() const
    {
        return mIout;
    }
 80059c6:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 80059ca:	4770      	bx	lr

080059cc <_ZNK4blib6Analog7getTempEv>:
    float Analog::getTemp() const
    {
        return mTemp;
    }
 80059cc:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80059d0:	4770      	bx	lr
 80059d2:	0000      	movs	r0, r0
 80059d4:	0000      	movs	r0, r0
	...

080059d8 <_ZN4blib6Analog14calTemperatureEm>:
    {
        const double A = 0.003354016f;
        const double B = 0.0002569850f;
        const double C = 0.000002620131f;

        float voltage = ((float) adcValue / 4095) * 3.3;
 80059d8:	ee07 1a90 	vmov	s15, r1
 80059dc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005aa8 <_ZN4blib6Analog14calTemperatureEm+0xd0>
 80059e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    {
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        float voltage = ((float) adcValue / 4095) * 3.3;
 80059e6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80059ea:	ee17 0a90 	vmov	r0, s15
 80059ee:	f7fa fdab 	bl	8000548 <__aeabi_f2d>
 80059f2:	a325      	add	r3, pc, #148	; (adr r3, 8005a88 <_ZN4blib6Analog14calTemperatureEm+0xb0>)
 80059f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f8:	f7fa fdfe 	bl	80005f8 <__aeabi_dmul>
 80059fc:	f7fb f8f4 	bl	8000be8 <__aeabi_d2f>
        float resistance = (3.3f * 10000.0f / voltage) - 10000.0f;
 8005a00:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8005aac <_ZN4blib6Analog14calTemperatureEm+0xd4>
 8005a04:	ee07 0a10 	vmov	s14, r0
 8005a08:	ee87 7a87 	vdiv.f32	s14, s15, s14

        float logResistance = log(resistance);
 8005a0c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005ab0 <_ZN4blib6Analog14calTemperatureEm+0xd8>
 8005a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a14:	ee17 0a90 	vmov	r0, s15
 8005a18:	f7fa fd96 	bl	8000548 <__aeabi_f2d>
 8005a1c:	ec41 0b10 	vmov	d0, r0, r1
 8005a20:	f000 ffce 	bl	80069c0 <log>
 8005a24:	ec51 0b10 	vmov	r0, r1, d0
 8005a28:	f7fb f8de 	bl	8000be8 <__aeabi_d2f>
        float reciprocalTemperature = A + (B * logResistance)
 8005a2c:	f7fa fd8c 	bl	8000548 <__aeabi_f2d>
                + (C * logResistance * logResistance * logResistance);
 8005a30:	a317      	add	r3, pc, #92	; (adr r3, 8005a90 <_ZN4blib6Analog14calTemperatureEm+0xb8>)
 8005a32:	e9d3 2300 	ldrd	r2, r3, [r3]
        float reciprocalTemperature = A + (B * logResistance)
 8005a36:	4604      	mov	r4, r0
 8005a38:	460d      	mov	r5, r1
                + (C * logResistance * logResistance * logResistance);
 8005a3a:	f7fa fddd 	bl	80005f8 <__aeabi_dmul>
 8005a3e:	4622      	mov	r2, r4
 8005a40:	462b      	mov	r3, r5
 8005a42:	f7fa fdd9 	bl	80005f8 <__aeabi_dmul>
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f7fa fdd5 	bl	80005f8 <__aeabi_dmul>
        float reciprocalTemperature = A + (B * logResistance)
 8005a4e:	a312      	add	r3, pc, #72	; (adr r3, 8005a98 <_ZN4blib6Analog14calTemperatureEm+0xc0>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
                + (C * logResistance * logResistance * logResistance);
 8005a54:	4606      	mov	r6, r0
 8005a56:	460f      	mov	r7, r1
        float reciprocalTemperature = A + (B * logResistance)
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fdcc 	bl	80005f8 <__aeabi_dmul>
 8005a60:	a30f      	add	r3, pc, #60	; (adr r3, 8005aa0 <_ZN4blib6Analog14calTemperatureEm+0xc8>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fa fc11 	bl	800028c <__adddf3>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
                + (C * logResistance * logResistance * logResistance);
 8005a6e:	4630      	mov	r0, r6
 8005a70:	4639      	mov	r1, r7
 8005a72:	f7fa fc0b 	bl	800028c <__adddf3>
        float reciprocalTemperature = A + (B * logResistance)
 8005a76:	f7fb f8b7 	bl	8000be8 <__aeabi_d2f>

        float temperature = 1.0f / reciprocalTemperature;
        return temperature;
    }
 8005a7a:	ee07 0a90 	vmov	s15, r0
 8005a7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005a82:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8005a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a88:	66666666 	.word	0x66666666
 8005a8c:	400a6666 	.word	0x400a6666
 8005a90:	40000000 	.word	0x40000000
 8005a94:	3ec5fab0 	.word	0x3ec5fab0
 8005a98:	20000000 	.word	0x20000000
 8005a9c:	3f30d77e 	.word	0x3f30d77e
 8005aa0:	a0000000 	.word	0xa0000000
 8005aa4:	3f6b79e1 	.word	0x3f6b79e1
 8005aa8:	457ff000 	.word	0x457ff000
 8005aac:	4700e800 	.word	0x4700e800
 8005ab0:	461c4000 	.word	0x461c4000
 8005ab4:	00000000 	.word	0x00000000

08005ab8 <_ZN4blib6Analog15calSolarVoltageEm>:
    {
 8005ab8:	b508      	push	{r3, lr}
 8005aba:	ed2d 8b02 	vpush	{d8}
 8005abe:	ee08 1a10 	vmov	s16, r1
        return Constant::getInstance().k_voltage_divider_input * ((float) adcValue / 4095) * 3.3;
 8005ac2:	f7fc fffb 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005ac6:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8005aca:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005b08 <_ZN4blib6Analog15calSolarVoltageEm+0x50>
 8005ace:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005ad2:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8005ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ada:	ee17 0a90 	vmov	r0, s15
 8005ade:	f7fa fd33 	bl	8000548 <__aeabi_f2d>
 8005ae2:	a307      	add	r3, pc, #28	; (adr r3, 8005b00 <_ZN4blib6Analog15calSolarVoltageEm+0x48>)
 8005ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae8:	f7fa fd86 	bl	80005f8 <__aeabi_dmul>
 8005aec:	f7fb f87c 	bl	8000be8 <__aeabi_d2f>
    }
 8005af0:	ecbd 8b02 	vpop	{d8}
 8005af4:	ee00 0a10 	vmov	s0, r0
 8005af8:	bd08      	pop	{r3, pc}
 8005afa:	bf00      	nop
 8005afc:	f3af 8000 	nop.w
 8005b00:	66666666 	.word	0x66666666
 8005b04:	400a6666 	.word	0x400a6666
 8005b08:	457ff000 	.word	0x457ff000
 8005b0c:	00000000 	.word	0x00000000

08005b10 <_ZN4blib6Analog15calSolarCurrentEm>:
    {
 8005b10:	b508      	push	{r3, lr}
 8005b12:	ed2d 8b02 	vpush	{d8}
 8005b16:	ee08 1a10 	vmov	s16, r1
        float voltage = Constant::getInstance().k_current_divider_input * ((float) adcValue / 4095)
 8005b1a:	f7fc ffcf 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005b1e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005b78 <_ZN4blib6Analog15calSolarCurrentEm+0x68>
 8005b22:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8005b26:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005b2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005b2e:	ee17 0a90 	vmov	r0, s15
 8005b32:	f7fa fd09 	bl	8000548 <__aeabi_f2d>
                * 3.3;
 8005b36:	a30c      	add	r3, pc, #48	; (adr r3, 8005b68 <_ZN4blib6Analog15calSolarCurrentEm+0x58>)
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f7fa fd5c 	bl	80005f8 <__aeabi_dmul>
 8005b40:	f7fb f852 	bl	8000be8 <__aeabi_d2f>
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8005b44:	f7fa fd00 	bl	8000548 <__aeabi_f2d>
 8005b48:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <_ZN4blib6Analog15calSolarCurrentEm+0x6c>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f7fa fb9c 	bl	8000288 <__aeabi_dsub>
 8005b50:	a307      	add	r3, pc, #28	; (adr r3, 8005b70 <_ZN4blib6Analog15calSolarCurrentEm+0x60>)
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fe79 	bl	800084c <__aeabi_ddiv>
 8005b5a:	f7fb f845 	bl	8000be8 <__aeabi_d2f>
    }
 8005b5e:	ecbd 8b02 	vpop	{d8}
 8005b62:	ee00 0a10 	vmov	s0, r0
 8005b66:	bd08      	pop	{r3, pc}
 8005b68:	66666666 	.word	0x66666666
 8005b6c:	400a6666 	.word	0x400a6666
 8005b70:	a0000000 	.word	0xa0000000
 8005b74:	3fb99999 	.word	0x3fb99999
 8005b78:	457ff000 	.word	0x457ff000
 8005b7c:	40040000 	.word	0x40040000

08005b80 <_ZN4blib6Analog17calBatteryVoltageEm>:
    {
 8005b80:	b508      	push	{r3, lr}
 8005b82:	ed2d 8b02 	vpush	{d8}
 8005b86:	ee08 1a10 	vmov	s16, r1
        return Constant::getInstance().k_voltage_divider_output * ((float) adcValue / 4095) * 3.3;
 8005b8a:	f7fc ff97 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005b8e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8005b92:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005bd0 <_ZN4blib6Analog17calBatteryVoltageEm+0x50>
 8005b96:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005b9a:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8005b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba2:	ee17 0a90 	vmov	r0, s15
 8005ba6:	f7fa fccf 	bl	8000548 <__aeabi_f2d>
 8005baa:	a307      	add	r3, pc, #28	; (adr r3, 8005bc8 <_ZN4blib6Analog17calBatteryVoltageEm+0x48>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f7fa fd22 	bl	80005f8 <__aeabi_dmul>
 8005bb4:	f7fb f818 	bl	8000be8 <__aeabi_d2f>
    }
 8005bb8:	ecbd 8b02 	vpop	{d8}
 8005bbc:	ee00 0a10 	vmov	s0, r0
 8005bc0:	bd08      	pop	{r3, pc}
 8005bc2:	bf00      	nop
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	66666666 	.word	0x66666666
 8005bcc:	400a6666 	.word	0x400a6666
 8005bd0:	457ff000 	.word	0x457ff000

08005bd4 <_ZN4blib6Analog10readAnalogEv>:
    {
 8005bd4:	b510      	push	{r4, lr}
        mVin = calSolarVoltage(mAdcValues[2]);
 8005bd6:	68c1      	ldr	r1, [r0, #12]
    {
 8005bd8:	ed2d 8b04 	vpush	{d8-d9}
 8005bdc:	4604      	mov	r4, r0
        mVin = calSolarVoltage(mAdcValues[2]);
 8005bde:	f7ff ff6b 	bl	8005ab8 <_ZN4blib6Analog15calSolarVoltageEm>
        mIin = calSolarCurrent(mAdcValues[2]);
 8005be2:	68e1      	ldr	r1, [r4, #12]
        mVin = calSolarVoltage(mAdcValues[2]);
 8005be4:	ed84 0a08 	vstr	s0, [r4, #32]
        mIin = calSolarCurrent(mAdcValues[2]);
 8005be8:	4620      	mov	r0, r4
 8005bea:	f7ff ff91 	bl	8005b10 <_ZN4blib6Analog15calSolarCurrentEm>
        mVout = calBatteryVoltage(mAdcValues[4]);
 8005bee:	6961      	ldr	r1, [r4, #20]
        mIin = calSolarCurrent(mAdcValues[2]);
 8005bf0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        mVout = calBatteryVoltage(mAdcValues[4]);
 8005bf4:	4620      	mov	r0, r4
 8005bf6:	f7ff ffc3 	bl	8005b80 <_ZN4blib6Analog17calBatteryVoltageEm>
        mIout = calBatteryCurrent(mAdcValues[0]);
 8005bfa:	6861      	ldr	r1, [r4, #4]
        mVout = calBatteryVoltage(mAdcValues[4]);
 8005bfc:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
        mIout = calBatteryCurrent(mAdcValues[0]);
 8005c00:	4620      	mov	r0, r4
 8005c02:	f7ff ff85 	bl	8005b10 <_ZN4blib6Analog15calSolarCurrentEm>
        mTemp = calTemperature(mAdcValues[1]);
 8005c06:	68a1      	ldr	r1, [r4, #8]
        mIout = calBatteryCurrent(mAdcValues[0]);
 8005c08:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
        mTemp = calTemperature(mAdcValues[1]);
 8005c0c:	4620      	mov	r0, r4
        mIout = calBatteryCurrent(mAdcValues[0]);
 8005c0e:	eeb0 8a40 	vmov.f32	s16, s0
        mTemp = calTemperature(mAdcValues[1]);
 8005c12:	f7ff fee1 	bl	80059d8 <_ZN4blib6Analog14calTemperatureEm>
        if (mVin <= 3 && mVout < 3)
 8005c16:	edd4 7a08 	vldr	s15, [r4, #32]
 8005c1a:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
        mTemp = calTemperature(mAdcValues[1]);
 8005c1e:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
        if (mVin <= 3 && mVout < 3)
 8005c22:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2e:	d837      	bhi.n	8005ca0 <_ZN4blib6Analog10readAnalogEv+0xcc>
 8005c30:	eef4 8ac7 	vcmpe.f32	s17, s14
 8005c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c38:	d532      	bpl.n	8005ca0 <_ZN4blib6Analog10readAnalogEv+0xcc>
            mInputSource = PowerSrc::USB_PORT;
 8005c3a:	2300      	movs	r3, #0
            mInputSource = PowerSrc::BATTERY;
 8005c3c:	6463      	str	r3, [r4, #68]	; 0x44
        mPin = mVin * mIin;
 8005c3e:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
        mOutputDeviation = (mVout / Constant::getInstance().k_voltage_battery_max) * 100.0f;
 8005c42:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 8005cb4 <_ZN4blib6Analog10readAnalogEv+0xe0>
        mPin = mVin * mIin;
 8005c46:	ee27 7a27 	vmul.f32	s14, s14, s15
        mPout = mVin * mIout;    // Cong suat ra tinh bang gia tri do duoc cua cam bien
 8005c4a:	ee28 8a27 	vmul.f32	s16, s16, s15
        mPin = mVin * mIin;
 8005c4e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
        mPout = mVin * mIout;    // Cong suat ra tinh bang gia tri do duoc cua cam bien
 8005c52:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
        mOutputDeviation = (mVout / Constant::getInstance().k_voltage_battery_max) * 100.0f;
 8005c56:	f7fc ff31 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005c5a:	ed90 7a01 	vldr	s14, [r0, #4]
 8005c5e:	eec8 7a87 	vdiv.f32	s15, s17, s14
        mBatteryPercent = ((mVout - Constant::getInstance().k_voltage_battery_min)
 8005c62:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
        mOutputDeviation = (mVout / Constant::getInstance().k_voltage_battery_max) * 100.0f;
 8005c66:	ee67 7a89 	vmul.f32	s15, s15, s18
 8005c6a:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
        mBatteryPercent = ((mVout - Constant::getInstance().k_voltage_battery_min)
 8005c6e:	f7fc ff25 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005c72:	edd0 7a02 	vldr	s15, [r0, #8]
 8005c76:	ee78 8ae7 	vsub.f32	s17, s17, s15
                / (Constant::getInstance().k_voltage_battery_max
 8005c7a:	f7fc ff1f 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005c7e:	ed90 8a01 	vldr	s16, [r0, #4]
                        - Constant::getInstance().k_voltage_battery_min)) * 100;
 8005c82:	f7fc ff1b 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005c86:	edd0 7a02 	vldr	s15, [r0, #8]
 8005c8a:	ee38 7a67 	vsub.f32	s14, s16, s15
                / (Constant::getInstance().k_voltage_battery_max
 8005c8e:	eec8 7a87 	vdiv.f32	s15, s17, s14
                        - Constant::getInstance().k_voltage_battery_min)) * 100;
 8005c92:	ee67 7a89 	vmul.f32	s15, s15, s18
    }
 8005c96:	ecbd 8b04 	vpop	{d8-d9}
        mBatteryPercent = ((mVout - Constant::getInstance().k_voltage_battery_min)
 8005c9a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    }
 8005c9e:	bd10      	pop	{r4, pc}
        else if (mVin > mVout)
 8005ca0:	eef4 7ae8 	vcmpe.f32	s15, s17
 8005ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca8:	dd01      	ble.n	8005cae <_ZN4blib6Analog10readAnalogEv+0xda>
            mInputSource = PowerSrc::SOLAR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7c6      	b.n	8005c3c <_ZN4blib6Analog10readAnalogEv+0x68>
        else if (mVin < mVout)
 8005cae:	d5c6      	bpl.n	8005c3e <_ZN4blib6Analog10readAnalogEv+0x6a>
            mInputSource = PowerSrc::BATTERY;
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	e7c3      	b.n	8005c3c <_ZN4blib6Analog10readAnalogEv+0x68>
 8005cb4:	42c80000 	.word	0x42c80000

08005cb8 <_ZN4blib6ButtonD1Ev>:

    }
    Button::~Button()
    {

    }
 8005cb8:	4770      	bx	lr

08005cba <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 8005cba:	b510      	push	{r4, lr}
    }
 8005cbc:	2108      	movs	r1, #8
    Button::~Button()
 8005cbe:	4604      	mov	r4, r0
    }
 8005cc0:	f000 fe50 	bl	8006964 <_ZdlPvj>
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	bd10      	pop	{r4, pc}

08005cc8 <_ZN4blib6ButtonC1Ev>:
    Button::Button()
 8005cc8:	4b01      	ldr	r3, [pc, #4]	; (8005cd0 <_ZN4blib6ButtonC1Ev+0x8>)
 8005cca:	6003      	str	r3, [r0, #0]
    }
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	0800c084 	.word	0x0800c084

08005cd4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
        mLatestPressedButton = button;
 8005cd4:	6041      	str	r1, [r0, #4]
    }
 8005cd6:	4770      	bx	lr

08005cd8 <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
        return mLatestPressedButton;
    }
 8005cd8:	6840      	ldr	r0, [r0, #4]
 8005cda:	4770      	bx	lr

08005cdc <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
//        LcdSimulate::getInstance().impl_ClearScreen();
    }
 8005cdc:	4770      	bx	lr

08005cde <_ZN4blib13ChargeControlD1Ev>:
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
    }
    ChargeControl::~ChargeControl()
    {

    }
 8005cde:	4770      	bx	lr

08005ce0 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 8005ce0:	b510      	push	{r4, lr}
    }
 8005ce2:	2124      	movs	r1, #36	; 0x24
    ChargeControl::~ChargeControl()
 8005ce4:	4604      	mov	r4, r0
    }
 8005ce6:	f000 fe3d 	bl	8006964 <_ZdlPvj>
 8005cea:	4620      	mov	r0, r4
 8005cec:	bd10      	pop	{r4, pc}
	...

08005cf0 <_ZN4blib13ChargeControl10predictPwmEv>:
    {
        HAL_GPIO_WritePin(INVERTER_CTRL_GPIO_Port, INVERTER_CTRL_Pin, GPIO_PIN_SET);
    }

    uint32_t ChargeControl::predictPwm()
    {
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4605      	mov	r5, r0
        auto &analog = Analog::getInstance();
 8005cf4:	f7fb fa2e 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>

        if (analog.mVin <= 0.0001f)
 8005cf8:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005d54 <_ZN4blib13ChargeControl10predictPwmEv+0x64>
 8005cfc:	ed90 7a08 	vldr	s14, [r0, #32]
 8005d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        auto &analog = Analog::getInstance();
 8005d08:	4604      	mov	r4, r0
        if (analog.mVin <= 0.0001f)
 8005d0a:	d920      	bls.n	8005d4e <_ZN4blib13ChargeControl10predictPwmEv+0x5e>
            mPredictPwm = 0;
        }
        else
        {
            // 99.5% * k_pwm_max * (Vout/Vin)
            mPredictPwm = (Constant::getInstance().k_predict_pwm_margin
 8005d0c:	f7fc fed6 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    * Constant::getInstance().k_pwm_max * analog.mVout) / (100.0f * analog.mVin);
 8005d10:	f7fc fed4 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005d14:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8005d18:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005d58 <_ZN4blib13ChargeControl10predictPwmEv+0x68>
 8005d1c:	ed94 7a08 	vldr	s14, [r4, #32]
 8005d20:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005d24:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005d5c <_ZN4blib13ChargeControl10predictPwmEv+0x6c>
 8005d28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
            mPredictPwm = (Constant::getInstance().k_predict_pwm_margin
 8005d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d34:	ee17 4a90 	vmov	r4, s15
            mPredictPwm = 0;
 8005d38:	61ac      	str	r4, [r5, #24]
        }

        mPredictPwm = constrainValue(mPredictPwm, (uint32_t) 0,
                Constant::getInstance().k_pwm_max_limited);
 8005d3a:	f7fc febf 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005d3e:	f640 6306 	movw	r3, #3590	; 0xe06
 8005d42:	429c      	cmp	r4, r3
 8005d44:	4620      	mov	r0, r4
 8005d46:	bf28      	it	cs
 8005d48:	4618      	movcs	r0, r3
        mPredictPwm = constrainValue(mPredictPwm, (uint32_t) 0,
 8005d4a:	61a8      	str	r0, [r5, #24]

        return mPredictPwm;
    }
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	2400      	movs	r4, #0
 8005d50:	e7f2      	b.n	8005d38 <_ZN4blib13ChargeControl10predictPwmEv+0x48>
 8005d52:	bf00      	nop
 8005d54:	38d1b717 	.word	0x38d1b717
 8005d58:	48ae6aa0 	.word	0x48ae6aa0
 8005d5c:	42c80000 	.word	0x42c80000

08005d60 <_ZN4blib13ChargeControl10buckEnableEv>:
    {
 8005d60:	b510      	push	{r4, lr}
        LOGI();
 8005d62:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <_ZN4blib13ChargeControl10buckEnableEv+0x30>)
 8005d64:	490b      	ldr	r1, [pc, #44]	; (8005d94 <_ZN4blib13ChargeControl10buckEnableEv+0x34>)
    {
 8005d66:	4604      	mov	r4, r0
        LOGI();
 8005d68:	2292      	movs	r2, #146	; 0x92
 8005d6a:	480b      	ldr	r0, [pc, #44]	; (8005d98 <_ZN4blib13ChargeControl10buckEnableEv+0x38>)
 8005d6c:	f7fb fa7a 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        mBuckEnable = val;
 8005d70:	2301      	movs	r3, #1
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8005d72:	480a      	ldr	r0, [pc, #40]	; (8005d9c <_ZN4blib13ChargeControl10buckEnableEv+0x3c>)
        mBuckEnable = val;
 8005d74:	7463      	strb	r3, [r4, #17]
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8005d76:	2200      	movs	r2, #0
 8005d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005d7c:	f7fe fa50 	bl	8004220 <HAL_GPIO_WritePin>
    }
 8005d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8005d84:	4806      	ldr	r0, [pc, #24]	; (8005da0 <_ZN4blib13ChargeControl10buckEnableEv+0x40>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	2110      	movs	r1, #16
 8005d8a:	f7fe ba49 	b.w	8004220 <HAL_GPIO_WritePin>
 8005d8e:	bf00      	nop
 8005d90:	0800c08c 	.word	0x0800c08c
 8005d94:	0800c097 	.word	0x0800c097
 8005d98:	0800c0a9 	.word	0x0800c0a9
 8005d9c:	40020800 	.word	0x40020800
 8005da0:	40020c00 	.word	0x40020c00

08005da4 <_ZN4blib13ChargeControl8pwmWriteEv>:
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
    }

    void ChargeControl::pwmWrite()
    {
        if (mOutputMode == OutputMode::PSU)
 8005da4:	68c3      	ldr	r3, [r0, #12]
    {
 8005da6:	b570      	push	{r4, r5, r6, lr}
 8005da8:	4604      	mov	r4, r0
        if (mOutputMode == OutputMode::PSU)
 8005daa:	b983      	cbnz	r3, 8005dce <_ZN4blib13ChargeControl8pwmWriteEv+0x2a>
        {
            mPwm = constrainValue(mPwm, (uint32_t) 0, Constant::getInstance().k_pwm_max_limited);
 8005dac:	6945      	ldr	r5, [r0, #20]
 8005dae:	f7fc fe85 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005db2:	f640 6306 	movw	r3, #3590	; 0xe06
 8005db6:	429d      	cmp	r5, r3
 8005db8:	bf94      	ite	ls
 8005dba:	6165      	strls	r5, [r4, #20]
 8005dbc:	6163      	strhi	r3, [r4, #20]
        else
        {

        }

        buckEnable();
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f7ff ffce 	bl	8005d60 <_ZN4blib13ChargeControl10buckEnableEv>

        uint32_t channel = TIM_CHANNEL_1;    // xxx: Set as Default

        if (channel == TIM_CHANNEL_1)
        {
            mHtim->Instance->CCR1 = mPwm;
 8005dc4:	6863      	ldr	r3, [r4, #4]
 8005dc6:	6962      	ldr	r2, [r4, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	635a      	str	r2, [r3, #52]	; 0x34
        }
        else if (channel == TIM_CHANNEL_4)
        {
            mHtim->Instance->CCR4 = mPwm;
        }
    }
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
        else if (mOutputMode == OutputMode::CHARGER)
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d1f5      	bne.n	8005dbe <_ZN4blib13ChargeControl8pwmWriteEv+0x1a>
            uint32_t pPwm = predictPwm();
 8005dd2:	f7ff ff8d 	bl	8005cf0 <_ZN4blib13ChargeControl10predictPwmEv>
            mPwm = constrainValue(mPwm, pPwm, Constant::getInstance().k_pwm_max_limited);
 8005dd6:	6966      	ldr	r6, [r4, #20]
            uint32_t pPwm = predictPwm();
 8005dd8:	4605      	mov	r5, r0
            mPwm = constrainValue(mPwm, pPwm, Constant::getInstance().k_pwm_max_limited);
 8005dda:	f7fc fe6f 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
        if (value < minVal)
 8005dde:	42ae      	cmp	r6, r5
 8005de0:	d304      	bcc.n	8005dec <_ZN4blib13ChargeControl8pwmWriteEv+0x48>
 8005de2:	f640 6506 	movw	r5, #3590	; 0xe06
 8005de6:	42b5      	cmp	r5, r6
 8005de8:	bf28      	it	cs
 8005dea:	4635      	movcs	r5, r6
            mPwm = constrainValue(mPwm, pPwm, Constant::getInstance().k_pwm_max_limited);
 8005dec:	6165      	str	r5, [r4, #20]
 8005dee:	e7e6      	b.n	8005dbe <_ZN4blib13ChargeControl8pwmWriteEv+0x1a>

08005df0 <_ZN4blib13ChargeControl11buckDisableEv>:
    {
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4604      	mov	r4, r0
        LOGI();
 8005df4:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <_ZN4blib13ChargeControl11buckDisableEv+0x30>)
 8005df6:	490b      	ldr	r1, [pc, #44]	; (8005e24 <_ZN4blib13ChargeControl11buckDisableEv+0x34>)
 8005df8:	480b      	ldr	r0, [pc, #44]	; (8005e28 <_ZN4blib13ChargeControl11buckDisableEv+0x38>)
 8005dfa:	229b      	movs	r2, #155	; 0x9b
        mBuckEnable = val;
 8005dfc:	2500      	movs	r5, #0
        LOGI();
 8005dfe:	f7fb fa31 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 8005e02:	480a      	ldr	r0, [pc, #40]	; (8005e2c <_ZN4blib13ChargeControl11buckDisableEv+0x3c>)
        mBuckEnable = val;
 8005e04:	7465      	strb	r5, [r4, #17]
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 8005e06:	2201      	movs	r2, #1
 8005e08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e0c:	f7fe fa08 	bl	8004220 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8005e10:	4807      	ldr	r0, [pc, #28]	; (8005e30 <_ZN4blib13ChargeControl11buckDisableEv+0x40>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	2110      	movs	r1, #16
 8005e16:	f7fe fa03 	bl	8004220 <HAL_GPIO_WritePin>
        mPwm = 0;
 8005e1a:	6165      	str	r5, [r4, #20]
    }
 8005e1c:	bd38      	pop	{r3, r4, r5, pc}
 8005e1e:	bf00      	nop
 8005e20:	0800c0b7 	.word	0x0800c0b7
 8005e24:	0800c097 	.word	0x0800c097
 8005e28:	0800c0a9 	.word	0x0800c0a9
 8005e2c:	40020800 	.word	0x40020800
 8005e30:	40020c00 	.word	0x40020c00

08005e34 <_ZN4blib13ChargeControlC1Ev>:
    ChargeControl::ChargeControl()
 8005e34:	b538      	push	{r3, r4, r5, lr}
 8005e36:	4b09      	ldr	r3, [pc, #36]	; (8005e5c <_ZN4blib13ChargeControlC1Ev+0x28>)
 8005e38:	6003      	str	r3, [r0, #0]
 8005e3a:	2500      	movs	r5, #0
 8005e3c:	4604      	mov	r4, r0
        mHtim = &htim2;
 8005e3e:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <_ZN4blib13ChargeControlC1Ev+0x2c>)
 8005e40:	6043      	str	r3, [r0, #4]
    ChargeControl::ChargeControl()
 8005e42:	8105      	strh	r5, [r0, #8]
 8005e44:	60c5      	str	r5, [r0, #12]
 8005e46:	8205      	strh	r5, [r0, #16]
        buckDisable();
 8005e48:	f7ff ffd2 	bl	8005df0 <_ZN4blib13ChargeControl11buckDisableEv>
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
 8005e4c:	6860      	ldr	r0, [r4, #4]
        mChargeState = false;
 8005e4e:	7265      	strb	r5, [r4, #9]
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
 8005e50:	4629      	mov	r1, r5
 8005e52:	f7ff fc21 	bl	8005698 <HAL_TIM_PWM_Start>
    }
 8005e56:	4620      	mov	r0, r4
 8005e58:	bd38      	pop	{r3, r4, r5, pc}
 8005e5a:	bf00      	nop
 8005e5c:	0800c0cc 	.word	0x0800c0cc
 8005e60:	2000038c 	.word	0x2000038c

08005e64 <_ZN4blib13ChargeControl3runEv>:
    {
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                    if (mInstance == nullptr)
 8005e66:	4e55      	ldr	r6, [pc, #340]	; (8005fbc <_ZN4blib13ChargeControl3runEv+0x158>)
 8005e68:	ed2d 8b02 	vpush	{d8}
 8005e6c:	4604      	mov	r4, r0
        auto &analog = Analog::getInstance();
 8005e6e:	f7fb f971 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8005e72:	6833      	ldr	r3, [r6, #0]
 8005e74:	4605      	mov	r5, r0
 8005e76:	b933      	cbnz	r3, 8005e86 <_ZN4blib13ChargeControl3runEv+0x22>
                        mInstance = new T();
 8005e78:	201c      	movs	r0, #28
 8005e7a:	f000 fd84 	bl	8006986 <_Znwj>
 8005e7e:	4607      	mov	r7, r0
 8005e80:	f000 f8aa 	bl	8005fd8 <_ZN4blib16DeviceProtectionC1Ev>
 8005e84:	6037      	str	r7, [r6, #0]
        if (devProtection.mERR > 0 || mChargePause == true)
 8005e86:	6833      	ldr	r3, [r6, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	dc01      	bgt.n	8005e92 <_ZN4blib13ChargeControl3runEv+0x2e>
 8005e8e:	7a23      	ldrb	r3, [r4, #8]
 8005e90:	b133      	cbz	r3, 8005ea0 <_ZN4blib13ChargeControl3runEv+0x3c>
    }
 8005e92:	ecbd 8b02 	vpop	{d8}
            buckDisable();
 8005e96:	4620      	mov	r0, r4
    }
 8005e98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            buckDisable();
 8005e9c:	f7ff bfa8 	b.w	8005df0 <_ZN4blib13ChargeControl11buckDisableEv>
                if (mMpptMode == false)    // CC-CV PSU mode : CC-CV only
 8005ea0:	7c23      	ldrb	r3, [r4, #16]
                    if (analog.mIout > Constant::getInstance().k_current_charging_max)
 8005ea2:	ed95 8a0b 	vldr	s16, [r5, #44]	; 0x2c
                if (mMpptMode == false)    // CC-CV PSU mode : CC-CV only
 8005ea6:	bb5b      	cbnz	r3, 8005f00 <_ZN4blib13ChargeControl3runEv+0x9c>
                    if (analog.mIout > Constant::getInstance().k_current_charging_max)
 8005ea8:	f7fc fe08 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005eac:	edd0 7a03 	vldr	s15, [r0, #12]
 8005eb0:	eef4 7ac8 	vcmpe.f32	s15, s16
 8005eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb8:	d502      	bpl.n	8005ec0 <_ZN4blib13ChargeControl3runEv+0x5c>
                        mPwm--;
 8005eba:	6963      	ldr	r3, [r4, #20]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	e017      	b.n	8005ef0 <_ZN4blib13ChargeControl3runEv+0x8c>
                    else if (analog.mVout > Constant::getInstance().k_voltage_battery_max)
 8005ec0:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
 8005ec4:	f7fc fdfa 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005ec8:	edd0 7a01 	vldr	s15, [r0, #4]
 8005ecc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed4:	dcf1      	bgt.n	8005eba <_ZN4blib13ChargeControl3runEv+0x56>
                    else if (analog.mVout < Constant::getInstance().k_voltage_battery_max)
 8005ed6:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
 8005eda:	f7fc fdef 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005ede:	edd0 7a01 	vldr	s15, [r0, #4]
 8005ee2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eea:	d502      	bpl.n	8005ef2 <_ZN4blib13ChargeControl3runEv+0x8e>
                        mPwm++;
 8005eec:	6963      	ldr	r3, [r4, #20]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	6163      	str	r3, [r4, #20]
    }
 8005ef2:	ecbd 8b02 	vpop	{d8}
                    pwmWrite();
 8005ef6:	4620      	mov	r0, r4
    }
 8005ef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    pwmWrite();
 8005efc:	f7ff bf52 	b.w	8005da4 <_ZN4blib13ChargeControl8pwmWriteEv>
                    if (analog.mIout > Constant::getInstance().k_current_charging_max)
 8005f00:	f7fc fddc 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005f04:	edd0 7a03 	vldr	s15, [r0, #12]
 8005f08:	eef4 7ac8 	vcmpe.f32	s15, s16
 8005f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f10:	d4d3      	bmi.n	8005eba <_ZN4blib13ChargeControl3runEv+0x56>
                    else if (analog.mVout > Constant::getInstance().k_voltage_battery_max)
 8005f12:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
 8005f16:	f7fc fdd1 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005f1a:	edd0 7a01 	vldr	s15, [r0, #4]
 8005f1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f26:	dcc8      	bgt.n	8005eba <_ZN4blib13ChargeControl3runEv+0x56>
                        if (analog.mPout > powerInputPrev && analog.mVin > voltageInputPrev)
 8005f28:	4f25      	ldr	r7, [pc, #148]	; (8005fc0 <_ZN4blib13ChargeControl3runEv+0x15c>)
 8005f2a:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
 8005f2e:	edd7 7a00 	vldr	s15, [r7]
 8005f32:	4e24      	ldr	r6, [pc, #144]	; (8005fc4 <_ZN4blib13ChargeControl3runEv+0x160>)
 8005f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f3c:	dd0c      	ble.n	8005f58 <_ZN4blib13ChargeControl3runEv+0xf4>
 8005f3e:	edd5 6a08 	vldr	s13, [r5, #32]
 8005f42:	ed96 7a00 	vldr	s14, [r6]
 8005f46:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f4e:	dd03      	ble.n	8005f58 <_ZN4blib13ChargeControl3runEv+0xf4>
                            mPwm--;
 8005f50:	6963      	ldr	r3, [r4, #20]
 8005f52:	3b01      	subs	r3, #1
                            mPwm++;
 8005f54:	6163      	str	r3, [r4, #20]
 8005f56:	e02c      	b.n	8005fb2 <_ZN4blib13ChargeControl3runEv+0x14e>
                        else if (analog.mPin > powerInputPrev && analog.mVin < voltageInputPrev)
 8005f58:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8005f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	d50b      	bpl.n	8005f7e <_ZN4blib13ChargeControl3runEv+0x11a>
 8005f66:	ed95 6a08 	vldr	s12, [r5, #32]
 8005f6a:	edd6 6a00 	vldr	s13, [r6]
 8005f6e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	d502      	bpl.n	8005f7e <_ZN4blib13ChargeControl3runEv+0x11a>
                            mPwm++;
 8005f78:	6963      	ldr	r3, [r4, #20]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	e7ea      	b.n	8005f54 <_ZN4blib13ChargeControl3runEv+0xf0>
                        else if (analog.mPin < powerInputPrev && analog.mVin > voltageInputPrev)
 8005f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f86:	dd09      	ble.n	8005f9c <_ZN4blib13ChargeControl3runEv+0x138>
 8005f88:	ed95 7a08 	vldr	s14, [r5, #32]
 8005f8c:	edd6 7a00 	vldr	s15, [r6]
 8005f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f98:	dcee      	bgt.n	8005f78 <_ZN4blib13ChargeControl3runEv+0x114>
                        else if (analog.mPin < powerInputPrev && analog.mVin < voltageInputPrev)
 8005f9a:	d4d9      	bmi.n	8005f50 <_ZN4blib13ChargeControl3runEv+0xec>
                        else if (analog.mVout < Constant::getInstance().k_voltage_battery_max)
 8005f9c:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
 8005fa0:	f7fc fd8c 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005fa4:	edd0 7a01 	vldr	s15, [r0, #4]
 8005fa8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb0:	d4e2      	bmi.n	8005f78 <_ZN4blib13ChargeControl3runEv+0x114>
                        powerInputPrev = analog.mPin;
 8005fb2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005fb4:	603b      	str	r3, [r7, #0]
                        voltageInputPrev = analog.mVin;
 8005fb6:	6a2b      	ldr	r3, [r5, #32]
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	e79a      	b.n	8005ef2 <_ZN4blib13ChargeControl3runEv+0x8e>
 8005fbc:	20000204 	.word	0x20000204
 8005fc0:	20000420 	.word	0x20000420
 8005fc4:	20000424 	.word	0x20000424

08005fc8 <_ZN4blib16DeviceProtectionD1Ev>:

    }
    DeviceProtection::~DeviceProtection()
    {

    }
 8005fc8:	4770      	bx	lr

08005fca <_ZN4blib16DeviceProtectionD0Ev>:
    DeviceProtection::~DeviceProtection()
 8005fca:	b510      	push	{r4, lr}
    }
 8005fcc:	211c      	movs	r1, #28
    DeviceProtection::~DeviceProtection()
 8005fce:	4604      	mov	r4, r0
    }
 8005fd0:	f000 fcc8 	bl	8006964 <_ZdlPvj>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	bd10      	pop	{r4, pc}

08005fd8 <_ZN4blib16DeviceProtectionC1Ev>:
    DeviceProtection::DeviceProtection()
 8005fd8:	4a03      	ldr	r2, [pc, #12]	; (8005fe8 <_ZN4blib16DeviceProtectionC1Ev+0x10>)
 8005fda:	6002      	str	r2, [r0, #0]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8005fe2:	6142      	str	r2, [r0, #20]
 8005fe4:	8302      	strh	r2, [r0, #24]
    }
 8005fe6:	4770      	bx	lr
 8005fe8:	0800c0dc 	.word	0x0800c0dc

08005fec <_ZN4blib16DeviceProtection15backFlowControlEv>:
    void DeviceProtection::backFlowControl()
    {
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	ed2d 8b02 	vpush	{d8}
 8005ff2:	4604      	mov	r4, r0
        auto &analog = Analog::getInstance();
 8005ff4:	f7fb f8ae 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8005ff8:	4605      	mov	r5, r0
        auto &chargeCtrl = ChargeControl::getInstance();
 8005ffa:	f7fb f8c3 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>

        // PSU Mode
        if (chargeCtrl.mOutputMode == OutputMode::PSU)    // PSU mode: force backflow MOSFET on
 8005ffe:	68c3      	ldr	r3, [r0, #12]
 8006000:	b96b      	cbnz	r3, 800601e <_ZN4blib16DeviceProtection15backFlowControlEv+0x32>
        {
            mBypassEnable = true;
 8006002:	2301      	movs	r3, #1
                mBypassEnable = true;
            }
            // Input Undervoltage - Turn off bypass MOSFET and prevent PV Backflow (SS)
            else
            {
                mBypassEnable = false;    // Vsolar < Vbattery -> Dien chay tu battery -> solar => khong cho xay ra van de nay
 8006004:	7223      	strb	r3, [r4, #8]
            }
        }

        HAL_GPIO_WritePin(BFC_GPIO_Port, BFC_Pin, ((GPIO_PinState) !mBypassEnable));
    }
 8006006:	ecbd 8b02 	vpop	{d8}
        HAL_GPIO_WritePin(BFC_GPIO_Port, BFC_Pin, ((GPIO_PinState) !mBypassEnable));
 800600a:	7a22      	ldrb	r2, [r4, #8]
 800600c:	480d      	ldr	r0, [pc, #52]	; (8006044 <_ZN4blib16DeviceProtection15backFlowControlEv+0x58>)
    }
 800600e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_GPIO_WritePin(BFC_GPIO_Port, BFC_Pin, ((GPIO_PinState) !mBypassEnable));
 8006012:	f082 0201 	eor.w	r2, r2, #1
 8006016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800601a:	f7fe b901 	b.w	8004220 <HAL_GPIO_WritePin>
        else if (chargeCtrl.mOutputMode == OutputMode::CHARGER)
 800601e:	2b01      	cmp	r3, #1
 8006020:	d1f1      	bne.n	8006006 <_ZN4blib16DeviceProtection15backFlowControlEv+0x1a>
            if (analog.mVin > analog.mVout + Constant::getInstance().k_voltage_dropout)
 8006022:	ed95 8a08 	vldr	s16, [r5, #32]
 8006026:	f7fc fd49 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800602a:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800602e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006032:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006036:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800603a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603e:	dce0      	bgt.n	8006002 <_ZN4blib16DeviceProtection15backFlowControlEv+0x16>
                mBypassEnable = false;    // Vsolar < Vbattery -> Dien chay tu battery -> solar => khong cho xay ra van de nay
 8006040:	2300      	movs	r3, #0
 8006042:	e7df      	b.n	8006004 <_ZN4blib16DeviceProtection15backFlowControlEv+0x18>
 8006044:	40020000 	.word	0x40020000

08006048 <_ZN4blib16DeviceProtection3runEv>:

    void DeviceProtection::run()
    {
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	ed2d 8b02 	vpush	{d8}
 800604e:	4604      	mov	r4, r0
        auto &analog = Analog::getInstance();
 8006050:	f7fb f880 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8006054:	4605      	mov	r5, r0
        auto &chargeCtrl = ChargeControl::getInstance();
 8006056:	f7fb f895 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>

        mERR = 0;
 800605a:	2700      	movs	r7, #0
        auto &chargeCtrl = ChargeControl::getInstance();
 800605c:	4606      	mov	r6, r0
        mERR = 0;
 800605e:	60e7      	str	r7, [r4, #12]

        backFlowControl();
 8006060:	4620      	mov	r0, r4
 8006062:	f7ff ffc3 	bl	8005fec <_ZN4blib16DeviceProtection15backFlowControlEv>

        // Nhiet do hien tai lon hon nhiet do max
        if (analog.getTemp() > Constant::getInstance().k_temperature_max)
 8006066:	4628      	mov	r0, r5
 8006068:	f7ff fcb0 	bl	80059cc <_ZNK4blib6Analog7getTempEv>
 800606c:	eeb0 8a40 	vmov.f32	s16, s0
 8006070:	f7fc fd24 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8006074:	edd0 7a04 	vldr	s15, [r0, #16]
 8006078:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800607c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            mOTE = true;    // Set co qua nhiet
 8006080:	bfc3      	ittte	gt
 8006082:	2301      	movgt	r3, #1
 8006084:	7663      	strbgt	r3, [r4, #25]
            mERR++;
 8006086:	68e3      	ldrgt	r3, [r4, #12]
        }
        else
        {
            mOTE = false;
 8006088:	7667      	strble	r7, [r4, #25]
            mERR++;
 800608a:	bfc4      	itt	gt
 800608c:	3301      	addgt	r3, #1
 800608e:	60e3      	strgt	r3, [r4, #12]
        }

        // Qua dong input
        if (analog.getSolarCurrent() > Constant::getInstance().k_current_in_absolute)
 8006090:	4628      	mov	r0, r5
 8006092:	f7ff fc92 	bl	80059ba <_ZNK4blib6Analog15getSolarCurrentEv>
 8006096:	eeb0 8a40 	vmov.f32	s16, s0
 800609a:	f7fc fd0f 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800609e:	eef3 7a0f 	vmov.f32	s15, #63	; 0x41f80000  31.0
 80060a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80060a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            mIOC = true;
 80060aa:	bfc3      	ittte	gt
 80060ac:	2301      	movgt	r3, #1
 80060ae:	7563      	strbgt	r3, [r4, #21]
            mERR++;
 80060b0:	68e3      	ldrgt	r3, [r4, #12]
        }
        else
        {
            mIOC = false;
 80060b2:	2300      	movle	r3, #0
            mERR++;
 80060b4:	bfc6      	itte	gt
 80060b6:	3301      	addgt	r3, #1
 80060b8:	60e3      	strgt	r3, [r4, #12]
            mIOC = false;
 80060ba:	7563      	strble	r3, [r4, #21]
        }

        // Qua dong output
        if (analog.getIout() > Constant::getInstance().k_current_out_absolute)
 80060bc:	4628      	mov	r0, r5
 80060be:	f7ff fc82 	bl	80059c6 <_ZNK4blib6Analog7getIoutEv>
 80060c2:	eeb0 8a40 	vmov.f32	s16, s0
 80060c6:	f7fc fcf9 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80060ca:	eddf 7a51 	vldr	s15, [pc, #324]	; 8006210 <_ZN4blib16DeviceProtection3runEv+0x1c8>
 80060ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80060d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            mOOC = true;
 80060d6:	bfc3      	ittte	gt
 80060d8:	2301      	movgt	r3, #1
 80060da:	7623      	strbgt	r3, [r4, #24]
            mERR++;
 80060dc:	68e3      	ldrgt	r3, [r4, #12]
        }
        else
        {
            mOOC = false;
 80060de:	2300      	movle	r3, #0
            mERR++;
 80060e0:	bfc6      	itte	gt
 80060e2:	3301      	addgt	r3, #1
 80060e4:	60e3      	strgt	r3, [r4, #12]
            mOOC = false;
 80060e6:	7623      	strble	r3, [r4, #24]
        }

        // Qua ap output
        if (analog.getVout()
 80060e8:	4628      	mov	r0, r5
 80060ea:	f7ff fc69 	bl	80059c0 <_ZNK4blib6Analog7getVoutEv>
 80060ee:	eeb0 8a40 	vmov.f32	s16, s0
                > Constant::getInstance().k_voltage_battery_max
                        + Constant::getInstance().k_voltage_battery_thresh)
 80060f2:	f7fc fce3 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                > Constant::getInstance().k_voltage_battery_max
 80060f6:	f7fc fce1 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                        + Constant::getInstance().k_voltage_battery_thresh)
 80060fa:	edd0 7a01 	vldr	s15, [r0, #4]
 80060fe:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8006102:	ee77 7a87 	vadd.f32	s15, s15, s14
        {
            mOOV = false;
        }

        // Qua dong input
        if (analog.getSolarVoltage() < Constant::getInstance().k_v_in_system_min
 8006106:	4628      	mov	r0, r5
        if (analog.getVout()
 8006108:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            mOOV = true;
 8006110:	bfc3      	ittte	gt
 8006112:	2301      	movgt	r3, #1
 8006114:	75e3      	strbgt	r3, [r4, #23]
            mERR++;
 8006116:	68e3      	ldrgt	r3, [r4, #12]
            mOOV = false;
 8006118:	2300      	movle	r3, #0
            mERR++;
 800611a:	bfc6      	itte	gt
 800611c:	3301      	addgt	r3, #1
 800611e:	60e3      	strgt	r3, [r4, #12]
            mOOV = false;
 8006120:	75e3      	strble	r3, [r4, #23]
        if (analog.getSolarVoltage() < Constant::getInstance().k_v_in_system_min
 8006122:	f7ff fc47 	bl	80059b4 <_ZNK4blib6Analog15getSolarVoltageEv>
                && analog.getVout() < Constant::getInstance().k_v_in_system_min)
 8006126:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
        if (analog.getSolarVoltage() < Constant::getInstance().k_v_in_system_min
 800612a:	eef0 8a40 	vmov.f32	s17, s0
 800612e:	f7fc fcc5 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                && analog.getVout() < Constant::getInstance().k_v_in_system_min)
 8006132:	eef4 8ac8 	vcmpe.f32	s17, s16
 8006136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613a:	d52f      	bpl.n	800619c <_ZN4blib16DeviceProtection3runEv+0x154>
 800613c:	4628      	mov	r0, r5
 800613e:	f7ff fc3f 	bl	80059c0 <_ZNK4blib6Analog7getVoutEv>
 8006142:	eef0 8a40 	vmov.f32	s17, s0
 8006146:	f7fc fcb9 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800614a:	eef4 8ac8 	vcmpe.f32	s17, s16
 800614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006152:	d523      	bpl.n	800619c <_ZN4blib16DeviceProtection3runEv+0x154>
        {
            mFLV = true;
 8006154:	2301      	movs	r3, #1
 8006156:	74a3      	strb	r3, [r4, #18]
            mERR++;
 8006158:	68e3      	ldr	r3, [r4, #12]
 800615a:	3301      	adds	r3, #1
 800615c:	60e3      	str	r3, [r4, #12]
        {
            mFLV = false;
        }

        //PSU MODE specific protection protocol
        if (chargeCtrl.mOutputMode == OutputMode::PSU)
 800615e:	68f6      	ldr	r6, [r6, #12]
 8006160:	bb16      	cbnz	r6, 80061a8 <_ZN4blib16DeviceProtection3runEv+0x160>
            //Clear recovery and battery not connected boolean identifiers
            mREC = false;
            mBNC = false;

            //IUV - INPUT UNDERVOLTAGE: Input voltage is below battery voltage (for psu mode only)
            if (analog.getSolarVoltage()
 8006162:	4628      	mov	r0, r5
            mBNC = false;
 8006164:	8226      	strh	r6, [r4, #16]
            if (analog.getSolarVoltage()
 8006166:	f7ff fc25 	bl	80059b4 <_ZNK4blib6Analog15getSolarVoltageEv>
 800616a:	eeb0 8a40 	vmov.f32	s16, s0
                    < Constant::getInstance().k_voltage_battery_max
                            + Constant::getInstance().k_voltage_dropout)
 800616e:	f7fc fca5 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    < Constant::getInstance().k_voltage_battery_max
 8006172:	f7fc fca3 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                            + Constant::getInstance().k_voltage_dropout)
 8006176:	edd0 7a01 	vldr	s15, [r0, #4]
 800617a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800617e:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (analog.getSolarVoltage()
 8006182:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618a:	d50a      	bpl.n	80061a2 <_ZN4blib16DeviceProtection3runEv+0x15a>
            {
                mIUV = true;
 800618c:	2301      	movs	r3, #1
 800618e:	74e3      	strb	r3, [r4, #19]
                mERR++;
 8006190:	68e3      	ldr	r3, [r4, #12]
 8006192:	3301      	adds	r3, #1
 8006194:	60e3      	str	r3, [r4, #12]
        else
        {

        }

    }
 8006196:	ecbd 8b02 	vpop	{d8}
 800619a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            mFLV = false;
 800619c:	2300      	movs	r3, #0
 800619e:	74a3      	strb	r3, [r4, #18]
 80061a0:	e7dd      	b.n	800615e <_ZN4blib16DeviceProtection3runEv+0x116>
                mIUV = false;
 80061a2:	2300      	movs	r3, #0
 80061a4:	74e3      	strb	r3, [r4, #19]
 80061a6:	e7f6      	b.n	8006196 <_ZN4blib16DeviceProtection3runEv+0x14e>
        else if (chargeCtrl.mOutputMode == OutputMode::CHARGER)
 80061a8:	2e01      	cmp	r6, #1
 80061aa:	d1f4      	bne.n	8006196 <_ZN4blib16DeviceProtection3runEv+0x14e>
            backFlowControl();
 80061ac:	4620      	mov	r0, r4
 80061ae:	f7ff ff1d 	bl	8005fec <_ZN4blib16DeviceProtection15backFlowControlEv>
            if (analog.getVout() < Constant::getInstance().k_v_in_system_min)
 80061b2:	4628      	mov	r0, r5
 80061b4:	f7ff fc04 	bl	80059c0 <_ZNK4blib6Analog7getVoutEv>
 80061b8:	eef0 8a40 	vmov.f32	s17, s0
 80061bc:	f7fc fc7e 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80061c0:	eef4 8ac8 	vcmpe.f32	s17, s16
 80061c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                mERR++;
 80061c8:	bf43      	ittte	mi
 80061ca:	68e3      	ldrmi	r3, [r4, #12]
                mBNC = true;
 80061cc:	7426      	strbmi	r6, [r4, #16]
                mERR++;
 80061ce:	3301      	addmi	r3, #1
                mBNC = false;
 80061d0:	2300      	movpl	r3, #0
                mERR++;
 80061d2:	bf4c      	ite	mi
 80061d4:	60e3      	strmi	r3, [r4, #12]
                mBNC = false;
 80061d6:	7423      	strbpl	r3, [r4, #16]
            if (analog.getSolarVoltage()
 80061d8:	4628      	mov	r0, r5
 80061da:	f7ff fbeb 	bl	80059b4 <_ZNK4blib6Analog15getSolarVoltageEv>
 80061de:	eeb0 8a40 	vmov.f32	s16, s0
                            + Constant::getInstance().k_voltage_dropout)
 80061e2:	f7fc fc6b 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    < Constant::getInstance().k_voltage_battery_max
 80061e6:	f7fc fc69 	bl	8002abc <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                            + Constant::getInstance().k_voltage_dropout)
 80061ea:	edd0 7a01 	vldr	s15, [r0, #4]
 80061ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061f2:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (analog.getSolarVoltage()
 80061f6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80061fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fe:	d5d0      	bpl.n	80061a2 <_ZN4blib16DeviceProtection3runEv+0x15a>
                mERR++;
 8006200:	68e3      	ldr	r3, [r4, #12]
                mIUV = true;
 8006202:	2201      	movs	r2, #1
                mERR++;
 8006204:	4413      	add	r3, r2
                mIUV = true;
 8006206:	74e2      	strb	r2, [r4, #19]
                mERR++;
 8006208:	60e3      	str	r3, [r4, #12]
                mREC = true;
 800620a:	7462      	strb	r2, [r4, #17]
    }
 800620c:	e7c3      	b.n	8006196 <_ZN4blib16DeviceProtection3runEv+0x14e>
 800620e:	bf00      	nop
 8006210:	42480000 	.word	0x42480000

08006214 <_ZN4blib3LcdD1Ev>:
        init();
    }
    Lcd::~Lcd()
    {

    }
 8006214:	4770      	bx	lr

08006216 <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 8006216:	b510      	push	{r4, lr}
    }
 8006218:	2114      	movs	r1, #20
    Lcd::~Lcd()
 800621a:	4604      	mov	r4, r0
    }
 800621c:	f000 fba2 	bl	8006964 <_ZdlPvj>
 8006220:	4620      	mov	r0, r4
 8006222:	bd10      	pop	{r4, pc}

08006224 <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 8006224:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t dataHigh = 0, dataLow = 0;
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 8006226:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
        dataLow = ((command << 4) & 0xF0);
 800622a:	0109      	lsls	r1, r1, #4
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 800622c:	f043 020c 	orr.w	r2, r3, #12
        dataLow = ((command << 4) & 0xF0);
 8006230:	b2c9      	uxtb	r1, r1
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 8006232:	f043 0308 	orr.w	r3, r3, #8
 8006236:	f88d 300d 	strb.w	r3, [sp, #13]
        data[2] = dataLow | 0x0C;
 800623a:	f041 030c 	orr.w	r3, r1, #12
 800623e:	f88d 300e 	strb.w	r3, [sp, #14]
        data[3] = dataLow | 0x08;
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 8006242:	2364      	movs	r3, #100	; 0x64
 8006244:	9300      	str	r3, [sp, #0]
        data[3] = dataLow | 0x08;
 8006246:	f041 0108 	orr.w	r1, r1, #8
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 800624a:	f88d 200c 	strb.w	r2, [sp, #12]
        data[3] = dataLow | 0x08;
 800624e:	f88d 100f 	strb.w	r1, [sp, #15]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 8006252:	2304      	movs	r3, #4
 8006254:	7b01      	ldrb	r1, [r0, #12]
 8006256:	6880      	ldr	r0, [r0, #8]
 8006258:	aa03      	add	r2, sp, #12
 800625a:	f7fe f96f 	bl	800453c <HAL_I2C_Master_Transmit>
    }
 800625e:	b005      	add	sp, #20
 8006260:	f85d fb04 	ldr.w	pc, [sp], #4

08006264 <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 8006264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t dataHigh = 0, dataLow = 0;
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 8006266:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
        dataLow = ((data << 4) & 0xF0);
 800626a:	0109      	lsls	r1, r1, #4
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 800626c:	f043 020d 	orr.w	r2, r3, #13
        dataLow = ((data << 4) & 0xF0);
 8006270:	b2c9      	uxtb	r1, r1
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 8006272:	f043 0309 	orr.w	r3, r3, #9
 8006276:	f88d 300d 	strb.w	r3, [sp, #13]
        dataBuf[2] = dataLow | 0x0D;
 800627a:	f041 030d 	orr.w	r3, r1, #13
 800627e:	f88d 300e 	strb.w	r3, [sp, #14]
        dataBuf[3] = dataLow | 0x09;
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 8006282:	2364      	movs	r3, #100	; 0x64
 8006284:	9300      	str	r3, [sp, #0]
        dataBuf[3] = dataLow | 0x09;
 8006286:	f041 0109 	orr.w	r1, r1, #9
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 800628a:	f88d 200c 	strb.w	r2, [sp, #12]
        dataBuf[3] = dataLow | 0x09;
 800628e:	f88d 100f 	strb.w	r1, [sp, #15]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 8006292:	2304      	movs	r3, #4
 8006294:	7b01      	ldrb	r1, [r0, #12]
 8006296:	6880      	ldr	r0, [r0, #8]
 8006298:	aa03      	add	r2, sp, #12
 800629a:	f7fe f94f 	bl	800453c <HAL_I2C_Master_Transmit>
    }
 800629e:	b005      	add	sp, #20
 80062a0:	f85d fb04 	ldr.w	pc, [sp], #4

080062a4 <_ZN4blib3Lcd11displayLineEhhPKc>:
    char ischar(const char *string)
    {
        return (string != nullptr) ? *(string) : ' ';
    }
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	4680      	mov	r8, r0
 80062aa:	b0a7      	sub	sp, #156	; 0x9c
 80062ac:	468a      	mov	sl, r1
 80062ae:	4691      	mov	r9, r2
        return (string != nullptr) ? *(string) : ' ';
 80062b0:	461c      	mov	r4, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d067      	beq.n	8006386 <_ZN4blib3Lcd11displayLineEhhPKc+0xe2>
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	9325      	str	r3, [sp, #148]	; 0x94
 80062ba:	7863      	ldrb	r3, [r4, #1]
 80062bc:	9322      	str	r3, [sp, #136]	; 0x88
 80062be:	78a3      	ldrb	r3, [r4, #2]
 80062c0:	9321      	str	r3, [sp, #132]	; 0x84
 80062c2:	78e3      	ldrb	r3, [r4, #3]
 80062c4:	9320      	str	r3, [sp, #128]	; 0x80
 80062c6:	7923      	ldrb	r3, [r4, #4]
 80062c8:	931f      	str	r3, [sp, #124]	; 0x7c
 80062ca:	7963      	ldrb	r3, [r4, #5]
 80062cc:	931e      	str	r3, [sp, #120]	; 0x78
 80062ce:	79a3      	ldrb	r3, [r4, #6]
 80062d0:	931d      	str	r3, [sp, #116]	; 0x74
 80062d2:	79e3      	ldrb	r3, [r4, #7]
 80062d4:	931c      	str	r3, [sp, #112]	; 0x70
 80062d6:	7a23      	ldrb	r3, [r4, #8]
 80062d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80062da:	7a63      	ldrb	r3, [r4, #9]
 80062dc:	931a      	str	r3, [sp, #104]	; 0x68
 80062de:	7b63      	ldrb	r3, [r4, #13]
 80062e0:	9316      	str	r3, [sp, #88]	; 0x58
 80062e2:	7ba3      	ldrb	r3, [r4, #14]
 80062e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80062e6:	7be3      	ldrb	r3, [r4, #15]
 80062e8:	7ca2      	ldrb	r2, [r4, #18]
 80062ea:	9318      	str	r3, [sp, #96]	; 0x60
 80062ec:	7c63      	ldrb	r3, [r4, #17]
 80062ee:	9319      	str	r3, [sp, #100]	; 0x64
 80062f0:	7aa5      	ldrb	r5, [r4, #10]
 80062f2:	7ae6      	ldrb	r6, [r4, #11]
 80062f4:	7b27      	ldrb	r7, [r4, #12]
 80062f6:	f894 b010 	ldrb.w	fp, [r4, #16]
                print("[>]  ");
 80062fa:	4833      	ldr	r0, [pc, #204]	; (80063c8 <_ZN4blib3Lcd11displayLineEhhPKc+0x124>)
 80062fc:	9224      	str	r2, [sp, #144]	; 0x90
 80062fe:	7ce1      	ldrb	r1, [r4, #19]
 8006300:	9123      	str	r1, [sp, #140]	; 0x8c
 8006302:	f7fa fe85 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8006306:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006308:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800630a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800630c:	9115      	str	r1, [sp, #84]	; 0x54
 800630e:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
 8006312:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006314:	9311      	str	r3, [sp, #68]	; 0x44
 8006316:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006318:	9310      	str	r3, [sp, #64]	; 0x40
 800631a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800631c:	9214      	str	r2, [sp, #80]	; 0x50
 800631e:	e9cd 730e 	strd	r7, r3, [sp, #56]	; 0x38
 8006322:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006324:	930b      	str	r3, [sp, #44]	; 0x2c
 8006326:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006328:	930a      	str	r3, [sp, #40]	; 0x28
 800632a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800632c:	9309      	str	r3, [sp, #36]	; 0x24
 800632e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006330:	9308      	str	r3, [sp, #32]
 8006332:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006334:	9307      	str	r3, [sp, #28]
 8006336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006338:	9306      	str	r3, [sp, #24]
 800633a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800633c:	9305      	str	r3, [sp, #20]
 800633e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 8006346:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006348:	9303      	str	r3, [sp, #12]
 800634a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800634c:	9302      	str	r3, [sp, #8]
 800634e:	4b1f      	ldr	r3, [pc, #124]	; (80063cc <_ZN4blib3Lcd11displayLineEhhPKc+0x128>)
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	235d      	movs	r3, #93	; 0x5d
 8006354:	4a1e      	ldr	r2, [pc, #120]	; (80063d0 <_ZN4blib3Lcd11displayLineEhhPKc+0x12c>)
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800635c:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <_ZN4blib3Lcd11displayLineEhhPKc+0x130>)
 800635e:	481e      	ldr	r0, [pc, #120]	; (80063d8 <_ZN4blib3Lcd11displayLineEhhPKc+0x134>)
 8006360:	f001 fd2c 	bl	8007dbc <sniprintf>
                print(mBuffer);
 8006364:	481c      	ldr	r0, [pc, #112]	; (80063d8 <_ZN4blib3Lcd11displayLineEhhPKc+0x134>)
 8006366:	f7fa fe53 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                print("\n");
 800636a:	481c      	ldr	r0, [pc, #112]	; (80063dc <_ZN4blib3Lcd11displayLineEhhPKc+0x138>)
 800636c:	f7fa fe50 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                ischar(string + 13), ischar(string + 14), ischar(string + 15), ischar(string + 16),
                ischar(string + 17), ischar(string + 18), ischar(string + 19));

        uint8_t command = 0;

        switch (mLcdType)
 8006370:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d120      	bne.n	80063ba <_ZN4blib3Lcd11displayLineEhhPKc+0x116>
        {
            case LcdType::LCD_TYPE_1602:
                break;
            case LcdType::LCD_TYPE_2004:
                switch (row)
 8006378:	f1ba 0f03 	cmp.w	sl, #3
 800637c:	d81d      	bhi.n	80063ba <_ZN4blib3Lcd11displayLineEhhPKc+0x116>
 800637e:	e8df f00a 	tbb	[pc, sl]
 8006382:	1004      	.short	0x1004
 8006384:	1916      	.short	0x1916
        return (string != nullptr) ? *(string) : ' ';
 8006386:	2320      	movs	r3, #32
 8006388:	e796      	b.n	80062b8 <_ZN4blib3Lcd11displayLineEhhPKc+0x14>
                {
                    case 0:
                        command = 0x80 | (col + 0x00);
 800638a:	f049 0180 	orr.w	r1, r9, #128	; 0x80
                break;
            default:
                break;
        }

        sendCmd(command);
 800638e:	4640      	mov	r0, r8
 8006390:	f7ff ff48 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 8006394:	3c01      	subs	r4, #1
 8006396:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800639a:	b981      	cbnz	r1, 80063be <_ZN4blib3Lcd11displayLineEhhPKc+0x11a>
        {
            sendData(*string);
            string++;
        }
    }
 800639c:	b027      	add	sp, #156	; 0x9c
 800639e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        command = 0x80 | (col + 0x40);
 80063a2:	f109 0140 	add.w	r1, r9, #64	; 0x40
                        command = 0x80 | (col + 0x54);
 80063a6:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80063aa:	b2c9      	uxtb	r1, r1
                        break;
 80063ac:	e7ef      	b.n	800638e <_ZN4blib3Lcd11displayLineEhhPKc+0xea>
                        command = 0x80 | (col + 0x14);
 80063ae:	f109 0114 	add.w	r1, r9, #20
 80063b2:	e7f8      	b.n	80063a6 <_ZN4blib3Lcd11displayLineEhhPKc+0x102>
                        command = 0x80 | (col + 0x54);
 80063b4:	f109 0154 	add.w	r1, r9, #84	; 0x54
 80063b8:	e7f5      	b.n	80063a6 <_ZN4blib3Lcd11displayLineEhhPKc+0x102>
 80063ba:	2100      	movs	r1, #0
 80063bc:	e7e7      	b.n	800638e <_ZN4blib3Lcd11displayLineEhhPKc+0xea>
            sendData(*string);
 80063be:	4640      	mov	r0, r8
 80063c0:	f7ff ff50 	bl	8006264 <_ZN4blib3Lcd8sendDataEh>
            string++;
 80063c4:	e7e7      	b.n	8006396 <_ZN4blib3Lcd11displayLineEhhPKc+0xf2>
 80063c6:	bf00      	nop
 80063c8:	0800b7ed 	.word	0x0800b7ed
 80063cc:	0800c137 	.word	0x0800c137
 80063d0:	0800c0ec 	.word	0x0800c0ec
 80063d4:	0800c0e4 	.word	0x0800c0e4
 80063d8:	20000428 	.word	0x20000428
 80063dc:	0800c66c 	.word	0x0800c66c

080063e0 <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
        sendCmd(0x01);
 80063e0:	2101      	movs	r1, #1
 80063e2:	f7ff bf1f 	b.w	8006224 <_ZN4blib3Lcd7sendCmdEh>

080063e6 <_ZN4blib3Lcd4initEv>:
    }
    void Lcd::init()
    {
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 80063e6:	2306      	movs	r3, #6
    {
 80063e8:	b510      	push	{r4, lr}
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 80063ea:	7343      	strb	r3, [r0, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 80063ec:	f642 0308 	movw	r3, #10248	; 0x2808
 80063f0:	81c3      	strh	r3, [r0, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_NOBLACKLIGHT;
 80063f2:	2300      	movs	r3, #0
 80063f4:	7403      	strb	r3, [r0, #16]
    {
 80063f6:	4604      	mov	r4, r0

        HAL_Delay(50);
 80063f8:	2032      	movs	r0, #50	; 0x32
 80063fa:	f7fd f985 	bl	8003708 <HAL_Delay>
        sendCmd(0x30);
 80063fe:	2130      	movs	r1, #48	; 0x30
 8006400:	4620      	mov	r0, r4
 8006402:	f7ff ff0f 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 8006406:	2005      	movs	r0, #5
 8006408:	f7fd f97e 	bl	8003708 <HAL_Delay>
        sendCmd(0x30);
 800640c:	2130      	movs	r1, #48	; 0x30
 800640e:	4620      	mov	r0, r4
 8006410:	f7ff ff08 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8006414:	2001      	movs	r0, #1
 8006416:	f7fd f977 	bl	8003708 <HAL_Delay>
        sendCmd(0x30);
 800641a:	2130      	movs	r1, #48	; 0x30
 800641c:	4620      	mov	r0, r4
 800641e:	f7ff ff01 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8006422:	200a      	movs	r0, #10
 8006424:	f7fd f970 	bl	8003708 <HAL_Delay>
        sendCmd(0x20);
 8006428:	2120      	movs	r1, #32
 800642a:	4620      	mov	r0, r4
 800642c:	f7ff fefa 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8006430:	200a      	movs	r0, #10
 8006432:	f7fd f969 	bl	8003708 <HAL_Delay>

        sendCmd(mFunctionSet);
 8006436:	7be1      	ldrb	r1, [r4, #15]
 8006438:	4620      	mov	r0, r4
 800643a:	f7ff fef3 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800643e:	2001      	movs	r0, #1
 8006440:	f7fd f962 	bl	8003708 <HAL_Delay>
        sendCmd(mDisplayControl);
 8006444:	7ba1      	ldrb	r1, [r4, #14]
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff feec 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800644c:	2001      	movs	r0, #1
 800644e:	f7fd f95b 	bl	8003708 <HAL_Delay>
        sendCmd(0x01);    //clear display
 8006452:	2101      	movs	r1, #1
 8006454:	4620      	mov	r0, r4
 8006456:	f7ff fee5 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 800645a:	2002      	movs	r0, #2
 800645c:	f7fd f954 	bl	8003708 <HAL_Delay>
        sendCmd(mEntryMode);
 8006460:	7b61      	ldrb	r1, [r4, #13]
 8006462:	4620      	mov	r0, r4
 8006464:	f7ff fede 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8006468:	2001      	movs	r0, #1
 800646a:	f7fd f94d 	bl	8003708 <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 800646e:	7ba1      	ldrb	r1, [r4, #14]
 8006470:	4620      	mov	r0, r4
 8006472:	f041 0104 	orr.w	r1, r1, #4
 8006476:	f7ff fed5 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800647a:	2001      	movs	r0, #1
 800647c:	f7fd f944 	bl	8003708 <HAL_Delay>
        sendCmd(mBlackLight);
 8006480:	4620      	mov	r0, r4
 8006482:	7c21      	ldrb	r1, [r4, #16]
 8006484:	f7ff fece 	bl	8006224 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
    }
 8006488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_Delay(1);
 800648c:	2001      	movs	r0, #1
 800648e:	f7fd b93b 	b.w	8003708 <HAL_Delay>
	...

08006494 <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh>:
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8006494:	b538      	push	{r3, r4, r5, lr}
            address)
 8006496:	4d05      	ldr	r5, [pc, #20]	; (80064ac <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh+0x18>)
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8006498:	6082      	str	r2, [r0, #8]
 800649a:	e9c0 5100 	strd	r5, r1, [r0]
 800649e:	4604      	mov	r4, r0
 80064a0:	7303      	strb	r3, [r0, #12]
        init();
 80064a2:	f7ff ffa0 	bl	80063e6 <_ZN4blib3Lcd4initEv>
    }
 80064a6:	4620      	mov	r0, r4
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	bf00      	nop
 80064ac:	0800c14c 	.word	0x0800c14c

080064b0 <_ZN4blib3RtcD1Ev>:
        readTime();
    }
    Rtc::~Rtc()
    {

    }
 80064b0:	4770      	bx	lr

080064b2 <_ZN4blib3Rtc8readTimeEv>:
    void Rtc::readTime()
    {
 80064b2:	b510      	push	{r4, lr}
 80064b4:	4604      	mov	r4, r0
 80064b6:	b086      	sub	sp, #24
        RTC_TimeTypeDef sTime;
        RTC_DateTypeDef sDate;

        HAL_RTC_GetTime(mHrtc, &sTime, RTC_FORMAT_BIN);
 80064b8:	a901      	add	r1, sp, #4
 80064ba:	2200      	movs	r2, #0
 80064bc:	6800      	ldr	r0, [r0, #0]
 80064be:	f7fe fdb6 	bl	800502e <HAL_RTC_GetTime>
        HAL_RTC_GetDate(mHrtc, &sDate, RTC_FORMAT_BIN);
 80064c2:	6820      	ldr	r0, [r4, #0]
 80064c4:	2200      	movs	r2, #0
 80064c6:	4669      	mov	r1, sp
 80064c8:	f7fe fdd4 	bl	8005074 <HAL_RTC_GetDate>

        mHour = sTime.Hours;
 80064cc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80064d0:	80a3      	strh	r3, [r4, #4]
        mMinute = sTime.Minutes;
        mDate = sDate.Date;
 80064d2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80064d6:	71a3      	strb	r3, [r4, #6]
        mMonth = sDate.Month;
 80064d8:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80064dc:	71e3      	strb	r3, [r4, #7]
        mYear = sDate.Year;
 80064de:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80064e2:	7223      	strb	r3, [r4, #8]
    }
 80064e4:	b006      	add	sp, #24
 80064e6:	bd10      	pop	{r4, pc}

080064e8 <_ZN4blib3RtcC1Ev>:
    Rtc::Rtc()
 80064e8:	b510      	push	{r4, lr}
        mHrtc = &hrtc;
 80064ea:	4b03      	ldr	r3, [pc, #12]	; (80064f8 <_ZN4blib3RtcC1Ev+0x10>)
 80064ec:	6003      	str	r3, [r0, #0]
    Rtc::Rtc()
 80064ee:	4604      	mov	r4, r0
        readTime();
 80064f0:	f7ff ffdf 	bl	80064b2 <_ZN4blib3Rtc8readTimeEv>
    }
 80064f4:	4620      	mov	r0, r4
 80064f6:	bd10      	pop	{r4, pc}
 80064f8:	2000036c 	.word	0x2000036c

080064fc <_ZN4blib3Rtc10isLeapYearEh>:
        // Assume years 00-99 refer to 2000-2099
        uint16_t actualYear = 2000 + year;

        // A year is a leap year if it is divisible by 4, except for years divisible by 100.
        // However, years divisible by 400 are leap years.
        return ((actualYear % 4 == 0) && (actualYear % 100 != 0)) || (actualYear % 400 == 0);
 80064fc:	0782      	lsls	r2, r0, #30
        uint16_t actualYear = 2000 + year;
 80064fe:	f500 63fa 	add.w	r3, r0, #2000	; 0x7d0
        return ((actualYear % 4 == 0) && (actualYear % 100 != 0)) || (actualYear % 400 == 0);
 8006502:	d106      	bne.n	8006512 <_ZN4blib3Rtc10isLeapYearEh+0x16>
 8006504:	2164      	movs	r1, #100	; 0x64
 8006506:	fbb3 f2f1 	udiv	r2, r3, r1
 800650a:	fb01 3212 	mls	r2, r1, r2, r3
 800650e:	b292      	uxth	r2, r2
 8006510:	b952      	cbnz	r2, 8006528 <_ZN4blib3Rtc10isLeapYearEh+0x2c>
 8006512:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006516:	fbb3 f1f2 	udiv	r1, r3, r2
 800651a:	fb02 3011 	mls	r0, r2, r1, r3
 800651e:	b280      	uxth	r0, r0
 8006520:	fab0 f080 	clz	r0, r0
 8006524:	0940      	lsrs	r0, r0, #5
 8006526:	4770      	bx	lr
 8006528:	2001      	movs	r0, #1
    }
 800652a:	4770      	bx	lr

0800652c <_ZN4blib3Rtc11isTimeValidEhhhhh>:

    // Function to check if the provided time parameters are valid
    bool Rtc::isTimeValid(uint8_t hour, uint8_t minute, uint8_t date, uint8_t month, uint8_t year)
    {
 800652c:	b510      	push	{r4, lr}
 800652e:	461c      	mov	r4, r3
        // Check minute range (0-59)
        if (minute > 59 && minute < 0)
            return false;

        // Check date range (1-31)
        if (date < 1 || date > 31)
 8006530:	1e62      	subs	r2, r4, #1
 8006532:	2a1e      	cmp	r2, #30
    {
 8006534:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006538:	f89d 000c 	ldrb.w	r0, [sp, #12]
        if (date < 1 || date > 31)
 800653c:	d810      	bhi.n	8006560 <_ZN4blib3Rtc11isTimeValidEhhhhh+0x34>
            return false;

        // Check month range (1-12)
        if (month < 1 || month > 12)
 800653e:	1e5a      	subs	r2, r3, #1
 8006540:	2a0b      	cmp	r2, #11
 8006542:	d80d      	bhi.n	8006560 <_ZN4blib3Rtc11isTimeValidEhhhhh+0x34>
            return false;

        // Check year range (0-99)
        if (year > 99)
 8006544:	2863      	cmp	r0, #99	; 0x63
 8006546:	d80b      	bhi.n	8006560 <_ZN4blib3Rtc11isTimeValidEhhhhh+0x34>
            return false;

        // Check if the month is February and the year is a leap year
        if (month == 2 && date > 28)
 8006548:	2b02      	cmp	r3, #2
 800654a:	d10b      	bne.n	8006564 <_ZN4blib3Rtc11isTimeValidEhhhhh+0x38>
 800654c:	2c1c      	cmp	r4, #28
 800654e:	d909      	bls.n	8006564 <_ZN4blib3Rtc11isTimeValidEhhhhh+0x38>
        {
            if (isLeapYear(year))
 8006550:	f7ff ffd4 	bl	80064fc <_ZN4blib3Rtc10isLeapYearEh>
 8006554:	b118      	cbz	r0, 800655e <_ZN4blib3Rtc11isTimeValidEhhhhh+0x32>
            {
                // February in a leap year has 29 days
                if (date > 29)
 8006556:	f1a4 031d 	sub.w	r3, r4, #29
 800655a:	4258      	negs	r0, r3
 800655c:	4158      	adcs	r0, r3
            }
        }

        // All parameters are valid
        return true;
    }
 800655e:	bd10      	pop	{r4, pc}
            return false;
 8006560:	2000      	movs	r0, #0
 8006562:	e7fc      	b.n	800655e <_ZN4blib3Rtc11isTimeValidEhhhhh+0x32>
        return true;
 8006564:	2001      	movs	r0, #1
 8006566:	e7fa      	b.n	800655e <_ZN4blib3Rtc11isTimeValidEhhhhh+0x32>

08006568 <_ZN4blib3Rtc7setTimeEhhhhh>:
    {
 8006568:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800656c:	b089      	sub	sp, #36	; 0x24
 800656e:	4604      	mov	r4, r0
 8006570:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
 8006574:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
        if (!isTimeValid(hour, minute, date, month, year))
 8006578:	e9cd 9800 	strd	r9, r8, [sp]
    {
 800657c:	460f      	mov	r7, r1
 800657e:	4616      	mov	r6, r2
 8006580:	461d      	mov	r5, r3
        if (!isTimeValid(hour, minute, date, month, year))
 8006582:	f7ff ffd3 	bl	800652c <_ZN4blib3Rtc11isTimeValidEhhhhh>
 8006586:	b368      	cbz	r0, 80065e4 <_ZN4blib3Rtc7setTimeEhhhhh+0x7c>
        sTime.Hours = RTC_ByteToBcd2(hour);
 8006588:	4638      	mov	r0, r7
 800658a:	f7fe fc97 	bl	8004ebc <RTC_ByteToBcd2>
 800658e:	f88d 000c 	strb.w	r0, [sp, #12]
        sTime.Minutes = RTC_ByteToBcd2(minute);
 8006592:	4630      	mov	r0, r6
 8006594:	f7fe fc92 	bl	8004ebc <RTC_ByteToBcd2>
 8006598:	f88d 000d 	strb.w	r0, [sp, #13]
        sTime.Seconds = RTC_ByteToBcd2(0);
 800659c:	2000      	movs	r0, #0
 800659e:	f7fe fc8d 	bl	8004ebc <RTC_ByteToBcd2>
        sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80065a2:	2300      	movs	r3, #0
        if (HAL_RTC_SetTime(mHrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80065a4:	2201      	movs	r2, #1
 80065a6:	a903      	add	r1, sp, #12
        sTime.Seconds = RTC_ByteToBcd2(0);
 80065a8:	f88d 000e 	strb.w	r0, [sp, #14]
        if (HAL_RTC_SetTime(mHrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80065ac:	6820      	ldr	r0, [r4, #0]
        sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80065ae:	e9cd 3306 	strd	r3, r3, [sp, #24]
        sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80065b2:	2601      	movs	r6, #1
        if (HAL_RTC_SetTime(mHrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80065b4:	f7fe fc8f 	bl	8004ed6 <HAL_RTC_SetTime>
        sDate.Month = RTC_ByteToBcd2(month);
 80065b8:	4648      	mov	r0, r9
        sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80065ba:	f88d 6008 	strb.w	r6, [sp, #8]
        sDate.Month = RTC_ByteToBcd2(month);
 80065be:	f7fe fc7d 	bl	8004ebc <RTC_ByteToBcd2>
 80065c2:	f88d 0009 	strb.w	r0, [sp, #9]
        sDate.Date = RTC_ByteToBcd2(date);
 80065c6:	4628      	mov	r0, r5
 80065c8:	f7fe fc78 	bl	8004ebc <RTC_ByteToBcd2>
 80065cc:	f88d 000a 	strb.w	r0, [sp, #10]
        sDate.Year = RTC_ByteToBcd2(year);
 80065d0:	4640      	mov	r0, r8
 80065d2:	f7fe fc73 	bl	8004ebc <RTC_ByteToBcd2>
        if (HAL_RTC_SetDate(mHrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80065d6:	4632      	mov	r2, r6
        sDate.Year = RTC_ByteToBcd2(year);
 80065d8:	f88d 000b 	strb.w	r0, [sp, #11]
        if (HAL_RTC_SetDate(mHrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80065dc:	a902      	add	r1, sp, #8
 80065de:	6820      	ldr	r0, [r4, #0]
 80065e0:	f7fe fcd3 	bl	8004f8a <HAL_RTC_SetDate>
    }
 80065e4:	b009      	add	sp, #36	; 0x24
 80065e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080065ec <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_>:

    void Rtc::incrementParameter(int selectedParameter, uint8_t &hour, uint8_t &minute,
            uint8_t &date, uint8_t &month, uint8_t &year)
    {
 80065ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ee:	461d      	mov	r5, r3
 80065f0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
        // Increment the selected parameter
        switch (selectedParameter)
 80065f4:	2804      	cmp	r0, #4
 80065f6:	d80c      	bhi.n	8006612 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x26>
 80065f8:	e8df f000 	tbb	[pc, r0]
 80065fc:	36150c03 	.word	0x36150c03
 8006600:	42          	.byte	0x42
 8006601:	00          	.byte	0x00
        {
            case 0:    // Hour
                hour = (hour + 1) % 24;
 8006602:	780b      	ldrb	r3, [r1, #0]
 8006604:	2218      	movs	r2, #24
 8006606:	3301      	adds	r3, #1
 8006608:	fbb3 f0f2 	udiv	r0, r3, r2
 800660c:	fb02 3310 	mls	r3, r2, r0, r3
 8006610:	700b      	strb	r3, [r1, #0]
                break;
            case 4:    // Year
                year = (year + 1) % 100;
                break;
        }
    }
 8006612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                minute = (minute + 1) % 60;
 8006614:	7813      	ldrb	r3, [r2, #0]
 8006616:	213c      	movs	r1, #60	; 0x3c
 8006618:	3301      	adds	r3, #1
 800661a:	fbb3 f0f1 	udiv	r0, r3, r1
 800661e:	fb01 3310 	mls	r3, r1, r0, r3
 8006622:	7013      	strb	r3, [r2, #0]
                break;
 8006624:	e7f5      	b.n	8006612 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x26>
                        % (isLeapYear(year) && month == 2 ?
 8006626:	7838      	ldrb	r0, [r7, #0]
                date = (date + 1)
 8006628:	782c      	ldrb	r4, [r5, #0]
                        % (isLeapYear(year) && month == 2 ?
 800662a:	f7ff ff67 	bl	80064fc <_ZN4blib3Rtc10isLeapYearEh>
                date = (date + 1)
 800662e:	3401      	adds	r4, #1
                        % (isLeapYear(year) && month == 2 ?
 8006630:	7832      	ldrb	r2, [r6, #0]
 8006632:	b148      	cbz	r0, 8006648 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x5c>
 8006634:	2a02      	cmp	r2, #2
 8006636:	d109      	bne.n	800664c <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x60>
 8006638:	231e      	movs	r3, #30
 800663a:	fbb4 f2f3 	udiv	r2, r4, r3
 800663e:	fb03 4412 	mls	r4, r3, r2, r4
                if (date == 0)
 8006642:	b174      	cbz	r4, 8006662 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x76>
                date = (date + 1)
 8006644:	702c      	strb	r4, [r5, #0]
 8006646:	e7e4      	b.n	8006612 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x26>
                                (month == 2 ?
 8006648:	2a02      	cmp	r2, #2
 800664a:	d006      	beq.n	800665a <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x6e>
 800664c:	3a04      	subs	r2, #4
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	2a07      	cmp	r2, #7
 8006652:	d804      	bhi.n	800665e <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x72>
 8006654:	4b0f      	ldr	r3, [pc, #60]	; (8006694 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0xa8>)
 8006656:	569b      	ldrsb	r3, [r3, r2]
 8006658:	e7ef      	b.n	800663a <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x4e>
 800665a:	231d      	movs	r3, #29
 800665c:	e7ed      	b.n	800663a <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x4e>
                        % (isLeapYear(year) && month == 2 ?
 800665e:	231f      	movs	r3, #31
 8006660:	e7eb      	b.n	800663a <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x4e>
                    date = 1;
 8006662:	2301      	movs	r3, #1
 8006664:	702b      	strb	r3, [r5, #0]
 8006666:	e7d4      	b.n	8006612 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x26>
                month = (month + 1) % 13;
 8006668:	7833      	ldrb	r3, [r6, #0]
 800666a:	220d      	movs	r2, #13
 800666c:	3301      	adds	r3, #1
 800666e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006672:	fb02 3311 	mls	r3, r2, r1, r3
                if (month == 0)
 8006676:	b10b      	cbz	r3, 800667c <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x90>
                    month = 1;
 8006678:	7033      	strb	r3, [r6, #0]
 800667a:	e7ca      	b.n	8006612 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x26>
 800667c:	2301      	movs	r3, #1
 800667e:	e7fb      	b.n	8006678 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x8c>
                year = (year + 1) % 100;
 8006680:	783b      	ldrb	r3, [r7, #0]
 8006682:	2264      	movs	r2, #100	; 0x64
 8006684:	3301      	adds	r3, #1
 8006686:	fbb3 f1f2 	udiv	r1, r3, r2
 800668a:	fb02 3311 	mls	r3, r2, r1, r3
 800668e:	703b      	strb	r3, [r7, #0]
    }
 8006690:	e7bf      	b.n	8006612 <_ZN4blib3Rtc18incrementParameterEiRhS1_S1_S1_S1_+0x26>
 8006692:	bf00      	nop
 8006694:	0800c154 	.word	0x0800c154

08006698 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_>:

    void Rtc::decrementParameter(int selectedParameter, uint8_t &hour, uint8_t &minute,
            uint8_t &date, uint8_t &month, uint8_t &year)
    {
 8006698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669a:	461e      	mov	r6, r3
 800669c:	e9dd 5706 	ldrd	r5, r7, [sp, #24]
        // Decrement the selected parameter
        switch (selectedParameter)
 80066a0:	2804      	cmp	r0, #4
 80066a2:	d80c      	bhi.n	80066be <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x26>
 80066a4:	e8df f000 	tbb	[pc, r0]
 80066a8:	45150c03 	.word	0x45150c03
 80066ac:	51          	.byte	0x51
 80066ad:	00          	.byte	0x00
        {
            case 0:    // Hour
                hour = (hour + 23) % 24;
 80066ae:	780b      	ldrb	r3, [r1, #0]
 80066b0:	2218      	movs	r2, #24
 80066b2:	3317      	adds	r3, #23
 80066b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80066b8:	fb02 3310 	mls	r3, r2, r0, r3
 80066bc:	700b      	strb	r3, [r1, #0]
                break;
            case 4:    // Year
                year = (year + 99) % 100;
                break;
        }
    }
 80066be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                minute = (minute + 59) % 60;
 80066c0:	7813      	ldrb	r3, [r2, #0]
 80066c2:	213c      	movs	r1, #60	; 0x3c
 80066c4:	333b      	adds	r3, #59	; 0x3b
 80066c6:	fbb3 f0f1 	udiv	r0, r3, r1
 80066ca:	fb01 3310 	mls	r3, r1, r0, r3
 80066ce:	7013      	strb	r3, [r2, #0]
                break;
 80066d0:	e7f5      	b.n	80066be <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x26>
                        + (isLeapYear(year) && month == 2 ?
 80066d2:	7838      	ldrb	r0, [r7, #0]
                date = (date
 80066d4:	7834      	ldrb	r4, [r6, #0]
                        + (isLeapYear(year) && month == 2 ?
 80066d6:	f7ff ff11 	bl	80064fc <_ZN4blib3Rtc10isLeapYearEh>
 80066da:	782a      	ldrb	r2, [r5, #0]
 80066dc:	b178      	cbz	r0, 80066fe <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x66>
 80066de:	2a02      	cmp	r2, #2
 80066e0:	d10f      	bne.n	8006702 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x6a>
 80066e2:	231d      	movs	r3, #29
 80066e4:	18e1      	adds	r1, r4, r3
                                                29 : 30))) - 1)
 80066e6:	3901      	subs	r1, #1
                        % (isLeapYear(year) && month == 2 ?
 80066e8:	b1b0      	cbz	r0, 8006718 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x80>
 80066ea:	2a02      	cmp	r2, #2
 80066ec:	d116      	bne.n	800671c <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x84>
 80066ee:	221e      	movs	r2, #30
 80066f0:	fbb1 f3f2 	udiv	r3, r1, r2
 80066f4:	fb02 1113 	mls	r1, r2, r3, r1
                                                30 : 31))) + 1;
 80066f8:	3101      	adds	r1, #1
                date = (date
 80066fa:	7031      	strb	r1, [r6, #0]
                break;
 80066fc:	e7df      	b.n	80066be <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x26>
                                (month == 2 ?
 80066fe:	2a02      	cmp	r2, #2
 8006700:	d006      	beq.n	8006710 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x78>
 8006702:	1f13      	subs	r3, r2, #4
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b07      	cmp	r3, #7
 8006708:	d804      	bhi.n	8006714 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x7c>
 800670a:	4914      	ldr	r1, [pc, #80]	; (800675c <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0xc4>)
 800670c:	56cb      	ldrsb	r3, [r1, r3]
 800670e:	e7e9      	b.n	80066e4 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x4c>
 8006710:	231c      	movs	r3, #28
 8006712:	e7e7      	b.n	80066e4 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x4c>
                        + (isLeapYear(year) && month == 2 ?
 8006714:	231e      	movs	r3, #30
 8006716:	e7e5      	b.n	80066e4 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x4c>
                                (month == 2 ?
 8006718:	2a02      	cmp	r2, #2
 800671a:	d006      	beq.n	800672a <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x92>
 800671c:	3a04      	subs	r2, #4
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	2a07      	cmp	r2, #7
 8006722:	d804      	bhi.n	800672e <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x96>
 8006724:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0xc8>)
 8006726:	569a      	ldrsb	r2, [r3, r2]
 8006728:	e7e2      	b.n	80066f0 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x58>
 800672a:	221d      	movs	r2, #29
 800672c:	e7e0      	b.n	80066f0 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x58>
                        % (isLeapYear(year) && month == 2 ?
 800672e:	221f      	movs	r2, #31
 8006730:	e7de      	b.n	80066f0 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x58>
                month = (month + 12) % 13;
 8006732:	782b      	ldrb	r3, [r5, #0]
 8006734:	220d      	movs	r2, #13
 8006736:	330c      	adds	r3, #12
 8006738:	fbb3 f1f2 	udiv	r1, r3, r2
 800673c:	fb02 3311 	mls	r3, r2, r1, r3
                if (month == 0)
 8006740:	b10b      	cbz	r3, 8006746 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0xae>
                    month = 1;
 8006742:	702b      	strb	r3, [r5, #0]
 8006744:	e7bb      	b.n	80066be <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x26>
 8006746:	2301      	movs	r3, #1
 8006748:	e7fb      	b.n	8006742 <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0xaa>
                year = (year + 99) % 100;
 800674a:	783b      	ldrb	r3, [r7, #0]
 800674c:	2264      	movs	r2, #100	; 0x64
 800674e:	3363      	adds	r3, #99	; 0x63
 8006750:	fbb3 f1f2 	udiv	r1, r3, r2
 8006754:	fb02 3311 	mls	r3, r2, r1, r3
 8006758:	703b      	strb	r3, [r7, #0]
    }
 800675a:	e7b0      	b.n	80066be <_ZN4blib3Rtc18decrementParameterEiRhS1_S1_S1_S1_+0x26>
 800675c:	0800c15c 	.word	0x0800c15c
 8006760:	0800c154 	.word	0x0800c154

08006764 <_ZN4blib13SerialMonitorD1Ev>:
        setSerialLevel(SerialLevel::SERIAL_LEVEL_1);    // TODO: test
    }
    SerialMonitor::~SerialMonitor()
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_0);
    }
 8006764:	4770      	bx	lr

08006766 <_ZN4blib13SerialMonitorD0Ev>:
    SerialMonitor::~SerialMonitor()
 8006766:	b510      	push	{r4, lr}
    }
 8006768:	2108      	movs	r1, #8
    SerialMonitor::~SerialMonitor()
 800676a:	4604      	mov	r4, r0
    }
 800676c:	f000 f8fa 	bl	8006964 <_ZdlPvj>
 8006770:	4620      	mov	r0, r4
 8006772:	bd10      	pop	{r4, pc}

08006774 <_ZN4blib13SerialMonitorC1Ev>:
    SerialMonitor::SerialMonitor()
 8006774:	4a02      	ldr	r2, [pc, #8]	; (8006780 <_ZN4blib13SerialMonitorC1Ev+0xc>)
 8006776:	6002      	str	r2, [r0, #0]
        else if (u8SerialLevel >= (uint8_t) SerialLevel::SERIAL_LEVEL_MAX)
        {
            u8SerialLevel = 0;
        }

        mSerialLevel = (SerialLevel) u8SerialLevel;
 8006778:	2201      	movs	r2, #1
 800677a:	6042      	str	r2, [r0, #4]
    }
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	0800c29c 	.word	0x0800c29c

08006784 <_ZN4blib13SerialMonitor12serialLevel1Ev>:
    {
        return mSerialLevel;
    }

    void SerialMonitor::serialLevel1()
    {
 8006784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    if (mInstance == nullptr)
 8006788:	4c56      	ldr	r4, [pc, #344]	; (80068e4 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x160>)
 800678a:	ed2d 8b02 	vpush	{d8}
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	b0a9      	sub	sp, #164	; 0xa4
 8006792:	b933      	cbnz	r3, 80067a2 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x1e>
                        mInstance = new T();
 8006794:	2048      	movs	r0, #72	; 0x48
 8006796:	f000 f8f6 	bl	8006986 <_Znwj>
 800679a:	4605      	mov	r5, r0
 800679c:	f7ff f8f0 	bl	8005980 <_ZN4blib6AnalogC1Ev>
 80067a0:	6025      	str	r5, [r4, #0]
                    return *mInstance;
 80067a2:	6827      	ldr	r7, [r4, #0]
                    if (mInstance == nullptr)
 80067a4:	4c50      	ldr	r4, [pc, #320]	; (80068e8 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x164>)
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	b933      	cbnz	r3, 80067b8 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x34>
                        mInstance = new T();
 80067aa:	201c      	movs	r0, #28
 80067ac:	f000 f8eb 	bl	8006986 <_Znwj>
 80067b0:	4605      	mov	r5, r0
 80067b2:	f7ff fc11 	bl	8005fd8 <_ZN4blib16DeviceProtectionC1Ev>
 80067b6:	6025      	str	r5, [r4, #0]
                    if (mInstance == nullptr)
 80067b8:	4d4c      	ldr	r5, [pc, #304]	; (80068ec <_ZN4blib13SerialMonitor12serialLevel1Ev+0x168>)
                    return *mInstance;
 80067ba:	6824      	ldr	r4, [r4, #0]
                    if (mInstance == nullptr)
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	b933      	cbnz	r3, 80067ce <_ZN4blib13SerialMonitor12serialLevel1Ev+0x4a>
                        mInstance = new T();
 80067c0:	2024      	movs	r0, #36	; 0x24
 80067c2:	f000 f8e0 	bl	8006986 <_Znwj>
 80067c6:	4606      	mov	r6, r0
 80067c8:	f7ff fb34 	bl	8005e34 <_ZN4blib13ChargeControlC1Ev>
 80067cc:	602e      	str	r6, [r5, #0]
                    return *mInstance;
 80067ce:	f8d5 9000 	ldr.w	r9, [r5]
                    if (mInstance == nullptr)
 80067d2:	4d47      	ldr	r5, [pc, #284]	; (80068f0 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x16c>)
 80067d4:	682e      	ldr	r6, [r5, #0]
 80067d6:	b936      	cbnz	r6, 80067e6 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x62>
                        mInstance = new T();
 80067d8:	2008      	movs	r0, #8
 80067da:	f000 f8d4 	bl	8006986 <_Znwj>
 80067de:	4b45      	ldr	r3, [pc, #276]	; (80068f4 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x170>)
 80067e0:	6003      	str	r3, [r0, #0]
 80067e2:	8086      	strh	r6, [r0, #4]
 80067e4:	6028      	str	r0, [r5, #0]
        auto &analog = blib::Analog::getInstance();
        auto &devPrt = blib::DeviceProtection::getInstance();
        auto &chargeCtrl = blib::ChargeControl::getInstance();
        auto &sysMgr = blib::SystemManager::getInstance();

        LOGI(
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	931c      	str	r3, [sp, #112]	; 0x70
 80067ea:	7c23      	ldrb	r3, [r4, #16]
 80067ec:	931d      	str	r3, [sp, #116]	; 0x74
 80067ee:	7ce3      	ldrb	r3, [r4, #19]
 80067f0:	931e      	str	r3, [sp, #120]	; 0x78
 80067f2:	7d63      	ldrb	r3, [r4, #21]
 80067f4:	931f      	str	r3, [sp, #124]	; 0x7c
 80067f6:	7de3      	ldrb	r3, [r4, #23]
 80067f8:	9320      	str	r3, [sp, #128]	; 0x80
 80067fa:	7e23      	ldrb	r3, [r4, #24]
 80067fc:	9321      	str	r3, [sp, #132]	; 0x84
 80067fe:	7e63      	ldrb	r3, [r4, #25]
 8006800:	9322      	str	r3, [sp, #136]	; 0x88
 8006802:	7c63      	ldrb	r3, [r4, #17]
 8006804:	9323      	str	r3, [sp, #140]	; 0x8c
 8006806:	4b3a      	ldr	r3, [pc, #232]	; (80068f0 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x16c>)
 8006808:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	7ca2      	ldrb	r2, [r4, #18]
 8006810:	791e      	ldrb	r6, [r3, #4]
 8006812:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006818:	9326      	str	r3, [sp, #152]	; 0x98
                print("[>]  ");
 800681a:	4837      	ldr	r0, [pc, #220]	; (80068f8 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x174>)
 800681c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8006820:	9227      	str	r2, [sp, #156]	; 0x9c
 8006822:	eeb0 8a67 	vmov.f32	s16, s15
 8006826:	9324      	str	r3, [sp, #144]	; 0x90
 8006828:	f899 5011 	ldrb.w	r5, [r9, #17]
 800682c:	7a24      	ldrb	r4, [r4, #8]
 800682e:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8006832:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 8006836:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 800683a:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 800683e:	9125      	str	r1, [sp, #148]	; 0x94
 8006840:	f7fa fbe6 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8006844:	9925      	ldr	r1, [sp, #148]	; 0x94
 8006846:	4608      	mov	r0, r1
 8006848:	f7f9 fe7e 	bl	8000548 <__aeabi_f2d>
 800684c:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8006850:	4640      	mov	r0, r8
 8006852:	f7f9 fe79 	bl	8000548 <__aeabi_f2d>
 8006856:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800685a:	4648      	mov	r0, r9
 800685c:	f7f9 fe74 	bl	8000548 <__aeabi_f2d>
 8006860:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8006864:	4658      	mov	r0, fp
 8006866:	f7f9 fe6f 	bl	8000548 <__aeabi_f2d>
 800686a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 800686e:	4650      	mov	r0, sl
 8006870:	f7f9 fe6a 	bl	8000548 <__aeabi_f2d>
 8006874:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006876:	9311      	str	r3, [sp, #68]	; 0x44
 8006878:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800687c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800687e:	9310      	str	r3, [sp, #64]	; 0x40
 8006880:	ee18 0a10 	vmov	r0, s16
 8006884:	f7f9 fe60 	bl	8000548 <__aeabi_f2d>
 8006888:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800688a:	930a      	str	r3, [sp, #40]	; 0x28
 800688c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800688e:	9309      	str	r3, [sp, #36]	; 0x24
 8006890:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006892:	9308      	str	r3, [sp, #32]
 8006894:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006896:	9307      	str	r3, [sp, #28]
 8006898:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800689a:	9306      	str	r3, [sp, #24]
 800689c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800689e:	9305      	str	r3, [sp, #20]
 80068a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80068a6:	9302      	str	r3, [sp, #8]
 80068a8:	4b14      	ldr	r3, [pc, #80]	; (80068fc <_ZN4blib13SerialMonitor12serialLevel1Ev+0x178>)
 80068aa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	234d      	movs	r3, #77	; 0x4d
 80068b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80068b4:	9203      	str	r2, [sp, #12]
 80068b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80068ba:	4a11      	ldr	r2, [pc, #68]	; (8006900 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x17c>)
 80068bc:	940b      	str	r4, [sp, #44]	; 0x2c
 80068be:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 80068c2:	4810      	ldr	r0, [pc, #64]	; (8006904 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x180>)
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4b10      	ldr	r3, [pc, #64]	; (8006908 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x184>)
 80068c8:	f001 fa78 	bl	8007dbc <sniprintf>
                print(mBuffer);
 80068cc:	480d      	ldr	r0, [pc, #52]	; (8006904 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x180>)
 80068ce:	f7fa fb9f 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                print("\n");
 80068d2:	480e      	ldr	r0, [pc, #56]	; (800690c <_ZN4blib13SerialMonitor12serialLevel1Ev+0x188>)
 80068d4:	f7fa fb9c 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                " BYP:%d" " BuckEN:%d" " FAN:%d" " PI:%.2f" " PWM:%d" " PPWM:%d" " VI:%.2f" " VO:%.2f" " CI:%.2f" " CO:%.2f" " Temp:%.2f",
                devPrt.mERR, devPrt.mFLV, devPrt.mBNC, devPrt.mIUV, devPrt.mIOC, devPrt.mOOV,
                devPrt.mOOC, devPrt.mOTE, devPrt.mREC, devPrt.mBypassEnable, chargeCtrl.mBuckEnable,
                sysMgr.enableFan, analog.mPin, chargeCtrl.mPwm, chargeCtrl.mPredictPwm, analog.mVin,
                analog.mVout, analog.mIin, analog.mIout, analog.mTemp);
    }
 80068d8:	b029      	add	sp, #164	; 0xa4
 80068da:	ecbd 8b02 	vpop	{d8}
 80068de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e2:	bf00      	nop
 80068e4:	20000210 	.word	0x20000210
 80068e8:	20000204 	.word	0x20000204
 80068ec:	2000020c 	.word	0x2000020c
 80068f0:	20000200 	.word	0x20000200
 80068f4:	0800c034 	.word	0x0800c034
 80068f8:	0800b7ed 	.word	0x0800b7ed
 80068fc:	0800c21c 	.word	0x0800c21c
 8006900:	0800c176 	.word	0x0800c176
 8006904:	20000428 	.word	0x20000428
 8006908:	0800c164 	.word	0x0800c164
 800690c:	0800c66c 	.word	0x0800c66c

08006910 <_ZN4blib13SerialMonitor12serialLevel2Ev>:
    void SerialMonitor::serialLevel2()
    {
 8006910:	b508      	push	{r3, lr}
        LOGI(
 8006912:	4903      	ldr	r1, [pc, #12]	; (8006920 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x10>)
 8006914:	4b03      	ldr	r3, [pc, #12]	; (8006924 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x14>)
 8006916:	4804      	ldr	r0, [pc, #16]	; (8006928 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x18>)
 8006918:	2258      	movs	r2, #88	; 0x58
 800691a:	f7fa fca3 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " EN:" " FAN:" " SOC:" " T:" " LoopT:" "");
    }
 800691e:	bd08      	pop	{r3, pc}
 8006920:	0800c164 	.word	0x0800c164
 8006924:	0800c229 	.word	0x0800c229
 8006928:	0800c236 	.word	0x0800c236

0800692c <_ZN4blib13SerialMonitor12serialLevel3Ev>:
    void SerialMonitor::serialLevel3()
    {
 800692c:	b508      	push	{r3, lr}
        LOGI();
 800692e:	4903      	ldr	r1, [pc, #12]	; (800693c <_ZN4blib13SerialMonitor12serialLevel3Ev+0x10>)
 8006930:	4b03      	ldr	r3, [pc, #12]	; (8006940 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x14>)
 8006932:	4804      	ldr	r0, [pc, #16]	; (8006944 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x18>)
 8006934:	225d      	movs	r2, #93	; 0x5d
 8006936:	f7fa fc95 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800693a:	bd08      	pop	{r3, pc}
 800693c:	0800c164 	.word	0x0800c164
 8006940:	0800c285 	.word	0x0800c285
 8006944:	0800c0a9 	.word	0x0800c0a9

08006948 <_ZN4blib13SerialMonitor4showEv>:
        return mSerialLevel;
 8006948:	6843      	ldr	r3, [r0, #4]
        switch (getSerialLevel())
 800694a:	2b02      	cmp	r3, #2
 800694c:	d005      	beq.n	800695a <_ZN4blib13SerialMonitor4showEv+0x12>
 800694e:	2b03      	cmp	r3, #3
 8006950:	d005      	beq.n	800695e <_ZN4blib13SerialMonitor4showEv+0x16>
 8006952:	2b01      	cmp	r3, #1
 8006954:	d105      	bne.n	8006962 <_ZN4blib13SerialMonitor4showEv+0x1a>
                serialLevel1();
 8006956:	f7ff bf15 	b.w	8006784 <_ZN4blib13SerialMonitor12serialLevel1Ev>
                serialLevel2();
 800695a:	f7ff bfd9 	b.w	8006910 <_ZN4blib13SerialMonitor12serialLevel2Ev>
                serialLevel3();
 800695e:	f7ff bfe5 	b.w	800692c <_ZN4blib13SerialMonitor12serialLevel3Ev>
    }
 8006962:	4770      	bx	lr

08006964 <_ZdlPvj>:
 8006964:	f000 b820 	b.w	80069a8 <_ZdlPv>

08006968 <__cxa_guard_acquire>:
 8006968:	6803      	ldr	r3, [r0, #0]
 800696a:	07db      	lsls	r3, r3, #31
 800696c:	d406      	bmi.n	800697c <__cxa_guard_acquire+0x14>
 800696e:	7843      	ldrb	r3, [r0, #1]
 8006970:	b103      	cbz	r3, 8006974 <__cxa_guard_acquire+0xc>
 8006972:	deff      	udf	#255	; 0xff
 8006974:	2301      	movs	r3, #1
 8006976:	7043      	strb	r3, [r0, #1]
 8006978:	4618      	mov	r0, r3
 800697a:	4770      	bx	lr
 800697c:	2000      	movs	r0, #0
 800697e:	4770      	bx	lr

08006980 <__cxa_guard_release>:
 8006980:	2301      	movs	r3, #1
 8006982:	6003      	str	r3, [r0, #0]
 8006984:	4770      	bx	lr

08006986 <_Znwj>:
 8006986:	2801      	cmp	r0, #1
 8006988:	bf38      	it	cc
 800698a:	2001      	movcc	r0, #1
 800698c:	b510      	push	{r4, lr}
 800698e:	4604      	mov	r4, r0
 8006990:	4620      	mov	r0, r4
 8006992:	f000 fa1f 	bl	8006dd4 <malloc>
 8006996:	b100      	cbz	r0, 800699a <_Znwj+0x14>
 8006998:	bd10      	pop	{r4, pc}
 800699a:	f000 f807 	bl	80069ac <_ZSt15get_new_handlerv>
 800699e:	b908      	cbnz	r0, 80069a4 <_Znwj+0x1e>
 80069a0:	f000 fa10 	bl	8006dc4 <abort>
 80069a4:	4780      	blx	r0
 80069a6:	e7f3      	b.n	8006990 <_Znwj+0xa>

080069a8 <_ZdlPv>:
 80069a8:	f000 ba1c 	b.w	8006de4 <free>

080069ac <_ZSt15get_new_handlerv>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <_ZSt15get_new_handlerv+0xc>)
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	f3bf 8f5b 	dmb	ish
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000828 	.word	0x20000828
 80069bc:	00000000 	.word	0x00000000

080069c0 <log>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	ed2d 8b02 	vpush	{d8}
 80069c6:	ec55 4b10 	vmov	r4, r5, d0
 80069ca:	f000 f841 	bl	8006a50 <__ieee754_log>
 80069ce:	4622      	mov	r2, r4
 80069d0:	462b      	mov	r3, r5
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	eeb0 8a40 	vmov.f32	s16, s0
 80069da:	eef0 8a60 	vmov.f32	s17, s1
 80069de:	f7fa f8a5 	bl	8000b2c <__aeabi_dcmpun>
 80069e2:	b998      	cbnz	r0, 8006a0c <log+0x4c>
 80069e4:	2200      	movs	r2, #0
 80069e6:	2300      	movs	r3, #0
 80069e8:	4620      	mov	r0, r4
 80069ea:	4629      	mov	r1, r5
 80069ec:	f7fa f894 	bl	8000b18 <__aeabi_dcmpgt>
 80069f0:	b960      	cbnz	r0, 8006a0c <log+0x4c>
 80069f2:	2200      	movs	r2, #0
 80069f4:	2300      	movs	r3, #0
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7fa f865 	bl	8000ac8 <__aeabi_dcmpeq>
 80069fe:	b160      	cbz	r0, 8006a1a <log+0x5a>
 8006a00:	f001 fb1a 	bl	8008038 <__errno>
 8006a04:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8006a30 <log+0x70>
 8006a08:	2322      	movs	r3, #34	; 0x22
 8006a0a:	6003      	str	r3, [r0, #0]
 8006a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8006a10:	eef0 0a68 	vmov.f32	s1, s17
 8006a14:	ecbd 8b02 	vpop	{d8}
 8006a18:	bd38      	pop	{r3, r4, r5, pc}
 8006a1a:	f001 fb0d 	bl	8008038 <__errno>
 8006a1e:	ecbd 8b02 	vpop	{d8}
 8006a22:	2321      	movs	r3, #33	; 0x21
 8006a24:	6003      	str	r3, [r0, #0]
 8006a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a2a:	4803      	ldr	r0, [pc, #12]	; (8006a38 <log+0x78>)
 8006a2c:	f000 b808 	b.w	8006a40 <nan>
 8006a30:	00000000 	.word	0x00000000
 8006a34:	fff00000 	.word	0xfff00000
 8006a38:	0800c66d 	.word	0x0800c66d
 8006a3c:	00000000 	.word	0x00000000

08006a40 <nan>:
 8006a40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006a48 <nan+0x8>
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	00000000 	.word	0x00000000
 8006a4c:	7ff80000 	.word	0x7ff80000

08006a50 <__ieee754_log>:
 8006a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a54:	ec51 0b10 	vmov	r0, r1, d0
 8006a58:	ed2d 8b04 	vpush	{d8-d9}
 8006a5c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006a60:	b083      	sub	sp, #12
 8006a62:	460d      	mov	r5, r1
 8006a64:	da29      	bge.n	8006aba <__ieee754_log+0x6a>
 8006a66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006a6a:	4303      	orrs	r3, r0
 8006a6c:	ee10 2a10 	vmov	r2, s0
 8006a70:	d10c      	bne.n	8006a8c <__ieee754_log+0x3c>
 8006a72:	49cf      	ldr	r1, [pc, #828]	; (8006db0 <__ieee754_log+0x360>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	2300      	movs	r3, #0
 8006a78:	2000      	movs	r0, #0
 8006a7a:	f7f9 fee7 	bl	800084c <__aeabi_ddiv>
 8006a7e:	ec41 0b10 	vmov	d0, r0, r1
 8006a82:	b003      	add	sp, #12
 8006a84:	ecbd 8b04 	vpop	{d8-d9}
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	2900      	cmp	r1, #0
 8006a8e:	da05      	bge.n	8006a9c <__ieee754_log+0x4c>
 8006a90:	460b      	mov	r3, r1
 8006a92:	f7f9 fbf9 	bl	8000288 <__aeabi_dsub>
 8006a96:	2200      	movs	r2, #0
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e7ee      	b.n	8006a7a <__ieee754_log+0x2a>
 8006a9c:	4bc5      	ldr	r3, [pc, #788]	; (8006db4 <__ieee754_log+0x364>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f7f9 fdaa 	bl	80005f8 <__aeabi_dmul>
 8006aa4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8006aa8:	460d      	mov	r5, r1
 8006aaa:	4ac3      	ldr	r2, [pc, #780]	; (8006db8 <__ieee754_log+0x368>)
 8006aac:	4295      	cmp	r5, r2
 8006aae:	dd06      	ble.n	8006abe <__ieee754_log+0x6e>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	f7f9 fbea 	bl	800028c <__adddf3>
 8006ab8:	e7e1      	b.n	8006a7e <__ieee754_log+0x2e>
 8006aba:	2300      	movs	r3, #0
 8006abc:	e7f5      	b.n	8006aaa <__ieee754_log+0x5a>
 8006abe:	152c      	asrs	r4, r5, #20
 8006ac0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006ac4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006ac8:	441c      	add	r4, r3
 8006aca:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8006ace:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006ad2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ad6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8006ada:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8006ade:	ea42 0105 	orr.w	r1, r2, r5
 8006ae2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4bb4      	ldr	r3, [pc, #720]	; (8006dbc <__ieee754_log+0x36c>)
 8006aea:	f7f9 fbcd 	bl	8000288 <__aeabi_dsub>
 8006aee:	1cab      	adds	r3, r5, #2
 8006af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	4682      	mov	sl, r0
 8006af8:	468b      	mov	fp, r1
 8006afa:	f04f 0200 	mov.w	r2, #0
 8006afe:	dc53      	bgt.n	8006ba8 <__ieee754_log+0x158>
 8006b00:	2300      	movs	r3, #0
 8006b02:	f7f9 ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b06:	b1d0      	cbz	r0, 8006b3e <__ieee754_log+0xee>
 8006b08:	2c00      	cmp	r4, #0
 8006b0a:	f000 8122 	beq.w	8006d52 <__ieee754_log+0x302>
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f7f9 fd08 	bl	8000524 <__aeabi_i2d>
 8006b14:	a390      	add	r3, pc, #576	; (adr r3, 8006d58 <__ieee754_log+0x308>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	460f      	mov	r7, r1
 8006b1e:	f7f9 fd6b 	bl	80005f8 <__aeabi_dmul>
 8006b22:	a38f      	add	r3, pc, #572	; (adr r3, 8006d60 <__ieee754_log+0x310>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	4630      	mov	r0, r6
 8006b2e:	4639      	mov	r1, r7
 8006b30:	f7f9 fd62 	bl	80005f8 <__aeabi_dmul>
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	e7ba      	b.n	8006ab4 <__ieee754_log+0x64>
 8006b3e:	a38a      	add	r3, pc, #552	; (adr r3, 8006d68 <__ieee754_log+0x318>)
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	4650      	mov	r0, sl
 8006b46:	4659      	mov	r1, fp
 8006b48:	f7f9 fd56 	bl	80005f8 <__aeabi_dmul>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	2000      	movs	r0, #0
 8006b52:	499b      	ldr	r1, [pc, #620]	; (8006dc0 <__ieee754_log+0x370>)
 8006b54:	f7f9 fb98 	bl	8000288 <__aeabi_dsub>
 8006b58:	4652      	mov	r2, sl
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	460f      	mov	r7, r1
 8006b5e:	465b      	mov	r3, fp
 8006b60:	4650      	mov	r0, sl
 8006b62:	4659      	mov	r1, fp
 8006b64:	f7f9 fd48 	bl	80005f8 <__aeabi_dmul>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 fd42 	bl	80005f8 <__aeabi_dmul>
 8006b74:	4606      	mov	r6, r0
 8006b76:	460f      	mov	r7, r1
 8006b78:	b914      	cbnz	r4, 8006b80 <__ieee754_log+0x130>
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	e0a2      	b.n	8006cc6 <__ieee754_log+0x276>
 8006b80:	4620      	mov	r0, r4
 8006b82:	f7f9 fccf 	bl	8000524 <__aeabi_i2d>
 8006b86:	a374      	add	r3, pc, #464	; (adr r3, 8006d58 <__ieee754_log+0x308>)
 8006b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8c:	4680      	mov	r8, r0
 8006b8e:	4689      	mov	r9, r1
 8006b90:	f7f9 fd32 	bl	80005f8 <__aeabi_dmul>
 8006b94:	a372      	add	r3, pc, #456	; (adr r3, 8006d60 <__ieee754_log+0x310>)
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	460d      	mov	r5, r1
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7f9 fd29 	bl	80005f8 <__aeabi_dmul>
 8006ba6:	e0a7      	b.n	8006cf8 <__ieee754_log+0x2a8>
 8006ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bac:	f7f9 fb6e 	bl	800028c <__adddf3>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4650      	mov	r0, sl
 8006bb6:	4659      	mov	r1, fp
 8006bb8:	f7f9 fe48 	bl	800084c <__aeabi_ddiv>
 8006bbc:	ec41 0b18 	vmov	d8, r0, r1
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f7f9 fcaf 	bl	8000524 <__aeabi_i2d>
 8006bc6:	ec53 2b18 	vmov	r2, r3, d8
 8006bca:	ec41 0b19 	vmov	d9, r0, r1
 8006bce:	ec51 0b18 	vmov	r0, r1, d8
 8006bd2:	f7f9 fd11 	bl	80005f8 <__aeabi_dmul>
 8006bd6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8006bda:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	4680      	mov	r8, r0
 8006be6:	4689      	mov	r9, r1
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	a360      	add	r3, pc, #384	; (adr r3, 8006d70 <__ieee754_log+0x320>)
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	460f      	mov	r7, r1
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	a35f      	add	r3, pc, #380	; (adr r3, 8006d78 <__ieee754_log+0x328>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fb44 	bl	800028c <__adddf3>
 8006c04:	4632      	mov	r2, r6
 8006c06:	463b      	mov	r3, r7
 8006c08:	f7f9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8006c0c:	a35c      	add	r3, pc, #368	; (adr r3, 8006d80 <__ieee754_log+0x330>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fb3b 	bl	800028c <__adddf3>
 8006c16:	4632      	mov	r2, r6
 8006c18:	463b      	mov	r3, r7
 8006c1a:	f7f9 fced 	bl	80005f8 <__aeabi_dmul>
 8006c1e:	a35a      	add	r3, pc, #360	; (adr r3, 8006d88 <__ieee754_log+0x338>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f7f9 fb32 	bl	800028c <__adddf3>
 8006c28:	4642      	mov	r2, r8
 8006c2a:	464b      	mov	r3, r9
 8006c2c:	f7f9 fce4 	bl	80005f8 <__aeabi_dmul>
 8006c30:	a357      	add	r3, pc, #348	; (adr r3, 8006d90 <__ieee754_log+0x340>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	4680      	mov	r8, r0
 8006c38:	4689      	mov	r9, r1
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	f7f9 fcdb 	bl	80005f8 <__aeabi_dmul>
 8006c42:	a355      	add	r3, pc, #340	; (adr r3, 8006d98 <__ieee754_log+0x348>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fb20 	bl	800028c <__adddf3>
 8006c4c:	4632      	mov	r2, r6
 8006c4e:	463b      	mov	r3, r7
 8006c50:	f7f9 fcd2 	bl	80005f8 <__aeabi_dmul>
 8006c54:	a352      	add	r3, pc, #328	; (adr r3, 8006da0 <__ieee754_log+0x350>)
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f7f9 fb17 	bl	800028c <__adddf3>
 8006c5e:	4632      	mov	r2, r6
 8006c60:	463b      	mov	r3, r7
 8006c62:	f7f9 fcc9 	bl	80005f8 <__aeabi_dmul>
 8006c66:	460b      	mov	r3, r1
 8006c68:	4602      	mov	r2, r0
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	f7f9 fb0d 	bl	800028c <__adddf3>
 8006c72:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006c76:	9b01      	ldr	r3, [sp, #4]
 8006c78:	3551      	adds	r5, #81	; 0x51
 8006c7a:	431d      	orrs	r5, r3
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	4680      	mov	r8, r0
 8006c80:	4689      	mov	r9, r1
 8006c82:	dd48      	ble.n	8006d16 <__ieee754_log+0x2c6>
 8006c84:	4b4e      	ldr	r3, [pc, #312]	; (8006dc0 <__ieee754_log+0x370>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	4650      	mov	r0, sl
 8006c8a:	4659      	mov	r1, fp
 8006c8c:	f7f9 fcb4 	bl	80005f8 <__aeabi_dmul>
 8006c90:	4652      	mov	r2, sl
 8006c92:	465b      	mov	r3, fp
 8006c94:	f7f9 fcb0 	bl	80005f8 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	460f      	mov	r7, r1
 8006ca0:	4640      	mov	r0, r8
 8006ca2:	4649      	mov	r1, r9
 8006ca4:	f7f9 faf2 	bl	800028c <__adddf3>
 8006ca8:	ec53 2b18 	vmov	r2, r3, d8
 8006cac:	f7f9 fca4 	bl	80005f8 <__aeabi_dmul>
 8006cb0:	4680      	mov	r8, r0
 8006cb2:	4689      	mov	r9, r1
 8006cb4:	b964      	cbnz	r4, 8006cd0 <__ieee754_log+0x280>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4630      	mov	r0, r6
 8006cbc:	4639      	mov	r1, r7
 8006cbe:	f7f9 fae3 	bl	8000288 <__aeabi_dsub>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4650      	mov	r0, sl
 8006cc8:	4659      	mov	r1, fp
 8006cca:	f7f9 fadd 	bl	8000288 <__aeabi_dsub>
 8006cce:	e6d6      	b.n	8006a7e <__ieee754_log+0x2e>
 8006cd0:	a321      	add	r3, pc, #132	; (adr r3, 8006d58 <__ieee754_log+0x308>)
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	ec51 0b19 	vmov	r0, r1, d9
 8006cda:	f7f9 fc8d 	bl	80005f8 <__aeabi_dmul>
 8006cde:	a320      	add	r3, pc, #128	; (adr r3, 8006d60 <__ieee754_log+0x310>)
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	4604      	mov	r4, r0
 8006ce6:	460d      	mov	r5, r1
 8006ce8:	ec51 0b19 	vmov	r0, r1, d9
 8006cec:	f7f9 fc84 	bl	80005f8 <__aeabi_dmul>
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	f7f9 faca 	bl	800028c <__adddf3>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	4639      	mov	r1, r7
 8006d00:	f7f9 fac2 	bl	8000288 <__aeabi_dsub>
 8006d04:	4652      	mov	r2, sl
 8006d06:	465b      	mov	r3, fp
 8006d08:	f7f9 fabe 	bl	8000288 <__aeabi_dsub>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4620      	mov	r0, r4
 8006d12:	4629      	mov	r1, r5
 8006d14:	e7d9      	b.n	8006cca <__ieee754_log+0x27a>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4650      	mov	r0, sl
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	f7f9 fab3 	bl	8000288 <__aeabi_dsub>
 8006d22:	ec53 2b18 	vmov	r2, r3, d8
 8006d26:	f7f9 fc67 	bl	80005f8 <__aeabi_dmul>
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	460f      	mov	r7, r1
 8006d2e:	2c00      	cmp	r4, #0
 8006d30:	f43f af23 	beq.w	8006b7a <__ieee754_log+0x12a>
 8006d34:	a308      	add	r3, pc, #32	; (adr r3, 8006d58 <__ieee754_log+0x308>)
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	ec51 0b19 	vmov	r0, r1, d9
 8006d3e:	f7f9 fc5b 	bl	80005f8 <__aeabi_dmul>
 8006d42:	a307      	add	r3, pc, #28	; (adr r3, 8006d60 <__ieee754_log+0x310>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	ec51 0b19 	vmov	r0, r1, d9
 8006d50:	e727      	b.n	8006ba2 <__ieee754_log+0x152>
 8006d52:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8006da8 <__ieee754_log+0x358>
 8006d56:	e694      	b.n	8006a82 <__ieee754_log+0x32>
 8006d58:	fee00000 	.word	0xfee00000
 8006d5c:	3fe62e42 	.word	0x3fe62e42
 8006d60:	35793c76 	.word	0x35793c76
 8006d64:	3dea39ef 	.word	0x3dea39ef
 8006d68:	55555555 	.word	0x55555555
 8006d6c:	3fd55555 	.word	0x3fd55555
 8006d70:	df3e5244 	.word	0xdf3e5244
 8006d74:	3fc2f112 	.word	0x3fc2f112
 8006d78:	96cb03de 	.word	0x96cb03de
 8006d7c:	3fc74664 	.word	0x3fc74664
 8006d80:	94229359 	.word	0x94229359
 8006d84:	3fd24924 	.word	0x3fd24924
 8006d88:	55555593 	.word	0x55555593
 8006d8c:	3fe55555 	.word	0x3fe55555
 8006d90:	d078c69f 	.word	0xd078c69f
 8006d94:	3fc39a09 	.word	0x3fc39a09
 8006d98:	1d8e78af 	.word	0x1d8e78af
 8006d9c:	3fcc71c5 	.word	0x3fcc71c5
 8006da0:	9997fa04 	.word	0x9997fa04
 8006da4:	3fd99999 	.word	0x3fd99999
	...
 8006db0:	c3500000 	.word	0xc3500000
 8006db4:	43500000 	.word	0x43500000
 8006db8:	7fefffff 	.word	0x7fefffff
 8006dbc:	3ff00000 	.word	0x3ff00000
 8006dc0:	3fe00000 	.word	0x3fe00000

08006dc4 <abort>:
 8006dc4:	b508      	push	{r3, lr}
 8006dc6:	2006      	movs	r0, #6
 8006dc8:	f001 f8c0 	bl	8007f4c <raise>
 8006dcc:	2001      	movs	r0, #1
 8006dce:	f7fc fbc9 	bl	8003564 <_exit>
	...

08006dd4 <malloc>:
 8006dd4:	4b02      	ldr	r3, [pc, #8]	; (8006de0 <malloc+0xc>)
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	6818      	ldr	r0, [r3, #0]
 8006dda:	f000 b82b 	b.w	8006e34 <_malloc_r>
 8006dde:	bf00      	nop
 8006de0:	20000070 	.word	0x20000070

08006de4 <free>:
 8006de4:	4b02      	ldr	r3, [pc, #8]	; (8006df0 <free+0xc>)
 8006de6:	4601      	mov	r1, r0
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	f001 bfeb 	b.w	8008dc4 <_free_r>
 8006dee:	bf00      	nop
 8006df0:	20000070 	.word	0x20000070

08006df4 <sbrk_aligned>:
 8006df4:	b570      	push	{r4, r5, r6, lr}
 8006df6:	4e0e      	ldr	r6, [pc, #56]	; (8006e30 <sbrk_aligned+0x3c>)
 8006df8:	460c      	mov	r4, r1
 8006dfa:	6831      	ldr	r1, [r6, #0]
 8006dfc:	4605      	mov	r5, r0
 8006dfe:	b911      	cbnz	r1, 8006e06 <sbrk_aligned+0x12>
 8006e00:	f001 f8f8 	bl	8007ff4 <_sbrk_r>
 8006e04:	6030      	str	r0, [r6, #0]
 8006e06:	4621      	mov	r1, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f001 f8f3 	bl	8007ff4 <_sbrk_r>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d00a      	beq.n	8006e28 <sbrk_aligned+0x34>
 8006e12:	1cc4      	adds	r4, r0, #3
 8006e14:	f024 0403 	bic.w	r4, r4, #3
 8006e18:	42a0      	cmp	r0, r4
 8006e1a:	d007      	beq.n	8006e2c <sbrk_aligned+0x38>
 8006e1c:	1a21      	subs	r1, r4, r0
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f001 f8e8 	bl	8007ff4 <_sbrk_r>
 8006e24:	3001      	adds	r0, #1
 8006e26:	d101      	bne.n	8006e2c <sbrk_aligned+0x38>
 8006e28:	f04f 34ff 	mov.w	r4, #4294967295
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	20000830 	.word	0x20000830

08006e34 <_malloc_r>:
 8006e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e38:	1ccd      	adds	r5, r1, #3
 8006e3a:	f025 0503 	bic.w	r5, r5, #3
 8006e3e:	3508      	adds	r5, #8
 8006e40:	2d0c      	cmp	r5, #12
 8006e42:	bf38      	it	cc
 8006e44:	250c      	movcc	r5, #12
 8006e46:	2d00      	cmp	r5, #0
 8006e48:	4607      	mov	r7, r0
 8006e4a:	db01      	blt.n	8006e50 <_malloc_r+0x1c>
 8006e4c:	42a9      	cmp	r1, r5
 8006e4e:	d905      	bls.n	8006e5c <_malloc_r+0x28>
 8006e50:	230c      	movs	r3, #12
 8006e52:	603b      	str	r3, [r7, #0]
 8006e54:	2600      	movs	r6, #0
 8006e56:	4630      	mov	r0, r6
 8006e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f30 <_malloc_r+0xfc>
 8006e60:	f000 f868 	bl	8006f34 <__malloc_lock>
 8006e64:	f8d8 3000 	ldr.w	r3, [r8]
 8006e68:	461c      	mov	r4, r3
 8006e6a:	bb5c      	cbnz	r4, 8006ec4 <_malloc_r+0x90>
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4638      	mov	r0, r7
 8006e70:	f7ff ffc0 	bl	8006df4 <sbrk_aligned>
 8006e74:	1c43      	adds	r3, r0, #1
 8006e76:	4604      	mov	r4, r0
 8006e78:	d155      	bne.n	8006f26 <_malloc_r+0xf2>
 8006e7a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e7e:	4626      	mov	r6, r4
 8006e80:	2e00      	cmp	r6, #0
 8006e82:	d145      	bne.n	8006f10 <_malloc_r+0xdc>
 8006e84:	2c00      	cmp	r4, #0
 8006e86:	d048      	beq.n	8006f1a <_malloc_r+0xe6>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4638      	mov	r0, r7
 8006e8e:	eb04 0903 	add.w	r9, r4, r3
 8006e92:	f001 f8af 	bl	8007ff4 <_sbrk_r>
 8006e96:	4581      	cmp	r9, r0
 8006e98:	d13f      	bne.n	8006f1a <_malloc_r+0xe6>
 8006e9a:	6821      	ldr	r1, [r4, #0]
 8006e9c:	1a6d      	subs	r5, r5, r1
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f7ff ffa7 	bl	8006df4 <sbrk_aligned>
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d037      	beq.n	8006f1a <_malloc_r+0xe6>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	442b      	add	r3, r5
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d038      	beq.n	8006f2a <_malloc_r+0xf6>
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	42a2      	cmp	r2, r4
 8006ebc:	d12b      	bne.n	8006f16 <_malloc_r+0xe2>
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	e00f      	b.n	8006ee4 <_malloc_r+0xb0>
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	1b52      	subs	r2, r2, r5
 8006ec8:	d41f      	bmi.n	8006f0a <_malloc_r+0xd6>
 8006eca:	2a0b      	cmp	r2, #11
 8006ecc:	d917      	bls.n	8006efe <_malloc_r+0xca>
 8006ece:	1961      	adds	r1, r4, r5
 8006ed0:	42a3      	cmp	r3, r4
 8006ed2:	6025      	str	r5, [r4, #0]
 8006ed4:	bf18      	it	ne
 8006ed6:	6059      	strne	r1, [r3, #4]
 8006ed8:	6863      	ldr	r3, [r4, #4]
 8006eda:	bf08      	it	eq
 8006edc:	f8c8 1000 	streq.w	r1, [r8]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f104 060b 	add.w	r6, r4, #11
 8006eea:	f000 f829 	bl	8006f40 <__malloc_unlock>
 8006eee:	f026 0607 	bic.w	r6, r6, #7
 8006ef2:	1d23      	adds	r3, r4, #4
 8006ef4:	1af2      	subs	r2, r6, r3
 8006ef6:	d0ae      	beq.n	8006e56 <_malloc_r+0x22>
 8006ef8:	1b9b      	subs	r3, r3, r6
 8006efa:	50a3      	str	r3, [r4, r2]
 8006efc:	e7ab      	b.n	8006e56 <_malloc_r+0x22>
 8006efe:	42a3      	cmp	r3, r4
 8006f00:	6862      	ldr	r2, [r4, #4]
 8006f02:	d1dd      	bne.n	8006ec0 <_malloc_r+0x8c>
 8006f04:	f8c8 2000 	str.w	r2, [r8]
 8006f08:	e7ec      	b.n	8006ee4 <_malloc_r+0xb0>
 8006f0a:	4623      	mov	r3, r4
 8006f0c:	6864      	ldr	r4, [r4, #4]
 8006f0e:	e7ac      	b.n	8006e6a <_malloc_r+0x36>
 8006f10:	4634      	mov	r4, r6
 8006f12:	6876      	ldr	r6, [r6, #4]
 8006f14:	e7b4      	b.n	8006e80 <_malloc_r+0x4c>
 8006f16:	4613      	mov	r3, r2
 8006f18:	e7cc      	b.n	8006eb4 <_malloc_r+0x80>
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	603b      	str	r3, [r7, #0]
 8006f1e:	4638      	mov	r0, r7
 8006f20:	f000 f80e 	bl	8006f40 <__malloc_unlock>
 8006f24:	e797      	b.n	8006e56 <_malloc_r+0x22>
 8006f26:	6025      	str	r5, [r4, #0]
 8006f28:	e7dc      	b.n	8006ee4 <_malloc_r+0xb0>
 8006f2a:	605b      	str	r3, [r3, #4]
 8006f2c:	deff      	udf	#255	; 0xff
 8006f2e:	bf00      	nop
 8006f30:	2000082c 	.word	0x2000082c

08006f34 <__malloc_lock>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__malloc_lock+0x8>)
 8006f36:	f001 b8aa 	b.w	800808e <__retarget_lock_acquire_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	20000974 	.word	0x20000974

08006f40 <__malloc_unlock>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__malloc_unlock+0x8>)
 8006f42:	f001 b8a5 	b.w	8008090 <__retarget_lock_release_recursive>
 8006f46:	bf00      	nop
 8006f48:	20000974 	.word	0x20000974

08006f4c <__cvt>:
 8006f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	ec55 4b10 	vmov	r4, r5, d0
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	460e      	mov	r6, r1
 8006f58:	4619      	mov	r1, r3
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	bfbb      	ittet	lt
 8006f5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f62:	461d      	movlt	r5, r3
 8006f64:	2300      	movge	r3, #0
 8006f66:	232d      	movlt	r3, #45	; 0x2d
 8006f68:	700b      	strb	r3, [r1, #0]
 8006f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f70:	4691      	mov	r9, r2
 8006f72:	f023 0820 	bic.w	r8, r3, #32
 8006f76:	bfbc      	itt	lt
 8006f78:	4622      	movlt	r2, r4
 8006f7a:	4614      	movlt	r4, r2
 8006f7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f80:	d005      	beq.n	8006f8e <__cvt+0x42>
 8006f82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f86:	d100      	bne.n	8006f8a <__cvt+0x3e>
 8006f88:	3601      	adds	r6, #1
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	e000      	b.n	8006f90 <__cvt+0x44>
 8006f8e:	2103      	movs	r1, #3
 8006f90:	ab03      	add	r3, sp, #12
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	ab02      	add	r3, sp, #8
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	ec45 4b10 	vmov	d0, r4, r5
 8006f9c:	4653      	mov	r3, sl
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	f001 f91e 	bl	80081e0 <_dtoa_r>
 8006fa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fa8:	4607      	mov	r7, r0
 8006faa:	d102      	bne.n	8006fb2 <__cvt+0x66>
 8006fac:	f019 0f01 	tst.w	r9, #1
 8006fb0:	d022      	beq.n	8006ff8 <__cvt+0xac>
 8006fb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fb6:	eb07 0906 	add.w	r9, r7, r6
 8006fba:	d110      	bne.n	8006fde <__cvt+0x92>
 8006fbc:	783b      	ldrb	r3, [r7, #0]
 8006fbe:	2b30      	cmp	r3, #48	; 0x30
 8006fc0:	d10a      	bne.n	8006fd8 <__cvt+0x8c>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f7f9 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fce:	b918      	cbnz	r0, 8006fd8 <__cvt+0x8c>
 8006fd0:	f1c6 0601 	rsb	r6, r6, #1
 8006fd4:	f8ca 6000 	str.w	r6, [sl]
 8006fd8:	f8da 3000 	ldr.w	r3, [sl]
 8006fdc:	4499      	add	r9, r3
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7f9 fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fea:	b108      	cbz	r0, 8006ff0 <__cvt+0xa4>
 8006fec:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ff0:	2230      	movs	r2, #48	; 0x30
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	454b      	cmp	r3, r9
 8006ff6:	d307      	bcc.n	8007008 <__cvt+0xbc>
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ffc:	1bdb      	subs	r3, r3, r7
 8006ffe:	4638      	mov	r0, r7
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	b004      	add	sp, #16
 8007004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007008:	1c59      	adds	r1, r3, #1
 800700a:	9103      	str	r1, [sp, #12]
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e7f0      	b.n	8006ff2 <__cvt+0xa6>

08007010 <__exponent>:
 8007010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007012:	4603      	mov	r3, r0
 8007014:	2900      	cmp	r1, #0
 8007016:	bfb8      	it	lt
 8007018:	4249      	neglt	r1, r1
 800701a:	f803 2b02 	strb.w	r2, [r3], #2
 800701e:	bfb4      	ite	lt
 8007020:	222d      	movlt	r2, #45	; 0x2d
 8007022:	222b      	movge	r2, #43	; 0x2b
 8007024:	2909      	cmp	r1, #9
 8007026:	7042      	strb	r2, [r0, #1]
 8007028:	dd2a      	ble.n	8007080 <__exponent+0x70>
 800702a:	f10d 0207 	add.w	r2, sp, #7
 800702e:	4617      	mov	r7, r2
 8007030:	260a      	movs	r6, #10
 8007032:	4694      	mov	ip, r2
 8007034:	fb91 f5f6 	sdiv	r5, r1, r6
 8007038:	fb06 1415 	mls	r4, r6, r5, r1
 800703c:	3430      	adds	r4, #48	; 0x30
 800703e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007042:	460c      	mov	r4, r1
 8007044:	2c63      	cmp	r4, #99	; 0x63
 8007046:	f102 32ff 	add.w	r2, r2, #4294967295
 800704a:	4629      	mov	r1, r5
 800704c:	dcf1      	bgt.n	8007032 <__exponent+0x22>
 800704e:	3130      	adds	r1, #48	; 0x30
 8007050:	f1ac 0402 	sub.w	r4, ip, #2
 8007054:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007058:	1c41      	adds	r1, r0, #1
 800705a:	4622      	mov	r2, r4
 800705c:	42ba      	cmp	r2, r7
 800705e:	d30a      	bcc.n	8007076 <__exponent+0x66>
 8007060:	f10d 0209 	add.w	r2, sp, #9
 8007064:	eba2 020c 	sub.w	r2, r2, ip
 8007068:	42bc      	cmp	r4, r7
 800706a:	bf88      	it	hi
 800706c:	2200      	movhi	r2, #0
 800706e:	4413      	add	r3, r2
 8007070:	1a18      	subs	r0, r3, r0
 8007072:	b003      	add	sp, #12
 8007074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007076:	f812 5b01 	ldrb.w	r5, [r2], #1
 800707a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800707e:	e7ed      	b.n	800705c <__exponent+0x4c>
 8007080:	2330      	movs	r3, #48	; 0x30
 8007082:	3130      	adds	r1, #48	; 0x30
 8007084:	7083      	strb	r3, [r0, #2]
 8007086:	70c1      	strb	r1, [r0, #3]
 8007088:	1d03      	adds	r3, r0, #4
 800708a:	e7f1      	b.n	8007070 <__exponent+0x60>

0800708c <_printf_float>:
 800708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	ed2d 8b02 	vpush	{d8}
 8007094:	b08d      	sub	sp, #52	; 0x34
 8007096:	460c      	mov	r4, r1
 8007098:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800709c:	4616      	mov	r6, r2
 800709e:	461f      	mov	r7, r3
 80070a0:	4605      	mov	r5, r0
 80070a2:	f000 ff5b 	bl	8007f5c <_localeconv_r>
 80070a6:	f8d0 a000 	ldr.w	sl, [r0]
 80070aa:	4650      	mov	r0, sl
 80070ac:	f7f9 f8e0 	bl	8000270 <strlen>
 80070b0:	2300      	movs	r3, #0
 80070b2:	930a      	str	r3, [sp, #40]	; 0x28
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	9305      	str	r3, [sp, #20]
 80070b8:	f8d8 3000 	ldr.w	r3, [r8]
 80070bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070c0:	3307      	adds	r3, #7
 80070c2:	f023 0307 	bic.w	r3, r3, #7
 80070c6:	f103 0208 	add.w	r2, r3, #8
 80070ca:	f8c8 2000 	str.w	r2, [r8]
 80070ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80070dc:	ee08 0a10 	vmov	s16, r0
 80070e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80070e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070e8:	4b9e      	ldr	r3, [pc, #632]	; (8007364 <_printf_float+0x2d8>)
 80070ea:	f04f 32ff 	mov.w	r2, #4294967295
 80070ee:	f7f9 fd1d 	bl	8000b2c <__aeabi_dcmpun>
 80070f2:	bb88      	cbnz	r0, 8007158 <_printf_float+0xcc>
 80070f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070f8:	4b9a      	ldr	r3, [pc, #616]	; (8007364 <_printf_float+0x2d8>)
 80070fa:	f04f 32ff 	mov.w	r2, #4294967295
 80070fe:	f7f9 fcf7 	bl	8000af0 <__aeabi_dcmple>
 8007102:	bb48      	cbnz	r0, 8007158 <_printf_float+0xcc>
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	4640      	mov	r0, r8
 800710a:	4649      	mov	r1, r9
 800710c:	f7f9 fce6 	bl	8000adc <__aeabi_dcmplt>
 8007110:	b110      	cbz	r0, 8007118 <_printf_float+0x8c>
 8007112:	232d      	movs	r3, #45	; 0x2d
 8007114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007118:	4a93      	ldr	r2, [pc, #588]	; (8007368 <_printf_float+0x2dc>)
 800711a:	4b94      	ldr	r3, [pc, #592]	; (800736c <_printf_float+0x2e0>)
 800711c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007120:	bf94      	ite	ls
 8007122:	4690      	movls	r8, r2
 8007124:	4698      	movhi	r8, r3
 8007126:	2303      	movs	r3, #3
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	9b05      	ldr	r3, [sp, #20]
 800712c:	f023 0304 	bic.w	r3, r3, #4
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	f04f 0900 	mov.w	r9, #0
 8007136:	9700      	str	r7, [sp, #0]
 8007138:	4633      	mov	r3, r6
 800713a:	aa0b      	add	r2, sp, #44	; 0x2c
 800713c:	4621      	mov	r1, r4
 800713e:	4628      	mov	r0, r5
 8007140:	f000 f9da 	bl	80074f8 <_printf_common>
 8007144:	3001      	adds	r0, #1
 8007146:	f040 8090 	bne.w	800726a <_printf_float+0x1de>
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	b00d      	add	sp, #52	; 0x34
 8007150:	ecbd 8b02 	vpop	{d8}
 8007154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	4640      	mov	r0, r8
 800715e:	4649      	mov	r1, r9
 8007160:	f7f9 fce4 	bl	8000b2c <__aeabi_dcmpun>
 8007164:	b140      	cbz	r0, 8007178 <_printf_float+0xec>
 8007166:	464b      	mov	r3, r9
 8007168:	2b00      	cmp	r3, #0
 800716a:	bfbc      	itt	lt
 800716c:	232d      	movlt	r3, #45	; 0x2d
 800716e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007172:	4a7f      	ldr	r2, [pc, #508]	; (8007370 <_printf_float+0x2e4>)
 8007174:	4b7f      	ldr	r3, [pc, #508]	; (8007374 <_printf_float+0x2e8>)
 8007176:	e7d1      	b.n	800711c <_printf_float+0x90>
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800717e:	9206      	str	r2, [sp, #24]
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	d13f      	bne.n	8007204 <_printf_float+0x178>
 8007184:	2306      	movs	r3, #6
 8007186:	6063      	str	r3, [r4, #4]
 8007188:	9b05      	ldr	r3, [sp, #20]
 800718a:	6861      	ldr	r1, [r4, #4]
 800718c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007190:	2300      	movs	r3, #0
 8007192:	9303      	str	r3, [sp, #12]
 8007194:	ab0a      	add	r3, sp, #40	; 0x28
 8007196:	e9cd b301 	strd	fp, r3, [sp, #4]
 800719a:	ab09      	add	r3, sp, #36	; 0x24
 800719c:	ec49 8b10 	vmov	d0, r8, r9
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	6022      	str	r2, [r4, #0]
 80071a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071a8:	4628      	mov	r0, r5
 80071aa:	f7ff fecf 	bl	8006f4c <__cvt>
 80071ae:	9b06      	ldr	r3, [sp, #24]
 80071b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071b2:	2b47      	cmp	r3, #71	; 0x47
 80071b4:	4680      	mov	r8, r0
 80071b6:	d108      	bne.n	80071ca <_printf_float+0x13e>
 80071b8:	1cc8      	adds	r0, r1, #3
 80071ba:	db02      	blt.n	80071c2 <_printf_float+0x136>
 80071bc:	6863      	ldr	r3, [r4, #4]
 80071be:	4299      	cmp	r1, r3
 80071c0:	dd41      	ble.n	8007246 <_printf_float+0x1ba>
 80071c2:	f1ab 0302 	sub.w	r3, fp, #2
 80071c6:	fa5f fb83 	uxtb.w	fp, r3
 80071ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071ce:	d820      	bhi.n	8007212 <_printf_float+0x186>
 80071d0:	3901      	subs	r1, #1
 80071d2:	465a      	mov	r2, fp
 80071d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071d8:	9109      	str	r1, [sp, #36]	; 0x24
 80071da:	f7ff ff19 	bl	8007010 <__exponent>
 80071de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071e0:	1813      	adds	r3, r2, r0
 80071e2:	2a01      	cmp	r2, #1
 80071e4:	4681      	mov	r9, r0
 80071e6:	6123      	str	r3, [r4, #16]
 80071e8:	dc02      	bgt.n	80071f0 <_printf_float+0x164>
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	07d2      	lsls	r2, r2, #31
 80071ee:	d501      	bpl.n	80071f4 <_printf_float+0x168>
 80071f0:	3301      	adds	r3, #1
 80071f2:	6123      	str	r3, [r4, #16]
 80071f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d09c      	beq.n	8007136 <_printf_float+0xaa>
 80071fc:	232d      	movs	r3, #45	; 0x2d
 80071fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007202:	e798      	b.n	8007136 <_printf_float+0xaa>
 8007204:	9a06      	ldr	r2, [sp, #24]
 8007206:	2a47      	cmp	r2, #71	; 0x47
 8007208:	d1be      	bne.n	8007188 <_printf_float+0xfc>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1bc      	bne.n	8007188 <_printf_float+0xfc>
 800720e:	2301      	movs	r3, #1
 8007210:	e7b9      	b.n	8007186 <_printf_float+0xfa>
 8007212:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007216:	d118      	bne.n	800724a <_printf_float+0x1be>
 8007218:	2900      	cmp	r1, #0
 800721a:	6863      	ldr	r3, [r4, #4]
 800721c:	dd0b      	ble.n	8007236 <_printf_float+0x1aa>
 800721e:	6121      	str	r1, [r4, #16]
 8007220:	b913      	cbnz	r3, 8007228 <_printf_float+0x19c>
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	07d0      	lsls	r0, r2, #31
 8007226:	d502      	bpl.n	800722e <_printf_float+0x1a2>
 8007228:	3301      	adds	r3, #1
 800722a:	440b      	add	r3, r1
 800722c:	6123      	str	r3, [r4, #16]
 800722e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007230:	f04f 0900 	mov.w	r9, #0
 8007234:	e7de      	b.n	80071f4 <_printf_float+0x168>
 8007236:	b913      	cbnz	r3, 800723e <_printf_float+0x1b2>
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	07d2      	lsls	r2, r2, #31
 800723c:	d501      	bpl.n	8007242 <_printf_float+0x1b6>
 800723e:	3302      	adds	r3, #2
 8007240:	e7f4      	b.n	800722c <_printf_float+0x1a0>
 8007242:	2301      	movs	r3, #1
 8007244:	e7f2      	b.n	800722c <_printf_float+0x1a0>
 8007246:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800724a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800724c:	4299      	cmp	r1, r3
 800724e:	db05      	blt.n	800725c <_printf_float+0x1d0>
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	6121      	str	r1, [r4, #16]
 8007254:	07d8      	lsls	r0, r3, #31
 8007256:	d5ea      	bpl.n	800722e <_printf_float+0x1a2>
 8007258:	1c4b      	adds	r3, r1, #1
 800725a:	e7e7      	b.n	800722c <_printf_float+0x1a0>
 800725c:	2900      	cmp	r1, #0
 800725e:	bfd4      	ite	le
 8007260:	f1c1 0202 	rsble	r2, r1, #2
 8007264:	2201      	movgt	r2, #1
 8007266:	4413      	add	r3, r2
 8007268:	e7e0      	b.n	800722c <_printf_float+0x1a0>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	055a      	lsls	r2, r3, #21
 800726e:	d407      	bmi.n	8007280 <_printf_float+0x1f4>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	4642      	mov	r2, r8
 8007274:	4631      	mov	r1, r6
 8007276:	4628      	mov	r0, r5
 8007278:	47b8      	blx	r7
 800727a:	3001      	adds	r0, #1
 800727c:	d12c      	bne.n	80072d8 <_printf_float+0x24c>
 800727e:	e764      	b.n	800714a <_printf_float+0xbe>
 8007280:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007284:	f240 80e0 	bls.w	8007448 <_printf_float+0x3bc>
 8007288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800728c:	2200      	movs	r2, #0
 800728e:	2300      	movs	r3, #0
 8007290:	f7f9 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007294:	2800      	cmp	r0, #0
 8007296:	d034      	beq.n	8007302 <_printf_float+0x276>
 8007298:	4a37      	ldr	r2, [pc, #220]	; (8007378 <_printf_float+0x2ec>)
 800729a:	2301      	movs	r3, #1
 800729c:	4631      	mov	r1, r6
 800729e:	4628      	mov	r0, r5
 80072a0:	47b8      	blx	r7
 80072a2:	3001      	adds	r0, #1
 80072a4:	f43f af51 	beq.w	800714a <_printf_float+0xbe>
 80072a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ac:	429a      	cmp	r2, r3
 80072ae:	db02      	blt.n	80072b6 <_printf_float+0x22a>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	07d8      	lsls	r0, r3, #31
 80072b4:	d510      	bpl.n	80072d8 <_printf_float+0x24c>
 80072b6:	ee18 3a10 	vmov	r3, s16
 80072ba:	4652      	mov	r2, sl
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f af41 	beq.w	800714a <_printf_float+0xbe>
 80072c8:	f04f 0800 	mov.w	r8, #0
 80072cc:	f104 091a 	add.w	r9, r4, #26
 80072d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d2:	3b01      	subs	r3, #1
 80072d4:	4543      	cmp	r3, r8
 80072d6:	dc09      	bgt.n	80072ec <_printf_float+0x260>
 80072d8:	6823      	ldr	r3, [r4, #0]
 80072da:	079b      	lsls	r3, r3, #30
 80072dc:	f100 8107 	bmi.w	80074ee <_printf_float+0x462>
 80072e0:	68e0      	ldr	r0, [r4, #12]
 80072e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e4:	4298      	cmp	r0, r3
 80072e6:	bfb8      	it	lt
 80072e8:	4618      	movlt	r0, r3
 80072ea:	e730      	b.n	800714e <_printf_float+0xc2>
 80072ec:	2301      	movs	r3, #1
 80072ee:	464a      	mov	r2, r9
 80072f0:	4631      	mov	r1, r6
 80072f2:	4628      	mov	r0, r5
 80072f4:	47b8      	blx	r7
 80072f6:	3001      	adds	r0, #1
 80072f8:	f43f af27 	beq.w	800714a <_printf_float+0xbe>
 80072fc:	f108 0801 	add.w	r8, r8, #1
 8007300:	e7e6      	b.n	80072d0 <_printf_float+0x244>
 8007302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	dc39      	bgt.n	800737c <_printf_float+0x2f0>
 8007308:	4a1b      	ldr	r2, [pc, #108]	; (8007378 <_printf_float+0x2ec>)
 800730a:	2301      	movs	r3, #1
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	f43f af19 	beq.w	800714a <_printf_float+0xbe>
 8007318:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800731c:	4313      	orrs	r3, r2
 800731e:	d102      	bne.n	8007326 <_printf_float+0x29a>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	07d9      	lsls	r1, r3, #31
 8007324:	d5d8      	bpl.n	80072d8 <_printf_float+0x24c>
 8007326:	ee18 3a10 	vmov	r3, s16
 800732a:	4652      	mov	r2, sl
 800732c:	4631      	mov	r1, r6
 800732e:	4628      	mov	r0, r5
 8007330:	47b8      	blx	r7
 8007332:	3001      	adds	r0, #1
 8007334:	f43f af09 	beq.w	800714a <_printf_float+0xbe>
 8007338:	f04f 0900 	mov.w	r9, #0
 800733c:	f104 0a1a 	add.w	sl, r4, #26
 8007340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007342:	425b      	negs	r3, r3
 8007344:	454b      	cmp	r3, r9
 8007346:	dc01      	bgt.n	800734c <_printf_float+0x2c0>
 8007348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800734a:	e792      	b.n	8007272 <_printf_float+0x1e6>
 800734c:	2301      	movs	r3, #1
 800734e:	4652      	mov	r2, sl
 8007350:	4631      	mov	r1, r6
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	f43f aef7 	beq.w	800714a <_printf_float+0xbe>
 800735c:	f109 0901 	add.w	r9, r9, #1
 8007360:	e7ee      	b.n	8007340 <_printf_float+0x2b4>
 8007362:	bf00      	nop
 8007364:	7fefffff 	.word	0x7fefffff
 8007368:	0800c2a4 	.word	0x0800c2a4
 800736c:	0800c2a8 	.word	0x0800c2a8
 8007370:	0800c2ac 	.word	0x0800c2ac
 8007374:	0800c2b0 	.word	0x0800c2b0
 8007378:	0800b7d7 	.word	0x0800b7d7
 800737c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800737e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007380:	429a      	cmp	r2, r3
 8007382:	bfa8      	it	ge
 8007384:	461a      	movge	r2, r3
 8007386:	2a00      	cmp	r2, #0
 8007388:	4691      	mov	r9, r2
 800738a:	dc37      	bgt.n	80073fc <_printf_float+0x370>
 800738c:	f04f 0b00 	mov.w	fp, #0
 8007390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007394:	f104 021a 	add.w	r2, r4, #26
 8007398:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800739a:	9305      	str	r3, [sp, #20]
 800739c:	eba3 0309 	sub.w	r3, r3, r9
 80073a0:	455b      	cmp	r3, fp
 80073a2:	dc33      	bgt.n	800740c <_printf_float+0x380>
 80073a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a8:	429a      	cmp	r2, r3
 80073aa:	db3b      	blt.n	8007424 <_printf_float+0x398>
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	07da      	lsls	r2, r3, #31
 80073b0:	d438      	bmi.n	8007424 <_printf_float+0x398>
 80073b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80073b6:	eba2 0903 	sub.w	r9, r2, r3
 80073ba:	9b05      	ldr	r3, [sp, #20]
 80073bc:	1ad2      	subs	r2, r2, r3
 80073be:	4591      	cmp	r9, r2
 80073c0:	bfa8      	it	ge
 80073c2:	4691      	movge	r9, r2
 80073c4:	f1b9 0f00 	cmp.w	r9, #0
 80073c8:	dc35      	bgt.n	8007436 <_printf_float+0x3aa>
 80073ca:	f04f 0800 	mov.w	r8, #0
 80073ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073d2:	f104 0a1a 	add.w	sl, r4, #26
 80073d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073da:	1a9b      	subs	r3, r3, r2
 80073dc:	eba3 0309 	sub.w	r3, r3, r9
 80073e0:	4543      	cmp	r3, r8
 80073e2:	f77f af79 	ble.w	80072d8 <_printf_float+0x24c>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4652      	mov	r2, sl
 80073ea:	4631      	mov	r1, r6
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b8      	blx	r7
 80073f0:	3001      	adds	r0, #1
 80073f2:	f43f aeaa 	beq.w	800714a <_printf_float+0xbe>
 80073f6:	f108 0801 	add.w	r8, r8, #1
 80073fa:	e7ec      	b.n	80073d6 <_printf_float+0x34a>
 80073fc:	4613      	mov	r3, r2
 80073fe:	4631      	mov	r1, r6
 8007400:	4642      	mov	r2, r8
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	d1c0      	bne.n	800738c <_printf_float+0x300>
 800740a:	e69e      	b.n	800714a <_printf_float+0xbe>
 800740c:	2301      	movs	r3, #1
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	9205      	str	r2, [sp, #20]
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f ae97 	beq.w	800714a <_printf_float+0xbe>
 800741c:	9a05      	ldr	r2, [sp, #20]
 800741e:	f10b 0b01 	add.w	fp, fp, #1
 8007422:	e7b9      	b.n	8007398 <_printf_float+0x30c>
 8007424:	ee18 3a10 	vmov	r3, s16
 8007428:	4652      	mov	r2, sl
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	d1be      	bne.n	80073b2 <_printf_float+0x326>
 8007434:	e689      	b.n	800714a <_printf_float+0xbe>
 8007436:	9a05      	ldr	r2, [sp, #20]
 8007438:	464b      	mov	r3, r9
 800743a:	4442      	add	r2, r8
 800743c:	4631      	mov	r1, r6
 800743e:	4628      	mov	r0, r5
 8007440:	47b8      	blx	r7
 8007442:	3001      	adds	r0, #1
 8007444:	d1c1      	bne.n	80073ca <_printf_float+0x33e>
 8007446:	e680      	b.n	800714a <_printf_float+0xbe>
 8007448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800744a:	2a01      	cmp	r2, #1
 800744c:	dc01      	bgt.n	8007452 <_printf_float+0x3c6>
 800744e:	07db      	lsls	r3, r3, #31
 8007450:	d53a      	bpl.n	80074c8 <_printf_float+0x43c>
 8007452:	2301      	movs	r3, #1
 8007454:	4642      	mov	r2, r8
 8007456:	4631      	mov	r1, r6
 8007458:	4628      	mov	r0, r5
 800745a:	47b8      	blx	r7
 800745c:	3001      	adds	r0, #1
 800745e:	f43f ae74 	beq.w	800714a <_printf_float+0xbe>
 8007462:	ee18 3a10 	vmov	r3, s16
 8007466:	4652      	mov	r2, sl
 8007468:	4631      	mov	r1, r6
 800746a:	4628      	mov	r0, r5
 800746c:	47b8      	blx	r7
 800746e:	3001      	adds	r0, #1
 8007470:	f43f ae6b 	beq.w	800714a <_printf_float+0xbe>
 8007474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007478:	2200      	movs	r2, #0
 800747a:	2300      	movs	r3, #0
 800747c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007480:	f7f9 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007484:	b9d8      	cbnz	r0, 80074be <_printf_float+0x432>
 8007486:	f10a 33ff 	add.w	r3, sl, #4294967295
 800748a:	f108 0201 	add.w	r2, r8, #1
 800748e:	4631      	mov	r1, r6
 8007490:	4628      	mov	r0, r5
 8007492:	47b8      	blx	r7
 8007494:	3001      	adds	r0, #1
 8007496:	d10e      	bne.n	80074b6 <_printf_float+0x42a>
 8007498:	e657      	b.n	800714a <_printf_float+0xbe>
 800749a:	2301      	movs	r3, #1
 800749c:	4652      	mov	r2, sl
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	f43f ae50 	beq.w	800714a <_printf_float+0xbe>
 80074aa:	f108 0801 	add.w	r8, r8, #1
 80074ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b0:	3b01      	subs	r3, #1
 80074b2:	4543      	cmp	r3, r8
 80074b4:	dcf1      	bgt.n	800749a <_printf_float+0x40e>
 80074b6:	464b      	mov	r3, r9
 80074b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074bc:	e6da      	b.n	8007274 <_printf_float+0x1e8>
 80074be:	f04f 0800 	mov.w	r8, #0
 80074c2:	f104 0a1a 	add.w	sl, r4, #26
 80074c6:	e7f2      	b.n	80074ae <_printf_float+0x422>
 80074c8:	2301      	movs	r3, #1
 80074ca:	4642      	mov	r2, r8
 80074cc:	e7df      	b.n	800748e <_printf_float+0x402>
 80074ce:	2301      	movs	r3, #1
 80074d0:	464a      	mov	r2, r9
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f ae36 	beq.w	800714a <_printf_float+0xbe>
 80074de:	f108 0801 	add.w	r8, r8, #1
 80074e2:	68e3      	ldr	r3, [r4, #12]
 80074e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074e6:	1a5b      	subs	r3, r3, r1
 80074e8:	4543      	cmp	r3, r8
 80074ea:	dcf0      	bgt.n	80074ce <_printf_float+0x442>
 80074ec:	e6f8      	b.n	80072e0 <_printf_float+0x254>
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	f104 0919 	add.w	r9, r4, #25
 80074f6:	e7f4      	b.n	80074e2 <_printf_float+0x456>

080074f8 <_printf_common>:
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	4616      	mov	r6, r2
 80074fe:	4699      	mov	r9, r3
 8007500:	688a      	ldr	r2, [r1, #8]
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007508:	4293      	cmp	r3, r2
 800750a:	bfb8      	it	lt
 800750c:	4613      	movlt	r3, r2
 800750e:	6033      	str	r3, [r6, #0]
 8007510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007514:	4607      	mov	r7, r0
 8007516:	460c      	mov	r4, r1
 8007518:	b10a      	cbz	r2, 800751e <_printf_common+0x26>
 800751a:	3301      	adds	r3, #1
 800751c:	6033      	str	r3, [r6, #0]
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	0699      	lsls	r1, r3, #26
 8007522:	bf42      	ittt	mi
 8007524:	6833      	ldrmi	r3, [r6, #0]
 8007526:	3302      	addmi	r3, #2
 8007528:	6033      	strmi	r3, [r6, #0]
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	f015 0506 	ands.w	r5, r5, #6
 8007530:	d106      	bne.n	8007540 <_printf_common+0x48>
 8007532:	f104 0a19 	add.w	sl, r4, #25
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	6832      	ldr	r2, [r6, #0]
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	42ab      	cmp	r3, r5
 800753e:	dc26      	bgt.n	800758e <_printf_common+0x96>
 8007540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007544:	1e13      	subs	r3, r2, #0
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	bf18      	it	ne
 800754a:	2301      	movne	r3, #1
 800754c:	0692      	lsls	r2, r2, #26
 800754e:	d42b      	bmi.n	80075a8 <_printf_common+0xb0>
 8007550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007554:	4649      	mov	r1, r9
 8007556:	4638      	mov	r0, r7
 8007558:	47c0      	blx	r8
 800755a:	3001      	adds	r0, #1
 800755c:	d01e      	beq.n	800759c <_printf_common+0xa4>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	6922      	ldr	r2, [r4, #16]
 8007562:	f003 0306 	and.w	r3, r3, #6
 8007566:	2b04      	cmp	r3, #4
 8007568:	bf02      	ittt	eq
 800756a:	68e5      	ldreq	r5, [r4, #12]
 800756c:	6833      	ldreq	r3, [r6, #0]
 800756e:	1aed      	subeq	r5, r5, r3
 8007570:	68a3      	ldr	r3, [r4, #8]
 8007572:	bf0c      	ite	eq
 8007574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007578:	2500      	movne	r5, #0
 800757a:	4293      	cmp	r3, r2
 800757c:	bfc4      	itt	gt
 800757e:	1a9b      	subgt	r3, r3, r2
 8007580:	18ed      	addgt	r5, r5, r3
 8007582:	2600      	movs	r6, #0
 8007584:	341a      	adds	r4, #26
 8007586:	42b5      	cmp	r5, r6
 8007588:	d11a      	bne.n	80075c0 <_printf_common+0xc8>
 800758a:	2000      	movs	r0, #0
 800758c:	e008      	b.n	80075a0 <_printf_common+0xa8>
 800758e:	2301      	movs	r3, #1
 8007590:	4652      	mov	r2, sl
 8007592:	4649      	mov	r1, r9
 8007594:	4638      	mov	r0, r7
 8007596:	47c0      	blx	r8
 8007598:	3001      	adds	r0, #1
 800759a:	d103      	bne.n	80075a4 <_printf_common+0xac>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a4:	3501      	adds	r5, #1
 80075a6:	e7c6      	b.n	8007536 <_printf_common+0x3e>
 80075a8:	18e1      	adds	r1, r4, r3
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	2030      	movs	r0, #48	; 0x30
 80075ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b2:	4422      	add	r2, r4
 80075b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075bc:	3302      	adds	r3, #2
 80075be:	e7c7      	b.n	8007550 <_printf_common+0x58>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4622      	mov	r2, r4
 80075c4:	4649      	mov	r1, r9
 80075c6:	4638      	mov	r0, r7
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d0e6      	beq.n	800759c <_printf_common+0xa4>
 80075ce:	3601      	adds	r6, #1
 80075d0:	e7d9      	b.n	8007586 <_printf_common+0x8e>
	...

080075d4 <_printf_i>:
 80075d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	7e0f      	ldrb	r7, [r1, #24]
 80075da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075dc:	2f78      	cmp	r7, #120	; 0x78
 80075de:	4691      	mov	r9, r2
 80075e0:	4680      	mov	r8, r0
 80075e2:	460c      	mov	r4, r1
 80075e4:	469a      	mov	sl, r3
 80075e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ea:	d807      	bhi.n	80075fc <_printf_i+0x28>
 80075ec:	2f62      	cmp	r7, #98	; 0x62
 80075ee:	d80a      	bhi.n	8007606 <_printf_i+0x32>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	f000 80d4 	beq.w	800779e <_printf_i+0x1ca>
 80075f6:	2f58      	cmp	r7, #88	; 0x58
 80075f8:	f000 80c0 	beq.w	800777c <_printf_i+0x1a8>
 80075fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007604:	e03a      	b.n	800767c <_printf_i+0xa8>
 8007606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800760a:	2b15      	cmp	r3, #21
 800760c:	d8f6      	bhi.n	80075fc <_printf_i+0x28>
 800760e:	a101      	add	r1, pc, #4	; (adr r1, 8007614 <_printf_i+0x40>)
 8007610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007614:	0800766d 	.word	0x0800766d
 8007618:	08007681 	.word	0x08007681
 800761c:	080075fd 	.word	0x080075fd
 8007620:	080075fd 	.word	0x080075fd
 8007624:	080075fd 	.word	0x080075fd
 8007628:	080075fd 	.word	0x080075fd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075fd 	.word	0x080075fd
 8007634:	080075fd 	.word	0x080075fd
 8007638:	080075fd 	.word	0x080075fd
 800763c:	080075fd 	.word	0x080075fd
 8007640:	08007785 	.word	0x08007785
 8007644:	080076ad 	.word	0x080076ad
 8007648:	0800773f 	.word	0x0800773f
 800764c:	080075fd 	.word	0x080075fd
 8007650:	080075fd 	.word	0x080075fd
 8007654:	080077a7 	.word	0x080077a7
 8007658:	080075fd 	.word	0x080075fd
 800765c:	080076ad 	.word	0x080076ad
 8007660:	080075fd 	.word	0x080075fd
 8007664:	080075fd 	.word	0x080075fd
 8007668:	08007747 	.word	0x08007747
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	1d1a      	adds	r2, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	602a      	str	r2, [r5, #0]
 8007674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800767c:	2301      	movs	r3, #1
 800767e:	e09f      	b.n	80077c0 <_printf_i+0x1ec>
 8007680:	6820      	ldr	r0, [r4, #0]
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	0607      	lsls	r7, r0, #24
 8007686:	f103 0104 	add.w	r1, r3, #4
 800768a:	6029      	str	r1, [r5, #0]
 800768c:	d501      	bpl.n	8007692 <_printf_i+0xbe>
 800768e:	681e      	ldr	r6, [r3, #0]
 8007690:	e003      	b.n	800769a <_printf_i+0xc6>
 8007692:	0646      	lsls	r6, r0, #25
 8007694:	d5fb      	bpl.n	800768e <_printf_i+0xba>
 8007696:	f9b3 6000 	ldrsh.w	r6, [r3]
 800769a:	2e00      	cmp	r6, #0
 800769c:	da03      	bge.n	80076a6 <_printf_i+0xd2>
 800769e:	232d      	movs	r3, #45	; 0x2d
 80076a0:	4276      	negs	r6, r6
 80076a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a6:	485a      	ldr	r0, [pc, #360]	; (8007810 <_printf_i+0x23c>)
 80076a8:	230a      	movs	r3, #10
 80076aa:	e012      	b.n	80076d2 <_printf_i+0xfe>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	6820      	ldr	r0, [r4, #0]
 80076b0:	1d19      	adds	r1, r3, #4
 80076b2:	6029      	str	r1, [r5, #0]
 80076b4:	0605      	lsls	r5, r0, #24
 80076b6:	d501      	bpl.n	80076bc <_printf_i+0xe8>
 80076b8:	681e      	ldr	r6, [r3, #0]
 80076ba:	e002      	b.n	80076c2 <_printf_i+0xee>
 80076bc:	0641      	lsls	r1, r0, #25
 80076be:	d5fb      	bpl.n	80076b8 <_printf_i+0xe4>
 80076c0:	881e      	ldrh	r6, [r3, #0]
 80076c2:	4853      	ldr	r0, [pc, #332]	; (8007810 <_printf_i+0x23c>)
 80076c4:	2f6f      	cmp	r7, #111	; 0x6f
 80076c6:	bf0c      	ite	eq
 80076c8:	2308      	moveq	r3, #8
 80076ca:	230a      	movne	r3, #10
 80076cc:	2100      	movs	r1, #0
 80076ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076d2:	6865      	ldr	r5, [r4, #4]
 80076d4:	60a5      	str	r5, [r4, #8]
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	bfa2      	ittt	ge
 80076da:	6821      	ldrge	r1, [r4, #0]
 80076dc:	f021 0104 	bicge.w	r1, r1, #4
 80076e0:	6021      	strge	r1, [r4, #0]
 80076e2:	b90e      	cbnz	r6, 80076e8 <_printf_i+0x114>
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	d04b      	beq.n	8007780 <_printf_i+0x1ac>
 80076e8:	4615      	mov	r5, r2
 80076ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ee:	fb03 6711 	mls	r7, r3, r1, r6
 80076f2:	5dc7      	ldrb	r7, [r0, r7]
 80076f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f8:	4637      	mov	r7, r6
 80076fa:	42bb      	cmp	r3, r7
 80076fc:	460e      	mov	r6, r1
 80076fe:	d9f4      	bls.n	80076ea <_printf_i+0x116>
 8007700:	2b08      	cmp	r3, #8
 8007702:	d10b      	bne.n	800771c <_printf_i+0x148>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	07de      	lsls	r6, r3, #31
 8007708:	d508      	bpl.n	800771c <_printf_i+0x148>
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	6861      	ldr	r1, [r4, #4]
 800770e:	4299      	cmp	r1, r3
 8007710:	bfde      	ittt	le
 8007712:	2330      	movle	r3, #48	; 0x30
 8007714:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007718:	f105 35ff 	addle.w	r5, r5, #4294967295
 800771c:	1b52      	subs	r2, r2, r5
 800771e:	6122      	str	r2, [r4, #16]
 8007720:	f8cd a000 	str.w	sl, [sp]
 8007724:	464b      	mov	r3, r9
 8007726:	aa03      	add	r2, sp, #12
 8007728:	4621      	mov	r1, r4
 800772a:	4640      	mov	r0, r8
 800772c:	f7ff fee4 	bl	80074f8 <_printf_common>
 8007730:	3001      	adds	r0, #1
 8007732:	d14a      	bne.n	80077ca <_printf_i+0x1f6>
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	b004      	add	sp, #16
 800773a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	f043 0320 	orr.w	r3, r3, #32
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	4833      	ldr	r0, [pc, #204]	; (8007814 <_printf_i+0x240>)
 8007748:	2778      	movs	r7, #120	; 0x78
 800774a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	6829      	ldr	r1, [r5, #0]
 8007752:	061f      	lsls	r7, r3, #24
 8007754:	f851 6b04 	ldr.w	r6, [r1], #4
 8007758:	d402      	bmi.n	8007760 <_printf_i+0x18c>
 800775a:	065f      	lsls	r7, r3, #25
 800775c:	bf48      	it	mi
 800775e:	b2b6      	uxthmi	r6, r6
 8007760:	07df      	lsls	r7, r3, #31
 8007762:	bf48      	it	mi
 8007764:	f043 0320 	orrmi.w	r3, r3, #32
 8007768:	6029      	str	r1, [r5, #0]
 800776a:	bf48      	it	mi
 800776c:	6023      	strmi	r3, [r4, #0]
 800776e:	b91e      	cbnz	r6, 8007778 <_printf_i+0x1a4>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	f023 0320 	bic.w	r3, r3, #32
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	2310      	movs	r3, #16
 800777a:	e7a7      	b.n	80076cc <_printf_i+0xf8>
 800777c:	4824      	ldr	r0, [pc, #144]	; (8007810 <_printf_i+0x23c>)
 800777e:	e7e4      	b.n	800774a <_printf_i+0x176>
 8007780:	4615      	mov	r5, r2
 8007782:	e7bd      	b.n	8007700 <_printf_i+0x12c>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	6826      	ldr	r6, [r4, #0]
 8007788:	6961      	ldr	r1, [r4, #20]
 800778a:	1d18      	adds	r0, r3, #4
 800778c:	6028      	str	r0, [r5, #0]
 800778e:	0635      	lsls	r5, r6, #24
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	d501      	bpl.n	8007798 <_printf_i+0x1c4>
 8007794:	6019      	str	r1, [r3, #0]
 8007796:	e002      	b.n	800779e <_printf_i+0x1ca>
 8007798:	0670      	lsls	r0, r6, #25
 800779a:	d5fb      	bpl.n	8007794 <_printf_i+0x1c0>
 800779c:	8019      	strh	r1, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	4615      	mov	r5, r2
 80077a4:	e7bc      	b.n	8007720 <_printf_i+0x14c>
 80077a6:	682b      	ldr	r3, [r5, #0]
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	602a      	str	r2, [r5, #0]
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	6862      	ldr	r2, [r4, #4]
 80077b0:	2100      	movs	r1, #0
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7f8 fd0c 	bl	80001d0 <memchr>
 80077b8:	b108      	cbz	r0, 80077be <_printf_i+0x1ea>
 80077ba:	1b40      	subs	r0, r0, r5
 80077bc:	6060      	str	r0, [r4, #4]
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	2300      	movs	r3, #0
 80077c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c8:	e7aa      	b.n	8007720 <_printf_i+0x14c>
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	462a      	mov	r2, r5
 80077ce:	4649      	mov	r1, r9
 80077d0:	4640      	mov	r0, r8
 80077d2:	47d0      	blx	sl
 80077d4:	3001      	adds	r0, #1
 80077d6:	d0ad      	beq.n	8007734 <_printf_i+0x160>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	079b      	lsls	r3, r3, #30
 80077dc:	d413      	bmi.n	8007806 <_printf_i+0x232>
 80077de:	68e0      	ldr	r0, [r4, #12]
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	4298      	cmp	r0, r3
 80077e4:	bfb8      	it	lt
 80077e6:	4618      	movlt	r0, r3
 80077e8:	e7a6      	b.n	8007738 <_printf_i+0x164>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4632      	mov	r2, r6
 80077ee:	4649      	mov	r1, r9
 80077f0:	4640      	mov	r0, r8
 80077f2:	47d0      	blx	sl
 80077f4:	3001      	adds	r0, #1
 80077f6:	d09d      	beq.n	8007734 <_printf_i+0x160>
 80077f8:	3501      	adds	r5, #1
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	9903      	ldr	r1, [sp, #12]
 80077fe:	1a5b      	subs	r3, r3, r1
 8007800:	42ab      	cmp	r3, r5
 8007802:	dcf2      	bgt.n	80077ea <_printf_i+0x216>
 8007804:	e7eb      	b.n	80077de <_printf_i+0x20a>
 8007806:	2500      	movs	r5, #0
 8007808:	f104 0619 	add.w	r6, r4, #25
 800780c:	e7f5      	b.n	80077fa <_printf_i+0x226>
 800780e:	bf00      	nop
 8007810:	0800c2b4 	.word	0x0800c2b4
 8007814:	0800c2c5 	.word	0x0800c2c5

08007818 <_scanf_float>:
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	b087      	sub	sp, #28
 800781e:	4617      	mov	r7, r2
 8007820:	9303      	str	r3, [sp, #12]
 8007822:	688b      	ldr	r3, [r1, #8]
 8007824:	1e5a      	subs	r2, r3, #1
 8007826:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800782a:	bf83      	ittte	hi
 800782c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007830:	195b      	addhi	r3, r3, r5
 8007832:	9302      	strhi	r3, [sp, #8]
 8007834:	2300      	movls	r3, #0
 8007836:	bf86      	itte	hi
 8007838:	f240 135d 	movwhi	r3, #349	; 0x15d
 800783c:	608b      	strhi	r3, [r1, #8]
 800783e:	9302      	strls	r3, [sp, #8]
 8007840:	680b      	ldr	r3, [r1, #0]
 8007842:	468b      	mov	fp, r1
 8007844:	2500      	movs	r5, #0
 8007846:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800784a:	f84b 3b1c 	str.w	r3, [fp], #28
 800784e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007852:	4680      	mov	r8, r0
 8007854:	460c      	mov	r4, r1
 8007856:	465e      	mov	r6, fp
 8007858:	46aa      	mov	sl, r5
 800785a:	46a9      	mov	r9, r5
 800785c:	9501      	str	r5, [sp, #4]
 800785e:	68a2      	ldr	r2, [r4, #8]
 8007860:	b152      	cbz	r2, 8007878 <_scanf_float+0x60>
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b4e      	cmp	r3, #78	; 0x4e
 8007868:	d864      	bhi.n	8007934 <_scanf_float+0x11c>
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	d83c      	bhi.n	80078e8 <_scanf_float+0xd0>
 800786e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007872:	b2c8      	uxtb	r0, r1
 8007874:	280e      	cmp	r0, #14
 8007876:	d93a      	bls.n	80078ee <_scanf_float+0xd6>
 8007878:	f1b9 0f00 	cmp.w	r9, #0
 800787c:	d003      	beq.n	8007886 <_scanf_float+0x6e>
 800787e:	6823      	ldr	r3, [r4, #0]
 8007880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	f10a 3aff 	add.w	sl, sl, #4294967295
 800788a:	f1ba 0f01 	cmp.w	sl, #1
 800788e:	f200 8113 	bhi.w	8007ab8 <_scanf_float+0x2a0>
 8007892:	455e      	cmp	r6, fp
 8007894:	f200 8105 	bhi.w	8007aa2 <_scanf_float+0x28a>
 8007898:	2501      	movs	r5, #1
 800789a:	4628      	mov	r0, r5
 800789c:	b007      	add	sp, #28
 800789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80078a6:	2a0d      	cmp	r2, #13
 80078a8:	d8e6      	bhi.n	8007878 <_scanf_float+0x60>
 80078aa:	a101      	add	r1, pc, #4	; (adr r1, 80078b0 <_scanf_float+0x98>)
 80078ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078b0:	080079ef 	.word	0x080079ef
 80078b4:	08007879 	.word	0x08007879
 80078b8:	08007879 	.word	0x08007879
 80078bc:	08007879 	.word	0x08007879
 80078c0:	08007a4f 	.word	0x08007a4f
 80078c4:	08007a27 	.word	0x08007a27
 80078c8:	08007879 	.word	0x08007879
 80078cc:	08007879 	.word	0x08007879
 80078d0:	080079fd 	.word	0x080079fd
 80078d4:	08007879 	.word	0x08007879
 80078d8:	08007879 	.word	0x08007879
 80078dc:	08007879 	.word	0x08007879
 80078e0:	08007879 	.word	0x08007879
 80078e4:	080079b5 	.word	0x080079b5
 80078e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80078ec:	e7db      	b.n	80078a6 <_scanf_float+0x8e>
 80078ee:	290e      	cmp	r1, #14
 80078f0:	d8c2      	bhi.n	8007878 <_scanf_float+0x60>
 80078f2:	a001      	add	r0, pc, #4	; (adr r0, 80078f8 <_scanf_float+0xe0>)
 80078f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078f8:	080079a7 	.word	0x080079a7
 80078fc:	08007879 	.word	0x08007879
 8007900:	080079a7 	.word	0x080079a7
 8007904:	08007a3b 	.word	0x08007a3b
 8007908:	08007879 	.word	0x08007879
 800790c:	08007955 	.word	0x08007955
 8007910:	08007991 	.word	0x08007991
 8007914:	08007991 	.word	0x08007991
 8007918:	08007991 	.word	0x08007991
 800791c:	08007991 	.word	0x08007991
 8007920:	08007991 	.word	0x08007991
 8007924:	08007991 	.word	0x08007991
 8007928:	08007991 	.word	0x08007991
 800792c:	08007991 	.word	0x08007991
 8007930:	08007991 	.word	0x08007991
 8007934:	2b6e      	cmp	r3, #110	; 0x6e
 8007936:	d809      	bhi.n	800794c <_scanf_float+0x134>
 8007938:	2b60      	cmp	r3, #96	; 0x60
 800793a:	d8b2      	bhi.n	80078a2 <_scanf_float+0x8a>
 800793c:	2b54      	cmp	r3, #84	; 0x54
 800793e:	d077      	beq.n	8007a30 <_scanf_float+0x218>
 8007940:	2b59      	cmp	r3, #89	; 0x59
 8007942:	d199      	bne.n	8007878 <_scanf_float+0x60>
 8007944:	2d07      	cmp	r5, #7
 8007946:	d197      	bne.n	8007878 <_scanf_float+0x60>
 8007948:	2508      	movs	r5, #8
 800794a:	e029      	b.n	80079a0 <_scanf_float+0x188>
 800794c:	2b74      	cmp	r3, #116	; 0x74
 800794e:	d06f      	beq.n	8007a30 <_scanf_float+0x218>
 8007950:	2b79      	cmp	r3, #121	; 0x79
 8007952:	e7f6      	b.n	8007942 <_scanf_float+0x12a>
 8007954:	6821      	ldr	r1, [r4, #0]
 8007956:	05c8      	lsls	r0, r1, #23
 8007958:	d51a      	bpl.n	8007990 <_scanf_float+0x178>
 800795a:	9b02      	ldr	r3, [sp, #8]
 800795c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007960:	6021      	str	r1, [r4, #0]
 8007962:	f109 0901 	add.w	r9, r9, #1
 8007966:	b11b      	cbz	r3, 8007970 <_scanf_float+0x158>
 8007968:	3b01      	subs	r3, #1
 800796a:	3201      	adds	r2, #1
 800796c:	9302      	str	r3, [sp, #8]
 800796e:	60a2      	str	r2, [r4, #8]
 8007970:	68a3      	ldr	r3, [r4, #8]
 8007972:	3b01      	subs	r3, #1
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	3301      	adds	r3, #1
 800797a:	6123      	str	r3, [r4, #16]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	3b01      	subs	r3, #1
 8007980:	2b00      	cmp	r3, #0
 8007982:	607b      	str	r3, [r7, #4]
 8007984:	f340 8084 	ble.w	8007a90 <_scanf_float+0x278>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	e766      	b.n	800785e <_scanf_float+0x46>
 8007990:	eb1a 0f05 	cmn.w	sl, r5
 8007994:	f47f af70 	bne.w	8007878 <_scanf_float+0x60>
 8007998:	6822      	ldr	r2, [r4, #0]
 800799a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800799e:	6022      	str	r2, [r4, #0]
 80079a0:	f806 3b01 	strb.w	r3, [r6], #1
 80079a4:	e7e4      	b.n	8007970 <_scanf_float+0x158>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	0610      	lsls	r0, r2, #24
 80079aa:	f57f af65 	bpl.w	8007878 <_scanf_float+0x60>
 80079ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079b2:	e7f4      	b.n	800799e <_scanf_float+0x186>
 80079b4:	f1ba 0f00 	cmp.w	sl, #0
 80079b8:	d10e      	bne.n	80079d8 <_scanf_float+0x1c0>
 80079ba:	f1b9 0f00 	cmp.w	r9, #0
 80079be:	d10e      	bne.n	80079de <_scanf_float+0x1c6>
 80079c0:	6822      	ldr	r2, [r4, #0]
 80079c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079ca:	d108      	bne.n	80079de <_scanf_float+0x1c6>
 80079cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079d0:	6022      	str	r2, [r4, #0]
 80079d2:	f04f 0a01 	mov.w	sl, #1
 80079d6:	e7e3      	b.n	80079a0 <_scanf_float+0x188>
 80079d8:	f1ba 0f02 	cmp.w	sl, #2
 80079dc:	d055      	beq.n	8007a8a <_scanf_float+0x272>
 80079de:	2d01      	cmp	r5, #1
 80079e0:	d002      	beq.n	80079e8 <_scanf_float+0x1d0>
 80079e2:	2d04      	cmp	r5, #4
 80079e4:	f47f af48 	bne.w	8007878 <_scanf_float+0x60>
 80079e8:	3501      	adds	r5, #1
 80079ea:	b2ed      	uxtb	r5, r5
 80079ec:	e7d8      	b.n	80079a0 <_scanf_float+0x188>
 80079ee:	f1ba 0f01 	cmp.w	sl, #1
 80079f2:	f47f af41 	bne.w	8007878 <_scanf_float+0x60>
 80079f6:	f04f 0a02 	mov.w	sl, #2
 80079fa:	e7d1      	b.n	80079a0 <_scanf_float+0x188>
 80079fc:	b97d      	cbnz	r5, 8007a1e <_scanf_float+0x206>
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	f47f af3c 	bne.w	800787e <_scanf_float+0x66>
 8007a06:	6822      	ldr	r2, [r4, #0]
 8007a08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a10:	f47f af39 	bne.w	8007886 <_scanf_float+0x6e>
 8007a14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a18:	6022      	str	r2, [r4, #0]
 8007a1a:	2501      	movs	r5, #1
 8007a1c:	e7c0      	b.n	80079a0 <_scanf_float+0x188>
 8007a1e:	2d03      	cmp	r5, #3
 8007a20:	d0e2      	beq.n	80079e8 <_scanf_float+0x1d0>
 8007a22:	2d05      	cmp	r5, #5
 8007a24:	e7de      	b.n	80079e4 <_scanf_float+0x1cc>
 8007a26:	2d02      	cmp	r5, #2
 8007a28:	f47f af26 	bne.w	8007878 <_scanf_float+0x60>
 8007a2c:	2503      	movs	r5, #3
 8007a2e:	e7b7      	b.n	80079a0 <_scanf_float+0x188>
 8007a30:	2d06      	cmp	r5, #6
 8007a32:	f47f af21 	bne.w	8007878 <_scanf_float+0x60>
 8007a36:	2507      	movs	r5, #7
 8007a38:	e7b2      	b.n	80079a0 <_scanf_float+0x188>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	0591      	lsls	r1, r2, #22
 8007a3e:	f57f af1b 	bpl.w	8007878 <_scanf_float+0x60>
 8007a42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a46:	6022      	str	r2, [r4, #0]
 8007a48:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a4c:	e7a8      	b.n	80079a0 <_scanf_float+0x188>
 8007a4e:	6822      	ldr	r2, [r4, #0]
 8007a50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a58:	d006      	beq.n	8007a68 <_scanf_float+0x250>
 8007a5a:	0550      	lsls	r0, r2, #21
 8007a5c:	f57f af0c 	bpl.w	8007878 <_scanf_float+0x60>
 8007a60:	f1b9 0f00 	cmp.w	r9, #0
 8007a64:	f43f af0f 	beq.w	8007886 <_scanf_float+0x6e>
 8007a68:	0591      	lsls	r1, r2, #22
 8007a6a:	bf58      	it	pl
 8007a6c:	9901      	ldrpl	r1, [sp, #4]
 8007a6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a72:	bf58      	it	pl
 8007a74:	eba9 0101 	subpl.w	r1, r9, r1
 8007a78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a7c:	bf58      	it	pl
 8007a7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a82:	6022      	str	r2, [r4, #0]
 8007a84:	f04f 0900 	mov.w	r9, #0
 8007a88:	e78a      	b.n	80079a0 <_scanf_float+0x188>
 8007a8a:	f04f 0a03 	mov.w	sl, #3
 8007a8e:	e787      	b.n	80079a0 <_scanf_float+0x188>
 8007a90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a94:	4639      	mov	r1, r7
 8007a96:	4640      	mov	r0, r8
 8007a98:	4798      	blx	r3
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	f43f aedf 	beq.w	800785e <_scanf_float+0x46>
 8007aa0:	e6ea      	b.n	8007878 <_scanf_float+0x60>
 8007aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007aaa:	463a      	mov	r2, r7
 8007aac:	4640      	mov	r0, r8
 8007aae:	4798      	blx	r3
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	e6ec      	b.n	8007892 <_scanf_float+0x7a>
 8007ab8:	1e6b      	subs	r3, r5, #1
 8007aba:	2b06      	cmp	r3, #6
 8007abc:	d825      	bhi.n	8007b0a <_scanf_float+0x2f2>
 8007abe:	2d02      	cmp	r5, #2
 8007ac0:	d836      	bhi.n	8007b30 <_scanf_float+0x318>
 8007ac2:	455e      	cmp	r6, fp
 8007ac4:	f67f aee8 	bls.w	8007898 <_scanf_float+0x80>
 8007ac8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007acc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ad0:	463a      	mov	r2, r7
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4798      	blx	r3
 8007ad6:	6923      	ldr	r3, [r4, #16]
 8007ad8:	3b01      	subs	r3, #1
 8007ada:	6123      	str	r3, [r4, #16]
 8007adc:	e7f1      	b.n	8007ac2 <_scanf_float+0x2aa>
 8007ade:	9802      	ldr	r0, [sp, #8]
 8007ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ae4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007ae8:	9002      	str	r0, [sp, #8]
 8007aea:	463a      	mov	r2, r7
 8007aec:	4640      	mov	r0, r8
 8007aee:	4798      	blx	r3
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	3b01      	subs	r3, #1
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007afa:	fa5f fa8a 	uxtb.w	sl, sl
 8007afe:	f1ba 0f02 	cmp.w	sl, #2
 8007b02:	d1ec      	bne.n	8007ade <_scanf_float+0x2c6>
 8007b04:	3d03      	subs	r5, #3
 8007b06:	b2ed      	uxtb	r5, r5
 8007b08:	1b76      	subs	r6, r6, r5
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	05da      	lsls	r2, r3, #23
 8007b0e:	d52f      	bpl.n	8007b70 <_scanf_float+0x358>
 8007b10:	055b      	lsls	r3, r3, #21
 8007b12:	d510      	bpl.n	8007b36 <_scanf_float+0x31e>
 8007b14:	455e      	cmp	r6, fp
 8007b16:	f67f aebf 	bls.w	8007898 <_scanf_float+0x80>
 8007b1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b22:	463a      	mov	r2, r7
 8007b24:	4640      	mov	r0, r8
 8007b26:	4798      	blx	r3
 8007b28:	6923      	ldr	r3, [r4, #16]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	6123      	str	r3, [r4, #16]
 8007b2e:	e7f1      	b.n	8007b14 <_scanf_float+0x2fc>
 8007b30:	46aa      	mov	sl, r5
 8007b32:	9602      	str	r6, [sp, #8]
 8007b34:	e7df      	b.n	8007af6 <_scanf_float+0x2de>
 8007b36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	2965      	cmp	r1, #101	; 0x65
 8007b3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b42:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b46:	6123      	str	r3, [r4, #16]
 8007b48:	d00c      	beq.n	8007b64 <_scanf_float+0x34c>
 8007b4a:	2945      	cmp	r1, #69	; 0x45
 8007b4c:	d00a      	beq.n	8007b64 <_scanf_float+0x34c>
 8007b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b52:	463a      	mov	r2, r7
 8007b54:	4640      	mov	r0, r8
 8007b56:	4798      	blx	r3
 8007b58:	6923      	ldr	r3, [r4, #16]
 8007b5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	1eb5      	subs	r5, r6, #2
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b68:	463a      	mov	r2, r7
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	4798      	blx	r3
 8007b6e:	462e      	mov	r6, r5
 8007b70:	6825      	ldr	r5, [r4, #0]
 8007b72:	f015 0510 	ands.w	r5, r5, #16
 8007b76:	d158      	bne.n	8007c2a <_scanf_float+0x412>
 8007b78:	7035      	strb	r5, [r6, #0]
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b84:	d11c      	bne.n	8007bc0 <_scanf_float+0x3a8>
 8007b86:	9b01      	ldr	r3, [sp, #4]
 8007b88:	454b      	cmp	r3, r9
 8007b8a:	eba3 0209 	sub.w	r2, r3, r9
 8007b8e:	d124      	bne.n	8007bda <_scanf_float+0x3c2>
 8007b90:	2200      	movs	r2, #0
 8007b92:	4659      	mov	r1, fp
 8007b94:	4640      	mov	r0, r8
 8007b96:	f002 fc1b 	bl	800a3d0 <_strtod_r>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	6821      	ldr	r1, [r4, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f011 0f02 	tst.w	r1, #2
 8007ba4:	ec57 6b10 	vmov	r6, r7, d0
 8007ba8:	f103 0204 	add.w	r2, r3, #4
 8007bac:	d020      	beq.n	8007bf0 <_scanf_float+0x3d8>
 8007bae:	9903      	ldr	r1, [sp, #12]
 8007bb0:	600a      	str	r2, [r1, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	e9c3 6700 	strd	r6, r7, [r3]
 8007bb8:	68e3      	ldr	r3, [r4, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60e3      	str	r3, [r4, #12]
 8007bbe:	e66c      	b.n	800789a <_scanf_float+0x82>
 8007bc0:	9b04      	ldr	r3, [sp, #16]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d0e4      	beq.n	8007b90 <_scanf_float+0x378>
 8007bc6:	9905      	ldr	r1, [sp, #20]
 8007bc8:	230a      	movs	r3, #10
 8007bca:	462a      	mov	r2, r5
 8007bcc:	3101      	adds	r1, #1
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f002 fc86 	bl	800a4e0 <_strtol_r>
 8007bd4:	9b04      	ldr	r3, [sp, #16]
 8007bd6:	9e05      	ldr	r6, [sp, #20]
 8007bd8:	1ac2      	subs	r2, r0, r3
 8007bda:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007bde:	429e      	cmp	r6, r3
 8007be0:	bf28      	it	cs
 8007be2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007be6:	4912      	ldr	r1, [pc, #72]	; (8007c30 <_scanf_float+0x418>)
 8007be8:	4630      	mov	r0, r6
 8007bea:	f000 f91b 	bl	8007e24 <siprintf>
 8007bee:	e7cf      	b.n	8007b90 <_scanf_float+0x378>
 8007bf0:	f011 0f04 	tst.w	r1, #4
 8007bf4:	9903      	ldr	r1, [sp, #12]
 8007bf6:	600a      	str	r2, [r1, #0]
 8007bf8:	d1db      	bne.n	8007bb2 <_scanf_float+0x39a>
 8007bfa:	f8d3 8000 	ldr.w	r8, [r3]
 8007bfe:	ee10 2a10 	vmov	r2, s0
 8007c02:	ee10 0a10 	vmov	r0, s0
 8007c06:	463b      	mov	r3, r7
 8007c08:	4639      	mov	r1, r7
 8007c0a:	f7f8 ff8f 	bl	8000b2c <__aeabi_dcmpun>
 8007c0e:	b128      	cbz	r0, 8007c1c <_scanf_float+0x404>
 8007c10:	4808      	ldr	r0, [pc, #32]	; (8007c34 <_scanf_float+0x41c>)
 8007c12:	f000 fa55 	bl	80080c0 <nanf>
 8007c16:	ed88 0a00 	vstr	s0, [r8]
 8007c1a:	e7cd      	b.n	8007bb8 <_scanf_float+0x3a0>
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 ffe2 	bl	8000be8 <__aeabi_d2f>
 8007c24:	f8c8 0000 	str.w	r0, [r8]
 8007c28:	e7c6      	b.n	8007bb8 <_scanf_float+0x3a0>
 8007c2a:	2500      	movs	r5, #0
 8007c2c:	e635      	b.n	800789a <_scanf_float+0x82>
 8007c2e:	bf00      	nop
 8007c30:	0800c2d6 	.word	0x0800c2d6
 8007c34:	0800c66d 	.word	0x0800c66d

08007c38 <std>:
 8007c38:	2300      	movs	r3, #0
 8007c3a:	b510      	push	{r4, lr}
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007c42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c46:	6083      	str	r3, [r0, #8]
 8007c48:	8181      	strh	r1, [r0, #12]
 8007c4a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c4c:	81c2      	strh	r2, [r0, #14]
 8007c4e:	6183      	str	r3, [r0, #24]
 8007c50:	4619      	mov	r1, r3
 8007c52:	2208      	movs	r2, #8
 8007c54:	305c      	adds	r0, #92	; 0x5c
 8007c56:	f000 f948 	bl	8007eea <memset>
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <std+0x58>)
 8007c5c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c5e:	4b0d      	ldr	r3, [pc, #52]	; (8007c94 <std+0x5c>)
 8007c60:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c62:	4b0d      	ldr	r3, [pc, #52]	; (8007c98 <std+0x60>)
 8007c64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c66:	4b0d      	ldr	r3, [pc, #52]	; (8007c9c <std+0x64>)
 8007c68:	6323      	str	r3, [r4, #48]	; 0x30
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <std+0x68>)
 8007c6c:	6224      	str	r4, [r4, #32]
 8007c6e:	429c      	cmp	r4, r3
 8007c70:	d006      	beq.n	8007c80 <std+0x48>
 8007c72:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c76:	4294      	cmp	r4, r2
 8007c78:	d002      	beq.n	8007c80 <std+0x48>
 8007c7a:	33d0      	adds	r3, #208	; 0xd0
 8007c7c:	429c      	cmp	r4, r3
 8007c7e:	d105      	bne.n	8007c8c <std+0x54>
 8007c80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c88:	f000 ba00 	b.w	800808c <__retarget_lock_init_recursive>
 8007c8c:	bd10      	pop	{r4, pc}
 8007c8e:	bf00      	nop
 8007c90:	08007e65 	.word	0x08007e65
 8007c94:	08007e87 	.word	0x08007e87
 8007c98:	08007ebf 	.word	0x08007ebf
 8007c9c:	08007ee3 	.word	0x08007ee3
 8007ca0:	20000834 	.word	0x20000834

08007ca4 <stdio_exit_handler>:
 8007ca4:	4a02      	ldr	r2, [pc, #8]	; (8007cb0 <stdio_exit_handler+0xc>)
 8007ca6:	4903      	ldr	r1, [pc, #12]	; (8007cb4 <stdio_exit_handler+0x10>)
 8007ca8:	4803      	ldr	r0, [pc, #12]	; (8007cb8 <stdio_exit_handler+0x14>)
 8007caa:	f000 b869 	b.w	8007d80 <_fwalk_sglue>
 8007cae:	bf00      	nop
 8007cb0:	20000018 	.word	0x20000018
 8007cb4:	0800a8a1 	.word	0x0800a8a1
 8007cb8:	20000024 	.word	0x20000024

08007cbc <cleanup_stdio>:
 8007cbc:	6841      	ldr	r1, [r0, #4]
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <cleanup_stdio+0x34>)
 8007cc0:	4299      	cmp	r1, r3
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	d001      	beq.n	8007ccc <cleanup_stdio+0x10>
 8007cc8:	f002 fdea 	bl	800a8a0 <_fflush_r>
 8007ccc:	68a1      	ldr	r1, [r4, #8]
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <cleanup_stdio+0x38>)
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <cleanup_stdio+0x1e>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f002 fde3 	bl	800a8a0 <_fflush_r>
 8007cda:	68e1      	ldr	r1, [r4, #12]
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <cleanup_stdio+0x3c>)
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d004      	beq.n	8007cec <cleanup_stdio+0x30>
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f002 bdda 	b.w	800a8a0 <_fflush_r>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000834 	.word	0x20000834
 8007cf4:	2000089c 	.word	0x2000089c
 8007cf8:	20000904 	.word	0x20000904

08007cfc <global_stdio_init.part.0>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <global_stdio_init.part.0+0x30>)
 8007d00:	4c0b      	ldr	r4, [pc, #44]	; (8007d30 <global_stdio_init.part.0+0x34>)
 8007d02:	4a0c      	ldr	r2, [pc, #48]	; (8007d34 <global_stdio_init.part.0+0x38>)
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	4620      	mov	r0, r4
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2104      	movs	r1, #4
 8007d0c:	f7ff ff94 	bl	8007c38 <std>
 8007d10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d14:	2201      	movs	r2, #1
 8007d16:	2109      	movs	r1, #9
 8007d18:	f7ff ff8e 	bl	8007c38 <std>
 8007d1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d20:	2202      	movs	r2, #2
 8007d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d26:	2112      	movs	r1, #18
 8007d28:	f7ff bf86 	b.w	8007c38 <std>
 8007d2c:	2000096c 	.word	0x2000096c
 8007d30:	20000834 	.word	0x20000834
 8007d34:	08007ca5 	.word	0x08007ca5

08007d38 <__sfp_lock_acquire>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__sfp_lock_acquire+0x8>)
 8007d3a:	f000 b9a8 	b.w	800808e <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	20000975 	.word	0x20000975

08007d44 <__sfp_lock_release>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__sfp_lock_release+0x8>)
 8007d46:	f000 b9a3 	b.w	8008090 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20000975 	.word	0x20000975

08007d50 <__sinit>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	4604      	mov	r4, r0
 8007d54:	f7ff fff0 	bl	8007d38 <__sfp_lock_acquire>
 8007d58:	6a23      	ldr	r3, [r4, #32]
 8007d5a:	b11b      	cbz	r3, 8007d64 <__sinit+0x14>
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f7ff bff0 	b.w	8007d44 <__sfp_lock_release>
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <__sinit+0x28>)
 8007d66:	6223      	str	r3, [r4, #32]
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <__sinit+0x2c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f5      	bne.n	8007d5c <__sinit+0xc>
 8007d70:	f7ff ffc4 	bl	8007cfc <global_stdio_init.part.0>
 8007d74:	e7f2      	b.n	8007d5c <__sinit+0xc>
 8007d76:	bf00      	nop
 8007d78:	08007cbd 	.word	0x08007cbd
 8007d7c:	2000096c 	.word	0x2000096c

08007d80 <_fwalk_sglue>:
 8007d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d84:	4607      	mov	r7, r0
 8007d86:	4688      	mov	r8, r1
 8007d88:	4614      	mov	r4, r2
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d90:	f1b9 0901 	subs.w	r9, r9, #1
 8007d94:	d505      	bpl.n	8007da2 <_fwalk_sglue+0x22>
 8007d96:	6824      	ldr	r4, [r4, #0]
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	d1f7      	bne.n	8007d8c <_fwalk_sglue+0xc>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d907      	bls.n	8007db8 <_fwalk_sglue+0x38>
 8007da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dac:	3301      	adds	r3, #1
 8007dae:	d003      	beq.n	8007db8 <_fwalk_sglue+0x38>
 8007db0:	4629      	mov	r1, r5
 8007db2:	4638      	mov	r0, r7
 8007db4:	47c0      	blx	r8
 8007db6:	4306      	orrs	r6, r0
 8007db8:	3568      	adds	r5, #104	; 0x68
 8007dba:	e7e9      	b.n	8007d90 <_fwalk_sglue+0x10>

08007dbc <sniprintf>:
 8007dbc:	b40c      	push	{r2, r3}
 8007dbe:	b530      	push	{r4, r5, lr}
 8007dc0:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <sniprintf+0x64>)
 8007dc2:	1e0c      	subs	r4, r1, #0
 8007dc4:	681d      	ldr	r5, [r3, #0]
 8007dc6:	b09d      	sub	sp, #116	; 0x74
 8007dc8:	da08      	bge.n	8007ddc <sniprintf+0x20>
 8007dca:	238b      	movs	r3, #139	; 0x8b
 8007dcc:	602b      	str	r3, [r5, #0]
 8007dce:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd2:	b01d      	add	sp, #116	; 0x74
 8007dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dd8:	b002      	add	sp, #8
 8007dda:	4770      	bx	lr
 8007ddc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007de0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007de4:	bf14      	ite	ne
 8007de6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007dea:	4623      	moveq	r3, r4
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	9307      	str	r3, [sp, #28]
 8007df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007df4:	9002      	str	r0, [sp, #8]
 8007df6:	9006      	str	r0, [sp, #24]
 8007df8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007dfe:	ab21      	add	r3, sp, #132	; 0x84
 8007e00:	a902      	add	r1, sp, #8
 8007e02:	4628      	mov	r0, r5
 8007e04:	9301      	str	r3, [sp, #4]
 8007e06:	f002 fbc7 	bl	800a598 <_svfiprintf_r>
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	bfbc      	itt	lt
 8007e0e:	238b      	movlt	r3, #139	; 0x8b
 8007e10:	602b      	strlt	r3, [r5, #0]
 8007e12:	2c00      	cmp	r4, #0
 8007e14:	d0dd      	beq.n	8007dd2 <sniprintf+0x16>
 8007e16:	9b02      	ldr	r3, [sp, #8]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]
 8007e1c:	e7d9      	b.n	8007dd2 <sniprintf+0x16>
 8007e1e:	bf00      	nop
 8007e20:	20000070 	.word	0x20000070

08007e24 <siprintf>:
 8007e24:	b40e      	push	{r1, r2, r3}
 8007e26:	b500      	push	{lr}
 8007e28:	b09c      	sub	sp, #112	; 0x70
 8007e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8007e2c:	9002      	str	r0, [sp, #8]
 8007e2e:	9006      	str	r0, [sp, #24]
 8007e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e34:	4809      	ldr	r0, [pc, #36]	; (8007e5c <siprintf+0x38>)
 8007e36:	9107      	str	r1, [sp, #28]
 8007e38:	9104      	str	r1, [sp, #16]
 8007e3a:	4909      	ldr	r1, [pc, #36]	; (8007e60 <siprintf+0x3c>)
 8007e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e40:	9105      	str	r1, [sp, #20]
 8007e42:	6800      	ldr	r0, [r0, #0]
 8007e44:	9301      	str	r3, [sp, #4]
 8007e46:	a902      	add	r1, sp, #8
 8007e48:	f002 fba6 	bl	800a598 <_svfiprintf_r>
 8007e4c:	9b02      	ldr	r3, [sp, #8]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	b01c      	add	sp, #112	; 0x70
 8007e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e58:	b003      	add	sp, #12
 8007e5a:	4770      	bx	lr
 8007e5c:	20000070 	.word	0x20000070
 8007e60:	ffff0208 	.word	0xffff0208

08007e64 <__sread>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	460c      	mov	r4, r1
 8007e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e6c:	f000 f89c 	bl	8007fa8 <_read_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	bfab      	itete	ge
 8007e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e76:	89a3      	ldrhlt	r3, [r4, #12]
 8007e78:	181b      	addge	r3, r3, r0
 8007e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e7e:	bfac      	ite	ge
 8007e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e82:	81a3      	strhlt	r3, [r4, #12]
 8007e84:	bd10      	pop	{r4, pc}

08007e86 <__swrite>:
 8007e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8a:	461f      	mov	r7, r3
 8007e8c:	898b      	ldrh	r3, [r1, #12]
 8007e8e:	05db      	lsls	r3, r3, #23
 8007e90:	4605      	mov	r5, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	4616      	mov	r6, r2
 8007e96:	d505      	bpl.n	8007ea4 <__swrite+0x1e>
 8007e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f000 f870 	bl	8007f84 <_lseek_r>
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007eae:	81a3      	strh	r3, [r4, #12]
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	463b      	mov	r3, r7
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eba:	f000 b8ab 	b.w	8008014 <_write_r>

08007ebe <__sseek>:
 8007ebe:	b510      	push	{r4, lr}
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec6:	f000 f85d 	bl	8007f84 <_lseek_r>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	89a3      	ldrh	r3, [r4, #12]
 8007ece:	bf15      	itete	ne
 8007ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007eda:	81a3      	strheq	r3, [r4, #12]
 8007edc:	bf18      	it	ne
 8007ede:	81a3      	strhne	r3, [r4, #12]
 8007ee0:	bd10      	pop	{r4, pc}

08007ee2 <__sclose>:
 8007ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee6:	f000 b83d 	b.w	8007f64 <_close_r>

08007eea <memset>:
 8007eea:	4402      	add	r2, r0
 8007eec:	4603      	mov	r3, r0
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d100      	bne.n	8007ef4 <memset+0xa>
 8007ef2:	4770      	bx	lr
 8007ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef8:	e7f9      	b.n	8007eee <memset+0x4>

08007efa <_raise_r>:
 8007efa:	291f      	cmp	r1, #31
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4604      	mov	r4, r0
 8007f00:	460d      	mov	r5, r1
 8007f02:	d904      	bls.n	8007f0e <_raise_r+0x14>
 8007f04:	2316      	movs	r3, #22
 8007f06:	6003      	str	r3, [r0, #0]
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	bd38      	pop	{r3, r4, r5, pc}
 8007f0e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007f10:	b112      	cbz	r2, 8007f18 <_raise_r+0x1e>
 8007f12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f16:	b94b      	cbnz	r3, 8007f2c <_raise_r+0x32>
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f000 f869 	bl	8007ff0 <_getpid_r>
 8007f1e:	462a      	mov	r2, r5
 8007f20:	4601      	mov	r1, r0
 8007f22:	4620      	mov	r0, r4
 8007f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f28:	f000 b850 	b.w	8007fcc <_kill_r>
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d00a      	beq.n	8007f46 <_raise_r+0x4c>
 8007f30:	1c59      	adds	r1, r3, #1
 8007f32:	d103      	bne.n	8007f3c <_raise_r+0x42>
 8007f34:	2316      	movs	r3, #22
 8007f36:	6003      	str	r3, [r0, #0]
 8007f38:	2001      	movs	r0, #1
 8007f3a:	e7e7      	b.n	8007f0c <_raise_r+0x12>
 8007f3c:	2400      	movs	r4, #0
 8007f3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f42:	4628      	mov	r0, r5
 8007f44:	4798      	blx	r3
 8007f46:	2000      	movs	r0, #0
 8007f48:	e7e0      	b.n	8007f0c <_raise_r+0x12>
	...

08007f4c <raise>:
 8007f4c:	4b02      	ldr	r3, [pc, #8]	; (8007f58 <raise+0xc>)
 8007f4e:	4601      	mov	r1, r0
 8007f50:	6818      	ldr	r0, [r3, #0]
 8007f52:	f7ff bfd2 	b.w	8007efa <_raise_r>
 8007f56:	bf00      	nop
 8007f58:	20000070 	.word	0x20000070

08007f5c <_localeconv_r>:
 8007f5c:	4800      	ldr	r0, [pc, #0]	; (8007f60 <_localeconv_r+0x4>)
 8007f5e:	4770      	bx	lr
 8007f60:	20000164 	.word	0x20000164

08007f64 <_close_r>:
 8007f64:	b538      	push	{r3, r4, r5, lr}
 8007f66:	4d06      	ldr	r5, [pc, #24]	; (8007f80 <_close_r+0x1c>)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	602b      	str	r3, [r5, #0]
 8007f70:	f7fb fb1a 	bl	80035a8 <_close>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_close_r+0x1a>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_close_r+0x1a>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	20000970 	.word	0x20000970

08007f84 <_lseek_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d07      	ldr	r5, [pc, #28]	; (8007fa4 <_lseek_r+0x20>)
 8007f88:	4604      	mov	r4, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	461a      	mov	r2, r3
 8007f94:	f7fb fb12 	bl	80035bc <_lseek>
 8007f98:	1c43      	adds	r3, r0, #1
 8007f9a:	d102      	bne.n	8007fa2 <_lseek_r+0x1e>
 8007f9c:	682b      	ldr	r3, [r5, #0]
 8007f9e:	b103      	cbz	r3, 8007fa2 <_lseek_r+0x1e>
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	20000970 	.word	0x20000970

08007fa8 <_read_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4d07      	ldr	r5, [pc, #28]	; (8007fc8 <_read_r+0x20>)
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7fb fada 	bl	8003570 <_read>
 8007fbc:	1c43      	adds	r3, r0, #1
 8007fbe:	d102      	bne.n	8007fc6 <_read_r+0x1e>
 8007fc0:	682b      	ldr	r3, [r5, #0]
 8007fc2:	b103      	cbz	r3, 8007fc6 <_read_r+0x1e>
 8007fc4:	6023      	str	r3, [r4, #0]
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	20000970 	.word	0x20000970

08007fcc <_kill_r>:
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4d07      	ldr	r5, [pc, #28]	; (8007fec <_kill_r+0x20>)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	f7fb fabb 	bl	8003554 <_kill>
 8007fde:	1c43      	adds	r3, r0, #1
 8007fe0:	d102      	bne.n	8007fe8 <_kill_r+0x1c>
 8007fe2:	682b      	ldr	r3, [r5, #0]
 8007fe4:	b103      	cbz	r3, 8007fe8 <_kill_r+0x1c>
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
 8007fea:	bf00      	nop
 8007fec:	20000970 	.word	0x20000970

08007ff0 <_getpid_r>:
 8007ff0:	f7fb baae 	b.w	8003550 <_getpid>

08007ff4 <_sbrk_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d06      	ldr	r5, [pc, #24]	; (8008010 <_sbrk_r+0x1c>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7fb fade 	bl	80035c0 <_sbrk>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_sbrk_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_sbrk_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	20000970 	.word	0x20000970

08008014 <_write_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4d07      	ldr	r5, [pc, #28]	; (8008034 <_write_r+0x20>)
 8008018:	4604      	mov	r4, r0
 800801a:	4608      	mov	r0, r1
 800801c:	4611      	mov	r1, r2
 800801e:	2200      	movs	r2, #0
 8008020:	602a      	str	r2, [r5, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f7fb fab2 	bl	800358c <_write>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_write_r+0x1e>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_write_r+0x1e>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	20000970 	.word	0x20000970

08008038 <__errno>:
 8008038:	4b01      	ldr	r3, [pc, #4]	; (8008040 <__errno+0x8>)
 800803a:	6818      	ldr	r0, [r3, #0]
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20000070 	.word	0x20000070

08008044 <__libc_init_array>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	4d0d      	ldr	r5, [pc, #52]	; (800807c <__libc_init_array+0x38>)
 8008048:	4c0d      	ldr	r4, [pc, #52]	; (8008080 <__libc_init_array+0x3c>)
 800804a:	1b64      	subs	r4, r4, r5
 800804c:	10a4      	asrs	r4, r4, #2
 800804e:	2600      	movs	r6, #0
 8008050:	42a6      	cmp	r6, r4
 8008052:	d109      	bne.n	8008068 <__libc_init_array+0x24>
 8008054:	4d0b      	ldr	r5, [pc, #44]	; (8008084 <__libc_init_array+0x40>)
 8008056:	4c0c      	ldr	r4, [pc, #48]	; (8008088 <__libc_init_array+0x44>)
 8008058:	f003 fac8 	bl	800b5ec <_init>
 800805c:	1b64      	subs	r4, r4, r5
 800805e:	10a4      	asrs	r4, r4, #2
 8008060:	2600      	movs	r6, #0
 8008062:	42a6      	cmp	r6, r4
 8008064:	d105      	bne.n	8008072 <__libc_init_array+0x2e>
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	f855 3b04 	ldr.w	r3, [r5], #4
 800806c:	4798      	blx	r3
 800806e:	3601      	adds	r6, #1
 8008070:	e7ee      	b.n	8008050 <__libc_init_array+0xc>
 8008072:	f855 3b04 	ldr.w	r3, [r5], #4
 8008076:	4798      	blx	r3
 8008078:	3601      	adds	r6, #1
 800807a:	e7f2      	b.n	8008062 <__libc_init_array+0x1e>
 800807c:	0800c6d8 	.word	0x0800c6d8
 8008080:	0800c6d8 	.word	0x0800c6d8
 8008084:	0800c6d8 	.word	0x0800c6d8
 8008088:	0800c6dc 	.word	0x0800c6dc

0800808c <__retarget_lock_init_recursive>:
 800808c:	4770      	bx	lr

0800808e <__retarget_lock_acquire_recursive>:
 800808e:	4770      	bx	lr

08008090 <__retarget_lock_release_recursive>:
 8008090:	4770      	bx	lr

08008092 <strcpy>:
 8008092:	4603      	mov	r3, r0
 8008094:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008098:	f803 2b01 	strb.w	r2, [r3], #1
 800809c:	2a00      	cmp	r2, #0
 800809e:	d1f9      	bne.n	8008094 <strcpy+0x2>
 80080a0:	4770      	bx	lr

080080a2 <memcpy>:
 80080a2:	440a      	add	r2, r1
 80080a4:	4291      	cmp	r1, r2
 80080a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80080aa:	d100      	bne.n	80080ae <memcpy+0xc>
 80080ac:	4770      	bx	lr
 80080ae:	b510      	push	{r4, lr}
 80080b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b8:	4291      	cmp	r1, r2
 80080ba:	d1f9      	bne.n	80080b0 <memcpy+0xe>
 80080bc:	bd10      	pop	{r4, pc}
	...

080080c0 <nanf>:
 80080c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80080c8 <nanf+0x8>
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	7fc00000 	.word	0x7fc00000

080080cc <quorem>:
 80080cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	6903      	ldr	r3, [r0, #16]
 80080d2:	690c      	ldr	r4, [r1, #16]
 80080d4:	42a3      	cmp	r3, r4
 80080d6:	4607      	mov	r7, r0
 80080d8:	db7e      	blt.n	80081d8 <quorem+0x10c>
 80080da:	3c01      	subs	r4, #1
 80080dc:	f101 0814 	add.w	r8, r1, #20
 80080e0:	f100 0514 	add.w	r5, r0, #20
 80080e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080e8:	9301      	str	r3, [sp, #4]
 80080ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080f2:	3301      	adds	r3, #1
 80080f4:	429a      	cmp	r2, r3
 80080f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8008102:	d331      	bcc.n	8008168 <quorem+0x9c>
 8008104:	f04f 0e00 	mov.w	lr, #0
 8008108:	4640      	mov	r0, r8
 800810a:	46ac      	mov	ip, r5
 800810c:	46f2      	mov	sl, lr
 800810e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008112:	b293      	uxth	r3, r2
 8008114:	fb06 e303 	mla	r3, r6, r3, lr
 8008118:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800811c:	0c1a      	lsrs	r2, r3, #16
 800811e:	b29b      	uxth	r3, r3
 8008120:	ebaa 0303 	sub.w	r3, sl, r3
 8008124:	f8dc a000 	ldr.w	sl, [ip]
 8008128:	fa13 f38a 	uxtah	r3, r3, sl
 800812c:	fb06 220e 	mla	r2, r6, lr, r2
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	9b00      	ldr	r3, [sp, #0]
 8008134:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008138:	b292      	uxth	r2, r2
 800813a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800813e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008142:	f8bd 3000 	ldrh.w	r3, [sp]
 8008146:	4581      	cmp	r9, r0
 8008148:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800814c:	f84c 3b04 	str.w	r3, [ip], #4
 8008150:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008154:	d2db      	bcs.n	800810e <quorem+0x42>
 8008156:	f855 300b 	ldr.w	r3, [r5, fp]
 800815a:	b92b      	cbnz	r3, 8008168 <quorem+0x9c>
 800815c:	9b01      	ldr	r3, [sp, #4]
 800815e:	3b04      	subs	r3, #4
 8008160:	429d      	cmp	r5, r3
 8008162:	461a      	mov	r2, r3
 8008164:	d32c      	bcc.n	80081c0 <quorem+0xf4>
 8008166:	613c      	str	r4, [r7, #16]
 8008168:	4638      	mov	r0, r7
 800816a:	f001 f93d 	bl	80093e8 <__mcmp>
 800816e:	2800      	cmp	r0, #0
 8008170:	db22      	blt.n	80081b8 <quorem+0xec>
 8008172:	3601      	adds	r6, #1
 8008174:	4629      	mov	r1, r5
 8008176:	2000      	movs	r0, #0
 8008178:	f858 2b04 	ldr.w	r2, [r8], #4
 800817c:	f8d1 c000 	ldr.w	ip, [r1]
 8008180:	b293      	uxth	r3, r2
 8008182:	1ac3      	subs	r3, r0, r3
 8008184:	0c12      	lsrs	r2, r2, #16
 8008186:	fa13 f38c 	uxtah	r3, r3, ip
 800818a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800818e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008198:	45c1      	cmp	r9, r8
 800819a:	f841 3b04 	str.w	r3, [r1], #4
 800819e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80081a2:	d2e9      	bcs.n	8008178 <quorem+0xac>
 80081a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081ac:	b922      	cbnz	r2, 80081b8 <quorem+0xec>
 80081ae:	3b04      	subs	r3, #4
 80081b0:	429d      	cmp	r5, r3
 80081b2:	461a      	mov	r2, r3
 80081b4:	d30a      	bcc.n	80081cc <quorem+0x100>
 80081b6:	613c      	str	r4, [r7, #16]
 80081b8:	4630      	mov	r0, r6
 80081ba:	b003      	add	sp, #12
 80081bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	3b04      	subs	r3, #4
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	d1ce      	bne.n	8008166 <quorem+0x9a>
 80081c8:	3c01      	subs	r4, #1
 80081ca:	e7c9      	b.n	8008160 <quorem+0x94>
 80081cc:	6812      	ldr	r2, [r2, #0]
 80081ce:	3b04      	subs	r3, #4
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d1f0      	bne.n	80081b6 <quorem+0xea>
 80081d4:	3c01      	subs	r4, #1
 80081d6:	e7eb      	b.n	80081b0 <quorem+0xe4>
 80081d8:	2000      	movs	r0, #0
 80081da:	e7ee      	b.n	80081ba <quorem+0xee>
 80081dc:	0000      	movs	r0, r0
	...

080081e0 <_dtoa_r>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	ed2d 8b04 	vpush	{d8-d9}
 80081e8:	69c5      	ldr	r5, [r0, #28]
 80081ea:	b093      	sub	sp, #76	; 0x4c
 80081ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081f0:	ec57 6b10 	vmov	r6, r7, d0
 80081f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081f8:	9107      	str	r1, [sp, #28]
 80081fa:	4604      	mov	r4, r0
 80081fc:	920a      	str	r2, [sp, #40]	; 0x28
 80081fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008200:	b975      	cbnz	r5, 8008220 <_dtoa_r+0x40>
 8008202:	2010      	movs	r0, #16
 8008204:	f7fe fde6 	bl	8006dd4 <malloc>
 8008208:	4602      	mov	r2, r0
 800820a:	61e0      	str	r0, [r4, #28]
 800820c:	b920      	cbnz	r0, 8008218 <_dtoa_r+0x38>
 800820e:	4bae      	ldr	r3, [pc, #696]	; (80084c8 <_dtoa_r+0x2e8>)
 8008210:	21ef      	movs	r1, #239	; 0xef
 8008212:	48ae      	ldr	r0, [pc, #696]	; (80084cc <_dtoa_r+0x2ec>)
 8008214:	f002 fb98 	bl	800a948 <__assert_func>
 8008218:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800821c:	6005      	str	r5, [r0, #0]
 800821e:	60c5      	str	r5, [r0, #12]
 8008220:	69e3      	ldr	r3, [r4, #28]
 8008222:	6819      	ldr	r1, [r3, #0]
 8008224:	b151      	cbz	r1, 800823c <_dtoa_r+0x5c>
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	604a      	str	r2, [r1, #4]
 800822a:	2301      	movs	r3, #1
 800822c:	4093      	lsls	r3, r2
 800822e:	608b      	str	r3, [r1, #8]
 8008230:	4620      	mov	r0, r4
 8008232:	f000 fe53 	bl	8008edc <_Bfree>
 8008236:	69e3      	ldr	r3, [r4, #28]
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	1e3b      	subs	r3, r7, #0
 800823e:	bfbb      	ittet	lt
 8008240:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008244:	9303      	strlt	r3, [sp, #12]
 8008246:	2300      	movge	r3, #0
 8008248:	2201      	movlt	r2, #1
 800824a:	bfac      	ite	ge
 800824c:	f8c8 3000 	strge.w	r3, [r8]
 8008250:	f8c8 2000 	strlt.w	r2, [r8]
 8008254:	4b9e      	ldr	r3, [pc, #632]	; (80084d0 <_dtoa_r+0x2f0>)
 8008256:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800825a:	ea33 0308 	bics.w	r3, r3, r8
 800825e:	d11b      	bne.n	8008298 <_dtoa_r+0xb8>
 8008260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008262:	f242 730f 	movw	r3, #9999	; 0x270f
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800826c:	4333      	orrs	r3, r6
 800826e:	f000 8593 	beq.w	8008d98 <_dtoa_r+0xbb8>
 8008272:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008274:	b963      	cbnz	r3, 8008290 <_dtoa_r+0xb0>
 8008276:	4b97      	ldr	r3, [pc, #604]	; (80084d4 <_dtoa_r+0x2f4>)
 8008278:	e027      	b.n	80082ca <_dtoa_r+0xea>
 800827a:	4b97      	ldr	r3, [pc, #604]	; (80084d8 <_dtoa_r+0x2f8>)
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	9800      	ldr	r0, [sp, #0]
 8008286:	b013      	add	sp, #76	; 0x4c
 8008288:	ecbd 8b04 	vpop	{d8-d9}
 800828c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008290:	4b90      	ldr	r3, [pc, #576]	; (80084d4 <_dtoa_r+0x2f4>)
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	3303      	adds	r3, #3
 8008296:	e7f3      	b.n	8008280 <_dtoa_r+0xa0>
 8008298:	ed9d 7b02 	vldr	d7, [sp, #8]
 800829c:	2200      	movs	r2, #0
 800829e:	ec51 0b17 	vmov	r0, r1, d7
 80082a2:	eeb0 8a47 	vmov.f32	s16, s14
 80082a6:	eef0 8a67 	vmov.f32	s17, s15
 80082aa:	2300      	movs	r3, #0
 80082ac:	f7f8 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80082b0:	4681      	mov	r9, r0
 80082b2:	b160      	cbz	r0, 80082ce <_dtoa_r+0xee>
 80082b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082b6:	2301      	movs	r3, #1
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8568 	beq.w	8008d92 <_dtoa_r+0xbb2>
 80082c2:	4b86      	ldr	r3, [pc, #536]	; (80084dc <_dtoa_r+0x2fc>)
 80082c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082c6:	6013      	str	r3, [r2, #0]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	e7da      	b.n	8008284 <_dtoa_r+0xa4>
 80082ce:	aa10      	add	r2, sp, #64	; 0x40
 80082d0:	a911      	add	r1, sp, #68	; 0x44
 80082d2:	4620      	mov	r0, r4
 80082d4:	eeb0 0a48 	vmov.f32	s0, s16
 80082d8:	eef0 0a68 	vmov.f32	s1, s17
 80082dc:	f001 f99a 	bl	8009614 <__d2b>
 80082e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80082e4:	4682      	mov	sl, r0
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	d07f      	beq.n	80083ea <_dtoa_r+0x20a>
 80082ea:	ee18 3a90 	vmov	r3, s17
 80082ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80082f6:	ec51 0b18 	vmov	r0, r1, d8
 80082fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008302:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008306:	4619      	mov	r1, r3
 8008308:	2200      	movs	r2, #0
 800830a:	4b75      	ldr	r3, [pc, #468]	; (80084e0 <_dtoa_r+0x300>)
 800830c:	f7f7 ffbc 	bl	8000288 <__aeabi_dsub>
 8008310:	a367      	add	r3, pc, #412	; (adr r3, 80084b0 <_dtoa_r+0x2d0>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f8 f96f 	bl	80005f8 <__aeabi_dmul>
 800831a:	a367      	add	r3, pc, #412	; (adr r3, 80084b8 <_dtoa_r+0x2d8>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	f7f7 ffb4 	bl	800028c <__adddf3>
 8008324:	4606      	mov	r6, r0
 8008326:	4628      	mov	r0, r5
 8008328:	460f      	mov	r7, r1
 800832a:	f7f8 f8fb 	bl	8000524 <__aeabi_i2d>
 800832e:	a364      	add	r3, pc, #400	; (adr r3, 80084c0 <_dtoa_r+0x2e0>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f7f8 f960 	bl	80005f8 <__aeabi_dmul>
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	4630      	mov	r0, r6
 800833e:	4639      	mov	r1, r7
 8008340:	f7f7 ffa4 	bl	800028c <__adddf3>
 8008344:	4606      	mov	r6, r0
 8008346:	460f      	mov	r7, r1
 8008348:	f7f8 fc06 	bl	8000b58 <__aeabi_d2iz>
 800834c:	2200      	movs	r2, #0
 800834e:	4683      	mov	fp, r0
 8008350:	2300      	movs	r3, #0
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f8 fbc1 	bl	8000adc <__aeabi_dcmplt>
 800835a:	b148      	cbz	r0, 8008370 <_dtoa_r+0x190>
 800835c:	4658      	mov	r0, fp
 800835e:	f7f8 f8e1 	bl	8000524 <__aeabi_i2d>
 8008362:	4632      	mov	r2, r6
 8008364:	463b      	mov	r3, r7
 8008366:	f7f8 fbaf 	bl	8000ac8 <__aeabi_dcmpeq>
 800836a:	b908      	cbnz	r0, 8008370 <_dtoa_r+0x190>
 800836c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008370:	f1bb 0f16 	cmp.w	fp, #22
 8008374:	d857      	bhi.n	8008426 <_dtoa_r+0x246>
 8008376:	4b5b      	ldr	r3, [pc, #364]	; (80084e4 <_dtoa_r+0x304>)
 8008378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	ec51 0b18 	vmov	r0, r1, d8
 8008384:	f7f8 fbaa 	bl	8000adc <__aeabi_dcmplt>
 8008388:	2800      	cmp	r0, #0
 800838a:	d04e      	beq.n	800842a <_dtoa_r+0x24a>
 800838c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008390:	2300      	movs	r3, #0
 8008392:	930c      	str	r3, [sp, #48]	; 0x30
 8008394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008396:	1b5b      	subs	r3, r3, r5
 8008398:	1e5a      	subs	r2, r3, #1
 800839a:	bf45      	ittet	mi
 800839c:	f1c3 0301 	rsbmi	r3, r3, #1
 80083a0:	9305      	strmi	r3, [sp, #20]
 80083a2:	2300      	movpl	r3, #0
 80083a4:	2300      	movmi	r3, #0
 80083a6:	9206      	str	r2, [sp, #24]
 80083a8:	bf54      	ite	pl
 80083aa:	9305      	strpl	r3, [sp, #20]
 80083ac:	9306      	strmi	r3, [sp, #24]
 80083ae:	f1bb 0f00 	cmp.w	fp, #0
 80083b2:	db3c      	blt.n	800842e <_dtoa_r+0x24e>
 80083b4:	9b06      	ldr	r3, [sp, #24]
 80083b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80083ba:	445b      	add	r3, fp
 80083bc:	9306      	str	r3, [sp, #24]
 80083be:	2300      	movs	r3, #0
 80083c0:	9308      	str	r3, [sp, #32]
 80083c2:	9b07      	ldr	r3, [sp, #28]
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	d868      	bhi.n	800849a <_dtoa_r+0x2ba>
 80083c8:	2b05      	cmp	r3, #5
 80083ca:	bfc4      	itt	gt
 80083cc:	3b04      	subgt	r3, #4
 80083ce:	9307      	strgt	r3, [sp, #28]
 80083d0:	9b07      	ldr	r3, [sp, #28]
 80083d2:	f1a3 0302 	sub.w	r3, r3, #2
 80083d6:	bfcc      	ite	gt
 80083d8:	2500      	movgt	r5, #0
 80083da:	2501      	movle	r5, #1
 80083dc:	2b03      	cmp	r3, #3
 80083de:	f200 8085 	bhi.w	80084ec <_dtoa_r+0x30c>
 80083e2:	e8df f003 	tbb	[pc, r3]
 80083e6:	3b2e      	.short	0x3b2e
 80083e8:	5839      	.short	0x5839
 80083ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083ee:	441d      	add	r5, r3
 80083f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	bfc1      	itttt	gt
 80083f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008400:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008404:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008408:	bfd6      	itet	le
 800840a:	f1c3 0320 	rsble	r3, r3, #32
 800840e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008412:	fa06 f003 	lslle.w	r0, r6, r3
 8008416:	f7f8 f875 	bl	8000504 <__aeabi_ui2d>
 800841a:	2201      	movs	r2, #1
 800841c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008420:	3d01      	subs	r5, #1
 8008422:	920e      	str	r2, [sp, #56]	; 0x38
 8008424:	e76f      	b.n	8008306 <_dtoa_r+0x126>
 8008426:	2301      	movs	r3, #1
 8008428:	e7b3      	b.n	8008392 <_dtoa_r+0x1b2>
 800842a:	900c      	str	r0, [sp, #48]	; 0x30
 800842c:	e7b2      	b.n	8008394 <_dtoa_r+0x1b4>
 800842e:	9b05      	ldr	r3, [sp, #20]
 8008430:	eba3 030b 	sub.w	r3, r3, fp
 8008434:	9305      	str	r3, [sp, #20]
 8008436:	f1cb 0300 	rsb	r3, fp, #0
 800843a:	9308      	str	r3, [sp, #32]
 800843c:	2300      	movs	r3, #0
 800843e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008440:	e7bf      	b.n	80083c2 <_dtoa_r+0x1e2>
 8008442:	2300      	movs	r3, #0
 8008444:	9309      	str	r3, [sp, #36]	; 0x24
 8008446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008448:	2b00      	cmp	r3, #0
 800844a:	dc52      	bgt.n	80084f2 <_dtoa_r+0x312>
 800844c:	2301      	movs	r3, #1
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	461a      	mov	r2, r3
 8008454:	920a      	str	r2, [sp, #40]	; 0x28
 8008456:	e00b      	b.n	8008470 <_dtoa_r+0x290>
 8008458:	2301      	movs	r3, #1
 800845a:	e7f3      	b.n	8008444 <_dtoa_r+0x264>
 800845c:	2300      	movs	r3, #0
 800845e:	9309      	str	r3, [sp, #36]	; 0x24
 8008460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008462:	445b      	add	r3, fp
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	3301      	adds	r3, #1
 8008468:	2b01      	cmp	r3, #1
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	bfb8      	it	lt
 800846e:	2301      	movlt	r3, #1
 8008470:	69e0      	ldr	r0, [r4, #28]
 8008472:	2100      	movs	r1, #0
 8008474:	2204      	movs	r2, #4
 8008476:	f102 0614 	add.w	r6, r2, #20
 800847a:	429e      	cmp	r6, r3
 800847c:	d93d      	bls.n	80084fa <_dtoa_r+0x31a>
 800847e:	6041      	str	r1, [r0, #4]
 8008480:	4620      	mov	r0, r4
 8008482:	f000 fceb 	bl	8008e5c <_Balloc>
 8008486:	9000      	str	r0, [sp, #0]
 8008488:	2800      	cmp	r0, #0
 800848a:	d139      	bne.n	8008500 <_dtoa_r+0x320>
 800848c:	4b16      	ldr	r3, [pc, #88]	; (80084e8 <_dtoa_r+0x308>)
 800848e:	4602      	mov	r2, r0
 8008490:	f240 11af 	movw	r1, #431	; 0x1af
 8008494:	e6bd      	b.n	8008212 <_dtoa_r+0x32>
 8008496:	2301      	movs	r3, #1
 8008498:	e7e1      	b.n	800845e <_dtoa_r+0x27e>
 800849a:	2501      	movs	r5, #1
 800849c:	2300      	movs	r3, #0
 800849e:	9307      	str	r3, [sp, #28]
 80084a0:	9509      	str	r5, [sp, #36]	; 0x24
 80084a2:	f04f 33ff 	mov.w	r3, #4294967295
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	2200      	movs	r2, #0
 80084ac:	2312      	movs	r3, #18
 80084ae:	e7d1      	b.n	8008454 <_dtoa_r+0x274>
 80084b0:	636f4361 	.word	0x636f4361
 80084b4:	3fd287a7 	.word	0x3fd287a7
 80084b8:	8b60c8b3 	.word	0x8b60c8b3
 80084bc:	3fc68a28 	.word	0x3fc68a28
 80084c0:	509f79fb 	.word	0x509f79fb
 80084c4:	3fd34413 	.word	0x3fd34413
 80084c8:	0800c2e8 	.word	0x0800c2e8
 80084cc:	0800c2ff 	.word	0x0800c2ff
 80084d0:	7ff00000 	.word	0x7ff00000
 80084d4:	0800c2e4 	.word	0x0800c2e4
 80084d8:	0800c2db 	.word	0x0800c2db
 80084dc:	0800b7d8 	.word	0x0800b7d8
 80084e0:	3ff80000 	.word	0x3ff80000
 80084e4:	0800c3f0 	.word	0x0800c3f0
 80084e8:	0800c357 	.word	0x0800c357
 80084ec:	2301      	movs	r3, #1
 80084ee:	9309      	str	r3, [sp, #36]	; 0x24
 80084f0:	e7d7      	b.n	80084a2 <_dtoa_r+0x2c2>
 80084f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f4:	9301      	str	r3, [sp, #4]
 80084f6:	9304      	str	r3, [sp, #16]
 80084f8:	e7ba      	b.n	8008470 <_dtoa_r+0x290>
 80084fa:	3101      	adds	r1, #1
 80084fc:	0052      	lsls	r2, r2, #1
 80084fe:	e7ba      	b.n	8008476 <_dtoa_r+0x296>
 8008500:	69e3      	ldr	r3, [r4, #28]
 8008502:	9a00      	ldr	r2, [sp, #0]
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	9b04      	ldr	r3, [sp, #16]
 8008508:	2b0e      	cmp	r3, #14
 800850a:	f200 80a8 	bhi.w	800865e <_dtoa_r+0x47e>
 800850e:	2d00      	cmp	r5, #0
 8008510:	f000 80a5 	beq.w	800865e <_dtoa_r+0x47e>
 8008514:	f1bb 0f00 	cmp.w	fp, #0
 8008518:	dd38      	ble.n	800858c <_dtoa_r+0x3ac>
 800851a:	4bc0      	ldr	r3, [pc, #768]	; (800881c <_dtoa_r+0x63c>)
 800851c:	f00b 020f 	and.w	r2, fp, #15
 8008520:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008524:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008528:	e9d3 6700 	ldrd	r6, r7, [r3]
 800852c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008530:	d019      	beq.n	8008566 <_dtoa_r+0x386>
 8008532:	4bbb      	ldr	r3, [pc, #748]	; (8008820 <_dtoa_r+0x640>)
 8008534:	ec51 0b18 	vmov	r0, r1, d8
 8008538:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800853c:	f7f8 f986 	bl	800084c <__aeabi_ddiv>
 8008540:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008544:	f008 080f 	and.w	r8, r8, #15
 8008548:	2503      	movs	r5, #3
 800854a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008820 <_dtoa_r+0x640>
 800854e:	f1b8 0f00 	cmp.w	r8, #0
 8008552:	d10a      	bne.n	800856a <_dtoa_r+0x38a>
 8008554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008558:	4632      	mov	r2, r6
 800855a:	463b      	mov	r3, r7
 800855c:	f7f8 f976 	bl	800084c <__aeabi_ddiv>
 8008560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008564:	e02b      	b.n	80085be <_dtoa_r+0x3de>
 8008566:	2502      	movs	r5, #2
 8008568:	e7ef      	b.n	800854a <_dtoa_r+0x36a>
 800856a:	f018 0f01 	tst.w	r8, #1
 800856e:	d008      	beq.n	8008582 <_dtoa_r+0x3a2>
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008578:	f7f8 f83e 	bl	80005f8 <__aeabi_dmul>
 800857c:	3501      	adds	r5, #1
 800857e:	4606      	mov	r6, r0
 8008580:	460f      	mov	r7, r1
 8008582:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008586:	f109 0908 	add.w	r9, r9, #8
 800858a:	e7e0      	b.n	800854e <_dtoa_r+0x36e>
 800858c:	f000 809f 	beq.w	80086ce <_dtoa_r+0x4ee>
 8008590:	f1cb 0600 	rsb	r6, fp, #0
 8008594:	4ba1      	ldr	r3, [pc, #644]	; (800881c <_dtoa_r+0x63c>)
 8008596:	4fa2      	ldr	r7, [pc, #648]	; (8008820 <_dtoa_r+0x640>)
 8008598:	f006 020f 	and.w	r2, r6, #15
 800859c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	ec51 0b18 	vmov	r0, r1, d8
 80085a8:	f7f8 f826 	bl	80005f8 <__aeabi_dmul>
 80085ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085b0:	1136      	asrs	r6, r6, #4
 80085b2:	2300      	movs	r3, #0
 80085b4:	2502      	movs	r5, #2
 80085b6:	2e00      	cmp	r6, #0
 80085b8:	d17e      	bne.n	80086b8 <_dtoa_r+0x4d8>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1d0      	bne.n	8008560 <_dtoa_r+0x380>
 80085be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8084 	beq.w	80086d2 <_dtoa_r+0x4f2>
 80085ca:	4b96      	ldr	r3, [pc, #600]	; (8008824 <_dtoa_r+0x644>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	4640      	mov	r0, r8
 80085d0:	4649      	mov	r1, r9
 80085d2:	f7f8 fa83 	bl	8000adc <__aeabi_dcmplt>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d07b      	beq.n	80086d2 <_dtoa_r+0x4f2>
 80085da:	9b04      	ldr	r3, [sp, #16]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d078      	beq.n	80086d2 <_dtoa_r+0x4f2>
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	dd39      	ble.n	800865a <_dtoa_r+0x47a>
 80085e6:	4b90      	ldr	r3, [pc, #576]	; (8008828 <_dtoa_r+0x648>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7f8 f803 	bl	80005f8 <__aeabi_dmul>
 80085f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085f6:	9e01      	ldr	r6, [sp, #4]
 80085f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80085fc:	3501      	adds	r5, #1
 80085fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008602:	4628      	mov	r0, r5
 8008604:	f7f7 ff8e 	bl	8000524 <__aeabi_i2d>
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	f7f7 fff4 	bl	80005f8 <__aeabi_dmul>
 8008610:	4b86      	ldr	r3, [pc, #536]	; (800882c <_dtoa_r+0x64c>)
 8008612:	2200      	movs	r2, #0
 8008614:	f7f7 fe3a 	bl	800028c <__adddf3>
 8008618:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800861c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	2e00      	cmp	r6, #0
 8008624:	d158      	bne.n	80086d8 <_dtoa_r+0x4f8>
 8008626:	4b82      	ldr	r3, [pc, #520]	; (8008830 <_dtoa_r+0x650>)
 8008628:	2200      	movs	r2, #0
 800862a:	4640      	mov	r0, r8
 800862c:	4649      	mov	r1, r9
 800862e:	f7f7 fe2b 	bl	8000288 <__aeabi_dsub>
 8008632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008636:	4680      	mov	r8, r0
 8008638:	4689      	mov	r9, r1
 800863a:	f7f8 fa6d 	bl	8000b18 <__aeabi_dcmpgt>
 800863e:	2800      	cmp	r0, #0
 8008640:	f040 8296 	bne.w	8008b70 <_dtoa_r+0x990>
 8008644:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008648:	4640      	mov	r0, r8
 800864a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800864e:	4649      	mov	r1, r9
 8008650:	f7f8 fa44 	bl	8000adc <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	f040 8289 	bne.w	8008b6c <_dtoa_r+0x98c>
 800865a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800865e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008660:	2b00      	cmp	r3, #0
 8008662:	f2c0 814e 	blt.w	8008902 <_dtoa_r+0x722>
 8008666:	f1bb 0f0e 	cmp.w	fp, #14
 800866a:	f300 814a 	bgt.w	8008902 <_dtoa_r+0x722>
 800866e:	4b6b      	ldr	r3, [pc, #428]	; (800881c <_dtoa_r+0x63c>)
 8008670:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008674:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867a:	2b00      	cmp	r3, #0
 800867c:	f280 80dc 	bge.w	8008838 <_dtoa_r+0x658>
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	f300 80d8 	bgt.w	8008838 <_dtoa_r+0x658>
 8008688:	f040 826f 	bne.w	8008b6a <_dtoa_r+0x98a>
 800868c:	4b68      	ldr	r3, [pc, #416]	; (8008830 <_dtoa_r+0x650>)
 800868e:	2200      	movs	r2, #0
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f7 ffb0 	bl	80005f8 <__aeabi_dmul>
 8008698:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800869c:	f7f8 fa32 	bl	8000b04 <__aeabi_dcmpge>
 80086a0:	9e04      	ldr	r6, [sp, #16]
 80086a2:	4637      	mov	r7, r6
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f040 8245 	bne.w	8008b34 <_dtoa_r+0x954>
 80086aa:	9d00      	ldr	r5, [sp, #0]
 80086ac:	2331      	movs	r3, #49	; 0x31
 80086ae:	f805 3b01 	strb.w	r3, [r5], #1
 80086b2:	f10b 0b01 	add.w	fp, fp, #1
 80086b6:	e241      	b.n	8008b3c <_dtoa_r+0x95c>
 80086b8:	07f2      	lsls	r2, r6, #31
 80086ba:	d505      	bpl.n	80086c8 <_dtoa_r+0x4e8>
 80086bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086c0:	f7f7 ff9a 	bl	80005f8 <__aeabi_dmul>
 80086c4:	3501      	adds	r5, #1
 80086c6:	2301      	movs	r3, #1
 80086c8:	1076      	asrs	r6, r6, #1
 80086ca:	3708      	adds	r7, #8
 80086cc:	e773      	b.n	80085b6 <_dtoa_r+0x3d6>
 80086ce:	2502      	movs	r5, #2
 80086d0:	e775      	b.n	80085be <_dtoa_r+0x3de>
 80086d2:	9e04      	ldr	r6, [sp, #16]
 80086d4:	465f      	mov	r7, fp
 80086d6:	e792      	b.n	80085fe <_dtoa_r+0x41e>
 80086d8:	9900      	ldr	r1, [sp, #0]
 80086da:	4b50      	ldr	r3, [pc, #320]	; (800881c <_dtoa_r+0x63c>)
 80086dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086e0:	4431      	add	r1, r6
 80086e2:	9102      	str	r1, [sp, #8]
 80086e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086e6:	eeb0 9a47 	vmov.f32	s18, s14
 80086ea:	eef0 9a67 	vmov.f32	s19, s15
 80086ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086f6:	2900      	cmp	r1, #0
 80086f8:	d044      	beq.n	8008784 <_dtoa_r+0x5a4>
 80086fa:	494e      	ldr	r1, [pc, #312]	; (8008834 <_dtoa_r+0x654>)
 80086fc:	2000      	movs	r0, #0
 80086fe:	f7f8 f8a5 	bl	800084c <__aeabi_ddiv>
 8008702:	ec53 2b19 	vmov	r2, r3, d9
 8008706:	f7f7 fdbf 	bl	8000288 <__aeabi_dsub>
 800870a:	9d00      	ldr	r5, [sp, #0]
 800870c:	ec41 0b19 	vmov	d9, r0, r1
 8008710:	4649      	mov	r1, r9
 8008712:	4640      	mov	r0, r8
 8008714:	f7f8 fa20 	bl	8000b58 <__aeabi_d2iz>
 8008718:	4606      	mov	r6, r0
 800871a:	f7f7 ff03 	bl	8000524 <__aeabi_i2d>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	4640      	mov	r0, r8
 8008724:	4649      	mov	r1, r9
 8008726:	f7f7 fdaf 	bl	8000288 <__aeabi_dsub>
 800872a:	3630      	adds	r6, #48	; 0x30
 800872c:	f805 6b01 	strb.w	r6, [r5], #1
 8008730:	ec53 2b19 	vmov	r2, r3, d9
 8008734:	4680      	mov	r8, r0
 8008736:	4689      	mov	r9, r1
 8008738:	f7f8 f9d0 	bl	8000adc <__aeabi_dcmplt>
 800873c:	2800      	cmp	r0, #0
 800873e:	d164      	bne.n	800880a <_dtoa_r+0x62a>
 8008740:	4642      	mov	r2, r8
 8008742:	464b      	mov	r3, r9
 8008744:	4937      	ldr	r1, [pc, #220]	; (8008824 <_dtoa_r+0x644>)
 8008746:	2000      	movs	r0, #0
 8008748:	f7f7 fd9e 	bl	8000288 <__aeabi_dsub>
 800874c:	ec53 2b19 	vmov	r2, r3, d9
 8008750:	f7f8 f9c4 	bl	8000adc <__aeabi_dcmplt>
 8008754:	2800      	cmp	r0, #0
 8008756:	f040 80b6 	bne.w	80088c6 <_dtoa_r+0x6e6>
 800875a:	9b02      	ldr	r3, [sp, #8]
 800875c:	429d      	cmp	r5, r3
 800875e:	f43f af7c 	beq.w	800865a <_dtoa_r+0x47a>
 8008762:	4b31      	ldr	r3, [pc, #196]	; (8008828 <_dtoa_r+0x648>)
 8008764:	ec51 0b19 	vmov	r0, r1, d9
 8008768:	2200      	movs	r2, #0
 800876a:	f7f7 ff45 	bl	80005f8 <__aeabi_dmul>
 800876e:	4b2e      	ldr	r3, [pc, #184]	; (8008828 <_dtoa_r+0x648>)
 8008770:	ec41 0b19 	vmov	d9, r0, r1
 8008774:	2200      	movs	r2, #0
 8008776:	4640      	mov	r0, r8
 8008778:	4649      	mov	r1, r9
 800877a:	f7f7 ff3d 	bl	80005f8 <__aeabi_dmul>
 800877e:	4680      	mov	r8, r0
 8008780:	4689      	mov	r9, r1
 8008782:	e7c5      	b.n	8008710 <_dtoa_r+0x530>
 8008784:	ec51 0b17 	vmov	r0, r1, d7
 8008788:	f7f7 ff36 	bl	80005f8 <__aeabi_dmul>
 800878c:	9b02      	ldr	r3, [sp, #8]
 800878e:	9d00      	ldr	r5, [sp, #0]
 8008790:	930f      	str	r3, [sp, #60]	; 0x3c
 8008792:	ec41 0b19 	vmov	d9, r0, r1
 8008796:	4649      	mov	r1, r9
 8008798:	4640      	mov	r0, r8
 800879a:	f7f8 f9dd 	bl	8000b58 <__aeabi_d2iz>
 800879e:	4606      	mov	r6, r0
 80087a0:	f7f7 fec0 	bl	8000524 <__aeabi_i2d>
 80087a4:	3630      	adds	r6, #48	; 0x30
 80087a6:	4602      	mov	r2, r0
 80087a8:	460b      	mov	r3, r1
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	f7f7 fd6b 	bl	8000288 <__aeabi_dsub>
 80087b2:	f805 6b01 	strb.w	r6, [r5], #1
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	429d      	cmp	r5, r3
 80087ba:	4680      	mov	r8, r0
 80087bc:	4689      	mov	r9, r1
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	d124      	bne.n	800880e <_dtoa_r+0x62e>
 80087c4:	4b1b      	ldr	r3, [pc, #108]	; (8008834 <_dtoa_r+0x654>)
 80087c6:	ec51 0b19 	vmov	r0, r1, d9
 80087ca:	f7f7 fd5f 	bl	800028c <__adddf3>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	4640      	mov	r0, r8
 80087d4:	4649      	mov	r1, r9
 80087d6:	f7f8 f99f 	bl	8000b18 <__aeabi_dcmpgt>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d173      	bne.n	80088c6 <_dtoa_r+0x6e6>
 80087de:	ec53 2b19 	vmov	r2, r3, d9
 80087e2:	4914      	ldr	r1, [pc, #80]	; (8008834 <_dtoa_r+0x654>)
 80087e4:	2000      	movs	r0, #0
 80087e6:	f7f7 fd4f 	bl	8000288 <__aeabi_dsub>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4640      	mov	r0, r8
 80087f0:	4649      	mov	r1, r9
 80087f2:	f7f8 f973 	bl	8000adc <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f af2f 	beq.w	800865a <_dtoa_r+0x47a>
 80087fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087fe:	1e6b      	subs	r3, r5, #1
 8008800:	930f      	str	r3, [sp, #60]	; 0x3c
 8008802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008806:	2b30      	cmp	r3, #48	; 0x30
 8008808:	d0f8      	beq.n	80087fc <_dtoa_r+0x61c>
 800880a:	46bb      	mov	fp, r7
 800880c:	e04a      	b.n	80088a4 <_dtoa_r+0x6c4>
 800880e:	4b06      	ldr	r3, [pc, #24]	; (8008828 <_dtoa_r+0x648>)
 8008810:	f7f7 fef2 	bl	80005f8 <__aeabi_dmul>
 8008814:	4680      	mov	r8, r0
 8008816:	4689      	mov	r9, r1
 8008818:	e7bd      	b.n	8008796 <_dtoa_r+0x5b6>
 800881a:	bf00      	nop
 800881c:	0800c3f0 	.word	0x0800c3f0
 8008820:	0800c3c8 	.word	0x0800c3c8
 8008824:	3ff00000 	.word	0x3ff00000
 8008828:	40240000 	.word	0x40240000
 800882c:	401c0000 	.word	0x401c0000
 8008830:	40140000 	.word	0x40140000
 8008834:	3fe00000 	.word	0x3fe00000
 8008838:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800883c:	9d00      	ldr	r5, [sp, #0]
 800883e:	4642      	mov	r2, r8
 8008840:	464b      	mov	r3, r9
 8008842:	4630      	mov	r0, r6
 8008844:	4639      	mov	r1, r7
 8008846:	f7f8 f801 	bl	800084c <__aeabi_ddiv>
 800884a:	f7f8 f985 	bl	8000b58 <__aeabi_d2iz>
 800884e:	9001      	str	r0, [sp, #4]
 8008850:	f7f7 fe68 	bl	8000524 <__aeabi_i2d>
 8008854:	4642      	mov	r2, r8
 8008856:	464b      	mov	r3, r9
 8008858:	f7f7 fece 	bl	80005f8 <__aeabi_dmul>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4630      	mov	r0, r6
 8008862:	4639      	mov	r1, r7
 8008864:	f7f7 fd10 	bl	8000288 <__aeabi_dsub>
 8008868:	9e01      	ldr	r6, [sp, #4]
 800886a:	9f04      	ldr	r7, [sp, #16]
 800886c:	3630      	adds	r6, #48	; 0x30
 800886e:	f805 6b01 	strb.w	r6, [r5], #1
 8008872:	9e00      	ldr	r6, [sp, #0]
 8008874:	1bae      	subs	r6, r5, r6
 8008876:	42b7      	cmp	r7, r6
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	d134      	bne.n	80088e8 <_dtoa_r+0x708>
 800887e:	f7f7 fd05 	bl	800028c <__adddf3>
 8008882:	4642      	mov	r2, r8
 8008884:	464b      	mov	r3, r9
 8008886:	4606      	mov	r6, r0
 8008888:	460f      	mov	r7, r1
 800888a:	f7f8 f945 	bl	8000b18 <__aeabi_dcmpgt>
 800888e:	b9c8      	cbnz	r0, 80088c4 <_dtoa_r+0x6e4>
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f8 f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800889c:	b110      	cbz	r0, 80088a4 <_dtoa_r+0x6c4>
 800889e:	9b01      	ldr	r3, [sp, #4]
 80088a0:	07db      	lsls	r3, r3, #31
 80088a2:	d40f      	bmi.n	80088c4 <_dtoa_r+0x6e4>
 80088a4:	4651      	mov	r1, sl
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 fb18 	bl	8008edc <_Bfree>
 80088ac:	2300      	movs	r3, #0
 80088ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088b0:	702b      	strb	r3, [r5, #0]
 80088b2:	f10b 0301 	add.w	r3, fp, #1
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	f43f ace2 	beq.w	8008284 <_dtoa_r+0xa4>
 80088c0:	601d      	str	r5, [r3, #0]
 80088c2:	e4df      	b.n	8008284 <_dtoa_r+0xa4>
 80088c4:	465f      	mov	r7, fp
 80088c6:	462b      	mov	r3, r5
 80088c8:	461d      	mov	r5, r3
 80088ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088ce:	2a39      	cmp	r2, #57	; 0x39
 80088d0:	d106      	bne.n	80088e0 <_dtoa_r+0x700>
 80088d2:	9a00      	ldr	r2, [sp, #0]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d1f7      	bne.n	80088c8 <_dtoa_r+0x6e8>
 80088d8:	9900      	ldr	r1, [sp, #0]
 80088da:	2230      	movs	r2, #48	; 0x30
 80088dc:	3701      	adds	r7, #1
 80088de:	700a      	strb	r2, [r1, #0]
 80088e0:	781a      	ldrb	r2, [r3, #0]
 80088e2:	3201      	adds	r2, #1
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	e790      	b.n	800880a <_dtoa_r+0x62a>
 80088e8:	4ba3      	ldr	r3, [pc, #652]	; (8008b78 <_dtoa_r+0x998>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	f7f7 fe84 	bl	80005f8 <__aeabi_dmul>
 80088f0:	2200      	movs	r2, #0
 80088f2:	2300      	movs	r3, #0
 80088f4:	4606      	mov	r6, r0
 80088f6:	460f      	mov	r7, r1
 80088f8:	f7f8 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d09e      	beq.n	800883e <_dtoa_r+0x65e>
 8008900:	e7d0      	b.n	80088a4 <_dtoa_r+0x6c4>
 8008902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008904:	2a00      	cmp	r2, #0
 8008906:	f000 80ca 	beq.w	8008a9e <_dtoa_r+0x8be>
 800890a:	9a07      	ldr	r2, [sp, #28]
 800890c:	2a01      	cmp	r2, #1
 800890e:	f300 80ad 	bgt.w	8008a6c <_dtoa_r+0x88c>
 8008912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008914:	2a00      	cmp	r2, #0
 8008916:	f000 80a5 	beq.w	8008a64 <_dtoa_r+0x884>
 800891a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800891e:	9e08      	ldr	r6, [sp, #32]
 8008920:	9d05      	ldr	r5, [sp, #20]
 8008922:	9a05      	ldr	r2, [sp, #20]
 8008924:	441a      	add	r2, r3
 8008926:	9205      	str	r2, [sp, #20]
 8008928:	9a06      	ldr	r2, [sp, #24]
 800892a:	2101      	movs	r1, #1
 800892c:	441a      	add	r2, r3
 800892e:	4620      	mov	r0, r4
 8008930:	9206      	str	r2, [sp, #24]
 8008932:	f000 fbd3 	bl	80090dc <__i2b>
 8008936:	4607      	mov	r7, r0
 8008938:	b165      	cbz	r5, 8008954 <_dtoa_r+0x774>
 800893a:	9b06      	ldr	r3, [sp, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	dd09      	ble.n	8008954 <_dtoa_r+0x774>
 8008940:	42ab      	cmp	r3, r5
 8008942:	9a05      	ldr	r2, [sp, #20]
 8008944:	bfa8      	it	ge
 8008946:	462b      	movge	r3, r5
 8008948:	1ad2      	subs	r2, r2, r3
 800894a:	9205      	str	r2, [sp, #20]
 800894c:	9a06      	ldr	r2, [sp, #24]
 800894e:	1aed      	subs	r5, r5, r3
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	9306      	str	r3, [sp, #24]
 8008954:	9b08      	ldr	r3, [sp, #32]
 8008956:	b1f3      	cbz	r3, 8008996 <_dtoa_r+0x7b6>
 8008958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 80a3 	beq.w	8008aa6 <_dtoa_r+0x8c6>
 8008960:	2e00      	cmp	r6, #0
 8008962:	dd10      	ble.n	8008986 <_dtoa_r+0x7a6>
 8008964:	4639      	mov	r1, r7
 8008966:	4632      	mov	r2, r6
 8008968:	4620      	mov	r0, r4
 800896a:	f000 fc77 	bl	800925c <__pow5mult>
 800896e:	4652      	mov	r2, sl
 8008970:	4601      	mov	r1, r0
 8008972:	4607      	mov	r7, r0
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fbc7 	bl	8009108 <__multiply>
 800897a:	4651      	mov	r1, sl
 800897c:	4680      	mov	r8, r0
 800897e:	4620      	mov	r0, r4
 8008980:	f000 faac 	bl	8008edc <_Bfree>
 8008984:	46c2      	mov	sl, r8
 8008986:	9b08      	ldr	r3, [sp, #32]
 8008988:	1b9a      	subs	r2, r3, r6
 800898a:	d004      	beq.n	8008996 <_dtoa_r+0x7b6>
 800898c:	4651      	mov	r1, sl
 800898e:	4620      	mov	r0, r4
 8008990:	f000 fc64 	bl	800925c <__pow5mult>
 8008994:	4682      	mov	sl, r0
 8008996:	2101      	movs	r1, #1
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fb9f 	bl	80090dc <__i2b>
 800899e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	4606      	mov	r6, r0
 80089a4:	f340 8081 	ble.w	8008aaa <_dtoa_r+0x8ca>
 80089a8:	461a      	mov	r2, r3
 80089aa:	4601      	mov	r1, r0
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fc55 	bl	800925c <__pow5mult>
 80089b2:	9b07      	ldr	r3, [sp, #28]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	4606      	mov	r6, r0
 80089b8:	dd7a      	ble.n	8008ab0 <_dtoa_r+0x8d0>
 80089ba:	f04f 0800 	mov.w	r8, #0
 80089be:	6933      	ldr	r3, [r6, #16]
 80089c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089c4:	6918      	ldr	r0, [r3, #16]
 80089c6:	f000 fb3b 	bl	8009040 <__hi0bits>
 80089ca:	f1c0 0020 	rsb	r0, r0, #32
 80089ce:	9b06      	ldr	r3, [sp, #24]
 80089d0:	4418      	add	r0, r3
 80089d2:	f010 001f 	ands.w	r0, r0, #31
 80089d6:	f000 8094 	beq.w	8008b02 <_dtoa_r+0x922>
 80089da:	f1c0 0320 	rsb	r3, r0, #32
 80089de:	2b04      	cmp	r3, #4
 80089e0:	f340 8085 	ble.w	8008aee <_dtoa_r+0x90e>
 80089e4:	9b05      	ldr	r3, [sp, #20]
 80089e6:	f1c0 001c 	rsb	r0, r0, #28
 80089ea:	4403      	add	r3, r0
 80089ec:	9305      	str	r3, [sp, #20]
 80089ee:	9b06      	ldr	r3, [sp, #24]
 80089f0:	4403      	add	r3, r0
 80089f2:	4405      	add	r5, r0
 80089f4:	9306      	str	r3, [sp, #24]
 80089f6:	9b05      	ldr	r3, [sp, #20]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	dd05      	ble.n	8008a08 <_dtoa_r+0x828>
 80089fc:	4651      	mov	r1, sl
 80089fe:	461a      	mov	r2, r3
 8008a00:	4620      	mov	r0, r4
 8008a02:	f000 fc85 	bl	8009310 <__lshift>
 8008a06:	4682      	mov	sl, r0
 8008a08:	9b06      	ldr	r3, [sp, #24]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	dd05      	ble.n	8008a1a <_dtoa_r+0x83a>
 8008a0e:	4631      	mov	r1, r6
 8008a10:	461a      	mov	r2, r3
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 fc7c 	bl	8009310 <__lshift>
 8008a18:	4606      	mov	r6, r0
 8008a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d072      	beq.n	8008b06 <_dtoa_r+0x926>
 8008a20:	4631      	mov	r1, r6
 8008a22:	4650      	mov	r0, sl
 8008a24:	f000 fce0 	bl	80093e8 <__mcmp>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	da6c      	bge.n	8008b06 <_dtoa_r+0x926>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4651      	mov	r1, sl
 8008a30:	220a      	movs	r2, #10
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 fa74 	bl	8008f20 <__multadd>
 8008a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a3e:	4682      	mov	sl, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 81b0 	beq.w	8008da6 <_dtoa_r+0xbc6>
 8008a46:	2300      	movs	r3, #0
 8008a48:	4639      	mov	r1, r7
 8008a4a:	220a      	movs	r2, #10
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fa67 	bl	8008f20 <__multadd>
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	4607      	mov	r7, r0
 8008a58:	f300 8096 	bgt.w	8008b88 <_dtoa_r+0x9a8>
 8008a5c:	9b07      	ldr	r3, [sp, #28]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	dc59      	bgt.n	8008b16 <_dtoa_r+0x936>
 8008a62:	e091      	b.n	8008b88 <_dtoa_r+0x9a8>
 8008a64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a6a:	e758      	b.n	800891e <_dtoa_r+0x73e>
 8008a6c:	9b04      	ldr	r3, [sp, #16]
 8008a6e:	1e5e      	subs	r6, r3, #1
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	42b3      	cmp	r3, r6
 8008a74:	bfbf      	itttt	lt
 8008a76:	9b08      	ldrlt	r3, [sp, #32]
 8008a78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008a7a:	9608      	strlt	r6, [sp, #32]
 8008a7c:	1af3      	sublt	r3, r6, r3
 8008a7e:	bfb4      	ite	lt
 8008a80:	18d2      	addlt	r2, r2, r3
 8008a82:	1b9e      	subge	r6, r3, r6
 8008a84:	9b04      	ldr	r3, [sp, #16]
 8008a86:	bfbc      	itt	lt
 8008a88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008a8a:	2600      	movlt	r6, #0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	bfb7      	itett	lt
 8008a90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008a94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008a98:	1a9d      	sublt	r5, r3, r2
 8008a9a:	2300      	movlt	r3, #0
 8008a9c:	e741      	b.n	8008922 <_dtoa_r+0x742>
 8008a9e:	9e08      	ldr	r6, [sp, #32]
 8008aa0:	9d05      	ldr	r5, [sp, #20]
 8008aa2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008aa4:	e748      	b.n	8008938 <_dtoa_r+0x758>
 8008aa6:	9a08      	ldr	r2, [sp, #32]
 8008aa8:	e770      	b.n	800898c <_dtoa_r+0x7ac>
 8008aaa:	9b07      	ldr	r3, [sp, #28]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	dc19      	bgt.n	8008ae4 <_dtoa_r+0x904>
 8008ab0:	9b02      	ldr	r3, [sp, #8]
 8008ab2:	b9bb      	cbnz	r3, 8008ae4 <_dtoa_r+0x904>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aba:	b99b      	cbnz	r3, 8008ae4 <_dtoa_r+0x904>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ac2:	0d1b      	lsrs	r3, r3, #20
 8008ac4:	051b      	lsls	r3, r3, #20
 8008ac6:	b183      	cbz	r3, 8008aea <_dtoa_r+0x90a>
 8008ac8:	9b05      	ldr	r3, [sp, #20]
 8008aca:	3301      	adds	r3, #1
 8008acc:	9305      	str	r3, [sp, #20]
 8008ace:	9b06      	ldr	r3, [sp, #24]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	9306      	str	r3, [sp, #24]
 8008ad4:	f04f 0801 	mov.w	r8, #1
 8008ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f47f af6f 	bne.w	80089be <_dtoa_r+0x7de>
 8008ae0:	2001      	movs	r0, #1
 8008ae2:	e774      	b.n	80089ce <_dtoa_r+0x7ee>
 8008ae4:	f04f 0800 	mov.w	r8, #0
 8008ae8:	e7f6      	b.n	8008ad8 <_dtoa_r+0x8f8>
 8008aea:	4698      	mov	r8, r3
 8008aec:	e7f4      	b.n	8008ad8 <_dtoa_r+0x8f8>
 8008aee:	d082      	beq.n	80089f6 <_dtoa_r+0x816>
 8008af0:	9a05      	ldr	r2, [sp, #20]
 8008af2:	331c      	adds	r3, #28
 8008af4:	441a      	add	r2, r3
 8008af6:	9205      	str	r2, [sp, #20]
 8008af8:	9a06      	ldr	r2, [sp, #24]
 8008afa:	441a      	add	r2, r3
 8008afc:	441d      	add	r5, r3
 8008afe:	9206      	str	r2, [sp, #24]
 8008b00:	e779      	b.n	80089f6 <_dtoa_r+0x816>
 8008b02:	4603      	mov	r3, r0
 8008b04:	e7f4      	b.n	8008af0 <_dtoa_r+0x910>
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc37      	bgt.n	8008b7c <_dtoa_r+0x99c>
 8008b0c:	9b07      	ldr	r3, [sp, #28]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	dd34      	ble.n	8008b7c <_dtoa_r+0x99c>
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	b963      	cbnz	r3, 8008b34 <_dtoa_r+0x954>
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	2205      	movs	r2, #5
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 f9fe 	bl	8008f20 <__multadd>
 8008b24:	4601      	mov	r1, r0
 8008b26:	4606      	mov	r6, r0
 8008b28:	4650      	mov	r0, sl
 8008b2a:	f000 fc5d 	bl	80093e8 <__mcmp>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f73f adbb 	bgt.w	80086aa <_dtoa_r+0x4ca>
 8008b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b36:	9d00      	ldr	r5, [sp, #0]
 8008b38:	ea6f 0b03 	mvn.w	fp, r3
 8008b3c:	f04f 0800 	mov.w	r8, #0
 8008b40:	4631      	mov	r1, r6
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 f9ca 	bl	8008edc <_Bfree>
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	f43f aeab 	beq.w	80088a4 <_dtoa_r+0x6c4>
 8008b4e:	f1b8 0f00 	cmp.w	r8, #0
 8008b52:	d005      	beq.n	8008b60 <_dtoa_r+0x980>
 8008b54:	45b8      	cmp	r8, r7
 8008b56:	d003      	beq.n	8008b60 <_dtoa_r+0x980>
 8008b58:	4641      	mov	r1, r8
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 f9be 	bl	8008edc <_Bfree>
 8008b60:	4639      	mov	r1, r7
 8008b62:	4620      	mov	r0, r4
 8008b64:	f000 f9ba 	bl	8008edc <_Bfree>
 8008b68:	e69c      	b.n	80088a4 <_dtoa_r+0x6c4>
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	4637      	mov	r7, r6
 8008b6e:	e7e1      	b.n	8008b34 <_dtoa_r+0x954>
 8008b70:	46bb      	mov	fp, r7
 8008b72:	4637      	mov	r7, r6
 8008b74:	e599      	b.n	80086aa <_dtoa_r+0x4ca>
 8008b76:	bf00      	nop
 8008b78:	40240000 	.word	0x40240000
 8008b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f000 80c8 	beq.w	8008d14 <_dtoa_r+0xb34>
 8008b84:	9b04      	ldr	r3, [sp, #16]
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	2d00      	cmp	r5, #0
 8008b8a:	dd05      	ble.n	8008b98 <_dtoa_r+0x9b8>
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	462a      	mov	r2, r5
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fbbd 	bl	8009310 <__lshift>
 8008b96:	4607      	mov	r7, r0
 8008b98:	f1b8 0f00 	cmp.w	r8, #0
 8008b9c:	d05b      	beq.n	8008c56 <_dtoa_r+0xa76>
 8008b9e:	6879      	ldr	r1, [r7, #4]
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 f95b 	bl	8008e5c <_Balloc>
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	b928      	cbnz	r0, 8008bb6 <_dtoa_r+0x9d6>
 8008baa:	4b83      	ldr	r3, [pc, #524]	; (8008db8 <_dtoa_r+0xbd8>)
 8008bac:	4602      	mov	r2, r0
 8008bae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008bb2:	f7ff bb2e 	b.w	8008212 <_dtoa_r+0x32>
 8008bb6:	693a      	ldr	r2, [r7, #16]
 8008bb8:	3202      	adds	r2, #2
 8008bba:	0092      	lsls	r2, r2, #2
 8008bbc:	f107 010c 	add.w	r1, r7, #12
 8008bc0:	300c      	adds	r0, #12
 8008bc2:	f7ff fa6e 	bl	80080a2 <memcpy>
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4629      	mov	r1, r5
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 fba0 	bl	8009310 <__lshift>
 8008bd0:	9b00      	ldr	r3, [sp, #0]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	9304      	str	r3, [sp, #16]
 8008bd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bda:	4413      	add	r3, r2
 8008bdc:	9308      	str	r3, [sp, #32]
 8008bde:	9b02      	ldr	r3, [sp, #8]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	46b8      	mov	r8, r7
 8008be6:	9306      	str	r3, [sp, #24]
 8008be8:	4607      	mov	r7, r0
 8008bea:	9b04      	ldr	r3, [sp, #16]
 8008bec:	4631      	mov	r1, r6
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	4650      	mov	r0, sl
 8008bf2:	9301      	str	r3, [sp, #4]
 8008bf4:	f7ff fa6a 	bl	80080cc <quorem>
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	9002      	str	r0, [sp, #8]
 8008bfc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c00:	4650      	mov	r0, sl
 8008c02:	f000 fbf1 	bl	80093e8 <__mcmp>
 8008c06:	463a      	mov	r2, r7
 8008c08:	9005      	str	r0, [sp, #20]
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f000 fc07 	bl	8009420 <__mdiff>
 8008c12:	68c2      	ldr	r2, [r0, #12]
 8008c14:	4605      	mov	r5, r0
 8008c16:	bb02      	cbnz	r2, 8008c5a <_dtoa_r+0xa7a>
 8008c18:	4601      	mov	r1, r0
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	f000 fbe4 	bl	80093e8 <__mcmp>
 8008c20:	4602      	mov	r2, r0
 8008c22:	4629      	mov	r1, r5
 8008c24:	4620      	mov	r0, r4
 8008c26:	9209      	str	r2, [sp, #36]	; 0x24
 8008c28:	f000 f958 	bl	8008edc <_Bfree>
 8008c2c:	9b07      	ldr	r3, [sp, #28]
 8008c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c30:	9d04      	ldr	r5, [sp, #16]
 8008c32:	ea43 0102 	orr.w	r1, r3, r2
 8008c36:	9b06      	ldr	r3, [sp, #24]
 8008c38:	4319      	orrs	r1, r3
 8008c3a:	d110      	bne.n	8008c5e <_dtoa_r+0xa7e>
 8008c3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c40:	d029      	beq.n	8008c96 <_dtoa_r+0xab6>
 8008c42:	9b05      	ldr	r3, [sp, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	dd02      	ble.n	8008c4e <_dtoa_r+0xa6e>
 8008c48:	9b02      	ldr	r3, [sp, #8]
 8008c4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	f883 9000 	strb.w	r9, [r3]
 8008c54:	e774      	b.n	8008b40 <_dtoa_r+0x960>
 8008c56:	4638      	mov	r0, r7
 8008c58:	e7ba      	b.n	8008bd0 <_dtoa_r+0x9f0>
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	e7e1      	b.n	8008c22 <_dtoa_r+0xa42>
 8008c5e:	9b05      	ldr	r3, [sp, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	db04      	blt.n	8008c6e <_dtoa_r+0xa8e>
 8008c64:	9907      	ldr	r1, [sp, #28]
 8008c66:	430b      	orrs	r3, r1
 8008c68:	9906      	ldr	r1, [sp, #24]
 8008c6a:	430b      	orrs	r3, r1
 8008c6c:	d120      	bne.n	8008cb0 <_dtoa_r+0xad0>
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	dded      	ble.n	8008c4e <_dtoa_r+0xa6e>
 8008c72:	4651      	mov	r1, sl
 8008c74:	2201      	movs	r2, #1
 8008c76:	4620      	mov	r0, r4
 8008c78:	f000 fb4a 	bl	8009310 <__lshift>
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4682      	mov	sl, r0
 8008c80:	f000 fbb2 	bl	80093e8 <__mcmp>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	dc03      	bgt.n	8008c90 <_dtoa_r+0xab0>
 8008c88:	d1e1      	bne.n	8008c4e <_dtoa_r+0xa6e>
 8008c8a:	f019 0f01 	tst.w	r9, #1
 8008c8e:	d0de      	beq.n	8008c4e <_dtoa_r+0xa6e>
 8008c90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c94:	d1d8      	bne.n	8008c48 <_dtoa_r+0xa68>
 8008c96:	9a01      	ldr	r2, [sp, #4]
 8008c98:	2339      	movs	r3, #57	; 0x39
 8008c9a:	7013      	strb	r3, [r2, #0]
 8008c9c:	462b      	mov	r3, r5
 8008c9e:	461d      	mov	r5, r3
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008ca6:	2a39      	cmp	r2, #57	; 0x39
 8008ca8:	d06c      	beq.n	8008d84 <_dtoa_r+0xba4>
 8008caa:	3201      	adds	r2, #1
 8008cac:	701a      	strb	r2, [r3, #0]
 8008cae:	e747      	b.n	8008b40 <_dtoa_r+0x960>
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	dd07      	ble.n	8008cc4 <_dtoa_r+0xae4>
 8008cb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cb8:	d0ed      	beq.n	8008c96 <_dtoa_r+0xab6>
 8008cba:	9a01      	ldr	r2, [sp, #4]
 8008cbc:	f109 0301 	add.w	r3, r9, #1
 8008cc0:	7013      	strb	r3, [r2, #0]
 8008cc2:	e73d      	b.n	8008b40 <_dtoa_r+0x960>
 8008cc4:	9b04      	ldr	r3, [sp, #16]
 8008cc6:	9a08      	ldr	r2, [sp, #32]
 8008cc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d043      	beq.n	8008d58 <_dtoa_r+0xb78>
 8008cd0:	4651      	mov	r1, sl
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	220a      	movs	r2, #10
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f000 f922 	bl	8008f20 <__multadd>
 8008cdc:	45b8      	cmp	r8, r7
 8008cde:	4682      	mov	sl, r0
 8008ce0:	f04f 0300 	mov.w	r3, #0
 8008ce4:	f04f 020a 	mov.w	r2, #10
 8008ce8:	4641      	mov	r1, r8
 8008cea:	4620      	mov	r0, r4
 8008cec:	d107      	bne.n	8008cfe <_dtoa_r+0xb1e>
 8008cee:	f000 f917 	bl	8008f20 <__multadd>
 8008cf2:	4680      	mov	r8, r0
 8008cf4:	4607      	mov	r7, r0
 8008cf6:	9b04      	ldr	r3, [sp, #16]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	e775      	b.n	8008bea <_dtoa_r+0xa0a>
 8008cfe:	f000 f90f 	bl	8008f20 <__multadd>
 8008d02:	4639      	mov	r1, r7
 8008d04:	4680      	mov	r8, r0
 8008d06:	2300      	movs	r3, #0
 8008d08:	220a      	movs	r2, #10
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 f908 	bl	8008f20 <__multadd>
 8008d10:	4607      	mov	r7, r0
 8008d12:	e7f0      	b.n	8008cf6 <_dtoa_r+0xb16>
 8008d14:	9b04      	ldr	r3, [sp, #16]
 8008d16:	9301      	str	r3, [sp, #4]
 8008d18:	9d00      	ldr	r5, [sp, #0]
 8008d1a:	4631      	mov	r1, r6
 8008d1c:	4650      	mov	r0, sl
 8008d1e:	f7ff f9d5 	bl	80080cc <quorem>
 8008d22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	f805 9b01 	strb.w	r9, [r5], #1
 8008d2c:	1aea      	subs	r2, r5, r3
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	4293      	cmp	r3, r2
 8008d32:	dd07      	ble.n	8008d44 <_dtoa_r+0xb64>
 8008d34:	4651      	mov	r1, sl
 8008d36:	2300      	movs	r3, #0
 8008d38:	220a      	movs	r2, #10
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 f8f0 	bl	8008f20 <__multadd>
 8008d40:	4682      	mov	sl, r0
 8008d42:	e7ea      	b.n	8008d1a <_dtoa_r+0xb3a>
 8008d44:	9b01      	ldr	r3, [sp, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfc8      	it	gt
 8008d4a:	461d      	movgt	r5, r3
 8008d4c:	9b00      	ldr	r3, [sp, #0]
 8008d4e:	bfd8      	it	le
 8008d50:	2501      	movle	r5, #1
 8008d52:	441d      	add	r5, r3
 8008d54:	f04f 0800 	mov.w	r8, #0
 8008d58:	4651      	mov	r1, sl
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 fad7 	bl	8009310 <__lshift>
 8008d62:	4631      	mov	r1, r6
 8008d64:	4682      	mov	sl, r0
 8008d66:	f000 fb3f 	bl	80093e8 <__mcmp>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	dc96      	bgt.n	8008c9c <_dtoa_r+0xabc>
 8008d6e:	d102      	bne.n	8008d76 <_dtoa_r+0xb96>
 8008d70:	f019 0f01 	tst.w	r9, #1
 8008d74:	d192      	bne.n	8008c9c <_dtoa_r+0xabc>
 8008d76:	462b      	mov	r3, r5
 8008d78:	461d      	mov	r5, r3
 8008d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d7e:	2a30      	cmp	r2, #48	; 0x30
 8008d80:	d0fa      	beq.n	8008d78 <_dtoa_r+0xb98>
 8008d82:	e6dd      	b.n	8008b40 <_dtoa_r+0x960>
 8008d84:	9a00      	ldr	r2, [sp, #0]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d189      	bne.n	8008c9e <_dtoa_r+0xabe>
 8008d8a:	f10b 0b01 	add.w	fp, fp, #1
 8008d8e:	2331      	movs	r3, #49	; 0x31
 8008d90:	e796      	b.n	8008cc0 <_dtoa_r+0xae0>
 8008d92:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <_dtoa_r+0xbdc>)
 8008d94:	f7ff ba99 	b.w	80082ca <_dtoa_r+0xea>
 8008d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f47f aa6d 	bne.w	800827a <_dtoa_r+0x9a>
 8008da0:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <_dtoa_r+0xbe0>)
 8008da2:	f7ff ba92 	b.w	80082ca <_dtoa_r+0xea>
 8008da6:	9b01      	ldr	r3, [sp, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	dcb5      	bgt.n	8008d18 <_dtoa_r+0xb38>
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	f73f aeb1 	bgt.w	8008b16 <_dtoa_r+0x936>
 8008db4:	e7b0      	b.n	8008d18 <_dtoa_r+0xb38>
 8008db6:	bf00      	nop
 8008db8:	0800c357 	.word	0x0800c357
 8008dbc:	0800b7d7 	.word	0x0800b7d7
 8008dc0:	0800c2db 	.word	0x0800c2db

08008dc4 <_free_r>:
 8008dc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d044      	beq.n	8008e54 <_free_r+0x90>
 8008dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dce:	9001      	str	r0, [sp, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f1a1 0404 	sub.w	r4, r1, #4
 8008dd6:	bfb8      	it	lt
 8008dd8:	18e4      	addlt	r4, r4, r3
 8008dda:	f7fe f8ab 	bl	8006f34 <__malloc_lock>
 8008dde:	4a1e      	ldr	r2, [pc, #120]	; (8008e58 <_free_r+0x94>)
 8008de0:	9801      	ldr	r0, [sp, #4]
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	b933      	cbnz	r3, 8008df4 <_free_r+0x30>
 8008de6:	6063      	str	r3, [r4, #4]
 8008de8:	6014      	str	r4, [r2, #0]
 8008dea:	b003      	add	sp, #12
 8008dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008df0:	f7fe b8a6 	b.w	8006f40 <__malloc_unlock>
 8008df4:	42a3      	cmp	r3, r4
 8008df6:	d908      	bls.n	8008e0a <_free_r+0x46>
 8008df8:	6825      	ldr	r5, [r4, #0]
 8008dfa:	1961      	adds	r1, r4, r5
 8008dfc:	428b      	cmp	r3, r1
 8008dfe:	bf01      	itttt	eq
 8008e00:	6819      	ldreq	r1, [r3, #0]
 8008e02:	685b      	ldreq	r3, [r3, #4]
 8008e04:	1949      	addeq	r1, r1, r5
 8008e06:	6021      	streq	r1, [r4, #0]
 8008e08:	e7ed      	b.n	8008de6 <_free_r+0x22>
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	b10b      	cbz	r3, 8008e14 <_free_r+0x50>
 8008e10:	42a3      	cmp	r3, r4
 8008e12:	d9fa      	bls.n	8008e0a <_free_r+0x46>
 8008e14:	6811      	ldr	r1, [r2, #0]
 8008e16:	1855      	adds	r5, r2, r1
 8008e18:	42a5      	cmp	r5, r4
 8008e1a:	d10b      	bne.n	8008e34 <_free_r+0x70>
 8008e1c:	6824      	ldr	r4, [r4, #0]
 8008e1e:	4421      	add	r1, r4
 8008e20:	1854      	adds	r4, r2, r1
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	d1e0      	bne.n	8008dea <_free_r+0x26>
 8008e28:	681c      	ldr	r4, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	6053      	str	r3, [r2, #4]
 8008e2e:	440c      	add	r4, r1
 8008e30:	6014      	str	r4, [r2, #0]
 8008e32:	e7da      	b.n	8008dea <_free_r+0x26>
 8008e34:	d902      	bls.n	8008e3c <_free_r+0x78>
 8008e36:	230c      	movs	r3, #12
 8008e38:	6003      	str	r3, [r0, #0]
 8008e3a:	e7d6      	b.n	8008dea <_free_r+0x26>
 8008e3c:	6825      	ldr	r5, [r4, #0]
 8008e3e:	1961      	adds	r1, r4, r5
 8008e40:	428b      	cmp	r3, r1
 8008e42:	bf04      	itt	eq
 8008e44:	6819      	ldreq	r1, [r3, #0]
 8008e46:	685b      	ldreq	r3, [r3, #4]
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	bf04      	itt	eq
 8008e4c:	1949      	addeq	r1, r1, r5
 8008e4e:	6021      	streq	r1, [r4, #0]
 8008e50:	6054      	str	r4, [r2, #4]
 8008e52:	e7ca      	b.n	8008dea <_free_r+0x26>
 8008e54:	b003      	add	sp, #12
 8008e56:	bd30      	pop	{r4, r5, pc}
 8008e58:	2000082c 	.word	0x2000082c

08008e5c <_Balloc>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	69c6      	ldr	r6, [r0, #28]
 8008e60:	4604      	mov	r4, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	b976      	cbnz	r6, 8008e84 <_Balloc+0x28>
 8008e66:	2010      	movs	r0, #16
 8008e68:	f7fd ffb4 	bl	8006dd4 <malloc>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	61e0      	str	r0, [r4, #28]
 8008e70:	b920      	cbnz	r0, 8008e7c <_Balloc+0x20>
 8008e72:	4b18      	ldr	r3, [pc, #96]	; (8008ed4 <_Balloc+0x78>)
 8008e74:	4818      	ldr	r0, [pc, #96]	; (8008ed8 <_Balloc+0x7c>)
 8008e76:	216b      	movs	r1, #107	; 0x6b
 8008e78:	f001 fd66 	bl	800a948 <__assert_func>
 8008e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e80:	6006      	str	r6, [r0, #0]
 8008e82:	60c6      	str	r6, [r0, #12]
 8008e84:	69e6      	ldr	r6, [r4, #28]
 8008e86:	68f3      	ldr	r3, [r6, #12]
 8008e88:	b183      	cbz	r3, 8008eac <_Balloc+0x50>
 8008e8a:	69e3      	ldr	r3, [r4, #28]
 8008e8c:	68db      	ldr	r3, [r3, #12]
 8008e8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e92:	b9b8      	cbnz	r0, 8008ec4 <_Balloc+0x68>
 8008e94:	2101      	movs	r1, #1
 8008e96:	fa01 f605 	lsl.w	r6, r1, r5
 8008e9a:	1d72      	adds	r2, r6, #5
 8008e9c:	0092      	lsls	r2, r2, #2
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f001 fd70 	bl	800a984 <_calloc_r>
 8008ea4:	b160      	cbz	r0, 8008ec0 <_Balloc+0x64>
 8008ea6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008eaa:	e00e      	b.n	8008eca <_Balloc+0x6e>
 8008eac:	2221      	movs	r2, #33	; 0x21
 8008eae:	2104      	movs	r1, #4
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f001 fd67 	bl	800a984 <_calloc_r>
 8008eb6:	69e3      	ldr	r3, [r4, #28]
 8008eb8:	60f0      	str	r0, [r6, #12]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d1e4      	bne.n	8008e8a <_Balloc+0x2e>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	bd70      	pop	{r4, r5, r6, pc}
 8008ec4:	6802      	ldr	r2, [r0, #0]
 8008ec6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ed0:	e7f7      	b.n	8008ec2 <_Balloc+0x66>
 8008ed2:	bf00      	nop
 8008ed4:	0800c2e8 	.word	0x0800c2e8
 8008ed8:	0800c368 	.word	0x0800c368

08008edc <_Bfree>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	69c6      	ldr	r6, [r0, #28]
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	b976      	cbnz	r6, 8008f04 <_Bfree+0x28>
 8008ee6:	2010      	movs	r0, #16
 8008ee8:	f7fd ff74 	bl	8006dd4 <malloc>
 8008eec:	4602      	mov	r2, r0
 8008eee:	61e8      	str	r0, [r5, #28]
 8008ef0:	b920      	cbnz	r0, 8008efc <_Bfree+0x20>
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <_Bfree+0x3c>)
 8008ef4:	4809      	ldr	r0, [pc, #36]	; (8008f1c <_Bfree+0x40>)
 8008ef6:	218f      	movs	r1, #143	; 0x8f
 8008ef8:	f001 fd26 	bl	800a948 <__assert_func>
 8008efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f00:	6006      	str	r6, [r0, #0]
 8008f02:	60c6      	str	r6, [r0, #12]
 8008f04:	b13c      	cbz	r4, 8008f16 <_Bfree+0x3a>
 8008f06:	69eb      	ldr	r3, [r5, #28]
 8008f08:	6862      	ldr	r2, [r4, #4]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f10:	6021      	str	r1, [r4, #0]
 8008f12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f16:	bd70      	pop	{r4, r5, r6, pc}
 8008f18:	0800c2e8 	.word	0x0800c2e8
 8008f1c:	0800c368 	.word	0x0800c368

08008f20 <__multadd>:
 8008f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f24:	690d      	ldr	r5, [r1, #16]
 8008f26:	4607      	mov	r7, r0
 8008f28:	460c      	mov	r4, r1
 8008f2a:	461e      	mov	r6, r3
 8008f2c:	f101 0c14 	add.w	ip, r1, #20
 8008f30:	2000      	movs	r0, #0
 8008f32:	f8dc 3000 	ldr.w	r3, [ip]
 8008f36:	b299      	uxth	r1, r3
 8008f38:	fb02 6101 	mla	r1, r2, r1, r6
 8008f3c:	0c1e      	lsrs	r6, r3, #16
 8008f3e:	0c0b      	lsrs	r3, r1, #16
 8008f40:	fb02 3306 	mla	r3, r2, r6, r3
 8008f44:	b289      	uxth	r1, r1
 8008f46:	3001      	adds	r0, #1
 8008f48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f4c:	4285      	cmp	r5, r0
 8008f4e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f56:	dcec      	bgt.n	8008f32 <__multadd+0x12>
 8008f58:	b30e      	cbz	r6, 8008f9e <__multadd+0x7e>
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	42ab      	cmp	r3, r5
 8008f5e:	dc19      	bgt.n	8008f94 <__multadd+0x74>
 8008f60:	6861      	ldr	r1, [r4, #4]
 8008f62:	4638      	mov	r0, r7
 8008f64:	3101      	adds	r1, #1
 8008f66:	f7ff ff79 	bl	8008e5c <_Balloc>
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	b928      	cbnz	r0, 8008f7a <__multadd+0x5a>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <__multadd+0x84>)
 8008f72:	480d      	ldr	r0, [pc, #52]	; (8008fa8 <__multadd+0x88>)
 8008f74:	21ba      	movs	r1, #186	; 0xba
 8008f76:	f001 fce7 	bl	800a948 <__assert_func>
 8008f7a:	6922      	ldr	r2, [r4, #16]
 8008f7c:	3202      	adds	r2, #2
 8008f7e:	f104 010c 	add.w	r1, r4, #12
 8008f82:	0092      	lsls	r2, r2, #2
 8008f84:	300c      	adds	r0, #12
 8008f86:	f7ff f88c 	bl	80080a2 <memcpy>
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7ff ffa5 	bl	8008edc <_Bfree>
 8008f92:	4644      	mov	r4, r8
 8008f94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f98:	3501      	adds	r5, #1
 8008f9a:	615e      	str	r6, [r3, #20]
 8008f9c:	6125      	str	r5, [r4, #16]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa4:	0800c357 	.word	0x0800c357
 8008fa8:	0800c368 	.word	0x0800c368

08008fac <__s2b>:
 8008fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb0:	460c      	mov	r4, r1
 8008fb2:	4615      	mov	r5, r2
 8008fb4:	461f      	mov	r7, r3
 8008fb6:	2209      	movs	r2, #9
 8008fb8:	3308      	adds	r3, #8
 8008fba:	4606      	mov	r6, r0
 8008fbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	db09      	blt.n	8008fdc <__s2b+0x30>
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f7ff ff47 	bl	8008e5c <_Balloc>
 8008fce:	b940      	cbnz	r0, 8008fe2 <__s2b+0x36>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	4b19      	ldr	r3, [pc, #100]	; (8009038 <__s2b+0x8c>)
 8008fd4:	4819      	ldr	r0, [pc, #100]	; (800903c <__s2b+0x90>)
 8008fd6:	21d3      	movs	r1, #211	; 0xd3
 8008fd8:	f001 fcb6 	bl	800a948 <__assert_func>
 8008fdc:	0052      	lsls	r2, r2, #1
 8008fde:	3101      	adds	r1, #1
 8008fe0:	e7f0      	b.n	8008fc4 <__s2b+0x18>
 8008fe2:	9b08      	ldr	r3, [sp, #32]
 8008fe4:	6143      	str	r3, [r0, #20]
 8008fe6:	2d09      	cmp	r5, #9
 8008fe8:	f04f 0301 	mov.w	r3, #1
 8008fec:	6103      	str	r3, [r0, #16]
 8008fee:	dd16      	ble.n	800901e <__s2b+0x72>
 8008ff0:	f104 0909 	add.w	r9, r4, #9
 8008ff4:	46c8      	mov	r8, r9
 8008ff6:	442c      	add	r4, r5
 8008ff8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ffc:	4601      	mov	r1, r0
 8008ffe:	3b30      	subs	r3, #48	; 0x30
 8009000:	220a      	movs	r2, #10
 8009002:	4630      	mov	r0, r6
 8009004:	f7ff ff8c 	bl	8008f20 <__multadd>
 8009008:	45a0      	cmp	r8, r4
 800900a:	d1f5      	bne.n	8008ff8 <__s2b+0x4c>
 800900c:	f1a5 0408 	sub.w	r4, r5, #8
 8009010:	444c      	add	r4, r9
 8009012:	1b2d      	subs	r5, r5, r4
 8009014:	1963      	adds	r3, r4, r5
 8009016:	42bb      	cmp	r3, r7
 8009018:	db04      	blt.n	8009024 <__s2b+0x78>
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901e:	340a      	adds	r4, #10
 8009020:	2509      	movs	r5, #9
 8009022:	e7f6      	b.n	8009012 <__s2b+0x66>
 8009024:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009028:	4601      	mov	r1, r0
 800902a:	3b30      	subs	r3, #48	; 0x30
 800902c:	220a      	movs	r2, #10
 800902e:	4630      	mov	r0, r6
 8009030:	f7ff ff76 	bl	8008f20 <__multadd>
 8009034:	e7ee      	b.n	8009014 <__s2b+0x68>
 8009036:	bf00      	nop
 8009038:	0800c357 	.word	0x0800c357
 800903c:	0800c368 	.word	0x0800c368

08009040 <__hi0bits>:
 8009040:	0c03      	lsrs	r3, r0, #16
 8009042:	041b      	lsls	r3, r3, #16
 8009044:	b9d3      	cbnz	r3, 800907c <__hi0bits+0x3c>
 8009046:	0400      	lsls	r0, r0, #16
 8009048:	2310      	movs	r3, #16
 800904a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800904e:	bf04      	itt	eq
 8009050:	0200      	lsleq	r0, r0, #8
 8009052:	3308      	addeq	r3, #8
 8009054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009058:	bf04      	itt	eq
 800905a:	0100      	lsleq	r0, r0, #4
 800905c:	3304      	addeq	r3, #4
 800905e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009062:	bf04      	itt	eq
 8009064:	0080      	lsleq	r0, r0, #2
 8009066:	3302      	addeq	r3, #2
 8009068:	2800      	cmp	r0, #0
 800906a:	db05      	blt.n	8009078 <__hi0bits+0x38>
 800906c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009070:	f103 0301 	add.w	r3, r3, #1
 8009074:	bf08      	it	eq
 8009076:	2320      	moveq	r3, #32
 8009078:	4618      	mov	r0, r3
 800907a:	4770      	bx	lr
 800907c:	2300      	movs	r3, #0
 800907e:	e7e4      	b.n	800904a <__hi0bits+0xa>

08009080 <__lo0bits>:
 8009080:	6803      	ldr	r3, [r0, #0]
 8009082:	f013 0207 	ands.w	r2, r3, #7
 8009086:	d00c      	beq.n	80090a2 <__lo0bits+0x22>
 8009088:	07d9      	lsls	r1, r3, #31
 800908a:	d422      	bmi.n	80090d2 <__lo0bits+0x52>
 800908c:	079a      	lsls	r2, r3, #30
 800908e:	bf49      	itett	mi
 8009090:	085b      	lsrmi	r3, r3, #1
 8009092:	089b      	lsrpl	r3, r3, #2
 8009094:	6003      	strmi	r3, [r0, #0]
 8009096:	2201      	movmi	r2, #1
 8009098:	bf5c      	itt	pl
 800909a:	6003      	strpl	r3, [r0, #0]
 800909c:	2202      	movpl	r2, #2
 800909e:	4610      	mov	r0, r2
 80090a0:	4770      	bx	lr
 80090a2:	b299      	uxth	r1, r3
 80090a4:	b909      	cbnz	r1, 80090aa <__lo0bits+0x2a>
 80090a6:	0c1b      	lsrs	r3, r3, #16
 80090a8:	2210      	movs	r2, #16
 80090aa:	b2d9      	uxtb	r1, r3
 80090ac:	b909      	cbnz	r1, 80090b2 <__lo0bits+0x32>
 80090ae:	3208      	adds	r2, #8
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	0719      	lsls	r1, r3, #28
 80090b4:	bf04      	itt	eq
 80090b6:	091b      	lsreq	r3, r3, #4
 80090b8:	3204      	addeq	r2, #4
 80090ba:	0799      	lsls	r1, r3, #30
 80090bc:	bf04      	itt	eq
 80090be:	089b      	lsreq	r3, r3, #2
 80090c0:	3202      	addeq	r2, #2
 80090c2:	07d9      	lsls	r1, r3, #31
 80090c4:	d403      	bmi.n	80090ce <__lo0bits+0x4e>
 80090c6:	085b      	lsrs	r3, r3, #1
 80090c8:	f102 0201 	add.w	r2, r2, #1
 80090cc:	d003      	beq.n	80090d6 <__lo0bits+0x56>
 80090ce:	6003      	str	r3, [r0, #0]
 80090d0:	e7e5      	b.n	800909e <__lo0bits+0x1e>
 80090d2:	2200      	movs	r2, #0
 80090d4:	e7e3      	b.n	800909e <__lo0bits+0x1e>
 80090d6:	2220      	movs	r2, #32
 80090d8:	e7e1      	b.n	800909e <__lo0bits+0x1e>
	...

080090dc <__i2b>:
 80090dc:	b510      	push	{r4, lr}
 80090de:	460c      	mov	r4, r1
 80090e0:	2101      	movs	r1, #1
 80090e2:	f7ff febb 	bl	8008e5c <_Balloc>
 80090e6:	4602      	mov	r2, r0
 80090e8:	b928      	cbnz	r0, 80090f6 <__i2b+0x1a>
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <__i2b+0x24>)
 80090ec:	4805      	ldr	r0, [pc, #20]	; (8009104 <__i2b+0x28>)
 80090ee:	f240 1145 	movw	r1, #325	; 0x145
 80090f2:	f001 fc29 	bl	800a948 <__assert_func>
 80090f6:	2301      	movs	r3, #1
 80090f8:	6144      	str	r4, [r0, #20]
 80090fa:	6103      	str	r3, [r0, #16]
 80090fc:	bd10      	pop	{r4, pc}
 80090fe:	bf00      	nop
 8009100:	0800c357 	.word	0x0800c357
 8009104:	0800c368 	.word	0x0800c368

08009108 <__multiply>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	4691      	mov	r9, r2
 800910e:	690a      	ldr	r2, [r1, #16]
 8009110:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009114:	429a      	cmp	r2, r3
 8009116:	bfb8      	it	lt
 8009118:	460b      	movlt	r3, r1
 800911a:	460c      	mov	r4, r1
 800911c:	bfbc      	itt	lt
 800911e:	464c      	movlt	r4, r9
 8009120:	4699      	movlt	r9, r3
 8009122:	6927      	ldr	r7, [r4, #16]
 8009124:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009128:	68a3      	ldr	r3, [r4, #8]
 800912a:	6861      	ldr	r1, [r4, #4]
 800912c:	eb07 060a 	add.w	r6, r7, sl
 8009130:	42b3      	cmp	r3, r6
 8009132:	b085      	sub	sp, #20
 8009134:	bfb8      	it	lt
 8009136:	3101      	addlt	r1, #1
 8009138:	f7ff fe90 	bl	8008e5c <_Balloc>
 800913c:	b930      	cbnz	r0, 800914c <__multiply+0x44>
 800913e:	4602      	mov	r2, r0
 8009140:	4b44      	ldr	r3, [pc, #272]	; (8009254 <__multiply+0x14c>)
 8009142:	4845      	ldr	r0, [pc, #276]	; (8009258 <__multiply+0x150>)
 8009144:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009148:	f001 fbfe 	bl	800a948 <__assert_func>
 800914c:	f100 0514 	add.w	r5, r0, #20
 8009150:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009154:	462b      	mov	r3, r5
 8009156:	2200      	movs	r2, #0
 8009158:	4543      	cmp	r3, r8
 800915a:	d321      	bcc.n	80091a0 <__multiply+0x98>
 800915c:	f104 0314 	add.w	r3, r4, #20
 8009160:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009164:	f109 0314 	add.w	r3, r9, #20
 8009168:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800916c:	9202      	str	r2, [sp, #8]
 800916e:	1b3a      	subs	r2, r7, r4
 8009170:	3a15      	subs	r2, #21
 8009172:	f022 0203 	bic.w	r2, r2, #3
 8009176:	3204      	adds	r2, #4
 8009178:	f104 0115 	add.w	r1, r4, #21
 800917c:	428f      	cmp	r7, r1
 800917e:	bf38      	it	cc
 8009180:	2204      	movcc	r2, #4
 8009182:	9201      	str	r2, [sp, #4]
 8009184:	9a02      	ldr	r2, [sp, #8]
 8009186:	9303      	str	r3, [sp, #12]
 8009188:	429a      	cmp	r2, r3
 800918a:	d80c      	bhi.n	80091a6 <__multiply+0x9e>
 800918c:	2e00      	cmp	r6, #0
 800918e:	dd03      	ble.n	8009198 <__multiply+0x90>
 8009190:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009194:	2b00      	cmp	r3, #0
 8009196:	d05b      	beq.n	8009250 <__multiply+0x148>
 8009198:	6106      	str	r6, [r0, #16]
 800919a:	b005      	add	sp, #20
 800919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a0:	f843 2b04 	str.w	r2, [r3], #4
 80091a4:	e7d8      	b.n	8009158 <__multiply+0x50>
 80091a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80091aa:	f1ba 0f00 	cmp.w	sl, #0
 80091ae:	d024      	beq.n	80091fa <__multiply+0xf2>
 80091b0:	f104 0e14 	add.w	lr, r4, #20
 80091b4:	46a9      	mov	r9, r5
 80091b6:	f04f 0c00 	mov.w	ip, #0
 80091ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80091be:	f8d9 1000 	ldr.w	r1, [r9]
 80091c2:	fa1f fb82 	uxth.w	fp, r2
 80091c6:	b289      	uxth	r1, r1
 80091c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80091cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80091d0:	f8d9 2000 	ldr.w	r2, [r9]
 80091d4:	4461      	add	r1, ip
 80091d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091da:	fb0a c20b 	mla	r2, sl, fp, ip
 80091de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80091e2:	b289      	uxth	r1, r1
 80091e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091e8:	4577      	cmp	r7, lr
 80091ea:	f849 1b04 	str.w	r1, [r9], #4
 80091ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80091f2:	d8e2      	bhi.n	80091ba <__multiply+0xb2>
 80091f4:	9a01      	ldr	r2, [sp, #4]
 80091f6:	f845 c002 	str.w	ip, [r5, r2]
 80091fa:	9a03      	ldr	r2, [sp, #12]
 80091fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009200:	3304      	adds	r3, #4
 8009202:	f1b9 0f00 	cmp.w	r9, #0
 8009206:	d021      	beq.n	800924c <__multiply+0x144>
 8009208:	6829      	ldr	r1, [r5, #0]
 800920a:	f104 0c14 	add.w	ip, r4, #20
 800920e:	46ae      	mov	lr, r5
 8009210:	f04f 0a00 	mov.w	sl, #0
 8009214:	f8bc b000 	ldrh.w	fp, [ip]
 8009218:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800921c:	fb09 220b 	mla	r2, r9, fp, r2
 8009220:	4452      	add	r2, sl
 8009222:	b289      	uxth	r1, r1
 8009224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009228:	f84e 1b04 	str.w	r1, [lr], #4
 800922c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009230:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009234:	f8be 1000 	ldrh.w	r1, [lr]
 8009238:	fb09 110a 	mla	r1, r9, sl, r1
 800923c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009240:	4567      	cmp	r7, ip
 8009242:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009246:	d8e5      	bhi.n	8009214 <__multiply+0x10c>
 8009248:	9a01      	ldr	r2, [sp, #4]
 800924a:	50a9      	str	r1, [r5, r2]
 800924c:	3504      	adds	r5, #4
 800924e:	e799      	b.n	8009184 <__multiply+0x7c>
 8009250:	3e01      	subs	r6, #1
 8009252:	e79b      	b.n	800918c <__multiply+0x84>
 8009254:	0800c357 	.word	0x0800c357
 8009258:	0800c368 	.word	0x0800c368

0800925c <__pow5mult>:
 800925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009260:	4615      	mov	r5, r2
 8009262:	f012 0203 	ands.w	r2, r2, #3
 8009266:	4606      	mov	r6, r0
 8009268:	460f      	mov	r7, r1
 800926a:	d007      	beq.n	800927c <__pow5mult+0x20>
 800926c:	4c25      	ldr	r4, [pc, #148]	; (8009304 <__pow5mult+0xa8>)
 800926e:	3a01      	subs	r2, #1
 8009270:	2300      	movs	r3, #0
 8009272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009276:	f7ff fe53 	bl	8008f20 <__multadd>
 800927a:	4607      	mov	r7, r0
 800927c:	10ad      	asrs	r5, r5, #2
 800927e:	d03d      	beq.n	80092fc <__pow5mult+0xa0>
 8009280:	69f4      	ldr	r4, [r6, #28]
 8009282:	b97c      	cbnz	r4, 80092a4 <__pow5mult+0x48>
 8009284:	2010      	movs	r0, #16
 8009286:	f7fd fda5 	bl	8006dd4 <malloc>
 800928a:	4602      	mov	r2, r0
 800928c:	61f0      	str	r0, [r6, #28]
 800928e:	b928      	cbnz	r0, 800929c <__pow5mult+0x40>
 8009290:	4b1d      	ldr	r3, [pc, #116]	; (8009308 <__pow5mult+0xac>)
 8009292:	481e      	ldr	r0, [pc, #120]	; (800930c <__pow5mult+0xb0>)
 8009294:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009298:	f001 fb56 	bl	800a948 <__assert_func>
 800929c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092a0:	6004      	str	r4, [r0, #0]
 80092a2:	60c4      	str	r4, [r0, #12]
 80092a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80092a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092ac:	b94c      	cbnz	r4, 80092c2 <__pow5mult+0x66>
 80092ae:	f240 2171 	movw	r1, #625	; 0x271
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ff12 	bl	80090dc <__i2b>
 80092b8:	2300      	movs	r3, #0
 80092ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80092be:	4604      	mov	r4, r0
 80092c0:	6003      	str	r3, [r0, #0]
 80092c2:	f04f 0900 	mov.w	r9, #0
 80092c6:	07eb      	lsls	r3, r5, #31
 80092c8:	d50a      	bpl.n	80092e0 <__pow5mult+0x84>
 80092ca:	4639      	mov	r1, r7
 80092cc:	4622      	mov	r2, r4
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7ff ff1a 	bl	8009108 <__multiply>
 80092d4:	4639      	mov	r1, r7
 80092d6:	4680      	mov	r8, r0
 80092d8:	4630      	mov	r0, r6
 80092da:	f7ff fdff 	bl	8008edc <_Bfree>
 80092de:	4647      	mov	r7, r8
 80092e0:	106d      	asrs	r5, r5, #1
 80092e2:	d00b      	beq.n	80092fc <__pow5mult+0xa0>
 80092e4:	6820      	ldr	r0, [r4, #0]
 80092e6:	b938      	cbnz	r0, 80092f8 <__pow5mult+0x9c>
 80092e8:	4622      	mov	r2, r4
 80092ea:	4621      	mov	r1, r4
 80092ec:	4630      	mov	r0, r6
 80092ee:	f7ff ff0b 	bl	8009108 <__multiply>
 80092f2:	6020      	str	r0, [r4, #0]
 80092f4:	f8c0 9000 	str.w	r9, [r0]
 80092f8:	4604      	mov	r4, r0
 80092fa:	e7e4      	b.n	80092c6 <__pow5mult+0x6a>
 80092fc:	4638      	mov	r0, r7
 80092fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009302:	bf00      	nop
 8009304:	0800c4b8 	.word	0x0800c4b8
 8009308:	0800c2e8 	.word	0x0800c2e8
 800930c:	0800c368 	.word	0x0800c368

08009310 <__lshift>:
 8009310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009314:	460c      	mov	r4, r1
 8009316:	6849      	ldr	r1, [r1, #4]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800931e:	68a3      	ldr	r3, [r4, #8]
 8009320:	4607      	mov	r7, r0
 8009322:	4691      	mov	r9, r2
 8009324:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009328:	f108 0601 	add.w	r6, r8, #1
 800932c:	42b3      	cmp	r3, r6
 800932e:	db0b      	blt.n	8009348 <__lshift+0x38>
 8009330:	4638      	mov	r0, r7
 8009332:	f7ff fd93 	bl	8008e5c <_Balloc>
 8009336:	4605      	mov	r5, r0
 8009338:	b948      	cbnz	r0, 800934e <__lshift+0x3e>
 800933a:	4602      	mov	r2, r0
 800933c:	4b28      	ldr	r3, [pc, #160]	; (80093e0 <__lshift+0xd0>)
 800933e:	4829      	ldr	r0, [pc, #164]	; (80093e4 <__lshift+0xd4>)
 8009340:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009344:	f001 fb00 	bl	800a948 <__assert_func>
 8009348:	3101      	adds	r1, #1
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	e7ee      	b.n	800932c <__lshift+0x1c>
 800934e:	2300      	movs	r3, #0
 8009350:	f100 0114 	add.w	r1, r0, #20
 8009354:	f100 0210 	add.w	r2, r0, #16
 8009358:	4618      	mov	r0, r3
 800935a:	4553      	cmp	r3, sl
 800935c:	db33      	blt.n	80093c6 <__lshift+0xb6>
 800935e:	6920      	ldr	r0, [r4, #16]
 8009360:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009364:	f104 0314 	add.w	r3, r4, #20
 8009368:	f019 091f 	ands.w	r9, r9, #31
 800936c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009370:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009374:	d02b      	beq.n	80093ce <__lshift+0xbe>
 8009376:	f1c9 0e20 	rsb	lr, r9, #32
 800937a:	468a      	mov	sl, r1
 800937c:	2200      	movs	r2, #0
 800937e:	6818      	ldr	r0, [r3, #0]
 8009380:	fa00 f009 	lsl.w	r0, r0, r9
 8009384:	4310      	orrs	r0, r2
 8009386:	f84a 0b04 	str.w	r0, [sl], #4
 800938a:	f853 2b04 	ldr.w	r2, [r3], #4
 800938e:	459c      	cmp	ip, r3
 8009390:	fa22 f20e 	lsr.w	r2, r2, lr
 8009394:	d8f3      	bhi.n	800937e <__lshift+0x6e>
 8009396:	ebac 0304 	sub.w	r3, ip, r4
 800939a:	3b15      	subs	r3, #21
 800939c:	f023 0303 	bic.w	r3, r3, #3
 80093a0:	3304      	adds	r3, #4
 80093a2:	f104 0015 	add.w	r0, r4, #21
 80093a6:	4584      	cmp	ip, r0
 80093a8:	bf38      	it	cc
 80093aa:	2304      	movcc	r3, #4
 80093ac:	50ca      	str	r2, [r1, r3]
 80093ae:	b10a      	cbz	r2, 80093b4 <__lshift+0xa4>
 80093b0:	f108 0602 	add.w	r6, r8, #2
 80093b4:	3e01      	subs	r6, #1
 80093b6:	4638      	mov	r0, r7
 80093b8:	612e      	str	r6, [r5, #16]
 80093ba:	4621      	mov	r1, r4
 80093bc:	f7ff fd8e 	bl	8008edc <_Bfree>
 80093c0:	4628      	mov	r0, r5
 80093c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80093ca:	3301      	adds	r3, #1
 80093cc:	e7c5      	b.n	800935a <__lshift+0x4a>
 80093ce:	3904      	subs	r1, #4
 80093d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80093d8:	459c      	cmp	ip, r3
 80093da:	d8f9      	bhi.n	80093d0 <__lshift+0xc0>
 80093dc:	e7ea      	b.n	80093b4 <__lshift+0xa4>
 80093de:	bf00      	nop
 80093e0:	0800c357 	.word	0x0800c357
 80093e4:	0800c368 	.word	0x0800c368

080093e8 <__mcmp>:
 80093e8:	b530      	push	{r4, r5, lr}
 80093ea:	6902      	ldr	r2, [r0, #16]
 80093ec:	690c      	ldr	r4, [r1, #16]
 80093ee:	1b12      	subs	r2, r2, r4
 80093f0:	d10e      	bne.n	8009410 <__mcmp+0x28>
 80093f2:	f100 0314 	add.w	r3, r0, #20
 80093f6:	3114      	adds	r1, #20
 80093f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009400:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009404:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009408:	42a5      	cmp	r5, r4
 800940a:	d003      	beq.n	8009414 <__mcmp+0x2c>
 800940c:	d305      	bcc.n	800941a <__mcmp+0x32>
 800940e:	2201      	movs	r2, #1
 8009410:	4610      	mov	r0, r2
 8009412:	bd30      	pop	{r4, r5, pc}
 8009414:	4283      	cmp	r3, r0
 8009416:	d3f3      	bcc.n	8009400 <__mcmp+0x18>
 8009418:	e7fa      	b.n	8009410 <__mcmp+0x28>
 800941a:	f04f 32ff 	mov.w	r2, #4294967295
 800941e:	e7f7      	b.n	8009410 <__mcmp+0x28>

08009420 <__mdiff>:
 8009420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	460c      	mov	r4, r1
 8009426:	4606      	mov	r6, r0
 8009428:	4611      	mov	r1, r2
 800942a:	4620      	mov	r0, r4
 800942c:	4690      	mov	r8, r2
 800942e:	f7ff ffdb 	bl	80093e8 <__mcmp>
 8009432:	1e05      	subs	r5, r0, #0
 8009434:	d110      	bne.n	8009458 <__mdiff+0x38>
 8009436:	4629      	mov	r1, r5
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff fd0f 	bl	8008e5c <_Balloc>
 800943e:	b930      	cbnz	r0, 800944e <__mdiff+0x2e>
 8009440:	4b3a      	ldr	r3, [pc, #232]	; (800952c <__mdiff+0x10c>)
 8009442:	4602      	mov	r2, r0
 8009444:	f240 2137 	movw	r1, #567	; 0x237
 8009448:	4839      	ldr	r0, [pc, #228]	; (8009530 <__mdiff+0x110>)
 800944a:	f001 fa7d 	bl	800a948 <__assert_func>
 800944e:	2301      	movs	r3, #1
 8009450:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009458:	bfa4      	itt	ge
 800945a:	4643      	movge	r3, r8
 800945c:	46a0      	movge	r8, r4
 800945e:	4630      	mov	r0, r6
 8009460:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009464:	bfa6      	itte	ge
 8009466:	461c      	movge	r4, r3
 8009468:	2500      	movge	r5, #0
 800946a:	2501      	movlt	r5, #1
 800946c:	f7ff fcf6 	bl	8008e5c <_Balloc>
 8009470:	b920      	cbnz	r0, 800947c <__mdiff+0x5c>
 8009472:	4b2e      	ldr	r3, [pc, #184]	; (800952c <__mdiff+0x10c>)
 8009474:	4602      	mov	r2, r0
 8009476:	f240 2145 	movw	r1, #581	; 0x245
 800947a:	e7e5      	b.n	8009448 <__mdiff+0x28>
 800947c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009480:	6926      	ldr	r6, [r4, #16]
 8009482:	60c5      	str	r5, [r0, #12]
 8009484:	f104 0914 	add.w	r9, r4, #20
 8009488:	f108 0514 	add.w	r5, r8, #20
 800948c:	f100 0e14 	add.w	lr, r0, #20
 8009490:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009494:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009498:	f108 0210 	add.w	r2, r8, #16
 800949c:	46f2      	mov	sl, lr
 800949e:	2100      	movs	r1, #0
 80094a0:	f859 3b04 	ldr.w	r3, [r9], #4
 80094a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094a8:	fa11 f88b 	uxtah	r8, r1, fp
 80094ac:	b299      	uxth	r1, r3
 80094ae:	0c1b      	lsrs	r3, r3, #16
 80094b0:	eba8 0801 	sub.w	r8, r8, r1
 80094b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094bc:	fa1f f888 	uxth.w	r8, r8
 80094c0:	1419      	asrs	r1, r3, #16
 80094c2:	454e      	cmp	r6, r9
 80094c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094c8:	f84a 3b04 	str.w	r3, [sl], #4
 80094cc:	d8e8      	bhi.n	80094a0 <__mdiff+0x80>
 80094ce:	1b33      	subs	r3, r6, r4
 80094d0:	3b15      	subs	r3, #21
 80094d2:	f023 0303 	bic.w	r3, r3, #3
 80094d6:	3304      	adds	r3, #4
 80094d8:	3415      	adds	r4, #21
 80094da:	42a6      	cmp	r6, r4
 80094dc:	bf38      	it	cc
 80094de:	2304      	movcc	r3, #4
 80094e0:	441d      	add	r5, r3
 80094e2:	4473      	add	r3, lr
 80094e4:	469e      	mov	lr, r3
 80094e6:	462e      	mov	r6, r5
 80094e8:	4566      	cmp	r6, ip
 80094ea:	d30e      	bcc.n	800950a <__mdiff+0xea>
 80094ec:	f10c 0203 	add.w	r2, ip, #3
 80094f0:	1b52      	subs	r2, r2, r5
 80094f2:	f022 0203 	bic.w	r2, r2, #3
 80094f6:	3d03      	subs	r5, #3
 80094f8:	45ac      	cmp	ip, r5
 80094fa:	bf38      	it	cc
 80094fc:	2200      	movcc	r2, #0
 80094fe:	4413      	add	r3, r2
 8009500:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009504:	b17a      	cbz	r2, 8009526 <__mdiff+0x106>
 8009506:	6107      	str	r7, [r0, #16]
 8009508:	e7a4      	b.n	8009454 <__mdiff+0x34>
 800950a:	f856 8b04 	ldr.w	r8, [r6], #4
 800950e:	fa11 f288 	uxtah	r2, r1, r8
 8009512:	1414      	asrs	r4, r2, #16
 8009514:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009518:	b292      	uxth	r2, r2
 800951a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800951e:	f84e 2b04 	str.w	r2, [lr], #4
 8009522:	1421      	asrs	r1, r4, #16
 8009524:	e7e0      	b.n	80094e8 <__mdiff+0xc8>
 8009526:	3f01      	subs	r7, #1
 8009528:	e7ea      	b.n	8009500 <__mdiff+0xe0>
 800952a:	bf00      	nop
 800952c:	0800c357 	.word	0x0800c357
 8009530:	0800c368 	.word	0x0800c368

08009534 <__ulp>:
 8009534:	b082      	sub	sp, #8
 8009536:	ed8d 0b00 	vstr	d0, [sp]
 800953a:	9a01      	ldr	r2, [sp, #4]
 800953c:	4b0f      	ldr	r3, [pc, #60]	; (800957c <__ulp+0x48>)
 800953e:	4013      	ands	r3, r2
 8009540:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009544:	2b00      	cmp	r3, #0
 8009546:	dc08      	bgt.n	800955a <__ulp+0x26>
 8009548:	425b      	negs	r3, r3
 800954a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800954e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009552:	da04      	bge.n	800955e <__ulp+0x2a>
 8009554:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009558:	4113      	asrs	r3, r2
 800955a:	2200      	movs	r2, #0
 800955c:	e008      	b.n	8009570 <__ulp+0x3c>
 800955e:	f1a2 0314 	sub.w	r3, r2, #20
 8009562:	2b1e      	cmp	r3, #30
 8009564:	bfda      	itte	le
 8009566:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800956a:	40da      	lsrle	r2, r3
 800956c:	2201      	movgt	r2, #1
 800956e:	2300      	movs	r3, #0
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	ec41 0b10 	vmov	d0, r0, r1
 8009578:	b002      	add	sp, #8
 800957a:	4770      	bx	lr
 800957c:	7ff00000 	.word	0x7ff00000

08009580 <__b2d>:
 8009580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009584:	6906      	ldr	r6, [r0, #16]
 8009586:	f100 0814 	add.w	r8, r0, #20
 800958a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800958e:	1f37      	subs	r7, r6, #4
 8009590:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009594:	4610      	mov	r0, r2
 8009596:	f7ff fd53 	bl	8009040 <__hi0bits>
 800959a:	f1c0 0320 	rsb	r3, r0, #32
 800959e:	280a      	cmp	r0, #10
 80095a0:	600b      	str	r3, [r1, #0]
 80095a2:	491b      	ldr	r1, [pc, #108]	; (8009610 <__b2d+0x90>)
 80095a4:	dc15      	bgt.n	80095d2 <__b2d+0x52>
 80095a6:	f1c0 0c0b 	rsb	ip, r0, #11
 80095aa:	fa22 f30c 	lsr.w	r3, r2, ip
 80095ae:	45b8      	cmp	r8, r7
 80095b0:	ea43 0501 	orr.w	r5, r3, r1
 80095b4:	bf34      	ite	cc
 80095b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80095ba:	2300      	movcs	r3, #0
 80095bc:	3015      	adds	r0, #21
 80095be:	fa02 f000 	lsl.w	r0, r2, r0
 80095c2:	fa23 f30c 	lsr.w	r3, r3, ip
 80095c6:	4303      	orrs	r3, r0
 80095c8:	461c      	mov	r4, r3
 80095ca:	ec45 4b10 	vmov	d0, r4, r5
 80095ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d2:	45b8      	cmp	r8, r7
 80095d4:	bf3a      	itte	cc
 80095d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80095da:	f1a6 0708 	subcc.w	r7, r6, #8
 80095de:	2300      	movcs	r3, #0
 80095e0:	380b      	subs	r0, #11
 80095e2:	d012      	beq.n	800960a <__b2d+0x8a>
 80095e4:	f1c0 0120 	rsb	r1, r0, #32
 80095e8:	fa23 f401 	lsr.w	r4, r3, r1
 80095ec:	4082      	lsls	r2, r0
 80095ee:	4322      	orrs	r2, r4
 80095f0:	4547      	cmp	r7, r8
 80095f2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80095f6:	bf8c      	ite	hi
 80095f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80095fc:	2200      	movls	r2, #0
 80095fe:	4083      	lsls	r3, r0
 8009600:	40ca      	lsrs	r2, r1
 8009602:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009606:	4313      	orrs	r3, r2
 8009608:	e7de      	b.n	80095c8 <__b2d+0x48>
 800960a:	ea42 0501 	orr.w	r5, r2, r1
 800960e:	e7db      	b.n	80095c8 <__b2d+0x48>
 8009610:	3ff00000 	.word	0x3ff00000

08009614 <__d2b>:
 8009614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009618:	460f      	mov	r7, r1
 800961a:	2101      	movs	r1, #1
 800961c:	ec59 8b10 	vmov	r8, r9, d0
 8009620:	4616      	mov	r6, r2
 8009622:	f7ff fc1b 	bl	8008e5c <_Balloc>
 8009626:	4604      	mov	r4, r0
 8009628:	b930      	cbnz	r0, 8009638 <__d2b+0x24>
 800962a:	4602      	mov	r2, r0
 800962c:	4b24      	ldr	r3, [pc, #144]	; (80096c0 <__d2b+0xac>)
 800962e:	4825      	ldr	r0, [pc, #148]	; (80096c4 <__d2b+0xb0>)
 8009630:	f240 310f 	movw	r1, #783	; 0x30f
 8009634:	f001 f988 	bl	800a948 <__assert_func>
 8009638:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800963c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009640:	bb2d      	cbnz	r5, 800968e <__d2b+0x7a>
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	f1b8 0300 	subs.w	r3, r8, #0
 8009648:	d026      	beq.n	8009698 <__d2b+0x84>
 800964a:	4668      	mov	r0, sp
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	f7ff fd17 	bl	8009080 <__lo0bits>
 8009652:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009656:	b1e8      	cbz	r0, 8009694 <__d2b+0x80>
 8009658:	f1c0 0320 	rsb	r3, r0, #32
 800965c:	fa02 f303 	lsl.w	r3, r2, r3
 8009660:	430b      	orrs	r3, r1
 8009662:	40c2      	lsrs	r2, r0
 8009664:	6163      	str	r3, [r4, #20]
 8009666:	9201      	str	r2, [sp, #4]
 8009668:	9b01      	ldr	r3, [sp, #4]
 800966a:	61a3      	str	r3, [r4, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	bf14      	ite	ne
 8009670:	2202      	movne	r2, #2
 8009672:	2201      	moveq	r2, #1
 8009674:	6122      	str	r2, [r4, #16]
 8009676:	b1bd      	cbz	r5, 80096a8 <__d2b+0x94>
 8009678:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800967c:	4405      	add	r5, r0
 800967e:	603d      	str	r5, [r7, #0]
 8009680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009684:	6030      	str	r0, [r6, #0]
 8009686:	4620      	mov	r0, r4
 8009688:	b003      	add	sp, #12
 800968a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800968e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009692:	e7d6      	b.n	8009642 <__d2b+0x2e>
 8009694:	6161      	str	r1, [r4, #20]
 8009696:	e7e7      	b.n	8009668 <__d2b+0x54>
 8009698:	a801      	add	r0, sp, #4
 800969a:	f7ff fcf1 	bl	8009080 <__lo0bits>
 800969e:	9b01      	ldr	r3, [sp, #4]
 80096a0:	6163      	str	r3, [r4, #20]
 80096a2:	3020      	adds	r0, #32
 80096a4:	2201      	movs	r2, #1
 80096a6:	e7e5      	b.n	8009674 <__d2b+0x60>
 80096a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096b0:	6038      	str	r0, [r7, #0]
 80096b2:	6918      	ldr	r0, [r3, #16]
 80096b4:	f7ff fcc4 	bl	8009040 <__hi0bits>
 80096b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096bc:	e7e2      	b.n	8009684 <__d2b+0x70>
 80096be:	bf00      	nop
 80096c0:	0800c357 	.word	0x0800c357
 80096c4:	0800c368 	.word	0x0800c368

080096c8 <__ratio>:
 80096c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	4688      	mov	r8, r1
 80096ce:	4669      	mov	r1, sp
 80096d0:	4681      	mov	r9, r0
 80096d2:	f7ff ff55 	bl	8009580 <__b2d>
 80096d6:	a901      	add	r1, sp, #4
 80096d8:	4640      	mov	r0, r8
 80096da:	ec55 4b10 	vmov	r4, r5, d0
 80096de:	f7ff ff4f 	bl	8009580 <__b2d>
 80096e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80096ea:	eba3 0c02 	sub.w	ip, r3, r2
 80096ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 80096f2:	1a9b      	subs	r3, r3, r2
 80096f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80096f8:	ec51 0b10 	vmov	r0, r1, d0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfd6      	itet	le
 8009700:	460a      	movle	r2, r1
 8009702:	462a      	movgt	r2, r5
 8009704:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009708:	468b      	mov	fp, r1
 800970a:	462f      	mov	r7, r5
 800970c:	bfd4      	ite	le
 800970e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009712:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009716:	4620      	mov	r0, r4
 8009718:	ee10 2a10 	vmov	r2, s0
 800971c:	465b      	mov	r3, fp
 800971e:	4639      	mov	r1, r7
 8009720:	f7f7 f894 	bl	800084c <__aeabi_ddiv>
 8009724:	ec41 0b10 	vmov	d0, r0, r1
 8009728:	b003      	add	sp, #12
 800972a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800972e <__copybits>:
 800972e:	3901      	subs	r1, #1
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	1149      	asrs	r1, r1, #5
 8009734:	6914      	ldr	r4, [r2, #16]
 8009736:	3101      	adds	r1, #1
 8009738:	f102 0314 	add.w	r3, r2, #20
 800973c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009740:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009744:	1f05      	subs	r5, r0, #4
 8009746:	42a3      	cmp	r3, r4
 8009748:	d30c      	bcc.n	8009764 <__copybits+0x36>
 800974a:	1aa3      	subs	r3, r4, r2
 800974c:	3b11      	subs	r3, #17
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	3211      	adds	r2, #17
 8009754:	42a2      	cmp	r2, r4
 8009756:	bf88      	it	hi
 8009758:	2300      	movhi	r3, #0
 800975a:	4418      	add	r0, r3
 800975c:	2300      	movs	r3, #0
 800975e:	4288      	cmp	r0, r1
 8009760:	d305      	bcc.n	800976e <__copybits+0x40>
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	f853 6b04 	ldr.w	r6, [r3], #4
 8009768:	f845 6f04 	str.w	r6, [r5, #4]!
 800976c:	e7eb      	b.n	8009746 <__copybits+0x18>
 800976e:	f840 3b04 	str.w	r3, [r0], #4
 8009772:	e7f4      	b.n	800975e <__copybits+0x30>

08009774 <__any_on>:
 8009774:	f100 0214 	add.w	r2, r0, #20
 8009778:	6900      	ldr	r0, [r0, #16]
 800977a:	114b      	asrs	r3, r1, #5
 800977c:	4298      	cmp	r0, r3
 800977e:	b510      	push	{r4, lr}
 8009780:	db11      	blt.n	80097a6 <__any_on+0x32>
 8009782:	dd0a      	ble.n	800979a <__any_on+0x26>
 8009784:	f011 011f 	ands.w	r1, r1, #31
 8009788:	d007      	beq.n	800979a <__any_on+0x26>
 800978a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800978e:	fa24 f001 	lsr.w	r0, r4, r1
 8009792:	fa00 f101 	lsl.w	r1, r0, r1
 8009796:	428c      	cmp	r4, r1
 8009798:	d10b      	bne.n	80097b2 <__any_on+0x3e>
 800979a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800979e:	4293      	cmp	r3, r2
 80097a0:	d803      	bhi.n	80097aa <__any_on+0x36>
 80097a2:	2000      	movs	r0, #0
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	4603      	mov	r3, r0
 80097a8:	e7f7      	b.n	800979a <__any_on+0x26>
 80097aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097ae:	2900      	cmp	r1, #0
 80097b0:	d0f5      	beq.n	800979e <__any_on+0x2a>
 80097b2:	2001      	movs	r0, #1
 80097b4:	e7f6      	b.n	80097a4 <__any_on+0x30>

080097b6 <sulp>:
 80097b6:	b570      	push	{r4, r5, r6, lr}
 80097b8:	4604      	mov	r4, r0
 80097ba:	460d      	mov	r5, r1
 80097bc:	ec45 4b10 	vmov	d0, r4, r5
 80097c0:	4616      	mov	r6, r2
 80097c2:	f7ff feb7 	bl	8009534 <__ulp>
 80097c6:	ec51 0b10 	vmov	r0, r1, d0
 80097ca:	b17e      	cbz	r6, 80097ec <sulp+0x36>
 80097cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80097d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	dd09      	ble.n	80097ec <sulp+0x36>
 80097d8:	051b      	lsls	r3, r3, #20
 80097da:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80097de:	2400      	movs	r4, #0
 80097e0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80097e4:	4622      	mov	r2, r4
 80097e6:	462b      	mov	r3, r5
 80097e8:	f7f6 ff06 	bl	80005f8 <__aeabi_dmul>
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080097f0 <_strtod_l>:
 80097f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f4:	ed2d 8b02 	vpush	{d8}
 80097f8:	b09b      	sub	sp, #108	; 0x6c
 80097fa:	4604      	mov	r4, r0
 80097fc:	9213      	str	r2, [sp, #76]	; 0x4c
 80097fe:	2200      	movs	r2, #0
 8009800:	9216      	str	r2, [sp, #88]	; 0x58
 8009802:	460d      	mov	r5, r1
 8009804:	f04f 0800 	mov.w	r8, #0
 8009808:	f04f 0900 	mov.w	r9, #0
 800980c:	460a      	mov	r2, r1
 800980e:	9215      	str	r2, [sp, #84]	; 0x54
 8009810:	7811      	ldrb	r1, [r2, #0]
 8009812:	292b      	cmp	r1, #43	; 0x2b
 8009814:	d04c      	beq.n	80098b0 <_strtod_l+0xc0>
 8009816:	d83a      	bhi.n	800988e <_strtod_l+0x9e>
 8009818:	290d      	cmp	r1, #13
 800981a:	d834      	bhi.n	8009886 <_strtod_l+0x96>
 800981c:	2908      	cmp	r1, #8
 800981e:	d834      	bhi.n	800988a <_strtod_l+0x9a>
 8009820:	2900      	cmp	r1, #0
 8009822:	d03d      	beq.n	80098a0 <_strtod_l+0xb0>
 8009824:	2200      	movs	r2, #0
 8009826:	920a      	str	r2, [sp, #40]	; 0x28
 8009828:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800982a:	7832      	ldrb	r2, [r6, #0]
 800982c:	2a30      	cmp	r2, #48	; 0x30
 800982e:	f040 80b4 	bne.w	800999a <_strtod_l+0x1aa>
 8009832:	7872      	ldrb	r2, [r6, #1]
 8009834:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009838:	2a58      	cmp	r2, #88	; 0x58
 800983a:	d170      	bne.n	800991e <_strtod_l+0x12e>
 800983c:	9302      	str	r3, [sp, #8]
 800983e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	ab16      	add	r3, sp, #88	; 0x58
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	4a8e      	ldr	r2, [pc, #568]	; (8009a80 <_strtod_l+0x290>)
 8009848:	ab17      	add	r3, sp, #92	; 0x5c
 800984a:	a915      	add	r1, sp, #84	; 0x54
 800984c:	4620      	mov	r0, r4
 800984e:	f001 f917 	bl	800aa80 <__gethex>
 8009852:	f010 070f 	ands.w	r7, r0, #15
 8009856:	4605      	mov	r5, r0
 8009858:	d005      	beq.n	8009866 <_strtod_l+0x76>
 800985a:	2f06      	cmp	r7, #6
 800985c:	d12a      	bne.n	80098b4 <_strtod_l+0xc4>
 800985e:	3601      	adds	r6, #1
 8009860:	2300      	movs	r3, #0
 8009862:	9615      	str	r6, [sp, #84]	; 0x54
 8009864:	930a      	str	r3, [sp, #40]	; 0x28
 8009866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009868:	2b00      	cmp	r3, #0
 800986a:	f040 857f 	bne.w	800a36c <_strtod_l+0xb7c>
 800986e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009870:	b1db      	cbz	r3, 80098aa <_strtod_l+0xba>
 8009872:	4642      	mov	r2, r8
 8009874:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009878:	ec43 2b10 	vmov	d0, r2, r3
 800987c:	b01b      	add	sp, #108	; 0x6c
 800987e:	ecbd 8b02 	vpop	{d8}
 8009882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009886:	2920      	cmp	r1, #32
 8009888:	d1cc      	bne.n	8009824 <_strtod_l+0x34>
 800988a:	3201      	adds	r2, #1
 800988c:	e7bf      	b.n	800980e <_strtod_l+0x1e>
 800988e:	292d      	cmp	r1, #45	; 0x2d
 8009890:	d1c8      	bne.n	8009824 <_strtod_l+0x34>
 8009892:	2101      	movs	r1, #1
 8009894:	910a      	str	r1, [sp, #40]	; 0x28
 8009896:	1c51      	adds	r1, r2, #1
 8009898:	9115      	str	r1, [sp, #84]	; 0x54
 800989a:	7852      	ldrb	r2, [r2, #1]
 800989c:	2a00      	cmp	r2, #0
 800989e:	d1c3      	bne.n	8009828 <_strtod_l+0x38>
 80098a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80098a2:	9515      	str	r5, [sp, #84]	; 0x54
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f040 855f 	bne.w	800a368 <_strtod_l+0xb78>
 80098aa:	4642      	mov	r2, r8
 80098ac:	464b      	mov	r3, r9
 80098ae:	e7e3      	b.n	8009878 <_strtod_l+0x88>
 80098b0:	2100      	movs	r1, #0
 80098b2:	e7ef      	b.n	8009894 <_strtod_l+0xa4>
 80098b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80098b6:	b13a      	cbz	r2, 80098c8 <_strtod_l+0xd8>
 80098b8:	2135      	movs	r1, #53	; 0x35
 80098ba:	a818      	add	r0, sp, #96	; 0x60
 80098bc:	f7ff ff37 	bl	800972e <__copybits>
 80098c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098c2:	4620      	mov	r0, r4
 80098c4:	f7ff fb0a 	bl	8008edc <_Bfree>
 80098c8:	3f01      	subs	r7, #1
 80098ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098cc:	2f04      	cmp	r7, #4
 80098ce:	d806      	bhi.n	80098de <_strtod_l+0xee>
 80098d0:	e8df f007 	tbb	[pc, r7]
 80098d4:	201d0314 	.word	0x201d0314
 80098d8:	14          	.byte	0x14
 80098d9:	00          	.byte	0x00
 80098da:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80098de:	05e9      	lsls	r1, r5, #23
 80098e0:	bf48      	it	mi
 80098e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80098e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098ea:	0d1b      	lsrs	r3, r3, #20
 80098ec:	051b      	lsls	r3, r3, #20
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1b9      	bne.n	8009866 <_strtod_l+0x76>
 80098f2:	f7fe fba1 	bl	8008038 <__errno>
 80098f6:	2322      	movs	r3, #34	; 0x22
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	e7b4      	b.n	8009866 <_strtod_l+0x76>
 80098fc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009900:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009904:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009908:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800990c:	e7e7      	b.n	80098de <_strtod_l+0xee>
 800990e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009a88 <_strtod_l+0x298>
 8009912:	e7e4      	b.n	80098de <_strtod_l+0xee>
 8009914:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009918:	f04f 38ff 	mov.w	r8, #4294967295
 800991c:	e7df      	b.n	80098de <_strtod_l+0xee>
 800991e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	9215      	str	r2, [sp, #84]	; 0x54
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	2b30      	cmp	r3, #48	; 0x30
 8009928:	d0f9      	beq.n	800991e <_strtod_l+0x12e>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d09b      	beq.n	8009866 <_strtod_l+0x76>
 800992e:	2301      	movs	r3, #1
 8009930:	f04f 0a00 	mov.w	sl, #0
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009938:	930b      	str	r3, [sp, #44]	; 0x2c
 800993a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800993e:	46d3      	mov	fp, sl
 8009940:	220a      	movs	r2, #10
 8009942:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009944:	7806      	ldrb	r6, [r0, #0]
 8009946:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800994a:	b2d9      	uxtb	r1, r3
 800994c:	2909      	cmp	r1, #9
 800994e:	d926      	bls.n	800999e <_strtod_l+0x1ae>
 8009950:	494c      	ldr	r1, [pc, #304]	; (8009a84 <_strtod_l+0x294>)
 8009952:	2201      	movs	r2, #1
 8009954:	f000 ffe6 	bl	800a924 <strncmp>
 8009958:	2800      	cmp	r0, #0
 800995a:	d030      	beq.n	80099be <_strtod_l+0x1ce>
 800995c:	2000      	movs	r0, #0
 800995e:	4632      	mov	r2, r6
 8009960:	9005      	str	r0, [sp, #20]
 8009962:	465e      	mov	r6, fp
 8009964:	4603      	mov	r3, r0
 8009966:	2a65      	cmp	r2, #101	; 0x65
 8009968:	d001      	beq.n	800996e <_strtod_l+0x17e>
 800996a:	2a45      	cmp	r2, #69	; 0x45
 800996c:	d113      	bne.n	8009996 <_strtod_l+0x1a6>
 800996e:	b91e      	cbnz	r6, 8009978 <_strtod_l+0x188>
 8009970:	9a04      	ldr	r2, [sp, #16]
 8009972:	4302      	orrs	r2, r0
 8009974:	d094      	beq.n	80098a0 <_strtod_l+0xb0>
 8009976:	2600      	movs	r6, #0
 8009978:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800997a:	1c6a      	adds	r2, r5, #1
 800997c:	9215      	str	r2, [sp, #84]	; 0x54
 800997e:	786a      	ldrb	r2, [r5, #1]
 8009980:	2a2b      	cmp	r2, #43	; 0x2b
 8009982:	d074      	beq.n	8009a6e <_strtod_l+0x27e>
 8009984:	2a2d      	cmp	r2, #45	; 0x2d
 8009986:	d078      	beq.n	8009a7a <_strtod_l+0x28a>
 8009988:	f04f 0c00 	mov.w	ip, #0
 800998c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009990:	2909      	cmp	r1, #9
 8009992:	d97f      	bls.n	8009a94 <_strtod_l+0x2a4>
 8009994:	9515      	str	r5, [sp, #84]	; 0x54
 8009996:	2700      	movs	r7, #0
 8009998:	e09e      	b.n	8009ad8 <_strtod_l+0x2e8>
 800999a:	2300      	movs	r3, #0
 800999c:	e7c8      	b.n	8009930 <_strtod_l+0x140>
 800999e:	f1bb 0f08 	cmp.w	fp, #8
 80099a2:	bfd8      	it	le
 80099a4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80099a6:	f100 0001 	add.w	r0, r0, #1
 80099aa:	bfda      	itte	le
 80099ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80099b0:	9309      	strle	r3, [sp, #36]	; 0x24
 80099b2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80099b6:	f10b 0b01 	add.w	fp, fp, #1
 80099ba:	9015      	str	r0, [sp, #84]	; 0x54
 80099bc:	e7c1      	b.n	8009942 <_strtod_l+0x152>
 80099be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	9215      	str	r2, [sp, #84]	; 0x54
 80099c4:	785a      	ldrb	r2, [r3, #1]
 80099c6:	f1bb 0f00 	cmp.w	fp, #0
 80099ca:	d037      	beq.n	8009a3c <_strtod_l+0x24c>
 80099cc:	9005      	str	r0, [sp, #20]
 80099ce:	465e      	mov	r6, fp
 80099d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80099d4:	2b09      	cmp	r3, #9
 80099d6:	d912      	bls.n	80099fe <_strtod_l+0x20e>
 80099d8:	2301      	movs	r3, #1
 80099da:	e7c4      	b.n	8009966 <_strtod_l+0x176>
 80099dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099de:	1c5a      	adds	r2, r3, #1
 80099e0:	9215      	str	r2, [sp, #84]	; 0x54
 80099e2:	785a      	ldrb	r2, [r3, #1]
 80099e4:	3001      	adds	r0, #1
 80099e6:	2a30      	cmp	r2, #48	; 0x30
 80099e8:	d0f8      	beq.n	80099dc <_strtod_l+0x1ec>
 80099ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	f200 84c1 	bhi.w	800a376 <_strtod_l+0xb86>
 80099f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80099f6:	9005      	str	r0, [sp, #20]
 80099f8:	2000      	movs	r0, #0
 80099fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80099fc:	4606      	mov	r6, r0
 80099fe:	3a30      	subs	r2, #48	; 0x30
 8009a00:	f100 0301 	add.w	r3, r0, #1
 8009a04:	d014      	beq.n	8009a30 <_strtod_l+0x240>
 8009a06:	9905      	ldr	r1, [sp, #20]
 8009a08:	4419      	add	r1, r3
 8009a0a:	9105      	str	r1, [sp, #20]
 8009a0c:	4633      	mov	r3, r6
 8009a0e:	eb00 0c06 	add.w	ip, r0, r6
 8009a12:	210a      	movs	r1, #10
 8009a14:	4563      	cmp	r3, ip
 8009a16:	d113      	bne.n	8009a40 <_strtod_l+0x250>
 8009a18:	1833      	adds	r3, r6, r0
 8009a1a:	2b08      	cmp	r3, #8
 8009a1c:	f106 0601 	add.w	r6, r6, #1
 8009a20:	4406      	add	r6, r0
 8009a22:	dc1a      	bgt.n	8009a5a <_strtod_l+0x26a>
 8009a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a26:	230a      	movs	r3, #10
 8009a28:	fb03 2301 	mla	r3, r3, r1, r2
 8009a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a32:	1c51      	adds	r1, r2, #1
 8009a34:	9115      	str	r1, [sp, #84]	; 0x54
 8009a36:	7852      	ldrb	r2, [r2, #1]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	e7c9      	b.n	80099d0 <_strtod_l+0x1e0>
 8009a3c:	4658      	mov	r0, fp
 8009a3e:	e7d2      	b.n	80099e6 <_strtod_l+0x1f6>
 8009a40:	2b08      	cmp	r3, #8
 8009a42:	f103 0301 	add.w	r3, r3, #1
 8009a46:	dc03      	bgt.n	8009a50 <_strtod_l+0x260>
 8009a48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a4a:	434f      	muls	r7, r1
 8009a4c:	9709      	str	r7, [sp, #36]	; 0x24
 8009a4e:	e7e1      	b.n	8009a14 <_strtod_l+0x224>
 8009a50:	2b10      	cmp	r3, #16
 8009a52:	bfd8      	it	le
 8009a54:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009a58:	e7dc      	b.n	8009a14 <_strtod_l+0x224>
 8009a5a:	2e10      	cmp	r6, #16
 8009a5c:	bfdc      	itt	le
 8009a5e:	230a      	movle	r3, #10
 8009a60:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009a64:	e7e3      	b.n	8009a2e <_strtod_l+0x23e>
 8009a66:	2300      	movs	r3, #0
 8009a68:	9305      	str	r3, [sp, #20]
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e780      	b.n	8009970 <_strtod_l+0x180>
 8009a6e:	f04f 0c00 	mov.w	ip, #0
 8009a72:	1caa      	adds	r2, r5, #2
 8009a74:	9215      	str	r2, [sp, #84]	; 0x54
 8009a76:	78aa      	ldrb	r2, [r5, #2]
 8009a78:	e788      	b.n	800998c <_strtod_l+0x19c>
 8009a7a:	f04f 0c01 	mov.w	ip, #1
 8009a7e:	e7f8      	b.n	8009a72 <_strtod_l+0x282>
 8009a80:	0800c4c4 	.word	0x0800c4c4
 8009a84:	0800bea4 	.word	0x0800bea4
 8009a88:	7ff00000 	.word	0x7ff00000
 8009a8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a8e:	1c51      	adds	r1, r2, #1
 8009a90:	9115      	str	r1, [sp, #84]	; 0x54
 8009a92:	7852      	ldrb	r2, [r2, #1]
 8009a94:	2a30      	cmp	r2, #48	; 0x30
 8009a96:	d0f9      	beq.n	8009a8c <_strtod_l+0x29c>
 8009a98:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a9c:	2908      	cmp	r1, #8
 8009a9e:	f63f af7a 	bhi.w	8009996 <_strtod_l+0x1a6>
 8009aa2:	3a30      	subs	r2, #48	; 0x30
 8009aa4:	9208      	str	r2, [sp, #32]
 8009aa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009aa8:	920c      	str	r2, [sp, #48]	; 0x30
 8009aaa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009aac:	1c57      	adds	r7, r2, #1
 8009aae:	9715      	str	r7, [sp, #84]	; 0x54
 8009ab0:	7852      	ldrb	r2, [r2, #1]
 8009ab2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009ab6:	f1be 0f09 	cmp.w	lr, #9
 8009aba:	d938      	bls.n	8009b2e <_strtod_l+0x33e>
 8009abc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009abe:	1a7f      	subs	r7, r7, r1
 8009ac0:	2f08      	cmp	r7, #8
 8009ac2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009ac6:	dc03      	bgt.n	8009ad0 <_strtod_l+0x2e0>
 8009ac8:	9908      	ldr	r1, [sp, #32]
 8009aca:	428f      	cmp	r7, r1
 8009acc:	bfa8      	it	ge
 8009ace:	460f      	movge	r7, r1
 8009ad0:	f1bc 0f00 	cmp.w	ip, #0
 8009ad4:	d000      	beq.n	8009ad8 <_strtod_l+0x2e8>
 8009ad6:	427f      	negs	r7, r7
 8009ad8:	2e00      	cmp	r6, #0
 8009ada:	d14f      	bne.n	8009b7c <_strtod_l+0x38c>
 8009adc:	9904      	ldr	r1, [sp, #16]
 8009ade:	4301      	orrs	r1, r0
 8009ae0:	f47f aec1 	bne.w	8009866 <_strtod_l+0x76>
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f47f aedb 	bne.w	80098a0 <_strtod_l+0xb0>
 8009aea:	2a69      	cmp	r2, #105	; 0x69
 8009aec:	d029      	beq.n	8009b42 <_strtod_l+0x352>
 8009aee:	dc26      	bgt.n	8009b3e <_strtod_l+0x34e>
 8009af0:	2a49      	cmp	r2, #73	; 0x49
 8009af2:	d026      	beq.n	8009b42 <_strtod_l+0x352>
 8009af4:	2a4e      	cmp	r2, #78	; 0x4e
 8009af6:	f47f aed3 	bne.w	80098a0 <_strtod_l+0xb0>
 8009afa:	499b      	ldr	r1, [pc, #620]	; (8009d68 <_strtod_l+0x578>)
 8009afc:	a815      	add	r0, sp, #84	; 0x54
 8009afe:	f001 f9ff 	bl	800af00 <__match>
 8009b02:	2800      	cmp	r0, #0
 8009b04:	f43f aecc 	beq.w	80098a0 <_strtod_l+0xb0>
 8009b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	2b28      	cmp	r3, #40	; 0x28
 8009b0e:	d12f      	bne.n	8009b70 <_strtod_l+0x380>
 8009b10:	4996      	ldr	r1, [pc, #600]	; (8009d6c <_strtod_l+0x57c>)
 8009b12:	aa18      	add	r2, sp, #96	; 0x60
 8009b14:	a815      	add	r0, sp, #84	; 0x54
 8009b16:	f001 fa07 	bl	800af28 <__hexnan>
 8009b1a:	2805      	cmp	r0, #5
 8009b1c:	d128      	bne.n	8009b70 <_strtod_l+0x380>
 8009b1e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b20:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009b28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009b2c:	e69b      	b.n	8009866 <_strtod_l+0x76>
 8009b2e:	9f08      	ldr	r7, [sp, #32]
 8009b30:	210a      	movs	r1, #10
 8009b32:	fb01 2107 	mla	r1, r1, r7, r2
 8009b36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009b3a:	9208      	str	r2, [sp, #32]
 8009b3c:	e7b5      	b.n	8009aaa <_strtod_l+0x2ba>
 8009b3e:	2a6e      	cmp	r2, #110	; 0x6e
 8009b40:	e7d9      	b.n	8009af6 <_strtod_l+0x306>
 8009b42:	498b      	ldr	r1, [pc, #556]	; (8009d70 <_strtod_l+0x580>)
 8009b44:	a815      	add	r0, sp, #84	; 0x54
 8009b46:	f001 f9db 	bl	800af00 <__match>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	f43f aea8 	beq.w	80098a0 <_strtod_l+0xb0>
 8009b50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b52:	4988      	ldr	r1, [pc, #544]	; (8009d74 <_strtod_l+0x584>)
 8009b54:	3b01      	subs	r3, #1
 8009b56:	a815      	add	r0, sp, #84	; 0x54
 8009b58:	9315      	str	r3, [sp, #84]	; 0x54
 8009b5a:	f001 f9d1 	bl	800af00 <__match>
 8009b5e:	b910      	cbnz	r0, 8009b66 <_strtod_l+0x376>
 8009b60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b62:	3301      	adds	r3, #1
 8009b64:	9315      	str	r3, [sp, #84]	; 0x54
 8009b66:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009d84 <_strtod_l+0x594>
 8009b6a:	f04f 0800 	mov.w	r8, #0
 8009b6e:	e67a      	b.n	8009866 <_strtod_l+0x76>
 8009b70:	4881      	ldr	r0, [pc, #516]	; (8009d78 <_strtod_l+0x588>)
 8009b72:	f7fc ff65 	bl	8006a40 <nan>
 8009b76:	ec59 8b10 	vmov	r8, r9, d0
 8009b7a:	e674      	b.n	8009866 <_strtod_l+0x76>
 8009b7c:	9b05      	ldr	r3, [sp, #20]
 8009b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b80:	1afb      	subs	r3, r7, r3
 8009b82:	f1bb 0f00 	cmp.w	fp, #0
 8009b86:	bf08      	it	eq
 8009b88:	46b3      	moveq	fp, r6
 8009b8a:	2e10      	cmp	r6, #16
 8009b8c:	9308      	str	r3, [sp, #32]
 8009b8e:	4635      	mov	r5, r6
 8009b90:	bfa8      	it	ge
 8009b92:	2510      	movge	r5, #16
 8009b94:	f7f6 fcb6 	bl	8000504 <__aeabi_ui2d>
 8009b98:	2e09      	cmp	r6, #9
 8009b9a:	4680      	mov	r8, r0
 8009b9c:	4689      	mov	r9, r1
 8009b9e:	dd13      	ble.n	8009bc8 <_strtod_l+0x3d8>
 8009ba0:	4b76      	ldr	r3, [pc, #472]	; (8009d7c <_strtod_l+0x58c>)
 8009ba2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009ba6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009baa:	f7f6 fd25 	bl	80005f8 <__aeabi_dmul>
 8009bae:	4680      	mov	r8, r0
 8009bb0:	4650      	mov	r0, sl
 8009bb2:	4689      	mov	r9, r1
 8009bb4:	f7f6 fca6 	bl	8000504 <__aeabi_ui2d>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	f7f6 fb64 	bl	800028c <__adddf3>
 8009bc4:	4680      	mov	r8, r0
 8009bc6:	4689      	mov	r9, r1
 8009bc8:	2e0f      	cmp	r6, #15
 8009bca:	dc38      	bgt.n	8009c3e <_strtod_l+0x44e>
 8009bcc:	9b08      	ldr	r3, [sp, #32]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f43f ae49 	beq.w	8009866 <_strtod_l+0x76>
 8009bd4:	dd24      	ble.n	8009c20 <_strtod_l+0x430>
 8009bd6:	2b16      	cmp	r3, #22
 8009bd8:	dc0b      	bgt.n	8009bf2 <_strtod_l+0x402>
 8009bda:	4968      	ldr	r1, [pc, #416]	; (8009d7c <_strtod_l+0x58c>)
 8009bdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009be0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be4:	4642      	mov	r2, r8
 8009be6:	464b      	mov	r3, r9
 8009be8:	f7f6 fd06 	bl	80005f8 <__aeabi_dmul>
 8009bec:	4680      	mov	r8, r0
 8009bee:	4689      	mov	r9, r1
 8009bf0:	e639      	b.n	8009866 <_strtod_l+0x76>
 8009bf2:	9a08      	ldr	r2, [sp, #32]
 8009bf4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	db20      	blt.n	8009c3e <_strtod_l+0x44e>
 8009bfc:	4c5f      	ldr	r4, [pc, #380]	; (8009d7c <_strtod_l+0x58c>)
 8009bfe:	f1c6 060f 	rsb	r6, r6, #15
 8009c02:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009c06:	4642      	mov	r2, r8
 8009c08:	464b      	mov	r3, r9
 8009c0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c0e:	f7f6 fcf3 	bl	80005f8 <__aeabi_dmul>
 8009c12:	9b08      	ldr	r3, [sp, #32]
 8009c14:	1b9e      	subs	r6, r3, r6
 8009c16:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009c1a:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c1e:	e7e3      	b.n	8009be8 <_strtod_l+0x3f8>
 8009c20:	9b08      	ldr	r3, [sp, #32]
 8009c22:	3316      	adds	r3, #22
 8009c24:	db0b      	blt.n	8009c3e <_strtod_l+0x44e>
 8009c26:	9b05      	ldr	r3, [sp, #20]
 8009c28:	1bdf      	subs	r7, r3, r7
 8009c2a:	4b54      	ldr	r3, [pc, #336]	; (8009d7c <_strtod_l+0x58c>)
 8009c2c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009c30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c34:	4640      	mov	r0, r8
 8009c36:	4649      	mov	r1, r9
 8009c38:	f7f6 fe08 	bl	800084c <__aeabi_ddiv>
 8009c3c:	e7d6      	b.n	8009bec <_strtod_l+0x3fc>
 8009c3e:	9b08      	ldr	r3, [sp, #32]
 8009c40:	1b75      	subs	r5, r6, r5
 8009c42:	441d      	add	r5, r3
 8009c44:	2d00      	cmp	r5, #0
 8009c46:	dd70      	ble.n	8009d2a <_strtod_l+0x53a>
 8009c48:	f015 030f 	ands.w	r3, r5, #15
 8009c4c:	d00a      	beq.n	8009c64 <_strtod_l+0x474>
 8009c4e:	494b      	ldr	r1, [pc, #300]	; (8009d7c <_strtod_l+0x58c>)
 8009c50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c54:	4642      	mov	r2, r8
 8009c56:	464b      	mov	r3, r9
 8009c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c5c:	f7f6 fccc 	bl	80005f8 <__aeabi_dmul>
 8009c60:	4680      	mov	r8, r0
 8009c62:	4689      	mov	r9, r1
 8009c64:	f035 050f 	bics.w	r5, r5, #15
 8009c68:	d04d      	beq.n	8009d06 <_strtod_l+0x516>
 8009c6a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009c6e:	dd22      	ble.n	8009cb6 <_strtod_l+0x4c6>
 8009c70:	2500      	movs	r5, #0
 8009c72:	46ab      	mov	fp, r5
 8009c74:	9509      	str	r5, [sp, #36]	; 0x24
 8009c76:	9505      	str	r5, [sp, #20]
 8009c78:	2322      	movs	r3, #34	; 0x22
 8009c7a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009d84 <_strtod_l+0x594>
 8009c7e:	6023      	str	r3, [r4, #0]
 8009c80:	f04f 0800 	mov.w	r8, #0
 8009c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f43f aded 	beq.w	8009866 <_strtod_l+0x76>
 8009c8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f7ff f924 	bl	8008edc <_Bfree>
 8009c94:	9905      	ldr	r1, [sp, #20]
 8009c96:	4620      	mov	r0, r4
 8009c98:	f7ff f920 	bl	8008edc <_Bfree>
 8009c9c:	4659      	mov	r1, fp
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7ff f91c 	bl	8008edc <_Bfree>
 8009ca4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7ff f918 	bl	8008edc <_Bfree>
 8009cac:	4629      	mov	r1, r5
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7ff f914 	bl	8008edc <_Bfree>
 8009cb4:	e5d7      	b.n	8009866 <_strtod_l+0x76>
 8009cb6:	4b32      	ldr	r3, [pc, #200]	; (8009d80 <_strtod_l+0x590>)
 8009cb8:	9304      	str	r3, [sp, #16]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	112d      	asrs	r5, r5, #4
 8009cbe:	4640      	mov	r0, r8
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	469a      	mov	sl, r3
 8009cc4:	2d01      	cmp	r5, #1
 8009cc6:	dc21      	bgt.n	8009d0c <_strtod_l+0x51c>
 8009cc8:	b10b      	cbz	r3, 8009cce <_strtod_l+0x4de>
 8009cca:	4680      	mov	r8, r0
 8009ccc:	4689      	mov	r9, r1
 8009cce:	492c      	ldr	r1, [pc, #176]	; (8009d80 <_strtod_l+0x590>)
 8009cd0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009cd4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009cd8:	4642      	mov	r2, r8
 8009cda:	464b      	mov	r3, r9
 8009cdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce0:	f7f6 fc8a 	bl	80005f8 <__aeabi_dmul>
 8009ce4:	4b27      	ldr	r3, [pc, #156]	; (8009d84 <_strtod_l+0x594>)
 8009ce6:	460a      	mov	r2, r1
 8009ce8:	400b      	ands	r3, r1
 8009cea:	4927      	ldr	r1, [pc, #156]	; (8009d88 <_strtod_l+0x598>)
 8009cec:	428b      	cmp	r3, r1
 8009cee:	4680      	mov	r8, r0
 8009cf0:	d8be      	bhi.n	8009c70 <_strtod_l+0x480>
 8009cf2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009cf6:	428b      	cmp	r3, r1
 8009cf8:	bf86      	itte	hi
 8009cfa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009d8c <_strtod_l+0x59c>
 8009cfe:	f04f 38ff 	movhi.w	r8, #4294967295
 8009d02:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009d06:	2300      	movs	r3, #0
 8009d08:	9304      	str	r3, [sp, #16]
 8009d0a:	e07b      	b.n	8009e04 <_strtod_l+0x614>
 8009d0c:	07ea      	lsls	r2, r5, #31
 8009d0e:	d505      	bpl.n	8009d1c <_strtod_l+0x52c>
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d16:	f7f6 fc6f 	bl	80005f8 <__aeabi_dmul>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	9a04      	ldr	r2, [sp, #16]
 8009d1e:	3208      	adds	r2, #8
 8009d20:	f10a 0a01 	add.w	sl, sl, #1
 8009d24:	106d      	asrs	r5, r5, #1
 8009d26:	9204      	str	r2, [sp, #16]
 8009d28:	e7cc      	b.n	8009cc4 <_strtod_l+0x4d4>
 8009d2a:	d0ec      	beq.n	8009d06 <_strtod_l+0x516>
 8009d2c:	426d      	negs	r5, r5
 8009d2e:	f015 020f 	ands.w	r2, r5, #15
 8009d32:	d00a      	beq.n	8009d4a <_strtod_l+0x55a>
 8009d34:	4b11      	ldr	r3, [pc, #68]	; (8009d7c <_strtod_l+0x58c>)
 8009d36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d3a:	4640      	mov	r0, r8
 8009d3c:	4649      	mov	r1, r9
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fd83 	bl	800084c <__aeabi_ddiv>
 8009d46:	4680      	mov	r8, r0
 8009d48:	4689      	mov	r9, r1
 8009d4a:	112d      	asrs	r5, r5, #4
 8009d4c:	d0db      	beq.n	8009d06 <_strtod_l+0x516>
 8009d4e:	2d1f      	cmp	r5, #31
 8009d50:	dd1e      	ble.n	8009d90 <_strtod_l+0x5a0>
 8009d52:	2500      	movs	r5, #0
 8009d54:	46ab      	mov	fp, r5
 8009d56:	9509      	str	r5, [sp, #36]	; 0x24
 8009d58:	9505      	str	r5, [sp, #20]
 8009d5a:	2322      	movs	r3, #34	; 0x22
 8009d5c:	f04f 0800 	mov.w	r8, #0
 8009d60:	f04f 0900 	mov.w	r9, #0
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	e78d      	b.n	8009c84 <_strtod_l+0x494>
 8009d68:	0800bf01 	.word	0x0800bf01
 8009d6c:	0800c4d8 	.word	0x0800c4d8
 8009d70:	0800c2a9 	.word	0x0800c2a9
 8009d74:	0800c2de 	.word	0x0800c2de
 8009d78:	0800c66d 	.word	0x0800c66d
 8009d7c:	0800c3f0 	.word	0x0800c3f0
 8009d80:	0800c3c8 	.word	0x0800c3c8
 8009d84:	7ff00000 	.word	0x7ff00000
 8009d88:	7ca00000 	.word	0x7ca00000
 8009d8c:	7fefffff 	.word	0x7fefffff
 8009d90:	f015 0310 	ands.w	r3, r5, #16
 8009d94:	bf18      	it	ne
 8009d96:	236a      	movne	r3, #106	; 0x6a
 8009d98:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a13c <_strtod_l+0x94c>
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4649      	mov	r1, r9
 8009da2:	2300      	movs	r3, #0
 8009da4:	07ea      	lsls	r2, r5, #31
 8009da6:	d504      	bpl.n	8009db2 <_strtod_l+0x5c2>
 8009da8:	e9da 2300 	ldrd	r2, r3, [sl]
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	2301      	movs	r3, #1
 8009db2:	106d      	asrs	r5, r5, #1
 8009db4:	f10a 0a08 	add.w	sl, sl, #8
 8009db8:	d1f4      	bne.n	8009da4 <_strtod_l+0x5b4>
 8009dba:	b10b      	cbz	r3, 8009dc0 <_strtod_l+0x5d0>
 8009dbc:	4680      	mov	r8, r0
 8009dbe:	4689      	mov	r9, r1
 8009dc0:	9b04      	ldr	r3, [sp, #16]
 8009dc2:	b1bb      	cbz	r3, 8009df4 <_strtod_l+0x604>
 8009dc4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009dc8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	4649      	mov	r1, r9
 8009dd0:	dd10      	ble.n	8009df4 <_strtod_l+0x604>
 8009dd2:	2b1f      	cmp	r3, #31
 8009dd4:	f340 811e 	ble.w	800a014 <_strtod_l+0x824>
 8009dd8:	2b34      	cmp	r3, #52	; 0x34
 8009dda:	bfde      	ittt	le
 8009ddc:	f04f 33ff 	movle.w	r3, #4294967295
 8009de0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009de4:	4093      	lslle	r3, r2
 8009de6:	f04f 0800 	mov.w	r8, #0
 8009dea:	bfcc      	ite	gt
 8009dec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009df0:	ea03 0901 	andle.w	r9, r3, r1
 8009df4:	2200      	movs	r2, #0
 8009df6:	2300      	movs	r3, #0
 8009df8:	4640      	mov	r0, r8
 8009dfa:	4649      	mov	r1, r9
 8009dfc:	f7f6 fe64 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d1a6      	bne.n	8009d52 <_strtod_l+0x562>
 8009e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e0a:	4633      	mov	r3, r6
 8009e0c:	465a      	mov	r2, fp
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f7ff f8cc 	bl	8008fac <__s2b>
 8009e14:	9009      	str	r0, [sp, #36]	; 0x24
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f43f af2a 	beq.w	8009c70 <_strtod_l+0x480>
 8009e1c:	9a08      	ldr	r2, [sp, #32]
 8009e1e:	9b05      	ldr	r3, [sp, #20]
 8009e20:	2a00      	cmp	r2, #0
 8009e22:	eba3 0307 	sub.w	r3, r3, r7
 8009e26:	bfa8      	it	ge
 8009e28:	2300      	movge	r3, #0
 8009e2a:	930c      	str	r3, [sp, #48]	; 0x30
 8009e2c:	2500      	movs	r5, #0
 8009e2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009e32:	9312      	str	r3, [sp, #72]	; 0x48
 8009e34:	46ab      	mov	fp, r5
 8009e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e38:	4620      	mov	r0, r4
 8009e3a:	6859      	ldr	r1, [r3, #4]
 8009e3c:	f7ff f80e 	bl	8008e5c <_Balloc>
 8009e40:	9005      	str	r0, [sp, #20]
 8009e42:	2800      	cmp	r0, #0
 8009e44:	f43f af18 	beq.w	8009c78 <_strtod_l+0x488>
 8009e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4a:	691a      	ldr	r2, [r3, #16]
 8009e4c:	3202      	adds	r2, #2
 8009e4e:	f103 010c 	add.w	r1, r3, #12
 8009e52:	0092      	lsls	r2, r2, #2
 8009e54:	300c      	adds	r0, #12
 8009e56:	f7fe f924 	bl	80080a2 <memcpy>
 8009e5a:	ec49 8b10 	vmov	d0, r8, r9
 8009e5e:	aa18      	add	r2, sp, #96	; 0x60
 8009e60:	a917      	add	r1, sp, #92	; 0x5c
 8009e62:	4620      	mov	r0, r4
 8009e64:	f7ff fbd6 	bl	8009614 <__d2b>
 8009e68:	ec49 8b18 	vmov	d8, r8, r9
 8009e6c:	9016      	str	r0, [sp, #88]	; 0x58
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	f43f af02 	beq.w	8009c78 <_strtod_l+0x488>
 8009e74:	2101      	movs	r1, #1
 8009e76:	4620      	mov	r0, r4
 8009e78:	f7ff f930 	bl	80090dc <__i2b>
 8009e7c:	4683      	mov	fp, r0
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	f43f aefa 	beq.w	8009c78 <_strtod_l+0x488>
 8009e84:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009e86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e88:	2e00      	cmp	r6, #0
 8009e8a:	bfab      	itete	ge
 8009e8c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009e8e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009e90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009e92:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009e96:	bfac      	ite	ge
 8009e98:	eb06 0a03 	addge.w	sl, r6, r3
 8009e9c:	1b9f      	sublt	r7, r3, r6
 8009e9e:	9b04      	ldr	r3, [sp, #16]
 8009ea0:	1af6      	subs	r6, r6, r3
 8009ea2:	4416      	add	r6, r2
 8009ea4:	4ba0      	ldr	r3, [pc, #640]	; (800a128 <_strtod_l+0x938>)
 8009ea6:	3e01      	subs	r6, #1
 8009ea8:	429e      	cmp	r6, r3
 8009eaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009eae:	f280 80c4 	bge.w	800a03a <_strtod_l+0x84a>
 8009eb2:	1b9b      	subs	r3, r3, r6
 8009eb4:	2b1f      	cmp	r3, #31
 8009eb6:	eba2 0203 	sub.w	r2, r2, r3
 8009eba:	f04f 0101 	mov.w	r1, #1
 8009ebe:	f300 80b0 	bgt.w	800a022 <_strtod_l+0x832>
 8009ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec6:	930e      	str	r3, [sp, #56]	; 0x38
 8009ec8:	2300      	movs	r3, #0
 8009eca:	930d      	str	r3, [sp, #52]	; 0x34
 8009ecc:	eb0a 0602 	add.w	r6, sl, r2
 8009ed0:	9b04      	ldr	r3, [sp, #16]
 8009ed2:	45b2      	cmp	sl, r6
 8009ed4:	4417      	add	r7, r2
 8009ed6:	441f      	add	r7, r3
 8009ed8:	4653      	mov	r3, sl
 8009eda:	bfa8      	it	ge
 8009edc:	4633      	movge	r3, r6
 8009ede:	42bb      	cmp	r3, r7
 8009ee0:	bfa8      	it	ge
 8009ee2:	463b      	movge	r3, r7
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bfc2      	ittt	gt
 8009ee8:	1af6      	subgt	r6, r6, r3
 8009eea:	1aff      	subgt	r7, r7, r3
 8009eec:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	dd17      	ble.n	8009f26 <_strtod_l+0x736>
 8009ef6:	4659      	mov	r1, fp
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4620      	mov	r0, r4
 8009efc:	f7ff f9ae 	bl	800925c <__pow5mult>
 8009f00:	4683      	mov	fp, r0
 8009f02:	2800      	cmp	r0, #0
 8009f04:	f43f aeb8 	beq.w	8009c78 <_strtod_l+0x488>
 8009f08:	4601      	mov	r1, r0
 8009f0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f7ff f8fb 	bl	8009108 <__multiply>
 8009f12:	900b      	str	r0, [sp, #44]	; 0x2c
 8009f14:	2800      	cmp	r0, #0
 8009f16:	f43f aeaf 	beq.w	8009c78 <_strtod_l+0x488>
 8009f1a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	f7fe ffdd 	bl	8008edc <_Bfree>
 8009f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f24:	9316      	str	r3, [sp, #88]	; 0x58
 8009f26:	2e00      	cmp	r6, #0
 8009f28:	f300 808c 	bgt.w	800a044 <_strtod_l+0x854>
 8009f2c:	9b08      	ldr	r3, [sp, #32]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	dd08      	ble.n	8009f44 <_strtod_l+0x754>
 8009f32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f34:	9905      	ldr	r1, [sp, #20]
 8009f36:	4620      	mov	r0, r4
 8009f38:	f7ff f990 	bl	800925c <__pow5mult>
 8009f3c:	9005      	str	r0, [sp, #20]
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f43f ae9a 	beq.w	8009c78 <_strtod_l+0x488>
 8009f44:	2f00      	cmp	r7, #0
 8009f46:	dd08      	ble.n	8009f5a <_strtod_l+0x76a>
 8009f48:	9905      	ldr	r1, [sp, #20]
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f7ff f9df 	bl	8009310 <__lshift>
 8009f52:	9005      	str	r0, [sp, #20]
 8009f54:	2800      	cmp	r0, #0
 8009f56:	f43f ae8f 	beq.w	8009c78 <_strtod_l+0x488>
 8009f5a:	f1ba 0f00 	cmp.w	sl, #0
 8009f5e:	dd08      	ble.n	8009f72 <_strtod_l+0x782>
 8009f60:	4659      	mov	r1, fp
 8009f62:	4652      	mov	r2, sl
 8009f64:	4620      	mov	r0, r4
 8009f66:	f7ff f9d3 	bl	8009310 <__lshift>
 8009f6a:	4683      	mov	fp, r0
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f43f ae83 	beq.w	8009c78 <_strtod_l+0x488>
 8009f72:	9a05      	ldr	r2, [sp, #20]
 8009f74:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f76:	4620      	mov	r0, r4
 8009f78:	f7ff fa52 	bl	8009420 <__mdiff>
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f43f ae7a 	beq.w	8009c78 <_strtod_l+0x488>
 8009f84:	68c3      	ldr	r3, [r0, #12]
 8009f86:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60c3      	str	r3, [r0, #12]
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	f7ff fa2b 	bl	80093e8 <__mcmp>
 8009f92:	2800      	cmp	r0, #0
 8009f94:	da60      	bge.n	800a058 <_strtod_l+0x868>
 8009f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f98:	ea53 0308 	orrs.w	r3, r3, r8
 8009f9c:	f040 8084 	bne.w	800a0a8 <_strtod_l+0x8b8>
 8009fa0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d17f      	bne.n	800a0a8 <_strtod_l+0x8b8>
 8009fa8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fac:	0d1b      	lsrs	r3, r3, #20
 8009fae:	051b      	lsls	r3, r3, #20
 8009fb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009fb4:	d978      	bls.n	800a0a8 <_strtod_l+0x8b8>
 8009fb6:	696b      	ldr	r3, [r5, #20]
 8009fb8:	b913      	cbnz	r3, 8009fc0 <_strtod_l+0x7d0>
 8009fba:	692b      	ldr	r3, [r5, #16]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	dd73      	ble.n	800a0a8 <_strtod_l+0x8b8>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7ff f9a3 	bl	8009310 <__lshift>
 8009fca:	4659      	mov	r1, fp
 8009fcc:	4605      	mov	r5, r0
 8009fce:	f7ff fa0b 	bl	80093e8 <__mcmp>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	dd68      	ble.n	800a0a8 <_strtod_l+0x8b8>
 8009fd6:	9904      	ldr	r1, [sp, #16]
 8009fd8:	4a54      	ldr	r2, [pc, #336]	; (800a12c <_strtod_l+0x93c>)
 8009fda:	464b      	mov	r3, r9
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	f000 8084 	beq.w	800a0ea <_strtod_l+0x8fa>
 8009fe2:	ea02 0109 	and.w	r1, r2, r9
 8009fe6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009fea:	dc7e      	bgt.n	800a0ea <_strtod_l+0x8fa>
 8009fec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ff0:	f77f aeb3 	ble.w	8009d5a <_strtod_l+0x56a>
 8009ff4:	4b4e      	ldr	r3, [pc, #312]	; (800a130 <_strtod_l+0x940>)
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	4b4a      	ldr	r3, [pc, #296]	; (800a12c <_strtod_l+0x93c>)
 800a002:	400b      	ands	r3, r1
 800a004:	4680      	mov	r8, r0
 800a006:	4689      	mov	r9, r1
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f47f ae3f 	bne.w	8009c8c <_strtod_l+0x49c>
 800a00e:	2322      	movs	r3, #34	; 0x22
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	e63b      	b.n	8009c8c <_strtod_l+0x49c>
 800a014:	f04f 32ff 	mov.w	r2, #4294967295
 800a018:	fa02 f303 	lsl.w	r3, r2, r3
 800a01c:	ea03 0808 	and.w	r8, r3, r8
 800a020:	e6e8      	b.n	8009df4 <_strtod_l+0x604>
 800a022:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a026:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a02a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a02e:	36e2      	adds	r6, #226	; 0xe2
 800a030:	fa01 f306 	lsl.w	r3, r1, r6
 800a034:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a038:	e748      	b.n	8009ecc <_strtod_l+0x6dc>
 800a03a:	2100      	movs	r1, #0
 800a03c:	2301      	movs	r3, #1
 800a03e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a042:	e743      	b.n	8009ecc <_strtod_l+0x6dc>
 800a044:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a046:	4632      	mov	r2, r6
 800a048:	4620      	mov	r0, r4
 800a04a:	f7ff f961 	bl	8009310 <__lshift>
 800a04e:	9016      	str	r0, [sp, #88]	; 0x58
 800a050:	2800      	cmp	r0, #0
 800a052:	f47f af6b 	bne.w	8009f2c <_strtod_l+0x73c>
 800a056:	e60f      	b.n	8009c78 <_strtod_l+0x488>
 800a058:	46ca      	mov	sl, r9
 800a05a:	d171      	bne.n	800a140 <_strtod_l+0x950>
 800a05c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a05e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a062:	b352      	cbz	r2, 800a0ba <_strtod_l+0x8ca>
 800a064:	4a33      	ldr	r2, [pc, #204]	; (800a134 <_strtod_l+0x944>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d12a      	bne.n	800a0c0 <_strtod_l+0x8d0>
 800a06a:	9b04      	ldr	r3, [sp, #16]
 800a06c:	4641      	mov	r1, r8
 800a06e:	b1fb      	cbz	r3, 800a0b0 <_strtod_l+0x8c0>
 800a070:	4b2e      	ldr	r3, [pc, #184]	; (800a12c <_strtod_l+0x93c>)
 800a072:	ea09 0303 	and.w	r3, r9, r3
 800a076:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a07a:	f04f 32ff 	mov.w	r2, #4294967295
 800a07e:	d81a      	bhi.n	800a0b6 <_strtod_l+0x8c6>
 800a080:	0d1b      	lsrs	r3, r3, #20
 800a082:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	4299      	cmp	r1, r3
 800a08c:	d118      	bne.n	800a0c0 <_strtod_l+0x8d0>
 800a08e:	4b2a      	ldr	r3, [pc, #168]	; (800a138 <_strtod_l+0x948>)
 800a090:	459a      	cmp	sl, r3
 800a092:	d102      	bne.n	800a09a <_strtod_l+0x8aa>
 800a094:	3101      	adds	r1, #1
 800a096:	f43f adef 	beq.w	8009c78 <_strtod_l+0x488>
 800a09a:	4b24      	ldr	r3, [pc, #144]	; (800a12c <_strtod_l+0x93c>)
 800a09c:	ea0a 0303 	and.w	r3, sl, r3
 800a0a0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a0a4:	f04f 0800 	mov.w	r8, #0
 800a0a8:	9b04      	ldr	r3, [sp, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1a2      	bne.n	8009ff4 <_strtod_l+0x804>
 800a0ae:	e5ed      	b.n	8009c8c <_strtod_l+0x49c>
 800a0b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0b4:	e7e9      	b.n	800a08a <_strtod_l+0x89a>
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	e7e7      	b.n	800a08a <_strtod_l+0x89a>
 800a0ba:	ea53 0308 	orrs.w	r3, r3, r8
 800a0be:	d08a      	beq.n	8009fd6 <_strtod_l+0x7e6>
 800a0c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0c2:	b1e3      	cbz	r3, 800a0fe <_strtod_l+0x90e>
 800a0c4:	ea13 0f0a 	tst.w	r3, sl
 800a0c8:	d0ee      	beq.n	800a0a8 <_strtod_l+0x8b8>
 800a0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0cc:	9a04      	ldr	r2, [sp, #16]
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	b1c3      	cbz	r3, 800a106 <_strtod_l+0x916>
 800a0d4:	f7ff fb6f 	bl	80097b6 <sulp>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	ec51 0b18 	vmov	r0, r1, d8
 800a0e0:	f7f6 f8d4 	bl	800028c <__adddf3>
 800a0e4:	4680      	mov	r8, r0
 800a0e6:	4689      	mov	r9, r1
 800a0e8:	e7de      	b.n	800a0a8 <_strtod_l+0x8b8>
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a0f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a0f4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a0f8:	f04f 38ff 	mov.w	r8, #4294967295
 800a0fc:	e7d4      	b.n	800a0a8 <_strtod_l+0x8b8>
 800a0fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a100:	ea13 0f08 	tst.w	r3, r8
 800a104:	e7e0      	b.n	800a0c8 <_strtod_l+0x8d8>
 800a106:	f7ff fb56 	bl	80097b6 <sulp>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	ec51 0b18 	vmov	r0, r1, d8
 800a112:	f7f6 f8b9 	bl	8000288 <__aeabi_dsub>
 800a116:	2200      	movs	r2, #0
 800a118:	2300      	movs	r3, #0
 800a11a:	4680      	mov	r8, r0
 800a11c:	4689      	mov	r9, r1
 800a11e:	f7f6 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a122:	2800      	cmp	r0, #0
 800a124:	d0c0      	beq.n	800a0a8 <_strtod_l+0x8b8>
 800a126:	e618      	b.n	8009d5a <_strtod_l+0x56a>
 800a128:	fffffc02 	.word	0xfffffc02
 800a12c:	7ff00000 	.word	0x7ff00000
 800a130:	39500000 	.word	0x39500000
 800a134:	000fffff 	.word	0x000fffff
 800a138:	7fefffff 	.word	0x7fefffff
 800a13c:	0800c4f0 	.word	0x0800c4f0
 800a140:	4659      	mov	r1, fp
 800a142:	4628      	mov	r0, r5
 800a144:	f7ff fac0 	bl	80096c8 <__ratio>
 800a148:	ec57 6b10 	vmov	r6, r7, d0
 800a14c:	ee10 0a10 	vmov	r0, s0
 800a150:	2200      	movs	r2, #0
 800a152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a156:	4639      	mov	r1, r7
 800a158:	f7f6 fcca 	bl	8000af0 <__aeabi_dcmple>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d071      	beq.n	800a244 <_strtod_l+0xa54>
 800a160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d17c      	bne.n	800a260 <_strtod_l+0xa70>
 800a166:	f1b8 0f00 	cmp.w	r8, #0
 800a16a:	d15a      	bne.n	800a222 <_strtod_l+0xa32>
 800a16c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a170:	2b00      	cmp	r3, #0
 800a172:	d15d      	bne.n	800a230 <_strtod_l+0xa40>
 800a174:	4b90      	ldr	r3, [pc, #576]	; (800a3b8 <_strtod_l+0xbc8>)
 800a176:	2200      	movs	r2, #0
 800a178:	4630      	mov	r0, r6
 800a17a:	4639      	mov	r1, r7
 800a17c:	f7f6 fcae 	bl	8000adc <__aeabi_dcmplt>
 800a180:	2800      	cmp	r0, #0
 800a182:	d15c      	bne.n	800a23e <_strtod_l+0xa4e>
 800a184:	4630      	mov	r0, r6
 800a186:	4639      	mov	r1, r7
 800a188:	4b8c      	ldr	r3, [pc, #560]	; (800a3bc <_strtod_l+0xbcc>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	f7f6 fa34 	bl	80005f8 <__aeabi_dmul>
 800a190:	4606      	mov	r6, r0
 800a192:	460f      	mov	r7, r1
 800a194:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a198:	9606      	str	r6, [sp, #24]
 800a19a:	9307      	str	r3, [sp, #28]
 800a19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a1a4:	4b86      	ldr	r3, [pc, #536]	; (800a3c0 <_strtod_l+0xbd0>)
 800a1a6:	ea0a 0303 	and.w	r3, sl, r3
 800a1aa:	930d      	str	r3, [sp, #52]	; 0x34
 800a1ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1ae:	4b85      	ldr	r3, [pc, #532]	; (800a3c4 <_strtod_l+0xbd4>)
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	f040 8090 	bne.w	800a2d6 <_strtod_l+0xae6>
 800a1b6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a1ba:	ec49 8b10 	vmov	d0, r8, r9
 800a1be:	f7ff f9b9 	bl	8009534 <__ulp>
 800a1c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a1c6:	ec51 0b10 	vmov	r0, r1, d0
 800a1ca:	f7f6 fa15 	bl	80005f8 <__aeabi_dmul>
 800a1ce:	4642      	mov	r2, r8
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	f7f6 f85b 	bl	800028c <__adddf3>
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4979      	ldr	r1, [pc, #484]	; (800a3c0 <_strtod_l+0xbd0>)
 800a1da:	4a7b      	ldr	r2, [pc, #492]	; (800a3c8 <_strtod_l+0xbd8>)
 800a1dc:	4019      	ands	r1, r3
 800a1de:	4291      	cmp	r1, r2
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	d944      	bls.n	800a26e <_strtod_l+0xa7e>
 800a1e4:	ee18 2a90 	vmov	r2, s17
 800a1e8:	4b78      	ldr	r3, [pc, #480]	; (800a3cc <_strtod_l+0xbdc>)
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d104      	bne.n	800a1f8 <_strtod_l+0xa08>
 800a1ee:	ee18 3a10 	vmov	r3, s16
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f43f ad40 	beq.w	8009c78 <_strtod_l+0x488>
 800a1f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a3cc <_strtod_l+0xbdc>
 800a1fc:	f04f 38ff 	mov.w	r8, #4294967295
 800a200:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a202:	4620      	mov	r0, r4
 800a204:	f7fe fe6a 	bl	8008edc <_Bfree>
 800a208:	9905      	ldr	r1, [sp, #20]
 800a20a:	4620      	mov	r0, r4
 800a20c:	f7fe fe66 	bl	8008edc <_Bfree>
 800a210:	4659      	mov	r1, fp
 800a212:	4620      	mov	r0, r4
 800a214:	f7fe fe62 	bl	8008edc <_Bfree>
 800a218:	4629      	mov	r1, r5
 800a21a:	4620      	mov	r0, r4
 800a21c:	f7fe fe5e 	bl	8008edc <_Bfree>
 800a220:	e609      	b.n	8009e36 <_strtod_l+0x646>
 800a222:	f1b8 0f01 	cmp.w	r8, #1
 800a226:	d103      	bne.n	800a230 <_strtod_l+0xa40>
 800a228:	f1b9 0f00 	cmp.w	r9, #0
 800a22c:	f43f ad95 	beq.w	8009d5a <_strtod_l+0x56a>
 800a230:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a388 <_strtod_l+0xb98>
 800a234:	4f60      	ldr	r7, [pc, #384]	; (800a3b8 <_strtod_l+0xbc8>)
 800a236:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a23a:	2600      	movs	r6, #0
 800a23c:	e7ae      	b.n	800a19c <_strtod_l+0x9ac>
 800a23e:	4f5f      	ldr	r7, [pc, #380]	; (800a3bc <_strtod_l+0xbcc>)
 800a240:	2600      	movs	r6, #0
 800a242:	e7a7      	b.n	800a194 <_strtod_l+0x9a4>
 800a244:	4b5d      	ldr	r3, [pc, #372]	; (800a3bc <_strtod_l+0xbcc>)
 800a246:	4630      	mov	r0, r6
 800a248:	4639      	mov	r1, r7
 800a24a:	2200      	movs	r2, #0
 800a24c:	f7f6 f9d4 	bl	80005f8 <__aeabi_dmul>
 800a250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a252:	4606      	mov	r6, r0
 800a254:	460f      	mov	r7, r1
 800a256:	2b00      	cmp	r3, #0
 800a258:	d09c      	beq.n	800a194 <_strtod_l+0x9a4>
 800a25a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a25e:	e79d      	b.n	800a19c <_strtod_l+0x9ac>
 800a260:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a390 <_strtod_l+0xba0>
 800a264:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a268:	ec57 6b17 	vmov	r6, r7, d7
 800a26c:	e796      	b.n	800a19c <_strtod_l+0x9ac>
 800a26e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a272:	9b04      	ldr	r3, [sp, #16]
 800a274:	46ca      	mov	sl, r9
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1c2      	bne.n	800a200 <_strtod_l+0xa10>
 800a27a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a27e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a280:	0d1b      	lsrs	r3, r3, #20
 800a282:	051b      	lsls	r3, r3, #20
 800a284:	429a      	cmp	r2, r3
 800a286:	d1bb      	bne.n	800a200 <_strtod_l+0xa10>
 800a288:	4630      	mov	r0, r6
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7f6 fd14 	bl	8000cb8 <__aeabi_d2lz>
 800a290:	f7f6 f984 	bl	800059c <__aeabi_l2d>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4630      	mov	r0, r6
 800a29a:	4639      	mov	r1, r7
 800a29c:	f7f5 fff4 	bl	8000288 <__aeabi_dsub>
 800a2a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2a6:	ea43 0308 	orr.w	r3, r3, r8
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	4606      	mov	r6, r0
 800a2ae:	460f      	mov	r7, r1
 800a2b0:	d054      	beq.n	800a35c <_strtod_l+0xb6c>
 800a2b2:	a339      	add	r3, pc, #228	; (adr r3, 800a398 <_strtod_l+0xba8>)
 800a2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b8:	f7f6 fc10 	bl	8000adc <__aeabi_dcmplt>
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	f47f ace5 	bne.w	8009c8c <_strtod_l+0x49c>
 800a2c2:	a337      	add	r3, pc, #220	; (adr r3, 800a3a0 <_strtod_l+0xbb0>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	4639      	mov	r1, r7
 800a2cc:	f7f6 fc24 	bl	8000b18 <__aeabi_dcmpgt>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	d095      	beq.n	800a200 <_strtod_l+0xa10>
 800a2d4:	e4da      	b.n	8009c8c <_strtod_l+0x49c>
 800a2d6:	9b04      	ldr	r3, [sp, #16]
 800a2d8:	b333      	cbz	r3, 800a328 <_strtod_l+0xb38>
 800a2da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a2e0:	d822      	bhi.n	800a328 <_strtod_l+0xb38>
 800a2e2:	a331      	add	r3, pc, #196	; (adr r3, 800a3a8 <_strtod_l+0xbb8>)
 800a2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 fc00 	bl	8000af0 <__aeabi_dcmple>
 800a2f0:	b1a0      	cbz	r0, 800a31c <_strtod_l+0xb2c>
 800a2f2:	4639      	mov	r1, r7
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7f6 fc57 	bl	8000ba8 <__aeabi_d2uiz>
 800a2fa:	2801      	cmp	r0, #1
 800a2fc:	bf38      	it	cc
 800a2fe:	2001      	movcc	r0, #1
 800a300:	f7f6 f900 	bl	8000504 <__aeabi_ui2d>
 800a304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a306:	4606      	mov	r6, r0
 800a308:	460f      	mov	r7, r1
 800a30a:	bb23      	cbnz	r3, 800a356 <_strtod_l+0xb66>
 800a30c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a310:	9010      	str	r0, [sp, #64]	; 0x40
 800a312:	9311      	str	r3, [sp, #68]	; 0x44
 800a314:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a318:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a31c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a31e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a320:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a324:	1a9b      	subs	r3, r3, r2
 800a326:	930f      	str	r3, [sp, #60]	; 0x3c
 800a328:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a32c:	eeb0 0a48 	vmov.f32	s0, s16
 800a330:	eef0 0a68 	vmov.f32	s1, s17
 800a334:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a338:	f7ff f8fc 	bl	8009534 <__ulp>
 800a33c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a340:	ec53 2b10 	vmov	r2, r3, d0
 800a344:	f7f6 f958 	bl	80005f8 <__aeabi_dmul>
 800a348:	ec53 2b18 	vmov	r2, r3, d8
 800a34c:	f7f5 ff9e 	bl	800028c <__adddf3>
 800a350:	4680      	mov	r8, r0
 800a352:	4689      	mov	r9, r1
 800a354:	e78d      	b.n	800a272 <_strtod_l+0xa82>
 800a356:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a35a:	e7db      	b.n	800a314 <_strtod_l+0xb24>
 800a35c:	a314      	add	r3, pc, #80	; (adr r3, 800a3b0 <_strtod_l+0xbc0>)
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f7f6 fbbb 	bl	8000adc <__aeabi_dcmplt>
 800a366:	e7b3      	b.n	800a2d0 <_strtod_l+0xae0>
 800a368:	2300      	movs	r3, #0
 800a36a:	930a      	str	r3, [sp, #40]	; 0x28
 800a36c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a36e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a370:	6013      	str	r3, [r2, #0]
 800a372:	f7ff ba7c 	b.w	800986e <_strtod_l+0x7e>
 800a376:	2a65      	cmp	r2, #101	; 0x65
 800a378:	f43f ab75 	beq.w	8009a66 <_strtod_l+0x276>
 800a37c:	2a45      	cmp	r2, #69	; 0x45
 800a37e:	f43f ab72 	beq.w	8009a66 <_strtod_l+0x276>
 800a382:	2301      	movs	r3, #1
 800a384:	f7ff bbaa 	b.w	8009adc <_strtod_l+0x2ec>
 800a388:	00000000 	.word	0x00000000
 800a38c:	bff00000 	.word	0xbff00000
 800a390:	00000000 	.word	0x00000000
 800a394:	3ff00000 	.word	0x3ff00000
 800a398:	94a03595 	.word	0x94a03595
 800a39c:	3fdfffff 	.word	0x3fdfffff
 800a3a0:	35afe535 	.word	0x35afe535
 800a3a4:	3fe00000 	.word	0x3fe00000
 800a3a8:	ffc00000 	.word	0xffc00000
 800a3ac:	41dfffff 	.word	0x41dfffff
 800a3b0:	94a03595 	.word	0x94a03595
 800a3b4:	3fcfffff 	.word	0x3fcfffff
 800a3b8:	3ff00000 	.word	0x3ff00000
 800a3bc:	3fe00000 	.word	0x3fe00000
 800a3c0:	7ff00000 	.word	0x7ff00000
 800a3c4:	7fe00000 	.word	0x7fe00000
 800a3c8:	7c9fffff 	.word	0x7c9fffff
 800a3cc:	7fefffff 	.word	0x7fefffff

0800a3d0 <_strtod_r>:
 800a3d0:	4b01      	ldr	r3, [pc, #4]	; (800a3d8 <_strtod_r+0x8>)
 800a3d2:	f7ff ba0d 	b.w	80097f0 <_strtod_l>
 800a3d6:	bf00      	nop
 800a3d8:	20000074 	.word	0x20000074

0800a3dc <_strtol_l.constprop.0>:
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e2:	d001      	beq.n	800a3e8 <_strtol_l.constprop.0+0xc>
 800a3e4:	2b24      	cmp	r3, #36	; 0x24
 800a3e6:	d906      	bls.n	800a3f6 <_strtol_l.constprop.0+0x1a>
 800a3e8:	f7fd fe26 	bl	8008038 <__errno>
 800a3ec:	2316      	movs	r3, #22
 800a3ee:	6003      	str	r3, [r0, #0]
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a4dc <_strtol_l.constprop.0+0x100>
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	462e      	mov	r6, r5
 800a3fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a402:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a406:	f017 0708 	ands.w	r7, r7, #8
 800a40a:	d1f7      	bne.n	800a3fc <_strtol_l.constprop.0+0x20>
 800a40c:	2c2d      	cmp	r4, #45	; 0x2d
 800a40e:	d132      	bne.n	800a476 <_strtol_l.constprop.0+0x9a>
 800a410:	782c      	ldrb	r4, [r5, #0]
 800a412:	2701      	movs	r7, #1
 800a414:	1cb5      	adds	r5, r6, #2
 800a416:	2b00      	cmp	r3, #0
 800a418:	d05b      	beq.n	800a4d2 <_strtol_l.constprop.0+0xf6>
 800a41a:	2b10      	cmp	r3, #16
 800a41c:	d109      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a41e:	2c30      	cmp	r4, #48	; 0x30
 800a420:	d107      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a422:	782c      	ldrb	r4, [r5, #0]
 800a424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a428:	2c58      	cmp	r4, #88	; 0x58
 800a42a:	d14d      	bne.n	800a4c8 <_strtol_l.constprop.0+0xec>
 800a42c:	786c      	ldrb	r4, [r5, #1]
 800a42e:	2310      	movs	r3, #16
 800a430:	3502      	adds	r5, #2
 800a432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a436:	f108 38ff 	add.w	r8, r8, #4294967295
 800a43a:	f04f 0e00 	mov.w	lr, #0
 800a43e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a442:	4676      	mov	r6, lr
 800a444:	fb03 8a19 	mls	sl, r3, r9, r8
 800a448:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a44c:	f1bc 0f09 	cmp.w	ip, #9
 800a450:	d816      	bhi.n	800a480 <_strtol_l.constprop.0+0xa4>
 800a452:	4664      	mov	r4, ip
 800a454:	42a3      	cmp	r3, r4
 800a456:	dd24      	ble.n	800a4a2 <_strtol_l.constprop.0+0xc6>
 800a458:	f1be 3fff 	cmp.w	lr, #4294967295
 800a45c:	d008      	beq.n	800a470 <_strtol_l.constprop.0+0x94>
 800a45e:	45b1      	cmp	r9, r6
 800a460:	d31c      	bcc.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a462:	d101      	bne.n	800a468 <_strtol_l.constprop.0+0x8c>
 800a464:	45a2      	cmp	sl, r4
 800a466:	db19      	blt.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a468:	fb06 4603 	mla	r6, r6, r3, r4
 800a46c:	f04f 0e01 	mov.w	lr, #1
 800a470:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a474:	e7e8      	b.n	800a448 <_strtol_l.constprop.0+0x6c>
 800a476:	2c2b      	cmp	r4, #43	; 0x2b
 800a478:	bf04      	itt	eq
 800a47a:	782c      	ldrbeq	r4, [r5, #0]
 800a47c:	1cb5      	addeq	r5, r6, #2
 800a47e:	e7ca      	b.n	800a416 <_strtol_l.constprop.0+0x3a>
 800a480:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a484:	f1bc 0f19 	cmp.w	ip, #25
 800a488:	d801      	bhi.n	800a48e <_strtol_l.constprop.0+0xb2>
 800a48a:	3c37      	subs	r4, #55	; 0x37
 800a48c:	e7e2      	b.n	800a454 <_strtol_l.constprop.0+0x78>
 800a48e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a492:	f1bc 0f19 	cmp.w	ip, #25
 800a496:	d804      	bhi.n	800a4a2 <_strtol_l.constprop.0+0xc6>
 800a498:	3c57      	subs	r4, #87	; 0x57
 800a49a:	e7db      	b.n	800a454 <_strtol_l.constprop.0+0x78>
 800a49c:	f04f 3eff 	mov.w	lr, #4294967295
 800a4a0:	e7e6      	b.n	800a470 <_strtol_l.constprop.0+0x94>
 800a4a2:	f1be 3fff 	cmp.w	lr, #4294967295
 800a4a6:	d105      	bne.n	800a4b4 <_strtol_l.constprop.0+0xd8>
 800a4a8:	2322      	movs	r3, #34	; 0x22
 800a4aa:	6003      	str	r3, [r0, #0]
 800a4ac:	4646      	mov	r6, r8
 800a4ae:	b942      	cbnz	r2, 800a4c2 <_strtol_l.constprop.0+0xe6>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	e79e      	b.n	800a3f2 <_strtol_l.constprop.0+0x16>
 800a4b4:	b107      	cbz	r7, 800a4b8 <_strtol_l.constprop.0+0xdc>
 800a4b6:	4276      	negs	r6, r6
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	d0f9      	beq.n	800a4b0 <_strtol_l.constprop.0+0xd4>
 800a4bc:	f1be 0f00 	cmp.w	lr, #0
 800a4c0:	d000      	beq.n	800a4c4 <_strtol_l.constprop.0+0xe8>
 800a4c2:	1e69      	subs	r1, r5, #1
 800a4c4:	6011      	str	r1, [r2, #0]
 800a4c6:	e7f3      	b.n	800a4b0 <_strtol_l.constprop.0+0xd4>
 800a4c8:	2430      	movs	r4, #48	; 0x30
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1b1      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4ce:	2308      	movs	r3, #8
 800a4d0:	e7af      	b.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4d2:	2c30      	cmp	r4, #48	; 0x30
 800a4d4:	d0a5      	beq.n	800a422 <_strtol_l.constprop.0+0x46>
 800a4d6:	230a      	movs	r3, #10
 800a4d8:	e7ab      	b.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4da:	bf00      	nop
 800a4dc:	0800c519 	.word	0x0800c519

0800a4e0 <_strtol_r>:
 800a4e0:	f7ff bf7c 	b.w	800a3dc <_strtol_l.constprop.0>

0800a4e4 <__ssputs_r>:
 800a4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e8:	688e      	ldr	r6, [r1, #8]
 800a4ea:	461f      	mov	r7, r3
 800a4ec:	42be      	cmp	r6, r7
 800a4ee:	680b      	ldr	r3, [r1, #0]
 800a4f0:	4682      	mov	sl, r0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	4690      	mov	r8, r2
 800a4f6:	d82c      	bhi.n	800a552 <__ssputs_r+0x6e>
 800a4f8:	898a      	ldrh	r2, [r1, #12]
 800a4fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4fe:	d026      	beq.n	800a54e <__ssputs_r+0x6a>
 800a500:	6965      	ldr	r5, [r4, #20]
 800a502:	6909      	ldr	r1, [r1, #16]
 800a504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a508:	eba3 0901 	sub.w	r9, r3, r1
 800a50c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a510:	1c7b      	adds	r3, r7, #1
 800a512:	444b      	add	r3, r9
 800a514:	106d      	asrs	r5, r5, #1
 800a516:	429d      	cmp	r5, r3
 800a518:	bf38      	it	cc
 800a51a:	461d      	movcc	r5, r3
 800a51c:	0553      	lsls	r3, r2, #21
 800a51e:	d527      	bpl.n	800a570 <__ssputs_r+0x8c>
 800a520:	4629      	mov	r1, r5
 800a522:	f7fc fc87 	bl	8006e34 <_malloc_r>
 800a526:	4606      	mov	r6, r0
 800a528:	b360      	cbz	r0, 800a584 <__ssputs_r+0xa0>
 800a52a:	6921      	ldr	r1, [r4, #16]
 800a52c:	464a      	mov	r2, r9
 800a52e:	f7fd fdb8 	bl	80080a2 <memcpy>
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	6126      	str	r6, [r4, #16]
 800a540:	6165      	str	r5, [r4, #20]
 800a542:	444e      	add	r6, r9
 800a544:	eba5 0509 	sub.w	r5, r5, r9
 800a548:	6026      	str	r6, [r4, #0]
 800a54a:	60a5      	str	r5, [r4, #8]
 800a54c:	463e      	mov	r6, r7
 800a54e:	42be      	cmp	r6, r7
 800a550:	d900      	bls.n	800a554 <__ssputs_r+0x70>
 800a552:	463e      	mov	r6, r7
 800a554:	6820      	ldr	r0, [r4, #0]
 800a556:	4632      	mov	r2, r6
 800a558:	4641      	mov	r1, r8
 800a55a:	f000 f9c9 	bl	800a8f0 <memmove>
 800a55e:	68a3      	ldr	r3, [r4, #8]
 800a560:	1b9b      	subs	r3, r3, r6
 800a562:	60a3      	str	r3, [r4, #8]
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	4433      	add	r3, r6
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	2000      	movs	r0, #0
 800a56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a570:	462a      	mov	r2, r5
 800a572:	f000 fd86 	bl	800b082 <_realloc_r>
 800a576:	4606      	mov	r6, r0
 800a578:	2800      	cmp	r0, #0
 800a57a:	d1e0      	bne.n	800a53e <__ssputs_r+0x5a>
 800a57c:	6921      	ldr	r1, [r4, #16]
 800a57e:	4650      	mov	r0, sl
 800a580:	f7fe fc20 	bl	8008dc4 <_free_r>
 800a584:	230c      	movs	r3, #12
 800a586:	f8ca 3000 	str.w	r3, [sl]
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a590:	81a3      	strh	r3, [r4, #12]
 800a592:	f04f 30ff 	mov.w	r0, #4294967295
 800a596:	e7e9      	b.n	800a56c <__ssputs_r+0x88>

0800a598 <_svfiprintf_r>:
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	4698      	mov	r8, r3
 800a59e:	898b      	ldrh	r3, [r1, #12]
 800a5a0:	061b      	lsls	r3, r3, #24
 800a5a2:	b09d      	sub	sp, #116	; 0x74
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	460d      	mov	r5, r1
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	d50e      	bpl.n	800a5ca <_svfiprintf_r+0x32>
 800a5ac:	690b      	ldr	r3, [r1, #16]
 800a5ae:	b963      	cbnz	r3, 800a5ca <_svfiprintf_r+0x32>
 800a5b0:	2140      	movs	r1, #64	; 0x40
 800a5b2:	f7fc fc3f 	bl	8006e34 <_malloc_r>
 800a5b6:	6028      	str	r0, [r5, #0]
 800a5b8:	6128      	str	r0, [r5, #16]
 800a5ba:	b920      	cbnz	r0, 800a5c6 <_svfiprintf_r+0x2e>
 800a5bc:	230c      	movs	r3, #12
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c4:	e0d0      	b.n	800a768 <_svfiprintf_r+0x1d0>
 800a5c6:	2340      	movs	r3, #64	; 0x40
 800a5c8:	616b      	str	r3, [r5, #20]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ce:	2320      	movs	r3, #32
 800a5d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d8:	2330      	movs	r3, #48	; 0x30
 800a5da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a780 <_svfiprintf_r+0x1e8>
 800a5de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5e2:	f04f 0901 	mov.w	r9, #1
 800a5e6:	4623      	mov	r3, r4
 800a5e8:	469a      	mov	sl, r3
 800a5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ee:	b10a      	cbz	r2, 800a5f4 <_svfiprintf_r+0x5c>
 800a5f0:	2a25      	cmp	r2, #37	; 0x25
 800a5f2:	d1f9      	bne.n	800a5e8 <_svfiprintf_r+0x50>
 800a5f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f8:	d00b      	beq.n	800a612 <_svfiprintf_r+0x7a>
 800a5fa:	465b      	mov	r3, fp
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4629      	mov	r1, r5
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff ff6f 	bl	800a4e4 <__ssputs_r>
 800a606:	3001      	adds	r0, #1
 800a608:	f000 80a9 	beq.w	800a75e <_svfiprintf_r+0x1c6>
 800a60c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a60e:	445a      	add	r2, fp
 800a610:	9209      	str	r2, [sp, #36]	; 0x24
 800a612:	f89a 3000 	ldrb.w	r3, [sl]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 80a1 	beq.w	800a75e <_svfiprintf_r+0x1c6>
 800a61c:	2300      	movs	r3, #0
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a626:	f10a 0a01 	add.w	sl, sl, #1
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	9307      	str	r3, [sp, #28]
 800a62e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a632:	931a      	str	r3, [sp, #104]	; 0x68
 800a634:	4654      	mov	r4, sl
 800a636:	2205      	movs	r2, #5
 800a638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63c:	4850      	ldr	r0, [pc, #320]	; (800a780 <_svfiprintf_r+0x1e8>)
 800a63e:	f7f5 fdc7 	bl	80001d0 <memchr>
 800a642:	9a04      	ldr	r2, [sp, #16]
 800a644:	b9d8      	cbnz	r0, 800a67e <_svfiprintf_r+0xe6>
 800a646:	06d0      	lsls	r0, r2, #27
 800a648:	bf44      	itt	mi
 800a64a:	2320      	movmi	r3, #32
 800a64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a650:	0711      	lsls	r1, r2, #28
 800a652:	bf44      	itt	mi
 800a654:	232b      	movmi	r3, #43	; 0x2b
 800a656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a65a:	f89a 3000 	ldrb.w	r3, [sl]
 800a65e:	2b2a      	cmp	r3, #42	; 0x2a
 800a660:	d015      	beq.n	800a68e <_svfiprintf_r+0xf6>
 800a662:	9a07      	ldr	r2, [sp, #28]
 800a664:	4654      	mov	r4, sl
 800a666:	2000      	movs	r0, #0
 800a668:	f04f 0c0a 	mov.w	ip, #10
 800a66c:	4621      	mov	r1, r4
 800a66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a672:	3b30      	subs	r3, #48	; 0x30
 800a674:	2b09      	cmp	r3, #9
 800a676:	d94d      	bls.n	800a714 <_svfiprintf_r+0x17c>
 800a678:	b1b0      	cbz	r0, 800a6a8 <_svfiprintf_r+0x110>
 800a67a:	9207      	str	r2, [sp, #28]
 800a67c:	e014      	b.n	800a6a8 <_svfiprintf_r+0x110>
 800a67e:	eba0 0308 	sub.w	r3, r0, r8
 800a682:	fa09 f303 	lsl.w	r3, r9, r3
 800a686:	4313      	orrs	r3, r2
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	46a2      	mov	sl, r4
 800a68c:	e7d2      	b.n	800a634 <_svfiprintf_r+0x9c>
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	1d19      	adds	r1, r3, #4
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	9103      	str	r1, [sp, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	bfbb      	ittet	lt
 800a69a:	425b      	neglt	r3, r3
 800a69c:	f042 0202 	orrlt.w	r2, r2, #2
 800a6a0:	9307      	strge	r3, [sp, #28]
 800a6a2:	9307      	strlt	r3, [sp, #28]
 800a6a4:	bfb8      	it	lt
 800a6a6:	9204      	strlt	r2, [sp, #16]
 800a6a8:	7823      	ldrb	r3, [r4, #0]
 800a6aa:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ac:	d10c      	bne.n	800a6c8 <_svfiprintf_r+0x130>
 800a6ae:	7863      	ldrb	r3, [r4, #1]
 800a6b0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6b2:	d134      	bne.n	800a71e <_svfiprintf_r+0x186>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	1d1a      	adds	r2, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	9203      	str	r2, [sp, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	bfb8      	it	lt
 800a6c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6c4:	3402      	adds	r4, #2
 800a6c6:	9305      	str	r3, [sp, #20]
 800a6c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a790 <_svfiprintf_r+0x1f8>
 800a6cc:	7821      	ldrb	r1, [r4, #0]
 800a6ce:	2203      	movs	r2, #3
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	f7f5 fd7d 	bl	80001d0 <memchr>
 800a6d6:	b138      	cbz	r0, 800a6e8 <_svfiprintf_r+0x150>
 800a6d8:	9b04      	ldr	r3, [sp, #16]
 800a6da:	eba0 000a 	sub.w	r0, r0, sl
 800a6de:	2240      	movs	r2, #64	; 0x40
 800a6e0:	4082      	lsls	r2, r0
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	3401      	adds	r4, #1
 800a6e6:	9304      	str	r3, [sp, #16]
 800a6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ec:	4825      	ldr	r0, [pc, #148]	; (800a784 <_svfiprintf_r+0x1ec>)
 800a6ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6f2:	2206      	movs	r2, #6
 800a6f4:	f7f5 fd6c 	bl	80001d0 <memchr>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	d038      	beq.n	800a76e <_svfiprintf_r+0x1d6>
 800a6fc:	4b22      	ldr	r3, [pc, #136]	; (800a788 <_svfiprintf_r+0x1f0>)
 800a6fe:	bb1b      	cbnz	r3, 800a748 <_svfiprintf_r+0x1b0>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	3307      	adds	r3, #7
 800a704:	f023 0307 	bic.w	r3, r3, #7
 800a708:	3308      	adds	r3, #8
 800a70a:	9303      	str	r3, [sp, #12]
 800a70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70e:	4433      	add	r3, r6
 800a710:	9309      	str	r3, [sp, #36]	; 0x24
 800a712:	e768      	b.n	800a5e6 <_svfiprintf_r+0x4e>
 800a714:	fb0c 3202 	mla	r2, ip, r2, r3
 800a718:	460c      	mov	r4, r1
 800a71a:	2001      	movs	r0, #1
 800a71c:	e7a6      	b.n	800a66c <_svfiprintf_r+0xd4>
 800a71e:	2300      	movs	r3, #0
 800a720:	3401      	adds	r4, #1
 800a722:	9305      	str	r3, [sp, #20]
 800a724:	4619      	mov	r1, r3
 800a726:	f04f 0c0a 	mov.w	ip, #10
 800a72a:	4620      	mov	r0, r4
 800a72c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a730:	3a30      	subs	r2, #48	; 0x30
 800a732:	2a09      	cmp	r2, #9
 800a734:	d903      	bls.n	800a73e <_svfiprintf_r+0x1a6>
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0c6      	beq.n	800a6c8 <_svfiprintf_r+0x130>
 800a73a:	9105      	str	r1, [sp, #20]
 800a73c:	e7c4      	b.n	800a6c8 <_svfiprintf_r+0x130>
 800a73e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a742:	4604      	mov	r4, r0
 800a744:	2301      	movs	r3, #1
 800a746:	e7f0      	b.n	800a72a <_svfiprintf_r+0x192>
 800a748:	ab03      	add	r3, sp, #12
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	462a      	mov	r2, r5
 800a74e:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <_svfiprintf_r+0x1f4>)
 800a750:	a904      	add	r1, sp, #16
 800a752:	4638      	mov	r0, r7
 800a754:	f7fc fc9a 	bl	800708c <_printf_float>
 800a758:	1c42      	adds	r2, r0, #1
 800a75a:	4606      	mov	r6, r0
 800a75c:	d1d6      	bne.n	800a70c <_svfiprintf_r+0x174>
 800a75e:	89ab      	ldrh	r3, [r5, #12]
 800a760:	065b      	lsls	r3, r3, #25
 800a762:	f53f af2d 	bmi.w	800a5c0 <_svfiprintf_r+0x28>
 800a766:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a768:	b01d      	add	sp, #116	; 0x74
 800a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76e:	ab03      	add	r3, sp, #12
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	462a      	mov	r2, r5
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <_svfiprintf_r+0x1f4>)
 800a776:	a904      	add	r1, sp, #16
 800a778:	4638      	mov	r0, r7
 800a77a:	f7fc ff2b 	bl	80075d4 <_printf_i>
 800a77e:	e7eb      	b.n	800a758 <_svfiprintf_r+0x1c0>
 800a780:	0800c619 	.word	0x0800c619
 800a784:	0800c623 	.word	0x0800c623
 800a788:	0800708d 	.word	0x0800708d
 800a78c:	0800a4e5 	.word	0x0800a4e5
 800a790:	0800c61f 	.word	0x0800c61f

0800a794 <__sflush_r>:
 800a794:	898a      	ldrh	r2, [r1, #12]
 800a796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a79a:	4605      	mov	r5, r0
 800a79c:	0710      	lsls	r0, r2, #28
 800a79e:	460c      	mov	r4, r1
 800a7a0:	d458      	bmi.n	800a854 <__sflush_r+0xc0>
 800a7a2:	684b      	ldr	r3, [r1, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dc05      	bgt.n	800a7b4 <__sflush_r+0x20>
 800a7a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	dc02      	bgt.n	800a7b4 <__sflush_r+0x20>
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	d0f9      	beq.n	800a7ae <__sflush_r+0x1a>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7c0:	682f      	ldr	r7, [r5, #0]
 800a7c2:	6a21      	ldr	r1, [r4, #32]
 800a7c4:	602b      	str	r3, [r5, #0]
 800a7c6:	d032      	beq.n	800a82e <__sflush_r+0x9a>
 800a7c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	075a      	lsls	r2, r3, #29
 800a7ce:	d505      	bpl.n	800a7dc <__sflush_r+0x48>
 800a7d0:	6863      	ldr	r3, [r4, #4]
 800a7d2:	1ac0      	subs	r0, r0, r3
 800a7d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7d6:	b10b      	cbz	r3, 800a7dc <__sflush_r+0x48>
 800a7d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7da:	1ac0      	subs	r0, r0, r3
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4602      	mov	r2, r0
 800a7e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7e2:	6a21      	ldr	r1, [r4, #32]
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	47b0      	blx	r6
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	d106      	bne.n	800a7fc <__sflush_r+0x68>
 800a7ee:	6829      	ldr	r1, [r5, #0]
 800a7f0:	291d      	cmp	r1, #29
 800a7f2:	d82b      	bhi.n	800a84c <__sflush_r+0xb8>
 800a7f4:	4a29      	ldr	r2, [pc, #164]	; (800a89c <__sflush_r+0x108>)
 800a7f6:	410a      	asrs	r2, r1
 800a7f8:	07d6      	lsls	r6, r2, #31
 800a7fa:	d427      	bmi.n	800a84c <__sflush_r+0xb8>
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	6062      	str	r2, [r4, #4]
 800a800:	04d9      	lsls	r1, r3, #19
 800a802:	6922      	ldr	r2, [r4, #16]
 800a804:	6022      	str	r2, [r4, #0]
 800a806:	d504      	bpl.n	800a812 <__sflush_r+0x7e>
 800a808:	1c42      	adds	r2, r0, #1
 800a80a:	d101      	bne.n	800a810 <__sflush_r+0x7c>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	b903      	cbnz	r3, 800a812 <__sflush_r+0x7e>
 800a810:	6560      	str	r0, [r4, #84]	; 0x54
 800a812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a814:	602f      	str	r7, [r5, #0]
 800a816:	2900      	cmp	r1, #0
 800a818:	d0c9      	beq.n	800a7ae <__sflush_r+0x1a>
 800a81a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a81e:	4299      	cmp	r1, r3
 800a820:	d002      	beq.n	800a828 <__sflush_r+0x94>
 800a822:	4628      	mov	r0, r5
 800a824:	f7fe face 	bl	8008dc4 <_free_r>
 800a828:	2000      	movs	r0, #0
 800a82a:	6360      	str	r0, [r4, #52]	; 0x34
 800a82c:	e7c0      	b.n	800a7b0 <__sflush_r+0x1c>
 800a82e:	2301      	movs	r3, #1
 800a830:	4628      	mov	r0, r5
 800a832:	47b0      	blx	r6
 800a834:	1c41      	adds	r1, r0, #1
 800a836:	d1c8      	bne.n	800a7ca <__sflush_r+0x36>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d0c5      	beq.n	800a7ca <__sflush_r+0x36>
 800a83e:	2b1d      	cmp	r3, #29
 800a840:	d001      	beq.n	800a846 <__sflush_r+0xb2>
 800a842:	2b16      	cmp	r3, #22
 800a844:	d101      	bne.n	800a84a <__sflush_r+0xb6>
 800a846:	602f      	str	r7, [r5, #0]
 800a848:	e7b1      	b.n	800a7ae <__sflush_r+0x1a>
 800a84a:	89a3      	ldrh	r3, [r4, #12]
 800a84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a850:	81a3      	strh	r3, [r4, #12]
 800a852:	e7ad      	b.n	800a7b0 <__sflush_r+0x1c>
 800a854:	690f      	ldr	r7, [r1, #16]
 800a856:	2f00      	cmp	r7, #0
 800a858:	d0a9      	beq.n	800a7ae <__sflush_r+0x1a>
 800a85a:	0793      	lsls	r3, r2, #30
 800a85c:	680e      	ldr	r6, [r1, #0]
 800a85e:	bf08      	it	eq
 800a860:	694b      	ldreq	r3, [r1, #20]
 800a862:	600f      	str	r7, [r1, #0]
 800a864:	bf18      	it	ne
 800a866:	2300      	movne	r3, #0
 800a868:	eba6 0807 	sub.w	r8, r6, r7
 800a86c:	608b      	str	r3, [r1, #8]
 800a86e:	f1b8 0f00 	cmp.w	r8, #0
 800a872:	dd9c      	ble.n	800a7ae <__sflush_r+0x1a>
 800a874:	6a21      	ldr	r1, [r4, #32]
 800a876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a878:	4643      	mov	r3, r8
 800a87a:	463a      	mov	r2, r7
 800a87c:	4628      	mov	r0, r5
 800a87e:	47b0      	blx	r6
 800a880:	2800      	cmp	r0, #0
 800a882:	dc06      	bgt.n	800a892 <__sflush_r+0xfe>
 800a884:	89a3      	ldrh	r3, [r4, #12]
 800a886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a88a:	81a3      	strh	r3, [r4, #12]
 800a88c:	f04f 30ff 	mov.w	r0, #4294967295
 800a890:	e78e      	b.n	800a7b0 <__sflush_r+0x1c>
 800a892:	4407      	add	r7, r0
 800a894:	eba8 0800 	sub.w	r8, r8, r0
 800a898:	e7e9      	b.n	800a86e <__sflush_r+0xda>
 800a89a:	bf00      	nop
 800a89c:	dfbffffe 	.word	0xdfbffffe

0800a8a0 <_fflush_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	690b      	ldr	r3, [r1, #16]
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	b913      	cbnz	r3, 800a8b0 <_fflush_r+0x10>
 800a8aa:	2500      	movs	r5, #0
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	bd38      	pop	{r3, r4, r5, pc}
 800a8b0:	b118      	cbz	r0, 800a8ba <_fflush_r+0x1a>
 800a8b2:	6a03      	ldr	r3, [r0, #32]
 800a8b4:	b90b      	cbnz	r3, 800a8ba <_fflush_r+0x1a>
 800a8b6:	f7fd fa4b 	bl	8007d50 <__sinit>
 800a8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0f3      	beq.n	800a8aa <_fflush_r+0xa>
 800a8c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8c4:	07d0      	lsls	r0, r2, #31
 800a8c6:	d404      	bmi.n	800a8d2 <_fflush_r+0x32>
 800a8c8:	0599      	lsls	r1, r3, #22
 800a8ca:	d402      	bmi.n	800a8d2 <_fflush_r+0x32>
 800a8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ce:	f7fd fbde 	bl	800808e <__retarget_lock_acquire_recursive>
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	4621      	mov	r1, r4
 800a8d6:	f7ff ff5d 	bl	800a794 <__sflush_r>
 800a8da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8dc:	07da      	lsls	r2, r3, #31
 800a8de:	4605      	mov	r5, r0
 800a8e0:	d4e4      	bmi.n	800a8ac <_fflush_r+0xc>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	059b      	lsls	r3, r3, #22
 800a8e6:	d4e1      	bmi.n	800a8ac <_fflush_r+0xc>
 800a8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8ea:	f7fd fbd1 	bl	8008090 <__retarget_lock_release_recursive>
 800a8ee:	e7dd      	b.n	800a8ac <_fflush_r+0xc>

0800a8f0 <memmove>:
 800a8f0:	4288      	cmp	r0, r1
 800a8f2:	b510      	push	{r4, lr}
 800a8f4:	eb01 0402 	add.w	r4, r1, r2
 800a8f8:	d902      	bls.n	800a900 <memmove+0x10>
 800a8fa:	4284      	cmp	r4, r0
 800a8fc:	4623      	mov	r3, r4
 800a8fe:	d807      	bhi.n	800a910 <memmove+0x20>
 800a900:	1e43      	subs	r3, r0, #1
 800a902:	42a1      	cmp	r1, r4
 800a904:	d008      	beq.n	800a918 <memmove+0x28>
 800a906:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a90a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a90e:	e7f8      	b.n	800a902 <memmove+0x12>
 800a910:	4402      	add	r2, r0
 800a912:	4601      	mov	r1, r0
 800a914:	428a      	cmp	r2, r1
 800a916:	d100      	bne.n	800a91a <memmove+0x2a>
 800a918:	bd10      	pop	{r4, pc}
 800a91a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a91e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a922:	e7f7      	b.n	800a914 <memmove+0x24>

0800a924 <strncmp>:
 800a924:	b510      	push	{r4, lr}
 800a926:	b16a      	cbz	r2, 800a944 <strncmp+0x20>
 800a928:	3901      	subs	r1, #1
 800a92a:	1884      	adds	r4, r0, r2
 800a92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a930:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a934:	429a      	cmp	r2, r3
 800a936:	d103      	bne.n	800a940 <strncmp+0x1c>
 800a938:	42a0      	cmp	r0, r4
 800a93a:	d001      	beq.n	800a940 <strncmp+0x1c>
 800a93c:	2a00      	cmp	r2, #0
 800a93e:	d1f5      	bne.n	800a92c <strncmp+0x8>
 800a940:	1ad0      	subs	r0, r2, r3
 800a942:	bd10      	pop	{r4, pc}
 800a944:	4610      	mov	r0, r2
 800a946:	e7fc      	b.n	800a942 <strncmp+0x1e>

0800a948 <__assert_func>:
 800a948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a94a:	4614      	mov	r4, r2
 800a94c:	461a      	mov	r2, r3
 800a94e:	4b09      	ldr	r3, [pc, #36]	; (800a974 <__assert_func+0x2c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4605      	mov	r5, r0
 800a954:	68d8      	ldr	r0, [r3, #12]
 800a956:	b14c      	cbz	r4, 800a96c <__assert_func+0x24>
 800a958:	4b07      	ldr	r3, [pc, #28]	; (800a978 <__assert_func+0x30>)
 800a95a:	9100      	str	r1, [sp, #0]
 800a95c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a960:	4906      	ldr	r1, [pc, #24]	; (800a97c <__assert_func+0x34>)
 800a962:	462b      	mov	r3, r5
 800a964:	f000 fbca 	bl	800b0fc <fiprintf>
 800a968:	f7fc fa2c 	bl	8006dc4 <abort>
 800a96c:	4b04      	ldr	r3, [pc, #16]	; (800a980 <__assert_func+0x38>)
 800a96e:	461c      	mov	r4, r3
 800a970:	e7f3      	b.n	800a95a <__assert_func+0x12>
 800a972:	bf00      	nop
 800a974:	20000070 	.word	0x20000070
 800a978:	0800c632 	.word	0x0800c632
 800a97c:	0800c63f 	.word	0x0800c63f
 800a980:	0800c66d 	.word	0x0800c66d

0800a984 <_calloc_r>:
 800a984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a986:	fba1 2402 	umull	r2, r4, r1, r2
 800a98a:	b94c      	cbnz	r4, 800a9a0 <_calloc_r+0x1c>
 800a98c:	4611      	mov	r1, r2
 800a98e:	9201      	str	r2, [sp, #4]
 800a990:	f7fc fa50 	bl	8006e34 <_malloc_r>
 800a994:	9a01      	ldr	r2, [sp, #4]
 800a996:	4605      	mov	r5, r0
 800a998:	b930      	cbnz	r0, 800a9a8 <_calloc_r+0x24>
 800a99a:	4628      	mov	r0, r5
 800a99c:	b003      	add	sp, #12
 800a99e:	bd30      	pop	{r4, r5, pc}
 800a9a0:	220c      	movs	r2, #12
 800a9a2:	6002      	str	r2, [r0, #0]
 800a9a4:	2500      	movs	r5, #0
 800a9a6:	e7f8      	b.n	800a99a <_calloc_r+0x16>
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	f7fd fa9e 	bl	8007eea <memset>
 800a9ae:	e7f4      	b.n	800a99a <_calloc_r+0x16>

0800a9b0 <rshift>:
 800a9b0:	6903      	ldr	r3, [r0, #16]
 800a9b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a9b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a9be:	f100 0414 	add.w	r4, r0, #20
 800a9c2:	dd45      	ble.n	800aa50 <rshift+0xa0>
 800a9c4:	f011 011f 	ands.w	r1, r1, #31
 800a9c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a9cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9d0:	d10c      	bne.n	800a9ec <rshift+0x3c>
 800a9d2:	f100 0710 	add.w	r7, r0, #16
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	42b1      	cmp	r1, r6
 800a9da:	d334      	bcc.n	800aa46 <rshift+0x96>
 800a9dc:	1a9b      	subs	r3, r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	1eea      	subs	r2, r5, #3
 800a9e2:	4296      	cmp	r6, r2
 800a9e4:	bf38      	it	cc
 800a9e6:	2300      	movcc	r3, #0
 800a9e8:	4423      	add	r3, r4
 800a9ea:	e015      	b.n	800aa18 <rshift+0x68>
 800a9ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9f0:	f1c1 0820 	rsb	r8, r1, #32
 800a9f4:	40cf      	lsrs	r7, r1
 800a9f6:	f105 0e04 	add.w	lr, r5, #4
 800a9fa:	46a1      	mov	r9, r4
 800a9fc:	4576      	cmp	r6, lr
 800a9fe:	46f4      	mov	ip, lr
 800aa00:	d815      	bhi.n	800aa2e <rshift+0x7e>
 800aa02:	1a9a      	subs	r2, r3, r2
 800aa04:	0092      	lsls	r2, r2, #2
 800aa06:	3a04      	subs	r2, #4
 800aa08:	3501      	adds	r5, #1
 800aa0a:	42ae      	cmp	r6, r5
 800aa0c:	bf38      	it	cc
 800aa0e:	2200      	movcc	r2, #0
 800aa10:	18a3      	adds	r3, r4, r2
 800aa12:	50a7      	str	r7, [r4, r2]
 800aa14:	b107      	cbz	r7, 800aa18 <rshift+0x68>
 800aa16:	3304      	adds	r3, #4
 800aa18:	1b1a      	subs	r2, r3, r4
 800aa1a:	42a3      	cmp	r3, r4
 800aa1c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aa20:	bf08      	it	eq
 800aa22:	2300      	moveq	r3, #0
 800aa24:	6102      	str	r2, [r0, #16]
 800aa26:	bf08      	it	eq
 800aa28:	6143      	streq	r3, [r0, #20]
 800aa2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa2e:	f8dc c000 	ldr.w	ip, [ip]
 800aa32:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa36:	ea4c 0707 	orr.w	r7, ip, r7
 800aa3a:	f849 7b04 	str.w	r7, [r9], #4
 800aa3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa42:	40cf      	lsrs	r7, r1
 800aa44:	e7da      	b.n	800a9fc <rshift+0x4c>
 800aa46:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa4a:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa4e:	e7c3      	b.n	800a9d8 <rshift+0x28>
 800aa50:	4623      	mov	r3, r4
 800aa52:	e7e1      	b.n	800aa18 <rshift+0x68>

0800aa54 <__hexdig_fun>:
 800aa54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aa58:	2b09      	cmp	r3, #9
 800aa5a:	d802      	bhi.n	800aa62 <__hexdig_fun+0xe>
 800aa5c:	3820      	subs	r0, #32
 800aa5e:	b2c0      	uxtb	r0, r0
 800aa60:	4770      	bx	lr
 800aa62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aa66:	2b05      	cmp	r3, #5
 800aa68:	d801      	bhi.n	800aa6e <__hexdig_fun+0x1a>
 800aa6a:	3847      	subs	r0, #71	; 0x47
 800aa6c:	e7f7      	b.n	800aa5e <__hexdig_fun+0xa>
 800aa6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aa72:	2b05      	cmp	r3, #5
 800aa74:	d801      	bhi.n	800aa7a <__hexdig_fun+0x26>
 800aa76:	3827      	subs	r0, #39	; 0x27
 800aa78:	e7f1      	b.n	800aa5e <__hexdig_fun+0xa>
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	4770      	bx	lr
	...

0800aa80 <__gethex>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	4617      	mov	r7, r2
 800aa86:	680a      	ldr	r2, [r1, #0]
 800aa88:	b085      	sub	sp, #20
 800aa8a:	f102 0b02 	add.w	fp, r2, #2
 800aa8e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800aa92:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800aa96:	4681      	mov	r9, r0
 800aa98:	468a      	mov	sl, r1
 800aa9a:	9302      	str	r3, [sp, #8]
 800aa9c:	32fe      	adds	r2, #254	; 0xfe
 800aa9e:	eb02 030b 	add.w	r3, r2, fp
 800aaa2:	46d8      	mov	r8, fp
 800aaa4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	2830      	cmp	r0, #48	; 0x30
 800aaac:	d0f7      	beq.n	800aa9e <__gethex+0x1e>
 800aaae:	f7ff ffd1 	bl	800aa54 <__hexdig_fun>
 800aab2:	4604      	mov	r4, r0
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d138      	bne.n	800ab2a <__gethex+0xaa>
 800aab8:	49a7      	ldr	r1, [pc, #668]	; (800ad58 <__gethex+0x2d8>)
 800aaba:	2201      	movs	r2, #1
 800aabc:	4640      	mov	r0, r8
 800aabe:	f7ff ff31 	bl	800a924 <strncmp>
 800aac2:	4606      	mov	r6, r0
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d169      	bne.n	800ab9c <__gethex+0x11c>
 800aac8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800aacc:	465d      	mov	r5, fp
 800aace:	f7ff ffc1 	bl	800aa54 <__hexdig_fun>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d064      	beq.n	800aba0 <__gethex+0x120>
 800aad6:	465a      	mov	r2, fp
 800aad8:	7810      	ldrb	r0, [r2, #0]
 800aada:	2830      	cmp	r0, #48	; 0x30
 800aadc:	4690      	mov	r8, r2
 800aade:	f102 0201 	add.w	r2, r2, #1
 800aae2:	d0f9      	beq.n	800aad8 <__gethex+0x58>
 800aae4:	f7ff ffb6 	bl	800aa54 <__hexdig_fun>
 800aae8:	2301      	movs	r3, #1
 800aaea:	fab0 f480 	clz	r4, r0
 800aaee:	0964      	lsrs	r4, r4, #5
 800aaf0:	465e      	mov	r6, fp
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	4642      	mov	r2, r8
 800aaf6:	4615      	mov	r5, r2
 800aaf8:	3201      	adds	r2, #1
 800aafa:	7828      	ldrb	r0, [r5, #0]
 800aafc:	f7ff ffaa 	bl	800aa54 <__hexdig_fun>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d1f8      	bne.n	800aaf6 <__gethex+0x76>
 800ab04:	4994      	ldr	r1, [pc, #592]	; (800ad58 <__gethex+0x2d8>)
 800ab06:	2201      	movs	r2, #1
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f7ff ff0b 	bl	800a924 <strncmp>
 800ab0e:	b978      	cbnz	r0, 800ab30 <__gethex+0xb0>
 800ab10:	b946      	cbnz	r6, 800ab24 <__gethex+0xa4>
 800ab12:	1c6e      	adds	r6, r5, #1
 800ab14:	4632      	mov	r2, r6
 800ab16:	4615      	mov	r5, r2
 800ab18:	3201      	adds	r2, #1
 800ab1a:	7828      	ldrb	r0, [r5, #0]
 800ab1c:	f7ff ff9a 	bl	800aa54 <__hexdig_fun>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d1f8      	bne.n	800ab16 <__gethex+0x96>
 800ab24:	1b73      	subs	r3, r6, r5
 800ab26:	009e      	lsls	r6, r3, #2
 800ab28:	e004      	b.n	800ab34 <__gethex+0xb4>
 800ab2a:	2400      	movs	r4, #0
 800ab2c:	4626      	mov	r6, r4
 800ab2e:	e7e1      	b.n	800aaf4 <__gethex+0x74>
 800ab30:	2e00      	cmp	r6, #0
 800ab32:	d1f7      	bne.n	800ab24 <__gethex+0xa4>
 800ab34:	782b      	ldrb	r3, [r5, #0]
 800ab36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab3a:	2b50      	cmp	r3, #80	; 0x50
 800ab3c:	d13d      	bne.n	800abba <__gethex+0x13a>
 800ab3e:	786b      	ldrb	r3, [r5, #1]
 800ab40:	2b2b      	cmp	r3, #43	; 0x2b
 800ab42:	d02f      	beq.n	800aba4 <__gethex+0x124>
 800ab44:	2b2d      	cmp	r3, #45	; 0x2d
 800ab46:	d031      	beq.n	800abac <__gethex+0x12c>
 800ab48:	1c69      	adds	r1, r5, #1
 800ab4a:	f04f 0b00 	mov.w	fp, #0
 800ab4e:	7808      	ldrb	r0, [r1, #0]
 800ab50:	f7ff ff80 	bl	800aa54 <__hexdig_fun>
 800ab54:	1e42      	subs	r2, r0, #1
 800ab56:	b2d2      	uxtb	r2, r2
 800ab58:	2a18      	cmp	r2, #24
 800ab5a:	d82e      	bhi.n	800abba <__gethex+0x13a>
 800ab5c:	f1a0 0210 	sub.w	r2, r0, #16
 800ab60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab64:	f7ff ff76 	bl	800aa54 <__hexdig_fun>
 800ab68:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab6c:	fa5f fc8c 	uxtb.w	ip, ip
 800ab70:	f1bc 0f18 	cmp.w	ip, #24
 800ab74:	d91d      	bls.n	800abb2 <__gethex+0x132>
 800ab76:	f1bb 0f00 	cmp.w	fp, #0
 800ab7a:	d000      	beq.n	800ab7e <__gethex+0xfe>
 800ab7c:	4252      	negs	r2, r2
 800ab7e:	4416      	add	r6, r2
 800ab80:	f8ca 1000 	str.w	r1, [sl]
 800ab84:	b1dc      	cbz	r4, 800abbe <__gethex+0x13e>
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	bf14      	ite	ne
 800ab8c:	f04f 0800 	movne.w	r8, #0
 800ab90:	f04f 0806 	moveq.w	r8, #6
 800ab94:	4640      	mov	r0, r8
 800ab96:	b005      	add	sp, #20
 800ab98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9c:	4645      	mov	r5, r8
 800ab9e:	4626      	mov	r6, r4
 800aba0:	2401      	movs	r4, #1
 800aba2:	e7c7      	b.n	800ab34 <__gethex+0xb4>
 800aba4:	f04f 0b00 	mov.w	fp, #0
 800aba8:	1ca9      	adds	r1, r5, #2
 800abaa:	e7d0      	b.n	800ab4e <__gethex+0xce>
 800abac:	f04f 0b01 	mov.w	fp, #1
 800abb0:	e7fa      	b.n	800aba8 <__gethex+0x128>
 800abb2:	230a      	movs	r3, #10
 800abb4:	fb03 0002 	mla	r0, r3, r2, r0
 800abb8:	e7d0      	b.n	800ab5c <__gethex+0xdc>
 800abba:	4629      	mov	r1, r5
 800abbc:	e7e0      	b.n	800ab80 <__gethex+0x100>
 800abbe:	eba5 0308 	sub.w	r3, r5, r8
 800abc2:	3b01      	subs	r3, #1
 800abc4:	4621      	mov	r1, r4
 800abc6:	2b07      	cmp	r3, #7
 800abc8:	dc0a      	bgt.n	800abe0 <__gethex+0x160>
 800abca:	4648      	mov	r0, r9
 800abcc:	f7fe f946 	bl	8008e5c <_Balloc>
 800abd0:	4604      	mov	r4, r0
 800abd2:	b940      	cbnz	r0, 800abe6 <__gethex+0x166>
 800abd4:	4b61      	ldr	r3, [pc, #388]	; (800ad5c <__gethex+0x2dc>)
 800abd6:	4602      	mov	r2, r0
 800abd8:	21e4      	movs	r1, #228	; 0xe4
 800abda:	4861      	ldr	r0, [pc, #388]	; (800ad60 <__gethex+0x2e0>)
 800abdc:	f7ff feb4 	bl	800a948 <__assert_func>
 800abe0:	3101      	adds	r1, #1
 800abe2:	105b      	asrs	r3, r3, #1
 800abe4:	e7ef      	b.n	800abc6 <__gethex+0x146>
 800abe6:	f100 0a14 	add.w	sl, r0, #20
 800abea:	2300      	movs	r3, #0
 800abec:	495a      	ldr	r1, [pc, #360]	; (800ad58 <__gethex+0x2d8>)
 800abee:	f8cd a004 	str.w	sl, [sp, #4]
 800abf2:	469b      	mov	fp, r3
 800abf4:	45a8      	cmp	r8, r5
 800abf6:	d342      	bcc.n	800ac7e <__gethex+0x1fe>
 800abf8:	9801      	ldr	r0, [sp, #4]
 800abfa:	f840 bb04 	str.w	fp, [r0], #4
 800abfe:	eba0 000a 	sub.w	r0, r0, sl
 800ac02:	1080      	asrs	r0, r0, #2
 800ac04:	6120      	str	r0, [r4, #16]
 800ac06:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f7fe fa18 	bl	8009040 <__hi0bits>
 800ac10:	683d      	ldr	r5, [r7, #0]
 800ac12:	eba8 0000 	sub.w	r0, r8, r0
 800ac16:	42a8      	cmp	r0, r5
 800ac18:	dd59      	ble.n	800acce <__gethex+0x24e>
 800ac1a:	eba0 0805 	sub.w	r8, r0, r5
 800ac1e:	4641      	mov	r1, r8
 800ac20:	4620      	mov	r0, r4
 800ac22:	f7fe fda7 	bl	8009774 <__any_on>
 800ac26:	4683      	mov	fp, r0
 800ac28:	b1b8      	cbz	r0, 800ac5a <__gethex+0x1da>
 800ac2a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ac2e:	1159      	asrs	r1, r3, #5
 800ac30:	f003 021f 	and.w	r2, r3, #31
 800ac34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ac38:	f04f 0b01 	mov.w	fp, #1
 800ac3c:	fa0b f202 	lsl.w	r2, fp, r2
 800ac40:	420a      	tst	r2, r1
 800ac42:	d00a      	beq.n	800ac5a <__gethex+0x1da>
 800ac44:	455b      	cmp	r3, fp
 800ac46:	dd06      	ble.n	800ac56 <__gethex+0x1d6>
 800ac48:	f1a8 0102 	sub.w	r1, r8, #2
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	f7fe fd91 	bl	8009774 <__any_on>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d138      	bne.n	800acc8 <__gethex+0x248>
 800ac56:	f04f 0b02 	mov.w	fp, #2
 800ac5a:	4641      	mov	r1, r8
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f7ff fea7 	bl	800a9b0 <rshift>
 800ac62:	4446      	add	r6, r8
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	42b3      	cmp	r3, r6
 800ac68:	da41      	bge.n	800acee <__gethex+0x26e>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4648      	mov	r0, r9
 800ac6e:	f7fe f935 	bl	8008edc <_Bfree>
 800ac72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac74:	2300      	movs	r3, #0
 800ac76:	6013      	str	r3, [r2, #0]
 800ac78:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ac7c:	e78a      	b.n	800ab94 <__gethex+0x114>
 800ac7e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ac82:	2a2e      	cmp	r2, #46	; 0x2e
 800ac84:	d014      	beq.n	800acb0 <__gethex+0x230>
 800ac86:	2b20      	cmp	r3, #32
 800ac88:	d106      	bne.n	800ac98 <__gethex+0x218>
 800ac8a:	9b01      	ldr	r3, [sp, #4]
 800ac8c:	f843 bb04 	str.w	fp, [r3], #4
 800ac90:	f04f 0b00 	mov.w	fp, #0
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	465b      	mov	r3, fp
 800ac98:	7828      	ldrb	r0, [r5, #0]
 800ac9a:	9303      	str	r3, [sp, #12]
 800ac9c:	f7ff feda 	bl	800aa54 <__hexdig_fun>
 800aca0:	9b03      	ldr	r3, [sp, #12]
 800aca2:	f000 000f 	and.w	r0, r0, #15
 800aca6:	4098      	lsls	r0, r3
 800aca8:	ea4b 0b00 	orr.w	fp, fp, r0
 800acac:	3304      	adds	r3, #4
 800acae:	e7a1      	b.n	800abf4 <__gethex+0x174>
 800acb0:	45a8      	cmp	r8, r5
 800acb2:	d8e8      	bhi.n	800ac86 <__gethex+0x206>
 800acb4:	2201      	movs	r2, #1
 800acb6:	4628      	mov	r0, r5
 800acb8:	9303      	str	r3, [sp, #12]
 800acba:	f7ff fe33 	bl	800a924 <strncmp>
 800acbe:	4926      	ldr	r1, [pc, #152]	; (800ad58 <__gethex+0x2d8>)
 800acc0:	9b03      	ldr	r3, [sp, #12]
 800acc2:	2800      	cmp	r0, #0
 800acc4:	d1df      	bne.n	800ac86 <__gethex+0x206>
 800acc6:	e795      	b.n	800abf4 <__gethex+0x174>
 800acc8:	f04f 0b03 	mov.w	fp, #3
 800accc:	e7c5      	b.n	800ac5a <__gethex+0x1da>
 800acce:	da0b      	bge.n	800ace8 <__gethex+0x268>
 800acd0:	eba5 0800 	sub.w	r8, r5, r0
 800acd4:	4621      	mov	r1, r4
 800acd6:	4642      	mov	r2, r8
 800acd8:	4648      	mov	r0, r9
 800acda:	f7fe fb19 	bl	8009310 <__lshift>
 800acde:	eba6 0608 	sub.w	r6, r6, r8
 800ace2:	4604      	mov	r4, r0
 800ace4:	f100 0a14 	add.w	sl, r0, #20
 800ace8:	f04f 0b00 	mov.w	fp, #0
 800acec:	e7ba      	b.n	800ac64 <__gethex+0x1e4>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	42b3      	cmp	r3, r6
 800acf2:	dd73      	ble.n	800addc <__gethex+0x35c>
 800acf4:	1b9e      	subs	r6, r3, r6
 800acf6:	42b5      	cmp	r5, r6
 800acf8:	dc34      	bgt.n	800ad64 <__gethex+0x2e4>
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d023      	beq.n	800ad48 <__gethex+0x2c8>
 800ad00:	2b03      	cmp	r3, #3
 800ad02:	d025      	beq.n	800ad50 <__gethex+0x2d0>
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d115      	bne.n	800ad34 <__gethex+0x2b4>
 800ad08:	42b5      	cmp	r5, r6
 800ad0a:	d113      	bne.n	800ad34 <__gethex+0x2b4>
 800ad0c:	2d01      	cmp	r5, #1
 800ad0e:	d10b      	bne.n	800ad28 <__gethex+0x2a8>
 800ad10:	9a02      	ldr	r2, [sp, #8]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6013      	str	r3, [r2, #0]
 800ad16:	2301      	movs	r3, #1
 800ad18:	6123      	str	r3, [r4, #16]
 800ad1a:	f8ca 3000 	str.w	r3, [sl]
 800ad1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad20:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ad24:	601c      	str	r4, [r3, #0]
 800ad26:	e735      	b.n	800ab94 <__gethex+0x114>
 800ad28:	1e69      	subs	r1, r5, #1
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f7fe fd22 	bl	8009774 <__any_on>
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d1ed      	bne.n	800ad10 <__gethex+0x290>
 800ad34:	4621      	mov	r1, r4
 800ad36:	4648      	mov	r0, r9
 800ad38:	f7fe f8d0 	bl	8008edc <_Bfree>
 800ad3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad3e:	2300      	movs	r3, #0
 800ad40:	6013      	str	r3, [r2, #0]
 800ad42:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ad46:	e725      	b.n	800ab94 <__gethex+0x114>
 800ad48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1f2      	bne.n	800ad34 <__gethex+0x2b4>
 800ad4e:	e7df      	b.n	800ad10 <__gethex+0x290>
 800ad50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1dc      	bne.n	800ad10 <__gethex+0x290>
 800ad56:	e7ed      	b.n	800ad34 <__gethex+0x2b4>
 800ad58:	0800bea4 	.word	0x0800bea4
 800ad5c:	0800c357 	.word	0x0800c357
 800ad60:	0800c66e 	.word	0x0800c66e
 800ad64:	f106 38ff 	add.w	r8, r6, #4294967295
 800ad68:	f1bb 0f00 	cmp.w	fp, #0
 800ad6c:	d133      	bne.n	800add6 <__gethex+0x356>
 800ad6e:	f1b8 0f00 	cmp.w	r8, #0
 800ad72:	d004      	beq.n	800ad7e <__gethex+0x2fe>
 800ad74:	4641      	mov	r1, r8
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7fe fcfc 	bl	8009774 <__any_on>
 800ad7c:	4683      	mov	fp, r0
 800ad7e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ad82:	2301      	movs	r3, #1
 800ad84:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad88:	f008 081f 	and.w	r8, r8, #31
 800ad8c:	fa03 f308 	lsl.w	r3, r3, r8
 800ad90:	4213      	tst	r3, r2
 800ad92:	4631      	mov	r1, r6
 800ad94:	4620      	mov	r0, r4
 800ad96:	bf18      	it	ne
 800ad98:	f04b 0b02 	orrne.w	fp, fp, #2
 800ad9c:	1bad      	subs	r5, r5, r6
 800ad9e:	f7ff fe07 	bl	800a9b0 <rshift>
 800ada2:	687e      	ldr	r6, [r7, #4]
 800ada4:	f04f 0802 	mov.w	r8, #2
 800ada8:	f1bb 0f00 	cmp.w	fp, #0
 800adac:	d04a      	beq.n	800ae44 <__gethex+0x3c4>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d016      	beq.n	800ade2 <__gethex+0x362>
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d018      	beq.n	800adea <__gethex+0x36a>
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d109      	bne.n	800add0 <__gethex+0x350>
 800adbc:	f01b 0f02 	tst.w	fp, #2
 800adc0:	d006      	beq.n	800add0 <__gethex+0x350>
 800adc2:	f8da 3000 	ldr.w	r3, [sl]
 800adc6:	ea4b 0b03 	orr.w	fp, fp, r3
 800adca:	f01b 0f01 	tst.w	fp, #1
 800adce:	d10f      	bne.n	800adf0 <__gethex+0x370>
 800add0:	f048 0810 	orr.w	r8, r8, #16
 800add4:	e036      	b.n	800ae44 <__gethex+0x3c4>
 800add6:	f04f 0b01 	mov.w	fp, #1
 800adda:	e7d0      	b.n	800ad7e <__gethex+0x2fe>
 800addc:	f04f 0801 	mov.w	r8, #1
 800ade0:	e7e2      	b.n	800ada8 <__gethex+0x328>
 800ade2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ade4:	f1c3 0301 	rsb	r3, r3, #1
 800ade8:	930f      	str	r3, [sp, #60]	; 0x3c
 800adea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0ef      	beq.n	800add0 <__gethex+0x350>
 800adf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800adf4:	f104 0214 	add.w	r2, r4, #20
 800adf8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ae02:	2300      	movs	r3, #0
 800ae04:	4694      	mov	ip, r2
 800ae06:	f852 1b04 	ldr.w	r1, [r2], #4
 800ae0a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ae0e:	d01e      	beq.n	800ae4e <__gethex+0x3ce>
 800ae10:	3101      	adds	r1, #1
 800ae12:	f8cc 1000 	str.w	r1, [ip]
 800ae16:	f1b8 0f02 	cmp.w	r8, #2
 800ae1a:	f104 0214 	add.w	r2, r4, #20
 800ae1e:	d13d      	bne.n	800ae9c <__gethex+0x41c>
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	42ab      	cmp	r3, r5
 800ae26:	d10b      	bne.n	800ae40 <__gethex+0x3c0>
 800ae28:	1169      	asrs	r1, r5, #5
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	f005 051f 	and.w	r5, r5, #31
 800ae30:	fa03 f505 	lsl.w	r5, r3, r5
 800ae34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae38:	421d      	tst	r5, r3
 800ae3a:	bf18      	it	ne
 800ae3c:	f04f 0801 	movne.w	r8, #1
 800ae40:	f048 0820 	orr.w	r8, r8, #32
 800ae44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae46:	601c      	str	r4, [r3, #0]
 800ae48:	9b02      	ldr	r3, [sp, #8]
 800ae4a:	601e      	str	r6, [r3, #0]
 800ae4c:	e6a2      	b.n	800ab94 <__gethex+0x114>
 800ae4e:	4290      	cmp	r0, r2
 800ae50:	f842 3c04 	str.w	r3, [r2, #-4]
 800ae54:	d8d6      	bhi.n	800ae04 <__gethex+0x384>
 800ae56:	68a2      	ldr	r2, [r4, #8]
 800ae58:	4593      	cmp	fp, r2
 800ae5a:	db17      	blt.n	800ae8c <__gethex+0x40c>
 800ae5c:	6861      	ldr	r1, [r4, #4]
 800ae5e:	4648      	mov	r0, r9
 800ae60:	3101      	adds	r1, #1
 800ae62:	f7fd fffb 	bl	8008e5c <_Balloc>
 800ae66:	4682      	mov	sl, r0
 800ae68:	b918      	cbnz	r0, 800ae72 <__gethex+0x3f2>
 800ae6a:	4b1b      	ldr	r3, [pc, #108]	; (800aed8 <__gethex+0x458>)
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	2184      	movs	r1, #132	; 0x84
 800ae70:	e6b3      	b.n	800abda <__gethex+0x15a>
 800ae72:	6922      	ldr	r2, [r4, #16]
 800ae74:	3202      	adds	r2, #2
 800ae76:	f104 010c 	add.w	r1, r4, #12
 800ae7a:	0092      	lsls	r2, r2, #2
 800ae7c:	300c      	adds	r0, #12
 800ae7e:	f7fd f910 	bl	80080a2 <memcpy>
 800ae82:	4621      	mov	r1, r4
 800ae84:	4648      	mov	r0, r9
 800ae86:	f7fe f829 	bl	8008edc <_Bfree>
 800ae8a:	4654      	mov	r4, sl
 800ae8c:	6922      	ldr	r2, [r4, #16]
 800ae8e:	1c51      	adds	r1, r2, #1
 800ae90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ae94:	6121      	str	r1, [r4, #16]
 800ae96:	2101      	movs	r1, #1
 800ae98:	6151      	str	r1, [r2, #20]
 800ae9a:	e7bc      	b.n	800ae16 <__gethex+0x396>
 800ae9c:	6921      	ldr	r1, [r4, #16]
 800ae9e:	4559      	cmp	r1, fp
 800aea0:	dd0b      	ble.n	800aeba <__gethex+0x43a>
 800aea2:	2101      	movs	r1, #1
 800aea4:	4620      	mov	r0, r4
 800aea6:	f7ff fd83 	bl	800a9b0 <rshift>
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	3601      	adds	r6, #1
 800aeae:	42b3      	cmp	r3, r6
 800aeb0:	f6ff aedb 	blt.w	800ac6a <__gethex+0x1ea>
 800aeb4:	f04f 0801 	mov.w	r8, #1
 800aeb8:	e7c2      	b.n	800ae40 <__gethex+0x3c0>
 800aeba:	f015 051f 	ands.w	r5, r5, #31
 800aebe:	d0f9      	beq.n	800aeb4 <__gethex+0x434>
 800aec0:	9b01      	ldr	r3, [sp, #4]
 800aec2:	441a      	add	r2, r3
 800aec4:	f1c5 0520 	rsb	r5, r5, #32
 800aec8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800aecc:	f7fe f8b8 	bl	8009040 <__hi0bits>
 800aed0:	42a8      	cmp	r0, r5
 800aed2:	dbe6      	blt.n	800aea2 <__gethex+0x422>
 800aed4:	e7ee      	b.n	800aeb4 <__gethex+0x434>
 800aed6:	bf00      	nop
 800aed8:	0800c357 	.word	0x0800c357

0800aedc <L_shift>:
 800aedc:	f1c2 0208 	rsb	r2, r2, #8
 800aee0:	0092      	lsls	r2, r2, #2
 800aee2:	b570      	push	{r4, r5, r6, lr}
 800aee4:	f1c2 0620 	rsb	r6, r2, #32
 800aee8:	6843      	ldr	r3, [r0, #4]
 800aeea:	6804      	ldr	r4, [r0, #0]
 800aeec:	fa03 f506 	lsl.w	r5, r3, r6
 800aef0:	432c      	orrs	r4, r5
 800aef2:	40d3      	lsrs	r3, r2
 800aef4:	6004      	str	r4, [r0, #0]
 800aef6:	f840 3f04 	str.w	r3, [r0, #4]!
 800aefa:	4288      	cmp	r0, r1
 800aefc:	d3f4      	bcc.n	800aee8 <L_shift+0xc>
 800aefe:	bd70      	pop	{r4, r5, r6, pc}

0800af00 <__match>:
 800af00:	b530      	push	{r4, r5, lr}
 800af02:	6803      	ldr	r3, [r0, #0]
 800af04:	3301      	adds	r3, #1
 800af06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af0a:	b914      	cbnz	r4, 800af12 <__match+0x12>
 800af0c:	6003      	str	r3, [r0, #0]
 800af0e:	2001      	movs	r0, #1
 800af10:	bd30      	pop	{r4, r5, pc}
 800af12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800af1a:	2d19      	cmp	r5, #25
 800af1c:	bf98      	it	ls
 800af1e:	3220      	addls	r2, #32
 800af20:	42a2      	cmp	r2, r4
 800af22:	d0f0      	beq.n	800af06 <__match+0x6>
 800af24:	2000      	movs	r0, #0
 800af26:	e7f3      	b.n	800af10 <__match+0x10>

0800af28 <__hexnan>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	680b      	ldr	r3, [r1, #0]
 800af2e:	6801      	ldr	r1, [r0, #0]
 800af30:	115e      	asrs	r6, r3, #5
 800af32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800af36:	f013 031f 	ands.w	r3, r3, #31
 800af3a:	b087      	sub	sp, #28
 800af3c:	bf18      	it	ne
 800af3e:	3604      	addne	r6, #4
 800af40:	2500      	movs	r5, #0
 800af42:	1f37      	subs	r7, r6, #4
 800af44:	4682      	mov	sl, r0
 800af46:	4690      	mov	r8, r2
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	f846 5c04 	str.w	r5, [r6, #-4]
 800af4e:	46b9      	mov	r9, r7
 800af50:	463c      	mov	r4, r7
 800af52:	9502      	str	r5, [sp, #8]
 800af54:	46ab      	mov	fp, r5
 800af56:	784a      	ldrb	r2, [r1, #1]
 800af58:	1c4b      	adds	r3, r1, #1
 800af5a:	9303      	str	r3, [sp, #12]
 800af5c:	b342      	cbz	r2, 800afb0 <__hexnan+0x88>
 800af5e:	4610      	mov	r0, r2
 800af60:	9105      	str	r1, [sp, #20]
 800af62:	9204      	str	r2, [sp, #16]
 800af64:	f7ff fd76 	bl	800aa54 <__hexdig_fun>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d14f      	bne.n	800b00c <__hexnan+0xe4>
 800af6c:	9a04      	ldr	r2, [sp, #16]
 800af6e:	9905      	ldr	r1, [sp, #20]
 800af70:	2a20      	cmp	r2, #32
 800af72:	d818      	bhi.n	800afa6 <__hexnan+0x7e>
 800af74:	9b02      	ldr	r3, [sp, #8]
 800af76:	459b      	cmp	fp, r3
 800af78:	dd13      	ble.n	800afa2 <__hexnan+0x7a>
 800af7a:	454c      	cmp	r4, r9
 800af7c:	d206      	bcs.n	800af8c <__hexnan+0x64>
 800af7e:	2d07      	cmp	r5, #7
 800af80:	dc04      	bgt.n	800af8c <__hexnan+0x64>
 800af82:	462a      	mov	r2, r5
 800af84:	4649      	mov	r1, r9
 800af86:	4620      	mov	r0, r4
 800af88:	f7ff ffa8 	bl	800aedc <L_shift>
 800af8c:	4544      	cmp	r4, r8
 800af8e:	d950      	bls.n	800b032 <__hexnan+0x10a>
 800af90:	2300      	movs	r3, #0
 800af92:	f1a4 0904 	sub.w	r9, r4, #4
 800af96:	f844 3c04 	str.w	r3, [r4, #-4]
 800af9a:	f8cd b008 	str.w	fp, [sp, #8]
 800af9e:	464c      	mov	r4, r9
 800afa0:	461d      	mov	r5, r3
 800afa2:	9903      	ldr	r1, [sp, #12]
 800afa4:	e7d7      	b.n	800af56 <__hexnan+0x2e>
 800afa6:	2a29      	cmp	r2, #41	; 0x29
 800afa8:	d155      	bne.n	800b056 <__hexnan+0x12e>
 800afaa:	3102      	adds	r1, #2
 800afac:	f8ca 1000 	str.w	r1, [sl]
 800afb0:	f1bb 0f00 	cmp.w	fp, #0
 800afb4:	d04f      	beq.n	800b056 <__hexnan+0x12e>
 800afb6:	454c      	cmp	r4, r9
 800afb8:	d206      	bcs.n	800afc8 <__hexnan+0xa0>
 800afba:	2d07      	cmp	r5, #7
 800afbc:	dc04      	bgt.n	800afc8 <__hexnan+0xa0>
 800afbe:	462a      	mov	r2, r5
 800afc0:	4649      	mov	r1, r9
 800afc2:	4620      	mov	r0, r4
 800afc4:	f7ff ff8a 	bl	800aedc <L_shift>
 800afc8:	4544      	cmp	r4, r8
 800afca:	d934      	bls.n	800b036 <__hexnan+0x10e>
 800afcc:	f1a8 0204 	sub.w	r2, r8, #4
 800afd0:	4623      	mov	r3, r4
 800afd2:	f853 1b04 	ldr.w	r1, [r3], #4
 800afd6:	f842 1f04 	str.w	r1, [r2, #4]!
 800afda:	429f      	cmp	r7, r3
 800afdc:	d2f9      	bcs.n	800afd2 <__hexnan+0xaa>
 800afde:	1b3b      	subs	r3, r7, r4
 800afe0:	f023 0303 	bic.w	r3, r3, #3
 800afe4:	3304      	adds	r3, #4
 800afe6:	3e03      	subs	r6, #3
 800afe8:	3401      	adds	r4, #1
 800afea:	42a6      	cmp	r6, r4
 800afec:	bf38      	it	cc
 800afee:	2304      	movcc	r3, #4
 800aff0:	4443      	add	r3, r8
 800aff2:	2200      	movs	r2, #0
 800aff4:	f843 2b04 	str.w	r2, [r3], #4
 800aff8:	429f      	cmp	r7, r3
 800affa:	d2fb      	bcs.n	800aff4 <__hexnan+0xcc>
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	b91b      	cbnz	r3, 800b008 <__hexnan+0xe0>
 800b000:	4547      	cmp	r7, r8
 800b002:	d126      	bne.n	800b052 <__hexnan+0x12a>
 800b004:	2301      	movs	r3, #1
 800b006:	603b      	str	r3, [r7, #0]
 800b008:	2005      	movs	r0, #5
 800b00a:	e025      	b.n	800b058 <__hexnan+0x130>
 800b00c:	3501      	adds	r5, #1
 800b00e:	2d08      	cmp	r5, #8
 800b010:	f10b 0b01 	add.w	fp, fp, #1
 800b014:	dd06      	ble.n	800b024 <__hexnan+0xfc>
 800b016:	4544      	cmp	r4, r8
 800b018:	d9c3      	bls.n	800afa2 <__hexnan+0x7a>
 800b01a:	2300      	movs	r3, #0
 800b01c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b020:	2501      	movs	r5, #1
 800b022:	3c04      	subs	r4, #4
 800b024:	6822      	ldr	r2, [r4, #0]
 800b026:	f000 000f 	and.w	r0, r0, #15
 800b02a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b02e:	6020      	str	r0, [r4, #0]
 800b030:	e7b7      	b.n	800afa2 <__hexnan+0x7a>
 800b032:	2508      	movs	r5, #8
 800b034:	e7b5      	b.n	800afa2 <__hexnan+0x7a>
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d0df      	beq.n	800affc <__hexnan+0xd4>
 800b03c:	f1c3 0320 	rsb	r3, r3, #32
 800b040:	f04f 32ff 	mov.w	r2, #4294967295
 800b044:	40da      	lsrs	r2, r3
 800b046:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b04a:	4013      	ands	r3, r2
 800b04c:	f846 3c04 	str.w	r3, [r6, #-4]
 800b050:	e7d4      	b.n	800affc <__hexnan+0xd4>
 800b052:	3f04      	subs	r7, #4
 800b054:	e7d2      	b.n	800affc <__hexnan+0xd4>
 800b056:	2004      	movs	r0, #4
 800b058:	b007      	add	sp, #28
 800b05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b05e <__ascii_mbtowc>:
 800b05e:	b082      	sub	sp, #8
 800b060:	b901      	cbnz	r1, 800b064 <__ascii_mbtowc+0x6>
 800b062:	a901      	add	r1, sp, #4
 800b064:	b142      	cbz	r2, 800b078 <__ascii_mbtowc+0x1a>
 800b066:	b14b      	cbz	r3, 800b07c <__ascii_mbtowc+0x1e>
 800b068:	7813      	ldrb	r3, [r2, #0]
 800b06a:	600b      	str	r3, [r1, #0]
 800b06c:	7812      	ldrb	r2, [r2, #0]
 800b06e:	1e10      	subs	r0, r2, #0
 800b070:	bf18      	it	ne
 800b072:	2001      	movne	r0, #1
 800b074:	b002      	add	sp, #8
 800b076:	4770      	bx	lr
 800b078:	4610      	mov	r0, r2
 800b07a:	e7fb      	b.n	800b074 <__ascii_mbtowc+0x16>
 800b07c:	f06f 0001 	mvn.w	r0, #1
 800b080:	e7f8      	b.n	800b074 <__ascii_mbtowc+0x16>

0800b082 <_realloc_r>:
 800b082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b086:	4680      	mov	r8, r0
 800b088:	4614      	mov	r4, r2
 800b08a:	460e      	mov	r6, r1
 800b08c:	b921      	cbnz	r1, 800b098 <_realloc_r+0x16>
 800b08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b092:	4611      	mov	r1, r2
 800b094:	f7fb bece 	b.w	8006e34 <_malloc_r>
 800b098:	b92a      	cbnz	r2, 800b0a6 <_realloc_r+0x24>
 800b09a:	f7fd fe93 	bl	8008dc4 <_free_r>
 800b09e:	4625      	mov	r5, r4
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a6:	f000 f83b 	bl	800b120 <_malloc_usable_size_r>
 800b0aa:	4284      	cmp	r4, r0
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	d802      	bhi.n	800b0b6 <_realloc_r+0x34>
 800b0b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0b4:	d812      	bhi.n	800b0dc <_realloc_r+0x5a>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4640      	mov	r0, r8
 800b0ba:	f7fb febb 	bl	8006e34 <_malloc_r>
 800b0be:	4605      	mov	r5, r0
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d0ed      	beq.n	800b0a0 <_realloc_r+0x1e>
 800b0c4:	42bc      	cmp	r4, r7
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	bf28      	it	cs
 800b0cc:	463a      	movcs	r2, r7
 800b0ce:	f7fc ffe8 	bl	80080a2 <memcpy>
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	f7fd fe75 	bl	8008dc4 <_free_r>
 800b0da:	e7e1      	b.n	800b0a0 <_realloc_r+0x1e>
 800b0dc:	4635      	mov	r5, r6
 800b0de:	e7df      	b.n	800b0a0 <_realloc_r+0x1e>

0800b0e0 <__ascii_wctomb>:
 800b0e0:	b149      	cbz	r1, 800b0f6 <__ascii_wctomb+0x16>
 800b0e2:	2aff      	cmp	r2, #255	; 0xff
 800b0e4:	bf85      	ittet	hi
 800b0e6:	238a      	movhi	r3, #138	; 0x8a
 800b0e8:	6003      	strhi	r3, [r0, #0]
 800b0ea:	700a      	strbls	r2, [r1, #0]
 800b0ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800b0f0:	bf98      	it	ls
 800b0f2:	2001      	movls	r0, #1
 800b0f4:	4770      	bx	lr
 800b0f6:	4608      	mov	r0, r1
 800b0f8:	4770      	bx	lr
	...

0800b0fc <fiprintf>:
 800b0fc:	b40e      	push	{r1, r2, r3}
 800b0fe:	b503      	push	{r0, r1, lr}
 800b100:	4601      	mov	r1, r0
 800b102:	ab03      	add	r3, sp, #12
 800b104:	4805      	ldr	r0, [pc, #20]	; (800b11c <fiprintf+0x20>)
 800b106:	f853 2b04 	ldr.w	r2, [r3], #4
 800b10a:	6800      	ldr	r0, [r0, #0]
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	f000 f839 	bl	800b184 <_vfiprintf_r>
 800b112:	b002      	add	sp, #8
 800b114:	f85d eb04 	ldr.w	lr, [sp], #4
 800b118:	b003      	add	sp, #12
 800b11a:	4770      	bx	lr
 800b11c:	20000070 	.word	0x20000070

0800b120 <_malloc_usable_size_r>:
 800b120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b124:	1f18      	subs	r0, r3, #4
 800b126:	2b00      	cmp	r3, #0
 800b128:	bfbc      	itt	lt
 800b12a:	580b      	ldrlt	r3, [r1, r0]
 800b12c:	18c0      	addlt	r0, r0, r3
 800b12e:	4770      	bx	lr

0800b130 <__sfputc_r>:
 800b130:	6893      	ldr	r3, [r2, #8]
 800b132:	3b01      	subs	r3, #1
 800b134:	2b00      	cmp	r3, #0
 800b136:	b410      	push	{r4}
 800b138:	6093      	str	r3, [r2, #8]
 800b13a:	da08      	bge.n	800b14e <__sfputc_r+0x1e>
 800b13c:	6994      	ldr	r4, [r2, #24]
 800b13e:	42a3      	cmp	r3, r4
 800b140:	db01      	blt.n	800b146 <__sfputc_r+0x16>
 800b142:	290a      	cmp	r1, #10
 800b144:	d103      	bne.n	800b14e <__sfputc_r+0x1e>
 800b146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b14a:	f000 b935 	b.w	800b3b8 <__swbuf_r>
 800b14e:	6813      	ldr	r3, [r2, #0]
 800b150:	1c58      	adds	r0, r3, #1
 800b152:	6010      	str	r0, [r2, #0]
 800b154:	7019      	strb	r1, [r3, #0]
 800b156:	4608      	mov	r0, r1
 800b158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <__sfputs_r>:
 800b15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b160:	4606      	mov	r6, r0
 800b162:	460f      	mov	r7, r1
 800b164:	4614      	mov	r4, r2
 800b166:	18d5      	adds	r5, r2, r3
 800b168:	42ac      	cmp	r4, r5
 800b16a:	d101      	bne.n	800b170 <__sfputs_r+0x12>
 800b16c:	2000      	movs	r0, #0
 800b16e:	e007      	b.n	800b180 <__sfputs_r+0x22>
 800b170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b174:	463a      	mov	r2, r7
 800b176:	4630      	mov	r0, r6
 800b178:	f7ff ffda 	bl	800b130 <__sfputc_r>
 800b17c:	1c43      	adds	r3, r0, #1
 800b17e:	d1f3      	bne.n	800b168 <__sfputs_r+0xa>
 800b180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b184 <_vfiprintf_r>:
 800b184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b188:	460d      	mov	r5, r1
 800b18a:	b09d      	sub	sp, #116	; 0x74
 800b18c:	4614      	mov	r4, r2
 800b18e:	4698      	mov	r8, r3
 800b190:	4606      	mov	r6, r0
 800b192:	b118      	cbz	r0, 800b19c <_vfiprintf_r+0x18>
 800b194:	6a03      	ldr	r3, [r0, #32]
 800b196:	b90b      	cbnz	r3, 800b19c <_vfiprintf_r+0x18>
 800b198:	f7fc fdda 	bl	8007d50 <__sinit>
 800b19c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b19e:	07d9      	lsls	r1, r3, #31
 800b1a0:	d405      	bmi.n	800b1ae <_vfiprintf_r+0x2a>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	059a      	lsls	r2, r3, #22
 800b1a6:	d402      	bmi.n	800b1ae <_vfiprintf_r+0x2a>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1aa:	f7fc ff70 	bl	800808e <__retarget_lock_acquire_recursive>
 800b1ae:	89ab      	ldrh	r3, [r5, #12]
 800b1b0:	071b      	lsls	r3, r3, #28
 800b1b2:	d501      	bpl.n	800b1b8 <_vfiprintf_r+0x34>
 800b1b4:	692b      	ldr	r3, [r5, #16]
 800b1b6:	b99b      	cbnz	r3, 800b1e0 <_vfiprintf_r+0x5c>
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f000 f93a 	bl	800b434 <__swsetup_r>
 800b1c0:	b170      	cbz	r0, 800b1e0 <_vfiprintf_r+0x5c>
 800b1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1c4:	07dc      	lsls	r4, r3, #31
 800b1c6:	d504      	bpl.n	800b1d2 <_vfiprintf_r+0x4e>
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	b01d      	add	sp, #116	; 0x74
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	89ab      	ldrh	r3, [r5, #12]
 800b1d4:	0598      	lsls	r0, r3, #22
 800b1d6:	d4f7      	bmi.n	800b1c8 <_vfiprintf_r+0x44>
 800b1d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1da:	f7fc ff59 	bl	8008090 <__retarget_lock_release_recursive>
 800b1de:	e7f3      	b.n	800b1c8 <_vfiprintf_r+0x44>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ee:	2330      	movs	r3, #48	; 0x30
 800b1f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b3a4 <_vfiprintf_r+0x220>
 800b1f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1f8:	f04f 0901 	mov.w	r9, #1
 800b1fc:	4623      	mov	r3, r4
 800b1fe:	469a      	mov	sl, r3
 800b200:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b204:	b10a      	cbz	r2, 800b20a <_vfiprintf_r+0x86>
 800b206:	2a25      	cmp	r2, #37	; 0x25
 800b208:	d1f9      	bne.n	800b1fe <_vfiprintf_r+0x7a>
 800b20a:	ebba 0b04 	subs.w	fp, sl, r4
 800b20e:	d00b      	beq.n	800b228 <_vfiprintf_r+0xa4>
 800b210:	465b      	mov	r3, fp
 800b212:	4622      	mov	r2, r4
 800b214:	4629      	mov	r1, r5
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ffa1 	bl	800b15e <__sfputs_r>
 800b21c:	3001      	adds	r0, #1
 800b21e:	f000 80a9 	beq.w	800b374 <_vfiprintf_r+0x1f0>
 800b222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b224:	445a      	add	r2, fp
 800b226:	9209      	str	r2, [sp, #36]	; 0x24
 800b228:	f89a 3000 	ldrb.w	r3, [sl]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f000 80a1 	beq.w	800b374 <_vfiprintf_r+0x1f0>
 800b232:	2300      	movs	r3, #0
 800b234:	f04f 32ff 	mov.w	r2, #4294967295
 800b238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b23c:	f10a 0a01 	add.w	sl, sl, #1
 800b240:	9304      	str	r3, [sp, #16]
 800b242:	9307      	str	r3, [sp, #28]
 800b244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b248:	931a      	str	r3, [sp, #104]	; 0x68
 800b24a:	4654      	mov	r4, sl
 800b24c:	2205      	movs	r2, #5
 800b24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b252:	4854      	ldr	r0, [pc, #336]	; (800b3a4 <_vfiprintf_r+0x220>)
 800b254:	f7f4 ffbc 	bl	80001d0 <memchr>
 800b258:	9a04      	ldr	r2, [sp, #16]
 800b25a:	b9d8      	cbnz	r0, 800b294 <_vfiprintf_r+0x110>
 800b25c:	06d1      	lsls	r1, r2, #27
 800b25e:	bf44      	itt	mi
 800b260:	2320      	movmi	r3, #32
 800b262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b266:	0713      	lsls	r3, r2, #28
 800b268:	bf44      	itt	mi
 800b26a:	232b      	movmi	r3, #43	; 0x2b
 800b26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b270:	f89a 3000 	ldrb.w	r3, [sl]
 800b274:	2b2a      	cmp	r3, #42	; 0x2a
 800b276:	d015      	beq.n	800b2a4 <_vfiprintf_r+0x120>
 800b278:	9a07      	ldr	r2, [sp, #28]
 800b27a:	4654      	mov	r4, sl
 800b27c:	2000      	movs	r0, #0
 800b27e:	f04f 0c0a 	mov.w	ip, #10
 800b282:	4621      	mov	r1, r4
 800b284:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b288:	3b30      	subs	r3, #48	; 0x30
 800b28a:	2b09      	cmp	r3, #9
 800b28c:	d94d      	bls.n	800b32a <_vfiprintf_r+0x1a6>
 800b28e:	b1b0      	cbz	r0, 800b2be <_vfiprintf_r+0x13a>
 800b290:	9207      	str	r2, [sp, #28]
 800b292:	e014      	b.n	800b2be <_vfiprintf_r+0x13a>
 800b294:	eba0 0308 	sub.w	r3, r0, r8
 800b298:	fa09 f303 	lsl.w	r3, r9, r3
 800b29c:	4313      	orrs	r3, r2
 800b29e:	9304      	str	r3, [sp, #16]
 800b2a0:	46a2      	mov	sl, r4
 800b2a2:	e7d2      	b.n	800b24a <_vfiprintf_r+0xc6>
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	1d19      	adds	r1, r3, #4
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	9103      	str	r1, [sp, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	bfbb      	ittet	lt
 800b2b0:	425b      	neglt	r3, r3
 800b2b2:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b6:	9307      	strge	r3, [sp, #28]
 800b2b8:	9307      	strlt	r3, [sp, #28]
 800b2ba:	bfb8      	it	lt
 800b2bc:	9204      	strlt	r2, [sp, #16]
 800b2be:	7823      	ldrb	r3, [r4, #0]
 800b2c0:	2b2e      	cmp	r3, #46	; 0x2e
 800b2c2:	d10c      	bne.n	800b2de <_vfiprintf_r+0x15a>
 800b2c4:	7863      	ldrb	r3, [r4, #1]
 800b2c6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c8:	d134      	bne.n	800b334 <_vfiprintf_r+0x1b0>
 800b2ca:	9b03      	ldr	r3, [sp, #12]
 800b2cc:	1d1a      	adds	r2, r3, #4
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	9203      	str	r2, [sp, #12]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	bfb8      	it	lt
 800b2d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2da:	3402      	adds	r4, #2
 800b2dc:	9305      	str	r3, [sp, #20]
 800b2de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b3b4 <_vfiprintf_r+0x230>
 800b2e2:	7821      	ldrb	r1, [r4, #0]
 800b2e4:	2203      	movs	r2, #3
 800b2e6:	4650      	mov	r0, sl
 800b2e8:	f7f4 ff72 	bl	80001d0 <memchr>
 800b2ec:	b138      	cbz	r0, 800b2fe <_vfiprintf_r+0x17a>
 800b2ee:	9b04      	ldr	r3, [sp, #16]
 800b2f0:	eba0 000a 	sub.w	r0, r0, sl
 800b2f4:	2240      	movs	r2, #64	; 0x40
 800b2f6:	4082      	lsls	r2, r0
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	3401      	adds	r4, #1
 800b2fc:	9304      	str	r3, [sp, #16]
 800b2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b302:	4829      	ldr	r0, [pc, #164]	; (800b3a8 <_vfiprintf_r+0x224>)
 800b304:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b308:	2206      	movs	r2, #6
 800b30a:	f7f4 ff61 	bl	80001d0 <memchr>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d03f      	beq.n	800b392 <_vfiprintf_r+0x20e>
 800b312:	4b26      	ldr	r3, [pc, #152]	; (800b3ac <_vfiprintf_r+0x228>)
 800b314:	bb1b      	cbnz	r3, 800b35e <_vfiprintf_r+0x1da>
 800b316:	9b03      	ldr	r3, [sp, #12]
 800b318:	3307      	adds	r3, #7
 800b31a:	f023 0307 	bic.w	r3, r3, #7
 800b31e:	3308      	adds	r3, #8
 800b320:	9303      	str	r3, [sp, #12]
 800b322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b324:	443b      	add	r3, r7
 800b326:	9309      	str	r3, [sp, #36]	; 0x24
 800b328:	e768      	b.n	800b1fc <_vfiprintf_r+0x78>
 800b32a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32e:	460c      	mov	r4, r1
 800b330:	2001      	movs	r0, #1
 800b332:	e7a6      	b.n	800b282 <_vfiprintf_r+0xfe>
 800b334:	2300      	movs	r3, #0
 800b336:	3401      	adds	r4, #1
 800b338:	9305      	str	r3, [sp, #20]
 800b33a:	4619      	mov	r1, r3
 800b33c:	f04f 0c0a 	mov.w	ip, #10
 800b340:	4620      	mov	r0, r4
 800b342:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b346:	3a30      	subs	r2, #48	; 0x30
 800b348:	2a09      	cmp	r2, #9
 800b34a:	d903      	bls.n	800b354 <_vfiprintf_r+0x1d0>
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d0c6      	beq.n	800b2de <_vfiprintf_r+0x15a>
 800b350:	9105      	str	r1, [sp, #20]
 800b352:	e7c4      	b.n	800b2de <_vfiprintf_r+0x15a>
 800b354:	fb0c 2101 	mla	r1, ip, r1, r2
 800b358:	4604      	mov	r4, r0
 800b35a:	2301      	movs	r3, #1
 800b35c:	e7f0      	b.n	800b340 <_vfiprintf_r+0x1bc>
 800b35e:	ab03      	add	r3, sp, #12
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	462a      	mov	r2, r5
 800b364:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <_vfiprintf_r+0x22c>)
 800b366:	a904      	add	r1, sp, #16
 800b368:	4630      	mov	r0, r6
 800b36a:	f7fb fe8f 	bl	800708c <_printf_float>
 800b36e:	4607      	mov	r7, r0
 800b370:	1c78      	adds	r0, r7, #1
 800b372:	d1d6      	bne.n	800b322 <_vfiprintf_r+0x19e>
 800b374:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b376:	07d9      	lsls	r1, r3, #31
 800b378:	d405      	bmi.n	800b386 <_vfiprintf_r+0x202>
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	059a      	lsls	r2, r3, #22
 800b37e:	d402      	bmi.n	800b386 <_vfiprintf_r+0x202>
 800b380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b382:	f7fc fe85 	bl	8008090 <__retarget_lock_release_recursive>
 800b386:	89ab      	ldrh	r3, [r5, #12]
 800b388:	065b      	lsls	r3, r3, #25
 800b38a:	f53f af1d 	bmi.w	800b1c8 <_vfiprintf_r+0x44>
 800b38e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b390:	e71c      	b.n	800b1cc <_vfiprintf_r+0x48>
 800b392:	ab03      	add	r3, sp, #12
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	462a      	mov	r2, r5
 800b398:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <_vfiprintf_r+0x22c>)
 800b39a:	a904      	add	r1, sp, #16
 800b39c:	4630      	mov	r0, r6
 800b39e:	f7fc f919 	bl	80075d4 <_printf_i>
 800b3a2:	e7e4      	b.n	800b36e <_vfiprintf_r+0x1ea>
 800b3a4:	0800c619 	.word	0x0800c619
 800b3a8:	0800c623 	.word	0x0800c623
 800b3ac:	0800708d 	.word	0x0800708d
 800b3b0:	0800b15f 	.word	0x0800b15f
 800b3b4:	0800c61f 	.word	0x0800c61f

0800b3b8 <__swbuf_r>:
 800b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ba:	460e      	mov	r6, r1
 800b3bc:	4614      	mov	r4, r2
 800b3be:	4605      	mov	r5, r0
 800b3c0:	b118      	cbz	r0, 800b3ca <__swbuf_r+0x12>
 800b3c2:	6a03      	ldr	r3, [r0, #32]
 800b3c4:	b90b      	cbnz	r3, 800b3ca <__swbuf_r+0x12>
 800b3c6:	f7fc fcc3 	bl	8007d50 <__sinit>
 800b3ca:	69a3      	ldr	r3, [r4, #24]
 800b3cc:	60a3      	str	r3, [r4, #8]
 800b3ce:	89a3      	ldrh	r3, [r4, #12]
 800b3d0:	071a      	lsls	r2, r3, #28
 800b3d2:	d525      	bpl.n	800b420 <__swbuf_r+0x68>
 800b3d4:	6923      	ldr	r3, [r4, #16]
 800b3d6:	b31b      	cbz	r3, 800b420 <__swbuf_r+0x68>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	6922      	ldr	r2, [r4, #16]
 800b3dc:	1a98      	subs	r0, r3, r2
 800b3de:	6963      	ldr	r3, [r4, #20]
 800b3e0:	b2f6      	uxtb	r6, r6
 800b3e2:	4283      	cmp	r3, r0
 800b3e4:	4637      	mov	r7, r6
 800b3e6:	dc04      	bgt.n	800b3f2 <__swbuf_r+0x3a>
 800b3e8:	4621      	mov	r1, r4
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f7ff fa58 	bl	800a8a0 <_fflush_r>
 800b3f0:	b9e0      	cbnz	r0, 800b42c <__swbuf_r+0x74>
 800b3f2:	68a3      	ldr	r3, [r4, #8]
 800b3f4:	3b01      	subs	r3, #1
 800b3f6:	60a3      	str	r3, [r4, #8]
 800b3f8:	6823      	ldr	r3, [r4, #0]
 800b3fa:	1c5a      	adds	r2, r3, #1
 800b3fc:	6022      	str	r2, [r4, #0]
 800b3fe:	701e      	strb	r6, [r3, #0]
 800b400:	6962      	ldr	r2, [r4, #20]
 800b402:	1c43      	adds	r3, r0, #1
 800b404:	429a      	cmp	r2, r3
 800b406:	d004      	beq.n	800b412 <__swbuf_r+0x5a>
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	07db      	lsls	r3, r3, #31
 800b40c:	d506      	bpl.n	800b41c <__swbuf_r+0x64>
 800b40e:	2e0a      	cmp	r6, #10
 800b410:	d104      	bne.n	800b41c <__swbuf_r+0x64>
 800b412:	4621      	mov	r1, r4
 800b414:	4628      	mov	r0, r5
 800b416:	f7ff fa43 	bl	800a8a0 <_fflush_r>
 800b41a:	b938      	cbnz	r0, 800b42c <__swbuf_r+0x74>
 800b41c:	4638      	mov	r0, r7
 800b41e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b420:	4621      	mov	r1, r4
 800b422:	4628      	mov	r0, r5
 800b424:	f000 f806 	bl	800b434 <__swsetup_r>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d0d5      	beq.n	800b3d8 <__swbuf_r+0x20>
 800b42c:	f04f 37ff 	mov.w	r7, #4294967295
 800b430:	e7f4      	b.n	800b41c <__swbuf_r+0x64>
	...

0800b434 <__swsetup_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4b2a      	ldr	r3, [pc, #168]	; (800b4e0 <__swsetup_r+0xac>)
 800b438:	4605      	mov	r5, r0
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	460c      	mov	r4, r1
 800b43e:	b118      	cbz	r0, 800b448 <__swsetup_r+0x14>
 800b440:	6a03      	ldr	r3, [r0, #32]
 800b442:	b90b      	cbnz	r3, 800b448 <__swsetup_r+0x14>
 800b444:	f7fc fc84 	bl	8007d50 <__sinit>
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b44e:	0718      	lsls	r0, r3, #28
 800b450:	d422      	bmi.n	800b498 <__swsetup_r+0x64>
 800b452:	06d9      	lsls	r1, r3, #27
 800b454:	d407      	bmi.n	800b466 <__swsetup_r+0x32>
 800b456:	2309      	movs	r3, #9
 800b458:	602b      	str	r3, [r5, #0]
 800b45a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b45e:	81a3      	strh	r3, [r4, #12]
 800b460:	f04f 30ff 	mov.w	r0, #4294967295
 800b464:	e034      	b.n	800b4d0 <__swsetup_r+0x9c>
 800b466:	0758      	lsls	r0, r3, #29
 800b468:	d512      	bpl.n	800b490 <__swsetup_r+0x5c>
 800b46a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b46c:	b141      	cbz	r1, 800b480 <__swsetup_r+0x4c>
 800b46e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b472:	4299      	cmp	r1, r3
 800b474:	d002      	beq.n	800b47c <__swsetup_r+0x48>
 800b476:	4628      	mov	r0, r5
 800b478:	f7fd fca4 	bl	8008dc4 <_free_r>
 800b47c:	2300      	movs	r3, #0
 800b47e:	6363      	str	r3, [r4, #52]	; 0x34
 800b480:	89a3      	ldrh	r3, [r4, #12]
 800b482:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b486:	81a3      	strh	r3, [r4, #12]
 800b488:	2300      	movs	r3, #0
 800b48a:	6063      	str	r3, [r4, #4]
 800b48c:	6923      	ldr	r3, [r4, #16]
 800b48e:	6023      	str	r3, [r4, #0]
 800b490:	89a3      	ldrh	r3, [r4, #12]
 800b492:	f043 0308 	orr.w	r3, r3, #8
 800b496:	81a3      	strh	r3, [r4, #12]
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	b94b      	cbnz	r3, 800b4b0 <__swsetup_r+0x7c>
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4a6:	d003      	beq.n	800b4b0 <__swsetup_r+0x7c>
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	f000 f840 	bl	800b530 <__smakebuf_r>
 800b4b0:	89a0      	ldrh	r0, [r4, #12]
 800b4b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4b6:	f010 0301 	ands.w	r3, r0, #1
 800b4ba:	d00a      	beq.n	800b4d2 <__swsetup_r+0x9e>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	60a3      	str	r3, [r4, #8]
 800b4c0:	6963      	ldr	r3, [r4, #20]
 800b4c2:	425b      	negs	r3, r3
 800b4c4:	61a3      	str	r3, [r4, #24]
 800b4c6:	6923      	ldr	r3, [r4, #16]
 800b4c8:	b943      	cbnz	r3, 800b4dc <__swsetup_r+0xa8>
 800b4ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4ce:	d1c4      	bne.n	800b45a <__swsetup_r+0x26>
 800b4d0:	bd38      	pop	{r3, r4, r5, pc}
 800b4d2:	0781      	lsls	r1, r0, #30
 800b4d4:	bf58      	it	pl
 800b4d6:	6963      	ldrpl	r3, [r4, #20]
 800b4d8:	60a3      	str	r3, [r4, #8]
 800b4da:	e7f4      	b.n	800b4c6 <__swsetup_r+0x92>
 800b4dc:	2000      	movs	r0, #0
 800b4de:	e7f7      	b.n	800b4d0 <__swsetup_r+0x9c>
 800b4e0:	20000070 	.word	0x20000070

0800b4e4 <__swhatbuf_r>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	460c      	mov	r4, r1
 800b4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ec:	2900      	cmp	r1, #0
 800b4ee:	b096      	sub	sp, #88	; 0x58
 800b4f0:	4615      	mov	r5, r2
 800b4f2:	461e      	mov	r6, r3
 800b4f4:	da0d      	bge.n	800b512 <__swhatbuf_r+0x2e>
 800b4f6:	89a3      	ldrh	r3, [r4, #12]
 800b4f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b4fc:	f04f 0100 	mov.w	r1, #0
 800b500:	bf0c      	ite	eq
 800b502:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b506:	2340      	movne	r3, #64	; 0x40
 800b508:	2000      	movs	r0, #0
 800b50a:	6031      	str	r1, [r6, #0]
 800b50c:	602b      	str	r3, [r5, #0]
 800b50e:	b016      	add	sp, #88	; 0x58
 800b510:	bd70      	pop	{r4, r5, r6, pc}
 800b512:	466a      	mov	r2, sp
 800b514:	f000 f848 	bl	800b5a8 <_fstat_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	dbec      	blt.n	800b4f6 <__swhatbuf_r+0x12>
 800b51c:	9901      	ldr	r1, [sp, #4]
 800b51e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b522:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b526:	4259      	negs	r1, r3
 800b528:	4159      	adcs	r1, r3
 800b52a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b52e:	e7eb      	b.n	800b508 <__swhatbuf_r+0x24>

0800b530 <__smakebuf_r>:
 800b530:	898b      	ldrh	r3, [r1, #12]
 800b532:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b534:	079d      	lsls	r5, r3, #30
 800b536:	4606      	mov	r6, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	d507      	bpl.n	800b54c <__smakebuf_r+0x1c>
 800b53c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	6123      	str	r3, [r4, #16]
 800b544:	2301      	movs	r3, #1
 800b546:	6163      	str	r3, [r4, #20]
 800b548:	b002      	add	sp, #8
 800b54a:	bd70      	pop	{r4, r5, r6, pc}
 800b54c:	ab01      	add	r3, sp, #4
 800b54e:	466a      	mov	r2, sp
 800b550:	f7ff ffc8 	bl	800b4e4 <__swhatbuf_r>
 800b554:	9900      	ldr	r1, [sp, #0]
 800b556:	4605      	mov	r5, r0
 800b558:	4630      	mov	r0, r6
 800b55a:	f7fb fc6b 	bl	8006e34 <_malloc_r>
 800b55e:	b948      	cbnz	r0, 800b574 <__smakebuf_r+0x44>
 800b560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b564:	059a      	lsls	r2, r3, #22
 800b566:	d4ef      	bmi.n	800b548 <__smakebuf_r+0x18>
 800b568:	f023 0303 	bic.w	r3, r3, #3
 800b56c:	f043 0302 	orr.w	r3, r3, #2
 800b570:	81a3      	strh	r3, [r4, #12]
 800b572:	e7e3      	b.n	800b53c <__smakebuf_r+0xc>
 800b574:	89a3      	ldrh	r3, [r4, #12]
 800b576:	6020      	str	r0, [r4, #0]
 800b578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b57c:	81a3      	strh	r3, [r4, #12]
 800b57e:	9b00      	ldr	r3, [sp, #0]
 800b580:	6163      	str	r3, [r4, #20]
 800b582:	9b01      	ldr	r3, [sp, #4]
 800b584:	6120      	str	r0, [r4, #16]
 800b586:	b15b      	cbz	r3, 800b5a0 <__smakebuf_r+0x70>
 800b588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b58c:	4630      	mov	r0, r6
 800b58e:	f000 f81d 	bl	800b5cc <_isatty_r>
 800b592:	b128      	cbz	r0, 800b5a0 <__smakebuf_r+0x70>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f023 0303 	bic.w	r3, r3, #3
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	81a3      	strh	r3, [r4, #12]
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	431d      	orrs	r5, r3
 800b5a4:	81a5      	strh	r5, [r4, #12]
 800b5a6:	e7cf      	b.n	800b548 <__smakebuf_r+0x18>

0800b5a8 <_fstat_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	; (800b5c8 <_fstat_r+0x20>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	f7f7 fffa 	bl	80035ae <_fstat>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d102      	bne.n	800b5c4 <_fstat_r+0x1c>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	b103      	cbz	r3, 800b5c4 <_fstat_r+0x1c>
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000970 	.word	0x20000970

0800b5cc <_isatty_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	; (800b5e8 <_isatty_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f7 ffee 	bl	80035b8 <_isatty>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_isatty_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_isatty_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	20000970 	.word	0x20000970

0800b5ec <_init>:
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	bf00      	nop
 800b5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5f2:	bc08      	pop	{r3}
 800b5f4:	469e      	mov	lr, r3
 800b5f6:	4770      	bx	lr

0800b5f8 <_fini>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	bf00      	nop
 800b5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fe:	bc08      	pop	{r3}
 800b600:	469e      	mov	lr, r3
 800b602:	4770      	bx	lr
