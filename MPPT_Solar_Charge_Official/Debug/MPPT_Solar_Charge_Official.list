
MPPT_Solar_Charge_Official.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a894  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001038  0800aa28  0800aa28  0001aa28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba60  0800ba60  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba60  0800ba60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba68  0800ba68  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba68  0800ba68  0001ba68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba6c  0800ba6c  0001ba6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ba70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000778  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000095c  2000095c  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003798c  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006739  00000000  00000000  00057be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000ba01  00000000  00000000  0005e31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001158  00000000  00000000  00069d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000011ca  00000000  00000000  0006ae78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a5dd  00000000  00000000  0006c042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00025f99  00000000  00000000  0009661f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e97b7  00000000  00000000  000bc5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004dd0  00000000  00000000  001a5d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000076  00000000  00000000  001aab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa0c 	.word	0x0800aa0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800aa0c 	.word	0x0800aa0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ZN4blib13SystemManagerD1Ev>:

            }
            virtual ~SystemManager()
            {

            }
 8000ff0:	4770      	bx	lr

08000ff2 <_ZN8ConstantD1Ev>:
enum class OutputMode
{
    PSU, CHARGER, INVERTER,
};

class Constant : public blib::dp::Singleton<Constant>
 8000ff2:	4770      	bx	lr

08000ff4 <_ZN4blib13SystemManagerD0Ev>:
            virtual ~SystemManager()
 8000ff4:	b510      	push	{r4, lr}
            }
 8000ff6:	2108      	movs	r1, #8
            virtual ~SystemManager()
 8000ff8:	4604      	mov	r4, r0
            }
 8000ffa:	f004 fec5 	bl	8005d88 <_ZdlPvj>
 8000ffe:	4620      	mov	r0, r4
 8001000:	bd10      	pop	{r4, pc}

08001002 <_ZN8ConstantD0Ev>:
 8001002:	b510      	push	{r4, lr}
 8001004:	2118      	movs	r1, #24
 8001006:	4604      	mov	r4, r0
 8001008:	f004 febe 	bl	8005d88 <_ZdlPvj>
 800100c:	4620      	mov	r0, r4
 800100e:	bd10      	pop	{r4, pc}

08001010 <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8001010:	b507      	push	{r0, r1, r2, lr}
 8001012:	9001      	str	r0, [sp, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8001014:	f7ff f92c 	bl	8000270 <strlen>
 8001018:	b282      	uxth	r2, r0
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <_ZN4blib6Logger5printEPKc+0x20>)
 800101c:	9901      	ldr	r1, [sp, #4]
 800101e:	6800      	ldr	r0, [r0, #0]
 8001020:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
            }
 8001024:	b003      	add	sp, #12
 8001026:	f85d eb04 	ldr.w	lr, [sp], #4
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 800102a:	f003 bf9b 	b.w	8004f64 <HAL_UART_Transmit>
 800102e:	bf00      	nop
 8001030:	20000018 	.word	0x20000018

08001034 <_ZN4blib11LcdSimulateC1Ev>:
    using Callback = void (LcdSimulate::*)();

    class LcdSimulate : public dp::Singleton<LcdSimulate>
    {
        public:
            LcdSimulate() : mLcd(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 8001034:	b538      	push	{r3, r4, r5, lr}
 8001036:	4604      	mov	r4, r0
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <_ZN4blib11LcdSimulateC1Ev+0x68>)
 800103a:	f844 3b0c 	str.w	r3, [r4], #12
 800103e:	4605      	mov	r5, r0
 8001040:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <_ZN4blib11LcdSimulateC1Ev+0x6c>)
 8001042:	234e      	movs	r3, #78	; 0x4e
 8001044:	2101      	movs	r1, #1
 8001046:	4620      	mov	r0, r4
 8001048:	f004 fd88 	bl	8005b5c <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh>
            {
                mLcd.clearDisplay();
 800104c:	4620      	mov	r0, r4
 800104e:	f004 fd2b 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "DO AN TOT NGHIEP");
 8001052:	4620      	mov	r0, r4
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_ZN4blib11LcdSimulateC1Ev+0x70>)
 8001056:	2201      	movs	r2, #1
 8001058:	2100      	movs	r1, #0
 800105a:	f004 fc87 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "NAM HOC: 2023-2024");
 800105e:	2201      	movs	r2, #1
 8001060:	4611      	mov	r1, r2
 8001062:	4620      	mov	r0, r4
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <_ZN4blib11LcdSimulateC1Ev+0x74>)
 8001066:	f004 fc81 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "LOP: DTD61DH");
 800106a:	4620      	mov	r0, r4
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <_ZN4blib11LcdSimulateC1Ev+0x78>)
 800106e:	2201      	movs	r2, #1
 8001070:	2102      	movs	r1, #2
 8001072:	f004 fc7b 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 1, "DAI HOC HANG HAI VN");
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <_ZN4blib11LcdSimulateC1Ev+0x7c>)
 8001078:	2201      	movs	r2, #1
 800107a:	2103      	movs	r1, #3
 800107c:	4620      	mov	r0, r4
 800107e:	f004 fc75 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.clearDisplay();
 8001082:	4620      	mov	r0, r4
 8001084:	f004 fd10 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                HAL_Delay(2000);
 8001088:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800108c:	f002 f8c0 	bl	8003210 <HAL_Delay>
                mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_ZN4blib11LcdSimulateC1Ev+0x80>)
 8001092:	606b      	str	r3, [r5, #4]
 8001094:	2300      	movs	r3, #0
 8001096:	60ab      	str	r3, [r5, #8]
            }
 8001098:	4628      	mov	r0, r5
 800109a:	bd38      	pop	{r3, r4, r5, pc}
 800109c:	0800b3e8 	.word	0x0800b3e8
 80010a0:	20000310 	.word	0x20000310
 80010a4:	0800ab8d 	.word	0x0800ab8d
 80010a8:	0800ab9e 	.word	0x0800ab9e
 80010ac:	0800abb1 	.word	0x0800abb1
 80010b0:	0800abbe 	.word	0x0800abbe
 80010b4:	08001391 	.word	0x08001391

080010b8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80010b8:	b530      	push	{r4, r5, lr}
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010ba:	2400      	movs	r4, #0
{
 80010bc:	b095      	sub	sp, #84	; 0x54
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010be:	2214      	movs	r2, #20
 80010c0:	4621      	mov	r1, r4
 80010c2:	a803      	add	r0, sp, #12
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010c8:	f006 f91f 	bl	800730a <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <_Z18SystemClock_Configv+0x90>)
 80010ce:	9401      	str	r4, [sp, #4]
 80010d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010d6:	641a      	str	r2, [r3, #64]	; 0x40
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	9b01      	ldr	r3, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <_Z18SystemClock_Configv+0x94>)
 80010e4:	9402      	str	r4, [sp, #8]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f4:	9302      	str	r3, [sp, #8]
 80010f6:	9b02      	ldr	r3, [sp, #8]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 80010f8:	230a      	movs	r3, #10
 80010fa:	9308      	str	r3, [sp, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010fc:	2210      	movs	r2, #16
 80010fe:	2301      	movs	r3, #1
 8001100:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001104:	930d      	str	r3, [sp, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
    RCC_OscInitStruct.PLL.PLLM = 8;
    RCC_OscInitStruct.PLL.PLLN = 72;
 8001106:	2108      	movs	r1, #8
 8001108:	2348      	movs	r3, #72	; 0x48
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2502      	movs	r5, #2
    RCC_OscInitStruct.PLL.PLLN = 72;
 800110c:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
    RCC_OscInitStruct.PLL.PLLQ = 4;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8001112:	2304      	movs	r3, #4
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001114:	e9cd 540e 	strd	r5, r4, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001118:	9512      	str	r5, [sp, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 4;
 800111a:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f003 f898 	bl	8004250 <HAL_RCC_OscConfig>
 8001120:	b108      	cbz	r0, 8001126 <_Z18SystemClock_Configv+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001122:	b672      	cpsid	i
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001124:	e7fe      	b.n	8001124 <_Z18SystemClock_Configv+0x6c>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001126:	230f      	movs	r3, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	e9cd 3503 	strd	r3, r5, [sp, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	e9cd 3006 	strd	r3, r0, [sp, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001134:	9005      	str	r0, [sp, #20]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001136:	4629      	mov	r1, r5
 8001138:	a803      	add	r0, sp, #12
 800113a:	f003 fa63 	bl	8004604 <HAL_RCC_ClockConfig>
 800113e:	b108      	cbz	r0, 8001144 <_Z18SystemClock_Configv+0x8c>
 8001140:	b672      	cpsid	i
    while (1)
 8001142:	e7fe      	b.n	8001142 <_Z18SystemClock_Configv+0x8a>
}
 8001144:	b015      	add	sp, #84	; 0x54
 8001146:	bd30      	pop	{r4, r5, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <Error_Handler>:
 8001150:	b672      	cpsid	i
    while (1)
 8001152:	e7fe      	b.n	8001152 <Error_Handler+0x2>

08001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
    {
        template<typename T>
        class Singleton
        {
            public:
                static T& getInstance()
 8001154:	b538      	push	{r3, r4, r5, lr}
                {
                    if (mInstance == nullptr)
 8001156:	4c06      	ldr	r4, [pc, #24]	; (8001170 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x1c>)
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	b933      	cbnz	r3, 800116a <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x16>
                    {
                        mInstance = new T();
 800115c:	2048      	movs	r0, #72	; 0x48
 800115e:	f004 fe24 	bl	8005daa <_Znwj>
 8001162:	4605      	mov	r5, r0
 8001164:	f003 ff70 	bl	8005048 <_ZN4blib6AnalogC1Ev>
 8001168:	6025      	str	r5, [r4, #0]
                    }

                    return *mInstance;
                }
 800116a:	6820      	ldr	r0, [r4, #0]
 800116c:	bd38      	pop	{r3, r4, r5, pc}
 800116e:	bf00      	nop
 8001170:	20000214 	.word	0x20000214

08001174 <HAL_ADC_ConvCpltCallback>:
{
 8001174:	b508      	push	{r3, lr}
    blib::Analog::getInstance().sampling();
 8001176:	f7ff ffed 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
}
 800117a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    blib::Analog::getInstance().sampling();
 800117e:	f003 bf5d 	b.w	800503c <_ZN4blib6Analog8samplingEv>
	...

08001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 8001184:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 8001186:	4c06      	ldr	r4, [pc, #24]	; (80011a0 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x1c>)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	b933      	cbnz	r3, 800119a <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x16>
                        mInstance = new T();
 800118c:	2024      	movs	r0, #36	; 0x24
 800118e:	f004 fe0c 	bl	8005daa <_Znwj>
 8001192:	4605      	mov	r5, r0
 8001194:	f004 f9b2 	bl	80054fc <_ZN4blib13ChargeControlC1Ev>
 8001198:	6025      	str	r5, [r4, #0]
                }
 800119a:	6820      	ldr	r0, [r4, #0]
 800119c:	bd38      	pop	{r3, r4, r5, pc}
 800119e:	bf00      	nop
 80011a0:	20000210 	.word	0x20000210

080011a4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>:
                static T& getInstance()
 80011a4:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 80011a6:	4c06      	ldr	r4, [pc, #24]	; (80011c0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x1c>)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	b933      	cbnz	r3, 80011ba <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x16>
                        mInstance = new T();
 80011ac:	2020      	movs	r0, #32
 80011ae:	f004 fdfc 	bl	8005daa <_Znwj>
 80011b2:	4605      	mov	r5, r0
 80011b4:	f7ff ff3e 	bl	8001034 <_ZN4blib11LcdSimulateC1Ev>
 80011b8:	6025      	str	r5, [r4, #0]
                }
 80011ba:	6820      	ldr	r0, [r4, #0]
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
 80011be:	bf00      	nop
 80011c0:	20000200 	.word	0x20000200

080011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 80011c4:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 80011c6:	4c06      	ldr	r4, [pc, #24]	; (80011e0 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x1c>)
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	b933      	cbnz	r3, 80011da <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x16>
                        mInstance = new T();
 80011cc:	2008      	movs	r0, #8
 80011ce:	f004 fdec 	bl	8005daa <_Znwj>
 80011d2:	4605      	mov	r5, r0
 80011d4:	f004 f8dc 	bl	8005390 <_ZN4blib6ButtonC1Ev>
 80011d8:	6025      	str	r5, [r4, #0]
                }
 80011da:	6820      	ldr	r0, [r4, #0]
 80011dc:	bd38      	pop	{r3, r4, r5, pc}
 80011de:	bf00      	nop
 80011e0:	2000021c 	.word	0x2000021c

080011e4 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv>:
                mLcd.displayLine(arrowLine, 0, ">");

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
            }

            void impl_3_AboutScreen()
 80011e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011e6:	4604      	mov	r4, r0
            {
                auto &button = Button::getInstance();
 80011e8:	f7ff ffec 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80011ec:	4605      	mov	r5, r0

                mLcd.clearDisplay();
 80011ee:	f104 000c 	add.w	r0, r4, #12
 80011f2:	9001      	str	r0, [sp, #4]
 80011f4:	f004 fc58 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MPPT SOLAR CHARGER");
 80011f8:	2200      	movs	r2, #0
 80011fa:	9801      	ldr	r0, [sp, #4]
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x6c>)
 80011fe:	4611      	mov	r1, r2
 8001200:	f004 fbb4 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, "FIRMWARE VER: 1.0.0");
 8001204:	9801      	ldr	r0, [sp, #4]
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x70>)
 8001208:	2200      	movs	r2, #0
 800120a:	2101      	movs	r1, #1
 800120c:	f004 fbae 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, "CONTACT:09123123123");
 8001210:	9801      	ldr	r0, [sp, #4]
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	2102      	movs	r1, #2
 8001218:	f004 fba8 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, "4BACK");
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x78>)
 800121e:	9801      	ldr	r0, [sp, #4]
 8001220:	220f      	movs	r2, #15
 8001222:	2103      	movs	r1, #3
 8001224:	f004 fba2 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001228:	4628      	mov	r0, r5
 800122a:	f004 f8b9 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800122e:	2804      	cmp	r0, #4
                {
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001230:	bf04      	itt	eq
 8001232:	4b0b      	ldreq	r3, [pc, #44]	; (8001260 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x7c>)
 8001234:	6063      	streq	r3, [r4, #4]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001236:	f04f 0100 	mov.w	r1, #0
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 800123a:	bf08      	it	eq
 800123c:	2300      	moveq	r3, #0
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800123e:	4628      	mov	r0, r5
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001240:	bf08      	it	eq
 8001242:	60a3      	streq	r3, [r4, #8]
            }
 8001244:	b003      	add	sp, #12
 8001246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800124a:	f004 b8a7 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 800124e:	bf00      	nop
 8001250:	0800abd2 	.word	0x0800abd2
 8001254:	0800abe5 	.word	0x0800abe5
 8001258:	0800abf9 	.word	0x0800abf9
 800125c:	0800b09a 	.word	0x0800b09a
 8001260:	080014f5 	.word	0x080014f5

08001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8001264:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8001268:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80012a8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>
            static void Log(const char *message, Args ... args)
 800126c:	460d      	mov	r5, r1
 800126e:	4616      	mov	r6, r2
 8001270:	461f      	mov	r7, r3
 8001272:	4604      	mov	r4, r0
                print("[>]  ");
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x3c>)
 8001276:	f7ff fecb 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 800127a:	462b      	mov	r3, r5
 800127c:	4622      	mov	r2, r4
 800127e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001282:	e9cd 6700 	strd	r6, r7, [sp]
 8001286:	4640      	mov	r0, r8
 8001288:	f005 ffa8 	bl	80071dc <sniprintf>
                print(mBuffer);
 800128c:	4640      	mov	r0, r8
 800128e:	f7ff febf 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8001294:	f7ff febc 	bl	8001010 <_ZN4blib6Logger5printEPKc>
            }
 8001298:	b002      	add	sp, #8
 800129a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129e:	bf00      	nop
 80012a0:	0800ac0d 	.word	0x0800ac0d
 80012a4:	0800b9fc 	.word	0x0800b9fc
 80012a8:	2000040c 	.word	0x2000040c

080012ac <HAL_GPIO_EXTI_Callback>:
{
 80012ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    for (volatile uint32_t i = 0; i < timedelay; i++);
 80012ae:	2300      	movs	r3, #0
 80012b0:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <HAL_GPIO_EXTI_Callback+0xb8>)
 80012b2:	9301      	str	r3, [sp, #4]
{
 80012b4:	4604      	mov	r4, r0
    for (volatile uint32_t i = 0; i < timedelay; i++);
 80012b6:	9b01      	ldr	r3, [sp, #4]
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d324      	bcc.n	8001306 <HAL_GPIO_EXTI_Callback+0x5a>
    volatile uint32_t i = 0;
 80012bc:	2500      	movs	r5, #0
    if (GPIO_pin == BUT_UP_Pin)
 80012be:	2c01      	cmp	r4, #1
        LOGI("Button Up pin");
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_GPIO_EXTI_Callback+0xbc>)
 80012c2:	4e2a      	ldr	r6, [pc, #168]	; (800136c <HAL_GPIO_EXTI_Callback+0xc0>)
    volatile uint32_t i = 0;
 80012c4:	9502      	str	r5, [sp, #8]
    if (GPIO_pin == BUT_UP_Pin)
 80012c6:	d122      	bne.n	800130e <HAL_GPIO_EXTI_Callback+0x62>
        LOGI("Button Up pin");
 80012c8:	4929      	ldr	r1, [pc, #164]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 80012ca:	482a      	ldr	r0, [pc, #168]	; (8001374 <HAL_GPIO_EXTI_Callback+0xc8>)
 80012cc:	2255      	movs	r2, #85	; 0x55
        LOGI("Button Down pin");
 80012ce:	f7ff ffc9 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::DOWN;
 80012d2:	6034      	str	r4, [r6, #0]
        pGPIOx = BUT_DOWN_GPIO_Port;
 80012d4:	4d28      	ldr	r5, [pc, #160]	; (8001378 <HAL_GPIO_EXTI_Callback+0xcc>)
    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 80012d6:	f7ff ff75 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80012da:	6831      	ldr	r1, [r6, #0]
 80012dc:	f004 f85e 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 80012e0:	f7ff ff70 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80012e4:	f004 f85e 	bl	80053a4 <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 80012e8:	b36d      	cbz	r5, 8001346 <HAL_GPIO_EXTI_Callback+0x9a>
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) && (i < (timedelay)))
 80012ea:	4d23      	ldr	r5, [pc, #140]	; (8001378 <HAL_GPIO_EXTI_Callback+0xcc>)
 80012ec:	4e1d      	ldr	r6, [pc, #116]	; (8001364 <HAL_GPIO_EXTI_Callback+0xb8>)
 80012ee:	4621      	mov	r1, r4
 80012f0:	4628      	mov	r0, r5
 80012f2:	f002 fd13 	bl	8003d1c <HAL_GPIO_ReadPin>
 80012f6:	bb30      	cbnz	r0, 8001346 <HAL_GPIO_EXTI_Callback+0x9a>
 80012f8:	9b02      	ldr	r3, [sp, #8]
 80012fa:	42b3      	cmp	r3, r6
 80012fc:	d223      	bcs.n	8001346 <HAL_GPIO_EXTI_Callback+0x9a>
            i++;
 80012fe:	9b02      	ldr	r3, [sp, #8]
 8001300:	3301      	adds	r3, #1
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	e7f3      	b.n	80012ee <HAL_GPIO_EXTI_Callback+0x42>
    for (volatile uint32_t i = 0; i < timedelay; i++);
 8001306:	9b01      	ldr	r3, [sp, #4]
 8001308:	3301      	adds	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	e7d3      	b.n	80012b6 <HAL_GPIO_EXTI_Callback+0xa>
    else if (GPIO_pin == BUT_DOWN_Pin)
 800130e:	2c02      	cmp	r4, #2
 8001310:	d103      	bne.n	800131a <HAL_GPIO_EXTI_Callback+0x6e>
        LOGI("Button Down pin");
 8001312:	4917      	ldr	r1, [pc, #92]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001314:	4819      	ldr	r0, [pc, #100]	; (800137c <HAL_GPIO_EXTI_Callback+0xd0>)
 8001316:	225b      	movs	r2, #91	; 0x5b
 8001318:	e7d9      	b.n	80012ce <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_pin == BUT_BACK_Pin)
 800131a:	2c04      	cmp	r4, #4
 800131c:	d103      	bne.n	8001326 <HAL_GPIO_EXTI_Callback+0x7a>
        LOGI("Button Back pin");
 800131e:	4914      	ldr	r1, [pc, #80]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001320:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001322:	2261      	movs	r2, #97	; 0x61
 8001324:	e7d3      	b.n	80012ce <HAL_GPIO_EXTI_Callback+0x22>
    else if (GPIO_pin == BUT_SEL_Pin)
 8001326:	2c08      	cmp	r4, #8
 8001328:	d107      	bne.n	800133a <HAL_GPIO_EXTI_Callback+0x8e>
        LOGI("Button Select pin");
 800132a:	4911      	ldr	r1, [pc, #68]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <HAL_GPIO_EXTI_Callback+0xd8>)
 800132e:	2267      	movs	r2, #103	; 0x67
 8001330:	f7ff ff98 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SEL;
 8001334:	2303      	movs	r3, #3
 8001336:	6033      	str	r3, [r6, #0]
        pGPIOx = BUT_SEL_GPIO_Port;
 8001338:	e7cc      	b.n	80012d4 <HAL_GPIO_EXTI_Callback+0x28>
        LOGI("Undefined Exti Signal");
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <HAL_GPIO_EXTI_Callback+0xc4>)
 800133c:	4812      	ldr	r0, [pc, #72]	; (8001388 <HAL_GPIO_EXTI_Callback+0xdc>)
 800133e:	226d      	movs	r2, #109	; 0x6d
 8001340:	f7ff ff90 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
 8001344:	e7c7      	b.n	80012d6 <HAL_GPIO_EXTI_Callback+0x2a>
    for (volatile uint32_t i = 0; i < timedelay; i++);
 8001346:	2300      	movs	r3, #0
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_GPIO_EXTI_Callback+0xb8>)
 800134a:	9303      	str	r3, [sp, #12]
 800134c:	9b03      	ldr	r3, [sp, #12]
 800134e:	4293      	cmp	r3, r2
 8001350:	d303      	bcc.n	800135a <HAL_GPIO_EXTI_Callback+0xae>
    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <HAL_GPIO_EXTI_Callback+0xe0>)
 8001354:	615c      	str	r4, [r3, #20]
}
 8001356:	b004      	add	sp, #16
 8001358:	bd70      	pop	{r4, r5, r6, pc}
    for (volatile uint32_t i = 0; i < timedelay; i++);
 800135a:	9b03      	ldr	r3, [sp, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	9303      	str	r3, [sp, #12]
 8001360:	e7f4      	b.n	800134c <HAL_GPIO_EXTI_Callback+0xa0>
 8001362:	bf00      	nop
 8001364:	0027ac40 	.word	0x0027ac40
 8001368:	0800ac13 	.word	0x0800ac13
 800136c:	20000264 	.word	0x20000264
 8001370:	0800ac2a 	.word	0x0800ac2a
 8001374:	0800ac33 	.word	0x0800ac33
 8001378:	40020800 	.word	0x40020800
 800137c:	0800ac4e 	.word	0x0800ac4e
 8001380:	0800ac6b 	.word	0x0800ac6b
 8001384:	0800ac88 	.word	0x0800ac88
 8001388:	0800aca7 	.word	0x0800aca7
 800138c:	40013c00 	.word	0x40013c00

08001390 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv>:
            void impl_1_HomeScreen()
 8001390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001392:	b09b      	sub	sp, #108	; 0x6c
 8001394:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8001396:	f7ff ff15 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800139a:	4605      	mov	r5, r0
                auto &analog = Analog::getInstance();
 800139c:	f7ff feda 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };
 80013a0:	2600      	movs	r6, #0
                auto &analog = Analog::getInstance();
 80013a2:	4604      	mov	r4, r0
                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };
 80013a4:	2211      	movs	r2, #17
 80013a6:	4631      	mov	r1, r6
 80013a8:	a809      	add	r0, sp, #36	; 0x24
 80013aa:	9608      	str	r6, [sp, #32]
 80013ac:	f005 ffad 	bl	800730a <memset>
 80013b0:	2211      	movs	r2, #17
 80013b2:	4631      	mov	r1, r6
 80013b4:	a80f      	add	r0, sp, #60	; 0x3c
 80013b6:	960e      	str	r6, [sp, #56]	; 0x38
 80013b8:	f005 ffa7 	bl	800730a <memset>
 80013bc:	2211      	movs	r2, #17
 80013be:	4631      	mov	r1, r6
 80013c0:	a815      	add	r0, sp, #84	; 0x54
 80013c2:	9614      	str	r6, [sp, #80]	; 0x50
 80013c4:	f005 ffa1 	bl	800730a <memset>
                snprintf(line0, 21, "I:%2.1fV %2.1fA %2.1fW", analog.mVin, analog.mIin,
 80013c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80013ca:	f7ff f8bd 	bl	8000548 <__aeabi_f2d>
 80013ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80013d4:	f7ff f8b8 	bl	8000548 <__aeabi_f2d>
 80013d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80013dc:	6a20      	ldr	r0, [r4, #32]
 80013de:	f7ff f8b3 	bl	8000548 <__aeabi_f2d>
 80013e2:	4a3a      	ldr	r2, [pc, #232]	; (80014cc <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x13c>)
 80013e4:	e9cd 0100 	strd	r0, r1, [sp]
 80013e8:	2115      	movs	r1, #21
 80013ea:	a808      	add	r0, sp, #32
 80013ec:	f005 fef6 	bl	80071dc <sniprintf>
                snprintf(line1, 21, "O:%2.1fV %2.1fA %2.1fW", analog.mVout, analog.mIout,
 80013f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80013f2:	f7ff f8a9 	bl	8000548 <__aeabi_f2d>
 80013f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80013fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80013fc:	f7ff f8a4 	bl	8000548 <__aeabi_f2d>
 8001400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001404:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001406:	f7ff f89f 	bl	8000548 <__aeabi_f2d>
 800140a:	4a31      	ldr	r2, [pc, #196]	; (80014d0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x140>)
 800140c:	e9cd 0100 	strd	r0, r1, [sp]
 8001410:	2115      	movs	r1, #21
 8001412:	a80e      	add	r0, sp, #56	; 0x38
 8001414:	f005 fee2 	bl	80071dc <sniprintf>
                if (analog.mInputSource == PowerSrc::USB_PORT)
 8001418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800141a:	2b00      	cmp	r3, #0
 800141c:	d134      	bne.n	8001488 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xf8>
                    snprintf(line2, 21, "Src: USB");
 800141e:	492d      	ldr	r1, [pc, #180]	; (80014d4 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x144>)
                    snprintf(line2, 21, "Src: SOLAR");
 8001420:	a814      	add	r0, sp, #80	; 0x50
 8001422:	f006 f846 	bl	80074b2 <strcpy>
                mLcd.clearDisplay();
 8001426:	f107 000c 	add.w	r0, r7, #12
 800142a:	9007      	str	r0, [sp, #28]
 800142c:	f004 fb3c 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, line0);
 8001430:	2200      	movs	r2, #0
 8001432:	4611      	mov	r1, r2
 8001434:	9807      	ldr	r0, [sp, #28]
 8001436:	ab08      	add	r3, sp, #32
 8001438:	f004 fa98 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, line1);
 800143c:	9807      	ldr	r0, [sp, #28]
 800143e:	ab0e      	add	r3, sp, #56	; 0x38
 8001440:	2200      	movs	r2, #0
 8001442:	2101      	movs	r1, #1
 8001444:	f004 fa92 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, line2);
 8001448:	9807      	ldr	r0, [sp, #28]
 800144a:	ab14      	add	r3, sp, #80	; 0x50
 800144c:	2200      	movs	r2, #0
 800144e:	2102      	movs	r1, #2
 8001450:	f004 fa8c 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 2, "Press any button");
 8001454:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x148>)
 8001456:	9807      	ldr	r0, [sp, #28]
 8001458:	2202      	movs	r2, #2
 800145a:	2103      	movs	r1, #3
 800145c:	f004 fa86 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001460:	4628      	mov	r0, r5
 8001462:	f003 ff9d 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001466:	2801      	cmp	r0, #1
 8001468:	d11f      	bne.n	80014aa <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x11a>
                    LOGI("Go to menu screen");
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x14c>)
 800146c:	491c      	ldr	r1, [pc, #112]	; (80014e0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x150>)
 800146e:	481d      	ldr	r0, [pc, #116]	; (80014e4 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x154>)
 8001470:	2259      	movs	r2, #89	; 0x59
 8001472:	f7ff fef7 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x158>)
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	2100      	movs	r1, #0
 800147c:	60b9      	str	r1, [r7, #8]
                    button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800147e:	4628      	mov	r0, r5
 8001480:	f003 ff8c 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001484:	b01b      	add	sp, #108	; 0x6c
 8001486:	bdf0      	pop	{r4, r5, r6, r7, pc}
                else if (analog.mInputSource == PowerSrc::SOLAR)
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x100>
                    snprintf(line2, 21, "Src: SOLAR");
 800148c:	4917      	ldr	r1, [pc, #92]	; (80014ec <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x15c>)
 800148e:	e7c7      	b.n	8001420 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x90>
                else if (analog.mInputSource == PowerSrc::BATTERY)
 8001490:	2b02      	cmp	r3, #2
 8001492:	d1c8      	bne.n	8001426 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x96>
                    snprintf(line2, 21, "Src: BAT [%.1f%%]", analog.mBatteryPercent);
 8001494:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001496:	f7ff f857 	bl	8000548 <__aeabi_f2d>
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x160>)
 800149c:	e9cd 0100 	strd	r0, r1, [sp]
 80014a0:	2115      	movs	r1, #21
 80014a2:	a814      	add	r0, sp, #80	; 0x50
 80014a4:	f005 fe9a 	bl	80071dc <sniprintf>
 80014a8:	e7bd      	b.n	8001426 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x96>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
 80014aa:	4628      	mov	r0, r5
 80014ac:	f003 ff78 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80014b0:	2802      	cmp	r0, #2
 80014b2:	d0da      	beq.n	800146a <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xda>
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
 80014b4:	4628      	mov	r0, r5
 80014b6:	f003 ff73 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80014ba:	2803      	cmp	r0, #3
 80014bc:	d0d5      	beq.n	800146a <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xda>
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 80014be:	4628      	mov	r0, r5
 80014c0:	f003 ff6e 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80014c4:	2804      	cmp	r0, #4
 80014c6:	d1dd      	bne.n	8001484 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xf4>
 80014c8:	e7cf      	b.n	800146a <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xda>
 80014ca:	bf00      	nop
 80014cc:	0800acca 	.word	0x0800acca
 80014d0:	0800ace1 	.word	0x0800ace1
 80014d4:	0800acf8 	.word	0x0800acf8
 80014d8:	0800ad1e 	.word	0x0800ad1e
 80014dc:	0800ad2f 	.word	0x0800ad2f
 80014e0:	0800ad41 	.word	0x0800ad41
 80014e4:	0800ad4b 	.word	0x0800ad4b
 80014e8:	080014f5 	.word	0x080014f5
 80014ec:	0800ad01 	.word	0x0800ad01
 80014f0:	0800ad0c 	.word	0x0800ad0c

080014f4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv>:
            void impl_2_MenuScreen()
 80014f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014f6:	4604      	mov	r4, r0
                auto &button = Button::getInstance();
 80014f8:	f7ff fe64 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80014fc:	4606      	mov	r6, r0
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 80014fe:	f003 ff4f 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001502:	2801      	cmp	r0, #1
 8001504:	4d3a      	ldr	r5, [pc, #232]	; (80015f0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xfc>)
 8001506:	d12f      	bne.n	8001568 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x74>
                    if (arrowLine == 0)
 8001508:	682b      	ldr	r3, [r5, #0]
 800150a:	bb5b      	cbnz	r3, 8001564 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x70>
                        arrowLine = 2;
 800150c:	2302      	movs	r3, #2
                        arrowLine = 0;
 800150e:	602b      	str	r3, [r5, #0]
                mLcd.clearDisplay();
 8001510:	f104 000c 	add.w	r0, r4, #12
 8001514:	9001      	str	r0, [sp, #4]
 8001516:	f004 fac7 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
 800151a:	9801      	ldr	r0, [sp, #4]
 800151c:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x100>)
 800151e:	2201      	movs	r2, #1
 8001520:	2100      	movs	r1, #0
 8001522:	f004 fa23 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "2 SETTING MODE");
 8001526:	2201      	movs	r2, #1
 8001528:	9801      	ldr	r0, [sp, #4]
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x104>)
 800152c:	4611      	mov	r1, r2
 800152e:	f004 fa1d 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "3 ABOUT");
 8001532:	9801      	ldr	r0, [sp, #4]
 8001534:	4b31      	ldr	r3, [pc, #196]	; (80015fc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x108>)
 8001536:	2201      	movs	r2, #1
 8001538:	2102      	movs	r1, #2
 800153a:	f004 fa17 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 800153e:	9801      	ldr	r0, [sp, #4]
 8001540:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x10c>)
 8001542:	2200      	movs	r2, #0
 8001544:	2103      	movs	r1, #3
 8001546:	f004 fa11 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 800154a:	7829      	ldrb	r1, [r5, #0]
 800154c:	9801      	ldr	r0, [sp, #4]
 800154e:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x110>)
 8001550:	2200      	movs	r2, #0
 8001552:	f004 fa0b 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001556:	2100      	movs	r1, #0
 8001558:	4630      	mov	r0, r6
            }
 800155a:	b003      	add	sp, #12
 800155c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001560:	f003 bf1c 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        arrowLine--;
 8001564:	3b01      	subs	r3, #1
 8001566:	e7d2      	b.n	800150e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a>
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001568:	4630      	mov	r0, r6
 800156a:	f003 ff19 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800156e:	2802      	cmp	r0, #2
 8001570:	d106      	bne.n	8001580 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x8c>
                    if (arrowLine == 2)
 8001572:	682b      	ldr	r3, [r5, #0]
 8001574:	2b02      	cmp	r3, #2
 8001576:	d101      	bne.n	800157c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x88>
                        arrowLine = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e7c8      	b.n	800150e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a>
                        arrowLine++;
 800157c:	3301      	adds	r3, #1
 800157e:	e7c6      	b.n	800150e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a>
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001580:	4630      	mov	r0, r6
 8001582:	f003 ff0d 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001586:	2804      	cmp	r0, #4
 8001588:	d10a      	bne.n	80015a0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xac>
                    LOGI("Go back to homescreen");
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x114>)
 800158c:	491f      	ldr	r1, [pc, #124]	; (800160c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x118>)
 800158e:	4820      	ldr	r0, [pc, #128]	; (8001610 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x11c>)
 8001590:	2280      	movs	r2, #128	; 0x80
 8001592:	f7ff fe67 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x120>)
 8001598:	6063      	str	r3, [r4, #4]
 800159a:	2300      	movs	r3, #0
 800159c:	60a3      	str	r3, [r4, #8]
                    arrowLine = 0;
 800159e:	e7b6      	b.n	800150e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a>
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80015a0:	4630      	mov	r0, r6
 80015a2:	f003 fefd 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80015a6:	2803      	cmp	r0, #3
 80015a8:	d1b2      	bne.n	8001510 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c>
                    if (arrowLine == 0)
 80015aa:	682f      	ldr	r7, [r5, #0]
 80015ac:	b94f      	cbnz	r7, 80015c2 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xce>
                        LOGI("Go to Display Menu");
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x114>)
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x118>)
 80015b2:	4819      	ldr	r0, [pc, #100]	; (8001618 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x124>)
 80015b4:	228a      	movs	r2, #138	; 0x8a
 80015b6:	f7ff fe55 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_DisplayScroll;
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x128>)
 80015bc:	e9c4 3701 	strd	r3, r7, [r4, #4]
 80015c0:	e7a6      	b.n	8001510 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c>
                    else if (arrowLine == 1)
 80015c2:	2f01      	cmp	r7, #1
 80015c4:	d10a      	bne.n	80015dc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xe8>
                        LOGI("Go to Setting Menu");
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x114>)
 80015c8:	4910      	ldr	r1, [pc, #64]	; (800160c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x118>)
 80015ca:	4815      	ldr	r0, [pc, #84]	; (8001620 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x12c>)
 80015cc:	2290      	movs	r2, #144	; 0x90
 80015ce:	f7ff fe49 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_SettingScroll;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x130>)
                        mCallback = &LcdSimulate::impl_3_AboutScreen;
 80015d4:	6063      	str	r3, [r4, #4]
 80015d6:	2300      	movs	r3, #0
 80015d8:	60a3      	str	r3, [r4, #8]
 80015da:	e799      	b.n	8001510 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c>
                    else if (arrowLine == 2)
 80015dc:	2f02      	cmp	r7, #2
 80015de:	d197      	bne.n	8001510 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c>
                        LOGI("Go to About");
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x114>)
 80015e2:	490a      	ldr	r1, [pc, #40]	; (800160c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x118>)
 80015e4:	4810      	ldr	r0, [pc, #64]	; (8001628 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x134>)
 80015e6:	2296      	movs	r2, #150	; 0x96
 80015e8:	f7ff fe3c 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_AboutScreen;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x138>)
 80015ee:	e7f1      	b.n	80015d4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xe0>
 80015f0:	20000260 	.word	0x20000260
 80015f4:	0800adf8 	.word	0x0800adf8
 80015f8:	0800ae07 	.word	0x0800ae07
 80015fc:	0800ae16 	.word	0x0800ae16
 8001600:	0800ae1e 	.word	0x0800ae1e
 8001604:	0800ae33 	.word	0x0800ae33
 8001608:	0800ad6a 	.word	0x0800ad6a
 800160c:	0800ad41 	.word	0x0800ad41
 8001610:	0800ad7c 	.word	0x0800ad7c
 8001614:	08001391 	.word	0x08001391
 8001618:	0800ad9f 	.word	0x0800ad9f
 800161c:	08001cb1 	.word	0x08001cb1
 8001620:	0800adbf 	.word	0x0800adbf
 8001624:	08001631 	.word	0x08001631
 8001628:	0800addf 	.word	0x0800addf
 800162c:	080011e5 	.word	0x080011e5

08001630 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv>:
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                mLcd.displayLine(arrowLine, 0, ">");
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
            }

            void impl_3_SettingScroll()
 8001630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001634:	b0c3      	sub	sp, #268	; 0x10c
 8001636:	4604      	mov	r4, r0
            {
                // Trong che do setting thi dung sac
                ChargeControl::getInstance().mChargePause = true;
 8001638:	f7ff fda4 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 800163c:	f04f 0901 	mov.w	r9, #1

                const int COL = 21;
                const int ROW = 12;

                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
 8001640:	49a0      	ldr	r1, [pc, #640]	; (80018c4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x294>)
                ChargeControl::getInstance().mChargePause = true;
 8001642:	f880 9008 	strb.w	r9, [r0, #8]
                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
 8001646:	22fc      	movs	r2, #252	; 0xfc
 8001648:	a803      	add	r0, sp, #12
 800164a:	f005 ff3a 	bl	80074c2 <memcpy>
                        "7 FAN TRIGGER TEMP", "8 SHUTDOWN TEMP", "9 AUTOLOAD", "10BACKLIGHT SLEEP",
                        "11FACTORY RESET" };
                static int arrowLine = 0;
                static int mIndexLine = 1;

                auto &button = Button::getInstance();
 800164e:	f7ff fdb9 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001652:	4607      	mov	r7, r0
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001654:	f003 fea4 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001658:	4548      	cmp	r0, r9
 800165a:	4d9b      	ldr	r5, [pc, #620]	; (80018c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x298>)
 800165c:	4e9b      	ldr	r6, [pc, #620]	; (80018cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x29c>)
 800165e:	d14e      	bne.n	80016fe <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xce>
                    /*
                     Feature: Dong bo giua index va mui ten '>'
                     - Mui ten phu thuoc vao index.
                     - Moi lan, chi hien thi 3 tuy chon, nen index va mui ten phai dong bo voi nhau
                     */
                    if (mIndexLine == 1)
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	454b      	cmp	r3, r9
                    {
                        mIndexLine = ROW - 1;
 8001664:	bf0b      	itete	eq
 8001666:	230b      	moveq	r3, #11
                        arrowLine = 2;
                    }
                    else
                    {
                        mIndexLine--;
 8001668:	f103 33ff 	addne.w	r3, r3, #4294967295
                        mIndexLine = ROW - 1;
 800166c:	602b      	streq	r3, [r5, #0]
                        mIndexLine--;
 800166e:	602b      	strne	r3, [r5, #0]
                        arrowLine = 2;
 8001670:	bf04      	itt	eq
 8001672:	2302      	moveq	r3, #2
 8001674:	6033      	streq	r3, [r6, #0]
                    }

                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001676:	682b      	ldr	r3, [r5, #0]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d001      	beq.n	8001680 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x50>
 800167c:	2b0a      	cmp	r3, #10
 800167e:	d104      	bne.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                    {
                        if (arrowLine == 0)
 8001680:	6833      	ldr	r3, [r6, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d139      	bne.n	80016fa <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xca>
                        {
                            arrowLine = 2;
 8001686:	2302      	movs	r3, #2
                    }

                    if (mIndexLine == ROW - 1)
                    {
                        mIndexLine = 1;
                        arrowLine = 0;
 8001688:	6033      	str	r3, [r6, #0]
                else
                {

                }

                mLcd.clearDisplay();
 800168a:	340c      	adds	r4, #12
 800168c:	4620      	mov	r0, r4
 800168e:	f004 fa0b 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                if (mIndexLine == 1)
 8001692:	682a      	ldr	r2, [r5, #0]
 8001694:	2a01      	cmp	r2, #1
 8001696:	f040 80df 	bne.w	8001858 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x228>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 800169a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 800169e:	2100      	movs	r1, #0
 80016a0:	4620      	mov	r0, r4
 80016a2:	9201      	str	r2, [sp, #4]
 80016a4:	f004 f962 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 80016a8:	682b      	ldr	r3, [r5, #0]
 80016aa:	f04f 0815 	mov.w	r8, #21
 80016ae:	aa03      	add	r2, sp, #12
 80016b0:	fb03 8308 	mla	r3, r3, r8, r8
 80016b4:	4413      	add	r3, r2
 80016b6:	9a01      	ldr	r2, [sp, #4]
 80016b8:	4620      	mov	r0, r4
 80016ba:	4611      	mov	r1, r2
 80016bc:	f004 f956 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	aa03      	add	r2, sp, #12
 80016c4:	3302      	adds	r3, #2
 80016c6:	fb08 2303 	mla	r3, r8, r3, r2
 80016ca:	9a01      	ldr	r2, [sp, #4]
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
                    mLcd.displayLine(1, 1, list[mIndexLine]);
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 80016cc:	4620      	mov	r0, r4
 80016ce:	2102      	movs	r1, #2
 80016d0:	f004 f94c 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 80016d4:	4620      	mov	r0, r4
 80016d6:	4b7e      	ldr	r3, [pc, #504]	; (80018d0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	2103      	movs	r1, #3
 80016dc:	f004 f946 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 80016e0:	4b7c      	ldr	r3, [pc, #496]	; (80018d4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a4>)
 80016e2:	7831      	ldrb	r1, [r6, #0]
 80016e4:	2200      	movs	r2, #0
 80016e6:	4620      	mov	r0, r4
 80016e8:	f004 f940 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80016ec:	2100      	movs	r1, #0
 80016ee:	4638      	mov	r0, r7
 80016f0:	f003 fe54 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80016f4:	b043      	add	sp, #268	; 0x10c
 80016f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            arrowLine--;
 80016fa:	3b01      	subs	r3, #1
 80016fc:	e7c4      	b.n	8001688 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x58>
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80016fe:	4638      	mov	r0, r7
 8001700:	f003 fe4e 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001704:	2802      	cmp	r0, #2
 8001706:	d113      	bne.n	8001730 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x100>
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001708:	682b      	ldr	r3, [r5, #0]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d001      	beq.n	8001712 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xe2>
 800170e:	2b0a      	cmp	r3, #10
 8001710:	d105      	bne.n	800171e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xee>
                        if (arrowLine == 2)
 8001712:	6832      	ldr	r2, [r6, #0]
 8001714:	2a02      	cmp	r2, #2
                            arrowLine = 0;
 8001716:	bf0c      	ite	eq
 8001718:	2200      	moveq	r2, #0
                            arrowLine++;
 800171a:	3201      	addne	r2, #1
 800171c:	6032      	str	r2, [r6, #0]
                    if (mIndexLine == ROW - 1)
 800171e:	2b0b      	cmp	r3, #11
 8001720:	d103      	bne.n	800172a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xfa>
                        mIndexLine = 1;
 8001722:	2301      	movs	r3, #1
 8001724:	602b      	str	r3, [r5, #0]
                        arrowLine = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	e7ae      	b.n	8001688 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x58>
                        mIndexLine++;
 800172a:	3301      	adds	r3, #1
 800172c:	602b      	str	r3, [r5, #0]
 800172e:	e7ac      	b.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001730:	4638      	mov	r0, r7
 8001732:	f003 fe35 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001736:	2804      	cmp	r0, #4
 8001738:	d115      	bne.n	8001766 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x136>
                    LOGI("Go back to Menu screen");
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 800173c:	4967      	ldr	r1, [pc, #412]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 800173e:	4868      	ldr	r0, [pc, #416]	; (80018e0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2b0>)
 8001740:	f240 128f 	movw	r2, #399	; 0x18f
 8001744:	f7ff fd8e 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 8001748:	f04f 0800 	mov.w	r8, #0
 800174c:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2b4>)
 800174e:	6063      	str	r3, [r4, #4]
 8001750:	f8c4 8008 	str.w	r8, [r4, #8]
                    arrowLine = 0;
 8001754:	f8c6 8000 	str.w	r8, [r6]
                    mIndexLine = 1;
 8001758:	f8c5 9000 	str.w	r9, [r5]
                    ChargeControl::getInstance().mChargePause = false;
 800175c:	f7ff fd12 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8001760:	f880 8008 	strb.w	r8, [r0, #8]
 8001764:	e791      	b.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001766:	4638      	mov	r0, r7
 8001768:	f003 fe1a 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800176c:	2803      	cmp	r0, #3
 800176e:	d18c      	bne.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                    if (mIndexLine == 1)
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d10b      	bne.n	800178e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x15e>
                        LOGI("Go to Supply Algorithm");
 8001776:	4b58      	ldr	r3, [pc, #352]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001778:	4958      	ldr	r1, [pc, #352]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 800177a:	485b      	ldr	r0, [pc, #364]	; (80018e8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2b8>)
 800177c:	f240 129d 	movw	r2, #413	; 0x19d
 8001780:	f7ff fd70 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_SupplyAlgorithm;
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2bc>)
                        mCallback = &LcdSimulate::impl_3_2_FactoryReset;
 8001786:	6063      	str	r3, [r4, #4]
 8001788:	2300      	movs	r3, #0
 800178a:	60a3      	str	r3, [r4, #8]
 800178c:	e77d      	b.n	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
                    else if (mIndexLine == 2)
 800178e:	3b02      	subs	r3, #2
 8001790:	2b09      	cmp	r3, #9
 8001792:	f63f af7a 	bhi.w	800168a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a>
 8001796:	e8df f003 	tbb	[pc, r3]
 800179a:	0e05      	.short	0x0e05
 800179c:	32292017 	.word	0x32292017
 80017a0:	564d443b 	.word	0x564d443b
                        LOGI("Go to Charge mode");
 80017a4:	4b4c      	ldr	r3, [pc, #304]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017a6:	494d      	ldr	r1, [pc, #308]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017a8:	4851      	ldr	r0, [pc, #324]	; (80018f0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80017aa:	f240 12a3 	movw	r2, #419	; 0x1a3
 80017ae:	f7ff fd59 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargeMode;
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 80017b4:	e7e7      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Max battery voltage");
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017b8:	4948      	ldr	r1, [pc, #288]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017ba:	484f      	ldr	r0, [pc, #316]	; (80018f8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 80017bc:	f240 12a9 	movw	r2, #425	; 0x1a9
 80017c0:	f7ff fd50 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MaxBatteryVolt;
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 80017c6:	e7de      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Min battery voltage");
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017ca:	4944      	ldr	r1, [pc, #272]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017cc:	484c      	ldr	r0, [pc, #304]	; (8001900 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d0>)
 80017ce:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80017d2:	f7ff fd47 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MinBatteryVolt;
 80017d6:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d4>)
 80017d8:	e7d5      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Charging current");
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017dc:	493f      	ldr	r1, [pc, #252]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017de:	484a      	ldr	r0, [pc, #296]	; (8001908 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d8>)
 80017e0:	f240 12b3 	movw	r2, #435	; 0x1b3
 80017e4:	f7ff fd3e 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargingCurrent;
 80017e8:	4b48      	ldr	r3, [pc, #288]	; (800190c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2dc>)
 80017ea:	e7cc      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Cooling fan");
 80017ec:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 80017ee:	493b      	ldr	r1, [pc, #236]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 80017f0:	4847      	ldr	r0, [pc, #284]	; (8001910 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e0>)
 80017f2:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80017f6:	f7ff fd35 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_CoolingFan;
 80017fa:	4b46      	ldr	r3, [pc, #280]	; (8001914 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e4>)
 80017fc:	e7c3      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Fan trigger temp");
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001800:	4936      	ldr	r1, [pc, #216]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 8001802:	4845      	ldr	r0, [pc, #276]	; (8001918 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e8>)
 8001804:	f240 12bd 	movw	r2, #445	; 0x1bd
 8001808:	f7ff fd2c 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FanTriggerTemp;
 800180c:	4b43      	ldr	r3, [pc, #268]	; (800191c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ec>)
 800180e:	e7ba      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Shutdown temp");
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001812:	4932      	ldr	r1, [pc, #200]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 8001814:	4842      	ldr	r0, [pc, #264]	; (8001920 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f0>)
 8001816:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 800181a:	f7ff fd23 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ShutdownTemp;
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f4>)
 8001820:	e7b1      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Autoload config");
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001824:	492d      	ldr	r1, [pc, #180]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 8001826:	4840      	ldr	r0, [pc, #256]	; (8001928 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f8>)
 8001828:	f240 12c7 	movw	r2, #455	; 0x1c7
 800182c:	f7ff fd1a 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_AutoloadCfg;
 8001830:	4b3e      	ldr	r3, [pc, #248]	; (800192c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2fc>)
 8001832:	e7a8      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Backlight");
 8001834:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001836:	4929      	ldr	r1, [pc, #164]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 8001838:	483d      	ldr	r0, [pc, #244]	; (8001930 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x300>)
 800183a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800183e:	f7ff fd11 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_Backlight;
 8001842:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x304>)
 8001844:	e79f      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                        LOGI("Go to Factory reset");
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2a8>)
 8001848:	4924      	ldr	r1, [pc, #144]	; (80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ac>)
 800184a:	483b      	ldr	r0, [pc, #236]	; (8001938 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x308>)
 800184c:	f240 12d1 	movw	r2, #465	; 0x1d1
 8001850:	f7ff fd08 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FactoryReset;
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x30c>)
 8001856:	e796      	b.n	8001786 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x156>
                else if (mIndexLine == ROW - 1)
 8001858:	2a0b      	cmp	r2, #11
 800185a:	d118      	bne.n	800188e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x25e>
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 800185c:	f10d 03c9 	add.w	r3, sp, #201	; 0xc9
 8001860:	2201      	movs	r2, #1
 8001862:	2100      	movs	r1, #0
 8001864:	4620      	mov	r0, r4
 8001866:	f004 f881 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	f04f 0815 	mov.w	r8, #21
 8001870:	aa03      	add	r2, sp, #12
 8001872:	3b01      	subs	r3, #1
 8001874:	fb08 2303 	mla	r3, r8, r3, r2
 8001878:	2201      	movs	r2, #1
 800187a:	4611      	mov	r1, r2
 800187c:	4620      	mov	r0, r4
 800187e:	f004 f875 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	aa03      	add	r2, sp, #12
 8001886:	fb08 2303 	mla	r3, r8, r3, r2
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 800188a:	2201      	movs	r2, #1
 800188c:	e71e      	b.n	80016cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x9c>
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 800188e:	f04f 0815 	mov.w	r8, #21
 8001892:	1e53      	subs	r3, r2, #1
 8001894:	aa03      	add	r2, sp, #12
 8001896:	fb08 2303 	mla	r3, r8, r3, r2
 800189a:	2100      	movs	r1, #0
 800189c:	2201      	movs	r2, #1
 800189e:	4620      	mov	r0, r4
 80018a0:	f004 f864 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	aa03      	add	r2, sp, #12
 80018a8:	fb08 2303 	mla	r3, r8, r3, r2
 80018ac:	2201      	movs	r2, #1
 80018ae:	4611      	mov	r1, r2
 80018b0:	4620      	mov	r0, r4
 80018b2:	f004 f85b 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 80018b6:	682b      	ldr	r3, [r5, #0]
 80018b8:	fb03 8808 	mla	r8, r3, r8, r8
 80018bc:	ab03      	add	r3, sp, #12
 80018be:	4443      	add	r3, r8
 80018c0:	e7e3      	b.n	800188a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x25a>
 80018c2:	bf00      	nop
 80018c4:	0800aa28 	.word	0x0800aa28
 80018c8:	20000004 	.word	0x20000004
 80018cc:	20000258 	.word	0x20000258
 80018d0:	0800ae1e 	.word	0x0800ae1e
 80018d4:	0800ae33 	.word	0x0800ae33
 80018d8:	0800ae35 	.word	0x0800ae35
 80018dc:	0800ad41 	.word	0x0800ad41
 80018e0:	0800ae4a 	.word	0x0800ae4a
 80018e4:	080014f5 	.word	0x080014f5
 80018e8:	0800ae6e 	.word	0x0800ae6e
 80018ec:	08001bad 	.word	0x08001bad
 80018f0:	0800ae92 	.word	0x0800ae92
 80018f4:	08001a65 	.word	0x08001a65
 80018f8:	0800aeb1 	.word	0x0800aeb1
 80018fc:	08002a19 	.word	0x08002a19
 8001900:	0800aed8 	.word	0x0800aed8
 8001904:	08002899 	.word	0x08002899
 8001908:	0800aeff 	.word	0x0800aeff
 800190c:	08002719 	.word	0x08002719
 8001910:	0800af23 	.word	0x0800af23
 8001914:	08002cc1 	.word	0x08002cc1
 8001918:	0800af42 	.word	0x0800af42
 800191c:	0800259d 	.word	0x0800259d
 8001920:	0800af66 	.word	0x0800af66
 8001924:	08002421 	.word	0x08002421
 8001928:	0800af87 	.word	0x0800af87
 800192c:	08002bbd 	.word	0x08002bbd
 8001930:	0800afaa 	.word	0x0800afaa
 8001934:	08001985 	.word	0x08001985
 8001938:	0800afc7 	.word	0x0800afc7
 800193c:	08001941 	.word	0x08001941

08001940 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv>:
                mLcd.displayLine(3, 15, "4BACK");

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
            }

            void impl_3_2_FactoryReset()
 8001940:	b538      	push	{r3, r4, r5, lr}
 8001942:	4604      	mov	r4, r0
            {
                auto &button = Button::getInstance();
 8001944:	f7ff fc3e 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001948:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800194a:	f003 fd29 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800194e:	2804      	cmp	r0, #4
 8001950:	d10a      	bne.n	8001968 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x28>
                {
                    LOGI("Go back to Setting screen");
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x34>)
 8001954:	4908      	ldr	r1, [pc, #32]	; (8001978 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x38>)
 8001956:	4809      	ldr	r0, [pc, #36]	; (800197c <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x3c>)
 8001958:	f240 4299 	movw	r2, #1177	; 0x499
 800195c:	f7ff fc82 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x40>)
 8001962:	6063      	str	r3, [r4, #4]
 8001964:	2300      	movs	r3, #0
 8001966:	60a3      	str	r3, [r4, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001968:	4628      	mov	r0, r5
 800196a:	2100      	movs	r1, #0
            }
 800196c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001970:	f003 bd14 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 8001974:	0800afe8 	.word	0x0800afe8
 8001978:	0800ad41 	.word	0x0800ad41
 800197c:	0800affe 	.word	0x0800affe
 8001980:	08001631 	.word	0x08001631

08001984 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv>:
            void impl_3_2_Backlight()
 8001984:	b570      	push	{r4, r5, r6, lr}
 8001986:	4604      	mov	r4, r0
                auto &button = Button::getInstance();
 8001988:	f7ff fc1c 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800198c:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 800198e:	f003 fd07 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001992:	2801      	cmp	r0, #1
 8001994:	4e28      	ldr	r6, [pc, #160]	; (8001a38 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xb4>)
 8001996:	d132      	bne.n	80019fe <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x7a>
                    isBacklight = !isBacklight;
 8001998:	7833      	ldrb	r3, [r6, #0]
 800199a:	f083 0301 	eor.w	r3, r3, #1
 800199e:	7033      	strb	r3, [r6, #0]
                mLcd.clearDisplay();
 80019a0:	340c      	adds	r4, #12
 80019a2:	4620      	mov	r0, r4
 80019a4:	f004 f880 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "LCD BACKLIGHT");
 80019a8:	2200      	movs	r2, #0
 80019aa:	4611      	mov	r1, r2
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xb8>)
 80019ae:	4620      	mov	r0, r4
 80019b0:	f003 ffdc 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (isBacklight)
 80019b4:	7832      	ldrb	r2, [r6, #0]
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d037      	beq.n	8001a2a <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xa6>
                    mLcd.displayLine(1, 0, "YES");
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xbc>)
 80019bc:	2200      	movs	r2, #0
                    mLcd.displayLine(1, 0, "NO ");
 80019be:	2101      	movs	r1, #1
 80019c0:	4620      	mov	r0, r4
 80019c2:	f003 ffd3 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80019c6:	4628      	mov	r0, r5
 80019c8:	f003 fcea 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80019cc:	2803      	cmp	r0, #3
 80019ce:	d10a      	bne.n	80019e6 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x62>
                    if (isBacklight == true)
 80019d0:	7836      	ldrb	r6, [r6, #0]
                mLcd.noBackligth();
            }

            void impl_backLight()
            {
                mLcd.backlight();
 80019d2:	4620      	mov	r0, r4
                    if (isBacklight == true)
 80019d4:	b35e      	cbz	r6, 8001a2e <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xaa>
                mLcd.backlight();
 80019d6:	f004 f8d3 	bl	8005b80 <_ZN4blib3Lcd9backlightEv>
                        mLcd.displayLine(2, 0, "> Backlight on");
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xc0>)
 80019dc:	2200      	movs	r2, #0
                        mLcd.displayLine(2, 0, "> Backlight off");
 80019de:	2102      	movs	r1, #2
 80019e0:	4620      	mov	r0, r4
 80019e2:	f003 ffc3 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, "4BACK");
 80019e6:	4620      	mov	r0, r4
 80019e8:	2103      	movs	r1, #3
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xc4>)
 80019ec:	220f      	movs	r2, #15
 80019ee:	f003 ffbd 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80019f2:	4628      	mov	r0, r5
 80019f4:	2100      	movs	r1, #0
            }
 80019f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80019fa:	f003 bccf 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80019fe:	4628      	mov	r0, r5
 8001a00:	f003 fcce 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001a04:	2802      	cmp	r0, #2
 8001a06:	d0c7      	beq.n	8001998 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x14>
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001a08:	4628      	mov	r0, r5
 8001a0a:	f003 fcc9 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001a0e:	2804      	cmp	r0, #4
 8001a10:	d1c6      	bne.n	80019a0 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x1c>
                    LOGI("Go back to Setting screen");
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xc8>)
 8001a14:	490e      	ldr	r1, [pc, #56]	; (8001a50 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xcc>)
 8001a16:	480f      	ldr	r0, [pc, #60]	; (8001a54 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xd0>)
 8001a18:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8001a1c:	f7ff fc22 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xd4>)
 8001a22:	6063      	str	r3, [r4, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60a3      	str	r3, [r4, #8]
 8001a28:	e7ba      	b.n	80019a0 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x1c>
                    mLcd.displayLine(1, 0, "NO ");
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xd8>)
 8001a2c:	e7c7      	b.n	80019be <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x3a>
                mLcd.noBackligth();
 8001a2e:	f004 f8a3 	bl	8005b78 <_ZN4blib3Lcd11noBackligthEv>
                        mLcd.displayLine(2, 0, "> Backlight off");
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xdc>)
 8001a34:	4632      	mov	r2, r6
 8001a36:	e7d2      	b.n	80019de <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x5a>
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	0800b038 	.word	0x0800b038
 8001a40:	0800b377 	.word	0x0800b377
 8001a44:	0800b046 	.word	0x0800b046
 8001a48:	0800b09a 	.word	0x0800b09a
 8001a4c:	0800b025 	.word	0x0800b025
 8001a50:	0800ad41 	.word	0x0800ad41
 8001a54:	0800affe 	.word	0x0800affe
 8001a58:	08001631 	.word	0x08001631
 8001a5c:	0800b370 	.word	0x0800b370
 8001a60:	0800b055 	.word	0x0800b055

08001a64 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv>:
            void impl_3_2_ChargeMode()
 8001a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a68:	4680      	mov	r8, r0
                auto &button = Button::getInstance();
 8001a6a:	f7ff fbab 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001a6e:	4606      	mov	r6, r0
                auto &chargeCtrl = ChargeControl::getInstance();
 8001a70:	f7ff fb88 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
                mLcd.clearDisplay();
 8001a74:	f108 040c 	add.w	r4, r8, #12
                auto &chargeCtrl = ChargeControl::getInstance();
 8001a78:	4607      	mov	r7, r0
                mLcd.clearDisplay();
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	f004 f814 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MODE");
 8001a80:	2200      	movs	r2, #0
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x110>)
 8001a84:	4d3c      	ldr	r5, [pc, #240]	; (8001b78 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x114>)
 8001a86:	4611      	mov	r1, r2
 8001a88:	4620      	mov	r0, r4
 8001a8a:	f003 ff6f 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001a8e:	4630      	mov	r0, r6
 8001a90:	f003 fc86 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001a94:	2801      	cmp	r0, #1
 8001a96:	d11b      	bne.n	8001ad0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x6c>
                    if (ouputMode == OutputMode::PSU)
 8001a98:	682b      	ldr	r3, [r5, #0]
 8001a9a:	b9ab      	cbnz	r3, 8001ac8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x64>
                        ouputMode = OutputMode::INVERTER;
 8001a9c:	2302      	movs	r3, #2
                        ouputMode = (OutputMode) u8;
 8001a9e:	602b      	str	r3, [r5, #0]
                if (ouputMode == OutputMode::PSU)
 8001aa0:	6829      	ldr	r1, [r5, #0]
 8001aa2:	bb09      	cbnz	r1, 8001ae8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x84>
                    mLcd.displayLine(2, 0, "PSU");
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x118>)
                    mLcd.displayLine(2, 0, "Charger");
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2102      	movs	r1, #2
                    mLcd.displayLine(2, 0, "Inverter");
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f003 ff5e 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	f003 fc75 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ab6:	2803      	cmp	r0, #3
 8001ab8:	d127      	bne.n	8001b0a <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa6>
                    if (ouputMode == OutputMode::PSU)
 8001aba:	6829      	ldr	r1, [r5, #0]
 8001abc:	b9e9      	cbnz	r1, 8001afa <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x96>
                        mLcd.displayLine(1, 0, ">>PSU");
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x11c>)
                        chargeCtrl.mOutputMode = ouputMode;
 8001ac0:	60f9      	str	r1, [r7, #12]
                        mLcd.displayLine(1, 0, "Error mode");
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	e01d      	b.n	8001b04 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                        u8--;
 8001ac8:	3b01      	subs	r3, #1
                        ouputMode = (OutputMode) u8;
 8001aca:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001ace:	e7e6      	b.n	8001a9e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x3a>
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f003 fc65 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ad6:	2802      	cmp	r0, #2
 8001ad8:	d1e2      	bne.n	8001aa0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x3c>
                    if (ouputMode == OutputMode::INVERTER)
 8001ada:	682b      	ldr	r3, [r5, #0]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d101      	bne.n	8001ae4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x80>
                        ouputMode = OutputMode::PSU;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	e7dc      	b.n	8001a9e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x3a>
                        u8++;
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	e7f0      	b.n	8001aca <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x66>
                else if (ouputMode == OutputMode::CHARGER)
 8001ae8:	2901      	cmp	r1, #1
 8001aea:	d101      	bne.n	8001af0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x8c>
                    mLcd.displayLine(2, 0, "Charger");
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x120>)
 8001aee:	e7da      	b.n	8001aa6 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x42>
                else if (ouputMode == OutputMode::INVERTER)
 8001af0:	2902      	cmp	r1, #2
 8001af2:	d1dd      	bne.n	8001ab0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x4c>
                    mLcd.displayLine(2, 0, "Inverter");
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x124>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	e7d7      	b.n	8001aaa <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x46>
                    else if (ouputMode == OutputMode::CHARGER)
 8001afa:	2901      	cmp	r1, #1
 8001afc:	d10b      	bne.n	8001b16 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xb2>
                        mLcd.displayLine(1, 0, ">>Charger");
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x128>)
                        chargeCtrl.mOutputMode = ouputMode;
 8001b00:	60f9      	str	r1, [r7, #12]
                        mLcd.displayLine(1, 0, ">>Charger");
 8001b02:	2200      	movs	r2, #0
                        mLcd.displayLine(1, 0, "Error mode");
 8001b04:	4620      	mov	r0, r4
 8001b06:	f003 ff31 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (chargeCtrl.mOutputMode == OutputMode::PSU)
 8001b0a:	68f9      	ldr	r1, [r7, #12]
 8001b0c:	b949      	cbnz	r1, 8001b22 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xbe>
                    mLcd.displayLine(1, 0, "PSU");
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x118>)
                    mLcd.displayLine(1, 0, "Inverter");
 8001b10:	2200      	movs	r2, #0
 8001b12:	2101      	movs	r1, #1
 8001b14:	e009      	b.n	8001b2a <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xc6>
                    else if (ouputMode == OutputMode::INVERTER)
 8001b16:	2902      	cmp	r1, #2
                        mLcd.displayLine(1, 0, ">>Inverter");
 8001b18:	bf0a      	itet	eq
 8001b1a:	4b1d      	ldreq	r3, [pc, #116]	; (8001b90 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x12c>)
                        mLcd.displayLine(1, 0, "Error mode");
 8001b1c:	4b1d      	ldrne	r3, [pc, #116]	; (8001b94 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x130>)
                        chargeCtrl.mOutputMode = ouputMode;
 8001b1e:	60f9      	streq	r1, [r7, #12]
                        mLcd.displayLine(1, 0, "Error mode");
 8001b20:	e7cf      	b.n	8001ac2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x5e>
                else if (chargeCtrl.mOutputMode == OutputMode::CHARGER)
 8001b22:	2901      	cmp	r1, #1
 8001b24:	d122      	bne.n	8001b6c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x108>
                    mLcd.displayLine(1, 0, "Charger");
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x120>)
 8001b28:	2200      	movs	r2, #0
                    mLcd.displayLine(1, 0, "Inverter");
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f003 ff1e 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x134>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	2103      	movs	r1, #3
 8001b36:	4620      	mov	r0, r4
 8001b38:	f003 ff18 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001b3c:	4630      	mov	r0, r6
 8001b3e:	f003 fc2f 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001b42:	2804      	cmp	r0, #4
 8001b44:	d10c      	bne.n	8001b60 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xfc>
                    LOGI("Go back to Setting screen");
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x138>)
 8001b48:	4915      	ldr	r1, [pc, #84]	; (8001ba0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x13c>)
 8001b4a:	4816      	ldr	r0, [pc, #88]	; (8001ba4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x140>)
 8001b4c:	f240 22f2 	movw	r2, #754	; 0x2f2
 8001b50:	f7ff fb88 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x144>)
 8001b56:	f8c8 3004 	str.w	r3, [r8, #4]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c8 3008 	str.w	r3, [r8, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001b60:	4630      	mov	r0, r6
 8001b62:	2100      	movs	r1, #0
            }
 8001b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001b68:	f003 bc18 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                else if (chargeCtrl.mOutputMode == OutputMode::INVERTER)
 8001b6c:	2902      	cmp	r1, #2
 8001b6e:	d1df      	bne.n	8001b30 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xcc>
                    mLcd.displayLine(1, 0, "Inverter");
 8001b70:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x124>)
 8001b72:	e7cd      	b.n	8001b10 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xac>
 8001b74:	0800ae11 	.word	0x0800ae11
 8001b78:	20000250 	.word	0x20000250
 8001b7c:	0800b067 	.word	0x0800b067
 8001b80:	0800b065 	.word	0x0800b065
 8001b84:	0800b06d 	.word	0x0800b06d
 8001b88:	0800b077 	.word	0x0800b077
 8001b8c:	0800b06b 	.word	0x0800b06b
 8001b90:	0800b075 	.word	0x0800b075
 8001b94:	0800b080 	.word	0x0800b080
 8001b98:	0800b08b 	.word	0x0800b08b
 8001b9c:	0800b0a0 	.word	0x0800b0a0
 8001ba0:	0800ad41 	.word	0x0800ad41
 8001ba4:	0800affe 	.word	0x0800affe
 8001ba8:	08001631 	.word	0x08001631

08001bac <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv>:
            void impl_3_2_SupplyAlgorithm()
 8001bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb0:	4606      	mov	r6, r0
                auto &button = Button::getInstance();
 8001bb2:	f7ff fb07 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001bb6:	4605      	mov	r5, r0
                auto &chargeCtrl = ChargeControl::getInstance();
 8001bb8:	f7ff fae4 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
                mLcd.clearDisplay();
 8001bbc:	f106 040c 	add.w	r4, r6, #12
                auto &chargeCtrl = ChargeControl::getInstance();
 8001bc0:	4607      	mov	r7, r0
                mLcd.clearDisplay();
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f003 ff70 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 8001bc8:	2200      	movs	r2, #0
 8001bca:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xd8>)
 8001bcc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8001cac <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x100>
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f003 feca 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f003 fbe1 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001bde:	2801      	cmp	r0, #1
 8001be0:	d13f      	bne.n	8001c62 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xb6>
                    supplyAlgorithm = !supplyAlgorithm;
 8001be2:	f898 3000 	ldrb.w	r3, [r8]
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	f888 3000 	strb.w	r3, [r8]
                if (supplyAlgorithm == 0)
 8001bee:	f898 2000 	ldrb.w	r2, [r8]
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	d13b      	bne.n	8001c6e <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xc2>
                    mLcd.displayLine(2, 0, "CC-CV Only");
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xdc>)
                    mLcd.displayLine(2, 0, "MPPT+CC-CV");
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	4620      	mov	r0, r4
 8001bfc:	f003 feb6 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001c00:	4628      	mov	r0, r5
 8001c02:	f003 fbcd 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001c06:	2803      	cmp	r0, #3
 8001c08:	d108      	bne.n	8001c1c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x70>
                    if (supplyAlgorithm == 0)
 8001c0a:	f898 2000 	ldrb.w	r2, [r8]
 8001c0e:	bb8a      	cbnz	r2, 8001c74 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xc8>
                        mLcd.displayLine(1, 0, ">> CC-CV Only");
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xe0>)
                        chargeCtrl.mMpptMode = supplyAlgorithm;
 8001c12:	743a      	strb	r2, [r7, #16]
                        mLcd.displayLine(1, 0, ">> CC-CV Only");
 8001c14:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> MPPT+CC-CV");
 8001c16:	4620      	mov	r0, r4
 8001c18:	f003 fea8 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (chargeCtrl.mMpptMode == 0)
 8001c1c:	7c3a      	ldrb	r2, [r7, #16]
 8001c1e:	bb72      	cbnz	r2, 8001c7e <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xd2>
                    mLcd.displayLine(1, 0, "CC-CV Only");
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xdc>)
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
 8001c22:	2101      	movs	r1, #1
 8001c24:	4620      	mov	r0, r4
 8001c26:	f003 fea1 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xe4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2103      	movs	r1, #3
 8001c30:	4620      	mov	r0, r4
 8001c32:	f003 fe9b 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001c36:	4628      	mov	r0, r5
 8001c38:	f003 fbb2 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001c3c:	2804      	cmp	r0, #4
 8001c3e:	d10a      	bne.n	8001c56 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xaa>
                    LOGI("Go back to Setting screen");
 8001c40:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xe8>)
 8001c42:	4915      	ldr	r1, [pc, #84]	; (8001c98 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xec>)
 8001c44:	4815      	ldr	r0, [pc, #84]	; (8001c9c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xf0>)
 8001c46:	f44f 7224 	mov.w	r2, #656	; 0x290
 8001c4a:	f7ff fb0b 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xf4>)
 8001c50:	6073      	str	r3, [r6, #4]
 8001c52:	2300      	movs	r3, #0
 8001c54:	60b3      	str	r3, [r6, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001c56:	4628      	mov	r0, r5
 8001c58:	2100      	movs	r1, #0
            }
 8001c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001c5e:	f003 bb9d 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001c62:	4628      	mov	r0, r5
 8001c64:	f003 fb9c 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001c68:	2802      	cmp	r0, #2
 8001c6a:	d1c0      	bne.n	8001bee <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x42>
 8001c6c:	e7b9      	b.n	8001be2 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x36>
                    mLcd.displayLine(2, 0, "MPPT+CC-CV");
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xf8>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	e7c1      	b.n	8001bf8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x4c>
                        chargeCtrl.mMpptMode = supplyAlgorithm;
 8001c74:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> MPPT+CC-CV");
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>)
                        chargeCtrl.mMpptMode = supplyAlgorithm;
 8001c78:	7439      	strb	r1, [r7, #16]
                        mLcd.displayLine(1, 0, ">> MPPT+CC-CV");
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	e7cb      	b.n	8001c16 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x6a>
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xf8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	e7ce      	b.n	8001c22 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x76>
 8001c84:	0800b0b4 	.word	0x0800b0b4
 8001c88:	0800b0c8 	.word	0x0800b0c8
 8001c8c:	0800b0c5 	.word	0x0800b0c5
 8001c90:	0800b08b 	.word	0x0800b08b
 8001c94:	0800b0e1 	.word	0x0800b0e1
 8001c98:	0800ad41 	.word	0x0800ad41
 8001c9c:	0800affe 	.word	0x0800affe
 8001ca0:	08001631 	.word	0x08001631
 8001ca4:	0800b0d6 	.word	0x0800b0d6
 8001ca8:	0800b0d3 	.word	0x0800b0d3
 8001cac:	20000254 	.word	0x20000254

08001cb0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv>:
            void impl_3_DisplayScroll()
 8001cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb4:	b09e      	sub	sp, #120	; 0x78
                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
 8001cb6:	4978      	ldr	r1, [pc, #480]	; (8001e98 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1e8>)
 8001cb8:	4d78      	ldr	r5, [pc, #480]	; (8001e9c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ec>)
 8001cba:	4e79      	ldr	r6, [pc, #484]	; (8001ea0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1f0>)
 8001cbc:	2269      	movs	r2, #105	; 0x69
            void impl_3_DisplayScroll()
 8001cbe:	4604      	mov	r4, r0
                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
 8001cc0:	a803      	add	r0, sp, #12
 8001cc2:	f005 fbfe 	bl	80074c2 <memcpy>
                auto &button = Button::getInstance();
 8001cc6:	f7ff fa7d 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001cca:	4607      	mov	r7, r0
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001ccc:	f003 fb68 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001cd0:	2801      	cmp	r0, #1
 8001cd2:	d149      	bne.n	8001d68 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xb8>
                    if (mIndexLine == 1)
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d13b      	bne.n	8001d52 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xa2>
                        mIndexLine = ROW - 1;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	602b      	str	r3, [r5, #0]
                            arrowLine = 2;
 8001cde:	2302      	movs	r3, #2
                        arrowLine = 0;
 8001ce0:	6033      	str	r3, [r6, #0]
                mLcd.clearDisplay();
 8001ce2:	340c      	adds	r4, #12
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f003 fedf 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                if (mIndexLine == 1)
 8001cea:	682a      	ldr	r2, [r5, #0]
 8001cec:	2a01      	cmp	r2, #1
 8001cee:	f040 809d 	bne.w	8001e2c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x17c>
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 8001cf2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	9201      	str	r2, [sp, #4]
 8001cfc:	f003 fe36 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 8001d00:	682b      	ldr	r3, [r5, #0]
 8001d02:	f04f 0815 	mov.w	r8, #21
 8001d06:	aa03      	add	r2, sp, #12
 8001d08:	fb03 8308 	mla	r3, r3, r8, r8
 8001d0c:	4413      	add	r3, r2
 8001d0e:	9a01      	ldr	r2, [sp, #4]
 8001d10:	4620      	mov	r0, r4
 8001d12:	4611      	mov	r1, r2
 8001d14:	f003 fe2a 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 8001d18:	682b      	ldr	r3, [r5, #0]
 8001d1a:	aa03      	add	r2, sp, #12
 8001d1c:	3302      	adds	r3, #2
 8001d1e:	fb08 2303 	mla	r3, r8, r3, r2
 8001d22:	9a01      	ldr	r2, [sp, #4]
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8001d24:	4620      	mov	r0, r4
 8001d26:	2102      	movs	r1, #2
 8001d28:	f003 fe20 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ea4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1f4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	2103      	movs	r1, #3
 8001d34:	f003 fe1a 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 8001d38:	4b5b      	ldr	r3, [pc, #364]	; (8001ea8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1f8>)
 8001d3a:	7831      	ldrb	r1, [r6, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f003 fe14 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001d44:	2100      	movs	r1, #0
 8001d46:	4638      	mov	r0, r7
 8001d48:	f003 fb28 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001d4c:	b01e      	add	sp, #120	; 0x78
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                        mIndexLine--;
 8001d52:	3b01      	subs	r3, #1
 8001d54:	602b      	str	r3, [r5, #0]
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001d56:	f023 0302 	bic.w	r3, r3, #2
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d1c1      	bne.n	8001ce2 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                        if (arrowLine == 0)
 8001d5e:	6833      	ldr	r3, [r6, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0bc      	beq.n	8001cde <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2e>
                            arrowLine--;
 8001d64:	3b01      	subs	r3, #1
 8001d66:	e7bb      	b.n	8001ce0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x30>
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001d68:	4638      	mov	r0, r7
 8001d6a:	f003 fb19 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001d6e:	2802      	cmp	r0, #2
 8001d70:	d113      	bne.n	8001d9a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xea>
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001d72:	682b      	ldr	r3, [r5, #0]
 8001d74:	f023 0202 	bic.w	r2, r3, #2
 8001d78:	2a01      	cmp	r2, #1
 8001d7a:	d108      	bne.n	8001d8e <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xde>
                        if (arrowLine == 2)
 8001d7c:	6832      	ldr	r2, [r6, #0]
 8001d7e:	2a02      	cmp	r2, #2
                            arrowLine = 0;
 8001d80:	bf0c      	ite	eq
 8001d82:	2200      	moveq	r2, #0
                            arrowLine++;
 8001d84:	3201      	addne	r2, #1
 8001d86:	6032      	str	r2, [r6, #0]
                        mIndexLine++;
 8001d88:	3301      	adds	r3, #1
                    mIndexLine = 1;
 8001d8a:	602b      	str	r3, [r5, #0]
 8001d8c:	e7a9      	b.n	8001ce2 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                    if (mIndexLine == ROW - 1)
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d1fa      	bne.n	8001d88 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xd8>
                        mIndexLine = 1;
 8001d92:	2301      	movs	r3, #1
 8001d94:	602b      	str	r3, [r5, #0]
                        arrowLine = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e7a2      	b.n	8001ce0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x30>
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001d9a:	4638      	mov	r0, r7
 8001d9c:	f003 fb00 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001da0:	2804      	cmp	r0, #4
 8001da2:	d10d      	bne.n	8001dc0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x110>
                    LOGI("Go back to Menu screen");
 8001da4:	4b41      	ldr	r3, [pc, #260]	; (8001eac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8001da6:	4942      	ldr	r1, [pc, #264]	; (8001eb0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 8001da8:	4842      	ldr	r0, [pc, #264]	; (8001eb4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x204>)
 8001daa:	f240 1201 	movw	r2, #257	; 0x101
 8001dae:	f7ff fa59 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x208>)
 8001db4:	6063      	str	r3, [r4, #4]
 8001db6:	2300      	movs	r3, #0
 8001db8:	60a3      	str	r3, [r4, #8]
                    arrowLine = 0;
 8001dba:	6033      	str	r3, [r6, #0]
                    mIndexLine = 1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e7e4      	b.n	8001d8a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xda>
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001dc0:	4638      	mov	r0, r7
 8001dc2:	f003 faed 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001dc6:	2803      	cmp	r0, #3
 8001dc8:	d18b      	bne.n	8001ce2 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                    if (mIndexLine == 1)
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d10b      	bne.n	8001de8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x138>
                        LOGI("Go to Display Config 1");
 8001dd0:	4b36      	ldr	r3, [pc, #216]	; (8001eac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8001dd2:	4937      	ldr	r1, [pc, #220]	; (8001eb0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 8001dd4:	4839      	ldr	r0, [pc, #228]	; (8001ebc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x20c>)
 8001dd6:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001dda:	f7ff fa43 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig1;
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x210>)
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig4;
 8001de0:	6063      	str	r3, [r4, #4]
 8001de2:	2300      	movs	r3, #0
 8001de4:	60a3      	str	r3, [r4, #8]
 8001de6:	e77c      	b.n	8001ce2 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                    else if (mIndexLine == 2)
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d108      	bne.n	8001dfe <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x14e>
                        LOGI("Go to Display Config 2");
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8001dee:	4930      	ldr	r1, [pc, #192]	; (8001eb0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 8001df0:	4834      	ldr	r0, [pc, #208]	; (8001ec4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x214>)
 8001df2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001df6:	f7ff fa35 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig2;
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x218>)
 8001dfc:	e7f0      	b.n	8001de0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x130>
                    else if (mIndexLine == 3)
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d108      	bne.n	8001e14 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x164>
                        LOGI("Go to Display Config 3");
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8001e04:	492a      	ldr	r1, [pc, #168]	; (8001eb0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 8001e06:	4831      	ldr	r0, [pc, #196]	; (8001ecc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x21c>)
 8001e08:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001e0c:	f7ff fa2a 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig3;
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x220>)
 8001e12:	e7e5      	b.n	8001de0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x130>
                    else if (mIndexLine == 4)
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	f47f af64 	bne.w	8001ce2 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x32>
                        LOGI("Go to Display Config 4");
 8001e1a:	4b24      	ldr	r3, [pc, #144]	; (8001eac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1fc>)
 8001e1c:	4924      	ldr	r1, [pc, #144]	; (8001eb0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x200>)
 8001e1e:	482d      	ldr	r0, [pc, #180]	; (8001ed4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x224>)
 8001e20:	f240 121d 	movw	r2, #285	; 0x11d
 8001e24:	f7ff fa1e 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig4;
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x228>)
 8001e2a:	e7d9      	b.n	8001de0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x130>
                else if (mIndexLine == ROW - 1)
 8001e2c:	2a04      	cmp	r2, #4
 8001e2e:	d118      	bne.n	8001e62 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1b2>
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 8001e30:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 8001e34:	2201      	movs	r2, #1
 8001e36:	2100      	movs	r1, #0
 8001e38:	4620      	mov	r0, r4
 8001e3a:	f003 fd97 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 8001e3e:	682b      	ldr	r3, [r5, #0]
 8001e40:	f04f 0815 	mov.w	r8, #21
 8001e44:	aa03      	add	r2, sp, #12
 8001e46:	3b01      	subs	r3, #1
 8001e48:	fb08 2303 	mla	r3, r8, r3, r2
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	4620      	mov	r0, r4
 8001e52:	f003 fd8b 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 8001e56:	682b      	ldr	r3, [r5, #0]
 8001e58:	aa03      	add	r2, sp, #12
 8001e5a:	fb08 2303 	mla	r3, r8, r3, r2
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8001e5e:	2201      	movs	r2, #1
 8001e60:	e760      	b.n	8001d24 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x74>
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 8001e62:	f04f 0815 	mov.w	r8, #21
 8001e66:	1e53      	subs	r3, r2, #1
 8001e68:	aa03      	add	r2, sp, #12
 8001e6a:	fb08 2303 	mla	r3, r8, r3, r2
 8001e6e:	2100      	movs	r1, #0
 8001e70:	2201      	movs	r2, #1
 8001e72:	4620      	mov	r0, r4
 8001e74:	f003 fd7a 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	aa03      	add	r2, sp, #12
 8001e7c:	fb08 2303 	mla	r3, r8, r3, r2
 8001e80:	2201      	movs	r2, #1
 8001e82:	4611      	mov	r1, r2
 8001e84:	4620      	mov	r0, r4
 8001e86:	f003 fd71 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	fb03 8808 	mla	r8, r3, r8, r8
 8001e90:	ab03      	add	r3, sp, #12
 8001e92:	4443      	add	r3, r8
 8001e94:	e7e3      	b.n	8001e5e <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ae>
 8001e96:	bf00      	nop
 8001e98:	0800ab24 	.word	0x0800ab24
 8001e9c:	20000008 	.word	0x20000008
 8001ea0:	2000025c 	.word	0x2000025c
 8001ea4:	0800ae1e 	.word	0x0800ae1e
 8001ea8:	0800ae33 	.word	0x0800ae33
 8001eac:	0800b0fa 	.word	0x0800b0fa
 8001eb0:	0800ad41 	.word	0x0800ad41
 8001eb4:	0800ae4a 	.word	0x0800ae4a
 8001eb8:	080014f5 	.word	0x080014f5
 8001ebc:	0800b10f 	.word	0x0800b10f
 8001ec0:	08001fa9 	.word	0x08001fa9
 8001ec4:	0800b133 	.word	0x0800b133
 8001ec8:	08001f65 	.word	0x08001f65
 8001ecc:	0800b157 	.word	0x0800b157
 8001ed0:	08001f21 	.word	0x08001f21
 8001ed4:	0800b17b 	.word	0x0800b17b
 8001ed8:	08001edd 	.word	0x08001edd

08001edc <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev>:
            void impl_3_1_DisplayConfig4()
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	4604      	mov	r4, r0
                auto &button = Button::getInstance();
 8001ee0:	f7ff f970 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001ee4:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001ee6:	f003 fa5b 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001eea:	2804      	cmp	r0, #4
 8001eec:	d10a      	bne.n	8001f04 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x28>
                    LOGI("Go back to Display screen");
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x34>)
 8001ef0:	4908      	ldr	r1, [pc, #32]	; (8001f14 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x38>)
 8001ef2:	4809      	ldr	r0, [pc, #36]	; (8001f18 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x3c>)
 8001ef4:	f44f 7212 	mov.w	r2, #584	; 0x248
 8001ef8:	f7ff f9b4 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x40>)
 8001efe:	6063      	str	r3, [r4, #4]
 8001f00:	2300      	movs	r3, #0
 8001f02:	60a3      	str	r3, [r4, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f04:	4628      	mov	r0, r5
 8001f06:	2100      	movs	r1, #0
            }
 8001f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f0c:	f003 ba46 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 8001f10:	0800b19f 	.word	0x0800b19f
 8001f14:	0800ad41 	.word	0x0800ad41
 8001f18:	0800b1b7 	.word	0x0800b1b7
 8001f1c:	08001cb1 	.word	0x08001cb1

08001f20 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev>:
            void impl_3_1_DisplayConfig3()
 8001f20:	b538      	push	{r3, r4, r5, lr}
 8001f22:	4604      	mov	r4, r0
                auto &button = Button::getInstance();
 8001f24:	f7ff f94e 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001f28:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001f2a:	f003 fa39 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f2e:	2804      	cmp	r0, #4
 8001f30:	d10a      	bne.n	8001f48 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x28>
                    LOGI("Go back to Display screen");
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x34>)
 8001f34:	4908      	ldr	r1, [pc, #32]	; (8001f58 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x38>)
 8001f36:	4809      	ldr	r0, [pc, #36]	; (8001f5c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x3c>)
 8001f38:	f240 2232 	movw	r2, #562	; 0x232
 8001f3c:	f7ff f992 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x40>)
 8001f42:	6063      	str	r3, [r4, #4]
 8001f44:	2300      	movs	r3, #0
 8001f46:	60a3      	str	r3, [r4, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f48:	4628      	mov	r0, r5
 8001f4a:	2100      	movs	r1, #0
            }
 8001f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f50:	f003 ba24 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 8001f54:	0800b1de 	.word	0x0800b1de
 8001f58:	0800ad41 	.word	0x0800ad41
 8001f5c:	0800b1b7 	.word	0x0800b1b7
 8001f60:	08001cb1 	.word	0x08001cb1

08001f64 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev>:
            void impl_3_1_DisplayConfig2()
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4604      	mov	r4, r0
                auto &button = Button::getInstance();
 8001f68:	f7ff f92c 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001f6c:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001f6e:	f003 fa17 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f72:	2804      	cmp	r0, #4
 8001f74:	d10a      	bne.n	8001f8c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x28>
                    LOGI("Go back to Display screen");
 8001f76:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x34>)
 8001f78:	4908      	ldr	r1, [pc, #32]	; (8001f9c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x38>)
 8001f7a:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x3c>)
 8001f7c:	f240 2227 	movw	r2, #551	; 0x227
 8001f80:	f7ff f970 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x40>)
 8001f86:	6063      	str	r3, [r4, #4]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60a3      	str	r3, [r4, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	2100      	movs	r1, #0
            }
 8001f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f94:	f003 ba02 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 8001f98:	0800b1f6 	.word	0x0800b1f6
 8001f9c:	0800ad41 	.word	0x0800ad41
 8001fa0:	0800b1b7 	.word	0x0800b1b7
 8001fa4:	08001cb1 	.word	0x08001cb1

08001fa8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev>:
            void impl_3_1_DisplayConfig1()
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	4604      	mov	r4, r0
                auto &button = Button::getInstance();
 8001fac:	f7ff f90a 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001fb0:	4605      	mov	r5, r0
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001fb2:	f003 f9f5 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001fb6:	2804      	cmp	r0, #4
 8001fb8:	d10a      	bne.n	8001fd0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x28>
                    LOGI("Go back to Display screen");
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x34>)
 8001fbc:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x38>)
 8001fbe:	4809      	ldr	r0, [pc, #36]	; (8001fe4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x3c>)
 8001fc0:	f240 2212 	movw	r2, #530	; 0x212
 8001fc4:	f7ff f94e 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x40>)
 8001fca:	6063      	str	r3, [r4, #4]
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60a3      	str	r3, [r4, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	2100      	movs	r1, #0
            }
 8001fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001fd8:	f003 b9e0 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
 8001fdc:	0800b20e 	.word	0x0800b20e
 8001fe0:	0800ad41 	.word	0x0800ad41
 8001fe4:	0800b1b7 	.word	0x0800b1b7
 8001fe8:	08001cb1 	.word	0x08001cb1

08001fec <main>:
{
 8001fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ff0:	b093      	sub	sp, #76	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2400      	movs	r4, #0
 8001ff4:	4da9      	ldr	r5, [pc, #676]	; (800229c <main+0x2b0>)
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001ff6:	4faa      	ldr	r7, [pc, #680]	; (80022a0 <main+0x2b4>)
    HAL_Init();
 8001ff8:	f001 f8de 	bl	80031b8 <HAL_Init>
    SystemClock_Config();
 8001ffc:	f7ff f85c 	bl	80010b8 <_Z18SystemClock_Configv>
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002000:	2214      	movs	r2, #20
 8002002:	2100      	movs	r1, #0
 8002004:	a80b      	add	r0, sp, #44	; 0x2c
 8002006:	f005 f980 	bl	800730a <memset>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	9401      	str	r4, [sp, #4]
 800200c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | LOAD_CTRL_Pin | BUCK_EN_Pin | FAN_Pin,
 800200e:	48a5      	ldr	r0, [pc, #660]	; (80022a4 <main+0x2b8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002010:	f043 0304 	orr.w	r3, r3, #4
 8002014:	632b      	str	r3, [r5, #48]	; 0x30
 8002016:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	9402      	str	r4, [sp, #8]
 8002022:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	632b      	str	r3, [r5, #48]	; 0x30
 800202a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	9403      	str	r4, [sp, #12]
 8002036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	632b      	str	r3, [r5, #48]	; 0x30
 800203e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	9303      	str	r3, [sp, #12]
 8002046:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002048:	9404      	str	r4, [sp, #16]
 800204a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800204c:	f043 0308 	orr.w	r3, r3, #8
 8002050:	632b      	str	r3, [r5, #48]	; 0x30
 8002052:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	9304      	str	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | LOAD_CTRL_Pin | BUCK_EN_Pin | FAN_Pin,
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6154 	mov.w	r1, #3392	; 0xd40
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002060:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | LOAD_CTRL_Pin | BUCK_EN_Pin | FAN_Pin,
 8002062:	f001 fe61 	bl	8003d28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BFC_GPIO_Port, BFC_Pin, GPIO_PIN_SET);
 8002066:	4890      	ldr	r0, [pc, #576]	; (80022a8 <main+0x2bc>)
 8002068:	2201      	movs	r2, #1
 800206a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206e:	f001 fe5b 	bl	8003d28 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, LED_GRE_Pin | LED_YEL_Pin | LED_RED_Pin, GPIO_PIN_SET);
 8002072:	2201      	movs	r2, #1
 8002074:	488d      	ldr	r0, [pc, #564]	; (80022ac <main+0x2c0>)
 8002076:	2115      	movs	r1, #21
 8002078:	f001 fe56 	bl	8003d28 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800207c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002080:	200f      	movs	r0, #15
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002082:	2601      	movs	r6, #1
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002084:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002088:	a90b      	add	r1, sp, #44	; 0x2c
 800208a:	4886      	ldr	r0, [pc, #536]	; (80022a4 <main+0x2b8>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800208c:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800208e:	f001 fd6b 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INVERTER_CTRL_Pin | LOAD_CTRL_Pin | BUCK_EN_Pin | FAN_Pin;
 8002092:	f44f 6354 	mov.w	r3, #3392	; 0xd40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002096:	4883      	ldr	r0, [pc, #524]	; (80022a4 <main+0x2b8>)
 8002098:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a2:	f001 fd61 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BFC_Pin;
 80020a6:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(BFC_GPIO_Port, &GPIO_InitStruct);
 80020aa:	487f      	ldr	r0, [pc, #508]	; (80022a8 <main+0x2bc>)
 80020ac:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(BFC_GPIO_Port, &GPIO_InitStruct);
 80020b6:	f001 fd57 	bl	8003b68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED_GRE_Pin | LED_YEL_Pin | LED_RED_Pin;
 80020ba:	2315      	movs	r3, #21
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020bc:	487b      	ldr	r0, [pc, #492]	; (80022ac <main+0x2c0>)
 80020be:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c0:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c8:	f001 fd4e 	bl	8003b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020cc:	4622      	mov	r2, r4
 80020ce:	4621      	mov	r1, r4
 80020d0:	2006      	movs	r0, #6
 80020d2:	f001 fb29 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020d6:	2006      	movs	r0, #6
 80020d8:	f001 fb58 	bl	800378c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020dc:	4622      	mov	r2, r4
 80020de:	4621      	mov	r1, r4
 80020e0:	2007      	movs	r0, #7
 80020e2:	f001 fb21 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020e6:	2007      	movs	r0, #7
 80020e8:	f001 fb50 	bl	800378c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80020ec:	4622      	mov	r2, r4
 80020ee:	4621      	mov	r1, r4
 80020f0:	2008      	movs	r0, #8
 80020f2:	f001 fb19 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80020f6:	2008      	movs	r0, #8
 80020f8:	f001 fb48 	bl	800378c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80020fc:	4622      	mov	r2, r4
 80020fe:	4621      	mov	r1, r4
 8002100:	2009      	movs	r0, #9
 8002102:	f001 fb11 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002106:	2009      	movs	r0, #9
 8002108:	f001 fb40 	bl	800378c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_DMA2_CLK_ENABLE();
 800210c:	9400      	str	r4, [sp, #0]
 800210e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002114:	632b      	str	r3, [r5, #48]	; 0x30
 8002116:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    hadc1.Instance = ADC1;
 8002118:	4d65      	ldr	r5, [pc, #404]	; (80022b0 <main+0x2c4>)
    __HAL_RCC_DMA2_CLK_ENABLE();
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800211e:	4622      	mov	r2, r4
 8002120:	4621      	mov	r1, r4
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002122:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002124:	2038      	movs	r0, #56	; 0x38
    __HAL_RCC_DMA2_CLK_ENABLE();
 8002126:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002128:	f001 fafe 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800212c:	2038      	movs	r0, #56	; 0x38
 800212e:	f001 fb2d 	bl	800378c <HAL_NVIC_EnableIRQ>
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8002132:	2210      	movs	r2, #16
 8002134:	4621      	mov	r1, r4
 8002136:	a80b      	add	r0, sp, #44	; 0x2c
 8002138:	f005 f8e7 	bl	800730a <memset>
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800213c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002140:	e9c5 7300 	strd	r7, r3, [r5]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002144:	4628      	mov	r0, r5
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002146:	4b5b      	ldr	r3, [pc, #364]	; (80022b4 <main+0x2c8>)
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002148:	60ac      	str	r4, [r5, #8]
    hadc1.Init.NbrOfConversion = 5;
 800214a:	2705      	movs	r7, #5
    hadc1.Init.ScanConvMode = ENABLE;
 800214c:	612e      	str	r6, [r5, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800214e:	762e      	strb	r6, [r5, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002150:	f885 4020 	strb.w	r4, [r5, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002154:	62ec      	str	r4, [r5, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002156:	62ab      	str	r3, [r5, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002158:	60ec      	str	r4, [r5, #12]
    hadc1.Init.NbrOfConversion = 5;
 800215a:	61ef      	str	r7, [r5, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800215c:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002160:	616c      	str	r4, [r5, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002162:	f001 f869 	bl	8003238 <HAL_ADC_Init>
 8002166:	b108      	cbz	r0, 800216c <main+0x180>
 8002168:	b672      	cpsid	i
    while (1)
 800216a:	e7fe      	b.n	800216a <main+0x17e>
    sConfig.Rank = 1;
 800216c:	e9cd 060b 	strd	r0, r6, [sp, #44]	; 0x2c
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002170:	2307      	movs	r3, #7
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002172:	a90b      	add	r1, sp, #44	; 0x2c
 8002174:	4628      	mov	r0, r5
    sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002176:	930d      	str	r3, [sp, #52]	; 0x34
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002178:	f001 fa34 	bl	80035e4 <HAL_ADC_ConfigChannel>
 800217c:	b108      	cbz	r0, 8002182 <main+0x196>
 800217e:	b672      	cpsid	i
    while (1)
 8002180:	e7fe      	b.n	8002180 <main+0x194>
    sConfig.Rank = 2;
 8002182:	2402      	movs	r4, #2
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002184:	a90b      	add	r1, sp, #44	; 0x2c
 8002186:	4628      	mov	r0, r5
    sConfig.Channel = ADC_CHANNEL_1;
 8002188:	960b      	str	r6, [sp, #44]	; 0x2c
    sConfig.Rank = 2;
 800218a:	940c      	str	r4, [sp, #48]	; 0x30
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800218c:	f001 fa2a 	bl	80035e4 <HAL_ADC_ConfigChannel>
 8002190:	b108      	cbz	r0, 8002196 <main+0x1aa>
 8002192:	b672      	cpsid	i
    while (1)
 8002194:	e7fe      	b.n	8002194 <main+0x1a8>
    sConfig.Channel = ADC_CHANNEL_2;
 8002196:	940b      	str	r4, [sp, #44]	; 0x2c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002198:	a90b      	add	r1, sp, #44	; 0x2c
    sConfig.Rank = 3;
 800219a:	2403      	movs	r4, #3
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800219c:	4628      	mov	r0, r5
    sConfig.Rank = 3;
 800219e:	940c      	str	r4, [sp, #48]	; 0x30
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021a0:	f001 fa20 	bl	80035e4 <HAL_ADC_ConfigChannel>
 80021a4:	b108      	cbz	r0, 80021aa <main+0x1be>
 80021a6:	b672      	cpsid	i
    while (1)
 80021a8:	e7fe      	b.n	80021a8 <main+0x1bc>
    sConfig.Channel = ADC_CHANNEL_3;
 80021aa:	940b      	str	r4, [sp, #44]	; 0x2c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ac:	a90b      	add	r1, sp, #44	; 0x2c
    sConfig.Rank = 4;
 80021ae:	2404      	movs	r4, #4
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b0:	4628      	mov	r0, r5
    sConfig.Rank = 4;
 80021b2:	940c      	str	r4, [sp, #48]	; 0x30
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021b4:	f001 fa16 	bl	80035e4 <HAL_ADC_ConfigChannel>
 80021b8:	b108      	cbz	r0, 80021be <main+0x1d2>
 80021ba:	b672      	cpsid	i
    while (1)
 80021bc:	e7fe      	b.n	80021bc <main+0x1d0>
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021be:	a90b      	add	r1, sp, #44	; 0x2c
 80021c0:	4628      	mov	r0, r5
    sConfig.Rank = 5;
 80021c2:	e9cd 470b 	strd	r4, r7, [sp, #44]	; 0x2c
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021c6:	f001 fa0d 	bl	80035e4 <HAL_ADC_ConfigChannel>
 80021ca:	b108      	cbz	r0, 80021d0 <main+0x1e4>
 80021cc:	b672      	cpsid	i
    while (1)
 80021ce:	e7fe      	b.n	80021ce <main+0x1e2>
    hiwdg.Instance = IWDG;
 80021d0:	4839      	ldr	r0, [pc, #228]	; (80022b8 <main+0x2cc>)
 80021d2:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <main+0x2d0>)
    hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80021d4:	e9c0 3400 	strd	r3, r4, [r0]
    hiwdg.Init.Reload = 4095;
 80021d8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80021dc:	6083      	str	r3, [r0, #8]
    if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80021de:	f002 f809 	bl	80041f4 <HAL_IWDG_Init>
 80021e2:	b108      	cbz	r0, 80021e8 <main+0x1fc>
 80021e4:	b672      	cpsid	i
    while (1)
 80021e6:	e7fe      	b.n	80021e6 <main+0x1fa>
    hi2c1.Instance = I2C1;
 80021e8:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <main+0x2d4>)
    hi2c1.Init.ClockSpeed = 100000;
 80021ea:	4936      	ldr	r1, [pc, #216]	; (80022c4 <main+0x2d8>)
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <main+0x2dc>)
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ee:	6218      	str	r0, [r3, #32]
    hi2c1.Init.ClockSpeed = 100000;
 80021f0:	e9c3 1200 	strd	r1, r2, [r3]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hi2c1.Init.OwnAddress1 = 0;
 80021f8:	e9c3 0002 	strd	r0, r0, [r3, #8]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021fc:	e9c3 2004 	strd	r2, r0, [r3, #16]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002200:	e9c3 0006 	strd	r0, r0, [r3, #24]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002204:	4618      	mov	r0, r3
 8002206:	f001 fe75 	bl	8003ef4 <HAL_I2C_Init>
 800220a:	4604      	mov	r4, r0
 800220c:	b108      	cbz	r0, 8002212 <main+0x226>
 800220e:	b672      	cpsid	i
    while (1)
 8002210:	e7fe      	b.n	8002210 <main+0x224>
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002212:	4601      	mov	r1, r0
 8002214:	2210      	movs	r2, #16
 8002216:	a807      	add	r0, sp, #28
 8002218:	f005 f877 	bl	800730a <memset>
    htim2.Instance = TIM2;
 800221c:	4d2b      	ldr	r5, [pc, #172]	; (80022cc <main+0x2e0>)
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 800221e:	221c      	movs	r2, #28
 8002220:	4621      	mov	r1, r4
 8002222:	a80b      	add	r0, sp, #44	; 0x2c
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002224:	e9cd 4405 	strd	r4, r4, [sp, #20]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002228:	f005 f86f 	bl	800730a <memset>
    htim2.Instance = TIM2;
 800222c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    htim2.Init.Prescaler = 0;
 8002230:	e9c5 3400 	strd	r3, r4, [r5]
    htim2.Init.Period = 3600;
 8002234:	f44f 6361 	mov.w	r3, #3600	; 0xe10
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002238:	e9c5 3403 	strd	r3, r4, [r5, #12]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800223c:	4628      	mov	r0, r5
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800223e:	2380      	movs	r3, #128	; 0x80
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002240:	60ac      	str	r4, [r5, #8]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002242:	61ab      	str	r3, [r5, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002244:	f002 fb8e 	bl	8004964 <HAL_TIM_Base_Init>
 8002248:	b108      	cbz	r0, 800224e <main+0x262>
 800224a:	b672      	cpsid	i
    while (1)
 800224c:	e7fe      	b.n	800224c <main+0x260>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800224e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002252:	a907      	add	r1, sp, #28
 8002254:	4628      	mov	r0, r5
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002256:	9307      	str	r3, [sp, #28]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002258:	f002 fc75 	bl	8004b46 <HAL_TIM_ConfigClockSource>
 800225c:	b108      	cbz	r0, 8002262 <main+0x276>
 800225e:	b672      	cpsid	i
    while (1)
 8002260:	e7fe      	b.n	8002260 <main+0x274>
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002262:	481a      	ldr	r0, [pc, #104]	; (80022cc <main+0x2e0>)
 8002264:	f002 fbaa 	bl	80049bc <HAL_TIM_PWM_Init>
 8002268:	b108      	cbz	r0, 800226e <main+0x282>
 800226a:	b672      	cpsid	i
    while (1)
 800226c:	e7fe      	b.n	800226c <main+0x280>
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	e9cd 0005 	strd	r0, r0, [sp, #20]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002272:	a905      	add	r1, sp, #20
 8002274:	4815      	ldr	r0, [pc, #84]	; (80022cc <main+0x2e0>)
 8002276:	f002 fd75 	bl	8004d64 <HAL_TIMEx_MasterConfigSynchronization>
 800227a:	4602      	mov	r2, r0
 800227c:	b108      	cbz	r0, 8002282 <main+0x296>
 800227e:	b672      	cpsid	i
    while (1)
 8002280:	e7fe      	b.n	8002280 <main+0x294>
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	; 0x60
    sConfigOC.Pulse = 0;
 8002284:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002288:	900d      	str	r0, [sp, #52]	; 0x34
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228a:	900f      	str	r0, [sp, #60]	; 0x3c
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228c:	a90b      	add	r1, sp, #44	; 0x2c
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <main+0x2e0>)
 8002290:	f002 fbf6 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 8002294:	4604      	mov	r4, r0
 8002296:	b1d8      	cbz	r0, 80022d0 <main+0x2e4>
 8002298:	b672      	cpsid	i
    while (1)
 800229a:	e7fe      	b.n	800229a <main+0x2ae>
 800229c:	40023800 	.word	0x40023800
 80022a0:	40012000 	.word	0x40012000
 80022a4:	40020800 	.word	0x40020800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	20000268 	.word	0x20000268
 80022b4:	0f000001 	.word	0x0f000001
 80022b8:	20000364 	.word	0x20000364
 80022bc:	40003000 	.word	0x40003000
 80022c0:	20000310 	.word	0x20000310
 80022c4:	40005400 	.word	0x40005400
 80022c8:	000186a0 	.word	0x000186a0
 80022cc:	20000370 	.word	0x20000370
    HAL_TIM_MspPostInit(&htim2);
 80022d0:	4836      	ldr	r0, [pc, #216]	; (80023ac <main+0x3c0>)
 80022d2:	f000 fe47 	bl	8002f64 <HAL_TIM_MspPostInit>
    huart3.Instance = USART3;
 80022d6:	4836      	ldr	r0, [pc, #216]	; (80023b0 <main+0x3c4>)
    huart3.Init.BaudRate = 115200;
 80022d8:	4a36      	ldr	r2, [pc, #216]	; (80023b4 <main+0x3c8>)
    huart3.Init.Parity = UART_PARITY_NONE;
 80022da:	6104      	str	r4, [r0, #16]
    huart3.Init.BaudRate = 115200;
 80022dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80022e0:	e9c0 2300 	strd	r2, r3, [r0]
    huart3.Init.Mode = UART_MODE_TX_RX;
 80022e4:	230c      	movs	r3, #12
    huart3.Init.StopBits = UART_STOPBITS_1;
 80022e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	e9c0 3405 	strd	r3, r4, [r0, #20]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ee:	61c4      	str	r4, [r0, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 80022f0:	f002 fe0a 	bl	8004f08 <HAL_UART_Init>
 80022f4:	b108      	cbz	r0, 80022fa <main+0x30e>
 80022f6:	b672      	cpsid	i
    while (1)
 80022f8:	e7fe      	b.n	80022f8 <main+0x30c>
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 80022fa:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <main+0x3cc>)
 80022fc:	492f      	ldr	r1, [pc, #188]	; (80023bc <main+0x3d0>)
 80022fe:	4830      	ldr	r0, [pc, #192]	; (80023c0 <main+0x3d4>)
                    if (mInstance == nullptr)
 8002300:	4c30      	ldr	r4, [pc, #192]	; (80023c4 <main+0x3d8>)
 8002302:	22af      	movs	r2, #175	; 0xaf
 8002304:	f7fe ffae 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <main+0x3cc>)
 800230a:	492c      	ldr	r1, [pc, #176]	; (80023bc <main+0x3d0>)
 800230c:	482e      	ldr	r0, [pc, #184]	; (80023c8 <main+0x3dc>)
 800230e:	22b0      	movs	r2, #176	; 0xb0
 8002310:	f7fe ffa8 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 8002314:	4b28      	ldr	r3, [pc, #160]	; (80023b8 <main+0x3cc>)
 8002316:	4929      	ldr	r1, [pc, #164]	; (80023bc <main+0x3d0>)
 8002318:	482c      	ldr	r0, [pc, #176]	; (80023cc <main+0x3e0>)
 800231a:	22b1      	movs	r2, #177	; 0xb1
 800231c:	f7fe ffa2 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    auto &analog = blib::Analog::getInstance();
 8002320:	f7fe ff18 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8002324:	6823      	ldr	r3, [r4, #0]
 8002326:	4605      	mov	r5, r0
 8002328:	b933      	cbnz	r3, 8002338 <main+0x34c>
                        mInstance = new T();
 800232a:	201c      	movs	r0, #28
 800232c:	f003 fd3d 	bl	8005daa <_Znwj>
 8002330:	4606      	mov	r6, r0
 8002332:	f003 f9b5 	bl	80056a0 <_ZN4blib16DeviceProtectionC1Ev>
 8002336:	6026      	str	r6, [r4, #0]
                    return *mInstance;
 8002338:	f8d4 9000 	ldr.w	r9, [r4]
                    if (mInstance == nullptr)
 800233c:	4f24      	ldr	r7, [pc, #144]	; (80023d0 <main+0x3e4>)
    auto &chargeCtrl = blib::ChargeControl::getInstance();
 800233e:	f7fe ff21 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8002342:	4606      	mov	r6, r0
    auto &lcdSimulate = blib::LcdSimulate::getInstance();
 8002344:	f7fe ff2e 	bl	80011a4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	4604      	mov	r4, r0
 800234c:	b93b      	cbnz	r3, 800235e <main+0x372>
                        mInstance = new T();
 800234e:	2008      	movs	r0, #8
 8002350:	f003 fd2b 	bl	8005daa <_Znwj>
 8002354:	4680      	mov	r8, r0
 8002356:	f003 fc1f 	bl	8005b98 <_ZN4blib13SerialMonitorC1Ev>
 800235a:	f8c7 8000 	str.w	r8, [r7]
                    return *mInstance;
 800235e:	f8d7 8000 	ldr.w	r8, [r7]
        HAL_IWDG_Refresh(&hiwdg);
 8002362:	4f1c      	ldr	r7, [pc, #112]	; (80023d4 <main+0x3e8>)
        analog.readAnalog();
 8002364:	4628      	mov	r0, r5
 8002366:	f002 ff99 	bl	800529c <_ZN4blib6Analog10readAnalogEv>
        devProtection.run();
 800236a:	4648      	mov	r0, r9
 800236c:	f003 f9d0 	bl	8005710 <_ZN4blib16DeviceProtection3runEv>
        chargeCtrl.run();
 8002370:	4630      	mov	r0, r6
 8002372:	f003 f8db 	bl	800552c <_ZN4blib13ChargeControl3runEv>
        serialMnt.show();
 8002376:	4640      	mov	r0, r8
 8002378:	f003 fcf8 	bl	8005d6c <_ZN4blib13SerialMonitor4showEv>
                (LcdSimulate::getInstance().*mCallback)();
 800237c:	f7fe ff12 	bl	80011a4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 8002380:	68a3      	ldr	r3, [r4, #8]
 8002382:	4602      	mov	r2, r0
 8002384:	1059      	asrs	r1, r3, #1
 8002386:	f013 0f01 	tst.w	r3, #1
 800238a:	bf18      	it	ne
 800238c:	5852      	ldrne	r2, [r2, r1]
 800238e:	eb00 0063 	add.w	r0, r0, r3, asr #1
 8002392:	6863      	ldr	r3, [r4, #4]
 8002394:	bf18      	it	ne
 8002396:	58d3      	ldrne	r3, [r2, r3]
 8002398:	4798      	blx	r3
        HAL_Delay(500);
 800239a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800239e:	f000 ff37 	bl	8003210 <HAL_Delay>
        HAL_IWDG_Refresh(&hiwdg);
 80023a2:	4638      	mov	r0, r7
 80023a4:	f001 ff4e 	bl	8004244 <HAL_IWDG_Refresh>
    while (1)
 80023a8:	e7dc      	b.n	8002364 <main+0x378>
 80023aa:	bf00      	nop
 80023ac:	20000370 	.word	0x20000370
 80023b0:	200003b8 	.word	0x200003b8
 80023b4:	40004800 	.word	0x40004800
 80023b8:	0800b226 	.word	0x0800b226
 80023bc:	0800ac2a 	.word	0x0800ac2a
 80023c0:	0800b22b 	.word	0x0800b22b
 80023c4:	20000208 	.word	0x20000208
 80023c8:	0800b255 	.word	0x0800b255
 80023cc:	0800b26f 	.word	0x0800b26f
 80023d0:	2000020c 	.word	0x2000020c
 80023d4:	20000364 	.word	0x20000364

080023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>:
                static T& getInstance()
 80023d8:	b510      	push	{r4, lr}
                    if (mInstance == nullptr)
 80023da:	4c0a      	ldr	r4, [pc, #40]	; (8002404 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x2c>)
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	b97b      	cbnz	r3, 8002400 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x28>
                        mInstance = new T();
 80023e0:	2018      	movs	r0, #24
 80023e2:	f003 fce2 	bl	8005daa <_Znwj>
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x30>)
 80023e8:	6003      	str	r3, [r0, #0]
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x34>)
 80023ec:	6043      	str	r3, [r0, #4]
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x38>)
 80023f0:	6083      	str	r3, [r0, #8]
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x3c>)
 80023f4:	60c3      	str	r3, [r0, #12]
 80023f6:	4b08      	ldr	r3, [pc, #32]	; (8002418 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x40>)
 80023f8:	6103      	str	r3, [r0, #16]
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv+0x44>)
 80023fc:	6143      	str	r3, [r0, #20]
 80023fe:	6020      	str	r0, [r4, #0]
                }
 8002400:	6820      	ldr	r0, [r4, #0]
 8002402:	bd10      	pop	{r4, pc}
 8002404:	20000218 	.word	0x20000218
 8002408:	0800b3c8 	.word	0x0800b3c8
 800240c:	41700000 	.word	0x41700000
 8002410:	41200000 	.word	0x41200000
 8002414:	41f00000 	.word	0x41f00000
 8002418:	42a00000 	.word	0x42a00000
 800241c:	42480000 	.word	0x42480000

08002420 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv>:
            void impl_3_2_ShutdownTemp()
 8002420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002424:	b08e      	sub	sp, #56	; 0x38
 8002426:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8002428:	f7fe fecc 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 800242c:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 8002430:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 8002432:	4630      	mov	r0, r6
 8002434:	f003 fb38 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SHUTDOWN TEMP");
 8002438:	2200      	movs	r2, #0
 800243a:	4b4e      	ldr	r3, [pc, #312]	; (8002574 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x154>)
                static float setValue = Constant::getInstance().k_temperature_max;
 800243c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8002598 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x178>
                char line1[21] = { 0 };
 8002440:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "SHUTDOWN TEMP");
 8002442:	4611      	mov	r1, r2
 8002444:	4630      	mov	r0, r6
 8002446:	f003 fa91 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 800244a:	2211      	movs	r2, #17
 800244c:	4629      	mov	r1, r5
 800244e:	a803      	add	r0, sp, #12
 8002450:	9502      	str	r5, [sp, #8]
 8002452:	f004 ff5a 	bl	800730a <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_temperature_max);
 8002456:	f7ff ffbf 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800245a:	6900      	ldr	r0, [r0, #16]
 800245c:	f7fe f874 	bl	8000548 <__aeabi_f2d>
 8002460:	4a45      	ldr	r2, [pc, #276]	; (8002578 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x158>)
 8002462:	e9cd 0100 	strd	r0, r1, [sp]
 8002466:	2115      	movs	r1, #21
 8002468:	a802      	add	r0, sp, #8
 800246a:	f004 feb7 	bl	80071dc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 800246e:	ab02      	add	r3, sp, #8
 8002470:	462a      	mov	r2, r5
 8002472:	2101      	movs	r1, #1
 8002474:	4630      	mov	r0, r6
 8002476:	f003 fa79 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_temperature_max;
 800247a:	f8d8 3000 	ldr.w	r3, [r8]
 800247e:	4d3f      	ldr	r5, [pc, #252]	; (800257c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x15c>)
 8002480:	f3bf 8f5b 	dmb	ish
 8002484:	f013 0f01 	tst.w	r3, #1
 8002488:	d10a      	bne.n	80024a0 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x80>
 800248a:	4640      	mov	r0, r8
 800248c:	f003 fc7e 	bl	8005d8c <__cxa_guard_acquire>
 8002490:	b130      	cbz	r0, 80024a0 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x80>
 8002492:	f7ff ffa1 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002496:	6903      	ldr	r3, [r0, #16]
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	4640      	mov	r0, r8
 800249c:	f003 fc82 	bl	8005da4 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 80024a0:	4620      	mov	r0, r4
 80024a2:	f002 ff7d 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80024a6:	2801      	cmp	r0, #1
 80024a8:	d158      	bne.n	800255c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x13c>
                    setValue += delta;
 80024aa:	edd5 7a00 	vldr	s15, [r5]
 80024ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024b2:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 80024b6:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 80024ba:	f04f 0800 	mov.w	r8, #0
 80024be:	2211      	movs	r2, #17
 80024c0:	4641      	mov	r1, r8
 80024c2:	a809      	add	r0, sp, #36	; 0x24
 80024c4:	f8cd 8020 	str.w	r8, [sp, #32]
 80024c8:	f004 ff1f 	bl	800730a <memset>
                snprintf(line2, 21, "%.2f", setValue);
 80024cc:	6828      	ldr	r0, [r5, #0]
 80024ce:	f7fe f83b 	bl	8000548 <__aeabi_f2d>
 80024d2:	4a29      	ldr	r2, [pc, #164]	; (8002578 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x158>)
 80024d4:	e9cd 0100 	strd	r0, r1, [sp]
 80024d8:	2115      	movs	r1, #21
 80024da:	a808      	add	r0, sp, #32
 80024dc:	f004 fe7e 	bl	80071dc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 80024e0:	ab08      	add	r3, sp, #32
 80024e2:	4642      	mov	r2, r8
 80024e4:	2102      	movs	r1, #2
 80024e6:	4630      	mov	r0, r6
 80024e8:	f003 fa40 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80024ec:	4620      	mov	r0, r4
 80024ee:	f002 ff57 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80024f2:	2803      	cmp	r0, #3
 80024f4:	d115      	bne.n	8002522 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x102>
                    Constant::getInstance().k_temperature_max = setValue;
 80024f6:	f7ff ff6f 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80024fa:	682b      	ldr	r3, [r5, #0]
 80024fc:	6103      	str	r3, [r0, #16]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_temperature_max);
 80024fe:	f7ff ff6b 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002502:	6900      	ldr	r0, [r0, #16]
 8002504:	f7fe f820 	bl	8000548 <__aeabi_f2d>
 8002508:	4a1d      	ldr	r2, [pc, #116]	; (8002580 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x160>)
 800250a:	e9cd 0100 	strd	r0, r1, [sp]
 800250e:	2115      	movs	r1, #21
 8002510:	a802      	add	r0, sp, #8
 8002512:	f004 fe63 	bl	80071dc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8002516:	ab02      	add	r3, sp, #8
 8002518:	4642      	mov	r2, r8
 800251a:	2101      	movs	r1, #1
 800251c:	4630      	mov	r0, r6
 800251e:	f003 fa25 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002522:	4620      	mov	r0, r4
 8002524:	f002 ff3c 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002528:	2804      	cmp	r0, #4
 800252a:	d10a      	bne.n	8002542 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x122>
                    LOGI("Go back to Setting screen");
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x164>)
 800252e:	4916      	ldr	r1, [pc, #88]	; (8002588 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x168>)
 8002530:	4816      	ldr	r0, [pc, #88]	; (800258c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x16c>)
 8002532:	f240 4215 	movw	r2, #1045	; 0x415
 8002536:	f7fe fe95 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x170>)
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002542:	4b14      	ldr	r3, [pc, #80]	; (8002594 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x174>)
 8002544:	2200      	movs	r2, #0
 8002546:	4630      	mov	r0, r6
 8002548:	2103      	movs	r1, #3
 800254a:	f003 fa0f 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800254e:	2100      	movs	r1, #0
 8002550:	4620      	mov	r0, r4
 8002552:	f002 ff23 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002556:	b00e      	add	sp, #56	; 0x38
 8002558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 800255c:	4620      	mov	r0, r4
 800255e:	f002 ff1f 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002562:	2802      	cmp	r0, #2
 8002564:	d1a9      	bne.n	80024ba <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x9a>
                    setValue -= delta;
 8002566:	edd5 7a00 	vldr	s15, [r5]
 800256a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800256e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002572:	e7a0      	b.n	80024b6 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x96>
 8002574:	0800b28f 	.word	0x0800b28f
 8002578:	0800b2a0 	.word	0x0800b2a0
 800257c:	20000228 	.word	0x20000228
 8002580:	0800b29d 	.word	0x0800b29d
 8002584:	0800b2a5 	.word	0x0800b2a5
 8002588:	0800ad41 	.word	0x0800ad41
 800258c:	0800affe 	.word	0x0800affe
 8002590:	08001631 	.word	0x08001631
 8002594:	0800b08b 	.word	0x0800b08b
 8002598:	20000224 	.word	0x20000224

0800259c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv>:
            void impl_3_2_FanTriggerTemp()
 800259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a0:	b08e      	sub	sp, #56	; 0x38
 80025a2:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 80025a4:	f7fe fe0e 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 80025a8:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 80025ac:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 80025ae:	4630      	mov	r0, r6
 80025b0:	f003 fa7a 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "FAN TRIGGER TEMP");
 80025b4:	2200      	movs	r2, #0
 80025b6:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x154>)
                static float setValue = Constant::getInstance().k_temperature_turn_on_fan;
 80025b8:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8002714 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x178>
                char line1[21] = { 0 };
 80025bc:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "FAN TRIGGER TEMP");
 80025be:	4611      	mov	r1, r2
 80025c0:	4630      	mov	r0, r6
 80025c2:	f003 f9d3 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 80025c6:	2211      	movs	r2, #17
 80025c8:	4629      	mov	r1, r5
 80025ca:	a803      	add	r0, sp, #12
 80025cc:	9502      	str	r5, [sp, #8]
 80025ce:	f004 fe9c 	bl	800730a <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_temperature_turn_on_fan);
 80025d2:	f7ff ff01 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80025d6:	6940      	ldr	r0, [r0, #20]
 80025d8:	f7fd ffb6 	bl	8000548 <__aeabi_f2d>
 80025dc:	4a45      	ldr	r2, [pc, #276]	; (80026f4 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x158>)
 80025de:	e9cd 0100 	strd	r0, r1, [sp]
 80025e2:	2115      	movs	r1, #21
 80025e4:	a802      	add	r0, sp, #8
 80025e6:	f004 fdf9 	bl	80071dc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 80025ea:	ab02      	add	r3, sp, #8
 80025ec:	462a      	mov	r2, r5
 80025ee:	2101      	movs	r1, #1
 80025f0:	4630      	mov	r0, r6
 80025f2:	f003 f9bb 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_temperature_turn_on_fan;
 80025f6:	f8d8 3000 	ldr.w	r3, [r8]
 80025fa:	4d3f      	ldr	r5, [pc, #252]	; (80026f8 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x15c>)
 80025fc:	f3bf 8f5b 	dmb	ish
 8002600:	f013 0f01 	tst.w	r3, #1
 8002604:	d10a      	bne.n	800261c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x80>
 8002606:	4640      	mov	r0, r8
 8002608:	f003 fbc0 	bl	8005d8c <__cxa_guard_acquire>
 800260c:	b130      	cbz	r0, 800261c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x80>
 800260e:	f7ff fee3 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002612:	6943      	ldr	r3, [r0, #20]
 8002614:	602b      	str	r3, [r5, #0]
 8002616:	4640      	mov	r0, r8
 8002618:	f003 fbc4 	bl	8005da4 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 800261c:	4620      	mov	r0, r4
 800261e:	f002 febf 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002622:	2801      	cmp	r0, #1
 8002624:	d158      	bne.n	80026d8 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x13c>
                    setValue += delta;
 8002626:	edd5 7a00 	vldr	s15, [r5]
 800262a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800262e:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 8002632:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 8002636:	f04f 0800 	mov.w	r8, #0
 800263a:	2211      	movs	r2, #17
 800263c:	4641      	mov	r1, r8
 800263e:	a809      	add	r0, sp, #36	; 0x24
 8002640:	f8cd 8020 	str.w	r8, [sp, #32]
 8002644:	f004 fe61 	bl	800730a <memset>
                snprintf(line2, 21, "%.2f", setValue);
 8002648:	6828      	ldr	r0, [r5, #0]
 800264a:	f7fd ff7d 	bl	8000548 <__aeabi_f2d>
 800264e:	4a29      	ldr	r2, [pc, #164]	; (80026f4 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x158>)
 8002650:	e9cd 0100 	strd	r0, r1, [sp]
 8002654:	2115      	movs	r1, #21
 8002656:	a808      	add	r0, sp, #32
 8002658:	f004 fdc0 	bl	80071dc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 800265c:	ab08      	add	r3, sp, #32
 800265e:	4642      	mov	r2, r8
 8002660:	2102      	movs	r1, #2
 8002662:	4630      	mov	r0, r6
 8002664:	f003 f982 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002668:	4620      	mov	r0, r4
 800266a:	f002 fe99 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800266e:	2803      	cmp	r0, #3
 8002670:	d115      	bne.n	800269e <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x102>
                    Constant::getInstance().k_temperature_turn_on_fan = setValue;
 8002672:	f7ff feb1 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002676:	682b      	ldr	r3, [r5, #0]
 8002678:	6143      	str	r3, [r0, #20]
                            Constant::getInstance().k_temperature_turn_on_fan);
 800267a:	f7ff fead 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    snprintf(line1, 21, ">> %.2f",
 800267e:	6940      	ldr	r0, [r0, #20]
 8002680:	f7fd ff62 	bl	8000548 <__aeabi_f2d>
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x160>)
 8002686:	e9cd 0100 	strd	r0, r1, [sp]
 800268a:	2115      	movs	r1, #21
 800268c:	a802      	add	r0, sp, #8
 800268e:	f004 fda5 	bl	80071dc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8002692:	ab02      	add	r3, sp, #8
 8002694:	4642      	mov	r2, r8
 8002696:	2101      	movs	r1, #1
 8002698:	4630      	mov	r0, r6
 800269a:	f003 f967 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800269e:	4620      	mov	r0, r4
 80026a0:	f002 fe7e 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80026a4:	2804      	cmp	r0, #4
 80026a6:	d10a      	bne.n	80026be <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x122>
                    LOGI("Go back to Setting screen");
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x164>)
 80026aa:	4916      	ldr	r1, [pc, #88]	; (8002704 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x168>)
 80026ac:	4816      	ldr	r0, [pc, #88]	; (8002708 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x16c>)
 80026ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026b2:	f7fe fdd7 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x170>)
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 80026be:	4b14      	ldr	r3, [pc, #80]	; (8002710 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x174>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	4630      	mov	r0, r6
 80026c4:	2103      	movs	r1, #3
 80026c6:	f003 f951 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80026ca:	2100      	movs	r1, #0
 80026cc:	4620      	mov	r0, r4
 80026ce:	f002 fe65 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80026d2:	b00e      	add	sp, #56	; 0x38
 80026d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80026d8:	4620      	mov	r0, r4
 80026da:	f002 fe61 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80026de:	2802      	cmp	r0, #2
 80026e0:	d1a9      	bne.n	8002636 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x9a>
                    setValue -= delta;
 80026e2:	edd5 7a00 	vldr	s15, [r5]
 80026e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026ee:	e7a0      	b.n	8002632 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x96>
 80026f0:	0800b2bb 	.word	0x0800b2bb
 80026f4:	0800b2a0 	.word	0x0800b2a0
 80026f8:	20000230 	.word	0x20000230
 80026fc:	0800b29d 	.word	0x0800b29d
 8002700:	0800b2cc 	.word	0x0800b2cc
 8002704:	0800ad41 	.word	0x0800ad41
 8002708:	0800affe 	.word	0x0800affe
 800270c:	08001631 	.word	0x08001631
 8002710:	0800b08b 	.word	0x0800b08b
 8002714:	2000022c 	.word	0x2000022c

08002718 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv>:
            void impl_3_2_ChargingCurrent()
 8002718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800271c:	b08e      	sub	sp, #56	; 0x38
 800271e:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8002720:	f7fe fd50 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 8002724:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 8002728:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 800272a:	4630      	mov	r0, r6
 800272c:	f003 f9bc 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "CHARGING CURRENT");
 8002730:	2200      	movs	r2, #0
 8002732:	4b4e      	ldr	r3, [pc, #312]	; (800286c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x154>)
                static float setValue = Constant::getInstance().k_current_charging_max;
 8002734:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8002894 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x17c>
                char line1[21] = { 0 };
 8002738:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "CHARGING CURRENT");
 800273a:	4611      	mov	r1, r2
 800273c:	4630      	mov	r0, r6
 800273e:	f003 f915 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 8002742:	2211      	movs	r2, #17
 8002744:	4629      	mov	r1, r5
 8002746:	a803      	add	r0, sp, #12
 8002748:	9502      	str	r5, [sp, #8]
 800274a:	f004 fdde 	bl	800730a <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_current_charging_max);
 800274e:	f7ff fe43 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002752:	68c0      	ldr	r0, [r0, #12]
 8002754:	f7fd fef8 	bl	8000548 <__aeabi_f2d>
 8002758:	4a45      	ldr	r2, [pc, #276]	; (8002870 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x158>)
 800275a:	e9cd 0100 	strd	r0, r1, [sp]
 800275e:	2115      	movs	r1, #21
 8002760:	a802      	add	r0, sp, #8
 8002762:	f004 fd3b 	bl	80071dc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 8002766:	ab02      	add	r3, sp, #8
 8002768:	462a      	mov	r2, r5
 800276a:	2101      	movs	r1, #1
 800276c:	4630      	mov	r0, r6
 800276e:	f003 f8fd 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_current_charging_max;
 8002772:	f8d8 3000 	ldr.w	r3, [r8]
 8002776:	4d3f      	ldr	r5, [pc, #252]	; (8002874 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x15c>)
 8002778:	f3bf 8f5b 	dmb	ish
 800277c:	f013 0f01 	tst.w	r3, #1
 8002780:	d10a      	bne.n	8002798 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x80>
 8002782:	4640      	mov	r0, r8
 8002784:	f003 fb02 	bl	8005d8c <__cxa_guard_acquire>
 8002788:	b130      	cbz	r0, 8002798 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x80>
 800278a:	f7ff fe25 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800278e:	68c3      	ldr	r3, [r0, #12]
 8002790:	602b      	str	r3, [r5, #0]
 8002792:	4640      	mov	r0, r8
 8002794:	f003 fb06 	bl	8005da4 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002798:	4620      	mov	r0, r4
 800279a:	f002 fe01 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800279e:	2801      	cmp	r0, #1
 80027a0:	d158      	bne.n	8002854 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x13c>
                    setValue += delta;
 80027a2:	edd5 7a00 	vldr	s15, [r5]
 80027a6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002878 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x160>
 80027aa:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 80027ae:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 80027b2:	f04f 0800 	mov.w	r8, #0
 80027b6:	2211      	movs	r2, #17
 80027b8:	4641      	mov	r1, r8
 80027ba:	a809      	add	r0, sp, #36	; 0x24
 80027bc:	f8cd 8020 	str.w	r8, [sp, #32]
 80027c0:	f004 fda3 	bl	800730a <memset>
                snprintf(line2, 21, "%.2f", setValue);
 80027c4:	6828      	ldr	r0, [r5, #0]
 80027c6:	f7fd febf 	bl	8000548 <__aeabi_f2d>
 80027ca:	4a29      	ldr	r2, [pc, #164]	; (8002870 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x158>)
 80027cc:	e9cd 0100 	strd	r0, r1, [sp]
 80027d0:	2115      	movs	r1, #21
 80027d2:	a808      	add	r0, sp, #32
 80027d4:	f004 fd02 	bl	80071dc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 80027d8:	ab08      	add	r3, sp, #32
 80027da:	4642      	mov	r2, r8
 80027dc:	2102      	movs	r1, #2
 80027de:	4630      	mov	r0, r6
 80027e0:	f003 f8c4 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80027e4:	4620      	mov	r0, r4
 80027e6:	f002 fddb 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80027ea:	2803      	cmp	r0, #3
 80027ec:	d115      	bne.n	800281a <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x102>
                    Constant::getInstance().k_current_charging_max = setValue;
 80027ee:	f7ff fdf3 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80027f2:	682b      	ldr	r3, [r5, #0]
 80027f4:	60c3      	str	r3, [r0, #12]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_current_charging_max);
 80027f6:	f7ff fdef 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80027fa:	68c0      	ldr	r0, [r0, #12]
 80027fc:	f7fd fea4 	bl	8000548 <__aeabi_f2d>
 8002800:	4a1e      	ldr	r2, [pc, #120]	; (800287c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x164>)
 8002802:	e9cd 0100 	strd	r0, r1, [sp]
 8002806:	2115      	movs	r1, #21
 8002808:	a802      	add	r0, sp, #8
 800280a:	f004 fce7 	bl	80071dc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 800280e:	ab02      	add	r3, sp, #8
 8002810:	4642      	mov	r2, r8
 8002812:	2101      	movs	r1, #1
 8002814:	4630      	mov	r0, r6
 8002816:	f003 f8a9 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800281a:	4620      	mov	r0, r4
 800281c:	f002 fdc0 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002820:	2804      	cmp	r0, #4
 8002822:	d10a      	bne.n	800283a <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x122>
                    LOGI("Go back to Setting screen");
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x168>)
 8002826:	4917      	ldr	r1, [pc, #92]	; (8002884 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x16c>)
 8002828:	4817      	ldr	r0, [pc, #92]	; (8002888 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x170>)
 800282a:	f240 3276 	movw	r2, #886	; 0x376
 800282e:	f7fe fd19 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x174>)
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x178>)
 800283c:	2200      	movs	r2, #0
 800283e:	4630      	mov	r0, r6
 8002840:	2103      	movs	r1, #3
 8002842:	f003 f893 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002846:	2100      	movs	r1, #0
 8002848:	4620      	mov	r0, r4
 800284a:	f002 fda7 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800284e:	b00e      	add	sp, #56	; 0x38
 8002850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002854:	4620      	mov	r0, r4
 8002856:	f002 fda3 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800285a:	2802      	cmp	r0, #2
 800285c:	d1a9      	bne.n	80027b2 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x9a>
                    setValue -= delta;
 800285e:	edd5 7a00 	vldr	s15, [r5]
 8002862:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002878 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x160>
 8002866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800286a:	e7a0      	b.n	80027ae <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x96>
 800286c:	0800b2e4 	.word	0x0800b2e4
 8002870:	0800b2a0 	.word	0x0800b2a0
 8002874:	2000023c 	.word	0x2000023c
 8002878:	3dcccccd 	.word	0x3dcccccd
 800287c:	0800b29d 	.word	0x0800b29d
 8002880:	0800b2f5 	.word	0x0800b2f5
 8002884:	0800ad41 	.word	0x0800ad41
 8002888:	0800affe 	.word	0x0800affe
 800288c:	08001631 	.word	0x08001631
 8002890:	0800b08b 	.word	0x0800b08b
 8002894:	20000238 	.word	0x20000238

08002898 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv>:
            void impl_3_2_MinBatteryVolt()
 8002898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289c:	b08e      	sub	sp, #56	; 0x38
 800289e:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 80028a0:	f7fe fc90 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 80028a4:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 80028a8:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 80028aa:	4630      	mov	r0, r6
 80028ac:	f003 f8fc 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MIN BATTERY VOLT");
 80028b0:	2200      	movs	r2, #0
 80028b2:	4b4e      	ldr	r3, [pc, #312]	; (80029ec <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x154>)
                static float setValue = Constant::getInstance().k_voltage_battery_min;
 80028b4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8002a14 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x17c>
                char line1[21] = { 0 };
 80028b8:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "MIN BATTERY VOLT");
 80028ba:	4611      	mov	r1, r2
 80028bc:	4630      	mov	r0, r6
 80028be:	f003 f855 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 80028c2:	2211      	movs	r2, #17
 80028c4:	4629      	mov	r1, r5
 80028c6:	a803      	add	r0, sp, #12
 80028c8:	9502      	str	r5, [sp, #8]
 80028ca:	f004 fd1e 	bl	800730a <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_voltage_battery_min);
 80028ce:	f7ff fd83 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80028d2:	6880      	ldr	r0, [r0, #8]
 80028d4:	f7fd fe38 	bl	8000548 <__aeabi_f2d>
 80028d8:	4a45      	ldr	r2, [pc, #276]	; (80029f0 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x158>)
 80028da:	e9cd 0100 	strd	r0, r1, [sp]
 80028de:	2115      	movs	r1, #21
 80028e0:	a802      	add	r0, sp, #8
 80028e2:	f004 fc7b 	bl	80071dc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 80028e6:	ab02      	add	r3, sp, #8
 80028e8:	462a      	mov	r2, r5
 80028ea:	2101      	movs	r1, #1
 80028ec:	4630      	mov	r0, r6
 80028ee:	f003 f83d 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_voltage_battery_min;
 80028f2:	f8d8 3000 	ldr.w	r3, [r8]
 80028f6:	4d3f      	ldr	r5, [pc, #252]	; (80029f4 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x15c>)
 80028f8:	f3bf 8f5b 	dmb	ish
 80028fc:	f013 0f01 	tst.w	r3, #1
 8002900:	d10a      	bne.n	8002918 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x80>
 8002902:	4640      	mov	r0, r8
 8002904:	f003 fa42 	bl	8005d8c <__cxa_guard_acquire>
 8002908:	b130      	cbz	r0, 8002918 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x80>
 800290a:	f7ff fd65 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800290e:	6883      	ldr	r3, [r0, #8]
 8002910:	602b      	str	r3, [r5, #0]
 8002912:	4640      	mov	r0, r8
 8002914:	f003 fa46 	bl	8005da4 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002918:	4620      	mov	r0, r4
 800291a:	f002 fd41 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800291e:	2801      	cmp	r0, #1
 8002920:	d158      	bne.n	80029d4 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x13c>
                    setValue += delta;
 8002922:	edd5 7a00 	vldr	s15, [r5]
 8002926:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80029f8 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x160>
 800292a:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 800292e:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 8002932:	f04f 0800 	mov.w	r8, #0
 8002936:	2211      	movs	r2, #17
 8002938:	4641      	mov	r1, r8
 800293a:	a809      	add	r0, sp, #36	; 0x24
 800293c:	f8cd 8020 	str.w	r8, [sp, #32]
 8002940:	f004 fce3 	bl	800730a <memset>
                snprintf(line2, 21, "%.2f", setValue);
 8002944:	6828      	ldr	r0, [r5, #0]
 8002946:	f7fd fdff 	bl	8000548 <__aeabi_f2d>
 800294a:	4a29      	ldr	r2, [pc, #164]	; (80029f0 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x158>)
 800294c:	e9cd 0100 	strd	r0, r1, [sp]
 8002950:	2115      	movs	r1, #21
 8002952:	a808      	add	r0, sp, #32
 8002954:	f004 fc42 	bl	80071dc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 8002958:	ab08      	add	r3, sp, #32
 800295a:	4642      	mov	r2, r8
 800295c:	2102      	movs	r1, #2
 800295e:	4630      	mov	r0, r6
 8002960:	f003 f804 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002964:	4620      	mov	r0, r4
 8002966:	f002 fd1b 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800296a:	2803      	cmp	r0, #3
 800296c:	d115      	bne.n	800299a <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x102>
                    Constant::getInstance().k_voltage_battery_min = setValue;
 800296e:	f7ff fd33 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002972:	682b      	ldr	r3, [r5, #0]
 8002974:	6083      	str	r3, [r0, #8]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_voltage_battery_min);
 8002976:	f7ff fd2f 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800297a:	6880      	ldr	r0, [r0, #8]
 800297c:	f7fd fde4 	bl	8000548 <__aeabi_f2d>
 8002980:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x164>)
 8002982:	e9cd 0100 	strd	r0, r1, [sp]
 8002986:	2115      	movs	r1, #21
 8002988:	a802      	add	r0, sp, #8
 800298a:	f004 fc27 	bl	80071dc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 800298e:	ab02      	add	r3, sp, #8
 8002990:	4642      	mov	r2, r8
 8002992:	2101      	movs	r1, #1
 8002994:	4630      	mov	r0, r6
 8002996:	f002 ffe9 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800299a:	4620      	mov	r0, r4
 800299c:	f002 fd00 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80029a0:	2804      	cmp	r0, #4
 80029a2:	d10a      	bne.n	80029ba <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x122>
                    LOGI("Go back to Setting screen");
 80029a4:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x168>)
 80029a6:	4917      	ldr	r1, [pc, #92]	; (8002a04 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x16c>)
 80029a8:	4817      	ldr	r0, [pc, #92]	; (8002a08 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x170>)
 80029aa:	f240 3249 	movw	r2, #841	; 0x349
 80029ae:	f7fe fc59 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80029b2:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x174>)
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x178>)
 80029bc:	2200      	movs	r2, #0
 80029be:	4630      	mov	r0, r6
 80029c0:	2103      	movs	r1, #3
 80029c2:	f002 ffd3 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80029c6:	2100      	movs	r1, #0
 80029c8:	4620      	mov	r0, r4
 80029ca:	f002 fce7 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80029ce:	b00e      	add	sp, #56	; 0x38
 80029d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80029d4:	4620      	mov	r0, r4
 80029d6:	f002 fce3 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80029da:	2802      	cmp	r0, #2
 80029dc:	d1a9      	bne.n	8002932 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x9a>
                    setValue -= delta;
 80029de:	edd5 7a00 	vldr	s15, [r5]
 80029e2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029f8 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x160>
 80029e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029ea:	e7a0      	b.n	800292e <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x96>
 80029ec:	0800b30e 	.word	0x0800b30e
 80029f0:	0800b2a0 	.word	0x0800b2a0
 80029f4:	20000244 	.word	0x20000244
 80029f8:	3e4ccccd 	.word	0x3e4ccccd
 80029fc:	0800b29d 	.word	0x0800b29d
 8002a00:	0800b31f 	.word	0x0800b31f
 8002a04:	0800ad41 	.word	0x0800ad41
 8002a08:	0800affe 	.word	0x0800affe
 8002a0c:	08001631 	.word	0x08001631
 8002a10:	0800b08b 	.word	0x0800b08b
 8002a14:	20000240 	.word	0x20000240

08002a18 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv>:
            void impl_3_2_MaxBatteryVolt()
 8002a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a1c:	b08e      	sub	sp, #56	; 0x38
 8002a1e:	4607      	mov	r7, r0
                auto &button = Button::getInstance();
 8002a20:	f7fe fbd0 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
                mLcd.clearDisplay();
 8002a24:	f107 060c 	add.w	r6, r7, #12
                auto &button = Button::getInstance();
 8002a28:	4604      	mov	r4, r0
                mLcd.clearDisplay();
 8002a2a:	4630      	mov	r0, r6
 8002a2c:	f003 f83c 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MAX BATTERY VOLT");
 8002a30:	2200      	movs	r2, #0
 8002a32:	4b4e      	ldr	r3, [pc, #312]	; (8002b6c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x154>)
                static float setValue = Constant::getInstance().k_voltage_battery_max;
 8002a34:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8002b94 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x17c>
                char line1[21] = { 0 };
 8002a38:	2500      	movs	r5, #0
                mLcd.displayLine(0, 0, "MAX BATTERY VOLT");
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	f002 ff95 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                char line1[21] = { 0 };
 8002a42:	2211      	movs	r2, #17
 8002a44:	4629      	mov	r1, r5
 8002a46:	a803      	add	r0, sp, #12
 8002a48:	9502      	str	r5, [sp, #8]
 8002a4a:	f004 fc5e 	bl	800730a <memset>
                snprintf(line1, 21, "%.2f", Constant::getInstance().k_voltage_battery_max);
 8002a4e:	f7ff fcc3 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002a52:	6840      	ldr	r0, [r0, #4]
 8002a54:	f7fd fd78 	bl	8000548 <__aeabi_f2d>
 8002a58:	4a45      	ldr	r2, [pc, #276]	; (8002b70 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x158>)
 8002a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8002a5e:	2115      	movs	r1, #21
 8002a60:	a802      	add	r0, sp, #8
 8002a62:	f004 fbbb 	bl	80071dc <sniprintf>
                mLcd.displayLine(1, 0, line1);
 8002a66:	ab02      	add	r3, sp, #8
 8002a68:	462a      	mov	r2, r5
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	4630      	mov	r0, r6
 8002a6e:	f002 ff7d 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                static float setValue = Constant::getInstance().k_voltage_battery_max;
 8002a72:	f8d8 3000 	ldr.w	r3, [r8]
 8002a76:	4d3f      	ldr	r5, [pc, #252]	; (8002b74 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x15c>)
 8002a78:	f3bf 8f5b 	dmb	ish
 8002a7c:	f013 0f01 	tst.w	r3, #1
 8002a80:	d10a      	bne.n	8002a98 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x80>
 8002a82:	4640      	mov	r0, r8
 8002a84:	f003 f982 	bl	8005d8c <__cxa_guard_acquire>
 8002a88:	b130      	cbz	r0, 8002a98 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x80>
 8002a8a:	f7ff fca5 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002a8e:	6843      	ldr	r3, [r0, #4]
 8002a90:	602b      	str	r3, [r5, #0]
 8002a92:	4640      	mov	r0, r8
 8002a94:	f003 f986 	bl	8005da4 <__cxa_guard_release>
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f002 fc81 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002a9e:	2801      	cmp	r0, #1
 8002aa0:	d158      	bne.n	8002b54 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x13c>
                    setValue += delta;
 8002aa2:	edd5 7a00 	vldr	s15, [r5]
 8002aa6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002b78 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x160>
 8002aaa:	ee77 7a87 	vadd.f32	s15, s15, s14
                    setValue -= delta;
 8002aae:	edc5 7a00 	vstr	s15, [r5]
                char line2[21] = { 0 };
 8002ab2:	f04f 0800 	mov.w	r8, #0
 8002ab6:	2211      	movs	r2, #17
 8002ab8:	4641      	mov	r1, r8
 8002aba:	a809      	add	r0, sp, #36	; 0x24
 8002abc:	f8cd 8020 	str.w	r8, [sp, #32]
 8002ac0:	f004 fc23 	bl	800730a <memset>
                snprintf(line2, 21, "%.2f", setValue);
 8002ac4:	6828      	ldr	r0, [r5, #0]
 8002ac6:	f7fd fd3f 	bl	8000548 <__aeabi_f2d>
 8002aca:	4a29      	ldr	r2, [pc, #164]	; (8002b70 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x158>)
 8002acc:	e9cd 0100 	strd	r0, r1, [sp]
 8002ad0:	2115      	movs	r1, #21
 8002ad2:	a808      	add	r0, sp, #32
 8002ad4:	f004 fb82 	bl	80071dc <sniprintf>
                mLcd.displayLine(2, 0, line2);
 8002ad8:	ab08      	add	r3, sp, #32
 8002ada:	4642      	mov	r2, r8
 8002adc:	2102      	movs	r1, #2
 8002ade:	4630      	mov	r0, r6
 8002ae0:	f002 ff44 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f002 fc5b 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002aea:	2803      	cmp	r0, #3
 8002aec:	d115      	bne.n	8002b1a <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x102>
                    Constant::getInstance().k_voltage_battery_max = setValue;
 8002aee:	f7ff fc73 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002af2:	682b      	ldr	r3, [r5, #0]
 8002af4:	6043      	str	r3, [r0, #4]
                    snprintf(line1, 21, ">> %.2f", Constant::getInstance().k_voltage_battery_max);
 8002af6:	f7ff fc6f 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8002afa:	6840      	ldr	r0, [r0, #4]
 8002afc:	f7fd fd24 	bl	8000548 <__aeabi_f2d>
 8002b00:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x164>)
 8002b02:	e9cd 0100 	strd	r0, r1, [sp]
 8002b06:	2115      	movs	r1, #21
 8002b08:	a802      	add	r0, sp, #8
 8002b0a:	f004 fb67 	bl	80071dc <sniprintf>
                    mLcd.displayLine(1, 0, line1);
 8002b0e:	ab02      	add	r3, sp, #8
 8002b10:	4642      	mov	r2, r8
 8002b12:	2101      	movs	r1, #1
 8002b14:	4630      	mov	r0, r6
 8002b16:	f002 ff29 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	f002 fc40 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002b20:	2804      	cmp	r0, #4
 8002b22:	d10a      	bne.n	8002b3a <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x122>
                    LOGI("Go back to Setting screen");
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x168>)
 8002b26:	4917      	ldr	r1, [pc, #92]	; (8002b84 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x16c>)
 8002b28:	4817      	ldr	r0, [pc, #92]	; (8002b88 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x170>)
 8002b2a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8002b2e:	f7fe fb99 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002b32:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x174>)
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x178>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	4630      	mov	r0, r6
 8002b40:	2103      	movs	r1, #3
 8002b42:	f002 ff13 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002b46:	2100      	movs	r1, #0
 8002b48:	4620      	mov	r0, r4
 8002b4a:	f002 fc27 	bl	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002b4e:	b00e      	add	sp, #56	; 0x38
 8002b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002b54:	4620      	mov	r0, r4
 8002b56:	f002 fc23 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002b5a:	2802      	cmp	r0, #2
 8002b5c:	d1a9      	bne.n	8002ab2 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x9a>
                    setValue -= delta;
 8002b5e:	edd5 7a00 	vldr	s15, [r5]
 8002b62:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002b78 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x160>
 8002b66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b6a:	e7a0      	b.n	8002aae <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x96>
 8002b6c:	0800b337 	.word	0x0800b337
 8002b70:	0800b2a0 	.word	0x0800b2a0
 8002b74:	2000024c 	.word	0x2000024c
 8002b78:	3e4ccccd 	.word	0x3e4ccccd
 8002b7c:	0800b29d 	.word	0x0800b29d
 8002b80:	0800b348 	.word	0x0800b348
 8002b84:	0800ad41 	.word	0x0800ad41
 8002b88:	0800affe 	.word	0x0800affe
 8002b8c:	08001631 	.word	0x08001631
 8002b90:	0800b08b 	.word	0x0800b08b
 8002b94:	20000248 	.word	0x20000248

08002b98 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>:
                static T& getInstance()
 8002b98:	b538      	push	{r3, r4, r5, lr}
                    if (mInstance == nullptr)
 8002b9a:	4c06      	ldr	r4, [pc, #24]	; (8002bb4 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x1c>)
 8002b9c:	6825      	ldr	r5, [r4, #0]
 8002b9e:	b935      	cbnz	r5, 8002bae <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x16>
                        mInstance = new T();
 8002ba0:	2008      	movs	r0, #8
 8002ba2:	f003 f902 	bl	8005daa <_Znwj>
            {
 8002ba6:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv+0x20>)
 8002ba8:	6003      	str	r3, [r0, #0]
 8002baa:	8085      	strh	r5, [r0, #4]
 8002bac:	6020      	str	r0, [r4, #0]
                }
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	bd38      	pop	{r3, r4, r5, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000204 	.word	0x20000204
 8002bb8:	0800b3d8 	.word	0x0800b3d8

08002bbc <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv>:
            void impl_3_2_AutoloadCfg()
 8002bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc0:	4606      	mov	r6, r0
                auto &button = Button::getInstance();
 8002bc2:	f7fe faff 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002bc6:	4605      	mov	r5, r0
                auto &sysMgr = SystemManager::getInstance();
 8002bc8:	f7ff ffe6 	bl	8002b98 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>
                mLcd.clearDisplay();
 8002bcc:	f106 040c 	add.w	r4, r6, #12
                auto &sysMgr = SystemManager::getInstance();
 8002bd0:	4607      	mov	r7, r0
                mLcd.clearDisplay();
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f002 ff68 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "AUTOLOAD CFG");
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xd8>)
 8002bdc:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002cbc <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x100>
 8002be0:	4611      	mov	r1, r2
 8002be2:	4620      	mov	r0, r4
 8002be4:	f002 fec2 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002be8:	4628      	mov	r0, r5
 8002bea:	f002 fbd9 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002bee:	2801      	cmp	r0, #1
 8002bf0:	d13f      	bne.n	8002c72 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xb6>
                    loadCfgEnable = !loadCfgEnable;
 8002bf2:	f898 3000 	ldrb.w	r3, [r8]
 8002bf6:	f083 0301 	eor.w	r3, r3, #1
 8002bfa:	f888 3000 	strb.w	r3, [r8]
                if (loadCfgEnable == 0)
 8002bfe:	f898 2000 	ldrb.w	r2, [r8]
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d13b      	bne.n	8002c7e <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xc2>
                    mLcd.displayLine(2, 0, "NO ");
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xdc>)
                    mLcd.displayLine(2, 0, "YES");
 8002c08:	2102      	movs	r1, #2
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f002 feae 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002c10:	4628      	mov	r0, r5
 8002c12:	f002 fbc5 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c16:	2803      	cmp	r0, #3
 8002c18:	d108      	bne.n	8002c2c <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x70>
                    if (loadCfgEnable == 0)
 8002c1a:	f898 2000 	ldrb.w	r2, [r8]
 8002c1e:	bb8a      	cbnz	r2, 8002c84 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xc8>
                        mLcd.displayLine(1, 0, ">> NO ");
 8002c20:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xe0>)
                        sysMgr.isLoadCfgFromFlash = loadCfgEnable;
 8002c22:	717a      	strb	r2, [r7, #5]
                        mLcd.displayLine(1, 0, ">> NO ");
 8002c24:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> YES");
 8002c26:	4620      	mov	r0, r4
 8002c28:	f002 fea0 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (sysMgr.isLoadCfgFromFlash == 0)
 8002c2c:	797a      	ldrb	r2, [r7, #5]
 8002c2e:	bb72      	cbnz	r2, 8002c8e <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xd2>
                    mLcd.displayLine(1, 0, "NO ");
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xdc>)
                    mLcd.displayLine(1, 0, "YES");
 8002c32:	2101      	movs	r1, #1
 8002c34:	4620      	mov	r0, r4
 8002c36:	f002 fe99 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xe4>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2103      	movs	r1, #3
 8002c40:	4620      	mov	r0, r4
 8002c42:	f002 fe93 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002c46:	4628      	mov	r0, r5
 8002c48:	f002 fbaa 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c4c:	2804      	cmp	r0, #4
 8002c4e:	d10a      	bne.n	8002c66 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xaa>
                    LOGI("Go back to Setting screen");
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xe8>)
 8002c52:	4915      	ldr	r1, [pc, #84]	; (8002ca8 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xec>)
 8002c54:	4815      	ldr	r0, [pc, #84]	; (8002cac <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xf0>)
 8002c56:	f240 425c 	movw	r2, #1116	; 0x45c
 8002c5a:	f7fe fb03 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xf4>)
 8002c60:	6073      	str	r3, [r6, #4]
 8002c62:	2300      	movs	r3, #0
 8002c64:	60b3      	str	r3, [r6, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002c66:	4628      	mov	r0, r5
 8002c68:	2100      	movs	r1, #0
            }
 8002c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002c6e:	f002 bb95 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002c72:	4628      	mov	r0, r5
 8002c74:	f002 fb94 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c78:	2802      	cmp	r0, #2
 8002c7a:	d1c0      	bne.n	8002bfe <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x42>
 8002c7c:	e7b9      	b.n	8002bf2 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x36>
                    mLcd.displayLine(2, 0, "YES");
 8002c7e:	4b0d      	ldr	r3, [pc, #52]	; (8002cb4 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xf8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	e7c1      	b.n	8002c08 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x4c>
                        sysMgr.isLoadCfgFromFlash = loadCfgEnable;
 8002c84:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> YES");
 8002c86:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xfc>)
                        sysMgr.isLoadCfgFromFlash = loadCfgEnable;
 8002c88:	7179      	strb	r1, [r7, #5]
                        mLcd.displayLine(1, 0, ">> YES");
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	e7cb      	b.n	8002c26 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x6a>
                    mLcd.displayLine(1, 0, "YES");
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0xf8>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	e7ce      	b.n	8002c32 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x76>
 8002c94:	0800b360 	.word	0x0800b360
 8002c98:	0800b370 	.word	0x0800b370
 8002c9c:	0800b36d 	.word	0x0800b36d
 8002ca0:	0800b08b 	.word	0x0800b08b
 8002ca4:	0800b37b 	.word	0x0800b37b
 8002ca8:	0800ad41 	.word	0x0800ad41
 8002cac:	0800affe 	.word	0x0800affe
 8002cb0:	08001631 	.word	0x08001631
 8002cb4:	0800b377 	.word	0x0800b377
 8002cb8:	0800b374 	.word	0x0800b374
 8002cbc:	20000220 	.word	0x20000220

08002cc0 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv>:
            void impl_3_2_CoolingFan()
 8002cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc4:	4606      	mov	r6, r0
                auto &button = Button::getInstance();
 8002cc6:	f7fe fa7d 	bl	80011c4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002cca:	4605      	mov	r5, r0
                auto &sysMgr = SystemManager::getInstance();
 8002ccc:	f7ff ff64 	bl	8002b98 <_ZN4blib2dp9SingletonINS_13SystemManagerEE11getInstanceEv>
                mLcd.clearDisplay();
 8002cd0:	f106 040c 	add.w	r4, r6, #12
                auto &sysMgr = SystemManager::getInstance();
 8002cd4:	4607      	mov	r7, r0
                mLcd.clearDisplay();
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	f002 fee6 	bl	8005aa8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "COOLING FAN");
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4b2e      	ldr	r3, [pc, #184]	; (8002d98 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xd8>)
 8002ce0:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8002dc0 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x100>
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f002 fe40 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002cec:	4628      	mov	r0, r5
 8002cee:	f002 fb57 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002cf2:	2801      	cmp	r0, #1
 8002cf4:	d13f      	bne.n	8002d76 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xb6>
                    fanEnable = !fanEnable;
 8002cf6:	f898 3000 	ldrb.w	r3, [r8]
 8002cfa:	f083 0301 	eor.w	r3, r3, #1
 8002cfe:	f888 3000 	strb.w	r3, [r8]
                if (fanEnable == 0)
 8002d02:	f898 2000 	ldrb.w	r2, [r8]
 8002d06:	2a00      	cmp	r2, #0
 8002d08:	d13b      	bne.n	8002d82 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xc2>
                    mLcd.displayLine(2, 0, "OFF");
 8002d0a:	4b24      	ldr	r3, [pc, #144]	; (8002d9c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xdc>)
                    mLcd.displayLine(2, 0, "ON ");
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f002 fe2c 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002d14:	4628      	mov	r0, r5
 8002d16:	f002 fb43 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d1a:	2803      	cmp	r0, #3
 8002d1c:	d108      	bne.n	8002d30 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x70>
                    if (fanEnable == 0)
 8002d1e:	f898 2000 	ldrb.w	r2, [r8]
 8002d22:	bb8a      	cbnz	r2, 8002d88 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xc8>
                        mLcd.displayLine(1, 0, ">> OFF");
 8002d24:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xe0>)
                        sysMgr.enableFan = fanEnable;
 8002d26:	713a      	strb	r2, [r7, #4]
                        mLcd.displayLine(1, 0, ">> OFF");
 8002d28:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> ON ");
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f002 fe1e 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (sysMgr.enableFan == 0)
 8002d30:	793a      	ldrb	r2, [r7, #4]
 8002d32:	bb72      	cbnz	r2, 8002d92 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xd2>
                    mLcd.displayLine(1, 0, "OFF");
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xdc>)
                    mLcd.displayLine(1, 0, "ON ");
 8002d36:	2101      	movs	r1, #1
 8002d38:	4620      	mov	r0, r4
 8002d3a:	f002 fe17 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xe4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	2103      	movs	r1, #3
 8002d44:	4620      	mov	r0, r4
 8002d46:	f002 fe11 	bl	800596c <_ZN4blib3Lcd11displayLineEhhPKc>
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f002 fb28 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d50:	2804      	cmp	r0, #4
 8002d52:	d10a      	bne.n	8002d6a <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xaa>
                    LOGI("Go back to Setting screen");
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xe8>)
 8002d56:	4915      	ldr	r1, [pc, #84]	; (8002dac <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xec>)
 8002d58:	4815      	ldr	r0, [pc, #84]	; (8002db0 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xf0>)
 8002d5a:	f240 32bd 	movw	r2, #957	; 0x3bd
 8002d5e:	f7fe fa81 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002d62:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xf4>)
 8002d64:	6073      	str	r3, [r6, #4]
 8002d66:	2300      	movs	r3, #0
 8002d68:	60b3      	str	r3, [r6, #8]
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	2100      	movs	r1, #0
            }
 8002d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002d72:	f002 bb13 	b.w	800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002d76:	4628      	mov	r0, r5
 8002d78:	f002 fb12 	bl	80053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d7c:	2802      	cmp	r0, #2
 8002d7e:	d1c0      	bne.n	8002d02 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x42>
 8002d80:	e7b9      	b.n	8002cf6 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x36>
                    mLcd.displayLine(2, 0, "ON ");
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xf8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	e7c1      	b.n	8002d0c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x4c>
                        sysMgr.enableFan = fanEnable;
 8002d88:	2101      	movs	r1, #1
                        mLcd.displayLine(1, 0, ">> ON ");
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xfc>)
                        sysMgr.enableFan = fanEnable;
 8002d8c:	7139      	strb	r1, [r7, #4]
                        mLcd.displayLine(1, 0, ">> ON ");
 8002d8e:	2200      	movs	r2, #0
 8002d90:	e7cb      	b.n	8002d2a <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x6a>
                    mLcd.displayLine(1, 0, "ON ");
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0xf8>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	e7ce      	b.n	8002d36 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x76>
 8002d98:	0800b390 	.word	0x0800b390
 8002d9c:	0800b39f 	.word	0x0800b39f
 8002da0:	0800b39c 	.word	0x0800b39c
 8002da4:	0800b08b 	.word	0x0800b08b
 8002da8:	0800b3aa 	.word	0x0800b3aa
 8002dac:	0800ad41 	.word	0x0800ad41
 8002db0:	0800affe 	.word	0x0800affe
 8002db4:	08001631 	.word	0x08001631
 8002db8:	0800b3a6 	.word	0x0800b3a6
 8002dbc:	0800b3a3 	.word	0x0800b3a3
 8002dc0:	20000234 	.word	0x20000234

08002dc4 <_ZN4blib11LcdSimulateD1Ev>:
            virtual ~LcdSimulate()
 8002dc4:	b510      	push	{r4, lr}
            {
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <_ZN4blib11LcdSimulateD1Ev+0x14>)
            virtual ~LcdSimulate()
 8002dc8:	4604      	mov	r4, r0
            {
 8002dca:	f840 3b0c 	str.w	r3, [r0], #12
 8002dce:	f002 fd85 	bl	80058dc <_ZN4blib3LcdD1Ev>
            }
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	bf00      	nop
 8002dd8:	0800b3e8 	.word	0x0800b3e8

08002ddc <_ZN4blib11LcdSimulateD0Ev>:
            virtual ~LcdSimulate()
 8002ddc:	b510      	push	{r4, lr}
 8002dde:	4604      	mov	r4, r0
            }
 8002de0:	f7ff fff0 	bl	8002dc4 <_ZN4blib11LcdSimulateD1Ev>
 8002de4:	4620      	mov	r0, r4
 8002de6:	2120      	movs	r1, #32
 8002de8:	f002 ffce 	bl	8005d88 <_ZdlPvj>
 8002dec:	4620      	mov	r0, r4
 8002dee:	bd10      	pop	{r4, pc}

08002df0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_MspInit+0x34>)
 8002df4:	2100      	movs	r1, #0
 8002df6:	9100      	str	r1, [sp, #0]
 8002df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dfe:	645a      	str	r2, [r3, #68]	; 0x44
 8002e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e06:	9200      	str	r2, [sp, #0]
 8002e08:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e0a:	9101      	str	r1, [sp, #4]
 8002e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e12:	641a      	str	r2, [r3, #64]	; 0x40
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e1e:	b002      	add	sp, #8
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800

08002e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e28:	b570      	push	{r4, r5, r6, lr}
 8002e2a:	4606      	mov	r6, r0
 8002e2c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e2e:	2214      	movs	r2, #20
 8002e30:	2100      	movs	r1, #0
 8002e32:	a803      	add	r0, sp, #12
 8002e34:	f004 fa69 	bl	800730a <memset>
  if(hadc->Instance==ADC1)
 8002e38:	6832      	ldr	r2, [r6, #0]
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_ADC_MspInit+0x94>)
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d13a      	bne.n	8002eb6 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e40:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8002e44:	2500      	movs	r5, #0
 8002e46:	9501      	str	r5, [sp, #4]
 8002e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    */
    GPIO_InitStruct.Pin = I_BATTERY_Pin|TEMPERATURE_Pin|V_SOLAR_Pin|I_SOLAR_Pin
                          |V_BATTERY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4a:	481d      	ldr	r0, [pc, #116]	; (8002ec0 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e4c:	4c1d      	ldr	r4, [pc, #116]	; (8002ec4 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e52:	645a      	str	r2, [r3, #68]	; 0x44
 8002e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e56:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002e5a:	9201      	str	r2, [sp, #4]
 8002e5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	9502      	str	r5, [sp, #8]
 8002e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	9302      	str	r3, [sp, #8]
 8002e70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e72:	221f      	movs	r2, #31
 8002e74:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e76:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e78:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e7c:	f000 fe74 	bl	8003b68 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e82:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e86:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e8e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e92:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9a:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e9e:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ea0:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea4:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ea8:	f000 fca8 	bl	80037fc <HAL_DMA_Init>
 8002eac:	b108      	cbz	r0, 8002eb2 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8002eae:	f7fe f94f 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002eb2:	63b4      	str	r4, [r6, #56]	; 0x38
 8002eb4:	63a6      	str	r6, [r4, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eb6:	b008      	add	sp, #32
 8002eb8:	bd70      	pop	{r4, r5, r6, pc}
 8002eba:	bf00      	nop
 8002ebc:	40012000 	.word	0x40012000
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	200002b0 	.word	0x200002b0
 8002ec8:	40026410 	.word	0x40026410

08002ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ecc:	b530      	push	{r4, r5, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed2:	2214      	movs	r2, #20
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	a803      	add	r0, sp, #12
 8002ed8:	f004 fa17 	bl	800730a <memset>
  if(hi2c->Instance==I2C1)
 8002edc:	6822      	ldr	r2, [r4, #0]
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_I2C_MspInit+0x60>)
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d121      	bne.n	8002f28 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee4:	4c12      	ldr	r4, [pc, #72]	; (8002f30 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	4813      	ldr	r0, [pc, #76]	; (8002f34 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee8:	2500      	movs	r5, #0
 8002eea:	9501      	str	r5, [sp, #4]
 8002eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	6323      	str	r3, [r4, #48]	; 0x30
 8002ef4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002efe:	22c0      	movs	r2, #192	; 0xc0
 8002f00:	2312      	movs	r3, #18
 8002f02:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f06:	2103      	movs	r1, #3
 8002f08:	2304      	movs	r3, #4
 8002f0a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f0e:	a903      	add	r1, sp, #12
 8002f10:	f000 fe2a 	bl	8003b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f14:	9502      	str	r5, [sp, #8]
 8002f16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f1c:	6423      	str	r3, [r4, #64]	; 0x40
 8002f1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f24:	9302      	str	r3, [sp, #8]
 8002f26:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f28:	b009      	add	sp, #36	; 0x24
 8002f2a:	bd30      	pop	{r4, r5, pc}
 8002f2c:	40005400 	.word	0x40005400
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020400 	.word	0x40020400

08002f38 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8002f38:	6803      	ldr	r3, [r0, #0]
 8002f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002f3e:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8002f40:	d10b      	bne.n	8002f5a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_TIM_Base_MspInit+0x28>)
 8002f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	9301      	str	r3, [sp, #4]
 8002f58:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f5a:	b002      	add	sp, #8
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800

08002f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f64:	b510      	push	{r4, lr}
 8002f66:	4604      	mov	r4, r0
 8002f68:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6a:	2214      	movs	r2, #20
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	a801      	add	r0, sp, #4
 8002f70:	f004 f9cb 	bl	800730a <memset>
  if(htim->Instance==TIM2)
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d115      	bne.n	8002fa8 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = PWM_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8002f82:	480b      	ldr	r0, [pc, #44]	; (8002fb0 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f96:	2220      	movs	r2, #32
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8002f9e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8002fa4:	f000 fde0 	bl	8003b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fa8:	b006      	add	sp, #24
 8002faa:	bd10      	pop	{r4, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40020000 	.word	0x40020000

08002fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fba:	2214      	movs	r2, #20
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	a803      	add	r0, sp, #12
 8002fc0:	f004 f9a3 	bl	800730a <memset>
  if(huart->Instance==USART3)
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_UART_MspInit+0x64>)
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d123      	bne.n	8003014 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fcc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	9101      	str	r1, [sp, #4]
 8002fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd6:	4811      	ldr	r0, [pc, #68]	; (800301c <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fd8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
 8002fde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe0:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002fe4:	9201      	str	r2, [sp, #4]
 8002fe6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe8:	9102      	str	r1, [sp, #8]
 8002fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fec:	f042 0202 	orr.w	r2, r2, #2
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	9302      	str	r3, [sp, #8]
 8002ffa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8003000:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003002:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003004:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003008:	2307      	movs	r3, #7
 800300a:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800300e:	a903      	add	r1, sp, #12
 8003010:	f000 fdaa 	bl	8003b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003014:	b008      	add	sp, #32
 8003016:	bd10      	pop	{r4, pc}
 8003018:	40004800 	.word	0x40004800
 800301c:	40020400 	.word	0x40020400

08003020 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <NMI_Handler>

08003022 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003022:	e7fe      	b.n	8003022 <HardFault_Handler>

08003024 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003024:	e7fe      	b.n	8003024 <MemManage_Handler>

08003026 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <BusFault_Handler>

08003028 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <UsageFault_Handler>

0800302a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800302a:	4770      	bx	lr

0800302c <DebugMon_Handler>:
 800302c:	4770      	bx	lr

0800302e <PendSV_Handler>:
 800302e:	4770      	bx	lr

08003030 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003030:	f000 b8dc 	b.w	80031ec <HAL_IncTick>

08003034 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_UP_Pin);
 8003034:	2001      	movs	r0, #1
 8003036:	f000 be7d 	b.w	8003d34 <HAL_GPIO_EXTI_IRQHandler>

0800303a <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_DOWN_Pin);
 800303a:	2002      	movs	r0, #2
 800303c:	f000 be7a 	b.w	8003d34 <HAL_GPIO_EXTI_IRQHandler>

08003040 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BACK_Pin);
 8003040:	2004      	movs	r0, #4
 8003042:	f000 be77 	b.w	8003d34 <HAL_GPIO_EXTI_IRQHandler>

08003046 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SEL_Pin);
 8003046:	2008      	movs	r0, #8
 8003048:	f000 be74 	b.w	8003d34 <HAL_GPIO_EXTI_IRQHandler>

0800304c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800304c:	4801      	ldr	r0, [pc, #4]	; (8003054 <DMA2_Stream0_IRQHandler+0x8>)
 800304e:	f000 bccd 	b.w	80039ec <HAL_DMA_IRQHandler>
 8003052:	bf00      	nop
 8003054:	200002b0 	.word	0x200002b0

08003058 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8003058:	2001      	movs	r0, #1
 800305a:	4770      	bx	lr

0800305c <_kill>:

int _kill(int pid, int sig)
{
 800305c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800305e:	f004 f9fb 	bl	8007458 <__errno>
 8003062:	2316      	movs	r3, #22
 8003064:	6003      	str	r3, [r0, #0]
  return -1;
}
 8003066:	f04f 30ff 	mov.w	r0, #4294967295
 800306a:	bd08      	pop	{r3, pc}

0800306c <_exit>:

void _exit (int status)
{
 800306c:	b508      	push	{r3, lr}
  errno = EINVAL;
 800306e:	f004 f9f3 	bl	8007458 <__errno>
 8003072:	2316      	movs	r3, #22
 8003074:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8003076:	e7fe      	b.n	8003076 <_exit+0xa>

08003078 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	460d      	mov	r5, r1
 800307c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307e:	460e      	mov	r6, r1
 8003080:	1b73      	subs	r3, r6, r5
 8003082:	429c      	cmp	r4, r3
 8003084:	dc01      	bgt.n	800308a <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8003086:	4620      	mov	r0, r4
 8003088:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800308a:	f3af 8000 	nop.w
 800308e:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	e7f5      	b.n	8003080 <_read+0x8>

08003094 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	460d      	mov	r5, r1
 8003098:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309a:	460e      	mov	r6, r1
 800309c:	1b73      	subs	r3, r6, r5
 800309e:	429c      	cmp	r4, r3
 80030a0:	dc01      	bgt.n	80030a6 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80030a2:	4620      	mov	r0, r4
 80030a4:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80030a6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80030aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ae:	e7f5      	b.n	800309c <_write+0x8>

080030b0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	4770      	bx	lr

080030b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80030b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030ba:	604b      	str	r3, [r1, #4]
  return 0;
}
 80030bc:	2000      	movs	r0, #0
 80030be:	4770      	bx	lr

080030c0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80030c0:	2001      	movs	r0, #1
 80030c2:	4770      	bx	lr

080030c4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80030c4:	2000      	movs	r0, #0
 80030c6:	4770      	bx	lr

080030c8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c8:	4a0b      	ldr	r2, [pc, #44]	; (80030f8 <_sbrk+0x30>)
 80030ca:	6811      	ldr	r1, [r2, #0]
{
 80030cc:	b510      	push	{r4, lr}
 80030ce:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80030d0:	b909      	cbnz	r1, 80030d6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <_sbrk+0x34>)
 80030d4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030d6:	6810      	ldr	r0, [r2, #0]
 80030d8:	4909      	ldr	r1, [pc, #36]	; (8003100 <_sbrk+0x38>)
 80030da:	4c0a      	ldr	r4, [pc, #40]	; (8003104 <_sbrk+0x3c>)
 80030dc:	4403      	add	r3, r0
 80030de:	1b09      	subs	r1, r1, r4
 80030e0:	428b      	cmp	r3, r1
 80030e2:	d906      	bls.n	80030f2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80030e4:	f004 f9b8 	bl	8007458 <__errno>
 80030e8:	230c      	movs	r3, #12
 80030ea:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80030ec:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80030f0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80030f2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80030f4:	e7fc      	b.n	80030f0 <_sbrk+0x28>
 80030f6:	bf00      	nop
 80030f8:	200003fc 	.word	0x200003fc
 80030fc:	20000960 	.word	0x20000960
 8003100:	20020000 	.word	0x20020000
 8003104:	00000400 	.word	0x00000400

08003108 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003108:	4a03      	ldr	r2, [pc, #12]	; (8003118 <SystemInit+0x10>)
 800310a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800310e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003112:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800311c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003154 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003120:	480d      	ldr	r0, [pc, #52]	; (8003158 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003122:	490e      	ldr	r1, [pc, #56]	; (800315c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003124:	4a0e      	ldr	r2, [pc, #56]	; (8003160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003128:	e002      	b.n	8003130 <LoopCopyDataInit>

0800312a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800312a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800312c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800312e:	3304      	adds	r3, #4

08003130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003134:	d3f9      	bcc.n	800312a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003136:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003138:	4c0b      	ldr	r4, [pc, #44]	; (8003168 <LoopFillZerobss+0x26>)
  movs r3, #0
 800313a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800313c:	e001      	b.n	8003142 <LoopFillZerobss>

0800313e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800313e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003140:	3204      	adds	r2, #4

08003142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003144:	d3fb      	bcc.n	800313e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003146:	f7ff ffdf 	bl	8003108 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314a:	f004 f98b 	bl	8007464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800314e:	f7fe ff4d 	bl	8001fec <main>
  bx  lr    
 8003152:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003154:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800315c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003160:	0800ba70 	.word	0x0800ba70
  ldr r2, =_sbss
 8003164:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003168:	2000095c 	.word	0x2000095c

0800316c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800316c:	e7fe      	b.n	800316c <ADC_IRQHandler>
	...

08003170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003170:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_InitTick+0x3c>)
 8003174:	781a      	ldrb	r2, [r3, #0]
 8003176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800317a:	fbb3 f3f2 	udiv	r3, r3, r2
 800317e:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_InitTick+0x40>)
{
 8003180:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003182:	6810      	ldr	r0, [r2, #0]
 8003184:	fbb0 f0f3 	udiv	r0, r0, r3
 8003188:	f000 fb0e 	bl	80037a8 <HAL_SYSTICK_Config>
 800318c:	4604      	mov	r4, r0
 800318e:	b958      	cbnz	r0, 80031a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003190:	2d0f      	cmp	r5, #15
 8003192:	d809      	bhi.n	80031a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003194:	4602      	mov	r2, r0
 8003196:	4629      	mov	r1, r5
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f000 fac4 	bl	8003728 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a0:	4b04      	ldr	r3, [pc, #16]	; (80031b4 <HAL_InitTick+0x44>)
 80031a2:	4620      	mov	r0, r4
 80031a4:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031a8:	2001      	movs	r0, #1
 80031aa:	e7fc      	b.n	80031a6 <HAL_InitTick+0x36>
 80031ac:	20000010 	.word	0x20000010
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	20000014 	.word	0x20000014

080031b8 <HAL_Init>:
{
 80031b8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_Init+0x30>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d4:	2003      	movs	r0, #3
 80031d6:	f000 fa95 	bl	8003704 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80031da:	200f      	movs	r0, #15
 80031dc:	f7ff ffc8 	bl	8003170 <HAL_InitTick>
  HAL_MspInit();
 80031e0:	f7ff fe06 	bl	8002df0 <HAL_MspInit>
}
 80031e4:	2000      	movs	r0, #0
 80031e6:	bd08      	pop	{r3, pc}
 80031e8:	40023c00 	.word	0x40023c00

080031ec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80031ec:	4a03      	ldr	r2, [pc, #12]	; (80031fc <HAL_IncTick+0x10>)
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <HAL_IncTick+0x14>)
 80031f0:	6811      	ldr	r1, [r2, #0]
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	440b      	add	r3, r1
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000400 	.word	0x20000400
 8003200:	20000010 	.word	0x20000010

08003204 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003204:	4b01      	ldr	r3, [pc, #4]	; (800320c <HAL_GetTick+0x8>)
 8003206:	6818      	ldr	r0, [r3, #0]
}
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000400 	.word	0x20000400

08003210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003210:	b538      	push	{r3, r4, r5, lr}
 8003212:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7ff fff6 	bl	8003204 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003218:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800321a:	bf1c      	itt	ne
 800321c:	4b05      	ldrne	r3, [pc, #20]	; (8003234 <HAL_Delay+0x24>)
 800321e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8003220:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8003222:	bf18      	it	ne
 8003224:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003226:	f7ff ffed 	bl	8003204 <HAL_GetTick>
 800322a:	1b43      	subs	r3, r0, r5
 800322c:	42a3      	cmp	r3, r4
 800322e:	d3fa      	bcc.n	8003226 <HAL_Delay+0x16>
  {
  }
}
 8003230:	bd38      	pop	{r3, r4, r5, pc}
 8003232:	bf00      	nop
 8003234:	20000010 	.word	0x20000010

08003238 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003238:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800323a:	4604      	mov	r4, r0
 800323c:	2800      	cmp	r0, #0
 800323e:	f000 809b 	beq.w	8003378 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003242:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003244:	b925      	cbnz	r5, 8003250 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003246:	f7ff fdef 	bl	8002e28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800324a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800324c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003250:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003252:	06db      	lsls	r3, r3, #27
 8003254:	f100 808e 	bmi.w	8003374 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003258:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800325a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800325e:	f023 0302 	bic.w	r3, r3, #2
 8003262:	f043 0302 	orr.w	r3, r3, #2
 8003266:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003268:	4b44      	ldr	r3, [pc, #272]	; (800337c <HAL_ADC_Init+0x144>)
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003270:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	6861      	ldr	r1, [r4, #4]
 8003276:	430a      	orrs	r2, r1
 8003278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800327a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800327c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800328c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800328e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003290:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003292:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003296:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800329e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032a0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80032ae:	4934      	ldr	r1, [pc, #208]	; (8003380 <HAL_ADC_Init+0x148>)
 80032b0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80032b2:	428a      	cmp	r2, r1
 80032b4:	d052      	beq.n	800335c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80032bc:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032be:	6899      	ldr	r1, [r3, #8]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032c4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032d2:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	f022 0202 	bic.w	r2, r2, #2
 80032da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	7e21      	ldrb	r1, [r4, #24]
 80032e0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80032e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032e6:	f894 2020 	ldrb.w	r2, [r4, #32]
 80032ea:	2a00      	cmp	r2, #0
 80032ec:	d03e      	beq.n	800336c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032ee:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	3901      	subs	r1, #1
 8003304:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003308:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800330c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800330e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	3901      	subs	r1, #1
 8003318:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800332c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8003330:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003332:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003334:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800333a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800333c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800333e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003340:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8003344:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003346:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800334a:	f023 0303 	bic.w	r3, r3, #3
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003354:	2300      	movs	r3, #0
 8003356:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800335a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003362:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800336a:	e7b2      	b.n	80032d2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003372:	e7c9      	b.n	8003308 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8003374:	2001      	movs	r0, #1
 8003376:	e7ed      	b.n	8003354 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8003378:	2001      	movs	r0, #1
 800337a:	e7ee      	b.n	800335a <HAL_ADC_Init+0x122>
 800337c:	40012300 	.word	0x40012300
 8003380:	0f000001 	.word	0x0f000001

08003384 <HAL_ADC_Start_DMA>:
{
 8003384:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003386:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8003388:	2200      	movs	r2, #0
 800338a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800338c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003390:	2a01      	cmp	r2, #1
{
 8003392:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8003394:	f000 8092 	beq.w	80034bc <HAL_ADC_Start_DMA+0x138>
 8003398:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800339a:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 800339c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033a0:	68b2      	ldr	r2, [r6, #8]
 80033a2:	07d4      	lsls	r4, r2, #31
 80033a4:	d554      	bpl.n	8003450 <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80033a6:	68b2      	ldr	r2, [r6, #8]
 80033a8:	05d0      	lsls	r0, r2, #23
 80033aa:	d464      	bmi.n	8003476 <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ac:	68b4      	ldr	r4, [r6, #8]
 80033ae:	f014 0401 	ands.w	r4, r4, #1
 80033b2:	d079      	beq.n	80034a8 <HAL_ADC_Start_DMA+0x124>
    ADC_STATE_CLR_SET(hadc->State,
 80033b4:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80033b6:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80033ba:	f020 0001 	bic.w	r0, r0, #1
 80033be:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80033c2:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033c4:	6872      	ldr	r2, [r6, #4]
 80033c6:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033c8:	bf41      	itttt	mi
 80033ca:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 80033cc:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80033d0:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80033d4:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033d6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033d8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033da:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033de:	bf1c      	itt	ne
 80033e0:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 80033e2:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80033e6:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80033e8:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033ea:	4a35      	ldr	r2, [pc, #212]	; (80034c0 <HAL_ADC_Start_DMA+0x13c>)
    __HAL_UNLOCK(hadc);   
 80033ec:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033f0:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033f2:	4a34      	ldr	r2, [pc, #208]	; (80034c4 <HAL_ADC_Start_DMA+0x140>)
 80033f4:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033f6:	4a34      	ldr	r2, [pc, #208]	; (80034c8 <HAL_ADC_Start_DMA+0x144>)
 80033f8:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033fe:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003400:	6872      	ldr	r2, [r6, #4]
 8003402:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003406:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003408:	68b2      	ldr	r2, [r6, #8]
 800340a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340e:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003410:	460a      	mov	r2, r1
 8003412:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8003416:	f000 fa6f 	bl	80038f8 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800341a:	492c      	ldr	r1, [pc, #176]	; (80034cc <HAL_ADC_Start_DMA+0x148>)
 800341c:	682b      	ldr	r3, [r5, #0]
 800341e:	684a      	ldr	r2, [r1, #4]
 8003420:	482b      	ldr	r0, [pc, #172]	; (80034d0 <HAL_ADC_Start_DMA+0x14c>)
 8003422:	f012 021f 	ands.w	r2, r2, #31
 8003426:	d132      	bne.n	800348e <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003428:	4283      	cmp	r3, r0
 800342a:	d007      	beq.n	800343c <HAL_ADC_Start_DMA+0xb8>
 800342c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 8003430:	4283      	cmp	r3, r0
 8003432:	d125      	bne.n	8003480 <HAL_ADC_Start_DMA+0xfc>
 8003434:	6849      	ldr	r1, [r1, #4]
 8003436:	f011 0f1f 	tst.w	r1, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800343a:	d132      	bne.n	80034a2 <HAL_ADC_Start_DMA+0x11e>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800343c:	6898      	ldr	r0, [r3, #8]
 800343e:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8003442:	d103      	bne.n	800344c <HAL_ADC_Start_DMA+0xc8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800344a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800344c:	2200      	movs	r2, #0
 800344e:	e028      	b.n	80034a2 <HAL_ADC_Start_DMA+0x11e>
    __HAL_ADC_ENABLE(hadc);
 8003450:	68b2      	ldr	r2, [r6, #8]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_ADC_Start_DMA+0x150>)
 800345a:	6810      	ldr	r0, [r2, #0]
 800345c:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <HAL_ADC_Start_DMA+0x154>)
 800345e:	fbb0 f0f2 	udiv	r0, r0, r2
 8003462:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003466:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8003468:	9a01      	ldr	r2, [sp, #4]
 800346a:	2a00      	cmp	r2, #0
 800346c:	d09b      	beq.n	80033a6 <HAL_ADC_Start_DMA+0x22>
      counter--;
 800346e:	9a01      	ldr	r2, [sp, #4]
 8003470:	3a01      	subs	r2, #1
 8003472:	9201      	str	r2, [sp, #4]
 8003474:	e7f8      	b.n	8003468 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003476:	68b2      	ldr	r2, [r6, #8]
 8003478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800347c:	60b2      	str	r2, [r6, #8]
 800347e:	e795      	b.n	80033ac <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003480:	4816      	ldr	r0, [pc, #88]	; (80034dc <HAL_ADC_Start_DMA+0x158>)
 8003482:	4283      	cmp	r3, r0
 8003484:	d10d      	bne.n	80034a2 <HAL_ADC_Start_DMA+0x11e>
 8003486:	6849      	ldr	r1, [r1, #4]
 8003488:	f011 0f10 	tst.w	r1, #16
 800348c:	e7d5      	b.n	800343a <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800348e:	4283      	cmp	r3, r0
 8003490:	d1dc      	bne.n	800344c <HAL_ADC_Start_DMA+0xc8>
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	f012 5240 	ands.w	r2, r2, #805306368	; 0x30000000
 8003498:	d10e      	bne.n	80034b8 <HAL_ADC_Start_DMA+0x134>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80034a0:	6099      	str	r1, [r3, #8]
}
 80034a2:	4610      	mov	r0, r2
 80034a4:	b002      	add	sp, #8
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80034aa:	f043 0310 	orr.w	r3, r3, #16
 80034ae:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	646b      	str	r3, [r5, #68]	; 0x44
  return HAL_OK;
 80034b8:	4622      	mov	r2, r4
 80034ba:	e7f2      	b.n	80034a2 <HAL_ADC_Start_DMA+0x11e>
  __HAL_LOCK(hadc);
 80034bc:	2202      	movs	r2, #2
 80034be:	e7f0      	b.n	80034a2 <HAL_ADC_Start_DMA+0x11e>
 80034c0:	08003577 	.word	0x08003577
 80034c4:	08003555 	.word	0x08003555
 80034c8:	08003561 	.word	0x08003561
 80034cc:	40012300 	.word	0x40012300
 80034d0:	40012000 	.word	0x40012000
 80034d4:	2000000c 	.word	0x2000000c
 80034d8:	000f4240 	.word	0x000f4240
 80034dc:	40012200 	.word	0x40012200

080034e0 <HAL_ADC_Stop_DMA>:
{
 80034e0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80034e2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80034e6:	2b01      	cmp	r3, #1
{
 80034e8:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80034ea:	d030      	beq.n	800354e <HAL_ADC_Stop_DMA+0x6e>
  __HAL_ADC_DISABLE(hadc);
 80034ec:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 80034ee:	2301      	movs	r3, #1
 80034f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 80034f4:	6893      	ldr	r3, [r2, #8]
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80034fc:	6893      	ldr	r3, [r2, #8]
 80034fe:	f013 0301 	ands.w	r3, r3, #1
 8003502:	d122      	bne.n	800354a <HAL_ADC_Stop_DMA+0x6a>
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003504:	6891      	ldr	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003506:	6b80      	ldr	r0, [r0, #56]	; 0x38
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003508:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800350c:	6091      	str	r1, [r2, #8]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800350e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8003512:	2a02      	cmp	r2, #2
 8003514:	d117      	bne.n	8003546 <HAL_ADC_Stop_DMA+0x66>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003516:	f000 fa29 	bl	800396c <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 800351a:	b118      	cbz	r0, 8003524 <HAL_ADC_Stop_DMA+0x44>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800351c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800351e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003522:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	6853      	ldr	r3, [r2, #4]
 8003528:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800352c:	6053      	str	r3, [r2, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800352e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003530:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800353e:	2300      	movs	r3, #0
 8003540:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003544:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003546:	4618      	mov	r0, r3
 8003548:	e7ec      	b.n	8003524 <HAL_ADC_Stop_DMA+0x44>
 800354a:	2000      	movs	r0, #0
 800354c:	e7f7      	b.n	800353e <HAL_ADC_Stop_DMA+0x5e>
  __HAL_LOCK(hadc);
 800354e:	2002      	movs	r0, #2
 8003550:	e7f8      	b.n	8003544 <HAL_ADC_Stop_DMA+0x64>

08003552 <HAL_ADC_ConvHalfCpltCallback>:
 8003552:	4770      	bx	lr

08003554 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003554:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003556:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003558:	f7ff fffb 	bl	8003552 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800355c:	bd08      	pop	{r3, pc}

0800355e <HAL_ADC_ErrorCallback>:
 800355e:	4770      	bx	lr

08003560 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003560:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8003562:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003564:	2340      	movs	r3, #64	; 0x40
 8003566:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003568:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800356a:	f043 0304 	orr.w	r3, r3, #4
 800356e:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003570:	f7ff fff5 	bl	800355e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003574:	bd08      	pop	{r3, pc}

08003576 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003576:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357a:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 800357e:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003582:	d123      	bne.n	80035cc <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	6891      	ldr	r1, [r2, #8]
 800358e:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8003592:	d117      	bne.n	80035c4 <ADC_DMAConvCplt+0x4e>
 8003594:	7e19      	ldrb	r1, [r3, #24]
 8003596:	b9a9      	cbnz	r1, 80035c4 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003598:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800359a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 800359e:	d002      	beq.n	80035a6 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035a0:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035a2:	0548      	lsls	r0, r1, #21
 80035a4:	d40e      	bmi.n	80035c4 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035a6:	6851      	ldr	r1, [r2, #4]
 80035a8:	f021 0120 	bic.w	r1, r1, #32
 80035ac:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035b8:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035ba:	bf5e      	ittt	pl
 80035bc:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 80035be:	f042 0201 	orrpl.w	r2, r2, #1
 80035c2:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fd fdd5 	bl	8001174 <HAL_ADC_ConvCpltCallback>
}
 80035ca:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035cc:	06d2      	lsls	r2, r2, #27
 80035ce:	d503      	bpl.n	80035d8 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ffc4 	bl	800355e <HAL_ADC_ErrorCallback>
 80035d6:	e7f8      	b.n	80035ca <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80035da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e0:	4718      	bx	r3
	...

080035e4 <HAL_ADC_ConfigChannel>:
{
 80035e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80035ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d064      	beq.n	80036bc <HAL_ADC_ConfigChannel+0xd8>
 80035f2:	2301      	movs	r3, #1
 80035f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035f8:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80035fa:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035fc:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80035fe:	2d09      	cmp	r5, #9
 8003600:	b2ac      	uxth	r4, r5
 8003602:	d931      	bls.n	8003668 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003604:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003608:	68df      	ldr	r7, [r3, #12]
 800360a:	3a1e      	subs	r2, #30
 800360c:	f04f 0c07 	mov.w	ip, #7
 8003610:	fa0c fc02 	lsl.w	ip, ip, r2
 8003614:	ea27 070c 	bic.w	r7, r7, ip
 8003618:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800361a:	68df      	ldr	r7, [r3, #12]
 800361c:	fa06 f202 	lsl.w	r2, r6, r2
 8003620:	433a      	orrs	r2, r7
 8003622:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003624:	6849      	ldr	r1, [r1, #4]
 8003626:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003628:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 800362c:	d82b      	bhi.n	8003686 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800362e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003630:	3a05      	subs	r2, #5
 8003632:	261f      	movs	r6, #31
 8003634:	4096      	lsls	r6, r2
 8003636:	ea21 0106 	bic.w	r1, r1, r6
 800363a:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800363c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800363e:	fa04 f202 	lsl.w	r2, r4, r2
 8003642:	430a      	orrs	r2, r1
 8003644:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003646:	4a2b      	ldr	r2, [pc, #172]	; (80036f4 <HAL_ADC_ConfigChannel+0x110>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d107      	bne.n	800365c <HAL_ADC_ConfigChannel+0x78>
 800364c:	2d12      	cmp	r5, #18
 800364e:	d137      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0xdc>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003650:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003654:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003658:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 800365c:	2300      	movs	r3, #0
 800365e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8003662:	4618      	mov	r0, r3
}
 8003664:	b003      	add	sp, #12
 8003666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800366e:	2707      	movs	r7, #7
 8003670:	fa07 f70c 	lsl.w	r7, r7, ip
 8003674:	ea22 0207 	bic.w	r2, r2, r7
 8003678:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	fa06 f60c 	lsl.w	r6, r6, ip
 8003680:	4316      	orrs	r6, r2
 8003682:	611e      	str	r6, [r3, #16]
 8003684:	e7ce      	b.n	8003624 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8003686:	290c      	cmp	r1, #12
 8003688:	f04f 011f 	mov.w	r1, #31
 800368c:	d80b      	bhi.n	80036a6 <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800368e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8003690:	3a23      	subs	r2, #35	; 0x23
 8003692:	4091      	lsls	r1, r2
 8003694:	ea26 0101 	bic.w	r1, r6, r1
 8003698:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800369a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800369c:	fa04 f202 	lsl.w	r2, r4, r2
 80036a0:	430a      	orrs	r2, r1
 80036a2:	631a      	str	r2, [r3, #48]	; 0x30
 80036a4:	e7cf      	b.n	8003646 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036a6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80036a8:	3a41      	subs	r2, #65	; 0x41
 80036aa:	4091      	lsls	r1, r2
 80036ac:	ea26 0101 	bic.w	r1, r6, r1
 80036b0:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b4:	4094      	lsls	r4, r2
 80036b6:	430c      	orrs	r4, r1
 80036b8:	62dc      	str	r4, [r3, #44]	; 0x2c
 80036ba:	e7c4      	b.n	8003646 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80036bc:	2002      	movs	r0, #2
 80036be:	e7d1      	b.n	8003664 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036c0:	f1a5 0310 	sub.w	r3, r5, #16
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d8c9      	bhi.n	800365c <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036c8:	4a0b      	ldr	r2, [pc, #44]	; (80036f8 <HAL_ADC_ConfigChannel+0x114>)
 80036ca:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036cc:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036d2:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d4:	d1c2      	bne.n	800365c <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_ADC_ConfigChannel+0x118>)
 80036d8:	4a09      	ldr	r2, [pc, #36]	; (8003700 <HAL_ADC_ConfigChannel+0x11c>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80036e0:	220a      	movs	r2, #10
 80036e2:	4353      	muls	r3, r2
        counter--;
 80036e4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80036e6:	9b01      	ldr	r3, [sp, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0b7      	beq.n	800365c <HAL_ADC_ConfigChannel+0x78>
        counter--;
 80036ec:	9b01      	ldr	r3, [sp, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	e7f8      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x100>
 80036f2:	bf00      	nop
 80036f4:	40012000 	.word	0x40012000
 80036f8:	40012300 	.word	0x40012300
 80036fc:	2000000c 	.word	0x2000000c
 8003700:	000f4240 	.word	0x000f4240

08003704 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003704:	4907      	ldr	r1, [pc, #28]	; (8003724 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003706:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003708:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800370c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800370e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003714:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003720:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003722:	4770      	bx	lr
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003728:	4b16      	ldr	r3, [pc, #88]	; (8003784 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800372a:	b530      	push	{r4, r5, lr}
 800372c:	68dc      	ldr	r4, [r3, #12]
 800372e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003732:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003736:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003738:	2b04      	cmp	r3, #4
 800373a:	bf28      	it	cs
 800373c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800373e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003744:	bf8c      	ite	hi
 8003746:	3c03      	subhi	r4, #3
 8003748:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800374a:	fa05 f303 	lsl.w	r3, r5, r3
 800374e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003752:	40a5      	lsls	r5, r4
 8003754:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 800375a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800375c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003760:	bfac      	ite	ge
 8003762:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003766:	4a08      	ldrlt	r2, [pc, #32]	; (8003788 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800376c:	bfb8      	it	lt
 800376e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003772:	b2db      	uxtb	r3, r3
 8003774:	bfaa      	itet	ge
 8003776:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003780:	bd30      	pop	{r4, r5, pc}
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00
 8003788:	e000ed14 	.word	0xe000ed14

0800378c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800378c:	2800      	cmp	r0, #0
 800378e:	db07      	blt.n	80037a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003790:	0941      	lsrs	r1, r0, #5
 8003792:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_NVIC_EnableIRQ+0x18>)
 8003794:	f000 001f 	and.w	r0, r0, #31
 8003798:	2301      	movs	r3, #1
 800379a:	4083      	lsls	r3, r0
 800379c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a8:	3801      	subs	r0, #1
 80037aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80037ae:	d20b      	bcs.n	80037c8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b4:	4a05      	ldr	r2, [pc, #20]	; (80037cc <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b6:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b8:	21f0      	movs	r1, #240	; 0xf0
 80037ba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037be:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80037c8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80037ca:	4770      	bx	lr
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037d0:	6803      	ldr	r3, [r0, #0]
{
 80037d2:	b510      	push	{r4, lr}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037d8:	4c07      	ldr	r4, [pc, #28]	; (80037f8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037de:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80037e2:	2a5f      	cmp	r2, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037e4:	bf88      	it	hi
 80037e6:	3304      	addhi	r3, #4
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037e8:	2118      	movs	r1, #24
 80037ea:	fbb2 f1f1 	udiv	r1, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037ee:	5c61      	ldrb	r1, [r4, r1]
 80037f0:	65c1      	str	r1, [r0, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037f2:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd10      	pop	{r4, pc}
 80037f8:	0800b408 	.word	0x0800b408

080037fc <HAL_DMA_Init>:
{
 80037fc:	b570      	push	{r4, r5, r6, lr}
 80037fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003800:	f7ff fd00 	bl	8003204 <HAL_GetTick>
 8003804:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003806:	2c00      	cmp	r4, #0
 8003808:	d071      	beq.n	80038ee <HAL_DMA_Init+0xf2>
  hdma->State = HAL_DMA_STATE_BUSY;
 800380a:	2302      	movs	r3, #2
 800380c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003810:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8003812:	2300      	movs	r3, #0
 8003814:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8003818:	6813      	ldr	r3, [r2, #0]
 800381a:	f023 0301 	bic.w	r3, r3, #1
 800381e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	6813      	ldr	r3, [r2, #0]
 8003824:	07d8      	lsls	r0, r3, #31
 8003826:	d42e      	bmi.n	8003886 <HAL_DMA_Init+0x8a>
  tmp = hdma->Instance->CR;
 8003828:	6813      	ldr	r3, [r2, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800382a:	4832      	ldr	r0, [pc, #200]	; (80038f4 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800382c:	69a1      	ldr	r1, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800382e:	4018      	ands	r0, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003830:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8003834:	432b      	orrs	r3, r5
 8003836:	68e5      	ldr	r5, [r4, #12]
 8003838:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383a:	6925      	ldr	r5, [r4, #16]
 800383c:	432b      	orrs	r3, r5
 800383e:	6965      	ldr	r5, [r4, #20]
 8003840:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003842:	69e5      	ldr	r5, [r4, #28]
 8003844:	430b      	orrs	r3, r1
 8003846:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003848:	6a25      	ldr	r5, [r4, #32]
 800384a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384c:	4303      	orrs	r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800384e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003850:	2804      	cmp	r0, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003852:	bf02      	ittt	eq
 8003854:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8003858:	4335      	orreq	r5, r6
 800385a:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800385c:	6013      	str	r3, [r2, #0]
  tmp = hdma->Instance->FCR;
 800385e:	6953      	ldr	r3, [r2, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003860:	2804      	cmp	r0, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003862:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003866:	ea43 0300 	orr.w	r3, r3, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800386a:	d132      	bne.n	80038d2 <HAL_DMA_Init+0xd6>
    tmp |= hdma->Init.FIFOThreshold;
 800386c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800386e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8003870:	4303      	orrs	r3, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003872:	b375      	cbz	r5, 80038d2 <HAL_DMA_Init+0xd6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003874:	b991      	cbnz	r1, 800389c <HAL_DMA_Init+0xa0>
  {
    switch (tmp)
 8003876:	2801      	cmp	r0, #1
 8003878:	d020      	beq.n	80038bc <HAL_DMA_Init+0xc0>
 800387a:	f030 0102 	bics.w	r1, r0, #2
 800387e:	d128      	bne.n	80038d2 <HAL_DMA_Init+0xd6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003880:	01e9      	lsls	r1, r5, #7
 8003882:	d526      	bpl.n	80038d2 <HAL_DMA_Init+0xd6>
 8003884:	e01d      	b.n	80038c2 <HAL_DMA_Init+0xc6>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003886:	f7ff fcbd 	bl	8003204 <HAL_GetTick>
 800388a:	1b40      	subs	r0, r0, r5
 800388c:	2805      	cmp	r0, #5
 800388e:	d9c7      	bls.n	8003820 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003890:	2320      	movs	r3, #32
 8003892:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003894:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8003896:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800389a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800389c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80038a0:	d113      	bne.n	80038ca <HAL_DMA_Init+0xce>
    switch (tmp)
 80038a2:	2803      	cmp	r0, #3
 80038a4:	d815      	bhi.n	80038d2 <HAL_DMA_Init+0xd6>
 80038a6:	a101      	add	r1, pc, #4	; (adr r1, 80038ac <HAL_DMA_Init+0xb0>)
 80038a8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
 80038ac:	080038c3 	.word	0x080038c3
 80038b0:	08003881 	.word	0x08003881
 80038b4:	080038c3 	.word	0x080038c3
 80038b8:	080038bd 	.word	0x080038bd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038bc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80038c0:	d107      	bne.n	80038d2 <HAL_DMA_Init+0xd6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c2:	2340      	movs	r3, #64	; 0x40
 80038c4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80038c6:	2001      	movs	r0, #1
 80038c8:	e7e5      	b.n	8003896 <HAL_DMA_Init+0x9a>
    switch (tmp)
 80038ca:	2802      	cmp	r0, #2
 80038cc:	d9f9      	bls.n	80038c2 <HAL_DMA_Init+0xc6>
 80038ce:	2803      	cmp	r0, #3
 80038d0:	d0d6      	beq.n	8003880 <HAL_DMA_Init+0x84>
  hdma->Instance->FCR = tmp;
 80038d2:	6153      	str	r3, [r2, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7ff ff7b 	bl	80037d0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80038dc:	233f      	movs	r3, #63	; 0x3f
 80038de:	4093      	lsls	r3, r2
 80038e0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80038e4:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038e6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80038e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80038ec:	e7d5      	b.n	800389a <HAL_DMA_Init+0x9e>
    return HAL_ERROR;
 80038ee:	2001      	movs	r0, #1
 80038f0:	e7d3      	b.n	800389a <HAL_DMA_Init+0x9e>
 80038f2:	bf00      	nop
 80038f4:	f010803f 	.word	0xf010803f

080038f8 <HAL_DMA_Start_IT>:
{
 80038f8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80038fa:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038fe:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003900:	2c01      	cmp	r4, #1
 8003902:	d031      	beq.n	8003968 <HAL_DMA_Start_IT+0x70>
 8003904:	2401      	movs	r4, #1
 8003906:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800390a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800390e:	2c01      	cmp	r4, #1
 8003910:	f04f 0500 	mov.w	r5, #0
 8003914:	f04f 0402 	mov.w	r4, #2
 8003918:	d124      	bne.n	8003964 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800391a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800391e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003920:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003922:	6825      	ldr	r5, [r4, #0]
 8003924:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003928:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800392a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392c:	6883      	ldr	r3, [r0, #8]
 800392e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8003930:	bf0e      	itee	eq
 8003932:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8003934:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8003936:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003938:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800393a:	bf08      	it	eq
 800393c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800393e:	233f      	movs	r3, #63	; 0x3f
 8003940:	4093      	lsls	r3, r2
 8003942:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003944:	6823      	ldr	r3, [r4, #0]
 8003946:	f043 0316 	orr.w	r3, r3, #22
 800394a:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800394c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800394e:	b11b      	cbz	r3, 8003958 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003950:	6823      	ldr	r3, [r4, #0]
 8003952:	f043 0308 	orr.w	r3, r3, #8
 8003956:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2000      	movs	r0, #0
}
 8003962:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8003964:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8003968:	2002      	movs	r0, #2
 800396a:	e7fa      	b.n	8003962 <HAL_DMA_Start_IT+0x6a>

0800396c <HAL_DMA_Abort>:
{
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003970:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8003972:	f7ff fc47 	bl	8003204 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003976:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800397a:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 800397c:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800397e:	d006      	beq.n	800398e <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003984:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003986:	2300      	movs	r3, #0
 8003988:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800398c:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	f022 0216 	bic.w	r2, r2, #22
 8003996:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800399e:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80039a2:	b90a      	cbnz	r2, 80039a8 <HAL_DMA_Abort+0x3c>
 80039a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80039a6:	b11a      	cbz	r2, 80039b0 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f022 0208 	bic.w	r2, r2, #8
 80039ae:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f013 0301 	ands.w	r3, r3, #1
 80039c0:	d108      	bne.n	80039d4 <HAL_DMA_Abort+0x68>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80039c4:	223f      	movs	r2, #63	; 0x3f
 80039c6:	408a      	lsls	r2, r1
 80039c8:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80039ca:	2201      	movs	r2, #1
 80039cc:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  return HAL_OK;
 80039d0:	4618      	mov	r0, r3
 80039d2:	e7d8      	b.n	8003986 <HAL_DMA_Abort+0x1a>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039d4:	f7ff fc16 	bl	8003204 <HAL_GetTick>
 80039d8:	1b40      	subs	r0, r0, r5
 80039da:	2805      	cmp	r0, #5
 80039dc:	d9ec      	bls.n	80039b8 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039de:	2320      	movs	r3, #32
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e0:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039e2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_TIMEOUT;
 80039e8:	e7cd      	b.n	8003986 <HAL_DMA_Abort+0x1a>
	...

080039ec <HAL_DMA_IRQHandler>:
{
 80039ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f2:	4b5c      	ldr	r3, [pc, #368]	; (8003b64 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80039f6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80039fa:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039fc:	2208      	movs	r2, #8
 80039fe:	409a      	lsls	r2, r3
 8003a00:	4232      	tst	r2, r6
{
 8003a02:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a04:	d00c      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a06:	6801      	ldr	r1, [r0, #0]
 8003a08:	6808      	ldr	r0, [r1, #0]
 8003a0a:	0740      	lsls	r0, r0, #29
 8003a0c:	d508      	bpl.n	8003a20 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a0e:	6808      	ldr	r0, [r1, #0]
 8003a10:	f020 0004 	bic.w	r0, r0, #4
 8003a14:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a16:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a18:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a20:	2201      	movs	r2, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	4232      	tst	r2, r6
 8003a26:	d008      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a28:	6821      	ldr	r1, [r4, #0]
 8003a2a:	6949      	ldr	r1, [r1, #20]
 8003a2c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a2e:	bf41      	itttt	mi
 8003a30:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a32:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8003a34:	f042 0202 	orrmi.w	r2, r2, #2
 8003a38:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	4232      	tst	r2, r6
 8003a40:	d008      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a42:	6821      	ldr	r1, [r4, #0]
 8003a44:	6809      	ldr	r1, [r1, #0]
 8003a46:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a48:	bf41      	itttt	mi
 8003a4a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a4c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8003a4e:	f042 0204 	orrmi.w	r2, r2, #4
 8003a52:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a54:	2210      	movs	r2, #16
 8003a56:	409a      	lsls	r2, r3
 8003a58:	4232      	tst	r2, r6
 8003a5a:	d010      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	6819      	ldr	r1, [r3, #0]
 8003a60:	0709      	lsls	r1, r1, #28
 8003a62:	d50c      	bpl.n	8003a7e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a64:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	0350      	lsls	r0, r2, #13
 8003a6a:	d537      	bpl.n	8003adc <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	0319      	lsls	r1, r3, #12
 8003a70:	d401      	bmi.n	8003a76 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8003a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a74:	e000      	b.n	8003a78 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8003a78:	b10b      	cbz	r3, 8003a7e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a7e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003a80:	2220      	movs	r2, #32
 8003a82:	408a      	lsls	r2, r1
 8003a84:	4232      	tst	r2, r6
 8003a86:	d03a      	beq.n	8003afe <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	06c6      	lsls	r6, r0, #27
 8003a8e:	d536      	bpl.n	8003afe <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a90:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a92:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003a96:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a98:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a9a:	d127      	bne.n	8003aec <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a9c:	f022 0216 	bic.w	r2, r2, #22
 8003aa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003aa2:	695a      	ldr	r2, [r3, #20]
 8003aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa8:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aaa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003aac:	b90a      	cbnz	r2, 8003ab2 <HAL_DMA_IRQHandler+0xc6>
 8003aae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003ab0:	b11a      	cbz	r2, 8003aba <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aba:	233f      	movs	r3, #63	; 0x3f
 8003abc:	408b      	lsls	r3, r1
 8003abe:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8003acc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d045      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8003ad2:	4620      	mov	r0, r4
}
 8003ad4:	b003      	add	sp, #12
 8003ad6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003ada:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae0:	bf5e      	ittt	pl
 8003ae2:	681a      	ldrpl	r2, [r3, #0]
 8003ae4:	f022 0208 	bicpl.w	r2, r2, #8
 8003ae8:	601a      	strpl	r2, [r3, #0]
 8003aea:	e7c2      	b.n	8003a72 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aec:	0350      	lsls	r0, r2, #13
 8003aee:	d527      	bpl.n	8003b40 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	0319      	lsls	r1, r3, #12
 8003af4:	d431      	bmi.n	8003b5a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8003af6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8003af8:	b10b      	cbz	r3, 8003afe <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8003afa:	4620      	mov	r0, r4
 8003afc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003afe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b00:	b36b      	cbz	r3, 8003b5e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b02:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b04:	07da      	lsls	r2, r3, #31
 8003b06:	d519      	bpl.n	8003b3c <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8003b08:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b0a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003b0e:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b12:	2305      	movs	r3, #5
 8003b14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003b18:	6813      	ldr	r3, [r2, #0]
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8003b20:	9b01      	ldr	r3, [sp, #4]
 8003b22:	3301      	adds	r3, #1
 8003b24:	42bb      	cmp	r3, r7
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	d802      	bhi.n	8003b30 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b2a:	6813      	ldr	r3, [r2, #0]
 8003b2c:	07db      	lsls	r3, r3, #31
 8003b2e:	d4f7      	bmi.n	8003b20 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8003b36:	2300      	movs	r3, #0
 8003b38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8003b3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003b3e:	e7c6      	b.n	8003ace <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8003b46:	d108      	bne.n	8003b5a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b48:	6819      	ldr	r1, [r3, #0]
 8003b4a:	f021 0110 	bic.w	r1, r1, #16
 8003b4e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8003b56:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8003b5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b5c:	e7cc      	b.n	8003af8 <HAL_DMA_IRQHandler+0x10c>
}
 8003b5e:	b003      	add	sp, #12
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b62:	bf00      	nop
 8003b64:	2000000c 	.word	0x2000000c

08003b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b6c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8003d18 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b70:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b72:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b74:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8003b76:	2401      	movs	r4, #1
 8003b78:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b7a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8003b7e:	43ac      	bics	r4, r5
 8003b80:	f040 80b1 	bne.w	8003ce6 <HAL_GPIO_Init+0x17e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b84:	684d      	ldr	r5, [r1, #4]
 8003b86:	f005 0403 	and.w	r4, r5, #3
 8003b8a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b8e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b90:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b92:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b96:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b98:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b9c:	d834      	bhi.n	8003c08 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8003b9e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ba0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba4:	68cf      	ldr	r7, [r1, #12]
 8003ba6:	fa07 f708 	lsl.w	r7, r7, r8
 8003baa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003bae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003bb0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb2:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bb6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8003bba:	409f      	lsls	r7, r3
 8003bbc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003bc0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003bc2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bc4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc8:	688f      	ldr	r7, [r1, #8]
 8003bca:	fa07 f708 	lsl.w	r7, r7, r8
 8003bce:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8003bd4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bd6:	d119      	bne.n	8003c0c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8003bd8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003bdc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003be0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003be4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003be8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003bec:	f04f 0e0f 	mov.w	lr, #15
 8003bf0:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003bf4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bf8:	690f      	ldr	r7, [r1, #16]
 8003bfa:	fa07 f70b 	lsl.w	r7, r7, fp
 8003bfe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003c02:	f8ca 7020 	str.w	r7, [sl, #32]
 8003c06:	e001      	b.n	8003c0c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c08:	2c03      	cmp	r4, #3
 8003c0a:	d1da      	bne.n	8003bc2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8003c0c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c0e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c12:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c14:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c16:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8003c1a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c1c:	d063      	beq.n	8003ce6 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	f04f 0a00 	mov.w	sl, #0
 8003c22:	f8cd a004 	str.w	sl, [sp, #4]
 8003c26:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c2a:	4c3a      	ldr	r4, [pc, #232]	; (8003d14 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c2c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8003c30:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8003c34:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8003c38:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003c3c:	9601      	str	r6, [sp, #4]
 8003c3e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003c40:	f023 0603 	bic.w	r6, r3, #3
 8003c44:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8003c48:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c4c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003c50:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c54:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003c58:	270f      	movs	r7, #15
 8003c5a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c5e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c60:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c64:	d046      	beq.n	8003cf4 <HAL_GPIO_Init+0x18c>
 8003c66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c6a:	42a0      	cmp	r0, r4
 8003c6c:	d044      	beq.n	8003cf8 <HAL_GPIO_Init+0x190>
 8003c6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c72:	42a0      	cmp	r0, r4
 8003c74:	d042      	beq.n	8003cfc <HAL_GPIO_Init+0x194>
 8003c76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c7a:	42a0      	cmp	r0, r4
 8003c7c:	d040      	beq.n	8003d00 <HAL_GPIO_Init+0x198>
 8003c7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c82:	42a0      	cmp	r0, r4
 8003c84:	d03e      	beq.n	8003d04 <HAL_GPIO_Init+0x19c>
 8003c86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c8a:	42a0      	cmp	r0, r4
 8003c8c:	d03c      	beq.n	8003d08 <HAL_GPIO_Init+0x1a0>
 8003c8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c92:	42a0      	cmp	r0, r4
 8003c94:	d03a      	beq.n	8003d0c <HAL_GPIO_Init+0x1a4>
 8003c96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003c9a:	42a0      	cmp	r0, r4
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2407      	moveq	r4, #7
 8003ca0:	2408      	movne	r4, #8
 8003ca2:	fa04 f40e 	lsl.w	r4, r4, lr
 8003ca6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ca8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8003caa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003cac:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cb0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8003cb2:	bf54      	ite	pl
 8003cb4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003cb6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8003cba:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8003cbc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cbe:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	bf54      	ite	pl
 8003cc2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003cc4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8003cc8:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8003cca:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ccc:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8003cce:	bf54      	ite	pl
 8003cd0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003cd2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8003cd6:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cd8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cda:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8003cdc:	bf54      	ite	pl
 8003cde:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003ce0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8003ce4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	f47f af43 	bne.w	8003b74 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003cee:	b003      	add	sp, #12
 8003cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cf4:	4654      	mov	r4, sl
 8003cf6:	e7d4      	b.n	8003ca2 <HAL_GPIO_Init+0x13a>
 8003cf8:	2401      	movs	r4, #1
 8003cfa:	e7d2      	b.n	8003ca2 <HAL_GPIO_Init+0x13a>
 8003cfc:	2402      	movs	r4, #2
 8003cfe:	e7d0      	b.n	8003ca2 <HAL_GPIO_Init+0x13a>
 8003d00:	2403      	movs	r4, #3
 8003d02:	e7ce      	b.n	8003ca2 <HAL_GPIO_Init+0x13a>
 8003d04:	2404      	movs	r4, #4
 8003d06:	e7cc      	b.n	8003ca2 <HAL_GPIO_Init+0x13a>
 8003d08:	2405      	movs	r4, #5
 8003d0a:	e7ca      	b.n	8003ca2 <HAL_GPIO_Init+0x13a>
 8003d0c:	2406      	movs	r4, #6
 8003d0e:	e7c8      	b.n	8003ca2 <HAL_GPIO_Init+0x13a>
 8003d10:	40013c00 	.word	0x40013c00
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40023800 	.word	0x40023800

08003d1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d1c:	6903      	ldr	r3, [r0, #16]
 8003d1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003d20:	bf14      	ite	ne
 8003d22:	2001      	movne	r0, #1
 8003d24:	2000      	moveq	r0, #0
 8003d26:	4770      	bx	lr

08003d28 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d28:	b10a      	cbz	r2, 8003d2e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d2a:	6181      	str	r1, [r0, #24]
  }
}
 8003d2c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d2e:	0409      	lsls	r1, r1, #16
 8003d30:	e7fb      	b.n	8003d2a <HAL_GPIO_WritePin+0x2>
	...

08003d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8003d36:	6951      	ldr	r1, [r2, #20]
 8003d38:	4201      	tst	r1, r0
{
 8003d3a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d3c:	d002      	beq.n	8003d44 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d3e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d40:	f7fd fab4 	bl	80012ac <HAL_GPIO_EXTI_Callback>
  }
}
 8003d44:	bd08      	pop	{r3, pc}
 8003d46:	bf00      	nop
 8003d48:	40013c00 	.word	0x40013c00

08003d4c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d4c:	6801      	ldr	r1, [r0, #0]
 8003d4e:	694b      	ldr	r3, [r1, #20]
 8003d50:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	d010      	beq.n	8003d7c <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d5a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003d5e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d60:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d62:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d68:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d6c:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d72:	f043 0304 	orr.w	r3, r3, #4
 8003d76:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
 8003d7a:	4770      	bx	lr
  }
  return HAL_OK;
 8003d7c:	4618      	mov	r0, r3
}
 8003d7e:	4770      	bx	lr

08003d80 <I2C_WaitOnFlagUntilTimeout>:
{
 8003d80:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8003d84:	4606      	mov	r6, r0
 8003d86:	460f      	mov	r7, r1
 8003d88:	4691      	mov	r9, r2
 8003d8a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	f1ba 0f01 	cmp.w	sl, #1
 8003d96:	bf0c      	ite	eq
 8003d98:	695c      	ldreq	r4, [r3, #20]
 8003d9a:	699c      	ldrne	r4, [r3, #24]
 8003d9c:	ea27 0404 	bic.w	r4, r7, r4
 8003da0:	b2a4      	uxth	r4, r4
 8003da2:	fab4 f484 	clz	r4, r4
 8003da6:	0964      	lsrs	r4, r4, #5
 8003da8:	45a1      	cmp	r9, r4
 8003daa:	d001      	beq.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003dac:	2000      	movs	r0, #0
 8003dae:	e017      	b.n	8003de0 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8003db0:	1c6a      	adds	r2, r5, #1
 8003db2:	d0ee      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7ff fa26 	bl	8003204 <HAL_GetTick>
 8003db8:	9b08      	ldr	r3, [sp, #32]
 8003dba:	1ac0      	subs	r0, r0, r3
 8003dbc:	42a8      	cmp	r0, r5
 8003dbe:	d801      	bhi.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003dc0:	2d00      	cmp	r5, #0
 8003dc2:	d1e5      	bne.n	8003d90 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dc4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dc6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dc8:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003dca:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dce:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dd2:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003dd4:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dd8:	f042 0220 	orr.w	r2, r2, #32
 8003ddc:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 8003dde:	2001      	movs	r0, #1
}
 8003de0:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003de8:	4604      	mov	r4, r0
 8003dea:	460f      	mov	r7, r1
 8003dec:	4616      	mov	r6, r2
 8003dee:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003df0:	6825      	ldr	r5, [r4, #0]
 8003df2:	6968      	ldr	r0, [r5, #20]
 8003df4:	ea27 0000 	bic.w	r0, r7, r0
 8003df8:	b280      	uxth	r0, r0
 8003dfa:	b1b8      	cbz	r0, 8003e2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dfc:	696b      	ldr	r3, [r5, #20]
 8003dfe:	055a      	lsls	r2, r3, #21
 8003e00:	d516      	bpl.n	8003e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e02:	682b      	ldr	r3, [r5, #0]
 8003e04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e08:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e0a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003e0e:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e10:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e12:	2300      	movs	r3, #0
 8003e14:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e1a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e1e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e20:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e24:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003e2a:	2001      	movs	r0, #1
}
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003e30:	1c73      	adds	r3, r6, #1
 8003e32:	d0de      	beq.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e34:	f7ff f9e6 	bl	8003204 <HAL_GetTick>
 8003e38:	eba0 0008 	sub.w	r0, r0, r8
 8003e3c:	42b0      	cmp	r0, r6
 8003e3e:	d801      	bhi.n	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8003e40:	2e00      	cmp	r6, #0
 8003e42:	d1d5      	bne.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e44:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e46:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e48:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e4a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e54:	f042 0220 	orr.w	r2, r2, #32
 8003e58:	e7e4      	b.n	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003e5a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003e5a:	b570      	push	{r4, r5, r6, lr}
 8003e5c:	4604      	mov	r4, r0
 8003e5e:	460d      	mov	r5, r1
 8003e60:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	061b      	lsls	r3, r3, #24
 8003e68:	d501      	bpl.n	8003e6e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003e6a:	2000      	movs	r0, #0
}
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7ff ff6c 	bl	8003d4c <I2C_IsAcknowledgeFailed>
 8003e74:	b9a8      	cbnz	r0, 8003ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003e76:	1c6a      	adds	r2, r5, #1
 8003e78:	d0f3      	beq.n	8003e62 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e7a:	f7ff f9c3 	bl	8003204 <HAL_GetTick>
 8003e7e:	1b80      	subs	r0, r0, r6
 8003e80:	42a8      	cmp	r0, r5
 8003e82:	d801      	bhi.n	8003e88 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003e84:	2d00      	cmp	r5, #0
 8003e86:	d1ec      	bne.n	8003e62 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e88:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e8a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e8c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e96:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e98:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e9c:	f042 0220 	orr.w	r2, r2, #32
 8003ea0:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003ea2:	2001      	movs	r0, #1
 8003ea4:	e7e2      	b.n	8003e6c <I2C_WaitOnTXEFlagUntilTimeout+0x12>

08003ea6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003ea6:	b570      	push	{r4, r5, r6, lr}
 8003ea8:	4604      	mov	r4, r0
 8003eaa:	460d      	mov	r5, r1
 8003eac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	075b      	lsls	r3, r3, #29
 8003eb4:	d501      	bpl.n	8003eba <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003eb6:	2000      	movs	r0, #0
}
 8003eb8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f7ff ff46 	bl	8003d4c <I2C_IsAcknowledgeFailed>
 8003ec0:	b9a8      	cbnz	r0, 8003eee <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003ec2:	1c6a      	adds	r2, r5, #1
 8003ec4:	d0f3      	beq.n	8003eae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7ff f99d 	bl	8003204 <HAL_GetTick>
 8003eca:	1b80      	subs	r0, r0, r6
 8003ecc:	42a8      	cmp	r0, r5
 8003ece:	d801      	bhi.n	8003ed4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	d1ec      	bne.n	8003eae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed4:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ed6:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ede:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003ee4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee8:	f042 0220 	orr.w	r2, r2, #32
 8003eec:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003eee:	2001      	movs	r0, #1
 8003ef0:	e7e2      	b.n	8003eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x12>
	...

08003ef4 <HAL_I2C_Init>:
{
 8003ef4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	b908      	cbnz	r0, 8003efe <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003efa:	2001      	movs	r0, #1
}
 8003efc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003efe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f06:	b91b      	cbnz	r3, 8003f10 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003f08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003f0c:	f7fe ffde 	bl	8002ecc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f10:	2324      	movs	r3, #36	; 0x24
 8003f12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f2e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f30:	f000 fc02 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f34:	4b3f      	ldr	r3, [pc, #252]	; (8004034 <HAL_I2C_Init+0x140>)
 8003f36:	6865      	ldr	r5, [r4, #4]
 8003f38:	429d      	cmp	r5, r3
 8003f3a:	bf94      	ite	ls
 8003f3c:	4b3e      	ldrls	r3, [pc, #248]	; (8004038 <HAL_I2C_Init+0x144>)
 8003f3e:	4b3f      	ldrhi	r3, [pc, #252]	; (800403c <HAL_I2C_Init+0x148>)
 8003f40:	4298      	cmp	r0, r3
 8003f42:	bf8c      	ite	hi
 8003f44:	2300      	movhi	r3, #0
 8003f46:	2301      	movls	r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1d6      	bne.n	8003efa <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f4c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f4e:	4e39      	ldr	r6, [pc, #228]	; (8004034 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f50:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003f52:	4b3b      	ldr	r3, [pc, #236]	; (8004040 <HAL_I2C_Init+0x14c>)
 8003f54:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f58:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003f5c:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f5e:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f60:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f62:	bf88      	it	hi
 8003f64:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8003f68:	6a11      	ldr	r1, [r2, #32]
 8003f6a:	bf88      	it	hi
 8003f6c:	4373      	mulhi	r3, r6
 8003f6e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003f72:	bf84      	itt	hi
 8003f74:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003f78:	fbb3 f3f6 	udivhi	r3, r3, r6
 8003f7c:	3301      	adds	r3, #1
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f82:	69d1      	ldr	r1, [r2, #28]
 8003f84:	1e43      	subs	r3, r0, #1
 8003f86:	482b      	ldr	r0, [pc, #172]	; (8004034 <HAL_I2C_Init+0x140>)
 8003f88:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003f8c:	4285      	cmp	r5, r0
 8003f8e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003f92:	d832      	bhi.n	8003ffa <HAL_I2C_Init+0x106>
 8003f94:	006d      	lsls	r5, r5, #1
 8003f96:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003f9a:	fbb3 f3f5 	udiv	r3, r3, r5
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	4203      	tst	r3, r0
 8003fa2:	d042      	beq.n	800402a <HAL_I2C_Init+0x136>
 8003fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa8:	4319      	orrs	r1, r3
 8003faa:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fac:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003fb0:	6811      	ldr	r1, [r2, #0]
 8003fb2:	4303      	orrs	r3, r0
 8003fb4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fbc:	6891      	ldr	r1, [r2, #8]
 8003fbe:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003fc2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003fc6:	4303      	orrs	r3, r0
 8003fc8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fd0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003fd4:	68d1      	ldr	r1, [r2, #12]
 8003fd6:	4303      	orrs	r3, r0
 8003fd8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003fdc:	430b      	orrs	r3, r1
 8003fde:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003fe0:	6813      	ldr	r3, [r2, #0]
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fec:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ff2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003ff8:	e780      	b.n	8003efc <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ffa:	68a0      	ldr	r0, [r4, #8]
 8003ffc:	b950      	cbnz	r0, 8004014 <HAL_I2C_Init+0x120>
 8003ffe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004002:	fbb3 f3f5 	udiv	r3, r3, r5
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	b17b      	cbz	r3, 800402e <HAL_I2C_Init+0x13a>
 800400e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004012:	e7c9      	b.n	8003fa8 <HAL_I2C_Init+0xb4>
 8004014:	2019      	movs	r0, #25
 8004016:	4368      	muls	r0, r5
 8004018:	fbb3 f3f0 	udiv	r3, r3, r0
 800401c:	3301      	adds	r3, #1
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	b123      	cbz	r3, 800402e <HAL_I2C_Init+0x13a>
 8004024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004028:	e7be      	b.n	8003fa8 <HAL_I2C_Init+0xb4>
 800402a:	2304      	movs	r3, #4
 800402c:	e7bc      	b.n	8003fa8 <HAL_I2C_Init+0xb4>
 800402e:	2301      	movs	r3, #1
 8004030:	e7ba      	b.n	8003fa8 <HAL_I2C_Init+0xb4>
 8004032:	bf00      	nop
 8004034:	000186a0 	.word	0x000186a0
 8004038:	001e847f 	.word	0x001e847f
 800403c:	003d08ff 	.word	0x003d08ff
 8004040:	000f4240 	.word	0x000f4240

08004044 <HAL_I2C_Master_Transmit>:
{
 8004044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004048:	4604      	mov	r4, r0
 800404a:	b085      	sub	sp, #20
 800404c:	4698      	mov	r8, r3
 800404e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004050:	460d      	mov	r5, r1
 8004052:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8004054:	f7ff f8d6 	bl	8003204 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004058:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800405c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800405e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004060:	d004      	beq.n	800406c <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 8004062:	2502      	movs	r5, #2
}
 8004064:	4628      	mov	r0, r5
 8004066:	b005      	add	sp, #20
 8004068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800406c:	9000      	str	r0, [sp, #0]
 800406e:	495d      	ldr	r1, [pc, #372]	; (80041e4 <HAL_I2C_Master_Transmit+0x1a0>)
 8004070:	2319      	movs	r3, #25
 8004072:	2201      	movs	r2, #1
 8004074:	4620      	mov	r0, r4
 8004076:	f7ff fe83 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 800407a:	2800      	cmp	r0, #0
 800407c:	d1f1      	bne.n	8004062 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800407e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d0ed      	beq.n	8004062 <HAL_I2C_Master_Transmit+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004086:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8004088:	2301      	movs	r3, #1
 800408a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800408e:	680b      	ldr	r3, [r1, #0]
 8004090:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8004092:	bf5e      	ittt	pl
 8004094:	680b      	ldrpl	r3, [r1, #0]
 8004096:	f043 0301 	orrpl.w	r3, r3, #1
 800409a:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800409c:	680b      	ldr	r3, [r1, #0]
 800409e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040a2:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040a4:	2321      	movs	r3, #33	; 0x21
 80040a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040aa:	2310      	movs	r3, #16
 80040ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80040b4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80040ba:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040bc:	4b4a      	ldr	r3, [pc, #296]	; (80041e8 <HAL_I2C_Master_Transmit+0x1a4>)
 80040be:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 80040c2:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040c6:	2b08      	cmp	r3, #8
 80040c8:	d004      	beq.n	80040d4 <HAL_I2C_Master_Transmit+0x90>
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d002      	beq.n	80040d4 <HAL_I2C_Master_Transmit+0x90>
 80040ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80040d2:	d104      	bne.n	80040de <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d4:	680b      	ldr	r3, [r1, #0]
 80040d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	e002      	b.n	80040e4 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040e0:	2b12      	cmp	r3, #18
 80040e2:	d0f7      	beq.n	80040d4 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e4:	2200      	movs	r2, #0
 80040e6:	9600      	str	r6, [sp, #0]
 80040e8:	463b      	mov	r3, r7
 80040ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7ff fe46 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	b138      	cbz	r0, 8004108 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040f8:	6813      	ldr	r3, [r2, #0]
 80040fa:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040fc:	bf44      	itt	mi
 80040fe:	f44f 7300 	movmi.w	r3, #512	; 0x200
 8004102:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004104:	2501      	movs	r5, #1
 8004106:	e7ad      	b.n	8004064 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004108:	6923      	ldr	r3, [r4, #16]
 800410a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410e:	d121      	bne.n	8004154 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004110:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8004114:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004116:	4935      	ldr	r1, [pc, #212]	; (80041ec <HAL_I2C_Master_Transmit+0x1a8>)
 8004118:	4633      	mov	r3, r6
 800411a:	463a      	mov	r2, r7
 800411c:	4620      	mov	r0, r4
 800411e:	f7ff fe61 	bl	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004122:	4605      	mov	r5, r0
 8004124:	2800      	cmp	r0, #0
 8004126:	d1ed      	bne.n	8004104 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	9003      	str	r0, [sp, #12]
 800412c:	695a      	ldr	r2, [r3, #20]
 800412e:	9203      	str	r2, [sp, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	9303      	str	r3, [sp, #12]
 8004134:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8004136:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004138:	b9f3      	cbnz	r3, 8004178 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413a:	6821      	ldr	r1, [r4, #0]
 800413c:	680a      	ldr	r2, [r1, #0]
 800413e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004142:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004144:	2220      	movs	r2, #32
 8004146:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800414a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800414e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8004152:	e787      	b.n	8004064 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004154:	11eb      	asrs	r3, r5, #7
 8004156:	f003 0306 	and.w	r3, r3, #6
 800415a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800415e:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004160:	4923      	ldr	r1, [pc, #140]	; (80041f0 <HAL_I2C_Master_Transmit+0x1ac>)
 8004162:	4633      	mov	r3, r6
 8004164:	463a      	mov	r2, r7
 8004166:	4620      	mov	r0, r4
 8004168:	f7ff fe3c 	bl	8003de4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800416c:	2800      	cmp	r0, #0
 800416e:	d1c9      	bne.n	8004104 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	b2ed      	uxtb	r5, r5
 8004174:	611d      	str	r5, [r3, #16]
 8004176:	e7ce      	b.n	8004116 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004178:	4632      	mov	r2, r6
 800417a:	4639      	mov	r1, r7
 800417c:	4620      	mov	r0, r4
 800417e:	f7ff fe6c 	bl	8003e5a <I2C_WaitOnTXEFlagUntilTimeout>
 8004182:	b140      	cbz	r0, 8004196 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004184:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004186:	2b04      	cmp	r3, #4
 8004188:	d1bc      	bne.n	8004104 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	6813      	ldr	r3, [r2, #0]
 800418e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e7b6      	b.n	8004104 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004198:	6820      	ldr	r0, [r4, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	f812 1b01 	ldrb.w	r1, [r2], #1
 80041a0:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80041a2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80041a4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80041a6:	3a01      	subs	r2, #1
 80041a8:	b292      	uxth	r2, r2
 80041aa:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80041ac:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041ae:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80041b2:	1e51      	subs	r1, r2, #1
 80041b4:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b6:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 80041ba:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041bc:	d00a      	beq.n	80041d4 <HAL_I2C_Master_Transmit+0x190>
 80041be:	b149      	cbz	r1, 80041d4 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c0:	7859      	ldrb	r1, [r3, #1]
 80041c2:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80041c4:	3302      	adds	r3, #2
 80041c6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80041c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80041ce:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80041d0:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80041d2:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d4:	4632      	mov	r2, r6
 80041d6:	4639      	mov	r1, r7
 80041d8:	4620      	mov	r0, r4
 80041da:	f7ff fe64 	bl	8003ea6 <I2C_WaitOnBTFFlagUntilTimeout>
 80041de:	2800      	cmp	r0, #0
 80041e0:	d0a9      	beq.n	8004136 <HAL_I2C_Master_Transmit+0xf2>
 80041e2:	e7cf      	b.n	8004184 <HAL_I2C_Master_Transmit+0x140>
 80041e4:	00100002 	.word	0x00100002
 80041e8:	ffff0000 	.word	0xffff0000
 80041ec:	00010002 	.word	0x00010002
 80041f0:	00010008 	.word	0x00010008

080041f4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80041f4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80041f6:	4604      	mov	r4, r0
 80041f8:	b310      	cbz	r0, 8004240 <HAL_IWDG_Init+0x4c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80041fa:	6803      	ldr	r3, [r0, #0]
 80041fc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004200:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004202:	f245 5255 	movw	r2, #21845	; 0x5555
 8004206:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004208:	6842      	ldr	r2, [r0, #4]
 800420a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800420c:	6882      	ldr	r2, [r0, #8]
 800420e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004210:	f7fe fff8 	bl	8003204 <HAL_GetTick>
 8004214:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004216:	6822      	ldr	r2, [r4, #0]
 8004218:	68d3      	ldr	r3, [r2, #12]
 800421a:	f013 0303 	ands.w	r3, r3, #3
 800421e:	d104      	bne.n	800422a <HAL_IWDG_Init+0x36>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004220:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
 8004224:	6011      	str	r1, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004226:	4618      	mov	r0, r3
}
 8004228:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800422a:	f7fe ffeb 	bl	8003204 <HAL_GetTick>
 800422e:	1b40      	subs	r0, r0, r5
 8004230:	2831      	cmp	r0, #49	; 0x31
 8004232:	d9f0      	bls.n	8004216 <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004234:	6823      	ldr	r3, [r4, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	079b      	lsls	r3, r3, #30
 800423a:	d0ec      	beq.n	8004216 <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 800423c:	2003      	movs	r0, #3
 800423e:	e7f3      	b.n	8004228 <HAL_IWDG_Init+0x34>
    return HAL_ERROR;
 8004240:	2001      	movs	r0, #1
 8004242:	e7f1      	b.n	8004228 <HAL_IWDG_Init+0x34>

08004244 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004244:	6803      	ldr	r3, [r0, #0]
 8004246:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800424a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800424c:	2000      	movs	r0, #0
 800424e:	4770      	bx	lr

08004250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004250:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004254:	4604      	mov	r4, r0
 8004256:	b340      	cbz	r0, 80042aa <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004258:	6803      	ldr	r3, [r0, #0]
 800425a:	07dd      	lsls	r5, r3, #31
 800425c:	d410      	bmi.n	8004280 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	0798      	lsls	r0, r3, #30
 8004262:	d45b      	bmi.n	800431c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	071a      	lsls	r2, r3, #28
 8004268:	f100 809d 	bmi.w	80043a6 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	075b      	lsls	r3, r3, #29
 8004270:	f100 80bd 	bmi.w	80043ee <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004274:	69a0      	ldr	r0, [r4, #24]
 8004276:	2800      	cmp	r0, #0
 8004278:	f040 8124 	bne.w	80044c4 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800427c:	2000      	movs	r0, #0
 800427e:	e02c      	b.n	80042da <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004280:	4b8d      	ldr	r3, [pc, #564]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	f002 020c 	and.w	r2, r2, #12
 8004288:	2a04      	cmp	r2, #4
 800428a:	d007      	beq.n	800429c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004292:	2a08      	cmp	r2, #8
 8004294:	d10b      	bne.n	80042ae <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	0259      	lsls	r1, r3, #9
 800429a:	d508      	bpl.n	80042ae <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	4b86      	ldr	r3, [pc, #536]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	039a      	lsls	r2, r3, #14
 80042a2:	d5dc      	bpl.n	800425e <HAL_RCC_OscConfig+0xe>
 80042a4:	6863      	ldr	r3, [r4, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1d9      	bne.n	800425e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80042aa:	2001      	movs	r0, #1
 80042ac:	e015      	b.n	80042da <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ae:	6863      	ldr	r3, [r4, #4]
 80042b0:	4d81      	ldr	r5, [pc, #516]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b6:	d113      	bne.n	80042e0 <HAL_RCC_OscConfig+0x90>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042c0:	f7fe ffa0 	bl	8003204 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c4:	4e7c      	ldr	r6, [pc, #496]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 80042c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c8:	6833      	ldr	r3, [r6, #0]
 80042ca:	039b      	lsls	r3, r3, #14
 80042cc:	d4c7      	bmi.n	800425e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ce:	f7fe ff99 	bl	8003204 <HAL_GetTick>
 80042d2:	1b40      	subs	r0, r0, r5
 80042d4:	2864      	cmp	r0, #100	; 0x64
 80042d6:	d9f7      	bls.n	80042c8 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80042d8:	2003      	movs	r0, #3
}
 80042da:	b002      	add	sp, #8
 80042dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e4:	d104      	bne.n	80042f0 <HAL_RCC_OscConfig+0xa0>
 80042e6:	682b      	ldr	r3, [r5, #0]
 80042e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042ec:	602b      	str	r3, [r5, #0]
 80042ee:	e7e3      	b.n	80042b8 <HAL_RCC_OscConfig+0x68>
 80042f0:	682a      	ldr	r2, [r5, #0]
 80042f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042f6:	602a      	str	r2, [r5, #0]
 80042f8:	682a      	ldr	r2, [r5, #0]
 80042fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80042fe:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1dd      	bne.n	80042c0 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 8004304:	f7fe ff7e 	bl	8003204 <HAL_GetTick>
 8004308:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430a:	682b      	ldr	r3, [r5, #0]
 800430c:	039f      	lsls	r7, r3, #14
 800430e:	d5a6      	bpl.n	800425e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe ff78 	bl	8003204 <HAL_GetTick>
 8004314:	1b80      	subs	r0, r0, r6
 8004316:	2864      	cmp	r0, #100	; 0x64
 8004318:	d9f7      	bls.n	800430a <HAL_RCC_OscConfig+0xba>
 800431a:	e7dd      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800431c:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	f012 0f0c 	tst.w	r2, #12
 8004324:	d007      	beq.n	8004336 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432c:	2a08      	cmp	r2, #8
 800432e:	d111      	bne.n	8004354 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	025e      	lsls	r6, r3, #9
 8004334:	d40e      	bmi.n	8004354 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4a60      	ldr	r2, [pc, #384]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
 8004338:	6813      	ldr	r3, [r2, #0]
 800433a:	079d      	lsls	r5, r3, #30
 800433c:	d502      	bpl.n	8004344 <HAL_RCC_OscConfig+0xf4>
 800433e:	68e3      	ldr	r3, [r4, #12]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d1b2      	bne.n	80042aa <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	6813      	ldr	r3, [r2, #0]
 8004346:	6921      	ldr	r1, [r4, #16]
 8004348:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800434c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004350:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	e787      	b.n	8004264 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004354:	68e2      	ldr	r2, [r4, #12]
 8004356:	4b59      	ldr	r3, [pc, #356]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 8004358:	b1b2      	cbz	r2, 8004388 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800435e:	f7fe ff51 	bl	8003204 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004362:	4d55      	ldr	r5, [pc, #340]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004364:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004366:	682b      	ldr	r3, [r5, #0]
 8004368:	0798      	lsls	r0, r3, #30
 800436a:	d507      	bpl.n	800437c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	6922      	ldr	r2, [r4, #16]
 8004370:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004374:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004378:	602b      	str	r3, [r5, #0]
 800437a:	e773      	b.n	8004264 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437c:	f7fe ff42 	bl	8003204 <HAL_GetTick>
 8004380:	1b80      	subs	r0, r0, r6
 8004382:	2802      	cmp	r0, #2
 8004384:	d9ef      	bls.n	8004366 <HAL_RCC_OscConfig+0x116>
 8004386:	e7a7      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8004388:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800438a:	f7fe ff3b 	bl	8003204 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438e:	4e4a      	ldr	r6, [pc, #296]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8004390:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	6833      	ldr	r3, [r6, #0]
 8004394:	0799      	lsls	r1, r3, #30
 8004396:	f57f af65 	bpl.w	8004264 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800439a:	f7fe ff33 	bl	8003204 <HAL_GetTick>
 800439e:	1b40      	subs	r0, r0, r5
 80043a0:	2802      	cmp	r0, #2
 80043a2:	d9f6      	bls.n	8004392 <HAL_RCC_OscConfig+0x142>
 80043a4:	e798      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043a6:	6962      	ldr	r2, [r4, #20]
 80043a8:	4b44      	ldr	r3, [pc, #272]	; (80044bc <HAL_RCC_OscConfig+0x26c>)
 80043aa:	b182      	cbz	r2, 80043ce <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80043ac:	2201      	movs	r2, #1
 80043ae:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80043b2:	f7fe ff27 	bl	8003204 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b6:	4e40      	ldr	r6, [pc, #256]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80043b8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80043bc:	079f      	lsls	r7, r3, #30
 80043be:	f53f af55 	bmi.w	800426c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c2:	f7fe ff1f 	bl	8003204 <HAL_GetTick>
 80043c6:	1b40      	subs	r0, r0, r5
 80043c8:	2802      	cmp	r0, #2
 80043ca:	d9f6      	bls.n	80043ba <HAL_RCC_OscConfig+0x16a>
 80043cc:	e784      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80043ce:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80043d2:	f7fe ff17 	bl	8003204 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d6:	4e38      	ldr	r6, [pc, #224]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80043d8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043da:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80043dc:	0798      	lsls	r0, r3, #30
 80043de:	f57f af45 	bpl.w	800426c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043e2:	f7fe ff0f 	bl	8003204 <HAL_GetTick>
 80043e6:	1b40      	subs	r0, r0, r5
 80043e8:	2802      	cmp	r0, #2
 80043ea:	d9f6      	bls.n	80043da <HAL_RCC_OscConfig+0x18a>
 80043ec:	e774      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
 80043f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043f2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80043f6:	d128      	bne.n	800444a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	9201      	str	r2, [sp, #4]
 80043fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800440c:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440e:	4d2c      	ldr	r5, [pc, #176]	; (80044c0 <HAL_RCC_OscConfig+0x270>)
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	05d9      	lsls	r1, r3, #23
 8004414:	d51b      	bpl.n	800444e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004416:	68a3      	ldr	r3, [r4, #8]
 8004418:	4d27      	ldr	r5, [pc, #156]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
 800441a:	2b01      	cmp	r3, #1
 800441c:	d127      	bne.n	800446e <HAL_RCC_OscConfig+0x21e>
 800441e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004426:	f7fe feed 	bl	8003204 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442a:	4e23      	ldr	r6, [pc, #140]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 800442c:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004432:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004434:	079b      	lsls	r3, r3, #30
 8004436:	d539      	bpl.n	80044ac <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 8004438:	2f00      	cmp	r7, #0
 800443a:	f43f af1b 	beq.w	8004274 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800443e:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <HAL_RCC_OscConfig+0x268>)
 8004440:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004446:	6413      	str	r3, [r2, #64]	; 0x40
 8004448:	e714      	b.n	8004274 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800444a:	2700      	movs	r7, #0
 800444c:	e7df      	b.n	800440e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444e:	682b      	ldr	r3, [r5, #0]
 8004450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004454:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004456:	f7fe fed5 	bl	8003204 <HAL_GetTick>
 800445a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	05da      	lsls	r2, r3, #23
 8004460:	d4d9      	bmi.n	8004416 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004462:	f7fe fecf 	bl	8003204 <HAL_GetTick>
 8004466:	1b80      	subs	r0, r0, r6
 8004468:	2802      	cmp	r0, #2
 800446a:	d9f7      	bls.n	800445c <HAL_RCC_OscConfig+0x20c>
 800446c:	e734      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800446e:	2b05      	cmp	r3, #5
 8004470:	d104      	bne.n	800447c <HAL_RCC_OscConfig+0x22c>
 8004472:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004474:	f043 0304 	orr.w	r3, r3, #4
 8004478:	672b      	str	r3, [r5, #112]	; 0x70
 800447a:	e7d0      	b.n	800441e <HAL_RCC_OscConfig+0x1ce>
 800447c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	672a      	str	r2, [r5, #112]	; 0x70
 8004484:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ca      	bne.n	8004426 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8004490:	f7fe feb8 	bl	8003204 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004494:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004498:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800449c:	0798      	lsls	r0, r3, #30
 800449e:	d5cb      	bpl.n	8004438 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a0:	f7fe feb0 	bl	8003204 <HAL_GetTick>
 80044a4:	1b80      	subs	r0, r0, r6
 80044a6:	4540      	cmp	r0, r8
 80044a8:	d9f7      	bls.n	800449a <HAL_RCC_OscConfig+0x24a>
 80044aa:	e715      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fe feaa 	bl	8003204 <HAL_GetTick>
 80044b0:	1b40      	subs	r0, r0, r5
 80044b2:	4540      	cmp	r0, r8
 80044b4:	d9bd      	bls.n	8004432 <HAL_RCC_OscConfig+0x1e2>
 80044b6:	e70f      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	42470000 	.word	0x42470000
 80044c0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044c4:	4d36      	ldr	r5, [pc, #216]	; (80045a0 <HAL_RCC_OscConfig+0x350>)
 80044c6:	68ab      	ldr	r3, [r5, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d03d      	beq.n	800454c <HAL_RCC_OscConfig+0x2fc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d0:	4b34      	ldr	r3, [pc, #208]	; (80045a4 <HAL_RCC_OscConfig+0x354>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80044d6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044d8:	d12b      	bne.n	8004532 <HAL_RCC_OscConfig+0x2e2>
        tickstart = HAL_GetTick();
 80044da:	f7fe fe93 	bl	8003204 <HAL_GetTick>
 80044de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	0199      	lsls	r1, r3, #6
 80044e4:	d41f      	bmi.n	8004526 <HAL_RCC_OscConfig+0x2d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044e6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80044ee:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80044f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80044f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80044f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80044fa:	0852      	lsrs	r2, r2, #1
 80044fc:	3a01      	subs	r2, #1
 80044fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004502:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004504:	4b27      	ldr	r3, [pc, #156]	; (80045a4 <HAL_RCC_OscConfig+0x354>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4d26      	ldr	r5, [pc, #152]	; (80045a0 <HAL_RCC_OscConfig+0x350>)
        __HAL_RCC_PLL_ENABLE();
 8004508:	2201      	movs	r2, #1
 800450a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800450c:	f7fe fe7a 	bl	8003204 <HAL_GetTick>
 8004510:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	019a      	lsls	r2, r3, #6
 8004516:	f53f aeb1 	bmi.w	800427c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451a:	f7fe fe73 	bl	8003204 <HAL_GetTick>
 800451e:	1b00      	subs	r0, r0, r4
 8004520:	2802      	cmp	r0, #2
 8004522:	d9f6      	bls.n	8004512 <HAL_RCC_OscConfig+0x2c2>
 8004524:	e6d8      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004526:	f7fe fe6d 	bl	8003204 <HAL_GetTick>
 800452a:	1b80      	subs	r0, r0, r6
 800452c:	2802      	cmp	r0, #2
 800452e:	d9d7      	bls.n	80044e0 <HAL_RCC_OscConfig+0x290>
 8004530:	e6d2      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8004532:	f7fe fe67 	bl	8003204 <HAL_GetTick>
 8004536:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	019b      	lsls	r3, r3, #6
 800453c:	f57f ae9e 	bpl.w	800427c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fe fe60 	bl	8003204 <HAL_GetTick>
 8004544:	1b00      	subs	r0, r0, r4
 8004546:	2802      	cmp	r0, #2
 8004548:	d9f6      	bls.n	8004538 <HAL_RCC_OscConfig+0x2e8>
 800454a:	e6c5      	b.n	80042d8 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800454c:	2801      	cmp	r0, #1
 800454e:	f43f aec4 	beq.w	80042da <HAL_RCC_OscConfig+0x8a>
        pll_config = RCC->PLLCFGR;
 8004552:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004554:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004556:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800455a:	4291      	cmp	r1, r2
 800455c:	f47f aea5 	bne.w	80042aa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004562:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004566:	428a      	cmp	r2, r1
 8004568:	f47f ae9f 	bne.w	80042aa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456c:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004572:	401a      	ands	r2, r3
 8004574:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004578:	f47f ae97 	bne.w	80042aa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800457e:	0852      	lsrs	r2, r2, #1
 8004580:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004584:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004586:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800458a:	f47f ae8e 	bne.w	80042aa <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800458e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004590:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004594:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004598:	f43f ae70 	beq.w	800427c <HAL_RCC_OscConfig+0x2c>
 800459c:	e685      	b.n	80042aa <HAL_RCC_OscConfig+0x5a>
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	42470000 	.word	0x42470000

080045a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045a8:	4913      	ldr	r1, [pc, #76]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80045aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ac:	688b      	ldr	r3, [r1, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d01c      	beq.n	80045f0 <HAL_RCC_GetSysClockFreq+0x48>
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d11c      	bne.n	80045f4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045bc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045be:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045c0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c4:	bf14      	ite	ne
 80045c6:	480d      	ldrne	r0, [pc, #52]	; (80045fc <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c8:	480d      	ldreq	r0, [pc, #52]	; (8004600 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ca:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80045ce:	bf18      	it	ne
 80045d0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045d2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	fba1 0100 	umull	r0, r1, r1, r0
 80045da:	f7fc fb55 	bl	8000c88 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045de:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x50>)
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80045e6:	3301      	adds	r3, #1
 80045e8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80045ea:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80045ee:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f0:	4802      	ldr	r0, [pc, #8]	; (80045fc <HAL_RCC_GetSysClockFreq+0x54>)
 80045f2:	e7fc      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 80045f4:	4802      	ldr	r0, [pc, #8]	; (8004600 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80045f6:	e7fa      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x46>
 80045f8:	40023800 	.word	0x40023800
 80045fc:	017d7840 	.word	0x017d7840
 8004600:	00f42400 	.word	0x00f42400

08004604 <HAL_RCC_ClockConfig>:
{
 8004604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004608:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800460a:	4604      	mov	r4, r0
 800460c:	b910      	cbnz	r0, 8004614 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800460e:	2001      	movs	r0, #1
}
 8004610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004614:	4b43      	ldr	r3, [pc, #268]	; (8004724 <HAL_RCC_ClockConfig+0x120>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	f002 0207 	and.w	r2, r2, #7
 800461c:	428a      	cmp	r2, r1
 800461e:	d328      	bcc.n	8004672 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004620:	6821      	ldr	r1, [r4, #0]
 8004622:	078f      	lsls	r7, r1, #30
 8004624:	d42d      	bmi.n	8004682 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004626:	07c8      	lsls	r0, r1, #31
 8004628:	d440      	bmi.n	80046ac <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <HAL_RCC_ClockConfig+0x120>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	f002 0207 	and.w	r2, r2, #7
 8004632:	42aa      	cmp	r2, r5
 8004634:	d865      	bhi.n	8004702 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004636:	6822      	ldr	r2, [r4, #0]
 8004638:	0751      	lsls	r1, r2, #29
 800463a:	d46b      	bmi.n	8004714 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	0713      	lsls	r3, r2, #28
 800463e:	d507      	bpl.n	8004650 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004640:	4a39      	ldr	r2, [pc, #228]	; (8004728 <HAL_RCC_ClockConfig+0x124>)
 8004642:	6921      	ldr	r1, [r4, #16]
 8004644:	6893      	ldr	r3, [r2, #8]
 8004646:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800464a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800464e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004650:	f7ff ffaa 	bl	80045a8 <HAL_RCC_GetSysClockFreq>
 8004654:	4b34      	ldr	r3, [pc, #208]	; (8004728 <HAL_RCC_ClockConfig+0x124>)
 8004656:	4a35      	ldr	r2, [pc, #212]	; (800472c <HAL_RCC_ClockConfig+0x128>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800465e:	5cd3      	ldrb	r3, [r2, r3]
 8004660:	40d8      	lsrs	r0, r3
 8004662:	4b33      	ldr	r3, [pc, #204]	; (8004730 <HAL_RCC_ClockConfig+0x12c>)
 8004664:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004666:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_RCC_ClockConfig+0x130>)
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	f7fe fd81 	bl	8003170 <HAL_InitTick>
  return HAL_OK;
 800466e:	2000      	movs	r0, #0
 8004670:	e7ce      	b.n	8004610 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004672:	b2ca      	uxtb	r2, r1
 8004674:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	428b      	cmp	r3, r1
 800467e:	d1c6      	bne.n	800460e <HAL_RCC_ClockConfig+0xa>
 8004680:	e7ce      	b.n	8004620 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004682:	4b29      	ldr	r3, [pc, #164]	; (8004728 <HAL_RCC_ClockConfig+0x124>)
 8004684:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004688:	bf1e      	ittt	ne
 800468a:	689a      	ldrne	r2, [r3, #8]
 800468c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8004690:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004692:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004694:	bf42      	ittt	mi
 8004696:	689a      	ldrmi	r2, [r3, #8]
 8004698:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800469c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	68a0      	ldr	r0, [r4, #8]
 80046a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80046a6:	4302      	orrs	r2, r0
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	e7bc      	b.n	8004626 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ac:	6862      	ldr	r2, [r4, #4]
 80046ae:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCC_ClockConfig+0x124>)
 80046b0:	2a01      	cmp	r2, #1
 80046b2:	d11c      	bne.n	80046ee <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046ba:	d0a8      	beq.n	800460e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046bc:	4e1a      	ldr	r6, [pc, #104]	; (8004728 <HAL_RCC_ClockConfig+0x124>)
 80046be:	68b3      	ldr	r3, [r6, #8]
 80046c0:	f023 0303 	bic.w	r3, r3, #3
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80046c8:	f7fe fd9c 	bl	8003204 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046cc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80046d0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	68b3      	ldr	r3, [r6, #8]
 80046d4:	6862      	ldr	r2, [r4, #4]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80046de:	d0a4      	beq.n	800462a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e0:	f7fe fd90 	bl	8003204 <HAL_GetTick>
 80046e4:	1bc0      	subs	r0, r0, r7
 80046e6:	4540      	cmp	r0, r8
 80046e8:	d9f3      	bls.n	80046d2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80046ea:	2003      	movs	r0, #3
 80046ec:	e790      	b.n	8004610 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046ee:	1e91      	subs	r1, r2, #2
 80046f0:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f2:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046f4:	d802      	bhi.n	80046fc <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80046fa:	e7de      	b.n	80046ba <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fc:	f013 0f02 	tst.w	r3, #2
 8004700:	e7db      	b.n	80046ba <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004702:	b2ea      	uxtb	r2, r5
 8004704:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	42ab      	cmp	r3, r5
 800470e:	f47f af7e 	bne.w	800460e <HAL_RCC_ClockConfig+0xa>
 8004712:	e790      	b.n	8004636 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4904      	ldr	r1, [pc, #16]	; (8004728 <HAL_RCC_ClockConfig+0x124>)
 8004716:	68e0      	ldr	r0, [r4, #12]
 8004718:	688b      	ldr	r3, [r1, #8]
 800471a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800471e:	4303      	orrs	r3, r0
 8004720:	608b      	str	r3, [r1, #8]
 8004722:	e78b      	b.n	800463c <HAL_RCC_ClockConfig+0x38>
 8004724:	40023c00 	.word	0x40023c00
 8004728:	40023800 	.word	0x40023800
 800472c:	0800b3f0 	.word	0x0800b3f0
 8004730:	2000000c 	.word	0x2000000c
 8004734:	20000014 	.word	0x20000014

08004738 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <HAL_RCC_GetPCLK1Freq+0x14>)
 800473a:	4a05      	ldr	r2, [pc, #20]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x18>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004742:	5cd3      	ldrb	r3, [r2, r3]
 8004744:	4a03      	ldr	r2, [pc, #12]	; (8004754 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004746:	6810      	ldr	r0, [r2, #0]
}
 8004748:	40d8      	lsrs	r0, r3
 800474a:	4770      	bx	lr
 800474c:	40023800 	.word	0x40023800
 8004750:	0800b400 	.word	0x0800b400
 8004754:	2000000c 	.word	0x2000000c

08004758 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <HAL_RCC_GetPCLK2Freq+0x14>)
 800475a:	4a05      	ldr	r2, [pc, #20]	; (8004770 <HAL_RCC_GetPCLK2Freq+0x18>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004762:	5cd3      	ldrb	r3, [r2, r3]
 8004764:	4a03      	ldr	r2, [pc, #12]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004766:	6810      	ldr	r0, [r2, #0]
}
 8004768:	40d8      	lsrs	r0, r3
 800476a:	4770      	bx	lr
 800476c:	40023800 	.word	0x40023800
 8004770:	0800b400 	.word	0x0800b400
 8004774:	2000000c 	.word	0x2000000c

08004778 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004778:	6a03      	ldr	r3, [r0, #32]
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004780:	6a03      	ldr	r3, [r0, #32]
{
 8004782:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004786:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004788:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800478a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800478e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004790:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004792:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004796:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004798:	4d0e      	ldr	r5, [pc, #56]	; (80047d4 <TIM_OC1_SetConfig+0x5c>)
 800479a:	42a8      	cmp	r0, r5
 800479c:	d002      	beq.n	80047a4 <TIM_OC1_SetConfig+0x2c>
 800479e:	4e0e      	ldr	r6, [pc, #56]	; (80047d8 <TIM_OC1_SetConfig+0x60>)
 80047a0:	42b0      	cmp	r0, r6
 80047a2:	d110      	bne.n	80047c6 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047a4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80047a6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80047aa:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ae:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b2:	d002      	beq.n	80047ba <TIM_OC1_SetConfig+0x42>
 80047b4:	4d08      	ldr	r5, [pc, #32]	; (80047d8 <TIM_OC1_SetConfig+0x60>)
 80047b6:	42a8      	cmp	r0, r5
 80047b8:	d105      	bne.n	80047c6 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047ba:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047be:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80047c2:	4335      	orrs	r5, r6
 80047c4:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047c8:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047ca:	684a      	ldr	r2, [r1, #4]
 80047cc:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ce:	6203      	str	r3, [r0, #32]
}
 80047d0:	bd70      	pop	{r4, r5, r6, pc}
 80047d2:	bf00      	nop
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40010400 	.word	0x40010400

080047dc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047dc:	6a03      	ldr	r3, [r0, #32]
 80047de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047e2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e4:	6a03      	ldr	r3, [r0, #32]
{
 80047e6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80047f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047f4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80047f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047fe:	4d11      	ldr	r5, [pc, #68]	; (8004844 <TIM_OC3_SetConfig+0x68>)
 8004800:	42a8      	cmp	r0, r5
 8004802:	d003      	beq.n	800480c <TIM_OC3_SetConfig+0x30>
 8004804:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004808:	42a8      	cmp	r0, r5
 800480a:	d114      	bne.n	8004836 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800480c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800480e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004812:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004816:	4d0b      	ldr	r5, [pc, #44]	; (8004844 <TIM_OC3_SetConfig+0x68>)
 8004818:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 800481a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481e:	d003      	beq.n	8004828 <TIM_OC3_SetConfig+0x4c>
 8004820:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004824:	42a8      	cmp	r0, r5
 8004826:	d106      	bne.n	8004836 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004828:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800482c:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004830:	4335      	orrs	r5, r6
 8004832:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004836:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004838:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800483a:	684a      	ldr	r2, [r1, #4]
 800483c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483e:	6203      	str	r3, [r0, #32]
}
 8004840:	bd70      	pop	{r4, r5, r6, pc}
 8004842:	bf00      	nop
 8004844:	40010000 	.word	0x40010000

08004848 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004848:	6a03      	ldr	r3, [r0, #32]
 800484a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800484e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004850:	6a03      	ldr	r3, [r0, #32]
{
 8004852:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004854:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004856:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004858:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800485a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800485e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004862:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004864:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004868:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486c:	4d08      	ldr	r5, [pc, #32]	; (8004890 <TIM_OC4_SetConfig+0x48>)
 800486e:	42a8      	cmp	r0, r5
 8004870:	d003      	beq.n	800487a <TIM_OC4_SetConfig+0x32>
 8004872:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004876:	42a8      	cmp	r0, r5
 8004878:	d104      	bne.n	8004884 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800487a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800487c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004880:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004884:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004886:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004888:	684a      	ldr	r2, [r1, #4]
 800488a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488c:	6203      	str	r3, [r0, #32]
}
 800488e:	bd30      	pop	{r4, r5, pc}
 8004890:	40010000 	.word	0x40010000

08004894 <HAL_TIM_PWM_MspInit>:
 8004894:	4770      	bx	lr
	...

08004898 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004898:	4a30      	ldr	r2, [pc, #192]	; (800495c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800489a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800489c:	4290      	cmp	r0, r2
 800489e:	d012      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048a4:	d00f      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80048aa:	4290      	cmp	r0, r2
 80048ac:	d00b      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048b2:	4290      	cmp	r0, r2
 80048b4:	d007      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ba:	4290      	cmp	r0, r2
 80048bc:	d003      	beq.n	80048c6 <TIM_Base_SetConfig+0x2e>
 80048be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80048c2:	4290      	cmp	r0, r2
 80048c4:	d119      	bne.n	80048fa <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80048c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80048cc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ce:	4a23      	ldr	r2, [pc, #140]	; (800495c <TIM_Base_SetConfig+0xc4>)
 80048d0:	4290      	cmp	r0, r2
 80048d2:	d029      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80048d8:	d026      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80048de:	4290      	cmp	r0, r2
 80048e0:	d022      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048e6:	4290      	cmp	r0, r2
 80048e8:	d01e      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ee:	4290      	cmp	r0, r2
 80048f0:	d01a      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80048f6:	4290      	cmp	r0, r2
 80048f8:	d016      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 80048fa:	4a19      	ldr	r2, [pc, #100]	; (8004960 <TIM_Base_SetConfig+0xc8>)
 80048fc:	4290      	cmp	r0, r2
 80048fe:	d013      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004904:	4290      	cmp	r0, r2
 8004906:	d00f      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004908:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800490c:	4290      	cmp	r0, r2
 800490e:	d00b      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004910:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004914:	4290      	cmp	r0, r2
 8004916:	d007      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004918:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800491c:	4290      	cmp	r0, r2
 800491e:	d003      	beq.n	8004928 <TIM_Base_SetConfig+0x90>
 8004920:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004924:	4290      	cmp	r0, r2
 8004926:	d103      	bne.n	8004930 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004928:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004930:	694a      	ldr	r2, [r1, #20]
 8004932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004936:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004938:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800493a:	688b      	ldr	r3, [r1, #8]
 800493c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800493e:	680b      	ldr	r3, [r1, #0]
 8004940:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <TIM_Base_SetConfig+0xc4>)
 8004944:	4298      	cmp	r0, r3
 8004946:	d003      	beq.n	8004950 <TIM_Base_SetConfig+0xb8>
 8004948:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800494c:	4298      	cmp	r0, r3
 800494e:	d101      	bne.n	8004954 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8004950:	690b      	ldr	r3, [r1, #16]
 8004952:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004954:	2301      	movs	r3, #1
 8004956:	6143      	str	r3, [r0, #20]
}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40010000 	.word	0x40010000
 8004960:	40014000 	.word	0x40014000

08004964 <HAL_TIM_Base_Init>:
{
 8004964:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004966:	4604      	mov	r4, r0
 8004968:	b330      	cbz	r0, 80049b8 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800496a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800496e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004972:	b91b      	cbnz	r3, 800497c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004974:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004978:	f7fe fade 	bl	8002f38 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800497c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800497e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004980:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004984:	1d21      	adds	r1, r4, #4
 8004986:	f7ff ff87 	bl	8004898 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800498a:	2301      	movs	r3, #1
 800498c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8004990:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004992:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004996:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800499a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800499e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049aa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80049ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80049b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80049b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80049b8:	2001      	movs	r0, #1
 80049ba:	e7fc      	b.n	80049b6 <HAL_TIM_Base_Init+0x52>

080049bc <HAL_TIM_PWM_Init>:
{
 80049bc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80049be:	4604      	mov	r4, r0
 80049c0:	b330      	cbz	r0, 8004a10 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80049c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80049ca:	b91b      	cbnz	r3, 80049d4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80049cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80049d0:	f7ff ff60 	bl	8004894 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	1d21      	adds	r1, r4, #4
 80049de:	f7ff ff5b 	bl	8004898 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80049e8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80049ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80049f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80049f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a02:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004a0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004a0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004a10:	2001      	movs	r0, #1
 8004a12:	e7fc      	b.n	8004a0e <HAL_TIM_PWM_Init+0x52>

08004a14 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a14:	6a03      	ldr	r3, [r0, #32]
 8004a16:	f023 0310 	bic.w	r3, r3, #16
 8004a1a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004a1c:	6a03      	ldr	r3, [r0, #32]
{
 8004a1e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8004a20:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004a22:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a24:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a26:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a2a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a2e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004a30:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a38:	4d10      	ldr	r5, [pc, #64]	; (8004a7c <TIM_OC2_SetConfig+0x68>)
 8004a3a:	42a8      	cmp	r0, r5
 8004a3c:	d003      	beq.n	8004a46 <TIM_OC2_SetConfig+0x32>
 8004a3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a42:	42a8      	cmp	r0, r5
 8004a44:	d114      	bne.n	8004a70 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a46:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a4c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a50:	4d0a      	ldr	r5, [pc, #40]	; (8004a7c <TIM_OC2_SetConfig+0x68>)
 8004a52:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a58:	d003      	beq.n	8004a62 <TIM_OC2_SetConfig+0x4e>
 8004a5a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a5e:	42a8      	cmp	r0, r5
 8004a60:	d106      	bne.n	8004a70 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a62:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a66:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a6a:	4335      	orrs	r5, r6
 8004a6c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8004a70:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004a72:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004a74:	684a      	ldr	r2, [r1, #4]
 8004a76:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004a78:	6203      	str	r3, [r0, #32]
}
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	40010000 	.word	0x40010000

08004a80 <HAL_TIM_PWM_ConfigChannel>:
{
 8004a80:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004a82:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
{
 8004a88:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8004a8a:	d050      	beq.n	8004b2e <HAL_TIM_PWM_ConfigChannel+0xae>
 8004a8c:	2301      	movs	r3, #1
  switch (Channel)
 8004a8e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8004a90:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004a94:	d03b      	beq.n	8004b0e <HAL_TIM_PWM_ConfigChannel+0x8e>
 8004a96:	d807      	bhi.n	8004aa8 <HAL_TIM_PWM_ConfigChannel+0x28>
 8004a98:	b1c2      	cbz	r2, 8004acc <HAL_TIM_PWM_ConfigChannel+0x4c>
 8004a9a:	2a04      	cmp	r2, #4
 8004a9c:	d027      	beq.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x6e>
 8004a9e:	4618      	mov	r0, r3
  __HAL_UNLOCK(htim);
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004aa6:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8004aa8:	2a0c      	cmp	r2, #12
 8004aaa:	d1f8      	bne.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f7ff fecb 	bl	8004848 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ab2:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ab4:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ab6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004aba:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004abc:	69c3      	ldr	r3, [r0, #28]
 8004abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ac2:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ac4:	69c3      	ldr	r3, [r0, #28]
 8004ac6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004aca:	e02e      	b.n	8004b2a <HAL_TIM_PWM_ConfigChannel+0xaa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004acc:	6800      	ldr	r0, [r0, #0]
 8004ace:	f7ff fe53 	bl	8004778 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad2:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ad4:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ad6:	f043 0308 	orr.w	r3, r3, #8
 8004ada:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004adc:	6983      	ldr	r3, [r0, #24]
 8004ade:	f023 0304 	bic.w	r3, r3, #4
 8004ae2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ae4:	6983      	ldr	r3, [r0, #24]
 8004ae6:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ae8:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004aea:	2000      	movs	r0, #0
      break;
 8004aec:	e7d8      	b.n	8004aa0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aee:	6800      	ldr	r0, [r0, #0]
 8004af0:	f7ff ff90 	bl	8004a14 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af4:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004af6:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004af8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004afc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004afe:	6983      	ldr	r3, [r0, #24]
 8004b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b04:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b06:	6983      	ldr	r3, [r0, #24]
 8004b08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004b0c:	e7ec      	b.n	8004ae8 <HAL_TIM_PWM_ConfigChannel+0x68>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b0e:	6800      	ldr	r0, [r0, #0]
 8004b10:	f7ff fe64 	bl	80047dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b14:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b16:	690a      	ldr	r2, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b1e:	69c3      	ldr	r3, [r0, #28]
 8004b20:	f023 0304 	bic.w	r3, r3, #4
 8004b24:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b26:	69c3      	ldr	r3, [r0, #28]
 8004b28:	4313      	orrs	r3, r2
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b2a:	61c3      	str	r3, [r0, #28]
 8004b2c:	e7dd      	b.n	8004aea <HAL_TIM_PWM_ConfigChannel+0x6a>
  __HAL_LOCK(htim);
 8004b2e:	2002      	movs	r0, #2
 8004b30:	e7b9      	b.n	8004aa6 <HAL_TIM_PWM_ConfigChannel+0x26>

08004b32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b32:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b34:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b36:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b38:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b3c:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8004b40:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b42:	6083      	str	r3, [r0, #8]
}
 8004b44:	bd10      	pop	{r4, pc}

08004b46 <HAL_TIM_ConfigClockSource>:
{
 8004b46:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004b48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
{
 8004b4e:	4604      	mov	r4, r0
 8004b50:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8004b54:	f000 808e 	beq.w	8004c74 <HAL_TIM_ConfigClockSource+0x12e>
 8004b58:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004b5e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004b62:	6800      	ldr	r0, [r0, #0]
 8004b64:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004b6e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004b70:	680b      	ldr	r3, [r1, #0]
 8004b72:	2b60      	cmp	r3, #96	; 0x60
 8004b74:	d04f      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0xd0>
 8004b76:	d832      	bhi.n	8004bde <HAL_TIM_ConfigClockSource+0x98>
 8004b78:	2b40      	cmp	r3, #64	; 0x40
 8004b7a:	d064      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x100>
 8004b7c:	d816      	bhi.n	8004bac <HAL_TIM_ConfigClockSource+0x66>
 8004b7e:	2b20      	cmp	r3, #32
 8004b80:	d00d      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x58>
 8004b82:	d80a      	bhi.n	8004b9a <HAL_TIM_ConfigClockSource+0x54>
 8004b84:	f033 0110 	bics.w	r1, r3, #16
 8004b88:	d009      	beq.n	8004b9e <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004b90:	2300      	movs	r3, #0
 8004b92:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004b96:	4610      	mov	r0, r2
 8004b98:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8004b9a:	2b30      	cmp	r3, #48	; 0x30
 8004b9c:	d1f5      	bne.n	8004b8a <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8004b9e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ba0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f043 0307 	orr.w	r3, r3, #7
 8004baa:	e028      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8004bac:	2b50      	cmp	r3, #80	; 0x50
 8004bae:	d1ec      	bne.n	8004b8a <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb0:	684a      	ldr	r2, [r1, #4]
 8004bb2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004bb4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb6:	6a03      	ldr	r3, [r0, #32]
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bc8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004bcc:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004bce:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004bd0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004bd2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bd8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004bdc:	e00f      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	d00d      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xba>
 8004be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004be8:	d00c      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0xbe>
 8004bea:	2b70      	cmp	r3, #112	; 0x70
 8004bec:	d1cd      	bne.n	8004b8a <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8004bee:	68cb      	ldr	r3, [r1, #12]
 8004bf0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004bf4:	f7ff ff9d 	bl	8004b32 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bf8:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 8004bfe:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2200      	movs	r2, #0
 8004c02:	e7c2      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8004c04:	68cb      	ldr	r3, [r1, #12]
 8004c06:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8004c0a:	f7ff ff92 	bl	8004b32 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c0e:	6883      	ldr	r3, [r0, #8]
 8004c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c14:	e7f3      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xb8>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c16:	6a03      	ldr	r3, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c18:	684d      	ldr	r5, [r1, #4]
 8004c1a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c1c:	f023 0310 	bic.w	r3, r3, #16
 8004c20:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c22:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8004c24:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c26:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c2e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c32:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004c36:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c38:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004c3a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c40:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004c44:	e7db      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xb8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c46:	684a      	ldr	r2, [r1, #4]
 8004c48:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004c4a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c4c:	6a03      	ldr	r3, [r0, #32]
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c54:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c56:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c5e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004c62:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004c64:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c66:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004c68:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004c72:	e7c4      	b.n	8004bfe <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 8004c74:	461a      	mov	r2, r3
 8004c76:	e78e      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x50>

08004c78 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c78:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c7a:	f001 011f 	and.w	r1, r1, #31
{
 8004c7e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c80:	2401      	movs	r4, #1
 8004c82:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004c84:	ea23 0304 	bic.w	r3, r3, r4
 8004c88:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c8a:	6a03      	ldr	r3, [r0, #32]
 8004c8c:	408a      	lsls	r2, r1
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	6202      	str	r2, [r0, #32]
}
 8004c92:	bd10      	pop	{r4, pc}

08004c94 <HAL_TIM_OC_Start>:
{
 8004c94:	b508      	push	{r3, lr}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c96:	b929      	cbnz	r1, 8004ca4 <HAL_TIM_OC_Start+0x10>
 8004c98:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d018      	beq.n	8004cd2 <HAL_TIM_OC_Start+0x3e>
    return HAL_ERROR;
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	e02c      	b.n	8004cfe <HAL_TIM_OC_Start+0x6a>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ca4:	2904      	cmp	r1, #4
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_TIM_OC_Start+0x30>
 8004ca8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 8004cac:	3b01      	subs	r3, #1
 8004cae:	bf18      	it	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f4      	bne.n	8004ca0 <HAL_TIM_OC_Start+0xc>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cb6:	2904      	cmp	r1, #4
 8004cb8:	f04f 0302 	mov.w	r3, #2
 8004cbc:	d120      	bne.n	8004d00 <HAL_TIM_OC_Start+0x6c>
 8004cbe:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8004cc2:	e009      	b.n	8004cd8 <HAL_TIM_OC_Start+0x44>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cc4:	2908      	cmp	r1, #8
 8004cc6:	bf0c      	ite	eq
 8004cc8:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 8004ccc:	f890 3041 	ldrbne.w	r3, [r0, #65]	; 0x41
 8004cd0:	e7ec      	b.n	8004cac <HAL_TIM_OC_Start+0x18>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cd8:	6800      	ldr	r0, [r0, #0]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f7ff ffcc 	bl	8004c78 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ce0:	4a1c      	ldr	r2, [pc, #112]	; (8004d54 <HAL_TIM_OC_Start+0xc0>)
 8004ce2:	4290      	cmp	r0, r2
 8004ce4:	d013      	beq.n	8004d0e <HAL_TIM_OC_Start+0x7a>
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <HAL_TIM_OC_Start+0xc4>)
 8004ce8:	4298      	cmp	r0, r3
 8004cea:	d010      	beq.n	8004d0e <HAL_TIM_OC_Start+0x7a>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004cf0:	d114      	bne.n	8004d1c <HAL_TIM_OC_Start+0x88>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf2:	6883      	ldr	r3, [r0, #8]
 8004cf4:	f003 0307 	and.w	r3, r3, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf8:	2b06      	cmp	r3, #6
 8004cfa:	d126      	bne.n	8004d4a <HAL_TIM_OC_Start+0xb6>
  return HAL_OK;
 8004cfc:	2000      	movs	r0, #0
}
 8004cfe:	bd08      	pop	{r3, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d00:	2908      	cmp	r1, #8
 8004d02:	bf0c      	ite	eq
 8004d04:	f880 3040 	strbeq.w	r3, [r0, #64]	; 0x40
 8004d08:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
 8004d0c:	e7e4      	b.n	8004cd8 <HAL_TIM_OC_Start+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8004d0e:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d10:	4290      	cmp	r0, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8004d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d16:	6443      	str	r3, [r0, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d18:	d0eb      	beq.n	8004cf2 <HAL_TIM_OC_Start+0x5e>
 8004d1a:	e7e7      	b.n	8004cec <HAL_TIM_OC_Start+0x58>
 8004d1c:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <HAL_TIM_OC_Start+0xc8>)
 8004d1e:	4298      	cmp	r0, r3
 8004d20:	d0e7      	beq.n	8004cf2 <HAL_TIM_OC_Start+0x5e>
 8004d22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d26:	4298      	cmp	r0, r3
 8004d28:	d0e3      	beq.n	8004cf2 <HAL_TIM_OC_Start+0x5e>
 8004d2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d2e:	4298      	cmp	r0, r3
 8004d30:	d0df      	beq.n	8004cf2 <HAL_TIM_OC_Start+0x5e>
 8004d32:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 8004d36:	4298      	cmp	r0, r3
 8004d38:	d0db      	beq.n	8004cf2 <HAL_TIM_OC_Start+0x5e>
 8004d3a:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8004d3e:	4298      	cmp	r0, r3
 8004d40:	d0d7      	beq.n	8004cf2 <HAL_TIM_OC_Start+0x5e>
 8004d42:	f5a3 3394 	sub.w	r3, r3, #75776	; 0x12800
 8004d46:	4298      	cmp	r0, r3
 8004d48:	d0d3      	beq.n	8004cf2 <HAL_TIM_OC_Start+0x5e>
    __HAL_TIM_ENABLE(htim);
 8004d4a:	6803      	ldr	r3, [r0, #0]
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6003      	str	r3, [r0, #0]
 8004d52:	e7d3      	b.n	8004cfc <HAL_TIM_OC_Start+0x68>
 8004d54:	40010000 	.word	0x40010000
 8004d58:	40010400 	.word	0x40010400
 8004d5c:	40000400 	.word	0x40000400

08004d60 <HAL_TIM_PWM_Start>:
 8004d60:	f7ff bf98 	b.w	8004c94 <HAL_TIM_OC_Start>

08004d64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d64:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	f04f 0302 	mov.w	r3, #2
 8004d70:	d032      	beq.n	8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d76:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d78:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8004d7a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d7e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d82:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d84:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d86:	4c15      	ldr	r4, [pc, #84]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8004d88:	42a3      	cmp	r3, r4
 8004d8a:	d01a      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d017      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004d92:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8004d96:	42a3      	cmp	r3, r4
 8004d98:	d013      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004d9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004d9e:	42a3      	cmp	r3, r4
 8004da0:	d00f      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004da2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	d00b      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004daa:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8004dae:	42a3      	cmp	r3, r4
 8004db0:	d007      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004db2:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8004db6:	42a3      	cmp	r3, r4
 8004db8:	d003      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004dba:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	d104      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc2:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dc8:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004dd8:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004dda:	bd30      	pop	{r4, r5, pc}
 8004ddc:	40010000 	.word	0x40010000

08004de0 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de0:	6802      	ldr	r2, [r0, #0]
 8004de2:	68c1      	ldr	r1, [r0, #12]
 8004de4:	6913      	ldr	r3, [r2, #16]
 8004de6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dea:	430b      	orrs	r3, r1
{
 8004dec:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dee:	6113      	str	r3, [r2, #16]
{
 8004df0:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df2:	6883      	ldr	r3, [r0, #8]
 8004df4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004df6:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df8:	4303      	orrs	r3, r0
 8004dfa:	6968      	ldr	r0, [r5, #20]
 8004dfc:	4303      	orrs	r3, r0
 8004dfe:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004e00:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004e04:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e08:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0e:	6953      	ldr	r3, [r2, #20]
 8004e10:	69a9      	ldr	r1, [r5, #24]
 8004e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e16:	430b      	orrs	r3, r1
 8004e18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	; (8004e98 <UART_SetConfig+0xb8>)
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d003      	beq.n	8004e28 <UART_SetConfig+0x48>
 8004e20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d123      	bne.n	8004e70 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e28:	f7ff fc96 	bl	8004758 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e2c:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e2e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e34:	e9d5 4600 	ldrd	r4, r6, [r5]
 8004e38:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3c:	d11b      	bne.n	8004e76 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e3e:	19b2      	adds	r2, r6, r6
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	415b      	adcs	r3, r3
 8004e46:	f7fb ff1f 	bl	8000c88 <__aeabi_uldivmod>
 8004e4a:	2264      	movs	r2, #100	; 0x64
 8004e4c:	fbb0 f1f2 	udiv	r1, r0, r2
 8004e50:	fb02 0311 	mls	r3, r2, r1, r0
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	3332      	adds	r3, #50	; 0x32
 8004e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e5c:	f003 0207 	and.w	r2, r3, #7
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004e66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e6a:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e6c:	60a3      	str	r3, [r4, #8]
  }
}
 8004e6e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7ff fc62 	bl	8004738 <HAL_RCC_GetPCLK1Freq>
 8004e74:	e7da      	b.n	8004e2c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e76:	00b2      	lsls	r2, r6, #2
 8004e78:	0fb3      	lsrs	r3, r6, #30
 8004e7a:	f7fb ff05 	bl	8000c88 <__aeabi_uldivmod>
 8004e7e:	2264      	movs	r2, #100	; 0x64
 8004e80:	fbb0 f1f2 	udiv	r1, r0, r2
 8004e84:	fb02 0311 	mls	r3, r2, r1, r0
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	3332      	adds	r3, #50	; 0x32
 8004e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e90:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8004e94:	e7ea      	b.n	8004e6c <UART_SetConfig+0x8c>
 8004e96:	bf00      	nop
 8004e98:	40011000 	.word	0x40011000

08004e9c <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	460e      	mov	r6, r1
 8004ea2:	4617      	mov	r7, r2
 8004ea4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	6813      	ldr	r3, [r2, #0]
 8004eaa:	ea36 0303 	bics.w	r3, r6, r3
 8004eae:	d101      	bne.n	8004eb4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	e028      	b.n	8004f06 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8004eb4:	1c6b      	adds	r3, r5, #1
 8004eb6:	d0f7      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eb8:	b125      	cbz	r5, 8004ec4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8004eba:	f7fe f9a3 	bl	8003204 <HAL_GetTick>
 8004ebe:	1bc0      	subs	r0, r0, r7
 8004ec0:	4285      	cmp	r5, r0
 8004ec2:	d2f0      	bcs.n	8004ea6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ec4:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	f102 030c 	add.w	r3, r2, #12
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	320c      	adds	r2, #12
 8004ed4:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8004ed8:	6821      	ldr	r1, [r4, #0]
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d1f2      	bne.n	8004ec4 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	f101 0314 	add.w	r3, r1, #20
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	f101 0014 	add.w	r0, r1, #20
 8004eee:	e840 3200 	strex	r2, r3, [r0]
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d1f3      	bne.n	8004ede <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8004ef6:	2320      	movs	r3, #32
 8004ef8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8004efc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004f00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004f04:	2003      	movs	r0, #3
}
 8004f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004f08 <HAL_UART_Init>:
{
 8004f08:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	b340      	cbz	r0, 8004f60 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004f0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f16:	b91b      	cbnz	r3, 8004f20 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004f18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004f1c:	f7fe f84a 	bl	8002fb4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004f20:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004f22:	2324      	movs	r3, #36	; 0x24
 8004f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004f28:	68d3      	ldr	r3, [r2, #12]
 8004f2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f2e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004f30:	4620      	mov	r0, r4
 8004f32:	f7ff ff55 	bl	8004de0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f46:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f4e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f50:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004f52:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f54:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004f5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004f60:	2001      	movs	r0, #1
 8004f62:	e7fc      	b.n	8004f5e <HAL_UART_Init+0x56>

08004f64 <HAL_UART_Transmit>:
{
 8004f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f66:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004f68:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8004f6c:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8004f6e:	2a20      	cmp	r2, #32
{
 8004f70:	4604      	mov	r4, r0
 8004f72:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8004f74:	d149      	bne.n	800500a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8004f76:	2900      	cmp	r1, #0
 8004f78:	d045      	beq.n	8005006 <HAL_UART_Transmit+0xa2>
 8004f7a:	2f00      	cmp	r7, #0
 8004f7c:	d043      	beq.n	8005006 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8004f7e:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004f82:	2a01      	cmp	r2, #1
 8004f84:	d041      	beq.n	800500a <HAL_UART_Transmit+0xa6>
 8004f86:	2201      	movs	r2, #1
 8004f88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f8e:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f90:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f92:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004f96:	f7fe f935 	bl	8003204 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f9a:	68a1      	ldr	r1, [r4, #8]
 8004f9c:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8004f9e:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004fa4:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8004fa6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fa8:	d103      	bne.n	8004fb2 <HAL_UART_Transmit+0x4e>
 8004faa:	6921      	ldr	r1, [r4, #16]
 8004fac:	b909      	cbnz	r1, 8004fb2 <HAL_UART_Transmit+0x4e>
 8004fae:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004fb0:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004fb8:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004fba:	b289      	uxth	r1, r1
 8004fbc:	b941      	cbnz	r1, 8004fd0 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fbe:	2140      	movs	r1, #64	; 0x40
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f7ff ff6b 	bl	8004e9c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004fc6:	b960      	cbnz	r0, 8004fe2 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8004fc8:	2320      	movs	r3, #32
 8004fca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004fce:	e009      	b.n	8004fe4 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	e9cd 2300 	strd	r2, r3, [sp]
 8004fd8:	f7ff ff60 	bl	8004e9c <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004fdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fe0:	b110      	cbz	r0, 8004fe8 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8004fe2:	2003      	movs	r0, #3
}
 8004fe4:	b003      	add	sp, #12
 8004fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe8:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8004fea:	b94e      	cbnz	r6, 8005000 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fec:	f835 1b02 	ldrh.w	r1, [r5], #2
 8004ff0:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ff4:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8004ff6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8004ff8:	3901      	subs	r1, #1
 8004ffa:	b289      	uxth	r1, r1
 8004ffc:	84e1      	strh	r1, [r4, #38]	; 0x26
 8004ffe:	e7db      	b.n	8004fb8 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005000:	f816 1b01 	ldrb.w	r1, [r6], #1
 8005004:	e7f6      	b.n	8004ff4 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005006:	2001      	movs	r0, #1
 8005008:	e7ec      	b.n	8004fe4 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800500a:	2002      	movs	r0, #2
 800500c:	e7ea      	b.n	8004fe4 <HAL_UART_Transmit+0x80>
	...

08005010 <_ZN4blib6AnalogD1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
    {
        sampling();
    }

    Analog::~Analog()
 8005010:	b510      	push	{r4, lr}
 8005012:	4b04      	ldr	r3, [pc, #16]	; (8005024 <_ZN4blib6AnalogD1Ev+0x14>)
 8005014:	6003      	str	r3, [r0, #0]
 8005016:	4604      	mov	r4, r0
    {
        HAL_ADC_Stop_DMA(mHadc);
 8005018:	6980      	ldr	r0, [r0, #24]
 800501a:	f7fe fa61 	bl	80034e0 <HAL_ADC_Stop_DMA>
    }
 800501e:	4620      	mov	r0, r4
 8005020:	bd10      	pop	{r4, pc}
 8005022:	bf00      	nop
 8005024:	0800b418 	.word	0x0800b418

08005028 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8005028:	b510      	push	{r4, lr}
 800502a:	4604      	mov	r4, r0
    }
 800502c:	f7ff fff0 	bl	8005010 <_ZN4blib6AnalogD1Ev>
 8005030:	4620      	mov	r0, r4
 8005032:	2148      	movs	r1, #72	; 0x48
 8005034:	f000 fea8 	bl	8005d88 <_ZdlPvj>
 8005038:	4620      	mov	r0, r4
 800503a:	bd10      	pop	{r4, pc}

0800503c <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 800503c:	1d01      	adds	r1, r0, #4
 800503e:	2205      	movs	r2, #5
 8005040:	6980      	ldr	r0, [r0, #24]
 8005042:	f7fe b99f 	b.w	8003384 <HAL_ADC_Start_DMA>
	...

08005048 <_ZN4blib6AnalogC1Ev>:
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8005048:	4b09      	ldr	r3, [pc, #36]	; (8005070 <_ZN4blib6AnalogC1Ev+0x28>)
 800504a:	b510      	push	{r4, lr}
 800504c:	2214      	movs	r2, #20
 800504e:	4604      	mov	r4, r0
 8005050:	2100      	movs	r1, #0
 8005052:	f840 3b04 	str.w	r3, [r0], #4
 8005056:	f002 f958 	bl	800730a <memset>
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <_ZN4blib6AnalogC1Ev+0x2c>)
 800505c:	61a3      	str	r3, [r4, #24]
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <_ZN4blib6AnalogC1Ev+0x30>)
 8005060:	61e3      	str	r3, [r4, #28]
 8005062:	2300      	movs	r3, #0
        sampling();
 8005064:	4620      	mov	r0, r4
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8005066:	6463      	str	r3, [r4, #68]	; 0x44
        sampling();
 8005068:	f7ff ffe8 	bl	800503c <_ZN4blib6Analog8samplingEv>
    }
 800506c:	4620      	mov	r0, r4
 800506e:	bd10      	pop	{r4, pc}
 8005070:	0800b418 	.word	0x0800b418
 8005074:	20000268 	.word	0x20000268
 8005078:	200002b0 	.word	0x200002b0

0800507c <_ZNK4blib6Analog15getSolarVoltageEv>:
    }

    float Analog::getSolarVoltage() const
    {
        return mVin;
    }
 800507c:	ed90 0a08 	vldr	s0, [r0, #32]
 8005080:	4770      	bx	lr

08005082 <_ZNK4blib6Analog15getSolarCurrentEv>:
    float Analog::getSolarCurrent() const
    {
        return mIin;
    }
 8005082:	ed90 0a09 	vldr	s0, [r0, #36]	; 0x24
 8005086:	4770      	bx	lr

08005088 <_ZNK4blib6Analog7getVoutEv>:
    float Analog::getVout() const
    {
        return mVout;
    }
 8005088:	ed90 0a0a 	vldr	s0, [r0, #40]	; 0x28
 800508c:	4770      	bx	lr

0800508e <_ZNK4blib6Analog7getIoutEv>:
    float Analog::getIout() const
    {
        return mIout;
    }
 800508e:	ed90 0a0b 	vldr	s0, [r0, #44]	; 0x2c
 8005092:	4770      	bx	lr

08005094 <_ZNK4blib6Analog7getTempEv>:
    float Analog::getTemp() const
    {
        return mTemp;
    }
 8005094:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8005098:	4770      	bx	lr
 800509a:	0000      	movs	r0, r0
 800509c:	0000      	movs	r0, r0
	...

080050a0 <_ZN4blib6Analog14calTemperatureEm>:
    {
        const double A = 0.003354016f;
        const double B = 0.0002569850f;
        const double C = 0.000002620131f;

        float voltage = ((float) adcValue / 4095) * 3.3;
 80050a0:	ee07 1a90 	vmov	s15, r1
 80050a4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005170 <_ZN4blib6Analog14calTemperatureEm+0xd0>
 80050a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    {
 80050ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        float voltage = ((float) adcValue / 4095) * 3.3;
 80050ae:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80050b2:	ee17 0a90 	vmov	r0, s15
 80050b6:	f7fb fa47 	bl	8000548 <__aeabi_f2d>
 80050ba:	a325      	add	r3, pc, #148	; (adr r3, 8005150 <_ZN4blib6Analog14calTemperatureEm+0xb0>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb fa9a 	bl	80005f8 <__aeabi_dmul>
 80050c4:	f7fb fd90 	bl	8000be8 <__aeabi_d2f>
        float resistance = (3.3f * 10000.0f / voltage) - 10000.0f;
 80050c8:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8005174 <_ZN4blib6Analog14calTemperatureEm+0xd4>
 80050cc:	ee07 0a10 	vmov	s14, r0
 80050d0:	ee87 7a87 	vdiv.f32	s14, s15, s14

        float logResistance = log(resistance);
 80050d4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005178 <_ZN4blib6Analog14calTemperatureEm+0xd8>
 80050d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050dc:	ee17 0a90 	vmov	r0, s15
 80050e0:	f7fb fa32 	bl	8000548 <__aeabi_f2d>
 80050e4:	ec41 0b10 	vmov	d0, r0, r1
 80050e8:	f000 fe7a 	bl	8005de0 <log>
 80050ec:	ec51 0b10 	vmov	r0, r1, d0
 80050f0:	f7fb fd7a 	bl	8000be8 <__aeabi_d2f>
        float reciprocalTemperature = A + (B * logResistance)
 80050f4:	f7fb fa28 	bl	8000548 <__aeabi_f2d>
                + (C * logResistance * logResistance * logResistance);
 80050f8:	a317      	add	r3, pc, #92	; (adr r3, 8005158 <_ZN4blib6Analog14calTemperatureEm+0xb8>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
        float reciprocalTemperature = A + (B * logResistance)
 80050fe:	4604      	mov	r4, r0
 8005100:	460d      	mov	r5, r1
                + (C * logResistance * logResistance * logResistance);
 8005102:	f7fb fa79 	bl	80005f8 <__aeabi_dmul>
 8005106:	4622      	mov	r2, r4
 8005108:	462b      	mov	r3, r5
 800510a:	f7fb fa75 	bl	80005f8 <__aeabi_dmul>
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	f7fb fa71 	bl	80005f8 <__aeabi_dmul>
        float reciprocalTemperature = A + (B * logResistance)
 8005116:	a312      	add	r3, pc, #72	; (adr r3, 8005160 <_ZN4blib6Analog14calTemperatureEm+0xc0>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
                + (C * logResistance * logResistance * logResistance);
 800511c:	4606      	mov	r6, r0
 800511e:	460f      	mov	r7, r1
        float reciprocalTemperature = A + (B * logResistance)
 8005120:	4620      	mov	r0, r4
 8005122:	4629      	mov	r1, r5
 8005124:	f7fb fa68 	bl	80005f8 <__aeabi_dmul>
 8005128:	a30f      	add	r3, pc, #60	; (adr r3, 8005168 <_ZN4blib6Analog14calTemperatureEm+0xc8>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb f8ad 	bl	800028c <__adddf3>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
                + (C * logResistance * logResistance * logResistance);
 8005136:	4630      	mov	r0, r6
 8005138:	4639      	mov	r1, r7
 800513a:	f7fb f8a7 	bl	800028c <__adddf3>
        float reciprocalTemperature = A + (B * logResistance)
 800513e:	f7fb fd53 	bl	8000be8 <__aeabi_d2f>

        float temperature = 1.0f / reciprocalTemperature;
        return temperature;
    }
 8005142:	ee07 0a90 	vmov	s15, r0
 8005146:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800514a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800514e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005150:	66666666 	.word	0x66666666
 8005154:	400a6666 	.word	0x400a6666
 8005158:	40000000 	.word	0x40000000
 800515c:	3ec5fab0 	.word	0x3ec5fab0
 8005160:	20000000 	.word	0x20000000
 8005164:	3f30d77e 	.word	0x3f30d77e
 8005168:	a0000000 	.word	0xa0000000
 800516c:	3f6b79e1 	.word	0x3f6b79e1
 8005170:	457ff000 	.word	0x457ff000
 8005174:	4700e800 	.word	0x4700e800
 8005178:	461c4000 	.word	0x461c4000
 800517c:	00000000 	.word	0x00000000

08005180 <_ZN4blib6Analog15calSolarVoltageEm>:
    {
 8005180:	b508      	push	{r3, lr}
 8005182:	ed2d 8b02 	vpush	{d8}
 8005186:	ee08 1a10 	vmov	s16, r1
        return Constant::getInstance().k_voltage_divider_input * ((float) adcValue / 4095) * 3.3;
 800518a:	f7fd f925 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800518e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8005192:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80051d0 <_ZN4blib6Analog15calSolarVoltageEm+0x50>
 8005196:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800519a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800519e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a2:	ee17 0a90 	vmov	r0, s15
 80051a6:	f7fb f9cf 	bl	8000548 <__aeabi_f2d>
 80051aa:	a307      	add	r3, pc, #28	; (adr r3, 80051c8 <_ZN4blib6Analog15calSolarVoltageEm+0x48>)
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f7fb fa22 	bl	80005f8 <__aeabi_dmul>
 80051b4:	f7fb fd18 	bl	8000be8 <__aeabi_d2f>
    }
 80051b8:	ecbd 8b02 	vpop	{d8}
 80051bc:	ee00 0a10 	vmov	s0, r0
 80051c0:	bd08      	pop	{r3, pc}
 80051c2:	bf00      	nop
 80051c4:	f3af 8000 	nop.w
 80051c8:	66666666 	.word	0x66666666
 80051cc:	400a6666 	.word	0x400a6666
 80051d0:	457ff000 	.word	0x457ff000
 80051d4:	00000000 	.word	0x00000000

080051d8 <_ZN4blib6Analog15calSolarCurrentEm>:
    {
 80051d8:	b508      	push	{r3, lr}
 80051da:	ed2d 8b02 	vpush	{d8}
 80051de:	ee08 1a10 	vmov	s16, r1
        float voltage = Constant::getInstance().k_current_divider_input * ((float) adcValue / 4095)
 80051e2:	f7fd f8f9 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80051e6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005240 <_ZN4blib6Analog15calSolarCurrentEm+0x68>
 80051ea:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 80051ee:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80051f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051f6:	ee17 0a90 	vmov	r0, s15
 80051fa:	f7fb f9a5 	bl	8000548 <__aeabi_f2d>
                * 3.3;
 80051fe:	a30c      	add	r3, pc, #48	; (adr r3, 8005230 <_ZN4blib6Analog15calSolarCurrentEm+0x58>)
 8005200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005204:	f7fb f9f8 	bl	80005f8 <__aeabi_dmul>
 8005208:	f7fb fcee 	bl	8000be8 <__aeabi_d2f>
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 800520c:	f7fb f99c 	bl	8000548 <__aeabi_f2d>
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <_ZN4blib6Analog15calSolarCurrentEm+0x6c>)
 8005212:	2200      	movs	r2, #0
 8005214:	f7fb f838 	bl	8000288 <__aeabi_dsub>
 8005218:	a307      	add	r3, pc, #28	; (adr r3, 8005238 <_ZN4blib6Analog15calSolarCurrentEm+0x60>)
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f7fb fb15 	bl	800084c <__aeabi_ddiv>
 8005222:	f7fb fce1 	bl	8000be8 <__aeabi_d2f>
    }
 8005226:	ecbd 8b02 	vpop	{d8}
 800522a:	ee00 0a10 	vmov	s0, r0
 800522e:	bd08      	pop	{r3, pc}
 8005230:	66666666 	.word	0x66666666
 8005234:	400a6666 	.word	0x400a6666
 8005238:	a0000000 	.word	0xa0000000
 800523c:	3fb99999 	.word	0x3fb99999
 8005240:	457ff000 	.word	0x457ff000
 8005244:	40040000 	.word	0x40040000

08005248 <_ZN4blib6Analog17calBatteryVoltageEm>:
    {
 8005248:	b508      	push	{r3, lr}
 800524a:	ed2d 8b02 	vpush	{d8}
 800524e:	ee08 1a10 	vmov	s16, r1
        return Constant::getInstance().k_voltage_divider_output * ((float) adcValue / 4095) * 3.3;
 8005252:	f7fd f8c1 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005256:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800525a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005298 <_ZN4blib6Analog17calBatteryVoltageEm+0x50>
 800525e:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005262:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	ee17 0a90 	vmov	r0, s15
 800526e:	f7fb f96b 	bl	8000548 <__aeabi_f2d>
 8005272:	a307      	add	r3, pc, #28	; (adr r3, 8005290 <_ZN4blib6Analog17calBatteryVoltageEm+0x48>)
 8005274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005278:	f7fb f9be 	bl	80005f8 <__aeabi_dmul>
 800527c:	f7fb fcb4 	bl	8000be8 <__aeabi_d2f>
    }
 8005280:	ecbd 8b02 	vpop	{d8}
 8005284:	ee00 0a10 	vmov	s0, r0
 8005288:	bd08      	pop	{r3, pc}
 800528a:	bf00      	nop
 800528c:	f3af 8000 	nop.w
 8005290:	66666666 	.word	0x66666666
 8005294:	400a6666 	.word	0x400a6666
 8005298:	457ff000 	.word	0x457ff000

0800529c <_ZN4blib6Analog10readAnalogEv>:
    {
 800529c:	b510      	push	{r4, lr}
        mVin = calSolarVoltage(mAdcValues[2]);
 800529e:	68c1      	ldr	r1, [r0, #12]
    {
 80052a0:	ed2d 8b04 	vpush	{d8-d9}
 80052a4:	4604      	mov	r4, r0
        mVin = calSolarVoltage(mAdcValues[2]);
 80052a6:	f7ff ff6b 	bl	8005180 <_ZN4blib6Analog15calSolarVoltageEm>
        mIin = calSolarCurrent(mAdcValues[2]);
 80052aa:	68e1      	ldr	r1, [r4, #12]
        mVin = calSolarVoltage(mAdcValues[2]);
 80052ac:	ed84 0a08 	vstr	s0, [r4, #32]
        mIin = calSolarCurrent(mAdcValues[2]);
 80052b0:	4620      	mov	r0, r4
 80052b2:	f7ff ff91 	bl	80051d8 <_ZN4blib6Analog15calSolarCurrentEm>
        mVout = calBatteryVoltage(mAdcValues[4]);
 80052b6:	6961      	ldr	r1, [r4, #20]
        mIin = calSolarCurrent(mAdcValues[2]);
 80052b8:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        mVout = calBatteryVoltage(mAdcValues[4]);
 80052bc:	4620      	mov	r0, r4
 80052be:	f7ff ffc3 	bl	8005248 <_ZN4blib6Analog17calBatteryVoltageEm>
        mIout = calBatteryCurrent(mAdcValues[0]);
 80052c2:	6861      	ldr	r1, [r4, #4]
        mVout = calBatteryVoltage(mAdcValues[4]);
 80052c4:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
        mIout = calBatteryCurrent(mAdcValues[0]);
 80052c8:	4620      	mov	r0, r4
 80052ca:	f7ff ff85 	bl	80051d8 <_ZN4blib6Analog15calSolarCurrentEm>
        mTemp = calTemperature(mAdcValues[1]);
 80052ce:	68a1      	ldr	r1, [r4, #8]
        mIout = calBatteryCurrent(mAdcValues[0]);
 80052d0:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
        mTemp = calTemperature(mAdcValues[1]);
 80052d4:	4620      	mov	r0, r4
        mIout = calBatteryCurrent(mAdcValues[0]);
 80052d6:	eeb0 8a40 	vmov.f32	s16, s0
        mTemp = calTemperature(mAdcValues[1]);
 80052da:	f7ff fee1 	bl	80050a0 <_ZN4blib6Analog14calTemperatureEm>
        if (mVin <= 3 && mVout < 3)
 80052de:	edd4 7a08 	vldr	s15, [r4, #32]
 80052e2:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
        mTemp = calTemperature(mAdcValues[1]);
 80052e6:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
        if (mVin <= 3 && mVout < 3)
 80052ea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80052ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052f6:	d837      	bhi.n	8005368 <_ZN4blib6Analog10readAnalogEv+0xcc>
 80052f8:	eef4 8ac7 	vcmpe.f32	s17, s14
 80052fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005300:	d532      	bpl.n	8005368 <_ZN4blib6Analog10readAnalogEv+0xcc>
            mInputSource = PowerSrc::USB_PORT;
 8005302:	2300      	movs	r3, #0
            mInputSource = PowerSrc::BATTERY;
 8005304:	6463      	str	r3, [r4, #68]	; 0x44
        mPin = mVin * mIin;
 8005306:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
        mOutputDeviation = (mVout / Constant::getInstance().k_voltage_battery_max) * 100.0f;
 800530a:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 800537c <_ZN4blib6Analog10readAnalogEv+0xe0>
        mPin = mVin * mIin;
 800530e:	ee27 7a27 	vmul.f32	s14, s14, s15
        mPout = mVin * mIout;    // Cong suat ra tinh bang gia tri do duoc cua cam bien
 8005312:	ee28 8a27 	vmul.f32	s16, s16, s15
        mPin = mVin * mIin;
 8005316:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
        mPout = mVin * mIout;    // Cong suat ra tinh bang gia tri do duoc cua cam bien
 800531a:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
        mOutputDeviation = (mVout / Constant::getInstance().k_voltage_battery_max) * 100.0f;
 800531e:	f7fd f85b 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005322:	ed90 7a01 	vldr	s14, [r0, #4]
 8005326:	eec8 7a87 	vdiv.f32	s15, s17, s14
        mBatteryPercent = ((mVout - Constant::getInstance().k_voltage_battery_min)
 800532a:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
        mOutputDeviation = (mVout / Constant::getInstance().k_voltage_battery_max) * 100.0f;
 800532e:	ee67 7a89 	vmul.f32	s15, s15, s18
 8005332:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
        mBatteryPercent = ((mVout - Constant::getInstance().k_voltage_battery_min)
 8005336:	f7fd f84f 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800533a:	edd0 7a02 	vldr	s15, [r0, #8]
 800533e:	ee78 8ae7 	vsub.f32	s17, s17, s15
                / (Constant::getInstance().k_voltage_battery_max
 8005342:	f7fd f849 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005346:	ed90 8a01 	vldr	s16, [r0, #4]
                        - Constant::getInstance().k_voltage_battery_min)) * 100;
 800534a:	f7fd f845 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800534e:	edd0 7a02 	vldr	s15, [r0, #8]
 8005352:	ee38 7a67 	vsub.f32	s14, s16, s15
                / (Constant::getInstance().k_voltage_battery_max
 8005356:	eec8 7a87 	vdiv.f32	s15, s17, s14
                        - Constant::getInstance().k_voltage_battery_min)) * 100;
 800535a:	ee67 7a89 	vmul.f32	s15, s15, s18
    }
 800535e:	ecbd 8b04 	vpop	{d8-d9}
        mBatteryPercent = ((mVout - Constant::getInstance().k_voltage_battery_min)
 8005362:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    }
 8005366:	bd10      	pop	{r4, pc}
        else if (mVin > mVout)
 8005368:	eef4 7ae8 	vcmpe.f32	s15, s17
 800536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005370:	dd01      	ble.n	8005376 <_ZN4blib6Analog10readAnalogEv+0xda>
            mInputSource = PowerSrc::SOLAR;
 8005372:	2301      	movs	r3, #1
 8005374:	e7c6      	b.n	8005304 <_ZN4blib6Analog10readAnalogEv+0x68>
        else if (mVin < mVout)
 8005376:	d5c6      	bpl.n	8005306 <_ZN4blib6Analog10readAnalogEv+0x6a>
            mInputSource = PowerSrc::BATTERY;
 8005378:	2302      	movs	r3, #2
 800537a:	e7c3      	b.n	8005304 <_ZN4blib6Analog10readAnalogEv+0x68>
 800537c:	42c80000 	.word	0x42c80000

08005380 <_ZN4blib6ButtonD1Ev>:

    }
    Button::~Button()
    {

    }
 8005380:	4770      	bx	lr

08005382 <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 8005382:	b510      	push	{r4, lr}
    }
 8005384:	2108      	movs	r1, #8
    Button::~Button()
 8005386:	4604      	mov	r4, r0
    }
 8005388:	f000 fcfe 	bl	8005d88 <_ZdlPvj>
 800538c:	4620      	mov	r0, r4
 800538e:	bd10      	pop	{r4, pc}

08005390 <_ZN4blib6ButtonC1Ev>:
    Button::Button()
 8005390:	4b01      	ldr	r3, [pc, #4]	; (8005398 <_ZN4blib6ButtonC1Ev+0x8>)
 8005392:	6003      	str	r3, [r0, #0]
    }
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	0800b428 	.word	0x0800b428

0800539c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
        mLatestPressedButton = button;
 800539c:	6041      	str	r1, [r0, #4]
    }
 800539e:	4770      	bx	lr

080053a0 <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
        return mLatestPressedButton;
    }
 80053a0:	6840      	ldr	r0, [r0, #4]
 80053a2:	4770      	bx	lr

080053a4 <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
//        LcdSimulate::getInstance().impl_ClearScreen();
    }
 80053a4:	4770      	bx	lr

080053a6 <_ZN4blib13ChargeControlD1Ev>:
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
    }
    ChargeControl::~ChargeControl()
    {

    }
 80053a6:	4770      	bx	lr

080053a8 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 80053a8:	b510      	push	{r4, lr}
    }
 80053aa:	2124      	movs	r1, #36	; 0x24
    ChargeControl::~ChargeControl()
 80053ac:	4604      	mov	r4, r0
    }
 80053ae:	f000 fceb 	bl	8005d88 <_ZdlPvj>
 80053b2:	4620      	mov	r0, r4
 80053b4:	bd10      	pop	{r4, pc}
	...

080053b8 <_ZN4blib13ChargeControl10predictPwmEv>:
    {
        HAL_GPIO_WritePin(INVERTER_CTRL_GPIO_Port, INVERTER_CTRL_Pin, GPIO_PIN_SET);
    }

    uint32_t ChargeControl::predictPwm()
    {
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4605      	mov	r5, r0
        auto &analog = Analog::getInstance();
 80053bc:	f7fb feca 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>

        if (analog.mVin <= 0.0001f)
 80053c0:	eddf 7a16 	vldr	s15, [pc, #88]	; 800541c <_ZN4blib13ChargeControl10predictPwmEv+0x64>
 80053c4:	ed90 7a08 	vldr	s14, [r0, #32]
 80053c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        auto &analog = Analog::getInstance();
 80053d0:	4604      	mov	r4, r0
        if (analog.mVin <= 0.0001f)
 80053d2:	d920      	bls.n	8005416 <_ZN4blib13ChargeControl10predictPwmEv+0x5e>
            mPredictPwm = 0;
        }
        else
        {
            // 99.5% * k_pwm_max * (Vout/Vin)
            mPredictPwm = (Constant::getInstance().k_predict_pwm_margin
 80053d4:	f7fd f800 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    * Constant::getInstance().k_pwm_max * analog.mVout) / (100.0f * analog.mVin);
 80053d8:	f7fc fffe 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80053dc:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80053e0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005420 <_ZN4blib13ChargeControl10predictPwmEv+0x68>
 80053e4:	ed94 7a08 	vldr	s14, [r4, #32]
 80053e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80053ec:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005424 <_ZN4blib13ChargeControl10predictPwmEv+0x6c>
 80053f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
            mPredictPwm = (Constant::getInstance().k_predict_pwm_margin
 80053f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053fc:	ee17 4a90 	vmov	r4, s15
            mPredictPwm = 0;
 8005400:	61ac      	str	r4, [r5, #24]
        }

        mPredictPwm = constrainValue(mPredictPwm, (uint32_t) 0,
                Constant::getInstance().k_pwm_max_limited);
 8005402:	f7fc ffe9 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005406:	f640 6306 	movw	r3, #3590	; 0xe06
 800540a:	429c      	cmp	r4, r3
 800540c:	4620      	mov	r0, r4
 800540e:	bf28      	it	cs
 8005410:	4618      	movcs	r0, r3
        mPredictPwm = constrainValue(mPredictPwm, (uint32_t) 0,
 8005412:	61a8      	str	r0, [r5, #24]

        return mPredictPwm;
    }
 8005414:	bd38      	pop	{r3, r4, r5, pc}
 8005416:	2400      	movs	r4, #0
 8005418:	e7f2      	b.n	8005400 <_ZN4blib13ChargeControl10predictPwmEv+0x48>
 800541a:	bf00      	nop
 800541c:	38d1b717 	.word	0x38d1b717
 8005420:	48ae6aa0 	.word	0x48ae6aa0
 8005424:	42c80000 	.word	0x42c80000

08005428 <_ZN4blib13ChargeControl10buckEnableEv>:
    {
 8005428:	b510      	push	{r4, lr}
        LOGI();
 800542a:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <_ZN4blib13ChargeControl10buckEnableEv+0x30>)
 800542c:	490b      	ldr	r1, [pc, #44]	; (800545c <_ZN4blib13ChargeControl10buckEnableEv+0x34>)
    {
 800542e:	4604      	mov	r4, r0
        LOGI();
 8005430:	2292      	movs	r2, #146	; 0x92
 8005432:	480b      	ldr	r0, [pc, #44]	; (8005460 <_ZN4blib13ChargeControl10buckEnableEv+0x38>)
 8005434:	f7fb ff16 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        mBuckEnable = val;
 8005438:	2301      	movs	r3, #1
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 800543a:	480a      	ldr	r0, [pc, #40]	; (8005464 <_ZN4blib13ChargeControl10buckEnableEv+0x3c>)
        mBuckEnable = val;
 800543c:	7463      	strb	r3, [r4, #17]
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 800543e:	2200      	movs	r2, #0
 8005440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005444:	f7fe fc70 	bl	8003d28 <HAL_GPIO_WritePin>
    }
 8005448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800544c:	4806      	ldr	r0, [pc, #24]	; (8005468 <_ZN4blib13ChargeControl10buckEnableEv+0x40>)
 800544e:	2200      	movs	r2, #0
 8005450:	2110      	movs	r1, #16
 8005452:	f7fe bc69 	b.w	8003d28 <HAL_GPIO_WritePin>
 8005456:	bf00      	nop
 8005458:	0800b430 	.word	0x0800b430
 800545c:	0800b43b 	.word	0x0800b43b
 8005460:	0800b44d 	.word	0x0800b44d
 8005464:	40020800 	.word	0x40020800
 8005468:	40020c00 	.word	0x40020c00

0800546c <_ZN4blib13ChargeControl8pwmWriteEv>:
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
    }

    void ChargeControl::pwmWrite()
    {
        if (mOutputMode == OutputMode::PSU)
 800546c:	68c3      	ldr	r3, [r0, #12]
    {
 800546e:	b570      	push	{r4, r5, r6, lr}
 8005470:	4604      	mov	r4, r0
        if (mOutputMode == OutputMode::PSU)
 8005472:	b983      	cbnz	r3, 8005496 <_ZN4blib13ChargeControl8pwmWriteEv+0x2a>
        {
            mPwm = constrainValue(mPwm, (uint32_t) 0, Constant::getInstance().k_pwm_max_limited);
 8005474:	6945      	ldr	r5, [r0, #20]
 8005476:	f7fc ffaf 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800547a:	f640 6306 	movw	r3, #3590	; 0xe06
 800547e:	429d      	cmp	r5, r3
 8005480:	bf94      	ite	ls
 8005482:	6165      	strls	r5, [r4, #20]
 8005484:	6163      	strhi	r3, [r4, #20]
        else
        {

        }

        buckEnable();
 8005486:	4620      	mov	r0, r4
 8005488:	f7ff ffce 	bl	8005428 <_ZN4blib13ChargeControl10buckEnableEv>

        uint32_t channel = TIM_CHANNEL_1;    // xxx: Set as Default

        if (channel == TIM_CHANNEL_1)
        {
            mHtim->Instance->CCR1 = mPwm;
 800548c:	6863      	ldr	r3, [r4, #4]
 800548e:	6962      	ldr	r2, [r4, #20]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	635a      	str	r2, [r3, #52]	; 0x34
        }
        else if (channel == TIM_CHANNEL_4)
        {
            mHtim->Instance->CCR4 = mPwm;
        }
    }
 8005494:	bd70      	pop	{r4, r5, r6, pc}
        else if (mOutputMode == OutputMode::CHARGER)
 8005496:	2b01      	cmp	r3, #1
 8005498:	d1f5      	bne.n	8005486 <_ZN4blib13ChargeControl8pwmWriteEv+0x1a>
            uint32_t pPwm = predictPwm();
 800549a:	f7ff ff8d 	bl	80053b8 <_ZN4blib13ChargeControl10predictPwmEv>
            mPwm = constrainValue(mPwm, pPwm, Constant::getInstance().k_pwm_max_limited);
 800549e:	6966      	ldr	r6, [r4, #20]
            uint32_t pPwm = predictPwm();
 80054a0:	4605      	mov	r5, r0
            mPwm = constrainValue(mPwm, pPwm, Constant::getInstance().k_pwm_max_limited);
 80054a2:	f7fc ff99 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
        if (value < minVal)
 80054a6:	42ae      	cmp	r6, r5
 80054a8:	d304      	bcc.n	80054b4 <_ZN4blib13ChargeControl8pwmWriteEv+0x48>
 80054aa:	f640 6506 	movw	r5, #3590	; 0xe06
 80054ae:	42b5      	cmp	r5, r6
 80054b0:	bf28      	it	cs
 80054b2:	4635      	movcs	r5, r6
            mPwm = constrainValue(mPwm, pPwm, Constant::getInstance().k_pwm_max_limited);
 80054b4:	6165      	str	r5, [r4, #20]
 80054b6:	e7e6      	b.n	8005486 <_ZN4blib13ChargeControl8pwmWriteEv+0x1a>

080054b8 <_ZN4blib13ChargeControl11buckDisableEv>:
    {
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4604      	mov	r4, r0
        LOGI();
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <_ZN4blib13ChargeControl11buckDisableEv+0x30>)
 80054be:	490b      	ldr	r1, [pc, #44]	; (80054ec <_ZN4blib13ChargeControl11buckDisableEv+0x34>)
 80054c0:	480b      	ldr	r0, [pc, #44]	; (80054f0 <_ZN4blib13ChargeControl11buckDisableEv+0x38>)
 80054c2:	229b      	movs	r2, #155	; 0x9b
        mBuckEnable = val;
 80054c4:	2500      	movs	r5, #0
        LOGI();
 80054c6:	f7fb fecd 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 80054ca:	480a      	ldr	r0, [pc, #40]	; (80054f4 <_ZN4blib13ChargeControl11buckDisableEv+0x3c>)
        mBuckEnable = val;
 80054cc:	7465      	strb	r5, [r4, #17]
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 80054ce:	2201      	movs	r2, #1
 80054d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054d4:	f7fe fc28 	bl	8003d28 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80054d8:	4807      	ldr	r0, [pc, #28]	; (80054f8 <_ZN4blib13ChargeControl11buckDisableEv+0x40>)
 80054da:	2201      	movs	r2, #1
 80054dc:	2110      	movs	r1, #16
 80054de:	f7fe fc23 	bl	8003d28 <HAL_GPIO_WritePin>
        mPwm = 0;
 80054e2:	6165      	str	r5, [r4, #20]
    }
 80054e4:	bd38      	pop	{r3, r4, r5, pc}
 80054e6:	bf00      	nop
 80054e8:	0800b45b 	.word	0x0800b45b
 80054ec:	0800b43b 	.word	0x0800b43b
 80054f0:	0800b44d 	.word	0x0800b44d
 80054f4:	40020800 	.word	0x40020800
 80054f8:	40020c00 	.word	0x40020c00

080054fc <_ZN4blib13ChargeControlC1Ev>:
    ChargeControl::ChargeControl()
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4b09      	ldr	r3, [pc, #36]	; (8005524 <_ZN4blib13ChargeControlC1Ev+0x28>)
 8005500:	6003      	str	r3, [r0, #0]
 8005502:	2500      	movs	r5, #0
 8005504:	4604      	mov	r4, r0
        mHtim = &htim2;
 8005506:	4b08      	ldr	r3, [pc, #32]	; (8005528 <_ZN4blib13ChargeControlC1Ev+0x2c>)
 8005508:	6043      	str	r3, [r0, #4]
    ChargeControl::ChargeControl()
 800550a:	8105      	strh	r5, [r0, #8]
 800550c:	60c5      	str	r5, [r0, #12]
 800550e:	8205      	strh	r5, [r0, #16]
        buckDisable();
 8005510:	f7ff ffd2 	bl	80054b8 <_ZN4blib13ChargeControl11buckDisableEv>
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
 8005514:	6860      	ldr	r0, [r4, #4]
        mChargeState = false;
 8005516:	7265      	strb	r5, [r4, #9]
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
 8005518:	4629      	mov	r1, r5
 800551a:	f7ff fc21 	bl	8004d60 <HAL_TIM_PWM_Start>
    }
 800551e:	4620      	mov	r0, r4
 8005520:	bd38      	pop	{r3, r4, r5, pc}
 8005522:	bf00      	nop
 8005524:	0800b470 	.word	0x0800b470
 8005528:	20000370 	.word	0x20000370

0800552c <_ZN4blib13ChargeControl3runEv>:
    {
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
                    if (mInstance == nullptr)
 800552e:	4e55      	ldr	r6, [pc, #340]	; (8005684 <_ZN4blib13ChargeControl3runEv+0x158>)
 8005530:	ed2d 8b02 	vpush	{d8}
 8005534:	4604      	mov	r4, r0
        auto &analog = Analog::getInstance();
 8005536:	f7fb fe0d 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 800553a:	6833      	ldr	r3, [r6, #0]
 800553c:	4605      	mov	r5, r0
 800553e:	b933      	cbnz	r3, 800554e <_ZN4blib13ChargeControl3runEv+0x22>
                        mInstance = new T();
 8005540:	201c      	movs	r0, #28
 8005542:	f000 fc32 	bl	8005daa <_Znwj>
 8005546:	4607      	mov	r7, r0
 8005548:	f000 f8aa 	bl	80056a0 <_ZN4blib16DeviceProtectionC1Ev>
 800554c:	6037      	str	r7, [r6, #0]
        if (devProtection.mERR > 0 || mChargePause == true)
 800554e:	6833      	ldr	r3, [r6, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	dc01      	bgt.n	800555a <_ZN4blib13ChargeControl3runEv+0x2e>
 8005556:	7a23      	ldrb	r3, [r4, #8]
 8005558:	b133      	cbz	r3, 8005568 <_ZN4blib13ChargeControl3runEv+0x3c>
    }
 800555a:	ecbd 8b02 	vpop	{d8}
            buckDisable();
 800555e:	4620      	mov	r0, r4
    }
 8005560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            buckDisable();
 8005564:	f7ff bfa8 	b.w	80054b8 <_ZN4blib13ChargeControl11buckDisableEv>
                if (mMpptMode == false)    // CC-CV PSU mode : CC-CV only
 8005568:	7c23      	ldrb	r3, [r4, #16]
                    if (analog.mIout > Constant::getInstance().k_current_charging_max)
 800556a:	ed95 8a0b 	vldr	s16, [r5, #44]	; 0x2c
                if (mMpptMode == false)    // CC-CV PSU mode : CC-CV only
 800556e:	bb5b      	cbnz	r3, 80055c8 <_ZN4blib13ChargeControl3runEv+0x9c>
                    if (analog.mIout > Constant::getInstance().k_current_charging_max)
 8005570:	f7fc ff32 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005574:	edd0 7a03 	vldr	s15, [r0, #12]
 8005578:	eef4 7ac8 	vcmpe.f32	s15, s16
 800557c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005580:	d502      	bpl.n	8005588 <_ZN4blib13ChargeControl3runEv+0x5c>
                        mPwm--;
 8005582:	6963      	ldr	r3, [r4, #20]
 8005584:	3b01      	subs	r3, #1
 8005586:	e017      	b.n	80055b8 <_ZN4blib13ChargeControl3runEv+0x8c>
                    else if (analog.mVout > Constant::getInstance().k_voltage_battery_max)
 8005588:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
 800558c:	f7fc ff24 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005590:	edd0 7a01 	vldr	s15, [r0, #4]
 8005594:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559c:	dcf1      	bgt.n	8005582 <_ZN4blib13ChargeControl3runEv+0x56>
                    else if (analog.mVout < Constant::getInstance().k_voltage_battery_max)
 800559e:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
 80055a2:	f7fc ff19 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80055a6:	edd0 7a01 	vldr	s15, [r0, #4]
 80055aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80055ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b2:	d502      	bpl.n	80055ba <_ZN4blib13ChargeControl3runEv+0x8e>
                        mPwm++;
 80055b4:	6963      	ldr	r3, [r4, #20]
 80055b6:	3301      	adds	r3, #1
 80055b8:	6163      	str	r3, [r4, #20]
    }
 80055ba:	ecbd 8b02 	vpop	{d8}
                    pwmWrite();
 80055be:	4620      	mov	r0, r4
    }
 80055c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    pwmWrite();
 80055c4:	f7ff bf52 	b.w	800546c <_ZN4blib13ChargeControl8pwmWriteEv>
                    if (analog.mIout > Constant::getInstance().k_current_charging_max)
 80055c8:	f7fc ff06 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80055cc:	edd0 7a03 	vldr	s15, [r0, #12]
 80055d0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80055d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055d8:	d4d3      	bmi.n	8005582 <_ZN4blib13ChargeControl3runEv+0x56>
                    else if (analog.mVout > Constant::getInstance().k_voltage_battery_max)
 80055da:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
 80055de:	f7fc fefb 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80055e2:	edd0 7a01 	vldr	s15, [r0, #4]
 80055e6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80055ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ee:	dcc8      	bgt.n	8005582 <_ZN4blib13ChargeControl3runEv+0x56>
                        if (analog.mPout > powerInputPrev && analog.mVin > voltageInputPrev)
 80055f0:	4f25      	ldr	r7, [pc, #148]	; (8005688 <_ZN4blib13ChargeControl3runEv+0x15c>)
 80055f2:	ed95 7a0e 	vldr	s14, [r5, #56]	; 0x38
 80055f6:	edd7 7a00 	vldr	s15, [r7]
 80055fa:	4e24      	ldr	r6, [pc, #144]	; (800568c <_ZN4blib13ChargeControl3runEv+0x160>)
 80055fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005604:	dd0c      	ble.n	8005620 <_ZN4blib13ChargeControl3runEv+0xf4>
 8005606:	edd5 6a08 	vldr	s13, [r5, #32]
 800560a:	ed96 7a00 	vldr	s14, [r6]
 800560e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005616:	dd03      	ble.n	8005620 <_ZN4blib13ChargeControl3runEv+0xf4>
                            mPwm--;
 8005618:	6963      	ldr	r3, [r4, #20]
 800561a:	3b01      	subs	r3, #1
                            mPwm++;
 800561c:	6163      	str	r3, [r4, #20]
 800561e:	e02c      	b.n	800567a <_ZN4blib13ChargeControl3runEv+0x14e>
                        else if (analog.mPin > powerInputPrev && analog.mVin < voltageInputPrev)
 8005620:	ed95 7a0d 	vldr	s14, [r5, #52]	; 0x34
 8005624:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800562c:	d50b      	bpl.n	8005646 <_ZN4blib13ChargeControl3runEv+0x11a>
 800562e:	ed95 6a08 	vldr	s12, [r5, #32]
 8005632:	edd6 6a00 	vldr	s13, [r6]
 8005636:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800563a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563e:	d502      	bpl.n	8005646 <_ZN4blib13ChargeControl3runEv+0x11a>
                            mPwm++;
 8005640:	6963      	ldr	r3, [r4, #20]
 8005642:	3301      	adds	r3, #1
 8005644:	e7ea      	b.n	800561c <_ZN4blib13ChargeControl3runEv+0xf0>
                        else if (analog.mPin < powerInputPrev && analog.mVin > voltageInputPrev)
 8005646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800564a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564e:	dd09      	ble.n	8005664 <_ZN4blib13ChargeControl3runEv+0x138>
 8005650:	ed95 7a08 	vldr	s14, [r5, #32]
 8005654:	edd6 7a00 	vldr	s15, [r6]
 8005658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800565c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005660:	dcee      	bgt.n	8005640 <_ZN4blib13ChargeControl3runEv+0x114>
                        else if (analog.mPin < powerInputPrev && analog.mVin < voltageInputPrev)
 8005662:	d4d9      	bmi.n	8005618 <_ZN4blib13ChargeControl3runEv+0xec>
                        else if (analog.mVout < Constant::getInstance().k_voltage_battery_max)
 8005664:	ed95 8a0a 	vldr	s16, [r5, #40]	; 0x28
 8005668:	f7fc feb6 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800566c:	edd0 7a01 	vldr	s15, [r0, #4]
 8005670:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005678:	d4e2      	bmi.n	8005640 <_ZN4blib13ChargeControl3runEv+0x114>
                        powerInputPrev = analog.mPin;
 800567a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800567c:	603b      	str	r3, [r7, #0]
                        voltageInputPrev = analog.mVin;
 800567e:	6a2b      	ldr	r3, [r5, #32]
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	e79a      	b.n	80055ba <_ZN4blib13ChargeControl3runEv+0x8e>
 8005684:	20000208 	.word	0x20000208
 8005688:	20000404 	.word	0x20000404
 800568c:	20000408 	.word	0x20000408

08005690 <_ZN4blib16DeviceProtectionD1Ev>:

    }
    DeviceProtection::~DeviceProtection()
    {

    }
 8005690:	4770      	bx	lr

08005692 <_ZN4blib16DeviceProtectionD0Ev>:
    DeviceProtection::~DeviceProtection()
 8005692:	b510      	push	{r4, lr}
    }
 8005694:	211c      	movs	r1, #28
    DeviceProtection::~DeviceProtection()
 8005696:	4604      	mov	r4, r0
    }
 8005698:	f000 fb76 	bl	8005d88 <_ZdlPvj>
 800569c:	4620      	mov	r0, r4
 800569e:	bd10      	pop	{r4, pc}

080056a0 <_ZN4blib16DeviceProtectionC1Ev>:
    DeviceProtection::DeviceProtection()
 80056a0:	4a03      	ldr	r2, [pc, #12]	; (80056b0 <_ZN4blib16DeviceProtectionC1Ev+0x10>)
 80056a2:	6002      	str	r2, [r0, #0]
 80056a4:	2200      	movs	r2, #0
 80056a6:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80056aa:	6142      	str	r2, [r0, #20]
 80056ac:	8302      	strh	r2, [r0, #24]
    }
 80056ae:	4770      	bx	lr
 80056b0:	0800b480 	.word	0x0800b480

080056b4 <_ZN4blib16DeviceProtection15backFlowControlEv>:
    void DeviceProtection::backFlowControl()
    {
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	ed2d 8b02 	vpush	{d8}
 80056ba:	4604      	mov	r4, r0
        auto &analog = Analog::getInstance();
 80056bc:	f7fb fd4a 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80056c0:	4605      	mov	r5, r0
        auto &chargeCtrl = ChargeControl::getInstance();
 80056c2:	f7fb fd5f 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>

        // PSU Mode
        if (chargeCtrl.mOutputMode == OutputMode::PSU)    // PSU mode: force backflow MOSFET on
 80056c6:	68c3      	ldr	r3, [r0, #12]
 80056c8:	b96b      	cbnz	r3, 80056e6 <_ZN4blib16DeviceProtection15backFlowControlEv+0x32>
        {
            mBypassEnable = true;
 80056ca:	2301      	movs	r3, #1
                mBypassEnable = true;
            }
            // Input Undervoltage - Turn off bypass MOSFET and prevent PV Backflow (SS)
            else
            {
                mBypassEnable = false;    // Vsolar < Vbattery -> Dien chay tu battery -> solar => khong cho xay ra van de nay
 80056cc:	7223      	strb	r3, [r4, #8]
            }
        }

        HAL_GPIO_WritePin(BFC_GPIO_Port, BFC_Pin, ((GPIO_PinState) !mBypassEnable));
    }
 80056ce:	ecbd 8b02 	vpop	{d8}
        HAL_GPIO_WritePin(BFC_GPIO_Port, BFC_Pin, ((GPIO_PinState) !mBypassEnable));
 80056d2:	7a22      	ldrb	r2, [r4, #8]
 80056d4:	480d      	ldr	r0, [pc, #52]	; (800570c <_ZN4blib16DeviceProtection15backFlowControlEv+0x58>)
    }
 80056d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_GPIO_WritePin(BFC_GPIO_Port, BFC_Pin, ((GPIO_PinState) !mBypassEnable));
 80056da:	f082 0201 	eor.w	r2, r2, #1
 80056de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056e2:	f7fe bb21 	b.w	8003d28 <HAL_GPIO_WritePin>
        else if (chargeCtrl.mOutputMode == OutputMode::CHARGER)
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d1f1      	bne.n	80056ce <_ZN4blib16DeviceProtection15backFlowControlEv+0x1a>
            if (analog.mVin > analog.mVout + Constant::getInstance().k_voltage_dropout)
 80056ea:	ed95 8a08 	vldr	s16, [r5, #32]
 80056ee:	f7fc fe73 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 80056f2:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80056f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005706:	dce0      	bgt.n	80056ca <_ZN4blib16DeviceProtection15backFlowControlEv+0x16>
                mBypassEnable = false;    // Vsolar < Vbattery -> Dien chay tu battery -> solar => khong cho xay ra van de nay
 8005708:	2300      	movs	r3, #0
 800570a:	e7df      	b.n	80056cc <_ZN4blib16DeviceProtection15backFlowControlEv+0x18>
 800570c:	40020000 	.word	0x40020000

08005710 <_ZN4blib16DeviceProtection3runEv>:

    void DeviceProtection::run()
    {
 8005710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005712:	ed2d 8b02 	vpush	{d8}
 8005716:	4604      	mov	r4, r0
        auto &analog = Analog::getInstance();
 8005718:	f7fb fd1c 	bl	8001154 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 800571c:	4605      	mov	r5, r0
        auto &chargeCtrl = ChargeControl::getInstance();
 800571e:	f7fb fd31 	bl	8001184 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>

        mERR = 0;
 8005722:	2700      	movs	r7, #0
        auto &chargeCtrl = ChargeControl::getInstance();
 8005724:	4606      	mov	r6, r0
        mERR = 0;
 8005726:	60e7      	str	r7, [r4, #12]

        backFlowControl();
 8005728:	4620      	mov	r0, r4
 800572a:	f7ff ffc3 	bl	80056b4 <_ZN4blib16DeviceProtection15backFlowControlEv>

        // Nhiet do hien tai lon hon nhiet do max
        if (analog.getTemp() > Constant::getInstance().k_temperature_max)
 800572e:	4628      	mov	r0, r5
 8005730:	f7ff fcb0 	bl	8005094 <_ZNK4blib6Analog7getTempEv>
 8005734:	eeb0 8a40 	vmov.f32	s16, s0
 8005738:	f7fc fe4e 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 800573c:	edd0 7a04 	vldr	s15, [r0, #16]
 8005740:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            mOTE = true;    // Set co qua nhiet
 8005748:	bfc3      	ittte	gt
 800574a:	2301      	movgt	r3, #1
 800574c:	7663      	strbgt	r3, [r4, #25]
            mERR++;
 800574e:	68e3      	ldrgt	r3, [r4, #12]
        }
        else
        {
            mOTE = false;
 8005750:	7667      	strble	r7, [r4, #25]
            mERR++;
 8005752:	bfc4      	itt	gt
 8005754:	3301      	addgt	r3, #1
 8005756:	60e3      	strgt	r3, [r4, #12]
        }

        // Qua dong input
        if (analog.getSolarCurrent() > Constant::getInstance().k_current_in_absolute)
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff fc92 	bl	8005082 <_ZNK4blib6Analog15getSolarCurrentEv>
 800575e:	eeb0 8a40 	vmov.f32	s16, s0
 8005762:	f7fc fe39 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005766:	eef3 7a0f 	vmov.f32	s15, #63	; 0x41f80000  31.0
 800576a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800576e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            mIOC = true;
 8005772:	bfc3      	ittte	gt
 8005774:	2301      	movgt	r3, #1
 8005776:	7563      	strbgt	r3, [r4, #21]
            mERR++;
 8005778:	68e3      	ldrgt	r3, [r4, #12]
        }
        else
        {
            mIOC = false;
 800577a:	2300      	movle	r3, #0
            mERR++;
 800577c:	bfc6      	itte	gt
 800577e:	3301      	addgt	r3, #1
 8005780:	60e3      	strgt	r3, [r4, #12]
            mIOC = false;
 8005782:	7563      	strble	r3, [r4, #21]
        }

        // Qua dong output
        if (analog.getIout() > Constant::getInstance().k_current_out_absolute)
 8005784:	4628      	mov	r0, r5
 8005786:	f7ff fc82 	bl	800508e <_ZNK4blib6Analog7getIoutEv>
 800578a:	eeb0 8a40 	vmov.f32	s16, s0
 800578e:	f7fc fe23 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005792:	eddf 7a51 	vldr	s15, [pc, #324]	; 80058d8 <_ZN4blib16DeviceProtection3runEv+0x1c8>
 8005796:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800579a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        {
            mOOC = true;
 800579e:	bfc3      	ittte	gt
 80057a0:	2301      	movgt	r3, #1
 80057a2:	7623      	strbgt	r3, [r4, #24]
            mERR++;
 80057a4:	68e3      	ldrgt	r3, [r4, #12]
        }
        else
        {
            mOOC = false;
 80057a6:	2300      	movle	r3, #0
            mERR++;
 80057a8:	bfc6      	itte	gt
 80057aa:	3301      	addgt	r3, #1
 80057ac:	60e3      	strgt	r3, [r4, #12]
            mOOC = false;
 80057ae:	7623      	strble	r3, [r4, #24]
        }

        // Qua ap output
        if (analog.getVout()
 80057b0:	4628      	mov	r0, r5
 80057b2:	f7ff fc69 	bl	8005088 <_ZNK4blib6Analog7getVoutEv>
 80057b6:	eeb0 8a40 	vmov.f32	s16, s0
                > Constant::getInstance().k_voltage_battery_max
                        + Constant::getInstance().k_voltage_battery_thresh)
 80057ba:	f7fc fe0d 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                > Constant::getInstance().k_voltage_battery_max
 80057be:	f7fc fe0b 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                        + Constant::getInstance().k_voltage_battery_thresh)
 80057c2:	edd0 7a01 	vldr	s15, [r0, #4]
 80057c6:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80057ca:	ee77 7a87 	vadd.f32	s15, s15, s14
        {
            mOOV = false;
        }

        // Qua dong input
        if (analog.getSolarVoltage() < Constant::getInstance().k_v_in_system_min
 80057ce:	4628      	mov	r0, r5
        if (analog.getVout()
 80057d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80057d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            mOOV = true;
 80057d8:	bfc3      	ittte	gt
 80057da:	2301      	movgt	r3, #1
 80057dc:	75e3      	strbgt	r3, [r4, #23]
            mERR++;
 80057de:	68e3      	ldrgt	r3, [r4, #12]
            mOOV = false;
 80057e0:	2300      	movle	r3, #0
            mERR++;
 80057e2:	bfc6      	itte	gt
 80057e4:	3301      	addgt	r3, #1
 80057e6:	60e3      	strgt	r3, [r4, #12]
            mOOV = false;
 80057e8:	75e3      	strble	r3, [r4, #23]
        if (analog.getSolarVoltage() < Constant::getInstance().k_v_in_system_min
 80057ea:	f7ff fc47 	bl	800507c <_ZNK4blib6Analog15getSolarVoltageEv>
                && analog.getVout() < Constant::getInstance().k_v_in_system_min)
 80057ee:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
        if (analog.getSolarVoltage() < Constant::getInstance().k_v_in_system_min
 80057f2:	eef0 8a40 	vmov.f32	s17, s0
 80057f6:	f7fc fdef 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                && analog.getVout() < Constant::getInstance().k_v_in_system_min)
 80057fa:	eef4 8ac8 	vcmpe.f32	s17, s16
 80057fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005802:	d52f      	bpl.n	8005864 <_ZN4blib16DeviceProtection3runEv+0x154>
 8005804:	4628      	mov	r0, r5
 8005806:	f7ff fc3f 	bl	8005088 <_ZNK4blib6Analog7getVoutEv>
 800580a:	eef0 8a40 	vmov.f32	s17, s0
 800580e:	f7fc fde3 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005812:	eef4 8ac8 	vcmpe.f32	s17, s16
 8005816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800581a:	d523      	bpl.n	8005864 <_ZN4blib16DeviceProtection3runEv+0x154>
        {
            mFLV = true;
 800581c:	2301      	movs	r3, #1
 800581e:	74a3      	strb	r3, [r4, #18]
            mERR++;
 8005820:	68e3      	ldr	r3, [r4, #12]
 8005822:	3301      	adds	r3, #1
 8005824:	60e3      	str	r3, [r4, #12]
        {
            mFLV = false;
        }

        //PSU MODE specific protection protocol
        if (chargeCtrl.mOutputMode == OutputMode::PSU)
 8005826:	68f6      	ldr	r6, [r6, #12]
 8005828:	bb16      	cbnz	r6, 8005870 <_ZN4blib16DeviceProtection3runEv+0x160>
            //Clear recovery and battery not connected boolean identifiers
            mREC = false;
            mBNC = false;

            //IUV - INPUT UNDERVOLTAGE: Input voltage is below battery voltage (for psu mode only)
            if (analog.getSolarVoltage()
 800582a:	4628      	mov	r0, r5
            mBNC = false;
 800582c:	8226      	strh	r6, [r4, #16]
            if (analog.getSolarVoltage()
 800582e:	f7ff fc25 	bl	800507c <_ZNK4blib6Analog15getSolarVoltageEv>
 8005832:	eeb0 8a40 	vmov.f32	s16, s0
                    < Constant::getInstance().k_voltage_battery_max
                            + Constant::getInstance().k_voltage_dropout)
 8005836:	f7fc fdcf 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    < Constant::getInstance().k_voltage_battery_max
 800583a:	f7fc fdcd 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                            + Constant::getInstance().k_voltage_dropout)
 800583e:	edd0 7a01 	vldr	s15, [r0, #4]
 8005842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005846:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (analog.getSolarVoltage()
 800584a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800584e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005852:	d50a      	bpl.n	800586a <_ZN4blib16DeviceProtection3runEv+0x15a>
            {
                mIUV = true;
 8005854:	2301      	movs	r3, #1
 8005856:	74e3      	strb	r3, [r4, #19]
                mERR++;
 8005858:	68e3      	ldr	r3, [r4, #12]
 800585a:	3301      	adds	r3, #1
 800585c:	60e3      	str	r3, [r4, #12]
        else
        {

        }

    }
 800585e:	ecbd 8b02 	vpop	{d8}
 8005862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            mFLV = false;
 8005864:	2300      	movs	r3, #0
 8005866:	74a3      	strb	r3, [r4, #18]
 8005868:	e7dd      	b.n	8005826 <_ZN4blib16DeviceProtection3runEv+0x116>
                mIUV = false;
 800586a:	2300      	movs	r3, #0
 800586c:	74e3      	strb	r3, [r4, #19]
 800586e:	e7f6      	b.n	800585e <_ZN4blib16DeviceProtection3runEv+0x14e>
        else if (chargeCtrl.mOutputMode == OutputMode::CHARGER)
 8005870:	2e01      	cmp	r6, #1
 8005872:	d1f4      	bne.n	800585e <_ZN4blib16DeviceProtection3runEv+0x14e>
            backFlowControl();
 8005874:	4620      	mov	r0, r4
 8005876:	f7ff ff1d 	bl	80056b4 <_ZN4blib16DeviceProtection15backFlowControlEv>
            if (analog.getVout() < Constant::getInstance().k_v_in_system_min)
 800587a:	4628      	mov	r0, r5
 800587c:	f7ff fc04 	bl	8005088 <_ZNK4blib6Analog7getVoutEv>
 8005880:	eef0 8a40 	vmov.f32	s17, s0
 8005884:	f7fc fda8 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
 8005888:	eef4 8ac8 	vcmpe.f32	s17, s16
 800588c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                mERR++;
 8005890:	bf43      	ittte	mi
 8005892:	68e3      	ldrmi	r3, [r4, #12]
                mBNC = true;
 8005894:	7426      	strbmi	r6, [r4, #16]
                mERR++;
 8005896:	3301      	addmi	r3, #1
                mBNC = false;
 8005898:	2300      	movpl	r3, #0
                mERR++;
 800589a:	bf4c      	ite	mi
 800589c:	60e3      	strmi	r3, [r4, #12]
                mBNC = false;
 800589e:	7423      	strbpl	r3, [r4, #16]
            if (analog.getSolarVoltage()
 80058a0:	4628      	mov	r0, r5
 80058a2:	f7ff fbeb 	bl	800507c <_ZNK4blib6Analog15getSolarVoltageEv>
 80058a6:	eeb0 8a40 	vmov.f32	s16, s0
                            + Constant::getInstance().k_voltage_dropout)
 80058aa:	f7fc fd95 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                    < Constant::getInstance().k_voltage_battery_max
 80058ae:	f7fc fd93 	bl	80023d8 <_ZN4blib2dp9SingletonI8ConstantE11getInstanceEv>
                            + Constant::getInstance().k_voltage_dropout)
 80058b2:	edd0 7a01 	vldr	s15, [r0, #4]
 80058b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058ba:	ee77 7a87 	vadd.f32	s15, s15, s14
            if (analog.getSolarVoltage()
 80058be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80058c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c6:	d5d0      	bpl.n	800586a <_ZN4blib16DeviceProtection3runEv+0x15a>
                mERR++;
 80058c8:	68e3      	ldr	r3, [r4, #12]
                mIUV = true;
 80058ca:	2201      	movs	r2, #1
                mERR++;
 80058cc:	4413      	add	r3, r2
                mIUV = true;
 80058ce:	74e2      	strb	r2, [r4, #19]
                mERR++;
 80058d0:	60e3      	str	r3, [r4, #12]
                mREC = true;
 80058d2:	7462      	strb	r2, [r4, #17]
    }
 80058d4:	e7c3      	b.n	800585e <_ZN4blib16DeviceProtection3runEv+0x14e>
 80058d6:	bf00      	nop
 80058d8:	42480000 	.word	0x42480000

080058dc <_ZN4blib3LcdD1Ev>:
        init();
    }
    Lcd::~Lcd()
    {

    }
 80058dc:	4770      	bx	lr

080058de <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 80058de:	b510      	push	{r4, lr}
    }
 80058e0:	2114      	movs	r1, #20
    Lcd::~Lcd()
 80058e2:	4604      	mov	r4, r0
    }
 80058e4:	f000 fa50 	bl	8005d88 <_ZdlPvj>
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd10      	pop	{r4, pc}

080058ec <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 80058ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t dataHigh = 0, dataLow = 0;
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 80058ee:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
        dataLow = ((command << 4) & 0xF0);
 80058f2:	0109      	lsls	r1, r1, #4
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 80058f4:	f043 020c 	orr.w	r2, r3, #12
        dataLow = ((command << 4) & 0xF0);
 80058f8:	b2c9      	uxtb	r1, r1
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 80058fa:	f043 0308 	orr.w	r3, r3, #8
 80058fe:	f88d 300d 	strb.w	r3, [sp, #13]
        data[2] = dataLow | 0x0C;
 8005902:	f041 030c 	orr.w	r3, r1, #12
 8005906:	f88d 300e 	strb.w	r3, [sp, #14]
        data[3] = dataLow | 0x08;
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 800590a:	2364      	movs	r3, #100	; 0x64
 800590c:	9300      	str	r3, [sp, #0]
        data[3] = dataLow | 0x08;
 800590e:	f041 0108 	orr.w	r1, r1, #8
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 8005912:	f88d 200c 	strb.w	r2, [sp, #12]
        data[3] = dataLow | 0x08;
 8005916:	f88d 100f 	strb.w	r1, [sp, #15]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 800591a:	2304      	movs	r3, #4
 800591c:	7b01      	ldrb	r1, [r0, #12]
 800591e:	6880      	ldr	r0, [r0, #8]
 8005920:	aa03      	add	r2, sp, #12
 8005922:	f7fe fb8f 	bl	8004044 <HAL_I2C_Master_Transmit>
    }
 8005926:	b005      	add	sp, #20
 8005928:	f85d fb04 	ldr.w	pc, [sp], #4

0800592c <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 800592c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t dataHigh = 0, dataLow = 0;
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 800592e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
        dataLow = ((data << 4) & 0xF0);
 8005932:	0109      	lsls	r1, r1, #4
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 8005934:	f043 020d 	orr.w	r2, r3, #13
        dataLow = ((data << 4) & 0xF0);
 8005938:	b2c9      	uxtb	r1, r1
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 800593a:	f043 0309 	orr.w	r3, r3, #9
 800593e:	f88d 300d 	strb.w	r3, [sp, #13]
        dataBuf[2] = dataLow | 0x0D;
 8005942:	f041 030d 	orr.w	r3, r1, #13
 8005946:	f88d 300e 	strb.w	r3, [sp, #14]
        dataBuf[3] = dataLow | 0x09;
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 800594a:	2364      	movs	r3, #100	; 0x64
 800594c:	9300      	str	r3, [sp, #0]
        dataBuf[3] = dataLow | 0x09;
 800594e:	f041 0109 	orr.w	r1, r1, #9
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 8005952:	f88d 200c 	strb.w	r2, [sp, #12]
        dataBuf[3] = dataLow | 0x09;
 8005956:	f88d 100f 	strb.w	r1, [sp, #15]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 800595a:	2304      	movs	r3, #4
 800595c:	7b01      	ldrb	r1, [r0, #12]
 800595e:	6880      	ldr	r0, [r0, #8]
 8005960:	aa03      	add	r2, sp, #12
 8005962:	f7fe fb6f 	bl	8004044 <HAL_I2C_Master_Transmit>
    }
 8005966:	b005      	add	sp, #20
 8005968:	f85d fb04 	ldr.w	pc, [sp], #4

0800596c <_ZN4blib3Lcd11displayLineEhhPKc>:
    char ischar(const char *string)
    {
        return (string != nullptr) ? *(string) : ' ';
    }
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	4680      	mov	r8, r0
 8005972:	b0a7      	sub	sp, #156	; 0x9c
 8005974:	468a      	mov	sl, r1
 8005976:	4691      	mov	r9, r2
        return (string != nullptr) ? *(string) : ' ';
 8005978:	461c      	mov	r4, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d067      	beq.n	8005a4e <_ZN4blib3Lcd11displayLineEhhPKc+0xe2>
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	9325      	str	r3, [sp, #148]	; 0x94
 8005982:	7863      	ldrb	r3, [r4, #1]
 8005984:	9322      	str	r3, [sp, #136]	; 0x88
 8005986:	78a3      	ldrb	r3, [r4, #2]
 8005988:	9321      	str	r3, [sp, #132]	; 0x84
 800598a:	78e3      	ldrb	r3, [r4, #3]
 800598c:	9320      	str	r3, [sp, #128]	; 0x80
 800598e:	7923      	ldrb	r3, [r4, #4]
 8005990:	931f      	str	r3, [sp, #124]	; 0x7c
 8005992:	7963      	ldrb	r3, [r4, #5]
 8005994:	931e      	str	r3, [sp, #120]	; 0x78
 8005996:	79a3      	ldrb	r3, [r4, #6]
 8005998:	931d      	str	r3, [sp, #116]	; 0x74
 800599a:	79e3      	ldrb	r3, [r4, #7]
 800599c:	931c      	str	r3, [sp, #112]	; 0x70
 800599e:	7a23      	ldrb	r3, [r4, #8]
 80059a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80059a2:	7a63      	ldrb	r3, [r4, #9]
 80059a4:	931a      	str	r3, [sp, #104]	; 0x68
 80059a6:	7b63      	ldrb	r3, [r4, #13]
 80059a8:	9316      	str	r3, [sp, #88]	; 0x58
 80059aa:	7ba3      	ldrb	r3, [r4, #14]
 80059ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80059ae:	7be3      	ldrb	r3, [r4, #15]
 80059b0:	7ca2      	ldrb	r2, [r4, #18]
 80059b2:	9318      	str	r3, [sp, #96]	; 0x60
 80059b4:	7c63      	ldrb	r3, [r4, #17]
 80059b6:	9319      	str	r3, [sp, #100]	; 0x64
 80059b8:	7aa5      	ldrb	r5, [r4, #10]
 80059ba:	7ae6      	ldrb	r6, [r4, #11]
 80059bc:	7b27      	ldrb	r7, [r4, #12]
 80059be:	f894 b010 	ldrb.w	fp, [r4, #16]
                print("[>]  ");
 80059c2:	4833      	ldr	r0, [pc, #204]	; (8005a90 <_ZN4blib3Lcd11displayLineEhhPKc+0x124>)
 80059c4:	9224      	str	r2, [sp, #144]	; 0x90
 80059c6:	7ce1      	ldrb	r1, [r4, #19]
 80059c8:	9123      	str	r1, [sp, #140]	; 0x8c
 80059ca:	f7fb fb21 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 80059ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80059d0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80059d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059d4:	9115      	str	r1, [sp, #84]	; 0x54
 80059d6:	e9cd b312 	strd	fp, r3, [sp, #72]	; 0x48
 80059da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80059dc:	9311      	str	r3, [sp, #68]	; 0x44
 80059de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059e0:	9310      	str	r3, [sp, #64]	; 0x40
 80059e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80059e4:	9214      	str	r2, [sp, #80]	; 0x50
 80059e6:	e9cd 730e 	strd	r7, r3, [sp, #56]	; 0x38
 80059ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80059ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80059f0:	930a      	str	r3, [sp, #40]	; 0x28
 80059f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80059f4:	9309      	str	r3, [sp, #36]	; 0x24
 80059f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80059f8:	9308      	str	r3, [sp, #32]
 80059fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059fc:	9307      	str	r3, [sp, #28]
 80059fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a00:	9306      	str	r3, [sp, #24]
 8005a02:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a04:	9305      	str	r3, [sp, #20]
 8005a06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 8005a0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <_ZN4blib3Lcd11displayLineEhhPKc+0x128>)
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	235d      	movs	r3, #93	; 0x5d
 8005a1c:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <_ZN4blib3Lcd11displayLineEhhPKc+0x12c>)
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <_ZN4blib3Lcd11displayLineEhhPKc+0x130>)
 8005a26:	481e      	ldr	r0, [pc, #120]	; (8005aa0 <_ZN4blib3Lcd11displayLineEhhPKc+0x134>)
 8005a28:	f001 fbd8 	bl	80071dc <sniprintf>
                print(mBuffer);
 8005a2c:	481c      	ldr	r0, [pc, #112]	; (8005aa0 <_ZN4blib3Lcd11displayLineEhhPKc+0x134>)
 8005a2e:	f7fb faef 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8005a32:	481c      	ldr	r0, [pc, #112]	; (8005aa4 <_ZN4blib3Lcd11displayLineEhhPKc+0x138>)
 8005a34:	f7fb faec 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                ischar(string + 13), ischar(string + 14), ischar(string + 15), ischar(string + 16),
                ischar(string + 17), ischar(string + 18), ischar(string + 19));

        uint8_t command = 0;

        switch (mLcdType)
 8005a38:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d120      	bne.n	8005a82 <_ZN4blib3Lcd11displayLineEhhPKc+0x116>
        {
            case LcdType::LCD_TYPE_1602:
                break;
            case LcdType::LCD_TYPE_2004:
                switch (row)
 8005a40:	f1ba 0f03 	cmp.w	sl, #3
 8005a44:	d81d      	bhi.n	8005a82 <_ZN4blib3Lcd11displayLineEhhPKc+0x116>
 8005a46:	e8df f00a 	tbb	[pc, sl]
 8005a4a:	1004      	.short	0x1004
 8005a4c:	1916      	.short	0x1916
        return (string != nullptr) ? *(string) : ' ';
 8005a4e:	2320      	movs	r3, #32
 8005a50:	e796      	b.n	8005980 <_ZN4blib3Lcd11displayLineEhhPKc+0x14>
                {
                    case 0:
                        command = 0x80 | (col + 0x00);
 8005a52:	f049 0180 	orr.w	r1, r9, #128	; 0x80
                break;
            default:
                break;
        }

        sendCmd(command);
 8005a56:	4640      	mov	r0, r8
 8005a58:	f7ff ff48 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 8005a5c:	3c01      	subs	r4, #1
 8005a5e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005a62:	b981      	cbnz	r1, 8005a86 <_ZN4blib3Lcd11displayLineEhhPKc+0x11a>
        {
            sendData(*string);
            string++;
        }
    }
 8005a64:	b027      	add	sp, #156	; 0x9c
 8005a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                        command = 0x80 | (col + 0x40);
 8005a6a:	f109 0140 	add.w	r1, r9, #64	; 0x40
                        command = 0x80 | (col + 0x54);
 8005a6e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8005a72:	b2c9      	uxtb	r1, r1
                        break;
 8005a74:	e7ef      	b.n	8005a56 <_ZN4blib3Lcd11displayLineEhhPKc+0xea>
                        command = 0x80 | (col + 0x14);
 8005a76:	f109 0114 	add.w	r1, r9, #20
 8005a7a:	e7f8      	b.n	8005a6e <_ZN4blib3Lcd11displayLineEhhPKc+0x102>
                        command = 0x80 | (col + 0x54);
 8005a7c:	f109 0154 	add.w	r1, r9, #84	; 0x54
 8005a80:	e7f5      	b.n	8005a6e <_ZN4blib3Lcd11displayLineEhhPKc+0x102>
 8005a82:	2100      	movs	r1, #0
 8005a84:	e7e7      	b.n	8005a56 <_ZN4blib3Lcd11displayLineEhhPKc+0xea>
            sendData(*string);
 8005a86:	4640      	mov	r0, r8
 8005a88:	f7ff ff50 	bl	800592c <_ZN4blib3Lcd8sendDataEh>
            string++;
 8005a8c:	e7e7      	b.n	8005a5e <_ZN4blib3Lcd11displayLineEhhPKc+0xf2>
 8005a8e:	bf00      	nop
 8005a90:	0800ac0d 	.word	0x0800ac0d
 8005a94:	0800b4db 	.word	0x0800b4db
 8005a98:	0800b490 	.word	0x0800b490
 8005a9c:	0800b488 	.word	0x0800b488
 8005aa0:	2000040c 	.word	0x2000040c
 8005aa4:	0800b9fc 	.word	0x0800b9fc

08005aa8 <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
        sendCmd(0x01);
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	f7ff bf1f 	b.w	80058ec <_ZN4blib3Lcd7sendCmdEh>

08005aae <_ZN4blib3Lcd4initEv>:
    }
    void Lcd::init()
    {
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 8005aae:	2306      	movs	r3, #6
    {
 8005ab0:	b510      	push	{r4, lr}
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 8005ab2:	7343      	strb	r3, [r0, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 8005ab4:	f642 0308 	movw	r3, #10248	; 0x2808
 8005ab8:	81c3      	strh	r3, [r0, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_NOBLACKLIGHT;
 8005aba:	2300      	movs	r3, #0
 8005abc:	7403      	strb	r3, [r0, #16]
    {
 8005abe:	4604      	mov	r4, r0

        HAL_Delay(50);
 8005ac0:	2032      	movs	r0, #50	; 0x32
 8005ac2:	f7fd fba5 	bl	8003210 <HAL_Delay>
        sendCmd(0x30);
 8005ac6:	2130      	movs	r1, #48	; 0x30
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f7ff ff0f 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 8005ace:	2005      	movs	r0, #5
 8005ad0:	f7fd fb9e 	bl	8003210 <HAL_Delay>
        sendCmd(0x30);
 8005ad4:	2130      	movs	r1, #48	; 0x30
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f7ff ff08 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8005adc:	2001      	movs	r0, #1
 8005ade:	f7fd fb97 	bl	8003210 <HAL_Delay>
        sendCmd(0x30);
 8005ae2:	2130      	movs	r1, #48	; 0x30
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f7ff ff01 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8005aea:	200a      	movs	r0, #10
 8005aec:	f7fd fb90 	bl	8003210 <HAL_Delay>
        sendCmd(0x20);
 8005af0:	2120      	movs	r1, #32
 8005af2:	4620      	mov	r0, r4
 8005af4:	f7ff fefa 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8005af8:	200a      	movs	r0, #10
 8005afa:	f7fd fb89 	bl	8003210 <HAL_Delay>

        sendCmd(mFunctionSet);
 8005afe:	7be1      	ldrb	r1, [r4, #15]
 8005b00:	4620      	mov	r0, r4
 8005b02:	f7ff fef3 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8005b06:	2001      	movs	r0, #1
 8005b08:	f7fd fb82 	bl	8003210 <HAL_Delay>
        sendCmd(mDisplayControl);
 8005b0c:	7ba1      	ldrb	r1, [r4, #14]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff feec 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8005b14:	2001      	movs	r0, #1
 8005b16:	f7fd fb7b 	bl	8003210 <HAL_Delay>
        sendCmd(0x01);    //clear display
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7ff fee5 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 8005b22:	2002      	movs	r0, #2
 8005b24:	f7fd fb74 	bl	8003210 <HAL_Delay>
        sendCmd(mEntryMode);
 8005b28:	7b61      	ldrb	r1, [r4, #13]
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f7ff fede 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7fd fb6d 	bl	8003210 <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 8005b36:	7ba1      	ldrb	r1, [r4, #14]
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f041 0104 	orr.w	r1, r1, #4
 8005b3e:	f7ff fed5 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8005b42:	2001      	movs	r0, #1
 8005b44:	f7fd fb64 	bl	8003210 <HAL_Delay>
        sendCmd(mBlackLight);
 8005b48:	4620      	mov	r0, r4
 8005b4a:	7c21      	ldrb	r1, [r4, #16]
 8005b4c:	f7ff fece 	bl	80058ec <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
    }
 8005b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_Delay(1);
 8005b54:	2001      	movs	r0, #1
 8005b56:	f7fd bb5b 	b.w	8003210 <HAL_Delay>
	...

08005b5c <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh>:
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8005b5c:	b538      	push	{r3, r4, r5, lr}
            address)
 8005b5e:	4d05      	ldr	r5, [pc, #20]	; (8005b74 <_ZN4blib3LcdC1ENS0_7LcdTypeEP17I2C_HandleTypeDefh+0x18>)
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8005b60:	6082      	str	r2, [r0, #8]
 8005b62:	e9c0 5100 	strd	r5, r1, [r0]
 8005b66:	4604      	mov	r4, r0
 8005b68:	7303      	strb	r3, [r0, #12]
        init();
 8005b6a:	f7ff ffa0 	bl	8005aae <_ZN4blib3Lcd4initEv>
    }
 8005b6e:	4620      	mov	r0, r4
 8005b70:	bd38      	pop	{r3, r4, r5, pc}
 8005b72:	bf00      	nop
 8005b74:	0800b4f0 	.word	0x0800b4f0

08005b78 <_ZN4blib3Lcd11noBackligthEv>:

    void Lcd::noBackligth()
    {
        mBlackLight = LCD_NOBLACKLIGHT;
 8005b78:	2100      	movs	r1, #0
 8005b7a:	7401      	strb	r1, [r0, #16]
        sendData(mBlackLight);
 8005b7c:	f7ff bed6 	b.w	800592c <_ZN4blib3Lcd8sendDataEh>

08005b80 <_ZN4blib3Lcd9backlightEv>:
    }

    void Lcd::backlight()
    {
        mBlackLight = LCD_BLACKLIGHT;
 8005b80:	2108      	movs	r1, #8
 8005b82:	7401      	strb	r1, [r0, #16]
        sendData(mBlackLight);
 8005b84:	f7ff bed2 	b.w	800592c <_ZN4blib3Lcd8sendDataEh>

08005b88 <_ZN4blib13SerialMonitorD1Ev>:
        setSerialLevel(SerialLevel::SERIAL_LEVEL_1);    // TODO: test
    }
    SerialMonitor::~SerialMonitor()
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_0);
    }
 8005b88:	4770      	bx	lr

08005b8a <_ZN4blib13SerialMonitorD0Ev>:
    SerialMonitor::~SerialMonitor()
 8005b8a:	b510      	push	{r4, lr}
    }
 8005b8c:	2108      	movs	r1, #8
    SerialMonitor::~SerialMonitor()
 8005b8e:	4604      	mov	r4, r0
    }
 8005b90:	f000 f8fa 	bl	8005d88 <_ZdlPvj>
 8005b94:	4620      	mov	r0, r4
 8005b96:	bd10      	pop	{r4, pc}

08005b98 <_ZN4blib13SerialMonitorC1Ev>:
    SerialMonitor::SerialMonitor()
 8005b98:	4a02      	ldr	r2, [pc, #8]	; (8005ba4 <_ZN4blib13SerialMonitorC1Ev+0xc>)
 8005b9a:	6002      	str	r2, [r0, #0]
        else if (u8SerialLevel >= (uint8_t) SerialLevel::SERIAL_LEVEL_MAX)
        {
            u8SerialLevel = 0;
        }

        mSerialLevel = (SerialLevel) u8SerialLevel;
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	6042      	str	r2, [r0, #4]
    }
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	0800b630 	.word	0x0800b630

08005ba8 <_ZN4blib13SerialMonitor12serialLevel1Ev>:
    {
        return mSerialLevel;
    }

    void SerialMonitor::serialLevel1()
    {
 8005ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    if (mInstance == nullptr)
 8005bac:	4c56      	ldr	r4, [pc, #344]	; (8005d08 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x160>)
 8005bae:	ed2d 8b02 	vpush	{d8}
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	b0a9      	sub	sp, #164	; 0xa4
 8005bb6:	b933      	cbnz	r3, 8005bc6 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x1e>
                        mInstance = new T();
 8005bb8:	2048      	movs	r0, #72	; 0x48
 8005bba:	f000 f8f6 	bl	8005daa <_Znwj>
 8005bbe:	4605      	mov	r5, r0
 8005bc0:	f7ff fa42 	bl	8005048 <_ZN4blib6AnalogC1Ev>
 8005bc4:	6025      	str	r5, [r4, #0]
                    return *mInstance;
 8005bc6:	6827      	ldr	r7, [r4, #0]
                    if (mInstance == nullptr)
 8005bc8:	4c50      	ldr	r4, [pc, #320]	; (8005d0c <_ZN4blib13SerialMonitor12serialLevel1Ev+0x164>)
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	b933      	cbnz	r3, 8005bdc <_ZN4blib13SerialMonitor12serialLevel1Ev+0x34>
                        mInstance = new T();
 8005bce:	201c      	movs	r0, #28
 8005bd0:	f000 f8eb 	bl	8005daa <_Znwj>
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	f7ff fd63 	bl	80056a0 <_ZN4blib16DeviceProtectionC1Ev>
 8005bda:	6025      	str	r5, [r4, #0]
                    if (mInstance == nullptr)
 8005bdc:	4d4c      	ldr	r5, [pc, #304]	; (8005d10 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x168>)
                    return *mInstance;
 8005bde:	6824      	ldr	r4, [r4, #0]
                    if (mInstance == nullptr)
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b933      	cbnz	r3, 8005bf2 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x4a>
                        mInstance = new T();
 8005be4:	2024      	movs	r0, #36	; 0x24
 8005be6:	f000 f8e0 	bl	8005daa <_Znwj>
 8005bea:	4606      	mov	r6, r0
 8005bec:	f7ff fc86 	bl	80054fc <_ZN4blib13ChargeControlC1Ev>
 8005bf0:	602e      	str	r6, [r5, #0]
                    return *mInstance;
 8005bf2:	f8d5 9000 	ldr.w	r9, [r5]
                    if (mInstance == nullptr)
 8005bf6:	4d47      	ldr	r5, [pc, #284]	; (8005d14 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x16c>)
 8005bf8:	682e      	ldr	r6, [r5, #0]
 8005bfa:	b936      	cbnz	r6, 8005c0a <_ZN4blib13SerialMonitor12serialLevel1Ev+0x62>
                        mInstance = new T();
 8005bfc:	2008      	movs	r0, #8
 8005bfe:	f000 f8d4 	bl	8005daa <_Znwj>
 8005c02:	4b45      	ldr	r3, [pc, #276]	; (8005d18 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x170>)
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	8086      	strh	r6, [r0, #4]
 8005c08:	6028      	str	r0, [r5, #0]
        auto &analog = blib::Analog::getInstance();
        auto &devPrt = blib::DeviceProtection::getInstance();
        auto &chargeCtrl = blib::ChargeControl::getInstance();
        auto &sysMgr = blib::SystemManager::getInstance();

        LOGI(
 8005c0a:	68e3      	ldr	r3, [r4, #12]
 8005c0c:	931c      	str	r3, [sp, #112]	; 0x70
 8005c0e:	7c23      	ldrb	r3, [r4, #16]
 8005c10:	931d      	str	r3, [sp, #116]	; 0x74
 8005c12:	7ce3      	ldrb	r3, [r4, #19]
 8005c14:	931e      	str	r3, [sp, #120]	; 0x78
 8005c16:	7d63      	ldrb	r3, [r4, #21]
 8005c18:	931f      	str	r3, [sp, #124]	; 0x7c
 8005c1a:	7de3      	ldrb	r3, [r4, #23]
 8005c1c:	9320      	str	r3, [sp, #128]	; 0x80
 8005c1e:	7e23      	ldrb	r3, [r4, #24]
 8005c20:	9321      	str	r3, [sp, #132]	; 0x84
 8005c22:	7e63      	ldrb	r3, [r4, #25]
 8005c24:	9322      	str	r3, [sp, #136]	; 0x88
 8005c26:	7c63      	ldrb	r3, [r4, #17]
 8005c28:	9323      	str	r3, [sp, #140]	; 0x8c
 8005c2a:	4b3a      	ldr	r3, [pc, #232]	; (8005d14 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x16c>)
 8005c2c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	7ca2      	ldrb	r2, [r4, #18]
 8005c34:	791e      	ldrb	r6, [r3, #4]
 8005c36:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c3c:	9326      	str	r3, [sp, #152]	; 0x98
                print("[>]  ");
 8005c3e:	4837      	ldr	r0, [pc, #220]	; (8005d1c <_ZN4blib13SerialMonitor12serialLevel1Ev+0x174>)
 8005c40:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8005c44:	9227      	str	r2, [sp, #156]	; 0x9c
 8005c46:	eeb0 8a67 	vmov.f32	s16, s15
 8005c4a:	9324      	str	r3, [sp, #144]	; 0x90
 8005c4c:	f899 5011 	ldrb.w	r5, [r9, #17]
 8005c50:	7a24      	ldrb	r4, [r4, #8]
 8005c52:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8005c56:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 8005c5a:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8005c5e:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8005c62:	9125      	str	r1, [sp, #148]	; 0x94
 8005c64:	f7fb f9d4 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8005c68:	9925      	ldr	r1, [sp, #148]	; 0x94
 8005c6a:	4608      	mov	r0, r1
 8005c6c:	f7fa fc6c 	bl	8000548 <__aeabi_f2d>
 8005c70:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
 8005c74:	4640      	mov	r0, r8
 8005c76:	f7fa fc67 	bl	8000548 <__aeabi_f2d>
 8005c7a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 8005c7e:	4648      	mov	r0, r9
 8005c80:	f7fa fc62 	bl	8000548 <__aeabi_f2d>
 8005c84:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8005c88:	4658      	mov	r0, fp
 8005c8a:	f7fa fc5d 	bl	8000548 <__aeabi_f2d>
 8005c8e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8005c92:	4650      	mov	r0, sl
 8005c94:	f7fa fc58 	bl	8000548 <__aeabi_f2d>
 8005c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c9a:	9311      	str	r3, [sp, #68]	; 0x44
 8005c9c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8005ca0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8005ca4:	ee18 0a10 	vmov	r0, s16
 8005ca8:	f7fa fc4e 	bl	8000548 <__aeabi_f2d>
 8005cac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cae:	930a      	str	r3, [sp, #40]	; 0x28
 8005cb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cb6:	9308      	str	r3, [sp, #32]
 8005cb8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005cba:	9307      	str	r3, [sp, #28]
 8005cbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005cbe:	9306      	str	r3, [sp, #24]
 8005cc0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005cc2:	9305      	str	r3, [sp, #20]
 8005cc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005cc6:	9304      	str	r3, [sp, #16]
 8005cc8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005cca:	9302      	str	r3, [sp, #8]
 8005ccc:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x178>)
 8005cce:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8005cd0:	9301      	str	r3, [sp, #4]
 8005cd2:	234d      	movs	r3, #77	; 0x4d
 8005cd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005cd8:	9203      	str	r2, [sp, #12]
 8005cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005cde:	4a11      	ldr	r2, [pc, #68]	; (8005d24 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x17c>)
 8005ce0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ce2:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
 8005ce6:	4810      	ldr	r0, [pc, #64]	; (8005d28 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x180>)
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4b10      	ldr	r3, [pc, #64]	; (8005d2c <_ZN4blib13SerialMonitor12serialLevel1Ev+0x184>)
 8005cec:	f001 fa76 	bl	80071dc <sniprintf>
                print(mBuffer);
 8005cf0:	480d      	ldr	r0, [pc, #52]	; (8005d28 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x180>)
 8005cf2:	f7fb f98d 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8005cf6:	480e      	ldr	r0, [pc, #56]	; (8005d30 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x188>)
 8005cf8:	f7fb f98a 	bl	8001010 <_ZN4blib6Logger5printEPKc>
                " BYP:%d" " BuckEN:%d" " FAN:%d" " PI:%.2f" " PWM:%d" " PPWM:%d" " VI:%.2f" " VO:%.2f" " CI:%.2f" " CO:%.2f" " Temp:%.2f",
                devPrt.mERR, devPrt.mFLV, devPrt.mBNC, devPrt.mIUV, devPrt.mIOC, devPrt.mOOV,
                devPrt.mOOC, devPrt.mOTE, devPrt.mREC, devPrt.mBypassEnable, chargeCtrl.mBuckEnable,
                sysMgr.enableFan, analog.mPin, chargeCtrl.mPwm, chargeCtrl.mPredictPwm, analog.mVin,
                analog.mVout, analog.mIin, analog.mIout, analog.mTemp);
    }
 8005cfc:	b029      	add	sp, #164	; 0xa4
 8005cfe:	ecbd 8b02 	vpop	{d8}
 8005d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d06:	bf00      	nop
 8005d08:	20000214 	.word	0x20000214
 8005d0c:	20000208 	.word	0x20000208
 8005d10:	20000210 	.word	0x20000210
 8005d14:	20000204 	.word	0x20000204
 8005d18:	0800b3d8 	.word	0x0800b3d8
 8005d1c:	0800ac0d 	.word	0x0800ac0d
 8005d20:	0800b5b0 	.word	0x0800b5b0
 8005d24:	0800b50a 	.word	0x0800b50a
 8005d28:	2000040c 	.word	0x2000040c
 8005d2c:	0800b4f8 	.word	0x0800b4f8
 8005d30:	0800b9fc 	.word	0x0800b9fc

08005d34 <_ZN4blib13SerialMonitor12serialLevel2Ev>:
    void SerialMonitor::serialLevel2()
    {
 8005d34:	b508      	push	{r3, lr}
        LOGI(
 8005d36:	4903      	ldr	r1, [pc, #12]	; (8005d44 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x10>)
 8005d38:	4b03      	ldr	r3, [pc, #12]	; (8005d48 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x14>)
 8005d3a:	4804      	ldr	r0, [pc, #16]	; (8005d4c <_ZN4blib13SerialMonitor12serialLevel2Ev+0x18>)
 8005d3c:	2258      	movs	r2, #88	; 0x58
 8005d3e:	f7fb fa91 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " EN:" " FAN:" " SOC:" " T:" " LoopT:" "");
    }
 8005d42:	bd08      	pop	{r3, pc}
 8005d44:	0800b4f8 	.word	0x0800b4f8
 8005d48:	0800b5bd 	.word	0x0800b5bd
 8005d4c:	0800b5ca 	.word	0x0800b5ca

08005d50 <_ZN4blib13SerialMonitor12serialLevel3Ev>:
    void SerialMonitor::serialLevel3()
    {
 8005d50:	b508      	push	{r3, lr}
        LOGI();
 8005d52:	4903      	ldr	r1, [pc, #12]	; (8005d60 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x10>)
 8005d54:	4b03      	ldr	r3, [pc, #12]	; (8005d64 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x14>)
 8005d56:	4804      	ldr	r0, [pc, #16]	; (8005d68 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x18>)
 8005d58:	225d      	movs	r2, #93	; 0x5d
 8005d5a:	f7fb fa83 	bl	8001264 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8005d5e:	bd08      	pop	{r3, pc}
 8005d60:	0800b4f8 	.word	0x0800b4f8
 8005d64:	0800b619 	.word	0x0800b619
 8005d68:	0800b44d 	.word	0x0800b44d

08005d6c <_ZN4blib13SerialMonitor4showEv>:
        return mSerialLevel;
 8005d6c:	6843      	ldr	r3, [r0, #4]
        switch (getSerialLevel())
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d005      	beq.n	8005d7e <_ZN4blib13SerialMonitor4showEv+0x12>
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d005      	beq.n	8005d82 <_ZN4blib13SerialMonitor4showEv+0x16>
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d105      	bne.n	8005d86 <_ZN4blib13SerialMonitor4showEv+0x1a>
                serialLevel1();
 8005d7a:	f7ff bf15 	b.w	8005ba8 <_ZN4blib13SerialMonitor12serialLevel1Ev>
                serialLevel2();
 8005d7e:	f7ff bfd9 	b.w	8005d34 <_ZN4blib13SerialMonitor12serialLevel2Ev>
                serialLevel3();
 8005d82:	f7ff bfe5 	b.w	8005d50 <_ZN4blib13SerialMonitor12serialLevel3Ev>
    }
 8005d86:	4770      	bx	lr

08005d88 <_ZdlPvj>:
 8005d88:	f000 b820 	b.w	8005dcc <_ZdlPv>

08005d8c <__cxa_guard_acquire>:
 8005d8c:	6803      	ldr	r3, [r0, #0]
 8005d8e:	07db      	lsls	r3, r3, #31
 8005d90:	d406      	bmi.n	8005da0 <__cxa_guard_acquire+0x14>
 8005d92:	7843      	ldrb	r3, [r0, #1]
 8005d94:	b103      	cbz	r3, 8005d98 <__cxa_guard_acquire+0xc>
 8005d96:	deff      	udf	#255	; 0xff
 8005d98:	2301      	movs	r3, #1
 8005d9a:	7043      	strb	r3, [r0, #1]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	4770      	bx	lr
 8005da0:	2000      	movs	r0, #0
 8005da2:	4770      	bx	lr

08005da4 <__cxa_guard_release>:
 8005da4:	2301      	movs	r3, #1
 8005da6:	6003      	str	r3, [r0, #0]
 8005da8:	4770      	bx	lr

08005daa <_Znwj>:
 8005daa:	2801      	cmp	r0, #1
 8005dac:	bf38      	it	cc
 8005dae:	2001      	movcc	r0, #1
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4604      	mov	r4, r0
 8005db4:	4620      	mov	r0, r4
 8005db6:	f000 fa1d 	bl	80061f4 <malloc>
 8005dba:	b100      	cbz	r0, 8005dbe <_Znwj+0x14>
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	f000 f807 	bl	8005dd0 <_ZSt15get_new_handlerv>
 8005dc2:	b908      	cbnz	r0, 8005dc8 <_Znwj+0x1e>
 8005dc4:	f000 fa0e 	bl	80061e4 <abort>
 8005dc8:	4780      	blx	r0
 8005dca:	e7f3      	b.n	8005db4 <_Znwj+0xa>

08005dcc <_ZdlPv>:
 8005dcc:	f000 ba1a 	b.w	8006204 <free>

08005dd0 <_ZSt15get_new_handlerv>:
 8005dd0:	4b02      	ldr	r3, [pc, #8]	; (8005ddc <_ZSt15get_new_handlerv+0xc>)
 8005dd2:	6818      	ldr	r0, [r3, #0]
 8005dd4:	f3bf 8f5b 	dmb	ish
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	2000080c 	.word	0x2000080c

08005de0 <log>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	ed2d 8b02 	vpush	{d8}
 8005de6:	ec55 4b10 	vmov	r4, r5, d0
 8005dea:	f000 f841 	bl	8005e70 <__ieee754_log>
 8005dee:	4622      	mov	r2, r4
 8005df0:	462b      	mov	r3, r5
 8005df2:	4620      	mov	r0, r4
 8005df4:	4629      	mov	r1, r5
 8005df6:	eeb0 8a40 	vmov.f32	s16, s0
 8005dfa:	eef0 8a60 	vmov.f32	s17, s1
 8005dfe:	f7fa fe95 	bl	8000b2c <__aeabi_dcmpun>
 8005e02:	b998      	cbnz	r0, 8005e2c <log+0x4c>
 8005e04:	2200      	movs	r2, #0
 8005e06:	2300      	movs	r3, #0
 8005e08:	4620      	mov	r0, r4
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	f7fa fe84 	bl	8000b18 <__aeabi_dcmpgt>
 8005e10:	b960      	cbnz	r0, 8005e2c <log+0x4c>
 8005e12:	2200      	movs	r2, #0
 8005e14:	2300      	movs	r3, #0
 8005e16:	4620      	mov	r0, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f7fa fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e1e:	b160      	cbz	r0, 8005e3a <log+0x5a>
 8005e20:	f001 fb1a 	bl	8007458 <__errno>
 8005e24:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8005e50 <log+0x70>
 8005e28:	2322      	movs	r3, #34	; 0x22
 8005e2a:	6003      	str	r3, [r0, #0]
 8005e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8005e30:	eef0 0a68 	vmov.f32	s1, s17
 8005e34:	ecbd 8b02 	vpop	{d8}
 8005e38:	bd38      	pop	{r3, r4, r5, pc}
 8005e3a:	f001 fb0d 	bl	8007458 <__errno>
 8005e3e:	ecbd 8b02 	vpop	{d8}
 8005e42:	2321      	movs	r3, #33	; 0x21
 8005e44:	6003      	str	r3, [r0, #0]
 8005e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e4a:	4803      	ldr	r0, [pc, #12]	; (8005e58 <log+0x78>)
 8005e4c:	f000 b808 	b.w	8005e60 <nan>
 8005e50:	00000000 	.word	0x00000000
 8005e54:	fff00000 	.word	0xfff00000
 8005e58:	0800b9fd 	.word	0x0800b9fd
 8005e5c:	00000000 	.word	0x00000000

08005e60 <nan>:
 8005e60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005e68 <nan+0x8>
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	00000000 	.word	0x00000000
 8005e6c:	7ff80000 	.word	0x7ff80000

08005e70 <__ieee754_log>:
 8005e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e74:	ec51 0b10 	vmov	r0, r1, d0
 8005e78:	ed2d 8b04 	vpush	{d8-d9}
 8005e7c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005e80:	b083      	sub	sp, #12
 8005e82:	460d      	mov	r5, r1
 8005e84:	da29      	bge.n	8005eda <__ieee754_log+0x6a>
 8005e86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e8a:	4303      	orrs	r3, r0
 8005e8c:	ee10 2a10 	vmov	r2, s0
 8005e90:	d10c      	bne.n	8005eac <__ieee754_log+0x3c>
 8005e92:	49cf      	ldr	r1, [pc, #828]	; (80061d0 <__ieee754_log+0x360>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	2300      	movs	r3, #0
 8005e98:	2000      	movs	r0, #0
 8005e9a:	f7fa fcd7 	bl	800084c <__aeabi_ddiv>
 8005e9e:	ec41 0b10 	vmov	d0, r0, r1
 8005ea2:	b003      	add	sp, #12
 8005ea4:	ecbd 8b04 	vpop	{d8-d9}
 8005ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eac:	2900      	cmp	r1, #0
 8005eae:	da05      	bge.n	8005ebc <__ieee754_log+0x4c>
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	f7fa f9e9 	bl	8000288 <__aeabi_dsub>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e7ee      	b.n	8005e9a <__ieee754_log+0x2a>
 8005ebc:	4bc5      	ldr	r3, [pc, #788]	; (80061d4 <__ieee754_log+0x364>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f7fa fb9a 	bl	80005f8 <__aeabi_dmul>
 8005ec4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005ec8:	460d      	mov	r5, r1
 8005eca:	4ac3      	ldr	r2, [pc, #780]	; (80061d8 <__ieee754_log+0x368>)
 8005ecc:	4295      	cmp	r5, r2
 8005ece:	dd06      	ble.n	8005ede <__ieee754_log+0x6e>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	f7fa f9da 	bl	800028c <__adddf3>
 8005ed8:	e7e1      	b.n	8005e9e <__ieee754_log+0x2e>
 8005eda:	2300      	movs	r3, #0
 8005edc:	e7f5      	b.n	8005eca <__ieee754_log+0x5a>
 8005ede:	152c      	asrs	r4, r5, #20
 8005ee0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005ee4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005ee8:	441c      	add	r4, r3
 8005eea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005eee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ef6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005efa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005efe:	ea42 0105 	orr.w	r1, r2, r5
 8005f02:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005f06:	2200      	movs	r2, #0
 8005f08:	4bb4      	ldr	r3, [pc, #720]	; (80061dc <__ieee754_log+0x36c>)
 8005f0a:	f7fa f9bd 	bl	8000288 <__aeabi_dsub>
 8005f0e:	1cab      	adds	r3, r5, #2
 8005f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	4682      	mov	sl, r0
 8005f18:	468b      	mov	fp, r1
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	dc53      	bgt.n	8005fc8 <__ieee754_log+0x158>
 8005f20:	2300      	movs	r3, #0
 8005f22:	f7fa fdd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f26:	b1d0      	cbz	r0, 8005f5e <__ieee754_log+0xee>
 8005f28:	2c00      	cmp	r4, #0
 8005f2a:	f000 8122 	beq.w	8006172 <__ieee754_log+0x302>
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f7fa faf8 	bl	8000524 <__aeabi_i2d>
 8005f34:	a390      	add	r3, pc, #576	; (adr r3, 8006178 <__ieee754_log+0x308>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	460f      	mov	r7, r1
 8005f3e:	f7fa fb5b 	bl	80005f8 <__aeabi_dmul>
 8005f42:	a38f      	add	r3, pc, #572	; (adr r3, 8006180 <__ieee754_log+0x310>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	4604      	mov	r4, r0
 8005f4a:	460d      	mov	r5, r1
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	4639      	mov	r1, r7
 8005f50:	f7fa fb52 	bl	80005f8 <__aeabi_dmul>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	e7ba      	b.n	8005ed4 <__ieee754_log+0x64>
 8005f5e:	a38a      	add	r3, pc, #552	; (adr r3, 8006188 <__ieee754_log+0x318>)
 8005f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f64:	4650      	mov	r0, sl
 8005f66:	4659      	mov	r1, fp
 8005f68:	f7fa fb46 	bl	80005f8 <__aeabi_dmul>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	2000      	movs	r0, #0
 8005f72:	499b      	ldr	r1, [pc, #620]	; (80061e0 <__ieee754_log+0x370>)
 8005f74:	f7fa f988 	bl	8000288 <__aeabi_dsub>
 8005f78:	4652      	mov	r2, sl
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	460f      	mov	r7, r1
 8005f7e:	465b      	mov	r3, fp
 8005f80:	4650      	mov	r0, sl
 8005f82:	4659      	mov	r1, fp
 8005f84:	f7fa fb38 	bl	80005f8 <__aeabi_dmul>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	4639      	mov	r1, r7
 8005f90:	f7fa fb32 	bl	80005f8 <__aeabi_dmul>
 8005f94:	4606      	mov	r6, r0
 8005f96:	460f      	mov	r7, r1
 8005f98:	b914      	cbnz	r4, 8005fa0 <__ieee754_log+0x130>
 8005f9a:	4632      	mov	r2, r6
 8005f9c:	463b      	mov	r3, r7
 8005f9e:	e0a2      	b.n	80060e6 <__ieee754_log+0x276>
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f7fa fabf 	bl	8000524 <__aeabi_i2d>
 8005fa6:	a374      	add	r3, pc, #464	; (adr r3, 8006178 <__ieee754_log+0x308>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	4680      	mov	r8, r0
 8005fae:	4689      	mov	r9, r1
 8005fb0:	f7fa fb22 	bl	80005f8 <__aeabi_dmul>
 8005fb4:	a372      	add	r3, pc, #456	; (adr r3, 8006180 <__ieee754_log+0x310>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	4604      	mov	r4, r0
 8005fbc:	460d      	mov	r5, r1
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	f7fa fb19 	bl	80005f8 <__aeabi_dmul>
 8005fc6:	e0a7      	b.n	8006118 <__ieee754_log+0x2a8>
 8005fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fcc:	f7fa f95e 	bl	800028c <__adddf3>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4650      	mov	r0, sl
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	f7fa fc38 	bl	800084c <__aeabi_ddiv>
 8005fdc:	ec41 0b18 	vmov	d8, r0, r1
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f7fa fa9f 	bl	8000524 <__aeabi_i2d>
 8005fe6:	ec53 2b18 	vmov	r2, r3, d8
 8005fea:	ec41 0b19 	vmov	d9, r0, r1
 8005fee:	ec51 0b18 	vmov	r0, r1, d8
 8005ff2:	f7fa fb01 	bl	80005f8 <__aeabi_dmul>
 8005ff6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8005ffa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4680      	mov	r8, r0
 8006006:	4689      	mov	r9, r1
 8006008:	f7fa faf6 	bl	80005f8 <__aeabi_dmul>
 800600c:	a360      	add	r3, pc, #384	; (adr r3, 8006190 <__ieee754_log+0x320>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	4606      	mov	r6, r0
 8006014:	460f      	mov	r7, r1
 8006016:	f7fa faef 	bl	80005f8 <__aeabi_dmul>
 800601a:	a35f      	add	r3, pc, #380	; (adr r3, 8006198 <__ieee754_log+0x328>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa f934 	bl	800028c <__adddf3>
 8006024:	4632      	mov	r2, r6
 8006026:	463b      	mov	r3, r7
 8006028:	f7fa fae6 	bl	80005f8 <__aeabi_dmul>
 800602c:	a35c      	add	r3, pc, #368	; (adr r3, 80061a0 <__ieee754_log+0x330>)
 800602e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006032:	f7fa f92b 	bl	800028c <__adddf3>
 8006036:	4632      	mov	r2, r6
 8006038:	463b      	mov	r3, r7
 800603a:	f7fa fadd 	bl	80005f8 <__aeabi_dmul>
 800603e:	a35a      	add	r3, pc, #360	; (adr r3, 80061a8 <__ieee754_log+0x338>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f7fa f922 	bl	800028c <__adddf3>
 8006048:	4642      	mov	r2, r8
 800604a:	464b      	mov	r3, r9
 800604c:	f7fa fad4 	bl	80005f8 <__aeabi_dmul>
 8006050:	a357      	add	r3, pc, #348	; (adr r3, 80061b0 <__ieee754_log+0x340>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	4680      	mov	r8, r0
 8006058:	4689      	mov	r9, r1
 800605a:	4630      	mov	r0, r6
 800605c:	4639      	mov	r1, r7
 800605e:	f7fa facb 	bl	80005f8 <__aeabi_dmul>
 8006062:	a355      	add	r3, pc, #340	; (adr r3, 80061b8 <__ieee754_log+0x348>)
 8006064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006068:	f7fa f910 	bl	800028c <__adddf3>
 800606c:	4632      	mov	r2, r6
 800606e:	463b      	mov	r3, r7
 8006070:	f7fa fac2 	bl	80005f8 <__aeabi_dmul>
 8006074:	a352      	add	r3, pc, #328	; (adr r3, 80061c0 <__ieee754_log+0x350>)
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f7fa f907 	bl	800028c <__adddf3>
 800607e:	4632      	mov	r2, r6
 8006080:	463b      	mov	r3, r7
 8006082:	f7fa fab9 	bl	80005f8 <__aeabi_dmul>
 8006086:	460b      	mov	r3, r1
 8006088:	4602      	mov	r2, r0
 800608a:	4649      	mov	r1, r9
 800608c:	4640      	mov	r0, r8
 800608e:	f7fa f8fd 	bl	800028c <__adddf3>
 8006092:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006096:	9b01      	ldr	r3, [sp, #4]
 8006098:	3551      	adds	r5, #81	; 0x51
 800609a:	431d      	orrs	r5, r3
 800609c:	2d00      	cmp	r5, #0
 800609e:	4680      	mov	r8, r0
 80060a0:	4689      	mov	r9, r1
 80060a2:	dd48      	ble.n	8006136 <__ieee754_log+0x2c6>
 80060a4:	4b4e      	ldr	r3, [pc, #312]	; (80061e0 <__ieee754_log+0x370>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	4650      	mov	r0, sl
 80060aa:	4659      	mov	r1, fp
 80060ac:	f7fa faa4 	bl	80005f8 <__aeabi_dmul>
 80060b0:	4652      	mov	r2, sl
 80060b2:	465b      	mov	r3, fp
 80060b4:	f7fa faa0 	bl	80005f8 <__aeabi_dmul>
 80060b8:	4602      	mov	r2, r0
 80060ba:	460b      	mov	r3, r1
 80060bc:	4606      	mov	r6, r0
 80060be:	460f      	mov	r7, r1
 80060c0:	4640      	mov	r0, r8
 80060c2:	4649      	mov	r1, r9
 80060c4:	f7fa f8e2 	bl	800028c <__adddf3>
 80060c8:	ec53 2b18 	vmov	r2, r3, d8
 80060cc:	f7fa fa94 	bl	80005f8 <__aeabi_dmul>
 80060d0:	4680      	mov	r8, r0
 80060d2:	4689      	mov	r9, r1
 80060d4:	b964      	cbnz	r4, 80060f0 <__ieee754_log+0x280>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4630      	mov	r0, r6
 80060dc:	4639      	mov	r1, r7
 80060de:	f7fa f8d3 	bl	8000288 <__aeabi_dsub>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4650      	mov	r0, sl
 80060e8:	4659      	mov	r1, fp
 80060ea:	f7fa f8cd 	bl	8000288 <__aeabi_dsub>
 80060ee:	e6d6      	b.n	8005e9e <__ieee754_log+0x2e>
 80060f0:	a321      	add	r3, pc, #132	; (adr r3, 8006178 <__ieee754_log+0x308>)
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	ec51 0b19 	vmov	r0, r1, d9
 80060fa:	f7fa fa7d 	bl	80005f8 <__aeabi_dmul>
 80060fe:	a320      	add	r3, pc, #128	; (adr r3, 8006180 <__ieee754_log+0x310>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	4604      	mov	r4, r0
 8006106:	460d      	mov	r5, r1
 8006108:	ec51 0b19 	vmov	r0, r1, d9
 800610c:	f7fa fa74 	bl	80005f8 <__aeabi_dmul>
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	f7fa f8ba 	bl	800028c <__adddf3>
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa f8b2 	bl	8000288 <__aeabi_dsub>
 8006124:	4652      	mov	r2, sl
 8006126:	465b      	mov	r3, fp
 8006128:	f7fa f8ae 	bl	8000288 <__aeabi_dsub>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	4620      	mov	r0, r4
 8006132:	4629      	mov	r1, r5
 8006134:	e7d9      	b.n	80060ea <__ieee754_log+0x27a>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4650      	mov	r0, sl
 800613c:	4659      	mov	r1, fp
 800613e:	f7fa f8a3 	bl	8000288 <__aeabi_dsub>
 8006142:	ec53 2b18 	vmov	r2, r3, d8
 8006146:	f7fa fa57 	bl	80005f8 <__aeabi_dmul>
 800614a:	4606      	mov	r6, r0
 800614c:	460f      	mov	r7, r1
 800614e:	2c00      	cmp	r4, #0
 8006150:	f43f af23 	beq.w	8005f9a <__ieee754_log+0x12a>
 8006154:	a308      	add	r3, pc, #32	; (adr r3, 8006178 <__ieee754_log+0x308>)
 8006156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615a:	ec51 0b19 	vmov	r0, r1, d9
 800615e:	f7fa fa4b 	bl	80005f8 <__aeabi_dmul>
 8006162:	a307      	add	r3, pc, #28	; (adr r3, 8006180 <__ieee754_log+0x310>)
 8006164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006168:	4604      	mov	r4, r0
 800616a:	460d      	mov	r5, r1
 800616c:	ec51 0b19 	vmov	r0, r1, d9
 8006170:	e727      	b.n	8005fc2 <__ieee754_log+0x152>
 8006172:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80061c8 <__ieee754_log+0x358>
 8006176:	e694      	b.n	8005ea2 <__ieee754_log+0x32>
 8006178:	fee00000 	.word	0xfee00000
 800617c:	3fe62e42 	.word	0x3fe62e42
 8006180:	35793c76 	.word	0x35793c76
 8006184:	3dea39ef 	.word	0x3dea39ef
 8006188:	55555555 	.word	0x55555555
 800618c:	3fd55555 	.word	0x3fd55555
 8006190:	df3e5244 	.word	0xdf3e5244
 8006194:	3fc2f112 	.word	0x3fc2f112
 8006198:	96cb03de 	.word	0x96cb03de
 800619c:	3fc74664 	.word	0x3fc74664
 80061a0:	94229359 	.word	0x94229359
 80061a4:	3fd24924 	.word	0x3fd24924
 80061a8:	55555593 	.word	0x55555593
 80061ac:	3fe55555 	.word	0x3fe55555
 80061b0:	d078c69f 	.word	0xd078c69f
 80061b4:	3fc39a09 	.word	0x3fc39a09
 80061b8:	1d8e78af 	.word	0x1d8e78af
 80061bc:	3fcc71c5 	.word	0x3fcc71c5
 80061c0:	9997fa04 	.word	0x9997fa04
 80061c4:	3fd99999 	.word	0x3fd99999
	...
 80061d0:	c3500000 	.word	0xc3500000
 80061d4:	43500000 	.word	0x43500000
 80061d8:	7fefffff 	.word	0x7fefffff
 80061dc:	3ff00000 	.word	0x3ff00000
 80061e0:	3fe00000 	.word	0x3fe00000

080061e4 <abort>:
 80061e4:	b508      	push	{r3, lr}
 80061e6:	2006      	movs	r0, #6
 80061e8:	f001 f8c0 	bl	800736c <raise>
 80061ec:	2001      	movs	r0, #1
 80061ee:	f7fc ff3d 	bl	800306c <_exit>
	...

080061f4 <malloc>:
 80061f4:	4b02      	ldr	r3, [pc, #8]	; (8006200 <malloc+0xc>)
 80061f6:	4601      	mov	r1, r0
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	f000 b82b 	b.w	8006254 <_malloc_r>
 80061fe:	bf00      	nop
 8006200:	20000074 	.word	0x20000074

08006204 <free>:
 8006204:	4b02      	ldr	r3, [pc, #8]	; (8006210 <free+0xc>)
 8006206:	4601      	mov	r1, r0
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	f001 bfeb 	b.w	80081e4 <_free_r>
 800620e:	bf00      	nop
 8006210:	20000074 	.word	0x20000074

08006214 <sbrk_aligned>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4e0e      	ldr	r6, [pc, #56]	; (8006250 <sbrk_aligned+0x3c>)
 8006218:	460c      	mov	r4, r1
 800621a:	6831      	ldr	r1, [r6, #0]
 800621c:	4605      	mov	r5, r0
 800621e:	b911      	cbnz	r1, 8006226 <sbrk_aligned+0x12>
 8006220:	f001 f8f8 	bl	8007414 <_sbrk_r>
 8006224:	6030      	str	r0, [r6, #0]
 8006226:	4621      	mov	r1, r4
 8006228:	4628      	mov	r0, r5
 800622a:	f001 f8f3 	bl	8007414 <_sbrk_r>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d00a      	beq.n	8006248 <sbrk_aligned+0x34>
 8006232:	1cc4      	adds	r4, r0, #3
 8006234:	f024 0403 	bic.w	r4, r4, #3
 8006238:	42a0      	cmp	r0, r4
 800623a:	d007      	beq.n	800624c <sbrk_aligned+0x38>
 800623c:	1a21      	subs	r1, r4, r0
 800623e:	4628      	mov	r0, r5
 8006240:	f001 f8e8 	bl	8007414 <_sbrk_r>
 8006244:	3001      	adds	r0, #1
 8006246:	d101      	bne.n	800624c <sbrk_aligned+0x38>
 8006248:	f04f 34ff 	mov.w	r4, #4294967295
 800624c:	4620      	mov	r0, r4
 800624e:	bd70      	pop	{r4, r5, r6, pc}
 8006250:	20000814 	.word	0x20000814

08006254 <_malloc_r>:
 8006254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006258:	1ccd      	adds	r5, r1, #3
 800625a:	f025 0503 	bic.w	r5, r5, #3
 800625e:	3508      	adds	r5, #8
 8006260:	2d0c      	cmp	r5, #12
 8006262:	bf38      	it	cc
 8006264:	250c      	movcc	r5, #12
 8006266:	2d00      	cmp	r5, #0
 8006268:	4607      	mov	r7, r0
 800626a:	db01      	blt.n	8006270 <_malloc_r+0x1c>
 800626c:	42a9      	cmp	r1, r5
 800626e:	d905      	bls.n	800627c <_malloc_r+0x28>
 8006270:	230c      	movs	r3, #12
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	2600      	movs	r6, #0
 8006276:	4630      	mov	r0, r6
 8006278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006350 <_malloc_r+0xfc>
 8006280:	f000 f868 	bl	8006354 <__malloc_lock>
 8006284:	f8d8 3000 	ldr.w	r3, [r8]
 8006288:	461c      	mov	r4, r3
 800628a:	bb5c      	cbnz	r4, 80062e4 <_malloc_r+0x90>
 800628c:	4629      	mov	r1, r5
 800628e:	4638      	mov	r0, r7
 8006290:	f7ff ffc0 	bl	8006214 <sbrk_aligned>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	4604      	mov	r4, r0
 8006298:	d155      	bne.n	8006346 <_malloc_r+0xf2>
 800629a:	f8d8 4000 	ldr.w	r4, [r8]
 800629e:	4626      	mov	r6, r4
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	d145      	bne.n	8006330 <_malloc_r+0xdc>
 80062a4:	2c00      	cmp	r4, #0
 80062a6:	d048      	beq.n	800633a <_malloc_r+0xe6>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	4631      	mov	r1, r6
 80062ac:	4638      	mov	r0, r7
 80062ae:	eb04 0903 	add.w	r9, r4, r3
 80062b2:	f001 f8af 	bl	8007414 <_sbrk_r>
 80062b6:	4581      	cmp	r9, r0
 80062b8:	d13f      	bne.n	800633a <_malloc_r+0xe6>
 80062ba:	6821      	ldr	r1, [r4, #0]
 80062bc:	1a6d      	subs	r5, r5, r1
 80062be:	4629      	mov	r1, r5
 80062c0:	4638      	mov	r0, r7
 80062c2:	f7ff ffa7 	bl	8006214 <sbrk_aligned>
 80062c6:	3001      	adds	r0, #1
 80062c8:	d037      	beq.n	800633a <_malloc_r+0xe6>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	442b      	add	r3, r5
 80062ce:	6023      	str	r3, [r4, #0]
 80062d0:	f8d8 3000 	ldr.w	r3, [r8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d038      	beq.n	800634a <_malloc_r+0xf6>
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	42a2      	cmp	r2, r4
 80062dc:	d12b      	bne.n	8006336 <_malloc_r+0xe2>
 80062de:	2200      	movs	r2, #0
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	e00f      	b.n	8006304 <_malloc_r+0xb0>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	1b52      	subs	r2, r2, r5
 80062e8:	d41f      	bmi.n	800632a <_malloc_r+0xd6>
 80062ea:	2a0b      	cmp	r2, #11
 80062ec:	d917      	bls.n	800631e <_malloc_r+0xca>
 80062ee:	1961      	adds	r1, r4, r5
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	6025      	str	r5, [r4, #0]
 80062f4:	bf18      	it	ne
 80062f6:	6059      	strne	r1, [r3, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	bf08      	it	eq
 80062fc:	f8c8 1000 	streq.w	r1, [r8]
 8006300:	5162      	str	r2, [r4, r5]
 8006302:	604b      	str	r3, [r1, #4]
 8006304:	4638      	mov	r0, r7
 8006306:	f104 060b 	add.w	r6, r4, #11
 800630a:	f000 f829 	bl	8006360 <__malloc_unlock>
 800630e:	f026 0607 	bic.w	r6, r6, #7
 8006312:	1d23      	adds	r3, r4, #4
 8006314:	1af2      	subs	r2, r6, r3
 8006316:	d0ae      	beq.n	8006276 <_malloc_r+0x22>
 8006318:	1b9b      	subs	r3, r3, r6
 800631a:	50a3      	str	r3, [r4, r2]
 800631c:	e7ab      	b.n	8006276 <_malloc_r+0x22>
 800631e:	42a3      	cmp	r3, r4
 8006320:	6862      	ldr	r2, [r4, #4]
 8006322:	d1dd      	bne.n	80062e0 <_malloc_r+0x8c>
 8006324:	f8c8 2000 	str.w	r2, [r8]
 8006328:	e7ec      	b.n	8006304 <_malloc_r+0xb0>
 800632a:	4623      	mov	r3, r4
 800632c:	6864      	ldr	r4, [r4, #4]
 800632e:	e7ac      	b.n	800628a <_malloc_r+0x36>
 8006330:	4634      	mov	r4, r6
 8006332:	6876      	ldr	r6, [r6, #4]
 8006334:	e7b4      	b.n	80062a0 <_malloc_r+0x4c>
 8006336:	4613      	mov	r3, r2
 8006338:	e7cc      	b.n	80062d4 <_malloc_r+0x80>
 800633a:	230c      	movs	r3, #12
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4638      	mov	r0, r7
 8006340:	f000 f80e 	bl	8006360 <__malloc_unlock>
 8006344:	e797      	b.n	8006276 <_malloc_r+0x22>
 8006346:	6025      	str	r5, [r4, #0]
 8006348:	e7dc      	b.n	8006304 <_malloc_r+0xb0>
 800634a:	605b      	str	r3, [r3, #4]
 800634c:	deff      	udf	#255	; 0xff
 800634e:	bf00      	nop
 8006350:	20000810 	.word	0x20000810

08006354 <__malloc_lock>:
 8006354:	4801      	ldr	r0, [pc, #4]	; (800635c <__malloc_lock+0x8>)
 8006356:	f001 b8aa 	b.w	80074ae <__retarget_lock_acquire_recursive>
 800635a:	bf00      	nop
 800635c:	20000958 	.word	0x20000958

08006360 <__malloc_unlock>:
 8006360:	4801      	ldr	r0, [pc, #4]	; (8006368 <__malloc_unlock+0x8>)
 8006362:	f001 b8a5 	b.w	80074b0 <__retarget_lock_release_recursive>
 8006366:	bf00      	nop
 8006368:	20000958 	.word	0x20000958

0800636c <__cvt>:
 800636c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006370:	ec55 4b10 	vmov	r4, r5, d0
 8006374:	2d00      	cmp	r5, #0
 8006376:	460e      	mov	r6, r1
 8006378:	4619      	mov	r1, r3
 800637a:	462b      	mov	r3, r5
 800637c:	bfbb      	ittet	lt
 800637e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006382:	461d      	movlt	r5, r3
 8006384:	2300      	movge	r3, #0
 8006386:	232d      	movlt	r3, #45	; 0x2d
 8006388:	700b      	strb	r3, [r1, #0]
 800638a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800638c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006390:	4691      	mov	r9, r2
 8006392:	f023 0820 	bic.w	r8, r3, #32
 8006396:	bfbc      	itt	lt
 8006398:	4622      	movlt	r2, r4
 800639a:	4614      	movlt	r4, r2
 800639c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063a0:	d005      	beq.n	80063ae <__cvt+0x42>
 80063a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063a6:	d100      	bne.n	80063aa <__cvt+0x3e>
 80063a8:	3601      	adds	r6, #1
 80063aa:	2102      	movs	r1, #2
 80063ac:	e000      	b.n	80063b0 <__cvt+0x44>
 80063ae:	2103      	movs	r1, #3
 80063b0:	ab03      	add	r3, sp, #12
 80063b2:	9301      	str	r3, [sp, #4]
 80063b4:	ab02      	add	r3, sp, #8
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	ec45 4b10 	vmov	d0, r4, r5
 80063bc:	4653      	mov	r3, sl
 80063be:	4632      	mov	r2, r6
 80063c0:	f001 f91e 	bl	8007600 <_dtoa_r>
 80063c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063c8:	4607      	mov	r7, r0
 80063ca:	d102      	bne.n	80063d2 <__cvt+0x66>
 80063cc:	f019 0f01 	tst.w	r9, #1
 80063d0:	d022      	beq.n	8006418 <__cvt+0xac>
 80063d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063d6:	eb07 0906 	add.w	r9, r7, r6
 80063da:	d110      	bne.n	80063fe <__cvt+0x92>
 80063dc:	783b      	ldrb	r3, [r7, #0]
 80063de:	2b30      	cmp	r3, #48	; 0x30
 80063e0:	d10a      	bne.n	80063f8 <__cvt+0x8c>
 80063e2:	2200      	movs	r2, #0
 80063e4:	2300      	movs	r3, #0
 80063e6:	4620      	mov	r0, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	f7fa fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80063ee:	b918      	cbnz	r0, 80063f8 <__cvt+0x8c>
 80063f0:	f1c6 0601 	rsb	r6, r6, #1
 80063f4:	f8ca 6000 	str.w	r6, [sl]
 80063f8:	f8da 3000 	ldr.w	r3, [sl]
 80063fc:	4499      	add	r9, r3
 80063fe:	2200      	movs	r2, #0
 8006400:	2300      	movs	r3, #0
 8006402:	4620      	mov	r0, r4
 8006404:	4629      	mov	r1, r5
 8006406:	f7fa fb5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800640a:	b108      	cbz	r0, 8006410 <__cvt+0xa4>
 800640c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006410:	2230      	movs	r2, #48	; 0x30
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	454b      	cmp	r3, r9
 8006416:	d307      	bcc.n	8006428 <__cvt+0xbc>
 8006418:	9b03      	ldr	r3, [sp, #12]
 800641a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800641c:	1bdb      	subs	r3, r3, r7
 800641e:	4638      	mov	r0, r7
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	b004      	add	sp, #16
 8006424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006428:	1c59      	adds	r1, r3, #1
 800642a:	9103      	str	r1, [sp, #12]
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e7f0      	b.n	8006412 <__cvt+0xa6>

08006430 <__exponent>:
 8006430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006432:	4603      	mov	r3, r0
 8006434:	2900      	cmp	r1, #0
 8006436:	bfb8      	it	lt
 8006438:	4249      	neglt	r1, r1
 800643a:	f803 2b02 	strb.w	r2, [r3], #2
 800643e:	bfb4      	ite	lt
 8006440:	222d      	movlt	r2, #45	; 0x2d
 8006442:	222b      	movge	r2, #43	; 0x2b
 8006444:	2909      	cmp	r1, #9
 8006446:	7042      	strb	r2, [r0, #1]
 8006448:	dd2a      	ble.n	80064a0 <__exponent+0x70>
 800644a:	f10d 0207 	add.w	r2, sp, #7
 800644e:	4617      	mov	r7, r2
 8006450:	260a      	movs	r6, #10
 8006452:	4694      	mov	ip, r2
 8006454:	fb91 f5f6 	sdiv	r5, r1, r6
 8006458:	fb06 1415 	mls	r4, r6, r5, r1
 800645c:	3430      	adds	r4, #48	; 0x30
 800645e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006462:	460c      	mov	r4, r1
 8006464:	2c63      	cmp	r4, #99	; 0x63
 8006466:	f102 32ff 	add.w	r2, r2, #4294967295
 800646a:	4629      	mov	r1, r5
 800646c:	dcf1      	bgt.n	8006452 <__exponent+0x22>
 800646e:	3130      	adds	r1, #48	; 0x30
 8006470:	f1ac 0402 	sub.w	r4, ip, #2
 8006474:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006478:	1c41      	adds	r1, r0, #1
 800647a:	4622      	mov	r2, r4
 800647c:	42ba      	cmp	r2, r7
 800647e:	d30a      	bcc.n	8006496 <__exponent+0x66>
 8006480:	f10d 0209 	add.w	r2, sp, #9
 8006484:	eba2 020c 	sub.w	r2, r2, ip
 8006488:	42bc      	cmp	r4, r7
 800648a:	bf88      	it	hi
 800648c:	2200      	movhi	r2, #0
 800648e:	4413      	add	r3, r2
 8006490:	1a18      	subs	r0, r3, r0
 8006492:	b003      	add	sp, #12
 8006494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006496:	f812 5b01 	ldrb.w	r5, [r2], #1
 800649a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800649e:	e7ed      	b.n	800647c <__exponent+0x4c>
 80064a0:	2330      	movs	r3, #48	; 0x30
 80064a2:	3130      	adds	r1, #48	; 0x30
 80064a4:	7083      	strb	r3, [r0, #2]
 80064a6:	70c1      	strb	r1, [r0, #3]
 80064a8:	1d03      	adds	r3, r0, #4
 80064aa:	e7f1      	b.n	8006490 <__exponent+0x60>

080064ac <_printf_float>:
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	ed2d 8b02 	vpush	{d8}
 80064b4:	b08d      	sub	sp, #52	; 0x34
 80064b6:	460c      	mov	r4, r1
 80064b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064bc:	4616      	mov	r6, r2
 80064be:	461f      	mov	r7, r3
 80064c0:	4605      	mov	r5, r0
 80064c2:	f000 ff5b 	bl	800737c <_localeconv_r>
 80064c6:	f8d0 a000 	ldr.w	sl, [r0]
 80064ca:	4650      	mov	r0, sl
 80064cc:	f7f9 fed0 	bl	8000270 <strlen>
 80064d0:	2300      	movs	r3, #0
 80064d2:	930a      	str	r3, [sp, #40]	; 0x28
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	9305      	str	r3, [sp, #20]
 80064d8:	f8d8 3000 	ldr.w	r3, [r8]
 80064dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064e0:	3307      	adds	r3, #7
 80064e2:	f023 0307 	bic.w	r3, r3, #7
 80064e6:	f103 0208 	add.w	r2, r3, #8
 80064ea:	f8c8 2000 	str.w	r2, [r8]
 80064ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80064f6:	9307      	str	r3, [sp, #28]
 80064f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80064fc:	ee08 0a10 	vmov	s16, r0
 8006500:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006504:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006508:	4b9e      	ldr	r3, [pc, #632]	; (8006784 <_printf_float+0x2d8>)
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	f7fa fb0d 	bl	8000b2c <__aeabi_dcmpun>
 8006512:	bb88      	cbnz	r0, 8006578 <_printf_float+0xcc>
 8006514:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006518:	4b9a      	ldr	r3, [pc, #616]	; (8006784 <_printf_float+0x2d8>)
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	f7fa fae7 	bl	8000af0 <__aeabi_dcmple>
 8006522:	bb48      	cbnz	r0, 8006578 <_printf_float+0xcc>
 8006524:	2200      	movs	r2, #0
 8006526:	2300      	movs	r3, #0
 8006528:	4640      	mov	r0, r8
 800652a:	4649      	mov	r1, r9
 800652c:	f7fa fad6 	bl	8000adc <__aeabi_dcmplt>
 8006530:	b110      	cbz	r0, 8006538 <_printf_float+0x8c>
 8006532:	232d      	movs	r3, #45	; 0x2d
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006538:	4a93      	ldr	r2, [pc, #588]	; (8006788 <_printf_float+0x2dc>)
 800653a:	4b94      	ldr	r3, [pc, #592]	; (800678c <_printf_float+0x2e0>)
 800653c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006540:	bf94      	ite	ls
 8006542:	4690      	movls	r8, r2
 8006544:	4698      	movhi	r8, r3
 8006546:	2303      	movs	r3, #3
 8006548:	6123      	str	r3, [r4, #16]
 800654a:	9b05      	ldr	r3, [sp, #20]
 800654c:	f023 0304 	bic.w	r3, r3, #4
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	f04f 0900 	mov.w	r9, #0
 8006556:	9700      	str	r7, [sp, #0]
 8006558:	4633      	mov	r3, r6
 800655a:	aa0b      	add	r2, sp, #44	; 0x2c
 800655c:	4621      	mov	r1, r4
 800655e:	4628      	mov	r0, r5
 8006560:	f000 f9da 	bl	8006918 <_printf_common>
 8006564:	3001      	adds	r0, #1
 8006566:	f040 8090 	bne.w	800668a <_printf_float+0x1de>
 800656a:	f04f 30ff 	mov.w	r0, #4294967295
 800656e:	b00d      	add	sp, #52	; 0x34
 8006570:	ecbd 8b02 	vpop	{d8}
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	4640      	mov	r0, r8
 800657e:	4649      	mov	r1, r9
 8006580:	f7fa fad4 	bl	8000b2c <__aeabi_dcmpun>
 8006584:	b140      	cbz	r0, 8006598 <_printf_float+0xec>
 8006586:	464b      	mov	r3, r9
 8006588:	2b00      	cmp	r3, #0
 800658a:	bfbc      	itt	lt
 800658c:	232d      	movlt	r3, #45	; 0x2d
 800658e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006592:	4a7f      	ldr	r2, [pc, #508]	; (8006790 <_printf_float+0x2e4>)
 8006594:	4b7f      	ldr	r3, [pc, #508]	; (8006794 <_printf_float+0x2e8>)
 8006596:	e7d1      	b.n	800653c <_printf_float+0x90>
 8006598:	6863      	ldr	r3, [r4, #4]
 800659a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800659e:	9206      	str	r2, [sp, #24]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	d13f      	bne.n	8006624 <_printf_float+0x178>
 80065a4:	2306      	movs	r3, #6
 80065a6:	6063      	str	r3, [r4, #4]
 80065a8:	9b05      	ldr	r3, [sp, #20]
 80065aa:	6861      	ldr	r1, [r4, #4]
 80065ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065b0:	2300      	movs	r3, #0
 80065b2:	9303      	str	r3, [sp, #12]
 80065b4:	ab0a      	add	r3, sp, #40	; 0x28
 80065b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065ba:	ab09      	add	r3, sp, #36	; 0x24
 80065bc:	ec49 8b10 	vmov	d0, r8, r9
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	6022      	str	r2, [r4, #0]
 80065c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065c8:	4628      	mov	r0, r5
 80065ca:	f7ff fecf 	bl	800636c <__cvt>
 80065ce:	9b06      	ldr	r3, [sp, #24]
 80065d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065d2:	2b47      	cmp	r3, #71	; 0x47
 80065d4:	4680      	mov	r8, r0
 80065d6:	d108      	bne.n	80065ea <_printf_float+0x13e>
 80065d8:	1cc8      	adds	r0, r1, #3
 80065da:	db02      	blt.n	80065e2 <_printf_float+0x136>
 80065dc:	6863      	ldr	r3, [r4, #4]
 80065de:	4299      	cmp	r1, r3
 80065e0:	dd41      	ble.n	8006666 <_printf_float+0x1ba>
 80065e2:	f1ab 0302 	sub.w	r3, fp, #2
 80065e6:	fa5f fb83 	uxtb.w	fp, r3
 80065ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065ee:	d820      	bhi.n	8006632 <_printf_float+0x186>
 80065f0:	3901      	subs	r1, #1
 80065f2:	465a      	mov	r2, fp
 80065f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80065f8:	9109      	str	r1, [sp, #36]	; 0x24
 80065fa:	f7ff ff19 	bl	8006430 <__exponent>
 80065fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006600:	1813      	adds	r3, r2, r0
 8006602:	2a01      	cmp	r2, #1
 8006604:	4681      	mov	r9, r0
 8006606:	6123      	str	r3, [r4, #16]
 8006608:	dc02      	bgt.n	8006610 <_printf_float+0x164>
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	07d2      	lsls	r2, r2, #31
 800660e:	d501      	bpl.n	8006614 <_printf_float+0x168>
 8006610:	3301      	adds	r3, #1
 8006612:	6123      	str	r3, [r4, #16]
 8006614:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006618:	2b00      	cmp	r3, #0
 800661a:	d09c      	beq.n	8006556 <_printf_float+0xaa>
 800661c:	232d      	movs	r3, #45	; 0x2d
 800661e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006622:	e798      	b.n	8006556 <_printf_float+0xaa>
 8006624:	9a06      	ldr	r2, [sp, #24]
 8006626:	2a47      	cmp	r2, #71	; 0x47
 8006628:	d1be      	bne.n	80065a8 <_printf_float+0xfc>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1bc      	bne.n	80065a8 <_printf_float+0xfc>
 800662e:	2301      	movs	r3, #1
 8006630:	e7b9      	b.n	80065a6 <_printf_float+0xfa>
 8006632:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006636:	d118      	bne.n	800666a <_printf_float+0x1be>
 8006638:	2900      	cmp	r1, #0
 800663a:	6863      	ldr	r3, [r4, #4]
 800663c:	dd0b      	ble.n	8006656 <_printf_float+0x1aa>
 800663e:	6121      	str	r1, [r4, #16]
 8006640:	b913      	cbnz	r3, 8006648 <_printf_float+0x19c>
 8006642:	6822      	ldr	r2, [r4, #0]
 8006644:	07d0      	lsls	r0, r2, #31
 8006646:	d502      	bpl.n	800664e <_printf_float+0x1a2>
 8006648:	3301      	adds	r3, #1
 800664a:	440b      	add	r3, r1
 800664c:	6123      	str	r3, [r4, #16]
 800664e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006650:	f04f 0900 	mov.w	r9, #0
 8006654:	e7de      	b.n	8006614 <_printf_float+0x168>
 8006656:	b913      	cbnz	r3, 800665e <_printf_float+0x1b2>
 8006658:	6822      	ldr	r2, [r4, #0]
 800665a:	07d2      	lsls	r2, r2, #31
 800665c:	d501      	bpl.n	8006662 <_printf_float+0x1b6>
 800665e:	3302      	adds	r3, #2
 8006660:	e7f4      	b.n	800664c <_printf_float+0x1a0>
 8006662:	2301      	movs	r3, #1
 8006664:	e7f2      	b.n	800664c <_printf_float+0x1a0>
 8006666:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800666a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666c:	4299      	cmp	r1, r3
 800666e:	db05      	blt.n	800667c <_printf_float+0x1d0>
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	6121      	str	r1, [r4, #16]
 8006674:	07d8      	lsls	r0, r3, #31
 8006676:	d5ea      	bpl.n	800664e <_printf_float+0x1a2>
 8006678:	1c4b      	adds	r3, r1, #1
 800667a:	e7e7      	b.n	800664c <_printf_float+0x1a0>
 800667c:	2900      	cmp	r1, #0
 800667e:	bfd4      	ite	le
 8006680:	f1c1 0202 	rsble	r2, r1, #2
 8006684:	2201      	movgt	r2, #1
 8006686:	4413      	add	r3, r2
 8006688:	e7e0      	b.n	800664c <_printf_float+0x1a0>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	055a      	lsls	r2, r3, #21
 800668e:	d407      	bmi.n	80066a0 <_printf_float+0x1f4>
 8006690:	6923      	ldr	r3, [r4, #16]
 8006692:	4642      	mov	r2, r8
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	d12c      	bne.n	80066f8 <_printf_float+0x24c>
 800669e:	e764      	b.n	800656a <_printf_float+0xbe>
 80066a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066a4:	f240 80e0 	bls.w	8006868 <_printf_float+0x3bc>
 80066a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066ac:	2200      	movs	r2, #0
 80066ae:	2300      	movs	r3, #0
 80066b0:	f7fa fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d034      	beq.n	8006722 <_printf_float+0x276>
 80066b8:	4a37      	ldr	r2, [pc, #220]	; (8006798 <_printf_float+0x2ec>)
 80066ba:	2301      	movs	r3, #1
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	47b8      	blx	r7
 80066c2:	3001      	adds	r0, #1
 80066c4:	f43f af51 	beq.w	800656a <_printf_float+0xbe>
 80066c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066cc:	429a      	cmp	r2, r3
 80066ce:	db02      	blt.n	80066d6 <_printf_float+0x22a>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	07d8      	lsls	r0, r3, #31
 80066d4:	d510      	bpl.n	80066f8 <_printf_float+0x24c>
 80066d6:	ee18 3a10 	vmov	r3, s16
 80066da:	4652      	mov	r2, sl
 80066dc:	4631      	mov	r1, r6
 80066de:	4628      	mov	r0, r5
 80066e0:	47b8      	blx	r7
 80066e2:	3001      	adds	r0, #1
 80066e4:	f43f af41 	beq.w	800656a <_printf_float+0xbe>
 80066e8:	f04f 0800 	mov.w	r8, #0
 80066ec:	f104 091a 	add.w	r9, r4, #26
 80066f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f2:	3b01      	subs	r3, #1
 80066f4:	4543      	cmp	r3, r8
 80066f6:	dc09      	bgt.n	800670c <_printf_float+0x260>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	079b      	lsls	r3, r3, #30
 80066fc:	f100 8107 	bmi.w	800690e <_printf_float+0x462>
 8006700:	68e0      	ldr	r0, [r4, #12]
 8006702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006704:	4298      	cmp	r0, r3
 8006706:	bfb8      	it	lt
 8006708:	4618      	movlt	r0, r3
 800670a:	e730      	b.n	800656e <_printf_float+0xc2>
 800670c:	2301      	movs	r3, #1
 800670e:	464a      	mov	r2, r9
 8006710:	4631      	mov	r1, r6
 8006712:	4628      	mov	r0, r5
 8006714:	47b8      	blx	r7
 8006716:	3001      	adds	r0, #1
 8006718:	f43f af27 	beq.w	800656a <_printf_float+0xbe>
 800671c:	f108 0801 	add.w	r8, r8, #1
 8006720:	e7e6      	b.n	80066f0 <_printf_float+0x244>
 8006722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	dc39      	bgt.n	800679c <_printf_float+0x2f0>
 8006728:	4a1b      	ldr	r2, [pc, #108]	; (8006798 <_printf_float+0x2ec>)
 800672a:	2301      	movs	r3, #1
 800672c:	4631      	mov	r1, r6
 800672e:	4628      	mov	r0, r5
 8006730:	47b8      	blx	r7
 8006732:	3001      	adds	r0, #1
 8006734:	f43f af19 	beq.w	800656a <_printf_float+0xbe>
 8006738:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800673c:	4313      	orrs	r3, r2
 800673e:	d102      	bne.n	8006746 <_printf_float+0x29a>
 8006740:	6823      	ldr	r3, [r4, #0]
 8006742:	07d9      	lsls	r1, r3, #31
 8006744:	d5d8      	bpl.n	80066f8 <_printf_float+0x24c>
 8006746:	ee18 3a10 	vmov	r3, s16
 800674a:	4652      	mov	r2, sl
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f af09 	beq.w	800656a <_printf_float+0xbe>
 8006758:	f04f 0900 	mov.w	r9, #0
 800675c:	f104 0a1a 	add.w	sl, r4, #26
 8006760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006762:	425b      	negs	r3, r3
 8006764:	454b      	cmp	r3, r9
 8006766:	dc01      	bgt.n	800676c <_printf_float+0x2c0>
 8006768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800676a:	e792      	b.n	8006692 <_printf_float+0x1e6>
 800676c:	2301      	movs	r3, #1
 800676e:	4652      	mov	r2, sl
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f aef7 	beq.w	800656a <_printf_float+0xbe>
 800677c:	f109 0901 	add.w	r9, r9, #1
 8006780:	e7ee      	b.n	8006760 <_printf_float+0x2b4>
 8006782:	bf00      	nop
 8006784:	7fefffff 	.word	0x7fefffff
 8006788:	0800b638 	.word	0x0800b638
 800678c:	0800b63c 	.word	0x0800b63c
 8006790:	0800b640 	.word	0x0800b640
 8006794:	0800b644 	.word	0x0800b644
 8006798:	0800abf7 	.word	0x0800abf7
 800679c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800679e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067a0:	429a      	cmp	r2, r3
 80067a2:	bfa8      	it	ge
 80067a4:	461a      	movge	r2, r3
 80067a6:	2a00      	cmp	r2, #0
 80067a8:	4691      	mov	r9, r2
 80067aa:	dc37      	bgt.n	800681c <_printf_float+0x370>
 80067ac:	f04f 0b00 	mov.w	fp, #0
 80067b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067b4:	f104 021a 	add.w	r2, r4, #26
 80067b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067ba:	9305      	str	r3, [sp, #20]
 80067bc:	eba3 0309 	sub.w	r3, r3, r9
 80067c0:	455b      	cmp	r3, fp
 80067c2:	dc33      	bgt.n	800682c <_printf_float+0x380>
 80067c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067c8:	429a      	cmp	r2, r3
 80067ca:	db3b      	blt.n	8006844 <_printf_float+0x398>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	07da      	lsls	r2, r3, #31
 80067d0:	d438      	bmi.n	8006844 <_printf_float+0x398>
 80067d2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80067d6:	eba2 0903 	sub.w	r9, r2, r3
 80067da:	9b05      	ldr	r3, [sp, #20]
 80067dc:	1ad2      	subs	r2, r2, r3
 80067de:	4591      	cmp	r9, r2
 80067e0:	bfa8      	it	ge
 80067e2:	4691      	movge	r9, r2
 80067e4:	f1b9 0f00 	cmp.w	r9, #0
 80067e8:	dc35      	bgt.n	8006856 <_printf_float+0x3aa>
 80067ea:	f04f 0800 	mov.w	r8, #0
 80067ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067f2:	f104 0a1a 	add.w	sl, r4, #26
 80067f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067fa:	1a9b      	subs	r3, r3, r2
 80067fc:	eba3 0309 	sub.w	r3, r3, r9
 8006800:	4543      	cmp	r3, r8
 8006802:	f77f af79 	ble.w	80066f8 <_printf_float+0x24c>
 8006806:	2301      	movs	r3, #1
 8006808:	4652      	mov	r2, sl
 800680a:	4631      	mov	r1, r6
 800680c:	4628      	mov	r0, r5
 800680e:	47b8      	blx	r7
 8006810:	3001      	adds	r0, #1
 8006812:	f43f aeaa 	beq.w	800656a <_printf_float+0xbe>
 8006816:	f108 0801 	add.w	r8, r8, #1
 800681a:	e7ec      	b.n	80067f6 <_printf_float+0x34a>
 800681c:	4613      	mov	r3, r2
 800681e:	4631      	mov	r1, r6
 8006820:	4642      	mov	r2, r8
 8006822:	4628      	mov	r0, r5
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	d1c0      	bne.n	80067ac <_printf_float+0x300>
 800682a:	e69e      	b.n	800656a <_printf_float+0xbe>
 800682c:	2301      	movs	r3, #1
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	9205      	str	r2, [sp, #20]
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f ae97 	beq.w	800656a <_printf_float+0xbe>
 800683c:	9a05      	ldr	r2, [sp, #20]
 800683e:	f10b 0b01 	add.w	fp, fp, #1
 8006842:	e7b9      	b.n	80067b8 <_printf_float+0x30c>
 8006844:	ee18 3a10 	vmov	r3, s16
 8006848:	4652      	mov	r2, sl
 800684a:	4631      	mov	r1, r6
 800684c:	4628      	mov	r0, r5
 800684e:	47b8      	blx	r7
 8006850:	3001      	adds	r0, #1
 8006852:	d1be      	bne.n	80067d2 <_printf_float+0x326>
 8006854:	e689      	b.n	800656a <_printf_float+0xbe>
 8006856:	9a05      	ldr	r2, [sp, #20]
 8006858:	464b      	mov	r3, r9
 800685a:	4442      	add	r2, r8
 800685c:	4631      	mov	r1, r6
 800685e:	4628      	mov	r0, r5
 8006860:	47b8      	blx	r7
 8006862:	3001      	adds	r0, #1
 8006864:	d1c1      	bne.n	80067ea <_printf_float+0x33e>
 8006866:	e680      	b.n	800656a <_printf_float+0xbe>
 8006868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800686a:	2a01      	cmp	r2, #1
 800686c:	dc01      	bgt.n	8006872 <_printf_float+0x3c6>
 800686e:	07db      	lsls	r3, r3, #31
 8006870:	d53a      	bpl.n	80068e8 <_printf_float+0x43c>
 8006872:	2301      	movs	r3, #1
 8006874:	4642      	mov	r2, r8
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f ae74 	beq.w	800656a <_printf_float+0xbe>
 8006882:	ee18 3a10 	vmov	r3, s16
 8006886:	4652      	mov	r2, sl
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f ae6b 	beq.w	800656a <_printf_float+0xbe>
 8006894:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006898:	2200      	movs	r2, #0
 800689a:	2300      	movs	r3, #0
 800689c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80068a0:	f7fa f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80068a4:	b9d8      	cbnz	r0, 80068de <_printf_float+0x432>
 80068a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80068aa:	f108 0201 	add.w	r2, r8, #1
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b8      	blx	r7
 80068b4:	3001      	adds	r0, #1
 80068b6:	d10e      	bne.n	80068d6 <_printf_float+0x42a>
 80068b8:	e657      	b.n	800656a <_printf_float+0xbe>
 80068ba:	2301      	movs	r3, #1
 80068bc:	4652      	mov	r2, sl
 80068be:	4631      	mov	r1, r6
 80068c0:	4628      	mov	r0, r5
 80068c2:	47b8      	blx	r7
 80068c4:	3001      	adds	r0, #1
 80068c6:	f43f ae50 	beq.w	800656a <_printf_float+0xbe>
 80068ca:	f108 0801 	add.w	r8, r8, #1
 80068ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d0:	3b01      	subs	r3, #1
 80068d2:	4543      	cmp	r3, r8
 80068d4:	dcf1      	bgt.n	80068ba <_printf_float+0x40e>
 80068d6:	464b      	mov	r3, r9
 80068d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068dc:	e6da      	b.n	8006694 <_printf_float+0x1e8>
 80068de:	f04f 0800 	mov.w	r8, #0
 80068e2:	f104 0a1a 	add.w	sl, r4, #26
 80068e6:	e7f2      	b.n	80068ce <_printf_float+0x422>
 80068e8:	2301      	movs	r3, #1
 80068ea:	4642      	mov	r2, r8
 80068ec:	e7df      	b.n	80068ae <_printf_float+0x402>
 80068ee:	2301      	movs	r3, #1
 80068f0:	464a      	mov	r2, r9
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f ae36 	beq.w	800656a <_printf_float+0xbe>
 80068fe:	f108 0801 	add.w	r8, r8, #1
 8006902:	68e3      	ldr	r3, [r4, #12]
 8006904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006906:	1a5b      	subs	r3, r3, r1
 8006908:	4543      	cmp	r3, r8
 800690a:	dcf0      	bgt.n	80068ee <_printf_float+0x442>
 800690c:	e6f8      	b.n	8006700 <_printf_float+0x254>
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	f104 0919 	add.w	r9, r4, #25
 8006916:	e7f4      	b.n	8006902 <_printf_float+0x456>

08006918 <_printf_common>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	4616      	mov	r6, r2
 800691e:	4699      	mov	r9, r3
 8006920:	688a      	ldr	r2, [r1, #8]
 8006922:	690b      	ldr	r3, [r1, #16]
 8006924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006928:	4293      	cmp	r3, r2
 800692a:	bfb8      	it	lt
 800692c:	4613      	movlt	r3, r2
 800692e:	6033      	str	r3, [r6, #0]
 8006930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006934:	4607      	mov	r7, r0
 8006936:	460c      	mov	r4, r1
 8006938:	b10a      	cbz	r2, 800693e <_printf_common+0x26>
 800693a:	3301      	adds	r3, #1
 800693c:	6033      	str	r3, [r6, #0]
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	0699      	lsls	r1, r3, #26
 8006942:	bf42      	ittt	mi
 8006944:	6833      	ldrmi	r3, [r6, #0]
 8006946:	3302      	addmi	r3, #2
 8006948:	6033      	strmi	r3, [r6, #0]
 800694a:	6825      	ldr	r5, [r4, #0]
 800694c:	f015 0506 	ands.w	r5, r5, #6
 8006950:	d106      	bne.n	8006960 <_printf_common+0x48>
 8006952:	f104 0a19 	add.w	sl, r4, #25
 8006956:	68e3      	ldr	r3, [r4, #12]
 8006958:	6832      	ldr	r2, [r6, #0]
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	42ab      	cmp	r3, r5
 800695e:	dc26      	bgt.n	80069ae <_printf_common+0x96>
 8006960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006964:	1e13      	subs	r3, r2, #0
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	bf18      	it	ne
 800696a:	2301      	movne	r3, #1
 800696c:	0692      	lsls	r2, r2, #26
 800696e:	d42b      	bmi.n	80069c8 <_printf_common+0xb0>
 8006970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006974:	4649      	mov	r1, r9
 8006976:	4638      	mov	r0, r7
 8006978:	47c0      	blx	r8
 800697a:	3001      	adds	r0, #1
 800697c:	d01e      	beq.n	80069bc <_printf_common+0xa4>
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	6922      	ldr	r2, [r4, #16]
 8006982:	f003 0306 	and.w	r3, r3, #6
 8006986:	2b04      	cmp	r3, #4
 8006988:	bf02      	ittt	eq
 800698a:	68e5      	ldreq	r5, [r4, #12]
 800698c:	6833      	ldreq	r3, [r6, #0]
 800698e:	1aed      	subeq	r5, r5, r3
 8006990:	68a3      	ldr	r3, [r4, #8]
 8006992:	bf0c      	ite	eq
 8006994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006998:	2500      	movne	r5, #0
 800699a:	4293      	cmp	r3, r2
 800699c:	bfc4      	itt	gt
 800699e:	1a9b      	subgt	r3, r3, r2
 80069a0:	18ed      	addgt	r5, r5, r3
 80069a2:	2600      	movs	r6, #0
 80069a4:	341a      	adds	r4, #26
 80069a6:	42b5      	cmp	r5, r6
 80069a8:	d11a      	bne.n	80069e0 <_printf_common+0xc8>
 80069aa:	2000      	movs	r0, #0
 80069ac:	e008      	b.n	80069c0 <_printf_common+0xa8>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4652      	mov	r2, sl
 80069b2:	4649      	mov	r1, r9
 80069b4:	4638      	mov	r0, r7
 80069b6:	47c0      	blx	r8
 80069b8:	3001      	adds	r0, #1
 80069ba:	d103      	bne.n	80069c4 <_printf_common+0xac>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295
 80069c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c4:	3501      	adds	r5, #1
 80069c6:	e7c6      	b.n	8006956 <_printf_common+0x3e>
 80069c8:	18e1      	adds	r1, r4, r3
 80069ca:	1c5a      	adds	r2, r3, #1
 80069cc:	2030      	movs	r0, #48	; 0x30
 80069ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069d2:	4422      	add	r2, r4
 80069d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069dc:	3302      	adds	r3, #2
 80069de:	e7c7      	b.n	8006970 <_printf_common+0x58>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4622      	mov	r2, r4
 80069e4:	4649      	mov	r1, r9
 80069e6:	4638      	mov	r0, r7
 80069e8:	47c0      	blx	r8
 80069ea:	3001      	adds	r0, #1
 80069ec:	d0e6      	beq.n	80069bc <_printf_common+0xa4>
 80069ee:	3601      	adds	r6, #1
 80069f0:	e7d9      	b.n	80069a6 <_printf_common+0x8e>
	...

080069f4 <_printf_i>:
 80069f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	7e0f      	ldrb	r7, [r1, #24]
 80069fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80069fc:	2f78      	cmp	r7, #120	; 0x78
 80069fe:	4691      	mov	r9, r2
 8006a00:	4680      	mov	r8, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	469a      	mov	sl, r3
 8006a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a0a:	d807      	bhi.n	8006a1c <_printf_i+0x28>
 8006a0c:	2f62      	cmp	r7, #98	; 0x62
 8006a0e:	d80a      	bhi.n	8006a26 <_printf_i+0x32>
 8006a10:	2f00      	cmp	r7, #0
 8006a12:	f000 80d4 	beq.w	8006bbe <_printf_i+0x1ca>
 8006a16:	2f58      	cmp	r7, #88	; 0x58
 8006a18:	f000 80c0 	beq.w	8006b9c <_printf_i+0x1a8>
 8006a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a24:	e03a      	b.n	8006a9c <_printf_i+0xa8>
 8006a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a2a:	2b15      	cmp	r3, #21
 8006a2c:	d8f6      	bhi.n	8006a1c <_printf_i+0x28>
 8006a2e:	a101      	add	r1, pc, #4	; (adr r1, 8006a34 <_printf_i+0x40>)
 8006a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a34:	08006a8d 	.word	0x08006a8d
 8006a38:	08006aa1 	.word	0x08006aa1
 8006a3c:	08006a1d 	.word	0x08006a1d
 8006a40:	08006a1d 	.word	0x08006a1d
 8006a44:	08006a1d 	.word	0x08006a1d
 8006a48:	08006a1d 	.word	0x08006a1d
 8006a4c:	08006aa1 	.word	0x08006aa1
 8006a50:	08006a1d 	.word	0x08006a1d
 8006a54:	08006a1d 	.word	0x08006a1d
 8006a58:	08006a1d 	.word	0x08006a1d
 8006a5c:	08006a1d 	.word	0x08006a1d
 8006a60:	08006ba5 	.word	0x08006ba5
 8006a64:	08006acd 	.word	0x08006acd
 8006a68:	08006b5f 	.word	0x08006b5f
 8006a6c:	08006a1d 	.word	0x08006a1d
 8006a70:	08006a1d 	.word	0x08006a1d
 8006a74:	08006bc7 	.word	0x08006bc7
 8006a78:	08006a1d 	.word	0x08006a1d
 8006a7c:	08006acd 	.word	0x08006acd
 8006a80:	08006a1d 	.word	0x08006a1d
 8006a84:	08006a1d 	.word	0x08006a1d
 8006a88:	08006b67 	.word	0x08006b67
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	1d1a      	adds	r2, r3, #4
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	602a      	str	r2, [r5, #0]
 8006a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e09f      	b.n	8006be0 <_printf_i+0x1ec>
 8006aa0:	6820      	ldr	r0, [r4, #0]
 8006aa2:	682b      	ldr	r3, [r5, #0]
 8006aa4:	0607      	lsls	r7, r0, #24
 8006aa6:	f103 0104 	add.w	r1, r3, #4
 8006aaa:	6029      	str	r1, [r5, #0]
 8006aac:	d501      	bpl.n	8006ab2 <_printf_i+0xbe>
 8006aae:	681e      	ldr	r6, [r3, #0]
 8006ab0:	e003      	b.n	8006aba <_printf_i+0xc6>
 8006ab2:	0646      	lsls	r6, r0, #25
 8006ab4:	d5fb      	bpl.n	8006aae <_printf_i+0xba>
 8006ab6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006aba:	2e00      	cmp	r6, #0
 8006abc:	da03      	bge.n	8006ac6 <_printf_i+0xd2>
 8006abe:	232d      	movs	r3, #45	; 0x2d
 8006ac0:	4276      	negs	r6, r6
 8006ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ac6:	485a      	ldr	r0, [pc, #360]	; (8006c30 <_printf_i+0x23c>)
 8006ac8:	230a      	movs	r3, #10
 8006aca:	e012      	b.n	8006af2 <_printf_i+0xfe>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	6820      	ldr	r0, [r4, #0]
 8006ad0:	1d19      	adds	r1, r3, #4
 8006ad2:	6029      	str	r1, [r5, #0]
 8006ad4:	0605      	lsls	r5, r0, #24
 8006ad6:	d501      	bpl.n	8006adc <_printf_i+0xe8>
 8006ad8:	681e      	ldr	r6, [r3, #0]
 8006ada:	e002      	b.n	8006ae2 <_printf_i+0xee>
 8006adc:	0641      	lsls	r1, r0, #25
 8006ade:	d5fb      	bpl.n	8006ad8 <_printf_i+0xe4>
 8006ae0:	881e      	ldrh	r6, [r3, #0]
 8006ae2:	4853      	ldr	r0, [pc, #332]	; (8006c30 <_printf_i+0x23c>)
 8006ae4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ae6:	bf0c      	ite	eq
 8006ae8:	2308      	moveq	r3, #8
 8006aea:	230a      	movne	r3, #10
 8006aec:	2100      	movs	r1, #0
 8006aee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006af2:	6865      	ldr	r5, [r4, #4]
 8006af4:	60a5      	str	r5, [r4, #8]
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	bfa2      	ittt	ge
 8006afa:	6821      	ldrge	r1, [r4, #0]
 8006afc:	f021 0104 	bicge.w	r1, r1, #4
 8006b00:	6021      	strge	r1, [r4, #0]
 8006b02:	b90e      	cbnz	r6, 8006b08 <_printf_i+0x114>
 8006b04:	2d00      	cmp	r5, #0
 8006b06:	d04b      	beq.n	8006ba0 <_printf_i+0x1ac>
 8006b08:	4615      	mov	r5, r2
 8006b0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b12:	5dc7      	ldrb	r7, [r0, r7]
 8006b14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b18:	4637      	mov	r7, r6
 8006b1a:	42bb      	cmp	r3, r7
 8006b1c:	460e      	mov	r6, r1
 8006b1e:	d9f4      	bls.n	8006b0a <_printf_i+0x116>
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d10b      	bne.n	8006b3c <_printf_i+0x148>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	07de      	lsls	r6, r3, #31
 8006b28:	d508      	bpl.n	8006b3c <_printf_i+0x148>
 8006b2a:	6923      	ldr	r3, [r4, #16]
 8006b2c:	6861      	ldr	r1, [r4, #4]
 8006b2e:	4299      	cmp	r1, r3
 8006b30:	bfde      	ittt	le
 8006b32:	2330      	movle	r3, #48	; 0x30
 8006b34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b3c:	1b52      	subs	r2, r2, r5
 8006b3e:	6122      	str	r2, [r4, #16]
 8006b40:	f8cd a000 	str.w	sl, [sp]
 8006b44:	464b      	mov	r3, r9
 8006b46:	aa03      	add	r2, sp, #12
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4640      	mov	r0, r8
 8006b4c:	f7ff fee4 	bl	8006918 <_printf_common>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d14a      	bne.n	8006bea <_printf_i+0x1f6>
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	b004      	add	sp, #16
 8006b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	f043 0320 	orr.w	r3, r3, #32
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	4833      	ldr	r0, [pc, #204]	; (8006c34 <_printf_i+0x240>)
 8006b68:	2778      	movs	r7, #120	; 0x78
 8006b6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	6829      	ldr	r1, [r5, #0]
 8006b72:	061f      	lsls	r7, r3, #24
 8006b74:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b78:	d402      	bmi.n	8006b80 <_printf_i+0x18c>
 8006b7a:	065f      	lsls	r7, r3, #25
 8006b7c:	bf48      	it	mi
 8006b7e:	b2b6      	uxthmi	r6, r6
 8006b80:	07df      	lsls	r7, r3, #31
 8006b82:	bf48      	it	mi
 8006b84:	f043 0320 	orrmi.w	r3, r3, #32
 8006b88:	6029      	str	r1, [r5, #0]
 8006b8a:	bf48      	it	mi
 8006b8c:	6023      	strmi	r3, [r4, #0]
 8006b8e:	b91e      	cbnz	r6, 8006b98 <_printf_i+0x1a4>
 8006b90:	6823      	ldr	r3, [r4, #0]
 8006b92:	f023 0320 	bic.w	r3, r3, #32
 8006b96:	6023      	str	r3, [r4, #0]
 8006b98:	2310      	movs	r3, #16
 8006b9a:	e7a7      	b.n	8006aec <_printf_i+0xf8>
 8006b9c:	4824      	ldr	r0, [pc, #144]	; (8006c30 <_printf_i+0x23c>)
 8006b9e:	e7e4      	b.n	8006b6a <_printf_i+0x176>
 8006ba0:	4615      	mov	r5, r2
 8006ba2:	e7bd      	b.n	8006b20 <_printf_i+0x12c>
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	6826      	ldr	r6, [r4, #0]
 8006ba8:	6961      	ldr	r1, [r4, #20]
 8006baa:	1d18      	adds	r0, r3, #4
 8006bac:	6028      	str	r0, [r5, #0]
 8006bae:	0635      	lsls	r5, r6, #24
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	d501      	bpl.n	8006bb8 <_printf_i+0x1c4>
 8006bb4:	6019      	str	r1, [r3, #0]
 8006bb6:	e002      	b.n	8006bbe <_printf_i+0x1ca>
 8006bb8:	0670      	lsls	r0, r6, #25
 8006bba:	d5fb      	bpl.n	8006bb4 <_printf_i+0x1c0>
 8006bbc:	8019      	strh	r1, [r3, #0]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6123      	str	r3, [r4, #16]
 8006bc2:	4615      	mov	r5, r2
 8006bc4:	e7bc      	b.n	8006b40 <_printf_i+0x14c>
 8006bc6:	682b      	ldr	r3, [r5, #0]
 8006bc8:	1d1a      	adds	r2, r3, #4
 8006bca:	602a      	str	r2, [r5, #0]
 8006bcc:	681d      	ldr	r5, [r3, #0]
 8006bce:	6862      	ldr	r2, [r4, #4]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f7f9 fafc 	bl	80001d0 <memchr>
 8006bd8:	b108      	cbz	r0, 8006bde <_printf_i+0x1ea>
 8006bda:	1b40      	subs	r0, r0, r5
 8006bdc:	6060      	str	r0, [r4, #4]
 8006bde:	6863      	ldr	r3, [r4, #4]
 8006be0:	6123      	str	r3, [r4, #16]
 8006be2:	2300      	movs	r3, #0
 8006be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be8:	e7aa      	b.n	8006b40 <_printf_i+0x14c>
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	462a      	mov	r2, r5
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	47d0      	blx	sl
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d0ad      	beq.n	8006b54 <_printf_i+0x160>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	079b      	lsls	r3, r3, #30
 8006bfc:	d413      	bmi.n	8006c26 <_printf_i+0x232>
 8006bfe:	68e0      	ldr	r0, [r4, #12]
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	4298      	cmp	r0, r3
 8006c04:	bfb8      	it	lt
 8006c06:	4618      	movlt	r0, r3
 8006c08:	e7a6      	b.n	8006b58 <_printf_i+0x164>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	4649      	mov	r1, r9
 8006c10:	4640      	mov	r0, r8
 8006c12:	47d0      	blx	sl
 8006c14:	3001      	adds	r0, #1
 8006c16:	d09d      	beq.n	8006b54 <_printf_i+0x160>
 8006c18:	3501      	adds	r5, #1
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	9903      	ldr	r1, [sp, #12]
 8006c1e:	1a5b      	subs	r3, r3, r1
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dcf2      	bgt.n	8006c0a <_printf_i+0x216>
 8006c24:	e7eb      	b.n	8006bfe <_printf_i+0x20a>
 8006c26:	2500      	movs	r5, #0
 8006c28:	f104 0619 	add.w	r6, r4, #25
 8006c2c:	e7f5      	b.n	8006c1a <_printf_i+0x226>
 8006c2e:	bf00      	nop
 8006c30:	0800b648 	.word	0x0800b648
 8006c34:	0800b659 	.word	0x0800b659

08006c38 <_scanf_float>:
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	b087      	sub	sp, #28
 8006c3e:	4617      	mov	r7, r2
 8006c40:	9303      	str	r3, [sp, #12]
 8006c42:	688b      	ldr	r3, [r1, #8]
 8006c44:	1e5a      	subs	r2, r3, #1
 8006c46:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c4a:	bf83      	ittte	hi
 8006c4c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c50:	195b      	addhi	r3, r3, r5
 8006c52:	9302      	strhi	r3, [sp, #8]
 8006c54:	2300      	movls	r3, #0
 8006c56:	bf86      	itte	hi
 8006c58:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c5c:	608b      	strhi	r3, [r1, #8]
 8006c5e:	9302      	strls	r3, [sp, #8]
 8006c60:	680b      	ldr	r3, [r1, #0]
 8006c62:	468b      	mov	fp, r1
 8006c64:	2500      	movs	r5, #0
 8006c66:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c6a:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c72:	4680      	mov	r8, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	465e      	mov	r6, fp
 8006c78:	46aa      	mov	sl, r5
 8006c7a:	46a9      	mov	r9, r5
 8006c7c:	9501      	str	r5, [sp, #4]
 8006c7e:	68a2      	ldr	r2, [r4, #8]
 8006c80:	b152      	cbz	r2, 8006c98 <_scanf_float+0x60>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	2b4e      	cmp	r3, #78	; 0x4e
 8006c88:	d864      	bhi.n	8006d54 <_scanf_float+0x11c>
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d83c      	bhi.n	8006d08 <_scanf_float+0xd0>
 8006c8e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006c92:	b2c8      	uxtb	r0, r1
 8006c94:	280e      	cmp	r0, #14
 8006c96:	d93a      	bls.n	8006d0e <_scanf_float+0xd6>
 8006c98:	f1b9 0f00 	cmp.w	r9, #0
 8006c9c:	d003      	beq.n	8006ca6 <_scanf_float+0x6e>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006caa:	f1ba 0f01 	cmp.w	sl, #1
 8006cae:	f200 8113 	bhi.w	8006ed8 <_scanf_float+0x2a0>
 8006cb2:	455e      	cmp	r6, fp
 8006cb4:	f200 8105 	bhi.w	8006ec2 <_scanf_float+0x28a>
 8006cb8:	2501      	movs	r5, #1
 8006cba:	4628      	mov	r0, r5
 8006cbc:	b007      	add	sp, #28
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006cc6:	2a0d      	cmp	r2, #13
 8006cc8:	d8e6      	bhi.n	8006c98 <_scanf_float+0x60>
 8006cca:	a101      	add	r1, pc, #4	; (adr r1, 8006cd0 <_scanf_float+0x98>)
 8006ccc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cd0:	08006e0f 	.word	0x08006e0f
 8006cd4:	08006c99 	.word	0x08006c99
 8006cd8:	08006c99 	.word	0x08006c99
 8006cdc:	08006c99 	.word	0x08006c99
 8006ce0:	08006e6f 	.word	0x08006e6f
 8006ce4:	08006e47 	.word	0x08006e47
 8006ce8:	08006c99 	.word	0x08006c99
 8006cec:	08006c99 	.word	0x08006c99
 8006cf0:	08006e1d 	.word	0x08006e1d
 8006cf4:	08006c99 	.word	0x08006c99
 8006cf8:	08006c99 	.word	0x08006c99
 8006cfc:	08006c99 	.word	0x08006c99
 8006d00:	08006c99 	.word	0x08006c99
 8006d04:	08006dd5 	.word	0x08006dd5
 8006d08:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d0c:	e7db      	b.n	8006cc6 <_scanf_float+0x8e>
 8006d0e:	290e      	cmp	r1, #14
 8006d10:	d8c2      	bhi.n	8006c98 <_scanf_float+0x60>
 8006d12:	a001      	add	r0, pc, #4	; (adr r0, 8006d18 <_scanf_float+0xe0>)
 8006d14:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d18:	08006dc7 	.word	0x08006dc7
 8006d1c:	08006c99 	.word	0x08006c99
 8006d20:	08006dc7 	.word	0x08006dc7
 8006d24:	08006e5b 	.word	0x08006e5b
 8006d28:	08006c99 	.word	0x08006c99
 8006d2c:	08006d75 	.word	0x08006d75
 8006d30:	08006db1 	.word	0x08006db1
 8006d34:	08006db1 	.word	0x08006db1
 8006d38:	08006db1 	.word	0x08006db1
 8006d3c:	08006db1 	.word	0x08006db1
 8006d40:	08006db1 	.word	0x08006db1
 8006d44:	08006db1 	.word	0x08006db1
 8006d48:	08006db1 	.word	0x08006db1
 8006d4c:	08006db1 	.word	0x08006db1
 8006d50:	08006db1 	.word	0x08006db1
 8006d54:	2b6e      	cmp	r3, #110	; 0x6e
 8006d56:	d809      	bhi.n	8006d6c <_scanf_float+0x134>
 8006d58:	2b60      	cmp	r3, #96	; 0x60
 8006d5a:	d8b2      	bhi.n	8006cc2 <_scanf_float+0x8a>
 8006d5c:	2b54      	cmp	r3, #84	; 0x54
 8006d5e:	d077      	beq.n	8006e50 <_scanf_float+0x218>
 8006d60:	2b59      	cmp	r3, #89	; 0x59
 8006d62:	d199      	bne.n	8006c98 <_scanf_float+0x60>
 8006d64:	2d07      	cmp	r5, #7
 8006d66:	d197      	bne.n	8006c98 <_scanf_float+0x60>
 8006d68:	2508      	movs	r5, #8
 8006d6a:	e029      	b.n	8006dc0 <_scanf_float+0x188>
 8006d6c:	2b74      	cmp	r3, #116	; 0x74
 8006d6e:	d06f      	beq.n	8006e50 <_scanf_float+0x218>
 8006d70:	2b79      	cmp	r3, #121	; 0x79
 8006d72:	e7f6      	b.n	8006d62 <_scanf_float+0x12a>
 8006d74:	6821      	ldr	r1, [r4, #0]
 8006d76:	05c8      	lsls	r0, r1, #23
 8006d78:	d51a      	bpl.n	8006db0 <_scanf_float+0x178>
 8006d7a:	9b02      	ldr	r3, [sp, #8]
 8006d7c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d80:	6021      	str	r1, [r4, #0]
 8006d82:	f109 0901 	add.w	r9, r9, #1
 8006d86:	b11b      	cbz	r3, 8006d90 <_scanf_float+0x158>
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	3201      	adds	r2, #1
 8006d8c:	9302      	str	r3, [sp, #8]
 8006d8e:	60a2      	str	r2, [r4, #8]
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	60a3      	str	r3, [r4, #8]
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	607b      	str	r3, [r7, #4]
 8006da4:	f340 8084 	ble.w	8006eb0 <_scanf_float+0x278>
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	3301      	adds	r3, #1
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	e766      	b.n	8006c7e <_scanf_float+0x46>
 8006db0:	eb1a 0f05 	cmn.w	sl, r5
 8006db4:	f47f af70 	bne.w	8006c98 <_scanf_float+0x60>
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006dbe:	6022      	str	r2, [r4, #0]
 8006dc0:	f806 3b01 	strb.w	r3, [r6], #1
 8006dc4:	e7e4      	b.n	8006d90 <_scanf_float+0x158>
 8006dc6:	6822      	ldr	r2, [r4, #0]
 8006dc8:	0610      	lsls	r0, r2, #24
 8006dca:	f57f af65 	bpl.w	8006c98 <_scanf_float+0x60>
 8006dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd2:	e7f4      	b.n	8006dbe <_scanf_float+0x186>
 8006dd4:	f1ba 0f00 	cmp.w	sl, #0
 8006dd8:	d10e      	bne.n	8006df8 <_scanf_float+0x1c0>
 8006dda:	f1b9 0f00 	cmp.w	r9, #0
 8006dde:	d10e      	bne.n	8006dfe <_scanf_float+0x1c6>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006de6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006dea:	d108      	bne.n	8006dfe <_scanf_float+0x1c6>
 8006dec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006df0:	6022      	str	r2, [r4, #0]
 8006df2:	f04f 0a01 	mov.w	sl, #1
 8006df6:	e7e3      	b.n	8006dc0 <_scanf_float+0x188>
 8006df8:	f1ba 0f02 	cmp.w	sl, #2
 8006dfc:	d055      	beq.n	8006eaa <_scanf_float+0x272>
 8006dfe:	2d01      	cmp	r5, #1
 8006e00:	d002      	beq.n	8006e08 <_scanf_float+0x1d0>
 8006e02:	2d04      	cmp	r5, #4
 8006e04:	f47f af48 	bne.w	8006c98 <_scanf_float+0x60>
 8006e08:	3501      	adds	r5, #1
 8006e0a:	b2ed      	uxtb	r5, r5
 8006e0c:	e7d8      	b.n	8006dc0 <_scanf_float+0x188>
 8006e0e:	f1ba 0f01 	cmp.w	sl, #1
 8006e12:	f47f af41 	bne.w	8006c98 <_scanf_float+0x60>
 8006e16:	f04f 0a02 	mov.w	sl, #2
 8006e1a:	e7d1      	b.n	8006dc0 <_scanf_float+0x188>
 8006e1c:	b97d      	cbnz	r5, 8006e3e <_scanf_float+0x206>
 8006e1e:	f1b9 0f00 	cmp.w	r9, #0
 8006e22:	f47f af3c 	bne.w	8006c9e <_scanf_float+0x66>
 8006e26:	6822      	ldr	r2, [r4, #0]
 8006e28:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e30:	f47f af39 	bne.w	8006ca6 <_scanf_float+0x6e>
 8006e34:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e38:	6022      	str	r2, [r4, #0]
 8006e3a:	2501      	movs	r5, #1
 8006e3c:	e7c0      	b.n	8006dc0 <_scanf_float+0x188>
 8006e3e:	2d03      	cmp	r5, #3
 8006e40:	d0e2      	beq.n	8006e08 <_scanf_float+0x1d0>
 8006e42:	2d05      	cmp	r5, #5
 8006e44:	e7de      	b.n	8006e04 <_scanf_float+0x1cc>
 8006e46:	2d02      	cmp	r5, #2
 8006e48:	f47f af26 	bne.w	8006c98 <_scanf_float+0x60>
 8006e4c:	2503      	movs	r5, #3
 8006e4e:	e7b7      	b.n	8006dc0 <_scanf_float+0x188>
 8006e50:	2d06      	cmp	r5, #6
 8006e52:	f47f af21 	bne.w	8006c98 <_scanf_float+0x60>
 8006e56:	2507      	movs	r5, #7
 8006e58:	e7b2      	b.n	8006dc0 <_scanf_float+0x188>
 8006e5a:	6822      	ldr	r2, [r4, #0]
 8006e5c:	0591      	lsls	r1, r2, #22
 8006e5e:	f57f af1b 	bpl.w	8006c98 <_scanf_float+0x60>
 8006e62:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e6c:	e7a8      	b.n	8006dc0 <_scanf_float+0x188>
 8006e6e:	6822      	ldr	r2, [r4, #0]
 8006e70:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e74:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e78:	d006      	beq.n	8006e88 <_scanf_float+0x250>
 8006e7a:	0550      	lsls	r0, r2, #21
 8006e7c:	f57f af0c 	bpl.w	8006c98 <_scanf_float+0x60>
 8006e80:	f1b9 0f00 	cmp.w	r9, #0
 8006e84:	f43f af0f 	beq.w	8006ca6 <_scanf_float+0x6e>
 8006e88:	0591      	lsls	r1, r2, #22
 8006e8a:	bf58      	it	pl
 8006e8c:	9901      	ldrpl	r1, [sp, #4]
 8006e8e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e92:	bf58      	it	pl
 8006e94:	eba9 0101 	subpl.w	r1, r9, r1
 8006e98:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006e9c:	bf58      	it	pl
 8006e9e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ea2:	6022      	str	r2, [r4, #0]
 8006ea4:	f04f 0900 	mov.w	r9, #0
 8006ea8:	e78a      	b.n	8006dc0 <_scanf_float+0x188>
 8006eaa:	f04f 0a03 	mov.w	sl, #3
 8006eae:	e787      	b.n	8006dc0 <_scanf_float+0x188>
 8006eb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4798      	blx	r3
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	f43f aedf 	beq.w	8006c7e <_scanf_float+0x46>
 8006ec0:	e6ea      	b.n	8006c98 <_scanf_float+0x60>
 8006ec2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ec6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006eca:	463a      	mov	r2, r7
 8006ecc:	4640      	mov	r0, r8
 8006ece:	4798      	blx	r3
 8006ed0:	6923      	ldr	r3, [r4, #16]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	6123      	str	r3, [r4, #16]
 8006ed6:	e6ec      	b.n	8006cb2 <_scanf_float+0x7a>
 8006ed8:	1e6b      	subs	r3, r5, #1
 8006eda:	2b06      	cmp	r3, #6
 8006edc:	d825      	bhi.n	8006f2a <_scanf_float+0x2f2>
 8006ede:	2d02      	cmp	r5, #2
 8006ee0:	d836      	bhi.n	8006f50 <_scanf_float+0x318>
 8006ee2:	455e      	cmp	r6, fp
 8006ee4:	f67f aee8 	bls.w	8006cb8 <_scanf_float+0x80>
 8006ee8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006eec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ef0:	463a      	mov	r2, r7
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	4798      	blx	r3
 8006ef6:	6923      	ldr	r3, [r4, #16]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	6123      	str	r3, [r4, #16]
 8006efc:	e7f1      	b.n	8006ee2 <_scanf_float+0x2aa>
 8006efe:	9802      	ldr	r0, [sp, #8]
 8006f00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f04:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f08:	9002      	str	r0, [sp, #8]
 8006f0a:	463a      	mov	r2, r7
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	4798      	blx	r3
 8006f10:	6923      	ldr	r3, [r4, #16]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	6123      	str	r3, [r4, #16]
 8006f16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f1a:	fa5f fa8a 	uxtb.w	sl, sl
 8006f1e:	f1ba 0f02 	cmp.w	sl, #2
 8006f22:	d1ec      	bne.n	8006efe <_scanf_float+0x2c6>
 8006f24:	3d03      	subs	r5, #3
 8006f26:	b2ed      	uxtb	r5, r5
 8006f28:	1b76      	subs	r6, r6, r5
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	05da      	lsls	r2, r3, #23
 8006f2e:	d52f      	bpl.n	8006f90 <_scanf_float+0x358>
 8006f30:	055b      	lsls	r3, r3, #21
 8006f32:	d510      	bpl.n	8006f56 <_scanf_float+0x31e>
 8006f34:	455e      	cmp	r6, fp
 8006f36:	f67f aebf 	bls.w	8006cb8 <_scanf_float+0x80>
 8006f3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f42:	463a      	mov	r2, r7
 8006f44:	4640      	mov	r0, r8
 8006f46:	4798      	blx	r3
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	6123      	str	r3, [r4, #16]
 8006f4e:	e7f1      	b.n	8006f34 <_scanf_float+0x2fc>
 8006f50:	46aa      	mov	sl, r5
 8006f52:	9602      	str	r6, [sp, #8]
 8006f54:	e7df      	b.n	8006f16 <_scanf_float+0x2de>
 8006f56:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f5a:	6923      	ldr	r3, [r4, #16]
 8006f5c:	2965      	cmp	r1, #101	; 0x65
 8006f5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f62:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f66:	6123      	str	r3, [r4, #16]
 8006f68:	d00c      	beq.n	8006f84 <_scanf_float+0x34c>
 8006f6a:	2945      	cmp	r1, #69	; 0x45
 8006f6c:	d00a      	beq.n	8006f84 <_scanf_float+0x34c>
 8006f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f72:	463a      	mov	r2, r7
 8006f74:	4640      	mov	r0, r8
 8006f76:	4798      	blx	r3
 8006f78:	6923      	ldr	r3, [r4, #16]
 8006f7a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	1eb5      	subs	r5, r6, #2
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f88:	463a      	mov	r2, r7
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4798      	blx	r3
 8006f8e:	462e      	mov	r6, r5
 8006f90:	6825      	ldr	r5, [r4, #0]
 8006f92:	f015 0510 	ands.w	r5, r5, #16
 8006f96:	d158      	bne.n	800704a <_scanf_float+0x412>
 8006f98:	7035      	strb	r5, [r6, #0]
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa4:	d11c      	bne.n	8006fe0 <_scanf_float+0x3a8>
 8006fa6:	9b01      	ldr	r3, [sp, #4]
 8006fa8:	454b      	cmp	r3, r9
 8006faa:	eba3 0209 	sub.w	r2, r3, r9
 8006fae:	d124      	bne.n	8006ffa <_scanf_float+0x3c2>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4659      	mov	r1, fp
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	f002 fc1b 	bl	80097f0 <_strtod_r>
 8006fba:	9b03      	ldr	r3, [sp, #12]
 8006fbc:	6821      	ldr	r1, [r4, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f011 0f02 	tst.w	r1, #2
 8006fc4:	ec57 6b10 	vmov	r6, r7, d0
 8006fc8:	f103 0204 	add.w	r2, r3, #4
 8006fcc:	d020      	beq.n	8007010 <_scanf_float+0x3d8>
 8006fce:	9903      	ldr	r1, [sp, #12]
 8006fd0:	600a      	str	r2, [r1, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	e9c3 6700 	strd	r6, r7, [r3]
 8006fd8:	68e3      	ldr	r3, [r4, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60e3      	str	r3, [r4, #12]
 8006fde:	e66c      	b.n	8006cba <_scanf_float+0x82>
 8006fe0:	9b04      	ldr	r3, [sp, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0e4      	beq.n	8006fb0 <_scanf_float+0x378>
 8006fe6:	9905      	ldr	r1, [sp, #20]
 8006fe8:	230a      	movs	r3, #10
 8006fea:	462a      	mov	r2, r5
 8006fec:	3101      	adds	r1, #1
 8006fee:	4640      	mov	r0, r8
 8006ff0:	f002 fc86 	bl	8009900 <_strtol_r>
 8006ff4:	9b04      	ldr	r3, [sp, #16]
 8006ff6:	9e05      	ldr	r6, [sp, #20]
 8006ff8:	1ac2      	subs	r2, r0, r3
 8006ffa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006ffe:	429e      	cmp	r6, r3
 8007000:	bf28      	it	cs
 8007002:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007006:	4912      	ldr	r1, [pc, #72]	; (8007050 <_scanf_float+0x418>)
 8007008:	4630      	mov	r0, r6
 800700a:	f000 f91b 	bl	8007244 <siprintf>
 800700e:	e7cf      	b.n	8006fb0 <_scanf_float+0x378>
 8007010:	f011 0f04 	tst.w	r1, #4
 8007014:	9903      	ldr	r1, [sp, #12]
 8007016:	600a      	str	r2, [r1, #0]
 8007018:	d1db      	bne.n	8006fd2 <_scanf_float+0x39a>
 800701a:	f8d3 8000 	ldr.w	r8, [r3]
 800701e:	ee10 2a10 	vmov	r2, s0
 8007022:	ee10 0a10 	vmov	r0, s0
 8007026:	463b      	mov	r3, r7
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 fd7f 	bl	8000b2c <__aeabi_dcmpun>
 800702e:	b128      	cbz	r0, 800703c <_scanf_float+0x404>
 8007030:	4808      	ldr	r0, [pc, #32]	; (8007054 <_scanf_float+0x41c>)
 8007032:	f000 fa55 	bl	80074e0 <nanf>
 8007036:	ed88 0a00 	vstr	s0, [r8]
 800703a:	e7cd      	b.n	8006fd8 <_scanf_float+0x3a0>
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 fdd2 	bl	8000be8 <__aeabi_d2f>
 8007044:	f8c8 0000 	str.w	r0, [r8]
 8007048:	e7c6      	b.n	8006fd8 <_scanf_float+0x3a0>
 800704a:	2500      	movs	r5, #0
 800704c:	e635      	b.n	8006cba <_scanf_float+0x82>
 800704e:	bf00      	nop
 8007050:	0800b66a 	.word	0x0800b66a
 8007054:	0800b9fd 	.word	0x0800b9fd

08007058 <std>:
 8007058:	2300      	movs	r3, #0
 800705a:	b510      	push	{r4, lr}
 800705c:	4604      	mov	r4, r0
 800705e:	e9c0 3300 	strd	r3, r3, [r0]
 8007062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007066:	6083      	str	r3, [r0, #8]
 8007068:	8181      	strh	r1, [r0, #12]
 800706a:	6643      	str	r3, [r0, #100]	; 0x64
 800706c:	81c2      	strh	r2, [r0, #14]
 800706e:	6183      	str	r3, [r0, #24]
 8007070:	4619      	mov	r1, r3
 8007072:	2208      	movs	r2, #8
 8007074:	305c      	adds	r0, #92	; 0x5c
 8007076:	f000 f948 	bl	800730a <memset>
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <std+0x58>)
 800707c:	6263      	str	r3, [r4, #36]	; 0x24
 800707e:	4b0d      	ldr	r3, [pc, #52]	; (80070b4 <std+0x5c>)
 8007080:	62a3      	str	r3, [r4, #40]	; 0x28
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <std+0x60>)
 8007084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007086:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <std+0x64>)
 8007088:	6323      	str	r3, [r4, #48]	; 0x30
 800708a:	4b0d      	ldr	r3, [pc, #52]	; (80070c0 <std+0x68>)
 800708c:	6224      	str	r4, [r4, #32]
 800708e:	429c      	cmp	r4, r3
 8007090:	d006      	beq.n	80070a0 <std+0x48>
 8007092:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007096:	4294      	cmp	r4, r2
 8007098:	d002      	beq.n	80070a0 <std+0x48>
 800709a:	33d0      	adds	r3, #208	; 0xd0
 800709c:	429c      	cmp	r4, r3
 800709e:	d105      	bne.n	80070ac <std+0x54>
 80070a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a8:	f000 ba00 	b.w	80074ac <__retarget_lock_init_recursive>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	bf00      	nop
 80070b0:	08007285 	.word	0x08007285
 80070b4:	080072a7 	.word	0x080072a7
 80070b8:	080072df 	.word	0x080072df
 80070bc:	08007303 	.word	0x08007303
 80070c0:	20000818 	.word	0x20000818

080070c4 <stdio_exit_handler>:
 80070c4:	4a02      	ldr	r2, [pc, #8]	; (80070d0 <stdio_exit_handler+0xc>)
 80070c6:	4903      	ldr	r1, [pc, #12]	; (80070d4 <stdio_exit_handler+0x10>)
 80070c8:	4803      	ldr	r0, [pc, #12]	; (80070d8 <stdio_exit_handler+0x14>)
 80070ca:	f000 b869 	b.w	80071a0 <_fwalk_sglue>
 80070ce:	bf00      	nop
 80070d0:	2000001c 	.word	0x2000001c
 80070d4:	08009cc1 	.word	0x08009cc1
 80070d8:	20000028 	.word	0x20000028

080070dc <cleanup_stdio>:
 80070dc:	6841      	ldr	r1, [r0, #4]
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <cleanup_stdio+0x34>)
 80070e0:	4299      	cmp	r1, r3
 80070e2:	b510      	push	{r4, lr}
 80070e4:	4604      	mov	r4, r0
 80070e6:	d001      	beq.n	80070ec <cleanup_stdio+0x10>
 80070e8:	f002 fdea 	bl	8009cc0 <_fflush_r>
 80070ec:	68a1      	ldr	r1, [r4, #8]
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <cleanup_stdio+0x38>)
 80070f0:	4299      	cmp	r1, r3
 80070f2:	d002      	beq.n	80070fa <cleanup_stdio+0x1e>
 80070f4:	4620      	mov	r0, r4
 80070f6:	f002 fde3 	bl	8009cc0 <_fflush_r>
 80070fa:	68e1      	ldr	r1, [r4, #12]
 80070fc:	4b06      	ldr	r3, [pc, #24]	; (8007118 <cleanup_stdio+0x3c>)
 80070fe:	4299      	cmp	r1, r3
 8007100:	d004      	beq.n	800710c <cleanup_stdio+0x30>
 8007102:	4620      	mov	r0, r4
 8007104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007108:	f002 bdda 	b.w	8009cc0 <_fflush_r>
 800710c:	bd10      	pop	{r4, pc}
 800710e:	bf00      	nop
 8007110:	20000818 	.word	0x20000818
 8007114:	20000880 	.word	0x20000880
 8007118:	200008e8 	.word	0x200008e8

0800711c <global_stdio_init.part.0>:
 800711c:	b510      	push	{r4, lr}
 800711e:	4b0b      	ldr	r3, [pc, #44]	; (800714c <global_stdio_init.part.0+0x30>)
 8007120:	4c0b      	ldr	r4, [pc, #44]	; (8007150 <global_stdio_init.part.0+0x34>)
 8007122:	4a0c      	ldr	r2, [pc, #48]	; (8007154 <global_stdio_init.part.0+0x38>)
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	4620      	mov	r0, r4
 8007128:	2200      	movs	r2, #0
 800712a:	2104      	movs	r1, #4
 800712c:	f7ff ff94 	bl	8007058 <std>
 8007130:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007134:	2201      	movs	r2, #1
 8007136:	2109      	movs	r1, #9
 8007138:	f7ff ff8e 	bl	8007058 <std>
 800713c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007140:	2202      	movs	r2, #2
 8007142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007146:	2112      	movs	r1, #18
 8007148:	f7ff bf86 	b.w	8007058 <std>
 800714c:	20000950 	.word	0x20000950
 8007150:	20000818 	.word	0x20000818
 8007154:	080070c5 	.word	0x080070c5

08007158 <__sfp_lock_acquire>:
 8007158:	4801      	ldr	r0, [pc, #4]	; (8007160 <__sfp_lock_acquire+0x8>)
 800715a:	f000 b9a8 	b.w	80074ae <__retarget_lock_acquire_recursive>
 800715e:	bf00      	nop
 8007160:	20000959 	.word	0x20000959

08007164 <__sfp_lock_release>:
 8007164:	4801      	ldr	r0, [pc, #4]	; (800716c <__sfp_lock_release+0x8>)
 8007166:	f000 b9a3 	b.w	80074b0 <__retarget_lock_release_recursive>
 800716a:	bf00      	nop
 800716c:	20000959 	.word	0x20000959

08007170 <__sinit>:
 8007170:	b510      	push	{r4, lr}
 8007172:	4604      	mov	r4, r0
 8007174:	f7ff fff0 	bl	8007158 <__sfp_lock_acquire>
 8007178:	6a23      	ldr	r3, [r4, #32]
 800717a:	b11b      	cbz	r3, 8007184 <__sinit+0x14>
 800717c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007180:	f7ff bff0 	b.w	8007164 <__sfp_lock_release>
 8007184:	4b04      	ldr	r3, [pc, #16]	; (8007198 <__sinit+0x28>)
 8007186:	6223      	str	r3, [r4, #32]
 8007188:	4b04      	ldr	r3, [pc, #16]	; (800719c <__sinit+0x2c>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1f5      	bne.n	800717c <__sinit+0xc>
 8007190:	f7ff ffc4 	bl	800711c <global_stdio_init.part.0>
 8007194:	e7f2      	b.n	800717c <__sinit+0xc>
 8007196:	bf00      	nop
 8007198:	080070dd 	.word	0x080070dd
 800719c:	20000950 	.word	0x20000950

080071a0 <_fwalk_sglue>:
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a4:	4607      	mov	r7, r0
 80071a6:	4688      	mov	r8, r1
 80071a8:	4614      	mov	r4, r2
 80071aa:	2600      	movs	r6, #0
 80071ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071b0:	f1b9 0901 	subs.w	r9, r9, #1
 80071b4:	d505      	bpl.n	80071c2 <_fwalk_sglue+0x22>
 80071b6:	6824      	ldr	r4, [r4, #0]
 80071b8:	2c00      	cmp	r4, #0
 80071ba:	d1f7      	bne.n	80071ac <_fwalk_sglue+0xc>
 80071bc:	4630      	mov	r0, r6
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d907      	bls.n	80071d8 <_fwalk_sglue+0x38>
 80071c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071cc:	3301      	adds	r3, #1
 80071ce:	d003      	beq.n	80071d8 <_fwalk_sglue+0x38>
 80071d0:	4629      	mov	r1, r5
 80071d2:	4638      	mov	r0, r7
 80071d4:	47c0      	blx	r8
 80071d6:	4306      	orrs	r6, r0
 80071d8:	3568      	adds	r5, #104	; 0x68
 80071da:	e7e9      	b.n	80071b0 <_fwalk_sglue+0x10>

080071dc <sniprintf>:
 80071dc:	b40c      	push	{r2, r3}
 80071de:	b530      	push	{r4, r5, lr}
 80071e0:	4b17      	ldr	r3, [pc, #92]	; (8007240 <sniprintf+0x64>)
 80071e2:	1e0c      	subs	r4, r1, #0
 80071e4:	681d      	ldr	r5, [r3, #0]
 80071e6:	b09d      	sub	sp, #116	; 0x74
 80071e8:	da08      	bge.n	80071fc <sniprintf+0x20>
 80071ea:	238b      	movs	r3, #139	; 0x8b
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	f04f 30ff 	mov.w	r0, #4294967295
 80071f2:	b01d      	add	sp, #116	; 0x74
 80071f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071f8:	b002      	add	sp, #8
 80071fa:	4770      	bx	lr
 80071fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007200:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007204:	bf14      	ite	ne
 8007206:	f104 33ff 	addne.w	r3, r4, #4294967295
 800720a:	4623      	moveq	r3, r4
 800720c:	9304      	str	r3, [sp, #16]
 800720e:	9307      	str	r3, [sp, #28]
 8007210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007214:	9002      	str	r0, [sp, #8]
 8007216:	9006      	str	r0, [sp, #24]
 8007218:	f8ad 3016 	strh.w	r3, [sp, #22]
 800721c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800721e:	ab21      	add	r3, sp, #132	; 0x84
 8007220:	a902      	add	r1, sp, #8
 8007222:	4628      	mov	r0, r5
 8007224:	9301      	str	r3, [sp, #4]
 8007226:	f002 fbc7 	bl	80099b8 <_svfiprintf_r>
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	bfbc      	itt	lt
 800722e:	238b      	movlt	r3, #139	; 0x8b
 8007230:	602b      	strlt	r3, [r5, #0]
 8007232:	2c00      	cmp	r4, #0
 8007234:	d0dd      	beq.n	80071f2 <sniprintf+0x16>
 8007236:	9b02      	ldr	r3, [sp, #8]
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
 800723c:	e7d9      	b.n	80071f2 <sniprintf+0x16>
 800723e:	bf00      	nop
 8007240:	20000074 	.word	0x20000074

08007244 <siprintf>:
 8007244:	b40e      	push	{r1, r2, r3}
 8007246:	b500      	push	{lr}
 8007248:	b09c      	sub	sp, #112	; 0x70
 800724a:	ab1d      	add	r3, sp, #116	; 0x74
 800724c:	9002      	str	r0, [sp, #8]
 800724e:	9006      	str	r0, [sp, #24]
 8007250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007254:	4809      	ldr	r0, [pc, #36]	; (800727c <siprintf+0x38>)
 8007256:	9107      	str	r1, [sp, #28]
 8007258:	9104      	str	r1, [sp, #16]
 800725a:	4909      	ldr	r1, [pc, #36]	; (8007280 <siprintf+0x3c>)
 800725c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007260:	9105      	str	r1, [sp, #20]
 8007262:	6800      	ldr	r0, [r0, #0]
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	a902      	add	r1, sp, #8
 8007268:	f002 fba6 	bl	80099b8 <_svfiprintf_r>
 800726c:	9b02      	ldr	r3, [sp, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	b01c      	add	sp, #112	; 0x70
 8007274:	f85d eb04 	ldr.w	lr, [sp], #4
 8007278:	b003      	add	sp, #12
 800727a:	4770      	bx	lr
 800727c:	20000074 	.word	0x20000074
 8007280:	ffff0208 	.word	0xffff0208

08007284 <__sread>:
 8007284:	b510      	push	{r4, lr}
 8007286:	460c      	mov	r4, r1
 8007288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800728c:	f000 f89c 	bl	80073c8 <_read_r>
 8007290:	2800      	cmp	r0, #0
 8007292:	bfab      	itete	ge
 8007294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007296:	89a3      	ldrhlt	r3, [r4, #12]
 8007298:	181b      	addge	r3, r3, r0
 800729a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800729e:	bfac      	ite	ge
 80072a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80072a2:	81a3      	strhlt	r3, [r4, #12]
 80072a4:	bd10      	pop	{r4, pc}

080072a6 <__swrite>:
 80072a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072aa:	461f      	mov	r7, r3
 80072ac:	898b      	ldrh	r3, [r1, #12]
 80072ae:	05db      	lsls	r3, r3, #23
 80072b0:	4605      	mov	r5, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	4616      	mov	r6, r2
 80072b6:	d505      	bpl.n	80072c4 <__swrite+0x1e>
 80072b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072bc:	2302      	movs	r3, #2
 80072be:	2200      	movs	r2, #0
 80072c0:	f000 f870 	bl	80073a4 <_lseek_r>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	4632      	mov	r2, r6
 80072d2:	463b      	mov	r3, r7
 80072d4:	4628      	mov	r0, r5
 80072d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072da:	f000 b8ab 	b.w	8007434 <_write_r>

080072de <__sseek>:
 80072de:	b510      	push	{r4, lr}
 80072e0:	460c      	mov	r4, r1
 80072e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e6:	f000 f85d 	bl	80073a4 <_lseek_r>
 80072ea:	1c43      	adds	r3, r0, #1
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	bf15      	itete	ne
 80072f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80072f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072fa:	81a3      	strheq	r3, [r4, #12]
 80072fc:	bf18      	it	ne
 80072fe:	81a3      	strhne	r3, [r4, #12]
 8007300:	bd10      	pop	{r4, pc}

08007302 <__sclose>:
 8007302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007306:	f000 b83d 	b.w	8007384 <_close_r>

0800730a <memset>:
 800730a:	4402      	add	r2, r0
 800730c:	4603      	mov	r3, r0
 800730e:	4293      	cmp	r3, r2
 8007310:	d100      	bne.n	8007314 <memset+0xa>
 8007312:	4770      	bx	lr
 8007314:	f803 1b01 	strb.w	r1, [r3], #1
 8007318:	e7f9      	b.n	800730e <memset+0x4>

0800731a <_raise_r>:
 800731a:	291f      	cmp	r1, #31
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4604      	mov	r4, r0
 8007320:	460d      	mov	r5, r1
 8007322:	d904      	bls.n	800732e <_raise_r+0x14>
 8007324:	2316      	movs	r3, #22
 8007326:	6003      	str	r3, [r0, #0]
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	bd38      	pop	{r3, r4, r5, pc}
 800732e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007330:	b112      	cbz	r2, 8007338 <_raise_r+0x1e>
 8007332:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007336:	b94b      	cbnz	r3, 800734c <_raise_r+0x32>
 8007338:	4620      	mov	r0, r4
 800733a:	f000 f869 	bl	8007410 <_getpid_r>
 800733e:	462a      	mov	r2, r5
 8007340:	4601      	mov	r1, r0
 8007342:	4620      	mov	r0, r4
 8007344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007348:	f000 b850 	b.w	80073ec <_kill_r>
 800734c:	2b01      	cmp	r3, #1
 800734e:	d00a      	beq.n	8007366 <_raise_r+0x4c>
 8007350:	1c59      	adds	r1, r3, #1
 8007352:	d103      	bne.n	800735c <_raise_r+0x42>
 8007354:	2316      	movs	r3, #22
 8007356:	6003      	str	r3, [r0, #0]
 8007358:	2001      	movs	r0, #1
 800735a:	e7e7      	b.n	800732c <_raise_r+0x12>
 800735c:	2400      	movs	r4, #0
 800735e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007362:	4628      	mov	r0, r5
 8007364:	4798      	blx	r3
 8007366:	2000      	movs	r0, #0
 8007368:	e7e0      	b.n	800732c <_raise_r+0x12>
	...

0800736c <raise>:
 800736c:	4b02      	ldr	r3, [pc, #8]	; (8007378 <raise+0xc>)
 800736e:	4601      	mov	r1, r0
 8007370:	6818      	ldr	r0, [r3, #0]
 8007372:	f7ff bfd2 	b.w	800731a <_raise_r>
 8007376:	bf00      	nop
 8007378:	20000074 	.word	0x20000074

0800737c <_localeconv_r>:
 800737c:	4800      	ldr	r0, [pc, #0]	; (8007380 <_localeconv_r+0x4>)
 800737e:	4770      	bx	lr
 8007380:	20000168 	.word	0x20000168

08007384 <_close_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d06      	ldr	r5, [pc, #24]	; (80073a0 <_close_r+0x1c>)
 8007388:	2300      	movs	r3, #0
 800738a:	4604      	mov	r4, r0
 800738c:	4608      	mov	r0, r1
 800738e:	602b      	str	r3, [r5, #0]
 8007390:	f7fb fe8e 	bl	80030b0 <_close>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_close_r+0x1a>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b103      	cbz	r3, 800739e <_close_r+0x1a>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	20000954 	.word	0x20000954

080073a4 <_lseek_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d07      	ldr	r5, [pc, #28]	; (80073c4 <_lseek_r+0x20>)
 80073a8:	4604      	mov	r4, r0
 80073aa:	4608      	mov	r0, r1
 80073ac:	4611      	mov	r1, r2
 80073ae:	2200      	movs	r2, #0
 80073b0:	602a      	str	r2, [r5, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f7fb fe86 	bl	80030c4 <_lseek>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_lseek_r+0x1e>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_lseek_r+0x1e>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	20000954 	.word	0x20000954

080073c8 <_read_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d07      	ldr	r5, [pc, #28]	; (80073e8 <_read_r+0x20>)
 80073cc:	4604      	mov	r4, r0
 80073ce:	4608      	mov	r0, r1
 80073d0:	4611      	mov	r1, r2
 80073d2:	2200      	movs	r2, #0
 80073d4:	602a      	str	r2, [r5, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	f7fb fe4e 	bl	8003078 <_read>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d102      	bne.n	80073e6 <_read_r+0x1e>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	b103      	cbz	r3, 80073e6 <_read_r+0x1e>
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	20000954 	.word	0x20000954

080073ec <_kill_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d07      	ldr	r5, [pc, #28]	; (800740c <_kill_r+0x20>)
 80073f0:	2300      	movs	r3, #0
 80073f2:	4604      	mov	r4, r0
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	602b      	str	r3, [r5, #0]
 80073fa:	f7fb fe2f 	bl	800305c <_kill>
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	d102      	bne.n	8007408 <_kill_r+0x1c>
 8007402:	682b      	ldr	r3, [r5, #0]
 8007404:	b103      	cbz	r3, 8007408 <_kill_r+0x1c>
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	bd38      	pop	{r3, r4, r5, pc}
 800740a:	bf00      	nop
 800740c:	20000954 	.word	0x20000954

08007410 <_getpid_r>:
 8007410:	f7fb be22 	b.w	8003058 <_getpid>

08007414 <_sbrk_r>:
 8007414:	b538      	push	{r3, r4, r5, lr}
 8007416:	4d06      	ldr	r5, [pc, #24]	; (8007430 <_sbrk_r+0x1c>)
 8007418:	2300      	movs	r3, #0
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	602b      	str	r3, [r5, #0]
 8007420:	f7fb fe52 	bl	80030c8 <_sbrk>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d102      	bne.n	800742e <_sbrk_r+0x1a>
 8007428:	682b      	ldr	r3, [r5, #0]
 800742a:	b103      	cbz	r3, 800742e <_sbrk_r+0x1a>
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	20000954 	.word	0x20000954

08007434 <_write_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d07      	ldr	r5, [pc, #28]	; (8007454 <_write_r+0x20>)
 8007438:	4604      	mov	r4, r0
 800743a:	4608      	mov	r0, r1
 800743c:	4611      	mov	r1, r2
 800743e:	2200      	movs	r2, #0
 8007440:	602a      	str	r2, [r5, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	f7fb fe26 	bl	8003094 <_write>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_write_r+0x1e>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_write_r+0x1e>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	20000954 	.word	0x20000954

08007458 <__errno>:
 8007458:	4b01      	ldr	r3, [pc, #4]	; (8007460 <__errno+0x8>)
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	20000074 	.word	0x20000074

08007464 <__libc_init_array>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	4d0d      	ldr	r5, [pc, #52]	; (800749c <__libc_init_array+0x38>)
 8007468:	4c0d      	ldr	r4, [pc, #52]	; (80074a0 <__libc_init_array+0x3c>)
 800746a:	1b64      	subs	r4, r4, r5
 800746c:	10a4      	asrs	r4, r4, #2
 800746e:	2600      	movs	r6, #0
 8007470:	42a6      	cmp	r6, r4
 8007472:	d109      	bne.n	8007488 <__libc_init_array+0x24>
 8007474:	4d0b      	ldr	r5, [pc, #44]	; (80074a4 <__libc_init_array+0x40>)
 8007476:	4c0c      	ldr	r4, [pc, #48]	; (80074a8 <__libc_init_array+0x44>)
 8007478:	f003 fac8 	bl	800aa0c <_init>
 800747c:	1b64      	subs	r4, r4, r5
 800747e:	10a4      	asrs	r4, r4, #2
 8007480:	2600      	movs	r6, #0
 8007482:	42a6      	cmp	r6, r4
 8007484:	d105      	bne.n	8007492 <__libc_init_array+0x2e>
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	f855 3b04 	ldr.w	r3, [r5], #4
 800748c:	4798      	blx	r3
 800748e:	3601      	adds	r6, #1
 8007490:	e7ee      	b.n	8007470 <__libc_init_array+0xc>
 8007492:	f855 3b04 	ldr.w	r3, [r5], #4
 8007496:	4798      	blx	r3
 8007498:	3601      	adds	r6, #1
 800749a:	e7f2      	b.n	8007482 <__libc_init_array+0x1e>
 800749c:	0800ba68 	.word	0x0800ba68
 80074a0:	0800ba68 	.word	0x0800ba68
 80074a4:	0800ba68 	.word	0x0800ba68
 80074a8:	0800ba6c 	.word	0x0800ba6c

080074ac <__retarget_lock_init_recursive>:
 80074ac:	4770      	bx	lr

080074ae <__retarget_lock_acquire_recursive>:
 80074ae:	4770      	bx	lr

080074b0 <__retarget_lock_release_recursive>:
 80074b0:	4770      	bx	lr

080074b2 <strcpy>:
 80074b2:	4603      	mov	r3, r0
 80074b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074b8:	f803 2b01 	strb.w	r2, [r3], #1
 80074bc:	2a00      	cmp	r2, #0
 80074be:	d1f9      	bne.n	80074b4 <strcpy+0x2>
 80074c0:	4770      	bx	lr

080074c2 <memcpy>:
 80074c2:	440a      	add	r2, r1
 80074c4:	4291      	cmp	r1, r2
 80074c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ca:	d100      	bne.n	80074ce <memcpy+0xc>
 80074cc:	4770      	bx	lr
 80074ce:	b510      	push	{r4, lr}
 80074d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d8:	4291      	cmp	r1, r2
 80074da:	d1f9      	bne.n	80074d0 <memcpy+0xe>
 80074dc:	bd10      	pop	{r4, pc}
	...

080074e0 <nanf>:
 80074e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80074e8 <nanf+0x8>
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	7fc00000 	.word	0x7fc00000

080074ec <quorem>:
 80074ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	6903      	ldr	r3, [r0, #16]
 80074f2:	690c      	ldr	r4, [r1, #16]
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	4607      	mov	r7, r0
 80074f8:	db7e      	blt.n	80075f8 <quorem+0x10c>
 80074fa:	3c01      	subs	r4, #1
 80074fc:	f101 0814 	add.w	r8, r1, #20
 8007500:	f100 0514 	add.w	r5, r0, #20
 8007504:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800750e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007512:	3301      	adds	r3, #1
 8007514:	429a      	cmp	r2, r3
 8007516:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800751a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800751e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007522:	d331      	bcc.n	8007588 <quorem+0x9c>
 8007524:	f04f 0e00 	mov.w	lr, #0
 8007528:	4640      	mov	r0, r8
 800752a:	46ac      	mov	ip, r5
 800752c:	46f2      	mov	sl, lr
 800752e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007532:	b293      	uxth	r3, r2
 8007534:	fb06 e303 	mla	r3, r6, r3, lr
 8007538:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800753c:	0c1a      	lsrs	r2, r3, #16
 800753e:	b29b      	uxth	r3, r3
 8007540:	ebaa 0303 	sub.w	r3, sl, r3
 8007544:	f8dc a000 	ldr.w	sl, [ip]
 8007548:	fa13 f38a 	uxtah	r3, r3, sl
 800754c:	fb06 220e 	mla	r2, r6, lr, r2
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	9b00      	ldr	r3, [sp, #0]
 8007554:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007558:	b292      	uxth	r2, r2
 800755a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800755e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007562:	f8bd 3000 	ldrh.w	r3, [sp]
 8007566:	4581      	cmp	r9, r0
 8007568:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800756c:	f84c 3b04 	str.w	r3, [ip], #4
 8007570:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007574:	d2db      	bcs.n	800752e <quorem+0x42>
 8007576:	f855 300b 	ldr.w	r3, [r5, fp]
 800757a:	b92b      	cbnz	r3, 8007588 <quorem+0x9c>
 800757c:	9b01      	ldr	r3, [sp, #4]
 800757e:	3b04      	subs	r3, #4
 8007580:	429d      	cmp	r5, r3
 8007582:	461a      	mov	r2, r3
 8007584:	d32c      	bcc.n	80075e0 <quorem+0xf4>
 8007586:	613c      	str	r4, [r7, #16]
 8007588:	4638      	mov	r0, r7
 800758a:	f001 f93d 	bl	8008808 <__mcmp>
 800758e:	2800      	cmp	r0, #0
 8007590:	db22      	blt.n	80075d8 <quorem+0xec>
 8007592:	3601      	adds	r6, #1
 8007594:	4629      	mov	r1, r5
 8007596:	2000      	movs	r0, #0
 8007598:	f858 2b04 	ldr.w	r2, [r8], #4
 800759c:	f8d1 c000 	ldr.w	ip, [r1]
 80075a0:	b293      	uxth	r3, r2
 80075a2:	1ac3      	subs	r3, r0, r3
 80075a4:	0c12      	lsrs	r2, r2, #16
 80075a6:	fa13 f38c 	uxtah	r3, r3, ip
 80075aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80075ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075b8:	45c1      	cmp	r9, r8
 80075ba:	f841 3b04 	str.w	r3, [r1], #4
 80075be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075c2:	d2e9      	bcs.n	8007598 <quorem+0xac>
 80075c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075cc:	b922      	cbnz	r2, 80075d8 <quorem+0xec>
 80075ce:	3b04      	subs	r3, #4
 80075d0:	429d      	cmp	r5, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	d30a      	bcc.n	80075ec <quorem+0x100>
 80075d6:	613c      	str	r4, [r7, #16]
 80075d8:	4630      	mov	r0, r6
 80075da:	b003      	add	sp, #12
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e0:	6812      	ldr	r2, [r2, #0]
 80075e2:	3b04      	subs	r3, #4
 80075e4:	2a00      	cmp	r2, #0
 80075e6:	d1ce      	bne.n	8007586 <quorem+0x9a>
 80075e8:	3c01      	subs	r4, #1
 80075ea:	e7c9      	b.n	8007580 <quorem+0x94>
 80075ec:	6812      	ldr	r2, [r2, #0]
 80075ee:	3b04      	subs	r3, #4
 80075f0:	2a00      	cmp	r2, #0
 80075f2:	d1f0      	bne.n	80075d6 <quorem+0xea>
 80075f4:	3c01      	subs	r4, #1
 80075f6:	e7eb      	b.n	80075d0 <quorem+0xe4>
 80075f8:	2000      	movs	r0, #0
 80075fa:	e7ee      	b.n	80075da <quorem+0xee>
 80075fc:	0000      	movs	r0, r0
	...

08007600 <_dtoa_r>:
 8007600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ed2d 8b04 	vpush	{d8-d9}
 8007608:	69c5      	ldr	r5, [r0, #28]
 800760a:	b093      	sub	sp, #76	; 0x4c
 800760c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007610:	ec57 6b10 	vmov	r6, r7, d0
 8007614:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007618:	9107      	str	r1, [sp, #28]
 800761a:	4604      	mov	r4, r0
 800761c:	920a      	str	r2, [sp, #40]	; 0x28
 800761e:	930d      	str	r3, [sp, #52]	; 0x34
 8007620:	b975      	cbnz	r5, 8007640 <_dtoa_r+0x40>
 8007622:	2010      	movs	r0, #16
 8007624:	f7fe fde6 	bl	80061f4 <malloc>
 8007628:	4602      	mov	r2, r0
 800762a:	61e0      	str	r0, [r4, #28]
 800762c:	b920      	cbnz	r0, 8007638 <_dtoa_r+0x38>
 800762e:	4bae      	ldr	r3, [pc, #696]	; (80078e8 <_dtoa_r+0x2e8>)
 8007630:	21ef      	movs	r1, #239	; 0xef
 8007632:	48ae      	ldr	r0, [pc, #696]	; (80078ec <_dtoa_r+0x2ec>)
 8007634:	f002 fb98 	bl	8009d68 <__assert_func>
 8007638:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800763c:	6005      	str	r5, [r0, #0]
 800763e:	60c5      	str	r5, [r0, #12]
 8007640:	69e3      	ldr	r3, [r4, #28]
 8007642:	6819      	ldr	r1, [r3, #0]
 8007644:	b151      	cbz	r1, 800765c <_dtoa_r+0x5c>
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	604a      	str	r2, [r1, #4]
 800764a:	2301      	movs	r3, #1
 800764c:	4093      	lsls	r3, r2
 800764e:	608b      	str	r3, [r1, #8]
 8007650:	4620      	mov	r0, r4
 8007652:	f000 fe53 	bl	80082fc <_Bfree>
 8007656:	69e3      	ldr	r3, [r4, #28]
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	1e3b      	subs	r3, r7, #0
 800765e:	bfbb      	ittet	lt
 8007660:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007664:	9303      	strlt	r3, [sp, #12]
 8007666:	2300      	movge	r3, #0
 8007668:	2201      	movlt	r2, #1
 800766a:	bfac      	ite	ge
 800766c:	f8c8 3000 	strge.w	r3, [r8]
 8007670:	f8c8 2000 	strlt.w	r2, [r8]
 8007674:	4b9e      	ldr	r3, [pc, #632]	; (80078f0 <_dtoa_r+0x2f0>)
 8007676:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800767a:	ea33 0308 	bics.w	r3, r3, r8
 800767e:	d11b      	bne.n	80076b8 <_dtoa_r+0xb8>
 8007680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007682:	f242 730f 	movw	r3, #9999	; 0x270f
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800768c:	4333      	orrs	r3, r6
 800768e:	f000 8593 	beq.w	80081b8 <_dtoa_r+0xbb8>
 8007692:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007694:	b963      	cbnz	r3, 80076b0 <_dtoa_r+0xb0>
 8007696:	4b97      	ldr	r3, [pc, #604]	; (80078f4 <_dtoa_r+0x2f4>)
 8007698:	e027      	b.n	80076ea <_dtoa_r+0xea>
 800769a:	4b97      	ldr	r3, [pc, #604]	; (80078f8 <_dtoa_r+0x2f8>)
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	3308      	adds	r3, #8
 80076a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	9800      	ldr	r0, [sp, #0]
 80076a6:	b013      	add	sp, #76	; 0x4c
 80076a8:	ecbd 8b04 	vpop	{d8-d9}
 80076ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b0:	4b90      	ldr	r3, [pc, #576]	; (80078f4 <_dtoa_r+0x2f4>)
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	3303      	adds	r3, #3
 80076b6:	e7f3      	b.n	80076a0 <_dtoa_r+0xa0>
 80076b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	ec51 0b17 	vmov	r0, r1, d7
 80076c2:	eeb0 8a47 	vmov.f32	s16, s14
 80076c6:	eef0 8a67 	vmov.f32	s17, s15
 80076ca:	2300      	movs	r3, #0
 80076cc:	f7f9 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80076d0:	4681      	mov	r9, r0
 80076d2:	b160      	cbz	r0, 80076ee <_dtoa_r+0xee>
 80076d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076d6:	2301      	movs	r3, #1
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8568 	beq.w	80081b2 <_dtoa_r+0xbb2>
 80076e2:	4b86      	ldr	r3, [pc, #536]	; (80078fc <_dtoa_r+0x2fc>)
 80076e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	e7da      	b.n	80076a4 <_dtoa_r+0xa4>
 80076ee:	aa10      	add	r2, sp, #64	; 0x40
 80076f0:	a911      	add	r1, sp, #68	; 0x44
 80076f2:	4620      	mov	r0, r4
 80076f4:	eeb0 0a48 	vmov.f32	s0, s16
 80076f8:	eef0 0a68 	vmov.f32	s1, s17
 80076fc:	f001 f99a 	bl	8008a34 <__d2b>
 8007700:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007704:	4682      	mov	sl, r0
 8007706:	2d00      	cmp	r5, #0
 8007708:	d07f      	beq.n	800780a <_dtoa_r+0x20a>
 800770a:	ee18 3a90 	vmov	r3, s17
 800770e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007712:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007716:	ec51 0b18 	vmov	r0, r1, d8
 800771a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800771e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007722:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007726:	4619      	mov	r1, r3
 8007728:	2200      	movs	r2, #0
 800772a:	4b75      	ldr	r3, [pc, #468]	; (8007900 <_dtoa_r+0x300>)
 800772c:	f7f8 fdac 	bl	8000288 <__aeabi_dsub>
 8007730:	a367      	add	r3, pc, #412	; (adr r3, 80078d0 <_dtoa_r+0x2d0>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	f7f8 ff5f 	bl	80005f8 <__aeabi_dmul>
 800773a:	a367      	add	r3, pc, #412	; (adr r3, 80078d8 <_dtoa_r+0x2d8>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f7f8 fda4 	bl	800028c <__adddf3>
 8007744:	4606      	mov	r6, r0
 8007746:	4628      	mov	r0, r5
 8007748:	460f      	mov	r7, r1
 800774a:	f7f8 feeb 	bl	8000524 <__aeabi_i2d>
 800774e:	a364      	add	r3, pc, #400	; (adr r3, 80078e0 <_dtoa_r+0x2e0>)
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f7f8 ff50 	bl	80005f8 <__aeabi_dmul>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4630      	mov	r0, r6
 800775e:	4639      	mov	r1, r7
 8007760:	f7f8 fd94 	bl	800028c <__adddf3>
 8007764:	4606      	mov	r6, r0
 8007766:	460f      	mov	r7, r1
 8007768:	f7f9 f9f6 	bl	8000b58 <__aeabi_d2iz>
 800776c:	2200      	movs	r2, #0
 800776e:	4683      	mov	fp, r0
 8007770:	2300      	movs	r3, #0
 8007772:	4630      	mov	r0, r6
 8007774:	4639      	mov	r1, r7
 8007776:	f7f9 f9b1 	bl	8000adc <__aeabi_dcmplt>
 800777a:	b148      	cbz	r0, 8007790 <_dtoa_r+0x190>
 800777c:	4658      	mov	r0, fp
 800777e:	f7f8 fed1 	bl	8000524 <__aeabi_i2d>
 8007782:	4632      	mov	r2, r6
 8007784:	463b      	mov	r3, r7
 8007786:	f7f9 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800778a:	b908      	cbnz	r0, 8007790 <_dtoa_r+0x190>
 800778c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007790:	f1bb 0f16 	cmp.w	fp, #22
 8007794:	d857      	bhi.n	8007846 <_dtoa_r+0x246>
 8007796:	4b5b      	ldr	r3, [pc, #364]	; (8007904 <_dtoa_r+0x304>)
 8007798:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800779c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a0:	ec51 0b18 	vmov	r0, r1, d8
 80077a4:	f7f9 f99a 	bl	8000adc <__aeabi_dcmplt>
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d04e      	beq.n	800784a <_dtoa_r+0x24a>
 80077ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077b0:	2300      	movs	r3, #0
 80077b2:	930c      	str	r3, [sp, #48]	; 0x30
 80077b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077b6:	1b5b      	subs	r3, r3, r5
 80077b8:	1e5a      	subs	r2, r3, #1
 80077ba:	bf45      	ittet	mi
 80077bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80077c0:	9305      	strmi	r3, [sp, #20]
 80077c2:	2300      	movpl	r3, #0
 80077c4:	2300      	movmi	r3, #0
 80077c6:	9206      	str	r2, [sp, #24]
 80077c8:	bf54      	ite	pl
 80077ca:	9305      	strpl	r3, [sp, #20]
 80077cc:	9306      	strmi	r3, [sp, #24]
 80077ce:	f1bb 0f00 	cmp.w	fp, #0
 80077d2:	db3c      	blt.n	800784e <_dtoa_r+0x24e>
 80077d4:	9b06      	ldr	r3, [sp, #24]
 80077d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80077da:	445b      	add	r3, fp
 80077dc:	9306      	str	r3, [sp, #24]
 80077de:	2300      	movs	r3, #0
 80077e0:	9308      	str	r3, [sp, #32]
 80077e2:	9b07      	ldr	r3, [sp, #28]
 80077e4:	2b09      	cmp	r3, #9
 80077e6:	d868      	bhi.n	80078ba <_dtoa_r+0x2ba>
 80077e8:	2b05      	cmp	r3, #5
 80077ea:	bfc4      	itt	gt
 80077ec:	3b04      	subgt	r3, #4
 80077ee:	9307      	strgt	r3, [sp, #28]
 80077f0:	9b07      	ldr	r3, [sp, #28]
 80077f2:	f1a3 0302 	sub.w	r3, r3, #2
 80077f6:	bfcc      	ite	gt
 80077f8:	2500      	movgt	r5, #0
 80077fa:	2501      	movle	r5, #1
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	f200 8085 	bhi.w	800790c <_dtoa_r+0x30c>
 8007802:	e8df f003 	tbb	[pc, r3]
 8007806:	3b2e      	.short	0x3b2e
 8007808:	5839      	.short	0x5839
 800780a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800780e:	441d      	add	r5, r3
 8007810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007814:	2b20      	cmp	r3, #32
 8007816:	bfc1      	itttt	gt
 8007818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800781c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007820:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007824:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007828:	bfd6      	itet	le
 800782a:	f1c3 0320 	rsble	r3, r3, #32
 800782e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007832:	fa06 f003 	lslle.w	r0, r6, r3
 8007836:	f7f8 fe65 	bl	8000504 <__aeabi_ui2d>
 800783a:	2201      	movs	r2, #1
 800783c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007840:	3d01      	subs	r5, #1
 8007842:	920e      	str	r2, [sp, #56]	; 0x38
 8007844:	e76f      	b.n	8007726 <_dtoa_r+0x126>
 8007846:	2301      	movs	r3, #1
 8007848:	e7b3      	b.n	80077b2 <_dtoa_r+0x1b2>
 800784a:	900c      	str	r0, [sp, #48]	; 0x30
 800784c:	e7b2      	b.n	80077b4 <_dtoa_r+0x1b4>
 800784e:	9b05      	ldr	r3, [sp, #20]
 8007850:	eba3 030b 	sub.w	r3, r3, fp
 8007854:	9305      	str	r3, [sp, #20]
 8007856:	f1cb 0300 	rsb	r3, fp, #0
 800785a:	9308      	str	r3, [sp, #32]
 800785c:	2300      	movs	r3, #0
 800785e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007860:	e7bf      	b.n	80077e2 <_dtoa_r+0x1e2>
 8007862:	2300      	movs	r3, #0
 8007864:	9309      	str	r3, [sp, #36]	; 0x24
 8007866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	dc52      	bgt.n	8007912 <_dtoa_r+0x312>
 800786c:	2301      	movs	r3, #1
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	461a      	mov	r2, r3
 8007874:	920a      	str	r2, [sp, #40]	; 0x28
 8007876:	e00b      	b.n	8007890 <_dtoa_r+0x290>
 8007878:	2301      	movs	r3, #1
 800787a:	e7f3      	b.n	8007864 <_dtoa_r+0x264>
 800787c:	2300      	movs	r3, #0
 800787e:	9309      	str	r3, [sp, #36]	; 0x24
 8007880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007882:	445b      	add	r3, fp
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	3301      	adds	r3, #1
 8007888:	2b01      	cmp	r3, #1
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	bfb8      	it	lt
 800788e:	2301      	movlt	r3, #1
 8007890:	69e0      	ldr	r0, [r4, #28]
 8007892:	2100      	movs	r1, #0
 8007894:	2204      	movs	r2, #4
 8007896:	f102 0614 	add.w	r6, r2, #20
 800789a:	429e      	cmp	r6, r3
 800789c:	d93d      	bls.n	800791a <_dtoa_r+0x31a>
 800789e:	6041      	str	r1, [r0, #4]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 fceb 	bl	800827c <_Balloc>
 80078a6:	9000      	str	r0, [sp, #0]
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d139      	bne.n	8007920 <_dtoa_r+0x320>
 80078ac:	4b16      	ldr	r3, [pc, #88]	; (8007908 <_dtoa_r+0x308>)
 80078ae:	4602      	mov	r2, r0
 80078b0:	f240 11af 	movw	r1, #431	; 0x1af
 80078b4:	e6bd      	b.n	8007632 <_dtoa_r+0x32>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e7e1      	b.n	800787e <_dtoa_r+0x27e>
 80078ba:	2501      	movs	r5, #1
 80078bc:	2300      	movs	r3, #0
 80078be:	9307      	str	r3, [sp, #28]
 80078c0:	9509      	str	r5, [sp, #36]	; 0x24
 80078c2:	f04f 33ff 	mov.w	r3, #4294967295
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	9304      	str	r3, [sp, #16]
 80078ca:	2200      	movs	r2, #0
 80078cc:	2312      	movs	r3, #18
 80078ce:	e7d1      	b.n	8007874 <_dtoa_r+0x274>
 80078d0:	636f4361 	.word	0x636f4361
 80078d4:	3fd287a7 	.word	0x3fd287a7
 80078d8:	8b60c8b3 	.word	0x8b60c8b3
 80078dc:	3fc68a28 	.word	0x3fc68a28
 80078e0:	509f79fb 	.word	0x509f79fb
 80078e4:	3fd34413 	.word	0x3fd34413
 80078e8:	0800b67c 	.word	0x0800b67c
 80078ec:	0800b693 	.word	0x0800b693
 80078f0:	7ff00000 	.word	0x7ff00000
 80078f4:	0800b678 	.word	0x0800b678
 80078f8:	0800b66f 	.word	0x0800b66f
 80078fc:	0800abf8 	.word	0x0800abf8
 8007900:	3ff80000 	.word	0x3ff80000
 8007904:	0800b780 	.word	0x0800b780
 8007908:	0800b6eb 	.word	0x0800b6eb
 800790c:	2301      	movs	r3, #1
 800790e:	9309      	str	r3, [sp, #36]	; 0x24
 8007910:	e7d7      	b.n	80078c2 <_dtoa_r+0x2c2>
 8007912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007914:	9301      	str	r3, [sp, #4]
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	e7ba      	b.n	8007890 <_dtoa_r+0x290>
 800791a:	3101      	adds	r1, #1
 800791c:	0052      	lsls	r2, r2, #1
 800791e:	e7ba      	b.n	8007896 <_dtoa_r+0x296>
 8007920:	69e3      	ldr	r3, [r4, #28]
 8007922:	9a00      	ldr	r2, [sp, #0]
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	9b04      	ldr	r3, [sp, #16]
 8007928:	2b0e      	cmp	r3, #14
 800792a:	f200 80a8 	bhi.w	8007a7e <_dtoa_r+0x47e>
 800792e:	2d00      	cmp	r5, #0
 8007930:	f000 80a5 	beq.w	8007a7e <_dtoa_r+0x47e>
 8007934:	f1bb 0f00 	cmp.w	fp, #0
 8007938:	dd38      	ble.n	80079ac <_dtoa_r+0x3ac>
 800793a:	4bc0      	ldr	r3, [pc, #768]	; (8007c3c <_dtoa_r+0x63c>)
 800793c:	f00b 020f 	and.w	r2, fp, #15
 8007940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007944:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007948:	e9d3 6700 	ldrd	r6, r7, [r3]
 800794c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007950:	d019      	beq.n	8007986 <_dtoa_r+0x386>
 8007952:	4bbb      	ldr	r3, [pc, #748]	; (8007c40 <_dtoa_r+0x640>)
 8007954:	ec51 0b18 	vmov	r0, r1, d8
 8007958:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800795c:	f7f8 ff76 	bl	800084c <__aeabi_ddiv>
 8007960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007964:	f008 080f 	and.w	r8, r8, #15
 8007968:	2503      	movs	r5, #3
 800796a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007c40 <_dtoa_r+0x640>
 800796e:	f1b8 0f00 	cmp.w	r8, #0
 8007972:	d10a      	bne.n	800798a <_dtoa_r+0x38a>
 8007974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	f7f8 ff66 	bl	800084c <__aeabi_ddiv>
 8007980:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007984:	e02b      	b.n	80079de <_dtoa_r+0x3de>
 8007986:	2502      	movs	r5, #2
 8007988:	e7ef      	b.n	800796a <_dtoa_r+0x36a>
 800798a:	f018 0f01 	tst.w	r8, #1
 800798e:	d008      	beq.n	80079a2 <_dtoa_r+0x3a2>
 8007990:	4630      	mov	r0, r6
 8007992:	4639      	mov	r1, r7
 8007994:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007998:	f7f8 fe2e 	bl	80005f8 <__aeabi_dmul>
 800799c:	3501      	adds	r5, #1
 800799e:	4606      	mov	r6, r0
 80079a0:	460f      	mov	r7, r1
 80079a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80079a6:	f109 0908 	add.w	r9, r9, #8
 80079aa:	e7e0      	b.n	800796e <_dtoa_r+0x36e>
 80079ac:	f000 809f 	beq.w	8007aee <_dtoa_r+0x4ee>
 80079b0:	f1cb 0600 	rsb	r6, fp, #0
 80079b4:	4ba1      	ldr	r3, [pc, #644]	; (8007c3c <_dtoa_r+0x63c>)
 80079b6:	4fa2      	ldr	r7, [pc, #648]	; (8007c40 <_dtoa_r+0x640>)
 80079b8:	f006 020f 	and.w	r2, r6, #15
 80079bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c4:	ec51 0b18 	vmov	r0, r1, d8
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d0:	1136      	asrs	r6, r6, #4
 80079d2:	2300      	movs	r3, #0
 80079d4:	2502      	movs	r5, #2
 80079d6:	2e00      	cmp	r6, #0
 80079d8:	d17e      	bne.n	8007ad8 <_dtoa_r+0x4d8>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1d0      	bne.n	8007980 <_dtoa_r+0x380>
 80079de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8084 	beq.w	8007af2 <_dtoa_r+0x4f2>
 80079ea:	4b96      	ldr	r3, [pc, #600]	; (8007c44 <_dtoa_r+0x644>)
 80079ec:	2200      	movs	r2, #0
 80079ee:	4640      	mov	r0, r8
 80079f0:	4649      	mov	r1, r9
 80079f2:	f7f9 f873 	bl	8000adc <__aeabi_dcmplt>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d07b      	beq.n	8007af2 <_dtoa_r+0x4f2>
 80079fa:	9b04      	ldr	r3, [sp, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d078      	beq.n	8007af2 <_dtoa_r+0x4f2>
 8007a00:	9b01      	ldr	r3, [sp, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dd39      	ble.n	8007a7a <_dtoa_r+0x47a>
 8007a06:	4b90      	ldr	r3, [pc, #576]	; (8007c48 <_dtoa_r+0x648>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	f7f8 fdf3 	bl	80005f8 <__aeabi_dmul>
 8007a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a16:	9e01      	ldr	r6, [sp, #4]
 8007a18:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007a1c:	3501      	adds	r5, #1
 8007a1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a22:	4628      	mov	r0, r5
 8007a24:	f7f8 fd7e 	bl	8000524 <__aeabi_i2d>
 8007a28:	4642      	mov	r2, r8
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	f7f8 fde4 	bl	80005f8 <__aeabi_dmul>
 8007a30:	4b86      	ldr	r3, [pc, #536]	; (8007c4c <_dtoa_r+0x64c>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	f7f8 fc2a 	bl	800028c <__adddf3>
 8007a38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a40:	9303      	str	r3, [sp, #12]
 8007a42:	2e00      	cmp	r6, #0
 8007a44:	d158      	bne.n	8007af8 <_dtoa_r+0x4f8>
 8007a46:	4b82      	ldr	r3, [pc, #520]	; (8007c50 <_dtoa_r+0x650>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	f7f8 fc1b 	bl	8000288 <__aeabi_dsub>
 8007a52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a56:	4680      	mov	r8, r0
 8007a58:	4689      	mov	r9, r1
 8007a5a:	f7f9 f85d 	bl	8000b18 <__aeabi_dcmpgt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	f040 8296 	bne.w	8007f90 <_dtoa_r+0x990>
 8007a64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007a68:	4640      	mov	r0, r8
 8007a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a6e:	4649      	mov	r1, r9
 8007a70:	f7f9 f834 	bl	8000adc <__aeabi_dcmplt>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	f040 8289 	bne.w	8007f8c <_dtoa_r+0x98c>
 8007a7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f2c0 814e 	blt.w	8007d22 <_dtoa_r+0x722>
 8007a86:	f1bb 0f0e 	cmp.w	fp, #14
 8007a8a:	f300 814a 	bgt.w	8007d22 <_dtoa_r+0x722>
 8007a8e:	4b6b      	ldr	r3, [pc, #428]	; (8007c3c <_dtoa_r+0x63c>)
 8007a90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f280 80dc 	bge.w	8007c58 <_dtoa_r+0x658>
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f300 80d8 	bgt.w	8007c58 <_dtoa_r+0x658>
 8007aa8:	f040 826f 	bne.w	8007f8a <_dtoa_r+0x98a>
 8007aac:	4b68      	ldr	r3, [pc, #416]	; (8007c50 <_dtoa_r+0x650>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	4640      	mov	r0, r8
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	f7f8 fda0 	bl	80005f8 <__aeabi_dmul>
 8007ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007abc:	f7f9 f822 	bl	8000b04 <__aeabi_dcmpge>
 8007ac0:	9e04      	ldr	r6, [sp, #16]
 8007ac2:	4637      	mov	r7, r6
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	f040 8245 	bne.w	8007f54 <_dtoa_r+0x954>
 8007aca:	9d00      	ldr	r5, [sp, #0]
 8007acc:	2331      	movs	r3, #49	; 0x31
 8007ace:	f805 3b01 	strb.w	r3, [r5], #1
 8007ad2:	f10b 0b01 	add.w	fp, fp, #1
 8007ad6:	e241      	b.n	8007f5c <_dtoa_r+0x95c>
 8007ad8:	07f2      	lsls	r2, r6, #31
 8007ada:	d505      	bpl.n	8007ae8 <_dtoa_r+0x4e8>
 8007adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae0:	f7f8 fd8a 	bl	80005f8 <__aeabi_dmul>
 8007ae4:	3501      	adds	r5, #1
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	1076      	asrs	r6, r6, #1
 8007aea:	3708      	adds	r7, #8
 8007aec:	e773      	b.n	80079d6 <_dtoa_r+0x3d6>
 8007aee:	2502      	movs	r5, #2
 8007af0:	e775      	b.n	80079de <_dtoa_r+0x3de>
 8007af2:	9e04      	ldr	r6, [sp, #16]
 8007af4:	465f      	mov	r7, fp
 8007af6:	e792      	b.n	8007a1e <_dtoa_r+0x41e>
 8007af8:	9900      	ldr	r1, [sp, #0]
 8007afa:	4b50      	ldr	r3, [pc, #320]	; (8007c3c <_dtoa_r+0x63c>)
 8007afc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b00:	4431      	add	r1, r6
 8007b02:	9102      	str	r1, [sp, #8]
 8007b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b06:	eeb0 9a47 	vmov.f32	s18, s14
 8007b0a:	eef0 9a67 	vmov.f32	s19, s15
 8007b0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b16:	2900      	cmp	r1, #0
 8007b18:	d044      	beq.n	8007ba4 <_dtoa_r+0x5a4>
 8007b1a:	494e      	ldr	r1, [pc, #312]	; (8007c54 <_dtoa_r+0x654>)
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f7f8 fe95 	bl	800084c <__aeabi_ddiv>
 8007b22:	ec53 2b19 	vmov	r2, r3, d9
 8007b26:	f7f8 fbaf 	bl	8000288 <__aeabi_dsub>
 8007b2a:	9d00      	ldr	r5, [sp, #0]
 8007b2c:	ec41 0b19 	vmov	d9, r0, r1
 8007b30:	4649      	mov	r1, r9
 8007b32:	4640      	mov	r0, r8
 8007b34:	f7f9 f810 	bl	8000b58 <__aeabi_d2iz>
 8007b38:	4606      	mov	r6, r0
 8007b3a:	f7f8 fcf3 	bl	8000524 <__aeabi_i2d>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	f7f8 fb9f 	bl	8000288 <__aeabi_dsub>
 8007b4a:	3630      	adds	r6, #48	; 0x30
 8007b4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b50:	ec53 2b19 	vmov	r2, r3, d9
 8007b54:	4680      	mov	r8, r0
 8007b56:	4689      	mov	r9, r1
 8007b58:	f7f8 ffc0 	bl	8000adc <__aeabi_dcmplt>
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	d164      	bne.n	8007c2a <_dtoa_r+0x62a>
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	4937      	ldr	r1, [pc, #220]	; (8007c44 <_dtoa_r+0x644>)
 8007b66:	2000      	movs	r0, #0
 8007b68:	f7f8 fb8e 	bl	8000288 <__aeabi_dsub>
 8007b6c:	ec53 2b19 	vmov	r2, r3, d9
 8007b70:	f7f8 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	f040 80b6 	bne.w	8007ce6 <_dtoa_r+0x6e6>
 8007b7a:	9b02      	ldr	r3, [sp, #8]
 8007b7c:	429d      	cmp	r5, r3
 8007b7e:	f43f af7c 	beq.w	8007a7a <_dtoa_r+0x47a>
 8007b82:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <_dtoa_r+0x648>)
 8007b84:	ec51 0b19 	vmov	r0, r1, d9
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f7f8 fd35 	bl	80005f8 <__aeabi_dmul>
 8007b8e:	4b2e      	ldr	r3, [pc, #184]	; (8007c48 <_dtoa_r+0x648>)
 8007b90:	ec41 0b19 	vmov	d9, r0, r1
 8007b94:	2200      	movs	r2, #0
 8007b96:	4640      	mov	r0, r8
 8007b98:	4649      	mov	r1, r9
 8007b9a:	f7f8 fd2d 	bl	80005f8 <__aeabi_dmul>
 8007b9e:	4680      	mov	r8, r0
 8007ba0:	4689      	mov	r9, r1
 8007ba2:	e7c5      	b.n	8007b30 <_dtoa_r+0x530>
 8007ba4:	ec51 0b17 	vmov	r0, r1, d7
 8007ba8:	f7f8 fd26 	bl	80005f8 <__aeabi_dmul>
 8007bac:	9b02      	ldr	r3, [sp, #8]
 8007bae:	9d00      	ldr	r5, [sp, #0]
 8007bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bb2:	ec41 0b19 	vmov	d9, r0, r1
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	4640      	mov	r0, r8
 8007bba:	f7f8 ffcd 	bl	8000b58 <__aeabi_d2iz>
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	f7f8 fcb0 	bl	8000524 <__aeabi_i2d>
 8007bc4:	3630      	adds	r6, #48	; 0x30
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4640      	mov	r0, r8
 8007bcc:	4649      	mov	r1, r9
 8007bce:	f7f8 fb5b 	bl	8000288 <__aeabi_dsub>
 8007bd2:	f805 6b01 	strb.w	r6, [r5], #1
 8007bd6:	9b02      	ldr	r3, [sp, #8]
 8007bd8:	429d      	cmp	r5, r3
 8007bda:	4680      	mov	r8, r0
 8007bdc:	4689      	mov	r9, r1
 8007bde:	f04f 0200 	mov.w	r2, #0
 8007be2:	d124      	bne.n	8007c2e <_dtoa_r+0x62e>
 8007be4:	4b1b      	ldr	r3, [pc, #108]	; (8007c54 <_dtoa_r+0x654>)
 8007be6:	ec51 0b19 	vmov	r0, r1, d9
 8007bea:	f7f8 fb4f 	bl	800028c <__adddf3>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	f7f8 ff8f 	bl	8000b18 <__aeabi_dcmpgt>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d173      	bne.n	8007ce6 <_dtoa_r+0x6e6>
 8007bfe:	ec53 2b19 	vmov	r2, r3, d9
 8007c02:	4914      	ldr	r1, [pc, #80]	; (8007c54 <_dtoa_r+0x654>)
 8007c04:	2000      	movs	r0, #0
 8007c06:	f7f8 fb3f 	bl	8000288 <__aeabi_dsub>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4640      	mov	r0, r8
 8007c10:	4649      	mov	r1, r9
 8007c12:	f7f8 ff63 	bl	8000adc <__aeabi_dcmplt>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f43f af2f 	beq.w	8007a7a <_dtoa_r+0x47a>
 8007c1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c1e:	1e6b      	subs	r3, r5, #1
 8007c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c26:	2b30      	cmp	r3, #48	; 0x30
 8007c28:	d0f8      	beq.n	8007c1c <_dtoa_r+0x61c>
 8007c2a:	46bb      	mov	fp, r7
 8007c2c:	e04a      	b.n	8007cc4 <_dtoa_r+0x6c4>
 8007c2e:	4b06      	ldr	r3, [pc, #24]	; (8007c48 <_dtoa_r+0x648>)
 8007c30:	f7f8 fce2 	bl	80005f8 <__aeabi_dmul>
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	e7bd      	b.n	8007bb6 <_dtoa_r+0x5b6>
 8007c3a:	bf00      	nop
 8007c3c:	0800b780 	.word	0x0800b780
 8007c40:	0800b758 	.word	0x0800b758
 8007c44:	3ff00000 	.word	0x3ff00000
 8007c48:	40240000 	.word	0x40240000
 8007c4c:	401c0000 	.word	0x401c0000
 8007c50:	40140000 	.word	0x40140000
 8007c54:	3fe00000 	.word	0x3fe00000
 8007c58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c5c:	9d00      	ldr	r5, [sp, #0]
 8007c5e:	4642      	mov	r2, r8
 8007c60:	464b      	mov	r3, r9
 8007c62:	4630      	mov	r0, r6
 8007c64:	4639      	mov	r1, r7
 8007c66:	f7f8 fdf1 	bl	800084c <__aeabi_ddiv>
 8007c6a:	f7f8 ff75 	bl	8000b58 <__aeabi_d2iz>
 8007c6e:	9001      	str	r0, [sp, #4]
 8007c70:	f7f8 fc58 	bl	8000524 <__aeabi_i2d>
 8007c74:	4642      	mov	r2, r8
 8007c76:	464b      	mov	r3, r9
 8007c78:	f7f8 fcbe 	bl	80005f8 <__aeabi_dmul>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4630      	mov	r0, r6
 8007c82:	4639      	mov	r1, r7
 8007c84:	f7f8 fb00 	bl	8000288 <__aeabi_dsub>
 8007c88:	9e01      	ldr	r6, [sp, #4]
 8007c8a:	9f04      	ldr	r7, [sp, #16]
 8007c8c:	3630      	adds	r6, #48	; 0x30
 8007c8e:	f805 6b01 	strb.w	r6, [r5], #1
 8007c92:	9e00      	ldr	r6, [sp, #0]
 8007c94:	1bae      	subs	r6, r5, r6
 8007c96:	42b7      	cmp	r7, r6
 8007c98:	4602      	mov	r2, r0
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	d134      	bne.n	8007d08 <_dtoa_r+0x708>
 8007c9e:	f7f8 faf5 	bl	800028c <__adddf3>
 8007ca2:	4642      	mov	r2, r8
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	4606      	mov	r6, r0
 8007ca8:	460f      	mov	r7, r1
 8007caa:	f7f8 ff35 	bl	8000b18 <__aeabi_dcmpgt>
 8007cae:	b9c8      	cbnz	r0, 8007ce4 <_dtoa_r+0x6e4>
 8007cb0:	4642      	mov	r2, r8
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 ff06 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cbc:	b110      	cbz	r0, 8007cc4 <_dtoa_r+0x6c4>
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	07db      	lsls	r3, r3, #31
 8007cc2:	d40f      	bmi.n	8007ce4 <_dtoa_r+0x6e4>
 8007cc4:	4651      	mov	r1, sl
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 fb18 	bl	80082fc <_Bfree>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cd0:	702b      	strb	r3, [r5, #0]
 8007cd2:	f10b 0301 	add.w	r3, fp, #1
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	f43f ace2 	beq.w	80076a4 <_dtoa_r+0xa4>
 8007ce0:	601d      	str	r5, [r3, #0]
 8007ce2:	e4df      	b.n	80076a4 <_dtoa_r+0xa4>
 8007ce4:	465f      	mov	r7, fp
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	461d      	mov	r5, r3
 8007cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cee:	2a39      	cmp	r2, #57	; 0x39
 8007cf0:	d106      	bne.n	8007d00 <_dtoa_r+0x700>
 8007cf2:	9a00      	ldr	r2, [sp, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d1f7      	bne.n	8007ce8 <_dtoa_r+0x6e8>
 8007cf8:	9900      	ldr	r1, [sp, #0]
 8007cfa:	2230      	movs	r2, #48	; 0x30
 8007cfc:	3701      	adds	r7, #1
 8007cfe:	700a      	strb	r2, [r1, #0]
 8007d00:	781a      	ldrb	r2, [r3, #0]
 8007d02:	3201      	adds	r2, #1
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	e790      	b.n	8007c2a <_dtoa_r+0x62a>
 8007d08:	4ba3      	ldr	r3, [pc, #652]	; (8007f98 <_dtoa_r+0x998>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f7f8 fc74 	bl	80005f8 <__aeabi_dmul>
 8007d10:	2200      	movs	r2, #0
 8007d12:	2300      	movs	r3, #0
 8007d14:	4606      	mov	r6, r0
 8007d16:	460f      	mov	r7, r1
 8007d18:	f7f8 fed6 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d09e      	beq.n	8007c5e <_dtoa_r+0x65e>
 8007d20:	e7d0      	b.n	8007cc4 <_dtoa_r+0x6c4>
 8007d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	f000 80ca 	beq.w	8007ebe <_dtoa_r+0x8be>
 8007d2a:	9a07      	ldr	r2, [sp, #28]
 8007d2c:	2a01      	cmp	r2, #1
 8007d2e:	f300 80ad 	bgt.w	8007e8c <_dtoa_r+0x88c>
 8007d32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d34:	2a00      	cmp	r2, #0
 8007d36:	f000 80a5 	beq.w	8007e84 <_dtoa_r+0x884>
 8007d3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d3e:	9e08      	ldr	r6, [sp, #32]
 8007d40:	9d05      	ldr	r5, [sp, #20]
 8007d42:	9a05      	ldr	r2, [sp, #20]
 8007d44:	441a      	add	r2, r3
 8007d46:	9205      	str	r2, [sp, #20]
 8007d48:	9a06      	ldr	r2, [sp, #24]
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	441a      	add	r2, r3
 8007d4e:	4620      	mov	r0, r4
 8007d50:	9206      	str	r2, [sp, #24]
 8007d52:	f000 fbd3 	bl	80084fc <__i2b>
 8007d56:	4607      	mov	r7, r0
 8007d58:	b165      	cbz	r5, 8007d74 <_dtoa_r+0x774>
 8007d5a:	9b06      	ldr	r3, [sp, #24]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	dd09      	ble.n	8007d74 <_dtoa_r+0x774>
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	9a05      	ldr	r2, [sp, #20]
 8007d64:	bfa8      	it	ge
 8007d66:	462b      	movge	r3, r5
 8007d68:	1ad2      	subs	r2, r2, r3
 8007d6a:	9205      	str	r2, [sp, #20]
 8007d6c:	9a06      	ldr	r2, [sp, #24]
 8007d6e:	1aed      	subs	r5, r5, r3
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	9306      	str	r3, [sp, #24]
 8007d74:	9b08      	ldr	r3, [sp, #32]
 8007d76:	b1f3      	cbz	r3, 8007db6 <_dtoa_r+0x7b6>
 8007d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 80a3 	beq.w	8007ec6 <_dtoa_r+0x8c6>
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	dd10      	ble.n	8007da6 <_dtoa_r+0x7a6>
 8007d84:	4639      	mov	r1, r7
 8007d86:	4632      	mov	r2, r6
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f000 fc77 	bl	800867c <__pow5mult>
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4601      	mov	r1, r0
 8007d92:	4607      	mov	r7, r0
 8007d94:	4620      	mov	r0, r4
 8007d96:	f000 fbc7 	bl	8008528 <__multiply>
 8007d9a:	4651      	mov	r1, sl
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 faac 	bl	80082fc <_Bfree>
 8007da4:	46c2      	mov	sl, r8
 8007da6:	9b08      	ldr	r3, [sp, #32]
 8007da8:	1b9a      	subs	r2, r3, r6
 8007daa:	d004      	beq.n	8007db6 <_dtoa_r+0x7b6>
 8007dac:	4651      	mov	r1, sl
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 fc64 	bl	800867c <__pow5mult>
 8007db4:	4682      	mov	sl, r0
 8007db6:	2101      	movs	r1, #1
 8007db8:	4620      	mov	r0, r4
 8007dba:	f000 fb9f 	bl	80084fc <__i2b>
 8007dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	f340 8081 	ble.w	8007eca <_dtoa_r+0x8ca>
 8007dc8:	461a      	mov	r2, r3
 8007dca:	4601      	mov	r1, r0
 8007dcc:	4620      	mov	r0, r4
 8007dce:	f000 fc55 	bl	800867c <__pow5mult>
 8007dd2:	9b07      	ldr	r3, [sp, #28]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	dd7a      	ble.n	8007ed0 <_dtoa_r+0x8d0>
 8007dda:	f04f 0800 	mov.w	r8, #0
 8007dde:	6933      	ldr	r3, [r6, #16]
 8007de0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007de4:	6918      	ldr	r0, [r3, #16]
 8007de6:	f000 fb3b 	bl	8008460 <__hi0bits>
 8007dea:	f1c0 0020 	rsb	r0, r0, #32
 8007dee:	9b06      	ldr	r3, [sp, #24]
 8007df0:	4418      	add	r0, r3
 8007df2:	f010 001f 	ands.w	r0, r0, #31
 8007df6:	f000 8094 	beq.w	8007f22 <_dtoa_r+0x922>
 8007dfa:	f1c0 0320 	rsb	r3, r0, #32
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	f340 8085 	ble.w	8007f0e <_dtoa_r+0x90e>
 8007e04:	9b05      	ldr	r3, [sp, #20]
 8007e06:	f1c0 001c 	rsb	r0, r0, #28
 8007e0a:	4403      	add	r3, r0
 8007e0c:	9305      	str	r3, [sp, #20]
 8007e0e:	9b06      	ldr	r3, [sp, #24]
 8007e10:	4403      	add	r3, r0
 8007e12:	4405      	add	r5, r0
 8007e14:	9306      	str	r3, [sp, #24]
 8007e16:	9b05      	ldr	r3, [sp, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dd05      	ble.n	8007e28 <_dtoa_r+0x828>
 8007e1c:	4651      	mov	r1, sl
 8007e1e:	461a      	mov	r2, r3
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 fc85 	bl	8008730 <__lshift>
 8007e26:	4682      	mov	sl, r0
 8007e28:	9b06      	ldr	r3, [sp, #24]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	dd05      	ble.n	8007e3a <_dtoa_r+0x83a>
 8007e2e:	4631      	mov	r1, r6
 8007e30:	461a      	mov	r2, r3
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fc7c 	bl	8008730 <__lshift>
 8007e38:	4606      	mov	r6, r0
 8007e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d072      	beq.n	8007f26 <_dtoa_r+0x926>
 8007e40:	4631      	mov	r1, r6
 8007e42:	4650      	mov	r0, sl
 8007e44:	f000 fce0 	bl	8008808 <__mcmp>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	da6c      	bge.n	8007f26 <_dtoa_r+0x926>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4651      	mov	r1, sl
 8007e50:	220a      	movs	r2, #10
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fa74 	bl	8008340 <__multadd>
 8007e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e5e:	4682      	mov	sl, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 81b0 	beq.w	80081c6 <_dtoa_r+0xbc6>
 8007e66:	2300      	movs	r3, #0
 8007e68:	4639      	mov	r1, r7
 8007e6a:	220a      	movs	r2, #10
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f000 fa67 	bl	8008340 <__multadd>
 8007e72:	9b01      	ldr	r3, [sp, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	4607      	mov	r7, r0
 8007e78:	f300 8096 	bgt.w	8007fa8 <_dtoa_r+0x9a8>
 8007e7c:	9b07      	ldr	r3, [sp, #28]
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	dc59      	bgt.n	8007f36 <_dtoa_r+0x936>
 8007e82:	e091      	b.n	8007fa8 <_dtoa_r+0x9a8>
 8007e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e8a:	e758      	b.n	8007d3e <_dtoa_r+0x73e>
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	1e5e      	subs	r6, r3, #1
 8007e90:	9b08      	ldr	r3, [sp, #32]
 8007e92:	42b3      	cmp	r3, r6
 8007e94:	bfbf      	itttt	lt
 8007e96:	9b08      	ldrlt	r3, [sp, #32]
 8007e98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007e9a:	9608      	strlt	r6, [sp, #32]
 8007e9c:	1af3      	sublt	r3, r6, r3
 8007e9e:	bfb4      	ite	lt
 8007ea0:	18d2      	addlt	r2, r2, r3
 8007ea2:	1b9e      	subge	r6, r3, r6
 8007ea4:	9b04      	ldr	r3, [sp, #16]
 8007ea6:	bfbc      	itt	lt
 8007ea8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007eaa:	2600      	movlt	r6, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	bfb7      	itett	lt
 8007eb0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007eb4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007eb8:	1a9d      	sublt	r5, r3, r2
 8007eba:	2300      	movlt	r3, #0
 8007ebc:	e741      	b.n	8007d42 <_dtoa_r+0x742>
 8007ebe:	9e08      	ldr	r6, [sp, #32]
 8007ec0:	9d05      	ldr	r5, [sp, #20]
 8007ec2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ec4:	e748      	b.n	8007d58 <_dtoa_r+0x758>
 8007ec6:	9a08      	ldr	r2, [sp, #32]
 8007ec8:	e770      	b.n	8007dac <_dtoa_r+0x7ac>
 8007eca:	9b07      	ldr	r3, [sp, #28]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	dc19      	bgt.n	8007f04 <_dtoa_r+0x904>
 8007ed0:	9b02      	ldr	r3, [sp, #8]
 8007ed2:	b9bb      	cbnz	r3, 8007f04 <_dtoa_r+0x904>
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eda:	b99b      	cbnz	r3, 8007f04 <_dtoa_r+0x904>
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ee2:	0d1b      	lsrs	r3, r3, #20
 8007ee4:	051b      	lsls	r3, r3, #20
 8007ee6:	b183      	cbz	r3, 8007f0a <_dtoa_r+0x90a>
 8007ee8:	9b05      	ldr	r3, [sp, #20]
 8007eea:	3301      	adds	r3, #1
 8007eec:	9305      	str	r3, [sp, #20]
 8007eee:	9b06      	ldr	r3, [sp, #24]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	9306      	str	r3, [sp, #24]
 8007ef4:	f04f 0801 	mov.w	r8, #1
 8007ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f47f af6f 	bne.w	8007dde <_dtoa_r+0x7de>
 8007f00:	2001      	movs	r0, #1
 8007f02:	e774      	b.n	8007dee <_dtoa_r+0x7ee>
 8007f04:	f04f 0800 	mov.w	r8, #0
 8007f08:	e7f6      	b.n	8007ef8 <_dtoa_r+0x8f8>
 8007f0a:	4698      	mov	r8, r3
 8007f0c:	e7f4      	b.n	8007ef8 <_dtoa_r+0x8f8>
 8007f0e:	d082      	beq.n	8007e16 <_dtoa_r+0x816>
 8007f10:	9a05      	ldr	r2, [sp, #20]
 8007f12:	331c      	adds	r3, #28
 8007f14:	441a      	add	r2, r3
 8007f16:	9205      	str	r2, [sp, #20]
 8007f18:	9a06      	ldr	r2, [sp, #24]
 8007f1a:	441a      	add	r2, r3
 8007f1c:	441d      	add	r5, r3
 8007f1e:	9206      	str	r2, [sp, #24]
 8007f20:	e779      	b.n	8007e16 <_dtoa_r+0x816>
 8007f22:	4603      	mov	r3, r0
 8007f24:	e7f4      	b.n	8007f10 <_dtoa_r+0x910>
 8007f26:	9b04      	ldr	r3, [sp, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	dc37      	bgt.n	8007f9c <_dtoa_r+0x99c>
 8007f2c:	9b07      	ldr	r3, [sp, #28]
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	dd34      	ble.n	8007f9c <_dtoa_r+0x99c>
 8007f32:	9b04      	ldr	r3, [sp, #16]
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	9b01      	ldr	r3, [sp, #4]
 8007f38:	b963      	cbnz	r3, 8007f54 <_dtoa_r+0x954>
 8007f3a:	4631      	mov	r1, r6
 8007f3c:	2205      	movs	r2, #5
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 f9fe 	bl	8008340 <__multadd>
 8007f44:	4601      	mov	r1, r0
 8007f46:	4606      	mov	r6, r0
 8007f48:	4650      	mov	r0, sl
 8007f4a:	f000 fc5d 	bl	8008808 <__mcmp>
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	f73f adbb 	bgt.w	8007aca <_dtoa_r+0x4ca>
 8007f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f56:	9d00      	ldr	r5, [sp, #0]
 8007f58:	ea6f 0b03 	mvn.w	fp, r3
 8007f5c:	f04f 0800 	mov.w	r8, #0
 8007f60:	4631      	mov	r1, r6
 8007f62:	4620      	mov	r0, r4
 8007f64:	f000 f9ca 	bl	80082fc <_Bfree>
 8007f68:	2f00      	cmp	r7, #0
 8007f6a:	f43f aeab 	beq.w	8007cc4 <_dtoa_r+0x6c4>
 8007f6e:	f1b8 0f00 	cmp.w	r8, #0
 8007f72:	d005      	beq.n	8007f80 <_dtoa_r+0x980>
 8007f74:	45b8      	cmp	r8, r7
 8007f76:	d003      	beq.n	8007f80 <_dtoa_r+0x980>
 8007f78:	4641      	mov	r1, r8
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f9be 	bl	80082fc <_Bfree>
 8007f80:	4639      	mov	r1, r7
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 f9ba 	bl	80082fc <_Bfree>
 8007f88:	e69c      	b.n	8007cc4 <_dtoa_r+0x6c4>
 8007f8a:	2600      	movs	r6, #0
 8007f8c:	4637      	mov	r7, r6
 8007f8e:	e7e1      	b.n	8007f54 <_dtoa_r+0x954>
 8007f90:	46bb      	mov	fp, r7
 8007f92:	4637      	mov	r7, r6
 8007f94:	e599      	b.n	8007aca <_dtoa_r+0x4ca>
 8007f96:	bf00      	nop
 8007f98:	40240000 	.word	0x40240000
 8007f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 80c8 	beq.w	8008134 <_dtoa_r+0xb34>
 8007fa4:	9b04      	ldr	r3, [sp, #16]
 8007fa6:	9301      	str	r3, [sp, #4]
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	dd05      	ble.n	8007fb8 <_dtoa_r+0x9b8>
 8007fac:	4639      	mov	r1, r7
 8007fae:	462a      	mov	r2, r5
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fbbd 	bl	8008730 <__lshift>
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	f1b8 0f00 	cmp.w	r8, #0
 8007fbc:	d05b      	beq.n	8008076 <_dtoa_r+0xa76>
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 f95b 	bl	800827c <_Balloc>
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	b928      	cbnz	r0, 8007fd6 <_dtoa_r+0x9d6>
 8007fca:	4b83      	ldr	r3, [pc, #524]	; (80081d8 <_dtoa_r+0xbd8>)
 8007fcc:	4602      	mov	r2, r0
 8007fce:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007fd2:	f7ff bb2e 	b.w	8007632 <_dtoa_r+0x32>
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	3202      	adds	r2, #2
 8007fda:	0092      	lsls	r2, r2, #2
 8007fdc:	f107 010c 	add.w	r1, r7, #12
 8007fe0:	300c      	adds	r0, #12
 8007fe2:	f7ff fa6e 	bl	80074c2 <memcpy>
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fba0 	bl	8008730 <__lshift>
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	9304      	str	r3, [sp, #16]
 8007ff6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	9308      	str	r3, [sp, #32]
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	f003 0301 	and.w	r3, r3, #1
 8008004:	46b8      	mov	r8, r7
 8008006:	9306      	str	r3, [sp, #24]
 8008008:	4607      	mov	r7, r0
 800800a:	9b04      	ldr	r3, [sp, #16]
 800800c:	4631      	mov	r1, r6
 800800e:	3b01      	subs	r3, #1
 8008010:	4650      	mov	r0, sl
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	f7ff fa6a 	bl	80074ec <quorem>
 8008018:	4641      	mov	r1, r8
 800801a:	9002      	str	r0, [sp, #8]
 800801c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008020:	4650      	mov	r0, sl
 8008022:	f000 fbf1 	bl	8008808 <__mcmp>
 8008026:	463a      	mov	r2, r7
 8008028:	9005      	str	r0, [sp, #20]
 800802a:	4631      	mov	r1, r6
 800802c:	4620      	mov	r0, r4
 800802e:	f000 fc07 	bl	8008840 <__mdiff>
 8008032:	68c2      	ldr	r2, [r0, #12]
 8008034:	4605      	mov	r5, r0
 8008036:	bb02      	cbnz	r2, 800807a <_dtoa_r+0xa7a>
 8008038:	4601      	mov	r1, r0
 800803a:	4650      	mov	r0, sl
 800803c:	f000 fbe4 	bl	8008808 <__mcmp>
 8008040:	4602      	mov	r2, r0
 8008042:	4629      	mov	r1, r5
 8008044:	4620      	mov	r0, r4
 8008046:	9209      	str	r2, [sp, #36]	; 0x24
 8008048:	f000 f958 	bl	80082fc <_Bfree>
 800804c:	9b07      	ldr	r3, [sp, #28]
 800804e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008050:	9d04      	ldr	r5, [sp, #16]
 8008052:	ea43 0102 	orr.w	r1, r3, r2
 8008056:	9b06      	ldr	r3, [sp, #24]
 8008058:	4319      	orrs	r1, r3
 800805a:	d110      	bne.n	800807e <_dtoa_r+0xa7e>
 800805c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008060:	d029      	beq.n	80080b6 <_dtoa_r+0xab6>
 8008062:	9b05      	ldr	r3, [sp, #20]
 8008064:	2b00      	cmp	r3, #0
 8008066:	dd02      	ble.n	800806e <_dtoa_r+0xa6e>
 8008068:	9b02      	ldr	r3, [sp, #8]
 800806a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800806e:	9b01      	ldr	r3, [sp, #4]
 8008070:	f883 9000 	strb.w	r9, [r3]
 8008074:	e774      	b.n	8007f60 <_dtoa_r+0x960>
 8008076:	4638      	mov	r0, r7
 8008078:	e7ba      	b.n	8007ff0 <_dtoa_r+0x9f0>
 800807a:	2201      	movs	r2, #1
 800807c:	e7e1      	b.n	8008042 <_dtoa_r+0xa42>
 800807e:	9b05      	ldr	r3, [sp, #20]
 8008080:	2b00      	cmp	r3, #0
 8008082:	db04      	blt.n	800808e <_dtoa_r+0xa8e>
 8008084:	9907      	ldr	r1, [sp, #28]
 8008086:	430b      	orrs	r3, r1
 8008088:	9906      	ldr	r1, [sp, #24]
 800808a:	430b      	orrs	r3, r1
 800808c:	d120      	bne.n	80080d0 <_dtoa_r+0xad0>
 800808e:	2a00      	cmp	r2, #0
 8008090:	dded      	ble.n	800806e <_dtoa_r+0xa6e>
 8008092:	4651      	mov	r1, sl
 8008094:	2201      	movs	r2, #1
 8008096:	4620      	mov	r0, r4
 8008098:	f000 fb4a 	bl	8008730 <__lshift>
 800809c:	4631      	mov	r1, r6
 800809e:	4682      	mov	sl, r0
 80080a0:	f000 fbb2 	bl	8008808 <__mcmp>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	dc03      	bgt.n	80080b0 <_dtoa_r+0xab0>
 80080a8:	d1e1      	bne.n	800806e <_dtoa_r+0xa6e>
 80080aa:	f019 0f01 	tst.w	r9, #1
 80080ae:	d0de      	beq.n	800806e <_dtoa_r+0xa6e>
 80080b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080b4:	d1d8      	bne.n	8008068 <_dtoa_r+0xa68>
 80080b6:	9a01      	ldr	r2, [sp, #4]
 80080b8:	2339      	movs	r3, #57	; 0x39
 80080ba:	7013      	strb	r3, [r2, #0]
 80080bc:	462b      	mov	r3, r5
 80080be:	461d      	mov	r5, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080c6:	2a39      	cmp	r2, #57	; 0x39
 80080c8:	d06c      	beq.n	80081a4 <_dtoa_r+0xba4>
 80080ca:	3201      	adds	r2, #1
 80080cc:	701a      	strb	r2, [r3, #0]
 80080ce:	e747      	b.n	8007f60 <_dtoa_r+0x960>
 80080d0:	2a00      	cmp	r2, #0
 80080d2:	dd07      	ble.n	80080e4 <_dtoa_r+0xae4>
 80080d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080d8:	d0ed      	beq.n	80080b6 <_dtoa_r+0xab6>
 80080da:	9a01      	ldr	r2, [sp, #4]
 80080dc:	f109 0301 	add.w	r3, r9, #1
 80080e0:	7013      	strb	r3, [r2, #0]
 80080e2:	e73d      	b.n	8007f60 <_dtoa_r+0x960>
 80080e4:	9b04      	ldr	r3, [sp, #16]
 80080e6:	9a08      	ldr	r2, [sp, #32]
 80080e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d043      	beq.n	8008178 <_dtoa_r+0xb78>
 80080f0:	4651      	mov	r1, sl
 80080f2:	2300      	movs	r3, #0
 80080f4:	220a      	movs	r2, #10
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 f922 	bl	8008340 <__multadd>
 80080fc:	45b8      	cmp	r8, r7
 80080fe:	4682      	mov	sl, r0
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	f04f 020a 	mov.w	r2, #10
 8008108:	4641      	mov	r1, r8
 800810a:	4620      	mov	r0, r4
 800810c:	d107      	bne.n	800811e <_dtoa_r+0xb1e>
 800810e:	f000 f917 	bl	8008340 <__multadd>
 8008112:	4680      	mov	r8, r0
 8008114:	4607      	mov	r7, r0
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	3301      	adds	r3, #1
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	e775      	b.n	800800a <_dtoa_r+0xa0a>
 800811e:	f000 f90f 	bl	8008340 <__multadd>
 8008122:	4639      	mov	r1, r7
 8008124:	4680      	mov	r8, r0
 8008126:	2300      	movs	r3, #0
 8008128:	220a      	movs	r2, #10
 800812a:	4620      	mov	r0, r4
 800812c:	f000 f908 	bl	8008340 <__multadd>
 8008130:	4607      	mov	r7, r0
 8008132:	e7f0      	b.n	8008116 <_dtoa_r+0xb16>
 8008134:	9b04      	ldr	r3, [sp, #16]
 8008136:	9301      	str	r3, [sp, #4]
 8008138:	9d00      	ldr	r5, [sp, #0]
 800813a:	4631      	mov	r1, r6
 800813c:	4650      	mov	r0, sl
 800813e:	f7ff f9d5 	bl	80074ec <quorem>
 8008142:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008146:	9b00      	ldr	r3, [sp, #0]
 8008148:	f805 9b01 	strb.w	r9, [r5], #1
 800814c:	1aea      	subs	r2, r5, r3
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	4293      	cmp	r3, r2
 8008152:	dd07      	ble.n	8008164 <_dtoa_r+0xb64>
 8008154:	4651      	mov	r1, sl
 8008156:	2300      	movs	r3, #0
 8008158:	220a      	movs	r2, #10
 800815a:	4620      	mov	r0, r4
 800815c:	f000 f8f0 	bl	8008340 <__multadd>
 8008160:	4682      	mov	sl, r0
 8008162:	e7ea      	b.n	800813a <_dtoa_r+0xb3a>
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfc8      	it	gt
 800816a:	461d      	movgt	r5, r3
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	bfd8      	it	le
 8008170:	2501      	movle	r5, #1
 8008172:	441d      	add	r5, r3
 8008174:	f04f 0800 	mov.w	r8, #0
 8008178:	4651      	mov	r1, sl
 800817a:	2201      	movs	r2, #1
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fad7 	bl	8008730 <__lshift>
 8008182:	4631      	mov	r1, r6
 8008184:	4682      	mov	sl, r0
 8008186:	f000 fb3f 	bl	8008808 <__mcmp>
 800818a:	2800      	cmp	r0, #0
 800818c:	dc96      	bgt.n	80080bc <_dtoa_r+0xabc>
 800818e:	d102      	bne.n	8008196 <_dtoa_r+0xb96>
 8008190:	f019 0f01 	tst.w	r9, #1
 8008194:	d192      	bne.n	80080bc <_dtoa_r+0xabc>
 8008196:	462b      	mov	r3, r5
 8008198:	461d      	mov	r5, r3
 800819a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800819e:	2a30      	cmp	r2, #48	; 0x30
 80081a0:	d0fa      	beq.n	8008198 <_dtoa_r+0xb98>
 80081a2:	e6dd      	b.n	8007f60 <_dtoa_r+0x960>
 80081a4:	9a00      	ldr	r2, [sp, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d189      	bne.n	80080be <_dtoa_r+0xabe>
 80081aa:	f10b 0b01 	add.w	fp, fp, #1
 80081ae:	2331      	movs	r3, #49	; 0x31
 80081b0:	e796      	b.n	80080e0 <_dtoa_r+0xae0>
 80081b2:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <_dtoa_r+0xbdc>)
 80081b4:	f7ff ba99 	b.w	80076ea <_dtoa_r+0xea>
 80081b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f47f aa6d 	bne.w	800769a <_dtoa_r+0x9a>
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <_dtoa_r+0xbe0>)
 80081c2:	f7ff ba92 	b.w	80076ea <_dtoa_r+0xea>
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dcb5      	bgt.n	8008138 <_dtoa_r+0xb38>
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	2b02      	cmp	r3, #2
 80081d0:	f73f aeb1 	bgt.w	8007f36 <_dtoa_r+0x936>
 80081d4:	e7b0      	b.n	8008138 <_dtoa_r+0xb38>
 80081d6:	bf00      	nop
 80081d8:	0800b6eb 	.word	0x0800b6eb
 80081dc:	0800abf7 	.word	0x0800abf7
 80081e0:	0800b66f 	.word	0x0800b66f

080081e4 <_free_r>:
 80081e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081e6:	2900      	cmp	r1, #0
 80081e8:	d044      	beq.n	8008274 <_free_r+0x90>
 80081ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ee:	9001      	str	r0, [sp, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f1a1 0404 	sub.w	r4, r1, #4
 80081f6:	bfb8      	it	lt
 80081f8:	18e4      	addlt	r4, r4, r3
 80081fa:	f7fe f8ab 	bl	8006354 <__malloc_lock>
 80081fe:	4a1e      	ldr	r2, [pc, #120]	; (8008278 <_free_r+0x94>)
 8008200:	9801      	ldr	r0, [sp, #4]
 8008202:	6813      	ldr	r3, [r2, #0]
 8008204:	b933      	cbnz	r3, 8008214 <_free_r+0x30>
 8008206:	6063      	str	r3, [r4, #4]
 8008208:	6014      	str	r4, [r2, #0]
 800820a:	b003      	add	sp, #12
 800820c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008210:	f7fe b8a6 	b.w	8006360 <__malloc_unlock>
 8008214:	42a3      	cmp	r3, r4
 8008216:	d908      	bls.n	800822a <_free_r+0x46>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	1961      	adds	r1, r4, r5
 800821c:	428b      	cmp	r3, r1
 800821e:	bf01      	itttt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	1949      	addeq	r1, r1, r5
 8008226:	6021      	streq	r1, [r4, #0]
 8008228:	e7ed      	b.n	8008206 <_free_r+0x22>
 800822a:	461a      	mov	r2, r3
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	b10b      	cbz	r3, 8008234 <_free_r+0x50>
 8008230:	42a3      	cmp	r3, r4
 8008232:	d9fa      	bls.n	800822a <_free_r+0x46>
 8008234:	6811      	ldr	r1, [r2, #0]
 8008236:	1855      	adds	r5, r2, r1
 8008238:	42a5      	cmp	r5, r4
 800823a:	d10b      	bne.n	8008254 <_free_r+0x70>
 800823c:	6824      	ldr	r4, [r4, #0]
 800823e:	4421      	add	r1, r4
 8008240:	1854      	adds	r4, r2, r1
 8008242:	42a3      	cmp	r3, r4
 8008244:	6011      	str	r1, [r2, #0]
 8008246:	d1e0      	bne.n	800820a <_free_r+0x26>
 8008248:	681c      	ldr	r4, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	6053      	str	r3, [r2, #4]
 800824e:	440c      	add	r4, r1
 8008250:	6014      	str	r4, [r2, #0]
 8008252:	e7da      	b.n	800820a <_free_r+0x26>
 8008254:	d902      	bls.n	800825c <_free_r+0x78>
 8008256:	230c      	movs	r3, #12
 8008258:	6003      	str	r3, [r0, #0]
 800825a:	e7d6      	b.n	800820a <_free_r+0x26>
 800825c:	6825      	ldr	r5, [r4, #0]
 800825e:	1961      	adds	r1, r4, r5
 8008260:	428b      	cmp	r3, r1
 8008262:	bf04      	itt	eq
 8008264:	6819      	ldreq	r1, [r3, #0]
 8008266:	685b      	ldreq	r3, [r3, #4]
 8008268:	6063      	str	r3, [r4, #4]
 800826a:	bf04      	itt	eq
 800826c:	1949      	addeq	r1, r1, r5
 800826e:	6021      	streq	r1, [r4, #0]
 8008270:	6054      	str	r4, [r2, #4]
 8008272:	e7ca      	b.n	800820a <_free_r+0x26>
 8008274:	b003      	add	sp, #12
 8008276:	bd30      	pop	{r4, r5, pc}
 8008278:	20000810 	.word	0x20000810

0800827c <_Balloc>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	69c6      	ldr	r6, [r0, #28]
 8008280:	4604      	mov	r4, r0
 8008282:	460d      	mov	r5, r1
 8008284:	b976      	cbnz	r6, 80082a4 <_Balloc+0x28>
 8008286:	2010      	movs	r0, #16
 8008288:	f7fd ffb4 	bl	80061f4 <malloc>
 800828c:	4602      	mov	r2, r0
 800828e:	61e0      	str	r0, [r4, #28]
 8008290:	b920      	cbnz	r0, 800829c <_Balloc+0x20>
 8008292:	4b18      	ldr	r3, [pc, #96]	; (80082f4 <_Balloc+0x78>)
 8008294:	4818      	ldr	r0, [pc, #96]	; (80082f8 <_Balloc+0x7c>)
 8008296:	216b      	movs	r1, #107	; 0x6b
 8008298:	f001 fd66 	bl	8009d68 <__assert_func>
 800829c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082a0:	6006      	str	r6, [r0, #0]
 80082a2:	60c6      	str	r6, [r0, #12]
 80082a4:	69e6      	ldr	r6, [r4, #28]
 80082a6:	68f3      	ldr	r3, [r6, #12]
 80082a8:	b183      	cbz	r3, 80082cc <_Balloc+0x50>
 80082aa:	69e3      	ldr	r3, [r4, #28]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082b2:	b9b8      	cbnz	r0, 80082e4 <_Balloc+0x68>
 80082b4:	2101      	movs	r1, #1
 80082b6:	fa01 f605 	lsl.w	r6, r1, r5
 80082ba:	1d72      	adds	r2, r6, #5
 80082bc:	0092      	lsls	r2, r2, #2
 80082be:	4620      	mov	r0, r4
 80082c0:	f001 fd70 	bl	8009da4 <_calloc_r>
 80082c4:	b160      	cbz	r0, 80082e0 <_Balloc+0x64>
 80082c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80082ca:	e00e      	b.n	80082ea <_Balloc+0x6e>
 80082cc:	2221      	movs	r2, #33	; 0x21
 80082ce:	2104      	movs	r1, #4
 80082d0:	4620      	mov	r0, r4
 80082d2:	f001 fd67 	bl	8009da4 <_calloc_r>
 80082d6:	69e3      	ldr	r3, [r4, #28]
 80082d8:	60f0      	str	r0, [r6, #12]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1e4      	bne.n	80082aa <_Balloc+0x2e>
 80082e0:	2000      	movs	r0, #0
 80082e2:	bd70      	pop	{r4, r5, r6, pc}
 80082e4:	6802      	ldr	r2, [r0, #0]
 80082e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082ea:	2300      	movs	r3, #0
 80082ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082f0:	e7f7      	b.n	80082e2 <_Balloc+0x66>
 80082f2:	bf00      	nop
 80082f4:	0800b67c 	.word	0x0800b67c
 80082f8:	0800b6fc 	.word	0x0800b6fc

080082fc <_Bfree>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	69c6      	ldr	r6, [r0, #28]
 8008300:	4605      	mov	r5, r0
 8008302:	460c      	mov	r4, r1
 8008304:	b976      	cbnz	r6, 8008324 <_Bfree+0x28>
 8008306:	2010      	movs	r0, #16
 8008308:	f7fd ff74 	bl	80061f4 <malloc>
 800830c:	4602      	mov	r2, r0
 800830e:	61e8      	str	r0, [r5, #28]
 8008310:	b920      	cbnz	r0, 800831c <_Bfree+0x20>
 8008312:	4b09      	ldr	r3, [pc, #36]	; (8008338 <_Bfree+0x3c>)
 8008314:	4809      	ldr	r0, [pc, #36]	; (800833c <_Bfree+0x40>)
 8008316:	218f      	movs	r1, #143	; 0x8f
 8008318:	f001 fd26 	bl	8009d68 <__assert_func>
 800831c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008320:	6006      	str	r6, [r0, #0]
 8008322:	60c6      	str	r6, [r0, #12]
 8008324:	b13c      	cbz	r4, 8008336 <_Bfree+0x3a>
 8008326:	69eb      	ldr	r3, [r5, #28]
 8008328:	6862      	ldr	r2, [r4, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008330:	6021      	str	r1, [r4, #0]
 8008332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008336:	bd70      	pop	{r4, r5, r6, pc}
 8008338:	0800b67c 	.word	0x0800b67c
 800833c:	0800b6fc 	.word	0x0800b6fc

08008340 <__multadd>:
 8008340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008344:	690d      	ldr	r5, [r1, #16]
 8008346:	4607      	mov	r7, r0
 8008348:	460c      	mov	r4, r1
 800834a:	461e      	mov	r6, r3
 800834c:	f101 0c14 	add.w	ip, r1, #20
 8008350:	2000      	movs	r0, #0
 8008352:	f8dc 3000 	ldr.w	r3, [ip]
 8008356:	b299      	uxth	r1, r3
 8008358:	fb02 6101 	mla	r1, r2, r1, r6
 800835c:	0c1e      	lsrs	r6, r3, #16
 800835e:	0c0b      	lsrs	r3, r1, #16
 8008360:	fb02 3306 	mla	r3, r2, r6, r3
 8008364:	b289      	uxth	r1, r1
 8008366:	3001      	adds	r0, #1
 8008368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800836c:	4285      	cmp	r5, r0
 800836e:	f84c 1b04 	str.w	r1, [ip], #4
 8008372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008376:	dcec      	bgt.n	8008352 <__multadd+0x12>
 8008378:	b30e      	cbz	r6, 80083be <__multadd+0x7e>
 800837a:	68a3      	ldr	r3, [r4, #8]
 800837c:	42ab      	cmp	r3, r5
 800837e:	dc19      	bgt.n	80083b4 <__multadd+0x74>
 8008380:	6861      	ldr	r1, [r4, #4]
 8008382:	4638      	mov	r0, r7
 8008384:	3101      	adds	r1, #1
 8008386:	f7ff ff79 	bl	800827c <_Balloc>
 800838a:	4680      	mov	r8, r0
 800838c:	b928      	cbnz	r0, 800839a <__multadd+0x5a>
 800838e:	4602      	mov	r2, r0
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <__multadd+0x84>)
 8008392:	480d      	ldr	r0, [pc, #52]	; (80083c8 <__multadd+0x88>)
 8008394:	21ba      	movs	r1, #186	; 0xba
 8008396:	f001 fce7 	bl	8009d68 <__assert_func>
 800839a:	6922      	ldr	r2, [r4, #16]
 800839c:	3202      	adds	r2, #2
 800839e:	f104 010c 	add.w	r1, r4, #12
 80083a2:	0092      	lsls	r2, r2, #2
 80083a4:	300c      	adds	r0, #12
 80083a6:	f7ff f88c 	bl	80074c2 <memcpy>
 80083aa:	4621      	mov	r1, r4
 80083ac:	4638      	mov	r0, r7
 80083ae:	f7ff ffa5 	bl	80082fc <_Bfree>
 80083b2:	4644      	mov	r4, r8
 80083b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80083b8:	3501      	adds	r5, #1
 80083ba:	615e      	str	r6, [r3, #20]
 80083bc:	6125      	str	r5, [r4, #16]
 80083be:	4620      	mov	r0, r4
 80083c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c4:	0800b6eb 	.word	0x0800b6eb
 80083c8:	0800b6fc 	.word	0x0800b6fc

080083cc <__s2b>:
 80083cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d0:	460c      	mov	r4, r1
 80083d2:	4615      	mov	r5, r2
 80083d4:	461f      	mov	r7, r3
 80083d6:	2209      	movs	r2, #9
 80083d8:	3308      	adds	r3, #8
 80083da:	4606      	mov	r6, r0
 80083dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80083e0:	2100      	movs	r1, #0
 80083e2:	2201      	movs	r2, #1
 80083e4:	429a      	cmp	r2, r3
 80083e6:	db09      	blt.n	80083fc <__s2b+0x30>
 80083e8:	4630      	mov	r0, r6
 80083ea:	f7ff ff47 	bl	800827c <_Balloc>
 80083ee:	b940      	cbnz	r0, 8008402 <__s2b+0x36>
 80083f0:	4602      	mov	r2, r0
 80083f2:	4b19      	ldr	r3, [pc, #100]	; (8008458 <__s2b+0x8c>)
 80083f4:	4819      	ldr	r0, [pc, #100]	; (800845c <__s2b+0x90>)
 80083f6:	21d3      	movs	r1, #211	; 0xd3
 80083f8:	f001 fcb6 	bl	8009d68 <__assert_func>
 80083fc:	0052      	lsls	r2, r2, #1
 80083fe:	3101      	adds	r1, #1
 8008400:	e7f0      	b.n	80083e4 <__s2b+0x18>
 8008402:	9b08      	ldr	r3, [sp, #32]
 8008404:	6143      	str	r3, [r0, #20]
 8008406:	2d09      	cmp	r5, #9
 8008408:	f04f 0301 	mov.w	r3, #1
 800840c:	6103      	str	r3, [r0, #16]
 800840e:	dd16      	ble.n	800843e <__s2b+0x72>
 8008410:	f104 0909 	add.w	r9, r4, #9
 8008414:	46c8      	mov	r8, r9
 8008416:	442c      	add	r4, r5
 8008418:	f818 3b01 	ldrb.w	r3, [r8], #1
 800841c:	4601      	mov	r1, r0
 800841e:	3b30      	subs	r3, #48	; 0x30
 8008420:	220a      	movs	r2, #10
 8008422:	4630      	mov	r0, r6
 8008424:	f7ff ff8c 	bl	8008340 <__multadd>
 8008428:	45a0      	cmp	r8, r4
 800842a:	d1f5      	bne.n	8008418 <__s2b+0x4c>
 800842c:	f1a5 0408 	sub.w	r4, r5, #8
 8008430:	444c      	add	r4, r9
 8008432:	1b2d      	subs	r5, r5, r4
 8008434:	1963      	adds	r3, r4, r5
 8008436:	42bb      	cmp	r3, r7
 8008438:	db04      	blt.n	8008444 <__s2b+0x78>
 800843a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843e:	340a      	adds	r4, #10
 8008440:	2509      	movs	r5, #9
 8008442:	e7f6      	b.n	8008432 <__s2b+0x66>
 8008444:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008448:	4601      	mov	r1, r0
 800844a:	3b30      	subs	r3, #48	; 0x30
 800844c:	220a      	movs	r2, #10
 800844e:	4630      	mov	r0, r6
 8008450:	f7ff ff76 	bl	8008340 <__multadd>
 8008454:	e7ee      	b.n	8008434 <__s2b+0x68>
 8008456:	bf00      	nop
 8008458:	0800b6eb 	.word	0x0800b6eb
 800845c:	0800b6fc 	.word	0x0800b6fc

08008460 <__hi0bits>:
 8008460:	0c03      	lsrs	r3, r0, #16
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	b9d3      	cbnz	r3, 800849c <__hi0bits+0x3c>
 8008466:	0400      	lsls	r0, r0, #16
 8008468:	2310      	movs	r3, #16
 800846a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800846e:	bf04      	itt	eq
 8008470:	0200      	lsleq	r0, r0, #8
 8008472:	3308      	addeq	r3, #8
 8008474:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008478:	bf04      	itt	eq
 800847a:	0100      	lsleq	r0, r0, #4
 800847c:	3304      	addeq	r3, #4
 800847e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008482:	bf04      	itt	eq
 8008484:	0080      	lsleq	r0, r0, #2
 8008486:	3302      	addeq	r3, #2
 8008488:	2800      	cmp	r0, #0
 800848a:	db05      	blt.n	8008498 <__hi0bits+0x38>
 800848c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008490:	f103 0301 	add.w	r3, r3, #1
 8008494:	bf08      	it	eq
 8008496:	2320      	moveq	r3, #32
 8008498:	4618      	mov	r0, r3
 800849a:	4770      	bx	lr
 800849c:	2300      	movs	r3, #0
 800849e:	e7e4      	b.n	800846a <__hi0bits+0xa>

080084a0 <__lo0bits>:
 80084a0:	6803      	ldr	r3, [r0, #0]
 80084a2:	f013 0207 	ands.w	r2, r3, #7
 80084a6:	d00c      	beq.n	80084c2 <__lo0bits+0x22>
 80084a8:	07d9      	lsls	r1, r3, #31
 80084aa:	d422      	bmi.n	80084f2 <__lo0bits+0x52>
 80084ac:	079a      	lsls	r2, r3, #30
 80084ae:	bf49      	itett	mi
 80084b0:	085b      	lsrmi	r3, r3, #1
 80084b2:	089b      	lsrpl	r3, r3, #2
 80084b4:	6003      	strmi	r3, [r0, #0]
 80084b6:	2201      	movmi	r2, #1
 80084b8:	bf5c      	itt	pl
 80084ba:	6003      	strpl	r3, [r0, #0]
 80084bc:	2202      	movpl	r2, #2
 80084be:	4610      	mov	r0, r2
 80084c0:	4770      	bx	lr
 80084c2:	b299      	uxth	r1, r3
 80084c4:	b909      	cbnz	r1, 80084ca <__lo0bits+0x2a>
 80084c6:	0c1b      	lsrs	r3, r3, #16
 80084c8:	2210      	movs	r2, #16
 80084ca:	b2d9      	uxtb	r1, r3
 80084cc:	b909      	cbnz	r1, 80084d2 <__lo0bits+0x32>
 80084ce:	3208      	adds	r2, #8
 80084d0:	0a1b      	lsrs	r3, r3, #8
 80084d2:	0719      	lsls	r1, r3, #28
 80084d4:	bf04      	itt	eq
 80084d6:	091b      	lsreq	r3, r3, #4
 80084d8:	3204      	addeq	r2, #4
 80084da:	0799      	lsls	r1, r3, #30
 80084dc:	bf04      	itt	eq
 80084de:	089b      	lsreq	r3, r3, #2
 80084e0:	3202      	addeq	r2, #2
 80084e2:	07d9      	lsls	r1, r3, #31
 80084e4:	d403      	bmi.n	80084ee <__lo0bits+0x4e>
 80084e6:	085b      	lsrs	r3, r3, #1
 80084e8:	f102 0201 	add.w	r2, r2, #1
 80084ec:	d003      	beq.n	80084f6 <__lo0bits+0x56>
 80084ee:	6003      	str	r3, [r0, #0]
 80084f0:	e7e5      	b.n	80084be <__lo0bits+0x1e>
 80084f2:	2200      	movs	r2, #0
 80084f4:	e7e3      	b.n	80084be <__lo0bits+0x1e>
 80084f6:	2220      	movs	r2, #32
 80084f8:	e7e1      	b.n	80084be <__lo0bits+0x1e>
	...

080084fc <__i2b>:
 80084fc:	b510      	push	{r4, lr}
 80084fe:	460c      	mov	r4, r1
 8008500:	2101      	movs	r1, #1
 8008502:	f7ff febb 	bl	800827c <_Balloc>
 8008506:	4602      	mov	r2, r0
 8008508:	b928      	cbnz	r0, 8008516 <__i2b+0x1a>
 800850a:	4b05      	ldr	r3, [pc, #20]	; (8008520 <__i2b+0x24>)
 800850c:	4805      	ldr	r0, [pc, #20]	; (8008524 <__i2b+0x28>)
 800850e:	f240 1145 	movw	r1, #325	; 0x145
 8008512:	f001 fc29 	bl	8009d68 <__assert_func>
 8008516:	2301      	movs	r3, #1
 8008518:	6144      	str	r4, [r0, #20]
 800851a:	6103      	str	r3, [r0, #16]
 800851c:	bd10      	pop	{r4, pc}
 800851e:	bf00      	nop
 8008520:	0800b6eb 	.word	0x0800b6eb
 8008524:	0800b6fc 	.word	0x0800b6fc

08008528 <__multiply>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	4691      	mov	r9, r2
 800852e:	690a      	ldr	r2, [r1, #16]
 8008530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008534:	429a      	cmp	r2, r3
 8008536:	bfb8      	it	lt
 8008538:	460b      	movlt	r3, r1
 800853a:	460c      	mov	r4, r1
 800853c:	bfbc      	itt	lt
 800853e:	464c      	movlt	r4, r9
 8008540:	4699      	movlt	r9, r3
 8008542:	6927      	ldr	r7, [r4, #16]
 8008544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008548:	68a3      	ldr	r3, [r4, #8]
 800854a:	6861      	ldr	r1, [r4, #4]
 800854c:	eb07 060a 	add.w	r6, r7, sl
 8008550:	42b3      	cmp	r3, r6
 8008552:	b085      	sub	sp, #20
 8008554:	bfb8      	it	lt
 8008556:	3101      	addlt	r1, #1
 8008558:	f7ff fe90 	bl	800827c <_Balloc>
 800855c:	b930      	cbnz	r0, 800856c <__multiply+0x44>
 800855e:	4602      	mov	r2, r0
 8008560:	4b44      	ldr	r3, [pc, #272]	; (8008674 <__multiply+0x14c>)
 8008562:	4845      	ldr	r0, [pc, #276]	; (8008678 <__multiply+0x150>)
 8008564:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008568:	f001 fbfe 	bl	8009d68 <__assert_func>
 800856c:	f100 0514 	add.w	r5, r0, #20
 8008570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008574:	462b      	mov	r3, r5
 8008576:	2200      	movs	r2, #0
 8008578:	4543      	cmp	r3, r8
 800857a:	d321      	bcc.n	80085c0 <__multiply+0x98>
 800857c:	f104 0314 	add.w	r3, r4, #20
 8008580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008584:	f109 0314 	add.w	r3, r9, #20
 8008588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800858c:	9202      	str	r2, [sp, #8]
 800858e:	1b3a      	subs	r2, r7, r4
 8008590:	3a15      	subs	r2, #21
 8008592:	f022 0203 	bic.w	r2, r2, #3
 8008596:	3204      	adds	r2, #4
 8008598:	f104 0115 	add.w	r1, r4, #21
 800859c:	428f      	cmp	r7, r1
 800859e:	bf38      	it	cc
 80085a0:	2204      	movcc	r2, #4
 80085a2:	9201      	str	r2, [sp, #4]
 80085a4:	9a02      	ldr	r2, [sp, #8]
 80085a6:	9303      	str	r3, [sp, #12]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d80c      	bhi.n	80085c6 <__multiply+0x9e>
 80085ac:	2e00      	cmp	r6, #0
 80085ae:	dd03      	ble.n	80085b8 <__multiply+0x90>
 80085b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d05b      	beq.n	8008670 <__multiply+0x148>
 80085b8:	6106      	str	r6, [r0, #16]
 80085ba:	b005      	add	sp, #20
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	f843 2b04 	str.w	r2, [r3], #4
 80085c4:	e7d8      	b.n	8008578 <__multiply+0x50>
 80085c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80085ca:	f1ba 0f00 	cmp.w	sl, #0
 80085ce:	d024      	beq.n	800861a <__multiply+0xf2>
 80085d0:	f104 0e14 	add.w	lr, r4, #20
 80085d4:	46a9      	mov	r9, r5
 80085d6:	f04f 0c00 	mov.w	ip, #0
 80085da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085de:	f8d9 1000 	ldr.w	r1, [r9]
 80085e2:	fa1f fb82 	uxth.w	fp, r2
 80085e6:	b289      	uxth	r1, r1
 80085e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80085ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085f0:	f8d9 2000 	ldr.w	r2, [r9]
 80085f4:	4461      	add	r1, ip
 80085f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80085fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008602:	b289      	uxth	r1, r1
 8008604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008608:	4577      	cmp	r7, lr
 800860a:	f849 1b04 	str.w	r1, [r9], #4
 800860e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008612:	d8e2      	bhi.n	80085da <__multiply+0xb2>
 8008614:	9a01      	ldr	r2, [sp, #4]
 8008616:	f845 c002 	str.w	ip, [r5, r2]
 800861a:	9a03      	ldr	r2, [sp, #12]
 800861c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008620:	3304      	adds	r3, #4
 8008622:	f1b9 0f00 	cmp.w	r9, #0
 8008626:	d021      	beq.n	800866c <__multiply+0x144>
 8008628:	6829      	ldr	r1, [r5, #0]
 800862a:	f104 0c14 	add.w	ip, r4, #20
 800862e:	46ae      	mov	lr, r5
 8008630:	f04f 0a00 	mov.w	sl, #0
 8008634:	f8bc b000 	ldrh.w	fp, [ip]
 8008638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800863c:	fb09 220b 	mla	r2, r9, fp, r2
 8008640:	4452      	add	r2, sl
 8008642:	b289      	uxth	r1, r1
 8008644:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008648:	f84e 1b04 	str.w	r1, [lr], #4
 800864c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008650:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008654:	f8be 1000 	ldrh.w	r1, [lr]
 8008658:	fb09 110a 	mla	r1, r9, sl, r1
 800865c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008660:	4567      	cmp	r7, ip
 8008662:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008666:	d8e5      	bhi.n	8008634 <__multiply+0x10c>
 8008668:	9a01      	ldr	r2, [sp, #4]
 800866a:	50a9      	str	r1, [r5, r2]
 800866c:	3504      	adds	r5, #4
 800866e:	e799      	b.n	80085a4 <__multiply+0x7c>
 8008670:	3e01      	subs	r6, #1
 8008672:	e79b      	b.n	80085ac <__multiply+0x84>
 8008674:	0800b6eb 	.word	0x0800b6eb
 8008678:	0800b6fc 	.word	0x0800b6fc

0800867c <__pow5mult>:
 800867c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008680:	4615      	mov	r5, r2
 8008682:	f012 0203 	ands.w	r2, r2, #3
 8008686:	4606      	mov	r6, r0
 8008688:	460f      	mov	r7, r1
 800868a:	d007      	beq.n	800869c <__pow5mult+0x20>
 800868c:	4c25      	ldr	r4, [pc, #148]	; (8008724 <__pow5mult+0xa8>)
 800868e:	3a01      	subs	r2, #1
 8008690:	2300      	movs	r3, #0
 8008692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008696:	f7ff fe53 	bl	8008340 <__multadd>
 800869a:	4607      	mov	r7, r0
 800869c:	10ad      	asrs	r5, r5, #2
 800869e:	d03d      	beq.n	800871c <__pow5mult+0xa0>
 80086a0:	69f4      	ldr	r4, [r6, #28]
 80086a2:	b97c      	cbnz	r4, 80086c4 <__pow5mult+0x48>
 80086a4:	2010      	movs	r0, #16
 80086a6:	f7fd fda5 	bl	80061f4 <malloc>
 80086aa:	4602      	mov	r2, r0
 80086ac:	61f0      	str	r0, [r6, #28]
 80086ae:	b928      	cbnz	r0, 80086bc <__pow5mult+0x40>
 80086b0:	4b1d      	ldr	r3, [pc, #116]	; (8008728 <__pow5mult+0xac>)
 80086b2:	481e      	ldr	r0, [pc, #120]	; (800872c <__pow5mult+0xb0>)
 80086b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80086b8:	f001 fb56 	bl	8009d68 <__assert_func>
 80086bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80086c0:	6004      	str	r4, [r0, #0]
 80086c2:	60c4      	str	r4, [r0, #12]
 80086c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80086c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80086cc:	b94c      	cbnz	r4, 80086e2 <__pow5mult+0x66>
 80086ce:	f240 2171 	movw	r1, #625	; 0x271
 80086d2:	4630      	mov	r0, r6
 80086d4:	f7ff ff12 	bl	80084fc <__i2b>
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c8 0008 	str.w	r0, [r8, #8]
 80086de:	4604      	mov	r4, r0
 80086e0:	6003      	str	r3, [r0, #0]
 80086e2:	f04f 0900 	mov.w	r9, #0
 80086e6:	07eb      	lsls	r3, r5, #31
 80086e8:	d50a      	bpl.n	8008700 <__pow5mult+0x84>
 80086ea:	4639      	mov	r1, r7
 80086ec:	4622      	mov	r2, r4
 80086ee:	4630      	mov	r0, r6
 80086f0:	f7ff ff1a 	bl	8008528 <__multiply>
 80086f4:	4639      	mov	r1, r7
 80086f6:	4680      	mov	r8, r0
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7ff fdff 	bl	80082fc <_Bfree>
 80086fe:	4647      	mov	r7, r8
 8008700:	106d      	asrs	r5, r5, #1
 8008702:	d00b      	beq.n	800871c <__pow5mult+0xa0>
 8008704:	6820      	ldr	r0, [r4, #0]
 8008706:	b938      	cbnz	r0, 8008718 <__pow5mult+0x9c>
 8008708:	4622      	mov	r2, r4
 800870a:	4621      	mov	r1, r4
 800870c:	4630      	mov	r0, r6
 800870e:	f7ff ff0b 	bl	8008528 <__multiply>
 8008712:	6020      	str	r0, [r4, #0]
 8008714:	f8c0 9000 	str.w	r9, [r0]
 8008718:	4604      	mov	r4, r0
 800871a:	e7e4      	b.n	80086e6 <__pow5mult+0x6a>
 800871c:	4638      	mov	r0, r7
 800871e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008722:	bf00      	nop
 8008724:	0800b848 	.word	0x0800b848
 8008728:	0800b67c 	.word	0x0800b67c
 800872c:	0800b6fc 	.word	0x0800b6fc

08008730 <__lshift>:
 8008730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008734:	460c      	mov	r4, r1
 8008736:	6849      	ldr	r1, [r1, #4]
 8008738:	6923      	ldr	r3, [r4, #16]
 800873a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800873e:	68a3      	ldr	r3, [r4, #8]
 8008740:	4607      	mov	r7, r0
 8008742:	4691      	mov	r9, r2
 8008744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008748:	f108 0601 	add.w	r6, r8, #1
 800874c:	42b3      	cmp	r3, r6
 800874e:	db0b      	blt.n	8008768 <__lshift+0x38>
 8008750:	4638      	mov	r0, r7
 8008752:	f7ff fd93 	bl	800827c <_Balloc>
 8008756:	4605      	mov	r5, r0
 8008758:	b948      	cbnz	r0, 800876e <__lshift+0x3e>
 800875a:	4602      	mov	r2, r0
 800875c:	4b28      	ldr	r3, [pc, #160]	; (8008800 <__lshift+0xd0>)
 800875e:	4829      	ldr	r0, [pc, #164]	; (8008804 <__lshift+0xd4>)
 8008760:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008764:	f001 fb00 	bl	8009d68 <__assert_func>
 8008768:	3101      	adds	r1, #1
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	e7ee      	b.n	800874c <__lshift+0x1c>
 800876e:	2300      	movs	r3, #0
 8008770:	f100 0114 	add.w	r1, r0, #20
 8008774:	f100 0210 	add.w	r2, r0, #16
 8008778:	4618      	mov	r0, r3
 800877a:	4553      	cmp	r3, sl
 800877c:	db33      	blt.n	80087e6 <__lshift+0xb6>
 800877e:	6920      	ldr	r0, [r4, #16]
 8008780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008784:	f104 0314 	add.w	r3, r4, #20
 8008788:	f019 091f 	ands.w	r9, r9, #31
 800878c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008790:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008794:	d02b      	beq.n	80087ee <__lshift+0xbe>
 8008796:	f1c9 0e20 	rsb	lr, r9, #32
 800879a:	468a      	mov	sl, r1
 800879c:	2200      	movs	r2, #0
 800879e:	6818      	ldr	r0, [r3, #0]
 80087a0:	fa00 f009 	lsl.w	r0, r0, r9
 80087a4:	4310      	orrs	r0, r2
 80087a6:	f84a 0b04 	str.w	r0, [sl], #4
 80087aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80087ae:	459c      	cmp	ip, r3
 80087b0:	fa22 f20e 	lsr.w	r2, r2, lr
 80087b4:	d8f3      	bhi.n	800879e <__lshift+0x6e>
 80087b6:	ebac 0304 	sub.w	r3, ip, r4
 80087ba:	3b15      	subs	r3, #21
 80087bc:	f023 0303 	bic.w	r3, r3, #3
 80087c0:	3304      	adds	r3, #4
 80087c2:	f104 0015 	add.w	r0, r4, #21
 80087c6:	4584      	cmp	ip, r0
 80087c8:	bf38      	it	cc
 80087ca:	2304      	movcc	r3, #4
 80087cc:	50ca      	str	r2, [r1, r3]
 80087ce:	b10a      	cbz	r2, 80087d4 <__lshift+0xa4>
 80087d0:	f108 0602 	add.w	r6, r8, #2
 80087d4:	3e01      	subs	r6, #1
 80087d6:	4638      	mov	r0, r7
 80087d8:	612e      	str	r6, [r5, #16]
 80087da:	4621      	mov	r1, r4
 80087dc:	f7ff fd8e 	bl	80082fc <_Bfree>
 80087e0:	4628      	mov	r0, r5
 80087e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80087ea:	3301      	adds	r3, #1
 80087ec:	e7c5      	b.n	800877a <__lshift+0x4a>
 80087ee:	3904      	subs	r1, #4
 80087f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80087f8:	459c      	cmp	ip, r3
 80087fa:	d8f9      	bhi.n	80087f0 <__lshift+0xc0>
 80087fc:	e7ea      	b.n	80087d4 <__lshift+0xa4>
 80087fe:	bf00      	nop
 8008800:	0800b6eb 	.word	0x0800b6eb
 8008804:	0800b6fc 	.word	0x0800b6fc

08008808 <__mcmp>:
 8008808:	b530      	push	{r4, r5, lr}
 800880a:	6902      	ldr	r2, [r0, #16]
 800880c:	690c      	ldr	r4, [r1, #16]
 800880e:	1b12      	subs	r2, r2, r4
 8008810:	d10e      	bne.n	8008830 <__mcmp+0x28>
 8008812:	f100 0314 	add.w	r3, r0, #20
 8008816:	3114      	adds	r1, #20
 8008818:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800881c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008820:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008824:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008828:	42a5      	cmp	r5, r4
 800882a:	d003      	beq.n	8008834 <__mcmp+0x2c>
 800882c:	d305      	bcc.n	800883a <__mcmp+0x32>
 800882e:	2201      	movs	r2, #1
 8008830:	4610      	mov	r0, r2
 8008832:	bd30      	pop	{r4, r5, pc}
 8008834:	4283      	cmp	r3, r0
 8008836:	d3f3      	bcc.n	8008820 <__mcmp+0x18>
 8008838:	e7fa      	b.n	8008830 <__mcmp+0x28>
 800883a:	f04f 32ff 	mov.w	r2, #4294967295
 800883e:	e7f7      	b.n	8008830 <__mcmp+0x28>

08008840 <__mdiff>:
 8008840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	460c      	mov	r4, r1
 8008846:	4606      	mov	r6, r0
 8008848:	4611      	mov	r1, r2
 800884a:	4620      	mov	r0, r4
 800884c:	4690      	mov	r8, r2
 800884e:	f7ff ffdb 	bl	8008808 <__mcmp>
 8008852:	1e05      	subs	r5, r0, #0
 8008854:	d110      	bne.n	8008878 <__mdiff+0x38>
 8008856:	4629      	mov	r1, r5
 8008858:	4630      	mov	r0, r6
 800885a:	f7ff fd0f 	bl	800827c <_Balloc>
 800885e:	b930      	cbnz	r0, 800886e <__mdiff+0x2e>
 8008860:	4b3a      	ldr	r3, [pc, #232]	; (800894c <__mdiff+0x10c>)
 8008862:	4602      	mov	r2, r0
 8008864:	f240 2137 	movw	r1, #567	; 0x237
 8008868:	4839      	ldr	r0, [pc, #228]	; (8008950 <__mdiff+0x110>)
 800886a:	f001 fa7d 	bl	8009d68 <__assert_func>
 800886e:	2301      	movs	r3, #1
 8008870:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008878:	bfa4      	itt	ge
 800887a:	4643      	movge	r3, r8
 800887c:	46a0      	movge	r8, r4
 800887e:	4630      	mov	r0, r6
 8008880:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008884:	bfa6      	itte	ge
 8008886:	461c      	movge	r4, r3
 8008888:	2500      	movge	r5, #0
 800888a:	2501      	movlt	r5, #1
 800888c:	f7ff fcf6 	bl	800827c <_Balloc>
 8008890:	b920      	cbnz	r0, 800889c <__mdiff+0x5c>
 8008892:	4b2e      	ldr	r3, [pc, #184]	; (800894c <__mdiff+0x10c>)
 8008894:	4602      	mov	r2, r0
 8008896:	f240 2145 	movw	r1, #581	; 0x245
 800889a:	e7e5      	b.n	8008868 <__mdiff+0x28>
 800889c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088a0:	6926      	ldr	r6, [r4, #16]
 80088a2:	60c5      	str	r5, [r0, #12]
 80088a4:	f104 0914 	add.w	r9, r4, #20
 80088a8:	f108 0514 	add.w	r5, r8, #20
 80088ac:	f100 0e14 	add.w	lr, r0, #20
 80088b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80088b8:	f108 0210 	add.w	r2, r8, #16
 80088bc:	46f2      	mov	sl, lr
 80088be:	2100      	movs	r1, #0
 80088c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80088c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80088c8:	fa11 f88b 	uxtah	r8, r1, fp
 80088cc:	b299      	uxth	r1, r3
 80088ce:	0c1b      	lsrs	r3, r3, #16
 80088d0:	eba8 0801 	sub.w	r8, r8, r1
 80088d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088d8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088dc:	fa1f f888 	uxth.w	r8, r8
 80088e0:	1419      	asrs	r1, r3, #16
 80088e2:	454e      	cmp	r6, r9
 80088e4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088e8:	f84a 3b04 	str.w	r3, [sl], #4
 80088ec:	d8e8      	bhi.n	80088c0 <__mdiff+0x80>
 80088ee:	1b33      	subs	r3, r6, r4
 80088f0:	3b15      	subs	r3, #21
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	3304      	adds	r3, #4
 80088f8:	3415      	adds	r4, #21
 80088fa:	42a6      	cmp	r6, r4
 80088fc:	bf38      	it	cc
 80088fe:	2304      	movcc	r3, #4
 8008900:	441d      	add	r5, r3
 8008902:	4473      	add	r3, lr
 8008904:	469e      	mov	lr, r3
 8008906:	462e      	mov	r6, r5
 8008908:	4566      	cmp	r6, ip
 800890a:	d30e      	bcc.n	800892a <__mdiff+0xea>
 800890c:	f10c 0203 	add.w	r2, ip, #3
 8008910:	1b52      	subs	r2, r2, r5
 8008912:	f022 0203 	bic.w	r2, r2, #3
 8008916:	3d03      	subs	r5, #3
 8008918:	45ac      	cmp	ip, r5
 800891a:	bf38      	it	cc
 800891c:	2200      	movcc	r2, #0
 800891e:	4413      	add	r3, r2
 8008920:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008924:	b17a      	cbz	r2, 8008946 <__mdiff+0x106>
 8008926:	6107      	str	r7, [r0, #16]
 8008928:	e7a4      	b.n	8008874 <__mdiff+0x34>
 800892a:	f856 8b04 	ldr.w	r8, [r6], #4
 800892e:	fa11 f288 	uxtah	r2, r1, r8
 8008932:	1414      	asrs	r4, r2, #16
 8008934:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008938:	b292      	uxth	r2, r2
 800893a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800893e:	f84e 2b04 	str.w	r2, [lr], #4
 8008942:	1421      	asrs	r1, r4, #16
 8008944:	e7e0      	b.n	8008908 <__mdiff+0xc8>
 8008946:	3f01      	subs	r7, #1
 8008948:	e7ea      	b.n	8008920 <__mdiff+0xe0>
 800894a:	bf00      	nop
 800894c:	0800b6eb 	.word	0x0800b6eb
 8008950:	0800b6fc 	.word	0x0800b6fc

08008954 <__ulp>:
 8008954:	b082      	sub	sp, #8
 8008956:	ed8d 0b00 	vstr	d0, [sp]
 800895a:	9a01      	ldr	r2, [sp, #4]
 800895c:	4b0f      	ldr	r3, [pc, #60]	; (800899c <__ulp+0x48>)
 800895e:	4013      	ands	r3, r2
 8008960:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008964:	2b00      	cmp	r3, #0
 8008966:	dc08      	bgt.n	800897a <__ulp+0x26>
 8008968:	425b      	negs	r3, r3
 800896a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800896e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008972:	da04      	bge.n	800897e <__ulp+0x2a>
 8008974:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008978:	4113      	asrs	r3, r2
 800897a:	2200      	movs	r2, #0
 800897c:	e008      	b.n	8008990 <__ulp+0x3c>
 800897e:	f1a2 0314 	sub.w	r3, r2, #20
 8008982:	2b1e      	cmp	r3, #30
 8008984:	bfda      	itte	le
 8008986:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800898a:	40da      	lsrle	r2, r3
 800898c:	2201      	movgt	r2, #1
 800898e:	2300      	movs	r3, #0
 8008990:	4619      	mov	r1, r3
 8008992:	4610      	mov	r0, r2
 8008994:	ec41 0b10 	vmov	d0, r0, r1
 8008998:	b002      	add	sp, #8
 800899a:	4770      	bx	lr
 800899c:	7ff00000 	.word	0x7ff00000

080089a0 <__b2d>:
 80089a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a4:	6906      	ldr	r6, [r0, #16]
 80089a6:	f100 0814 	add.w	r8, r0, #20
 80089aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80089ae:	1f37      	subs	r7, r6, #4
 80089b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089b4:	4610      	mov	r0, r2
 80089b6:	f7ff fd53 	bl	8008460 <__hi0bits>
 80089ba:	f1c0 0320 	rsb	r3, r0, #32
 80089be:	280a      	cmp	r0, #10
 80089c0:	600b      	str	r3, [r1, #0]
 80089c2:	491b      	ldr	r1, [pc, #108]	; (8008a30 <__b2d+0x90>)
 80089c4:	dc15      	bgt.n	80089f2 <__b2d+0x52>
 80089c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80089ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80089ce:	45b8      	cmp	r8, r7
 80089d0:	ea43 0501 	orr.w	r5, r3, r1
 80089d4:	bf34      	ite	cc
 80089d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089da:	2300      	movcs	r3, #0
 80089dc:	3015      	adds	r0, #21
 80089de:	fa02 f000 	lsl.w	r0, r2, r0
 80089e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80089e6:	4303      	orrs	r3, r0
 80089e8:	461c      	mov	r4, r3
 80089ea:	ec45 4b10 	vmov	d0, r4, r5
 80089ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f2:	45b8      	cmp	r8, r7
 80089f4:	bf3a      	itte	cc
 80089f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80089fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80089fe:	2300      	movcs	r3, #0
 8008a00:	380b      	subs	r0, #11
 8008a02:	d012      	beq.n	8008a2a <__b2d+0x8a>
 8008a04:	f1c0 0120 	rsb	r1, r0, #32
 8008a08:	fa23 f401 	lsr.w	r4, r3, r1
 8008a0c:	4082      	lsls	r2, r0
 8008a0e:	4322      	orrs	r2, r4
 8008a10:	4547      	cmp	r7, r8
 8008a12:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008a16:	bf8c      	ite	hi
 8008a18:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008a1c:	2200      	movls	r2, #0
 8008a1e:	4083      	lsls	r3, r0
 8008a20:	40ca      	lsrs	r2, r1
 8008a22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a26:	4313      	orrs	r3, r2
 8008a28:	e7de      	b.n	80089e8 <__b2d+0x48>
 8008a2a:	ea42 0501 	orr.w	r5, r2, r1
 8008a2e:	e7db      	b.n	80089e8 <__b2d+0x48>
 8008a30:	3ff00000 	.word	0x3ff00000

08008a34 <__d2b>:
 8008a34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a38:	460f      	mov	r7, r1
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	ec59 8b10 	vmov	r8, r9, d0
 8008a40:	4616      	mov	r6, r2
 8008a42:	f7ff fc1b 	bl	800827c <_Balloc>
 8008a46:	4604      	mov	r4, r0
 8008a48:	b930      	cbnz	r0, 8008a58 <__d2b+0x24>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	4b24      	ldr	r3, [pc, #144]	; (8008ae0 <__d2b+0xac>)
 8008a4e:	4825      	ldr	r0, [pc, #148]	; (8008ae4 <__d2b+0xb0>)
 8008a50:	f240 310f 	movw	r1, #783	; 0x30f
 8008a54:	f001 f988 	bl	8009d68 <__assert_func>
 8008a58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a60:	bb2d      	cbnz	r5, 8008aae <__d2b+0x7a>
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	f1b8 0300 	subs.w	r3, r8, #0
 8008a68:	d026      	beq.n	8008ab8 <__d2b+0x84>
 8008a6a:	4668      	mov	r0, sp
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	f7ff fd17 	bl	80084a0 <__lo0bits>
 8008a72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a76:	b1e8      	cbz	r0, 8008ab4 <__d2b+0x80>
 8008a78:	f1c0 0320 	rsb	r3, r0, #32
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	430b      	orrs	r3, r1
 8008a82:	40c2      	lsrs	r2, r0
 8008a84:	6163      	str	r3, [r4, #20]
 8008a86:	9201      	str	r2, [sp, #4]
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	61a3      	str	r3, [r4, #24]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	bf14      	ite	ne
 8008a90:	2202      	movne	r2, #2
 8008a92:	2201      	moveq	r2, #1
 8008a94:	6122      	str	r2, [r4, #16]
 8008a96:	b1bd      	cbz	r5, 8008ac8 <__d2b+0x94>
 8008a98:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a9c:	4405      	add	r5, r0
 8008a9e:	603d      	str	r5, [r7, #0]
 8008aa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008aa4:	6030      	str	r0, [r6, #0]
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	b003      	add	sp, #12
 8008aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ab2:	e7d6      	b.n	8008a62 <__d2b+0x2e>
 8008ab4:	6161      	str	r1, [r4, #20]
 8008ab6:	e7e7      	b.n	8008a88 <__d2b+0x54>
 8008ab8:	a801      	add	r0, sp, #4
 8008aba:	f7ff fcf1 	bl	80084a0 <__lo0bits>
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	6163      	str	r3, [r4, #20]
 8008ac2:	3020      	adds	r0, #32
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	e7e5      	b.n	8008a94 <__d2b+0x60>
 8008ac8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008acc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ad0:	6038      	str	r0, [r7, #0]
 8008ad2:	6918      	ldr	r0, [r3, #16]
 8008ad4:	f7ff fcc4 	bl	8008460 <__hi0bits>
 8008ad8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008adc:	e7e2      	b.n	8008aa4 <__d2b+0x70>
 8008ade:	bf00      	nop
 8008ae0:	0800b6eb 	.word	0x0800b6eb
 8008ae4:	0800b6fc 	.word	0x0800b6fc

08008ae8 <__ratio>:
 8008ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	4688      	mov	r8, r1
 8008aee:	4669      	mov	r1, sp
 8008af0:	4681      	mov	r9, r0
 8008af2:	f7ff ff55 	bl	80089a0 <__b2d>
 8008af6:	a901      	add	r1, sp, #4
 8008af8:	4640      	mov	r0, r8
 8008afa:	ec55 4b10 	vmov	r4, r5, d0
 8008afe:	f7ff ff4f 	bl	80089a0 <__b2d>
 8008b02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b06:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b0a:	eba3 0c02 	sub.w	ip, r3, r2
 8008b0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b18:	ec51 0b10 	vmov	r0, r1, d0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	bfd6      	itet	le
 8008b20:	460a      	movle	r2, r1
 8008b22:	462a      	movgt	r2, r5
 8008b24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b28:	468b      	mov	fp, r1
 8008b2a:	462f      	mov	r7, r5
 8008b2c:	bfd4      	ite	le
 8008b2e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b36:	4620      	mov	r0, r4
 8008b38:	ee10 2a10 	vmov	r2, s0
 8008b3c:	465b      	mov	r3, fp
 8008b3e:	4639      	mov	r1, r7
 8008b40:	f7f7 fe84 	bl	800084c <__aeabi_ddiv>
 8008b44:	ec41 0b10 	vmov	d0, r0, r1
 8008b48:	b003      	add	sp, #12
 8008b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b4e <__copybits>:
 8008b4e:	3901      	subs	r1, #1
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	1149      	asrs	r1, r1, #5
 8008b54:	6914      	ldr	r4, [r2, #16]
 8008b56:	3101      	adds	r1, #1
 8008b58:	f102 0314 	add.w	r3, r2, #20
 8008b5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008b60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008b64:	1f05      	subs	r5, r0, #4
 8008b66:	42a3      	cmp	r3, r4
 8008b68:	d30c      	bcc.n	8008b84 <__copybits+0x36>
 8008b6a:	1aa3      	subs	r3, r4, r2
 8008b6c:	3b11      	subs	r3, #17
 8008b6e:	f023 0303 	bic.w	r3, r3, #3
 8008b72:	3211      	adds	r2, #17
 8008b74:	42a2      	cmp	r2, r4
 8008b76:	bf88      	it	hi
 8008b78:	2300      	movhi	r3, #0
 8008b7a:	4418      	add	r0, r3
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4288      	cmp	r0, r1
 8008b80:	d305      	bcc.n	8008b8e <__copybits+0x40>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f853 6b04 	ldr.w	r6, [r3], #4
 8008b88:	f845 6f04 	str.w	r6, [r5, #4]!
 8008b8c:	e7eb      	b.n	8008b66 <__copybits+0x18>
 8008b8e:	f840 3b04 	str.w	r3, [r0], #4
 8008b92:	e7f4      	b.n	8008b7e <__copybits+0x30>

08008b94 <__any_on>:
 8008b94:	f100 0214 	add.w	r2, r0, #20
 8008b98:	6900      	ldr	r0, [r0, #16]
 8008b9a:	114b      	asrs	r3, r1, #5
 8008b9c:	4298      	cmp	r0, r3
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	db11      	blt.n	8008bc6 <__any_on+0x32>
 8008ba2:	dd0a      	ble.n	8008bba <__any_on+0x26>
 8008ba4:	f011 011f 	ands.w	r1, r1, #31
 8008ba8:	d007      	beq.n	8008bba <__any_on+0x26>
 8008baa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bae:	fa24 f001 	lsr.w	r0, r4, r1
 8008bb2:	fa00 f101 	lsl.w	r1, r0, r1
 8008bb6:	428c      	cmp	r4, r1
 8008bb8:	d10b      	bne.n	8008bd2 <__any_on+0x3e>
 8008bba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d803      	bhi.n	8008bca <__any_on+0x36>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	bd10      	pop	{r4, pc}
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	e7f7      	b.n	8008bba <__any_on+0x26>
 8008bca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d0f5      	beq.n	8008bbe <__any_on+0x2a>
 8008bd2:	2001      	movs	r0, #1
 8008bd4:	e7f6      	b.n	8008bc4 <__any_on+0x30>

08008bd6 <sulp>:
 8008bd6:	b570      	push	{r4, r5, r6, lr}
 8008bd8:	4604      	mov	r4, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	ec45 4b10 	vmov	d0, r4, r5
 8008be0:	4616      	mov	r6, r2
 8008be2:	f7ff feb7 	bl	8008954 <__ulp>
 8008be6:	ec51 0b10 	vmov	r0, r1, d0
 8008bea:	b17e      	cbz	r6, 8008c0c <sulp+0x36>
 8008bec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd09      	ble.n	8008c0c <sulp+0x36>
 8008bf8:	051b      	lsls	r3, r3, #20
 8008bfa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008bfe:	2400      	movs	r4, #0
 8008c00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c04:	4622      	mov	r2, r4
 8008c06:	462b      	mov	r3, r5
 8008c08:	f7f7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8008c0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c10 <_strtod_l>:
 8008c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c14:	ed2d 8b02 	vpush	{d8}
 8008c18:	b09b      	sub	sp, #108	; 0x6c
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	9213      	str	r2, [sp, #76]	; 0x4c
 8008c1e:	2200      	movs	r2, #0
 8008c20:	9216      	str	r2, [sp, #88]	; 0x58
 8008c22:	460d      	mov	r5, r1
 8008c24:	f04f 0800 	mov.w	r8, #0
 8008c28:	f04f 0900 	mov.w	r9, #0
 8008c2c:	460a      	mov	r2, r1
 8008c2e:	9215      	str	r2, [sp, #84]	; 0x54
 8008c30:	7811      	ldrb	r1, [r2, #0]
 8008c32:	292b      	cmp	r1, #43	; 0x2b
 8008c34:	d04c      	beq.n	8008cd0 <_strtod_l+0xc0>
 8008c36:	d83a      	bhi.n	8008cae <_strtod_l+0x9e>
 8008c38:	290d      	cmp	r1, #13
 8008c3a:	d834      	bhi.n	8008ca6 <_strtod_l+0x96>
 8008c3c:	2908      	cmp	r1, #8
 8008c3e:	d834      	bhi.n	8008caa <_strtod_l+0x9a>
 8008c40:	2900      	cmp	r1, #0
 8008c42:	d03d      	beq.n	8008cc0 <_strtod_l+0xb0>
 8008c44:	2200      	movs	r2, #0
 8008c46:	920a      	str	r2, [sp, #40]	; 0x28
 8008c48:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008c4a:	7832      	ldrb	r2, [r6, #0]
 8008c4c:	2a30      	cmp	r2, #48	; 0x30
 8008c4e:	f040 80b4 	bne.w	8008dba <_strtod_l+0x1aa>
 8008c52:	7872      	ldrb	r2, [r6, #1]
 8008c54:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008c58:	2a58      	cmp	r2, #88	; 0x58
 8008c5a:	d170      	bne.n	8008d3e <_strtod_l+0x12e>
 8008c5c:	9302      	str	r3, [sp, #8]
 8008c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	ab16      	add	r3, sp, #88	; 0x58
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	4a8e      	ldr	r2, [pc, #568]	; (8008ea0 <_strtod_l+0x290>)
 8008c68:	ab17      	add	r3, sp, #92	; 0x5c
 8008c6a:	a915      	add	r1, sp, #84	; 0x54
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f001 f917 	bl	8009ea0 <__gethex>
 8008c72:	f010 070f 	ands.w	r7, r0, #15
 8008c76:	4605      	mov	r5, r0
 8008c78:	d005      	beq.n	8008c86 <_strtod_l+0x76>
 8008c7a:	2f06      	cmp	r7, #6
 8008c7c:	d12a      	bne.n	8008cd4 <_strtod_l+0xc4>
 8008c7e:	3601      	adds	r6, #1
 8008c80:	2300      	movs	r3, #0
 8008c82:	9615      	str	r6, [sp, #84]	; 0x54
 8008c84:	930a      	str	r3, [sp, #40]	; 0x28
 8008c86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f040 857f 	bne.w	800978c <_strtod_l+0xb7c>
 8008c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c90:	b1db      	cbz	r3, 8008cca <_strtod_l+0xba>
 8008c92:	4642      	mov	r2, r8
 8008c94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008c98:	ec43 2b10 	vmov	d0, r2, r3
 8008c9c:	b01b      	add	sp, #108	; 0x6c
 8008c9e:	ecbd 8b02 	vpop	{d8}
 8008ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca6:	2920      	cmp	r1, #32
 8008ca8:	d1cc      	bne.n	8008c44 <_strtod_l+0x34>
 8008caa:	3201      	adds	r2, #1
 8008cac:	e7bf      	b.n	8008c2e <_strtod_l+0x1e>
 8008cae:	292d      	cmp	r1, #45	; 0x2d
 8008cb0:	d1c8      	bne.n	8008c44 <_strtod_l+0x34>
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	910a      	str	r1, [sp, #40]	; 0x28
 8008cb6:	1c51      	adds	r1, r2, #1
 8008cb8:	9115      	str	r1, [sp, #84]	; 0x54
 8008cba:	7852      	ldrb	r2, [r2, #1]
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	d1c3      	bne.n	8008c48 <_strtod_l+0x38>
 8008cc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008cc2:	9515      	str	r5, [sp, #84]	; 0x54
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	f040 855f 	bne.w	8009788 <_strtod_l+0xb78>
 8008cca:	4642      	mov	r2, r8
 8008ccc:	464b      	mov	r3, r9
 8008cce:	e7e3      	b.n	8008c98 <_strtod_l+0x88>
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	e7ef      	b.n	8008cb4 <_strtod_l+0xa4>
 8008cd4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008cd6:	b13a      	cbz	r2, 8008ce8 <_strtod_l+0xd8>
 8008cd8:	2135      	movs	r1, #53	; 0x35
 8008cda:	a818      	add	r0, sp, #96	; 0x60
 8008cdc:	f7ff ff37 	bl	8008b4e <__copybits>
 8008ce0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7ff fb0a 	bl	80082fc <_Bfree>
 8008ce8:	3f01      	subs	r7, #1
 8008cea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cec:	2f04      	cmp	r7, #4
 8008cee:	d806      	bhi.n	8008cfe <_strtod_l+0xee>
 8008cf0:	e8df f007 	tbb	[pc, r7]
 8008cf4:	201d0314 	.word	0x201d0314
 8008cf8:	14          	.byte	0x14
 8008cf9:	00          	.byte	0x00
 8008cfa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008cfe:	05e9      	lsls	r1, r5, #23
 8008d00:	bf48      	it	mi
 8008d02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008d06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d0a:	0d1b      	lsrs	r3, r3, #20
 8008d0c:	051b      	lsls	r3, r3, #20
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1b9      	bne.n	8008c86 <_strtod_l+0x76>
 8008d12:	f7fe fba1 	bl	8007458 <__errno>
 8008d16:	2322      	movs	r3, #34	; 0x22
 8008d18:	6003      	str	r3, [r0, #0]
 8008d1a:	e7b4      	b.n	8008c86 <_strtod_l+0x76>
 8008d1c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008d20:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008d2c:	e7e7      	b.n	8008cfe <_strtod_l+0xee>
 8008d2e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008ea8 <_strtod_l+0x298>
 8008d32:	e7e4      	b.n	8008cfe <_strtod_l+0xee>
 8008d34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008d38:	f04f 38ff 	mov.w	r8, #4294967295
 8008d3c:	e7df      	b.n	8008cfe <_strtod_l+0xee>
 8008d3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	9215      	str	r2, [sp, #84]	; 0x54
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	2b30      	cmp	r3, #48	; 0x30
 8008d48:	d0f9      	beq.n	8008d3e <_strtod_l+0x12e>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d09b      	beq.n	8008c86 <_strtod_l+0x76>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	f04f 0a00 	mov.w	sl, #0
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d58:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d5a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008d5e:	46d3      	mov	fp, sl
 8008d60:	220a      	movs	r2, #10
 8008d62:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008d64:	7806      	ldrb	r6, [r0, #0]
 8008d66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008d6a:	b2d9      	uxtb	r1, r3
 8008d6c:	2909      	cmp	r1, #9
 8008d6e:	d926      	bls.n	8008dbe <_strtod_l+0x1ae>
 8008d70:	494c      	ldr	r1, [pc, #304]	; (8008ea4 <_strtod_l+0x294>)
 8008d72:	2201      	movs	r2, #1
 8008d74:	f000 ffe6 	bl	8009d44 <strncmp>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d030      	beq.n	8008dde <_strtod_l+0x1ce>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	4632      	mov	r2, r6
 8008d80:	9005      	str	r0, [sp, #20]
 8008d82:	465e      	mov	r6, fp
 8008d84:	4603      	mov	r3, r0
 8008d86:	2a65      	cmp	r2, #101	; 0x65
 8008d88:	d001      	beq.n	8008d8e <_strtod_l+0x17e>
 8008d8a:	2a45      	cmp	r2, #69	; 0x45
 8008d8c:	d113      	bne.n	8008db6 <_strtod_l+0x1a6>
 8008d8e:	b91e      	cbnz	r6, 8008d98 <_strtod_l+0x188>
 8008d90:	9a04      	ldr	r2, [sp, #16]
 8008d92:	4302      	orrs	r2, r0
 8008d94:	d094      	beq.n	8008cc0 <_strtod_l+0xb0>
 8008d96:	2600      	movs	r6, #0
 8008d98:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008d9a:	1c6a      	adds	r2, r5, #1
 8008d9c:	9215      	str	r2, [sp, #84]	; 0x54
 8008d9e:	786a      	ldrb	r2, [r5, #1]
 8008da0:	2a2b      	cmp	r2, #43	; 0x2b
 8008da2:	d074      	beq.n	8008e8e <_strtod_l+0x27e>
 8008da4:	2a2d      	cmp	r2, #45	; 0x2d
 8008da6:	d078      	beq.n	8008e9a <_strtod_l+0x28a>
 8008da8:	f04f 0c00 	mov.w	ip, #0
 8008dac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008db0:	2909      	cmp	r1, #9
 8008db2:	d97f      	bls.n	8008eb4 <_strtod_l+0x2a4>
 8008db4:	9515      	str	r5, [sp, #84]	; 0x54
 8008db6:	2700      	movs	r7, #0
 8008db8:	e09e      	b.n	8008ef8 <_strtod_l+0x2e8>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e7c8      	b.n	8008d50 <_strtod_l+0x140>
 8008dbe:	f1bb 0f08 	cmp.w	fp, #8
 8008dc2:	bfd8      	it	le
 8008dc4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008dc6:	f100 0001 	add.w	r0, r0, #1
 8008dca:	bfda      	itte	le
 8008dcc:	fb02 3301 	mlale	r3, r2, r1, r3
 8008dd0:	9309      	strle	r3, [sp, #36]	; 0x24
 8008dd2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008dd6:	f10b 0b01 	add.w	fp, fp, #1
 8008dda:	9015      	str	r0, [sp, #84]	; 0x54
 8008ddc:	e7c1      	b.n	8008d62 <_strtod_l+0x152>
 8008dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	9215      	str	r2, [sp, #84]	; 0x54
 8008de4:	785a      	ldrb	r2, [r3, #1]
 8008de6:	f1bb 0f00 	cmp.w	fp, #0
 8008dea:	d037      	beq.n	8008e5c <_strtod_l+0x24c>
 8008dec:	9005      	str	r0, [sp, #20]
 8008dee:	465e      	mov	r6, fp
 8008df0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008df4:	2b09      	cmp	r3, #9
 8008df6:	d912      	bls.n	8008e1e <_strtod_l+0x20e>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e7c4      	b.n	8008d86 <_strtod_l+0x176>
 8008dfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dfe:	1c5a      	adds	r2, r3, #1
 8008e00:	9215      	str	r2, [sp, #84]	; 0x54
 8008e02:	785a      	ldrb	r2, [r3, #1]
 8008e04:	3001      	adds	r0, #1
 8008e06:	2a30      	cmp	r2, #48	; 0x30
 8008e08:	d0f8      	beq.n	8008dfc <_strtod_l+0x1ec>
 8008e0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	f200 84c1 	bhi.w	8009796 <_strtod_l+0xb86>
 8008e14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e16:	9005      	str	r0, [sp, #20]
 8008e18:	2000      	movs	r0, #0
 8008e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	3a30      	subs	r2, #48	; 0x30
 8008e20:	f100 0301 	add.w	r3, r0, #1
 8008e24:	d014      	beq.n	8008e50 <_strtod_l+0x240>
 8008e26:	9905      	ldr	r1, [sp, #20]
 8008e28:	4419      	add	r1, r3
 8008e2a:	9105      	str	r1, [sp, #20]
 8008e2c:	4633      	mov	r3, r6
 8008e2e:	eb00 0c06 	add.w	ip, r0, r6
 8008e32:	210a      	movs	r1, #10
 8008e34:	4563      	cmp	r3, ip
 8008e36:	d113      	bne.n	8008e60 <_strtod_l+0x250>
 8008e38:	1833      	adds	r3, r6, r0
 8008e3a:	2b08      	cmp	r3, #8
 8008e3c:	f106 0601 	add.w	r6, r6, #1
 8008e40:	4406      	add	r6, r0
 8008e42:	dc1a      	bgt.n	8008e7a <_strtod_l+0x26a>
 8008e44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e46:	230a      	movs	r3, #10
 8008e48:	fb03 2301 	mla	r3, r3, r1, r2
 8008e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e4e:	2300      	movs	r3, #0
 8008e50:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e52:	1c51      	adds	r1, r2, #1
 8008e54:	9115      	str	r1, [sp, #84]	; 0x54
 8008e56:	7852      	ldrb	r2, [r2, #1]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	e7c9      	b.n	8008df0 <_strtod_l+0x1e0>
 8008e5c:	4658      	mov	r0, fp
 8008e5e:	e7d2      	b.n	8008e06 <_strtod_l+0x1f6>
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	f103 0301 	add.w	r3, r3, #1
 8008e66:	dc03      	bgt.n	8008e70 <_strtod_l+0x260>
 8008e68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e6a:	434f      	muls	r7, r1
 8008e6c:	9709      	str	r7, [sp, #36]	; 0x24
 8008e6e:	e7e1      	b.n	8008e34 <_strtod_l+0x224>
 8008e70:	2b10      	cmp	r3, #16
 8008e72:	bfd8      	it	le
 8008e74:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008e78:	e7dc      	b.n	8008e34 <_strtod_l+0x224>
 8008e7a:	2e10      	cmp	r6, #16
 8008e7c:	bfdc      	itt	le
 8008e7e:	230a      	movle	r3, #10
 8008e80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008e84:	e7e3      	b.n	8008e4e <_strtod_l+0x23e>
 8008e86:	2300      	movs	r3, #0
 8008e88:	9305      	str	r3, [sp, #20]
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e780      	b.n	8008d90 <_strtod_l+0x180>
 8008e8e:	f04f 0c00 	mov.w	ip, #0
 8008e92:	1caa      	adds	r2, r5, #2
 8008e94:	9215      	str	r2, [sp, #84]	; 0x54
 8008e96:	78aa      	ldrb	r2, [r5, #2]
 8008e98:	e788      	b.n	8008dac <_strtod_l+0x19c>
 8008e9a:	f04f 0c01 	mov.w	ip, #1
 8008e9e:	e7f8      	b.n	8008e92 <_strtod_l+0x282>
 8008ea0:	0800b854 	.word	0x0800b854
 8008ea4:	0800b28d 	.word	0x0800b28d
 8008ea8:	7ff00000 	.word	0x7ff00000
 8008eac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008eae:	1c51      	adds	r1, r2, #1
 8008eb0:	9115      	str	r1, [sp, #84]	; 0x54
 8008eb2:	7852      	ldrb	r2, [r2, #1]
 8008eb4:	2a30      	cmp	r2, #48	; 0x30
 8008eb6:	d0f9      	beq.n	8008eac <_strtod_l+0x29c>
 8008eb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008ebc:	2908      	cmp	r1, #8
 8008ebe:	f63f af7a 	bhi.w	8008db6 <_strtod_l+0x1a6>
 8008ec2:	3a30      	subs	r2, #48	; 0x30
 8008ec4:	9208      	str	r2, [sp, #32]
 8008ec6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ec8:	920c      	str	r2, [sp, #48]	; 0x30
 8008eca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ecc:	1c57      	adds	r7, r2, #1
 8008ece:	9715      	str	r7, [sp, #84]	; 0x54
 8008ed0:	7852      	ldrb	r2, [r2, #1]
 8008ed2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008ed6:	f1be 0f09 	cmp.w	lr, #9
 8008eda:	d938      	bls.n	8008f4e <_strtod_l+0x33e>
 8008edc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ede:	1a7f      	subs	r7, r7, r1
 8008ee0:	2f08      	cmp	r7, #8
 8008ee2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008ee6:	dc03      	bgt.n	8008ef0 <_strtod_l+0x2e0>
 8008ee8:	9908      	ldr	r1, [sp, #32]
 8008eea:	428f      	cmp	r7, r1
 8008eec:	bfa8      	it	ge
 8008eee:	460f      	movge	r7, r1
 8008ef0:	f1bc 0f00 	cmp.w	ip, #0
 8008ef4:	d000      	beq.n	8008ef8 <_strtod_l+0x2e8>
 8008ef6:	427f      	negs	r7, r7
 8008ef8:	2e00      	cmp	r6, #0
 8008efa:	d14f      	bne.n	8008f9c <_strtod_l+0x38c>
 8008efc:	9904      	ldr	r1, [sp, #16]
 8008efe:	4301      	orrs	r1, r0
 8008f00:	f47f aec1 	bne.w	8008c86 <_strtod_l+0x76>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f47f aedb 	bne.w	8008cc0 <_strtod_l+0xb0>
 8008f0a:	2a69      	cmp	r2, #105	; 0x69
 8008f0c:	d029      	beq.n	8008f62 <_strtod_l+0x352>
 8008f0e:	dc26      	bgt.n	8008f5e <_strtod_l+0x34e>
 8008f10:	2a49      	cmp	r2, #73	; 0x49
 8008f12:	d026      	beq.n	8008f62 <_strtod_l+0x352>
 8008f14:	2a4e      	cmp	r2, #78	; 0x4e
 8008f16:	f47f aed3 	bne.w	8008cc0 <_strtod_l+0xb0>
 8008f1a:	499b      	ldr	r1, [pc, #620]	; (8009188 <_strtod_l+0x578>)
 8008f1c:	a815      	add	r0, sp, #84	; 0x54
 8008f1e:	f001 f9ff 	bl	800a320 <__match>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	f43f aecc 	beq.w	8008cc0 <_strtod_l+0xb0>
 8008f28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	2b28      	cmp	r3, #40	; 0x28
 8008f2e:	d12f      	bne.n	8008f90 <_strtod_l+0x380>
 8008f30:	4996      	ldr	r1, [pc, #600]	; (800918c <_strtod_l+0x57c>)
 8008f32:	aa18      	add	r2, sp, #96	; 0x60
 8008f34:	a815      	add	r0, sp, #84	; 0x54
 8008f36:	f001 fa07 	bl	800a348 <__hexnan>
 8008f3a:	2805      	cmp	r0, #5
 8008f3c:	d128      	bne.n	8008f90 <_strtod_l+0x380>
 8008f3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008f44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008f48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008f4c:	e69b      	b.n	8008c86 <_strtod_l+0x76>
 8008f4e:	9f08      	ldr	r7, [sp, #32]
 8008f50:	210a      	movs	r1, #10
 8008f52:	fb01 2107 	mla	r1, r1, r7, r2
 8008f56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008f5a:	9208      	str	r2, [sp, #32]
 8008f5c:	e7b5      	b.n	8008eca <_strtod_l+0x2ba>
 8008f5e:	2a6e      	cmp	r2, #110	; 0x6e
 8008f60:	e7d9      	b.n	8008f16 <_strtod_l+0x306>
 8008f62:	498b      	ldr	r1, [pc, #556]	; (8009190 <_strtod_l+0x580>)
 8008f64:	a815      	add	r0, sp, #84	; 0x54
 8008f66:	f001 f9db 	bl	800a320 <__match>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	f43f aea8 	beq.w	8008cc0 <_strtod_l+0xb0>
 8008f70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f72:	4988      	ldr	r1, [pc, #544]	; (8009194 <_strtod_l+0x584>)
 8008f74:	3b01      	subs	r3, #1
 8008f76:	a815      	add	r0, sp, #84	; 0x54
 8008f78:	9315      	str	r3, [sp, #84]	; 0x54
 8008f7a:	f001 f9d1 	bl	800a320 <__match>
 8008f7e:	b910      	cbnz	r0, 8008f86 <_strtod_l+0x376>
 8008f80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f82:	3301      	adds	r3, #1
 8008f84:	9315      	str	r3, [sp, #84]	; 0x54
 8008f86:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80091a4 <_strtod_l+0x594>
 8008f8a:	f04f 0800 	mov.w	r8, #0
 8008f8e:	e67a      	b.n	8008c86 <_strtod_l+0x76>
 8008f90:	4881      	ldr	r0, [pc, #516]	; (8009198 <_strtod_l+0x588>)
 8008f92:	f7fc ff65 	bl	8005e60 <nan>
 8008f96:	ec59 8b10 	vmov	r8, r9, d0
 8008f9a:	e674      	b.n	8008c86 <_strtod_l+0x76>
 8008f9c:	9b05      	ldr	r3, [sp, #20]
 8008f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fa0:	1afb      	subs	r3, r7, r3
 8008fa2:	f1bb 0f00 	cmp.w	fp, #0
 8008fa6:	bf08      	it	eq
 8008fa8:	46b3      	moveq	fp, r6
 8008faa:	2e10      	cmp	r6, #16
 8008fac:	9308      	str	r3, [sp, #32]
 8008fae:	4635      	mov	r5, r6
 8008fb0:	bfa8      	it	ge
 8008fb2:	2510      	movge	r5, #16
 8008fb4:	f7f7 faa6 	bl	8000504 <__aeabi_ui2d>
 8008fb8:	2e09      	cmp	r6, #9
 8008fba:	4680      	mov	r8, r0
 8008fbc:	4689      	mov	r9, r1
 8008fbe:	dd13      	ble.n	8008fe8 <_strtod_l+0x3d8>
 8008fc0:	4b76      	ldr	r3, [pc, #472]	; (800919c <_strtod_l+0x58c>)
 8008fc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008fc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008fca:	f7f7 fb15 	bl	80005f8 <__aeabi_dmul>
 8008fce:	4680      	mov	r8, r0
 8008fd0:	4650      	mov	r0, sl
 8008fd2:	4689      	mov	r9, r1
 8008fd4:	f7f7 fa96 	bl	8000504 <__aeabi_ui2d>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4640      	mov	r0, r8
 8008fde:	4649      	mov	r1, r9
 8008fe0:	f7f7 f954 	bl	800028c <__adddf3>
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	4689      	mov	r9, r1
 8008fe8:	2e0f      	cmp	r6, #15
 8008fea:	dc38      	bgt.n	800905e <_strtod_l+0x44e>
 8008fec:	9b08      	ldr	r3, [sp, #32]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f43f ae49 	beq.w	8008c86 <_strtod_l+0x76>
 8008ff4:	dd24      	ble.n	8009040 <_strtod_l+0x430>
 8008ff6:	2b16      	cmp	r3, #22
 8008ff8:	dc0b      	bgt.n	8009012 <_strtod_l+0x402>
 8008ffa:	4968      	ldr	r1, [pc, #416]	; (800919c <_strtod_l+0x58c>)
 8008ffc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009004:	4642      	mov	r2, r8
 8009006:	464b      	mov	r3, r9
 8009008:	f7f7 faf6 	bl	80005f8 <__aeabi_dmul>
 800900c:	4680      	mov	r8, r0
 800900e:	4689      	mov	r9, r1
 8009010:	e639      	b.n	8008c86 <_strtod_l+0x76>
 8009012:	9a08      	ldr	r2, [sp, #32]
 8009014:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009018:	4293      	cmp	r3, r2
 800901a:	db20      	blt.n	800905e <_strtod_l+0x44e>
 800901c:	4c5f      	ldr	r4, [pc, #380]	; (800919c <_strtod_l+0x58c>)
 800901e:	f1c6 060f 	rsb	r6, r6, #15
 8009022:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009026:	4642      	mov	r2, r8
 8009028:	464b      	mov	r3, r9
 800902a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800902e:	f7f7 fae3 	bl	80005f8 <__aeabi_dmul>
 8009032:	9b08      	ldr	r3, [sp, #32]
 8009034:	1b9e      	subs	r6, r3, r6
 8009036:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800903a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800903e:	e7e3      	b.n	8009008 <_strtod_l+0x3f8>
 8009040:	9b08      	ldr	r3, [sp, #32]
 8009042:	3316      	adds	r3, #22
 8009044:	db0b      	blt.n	800905e <_strtod_l+0x44e>
 8009046:	9b05      	ldr	r3, [sp, #20]
 8009048:	1bdf      	subs	r7, r3, r7
 800904a:	4b54      	ldr	r3, [pc, #336]	; (800919c <_strtod_l+0x58c>)
 800904c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009050:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fbf8 	bl	800084c <__aeabi_ddiv>
 800905c:	e7d6      	b.n	800900c <_strtod_l+0x3fc>
 800905e:	9b08      	ldr	r3, [sp, #32]
 8009060:	1b75      	subs	r5, r6, r5
 8009062:	441d      	add	r5, r3
 8009064:	2d00      	cmp	r5, #0
 8009066:	dd70      	ble.n	800914a <_strtod_l+0x53a>
 8009068:	f015 030f 	ands.w	r3, r5, #15
 800906c:	d00a      	beq.n	8009084 <_strtod_l+0x474>
 800906e:	494b      	ldr	r1, [pc, #300]	; (800919c <_strtod_l+0x58c>)
 8009070:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009074:	4642      	mov	r2, r8
 8009076:	464b      	mov	r3, r9
 8009078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800907c:	f7f7 fabc 	bl	80005f8 <__aeabi_dmul>
 8009080:	4680      	mov	r8, r0
 8009082:	4689      	mov	r9, r1
 8009084:	f035 050f 	bics.w	r5, r5, #15
 8009088:	d04d      	beq.n	8009126 <_strtod_l+0x516>
 800908a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800908e:	dd22      	ble.n	80090d6 <_strtod_l+0x4c6>
 8009090:	2500      	movs	r5, #0
 8009092:	46ab      	mov	fp, r5
 8009094:	9509      	str	r5, [sp, #36]	; 0x24
 8009096:	9505      	str	r5, [sp, #20]
 8009098:	2322      	movs	r3, #34	; 0x22
 800909a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80091a4 <_strtod_l+0x594>
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	f04f 0800 	mov.w	r8, #0
 80090a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f43f aded 	beq.w	8008c86 <_strtod_l+0x76>
 80090ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7ff f924 	bl	80082fc <_Bfree>
 80090b4:	9905      	ldr	r1, [sp, #20]
 80090b6:	4620      	mov	r0, r4
 80090b8:	f7ff f920 	bl	80082fc <_Bfree>
 80090bc:	4659      	mov	r1, fp
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff f91c 	bl	80082fc <_Bfree>
 80090c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7ff f918 	bl	80082fc <_Bfree>
 80090cc:	4629      	mov	r1, r5
 80090ce:	4620      	mov	r0, r4
 80090d0:	f7ff f914 	bl	80082fc <_Bfree>
 80090d4:	e5d7      	b.n	8008c86 <_strtod_l+0x76>
 80090d6:	4b32      	ldr	r3, [pc, #200]	; (80091a0 <_strtod_l+0x590>)
 80090d8:	9304      	str	r3, [sp, #16]
 80090da:	2300      	movs	r3, #0
 80090dc:	112d      	asrs	r5, r5, #4
 80090de:	4640      	mov	r0, r8
 80090e0:	4649      	mov	r1, r9
 80090e2:	469a      	mov	sl, r3
 80090e4:	2d01      	cmp	r5, #1
 80090e6:	dc21      	bgt.n	800912c <_strtod_l+0x51c>
 80090e8:	b10b      	cbz	r3, 80090ee <_strtod_l+0x4de>
 80090ea:	4680      	mov	r8, r0
 80090ec:	4689      	mov	r9, r1
 80090ee:	492c      	ldr	r1, [pc, #176]	; (80091a0 <_strtod_l+0x590>)
 80090f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80090f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009100:	f7f7 fa7a 	bl	80005f8 <__aeabi_dmul>
 8009104:	4b27      	ldr	r3, [pc, #156]	; (80091a4 <_strtod_l+0x594>)
 8009106:	460a      	mov	r2, r1
 8009108:	400b      	ands	r3, r1
 800910a:	4927      	ldr	r1, [pc, #156]	; (80091a8 <_strtod_l+0x598>)
 800910c:	428b      	cmp	r3, r1
 800910e:	4680      	mov	r8, r0
 8009110:	d8be      	bhi.n	8009090 <_strtod_l+0x480>
 8009112:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009116:	428b      	cmp	r3, r1
 8009118:	bf86      	itte	hi
 800911a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80091ac <_strtod_l+0x59c>
 800911e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009122:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009126:	2300      	movs	r3, #0
 8009128:	9304      	str	r3, [sp, #16]
 800912a:	e07b      	b.n	8009224 <_strtod_l+0x614>
 800912c:	07ea      	lsls	r2, r5, #31
 800912e:	d505      	bpl.n	800913c <_strtod_l+0x52c>
 8009130:	9b04      	ldr	r3, [sp, #16]
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 fa5f 	bl	80005f8 <__aeabi_dmul>
 800913a:	2301      	movs	r3, #1
 800913c:	9a04      	ldr	r2, [sp, #16]
 800913e:	3208      	adds	r2, #8
 8009140:	f10a 0a01 	add.w	sl, sl, #1
 8009144:	106d      	asrs	r5, r5, #1
 8009146:	9204      	str	r2, [sp, #16]
 8009148:	e7cc      	b.n	80090e4 <_strtod_l+0x4d4>
 800914a:	d0ec      	beq.n	8009126 <_strtod_l+0x516>
 800914c:	426d      	negs	r5, r5
 800914e:	f015 020f 	ands.w	r2, r5, #15
 8009152:	d00a      	beq.n	800916a <_strtod_l+0x55a>
 8009154:	4b11      	ldr	r3, [pc, #68]	; (800919c <_strtod_l+0x58c>)
 8009156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 fb73 	bl	800084c <__aeabi_ddiv>
 8009166:	4680      	mov	r8, r0
 8009168:	4689      	mov	r9, r1
 800916a:	112d      	asrs	r5, r5, #4
 800916c:	d0db      	beq.n	8009126 <_strtod_l+0x516>
 800916e:	2d1f      	cmp	r5, #31
 8009170:	dd1e      	ble.n	80091b0 <_strtod_l+0x5a0>
 8009172:	2500      	movs	r5, #0
 8009174:	46ab      	mov	fp, r5
 8009176:	9509      	str	r5, [sp, #36]	; 0x24
 8009178:	9505      	str	r5, [sp, #20]
 800917a:	2322      	movs	r3, #34	; 0x22
 800917c:	f04f 0800 	mov.w	r8, #0
 8009180:	f04f 0900 	mov.w	r9, #0
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	e78d      	b.n	80090a4 <_strtod_l+0x494>
 8009188:	0800b3bb 	.word	0x0800b3bb
 800918c:	0800b868 	.word	0x0800b868
 8009190:	0800b63d 	.word	0x0800b63d
 8009194:	0800b672 	.word	0x0800b672
 8009198:	0800b9fd 	.word	0x0800b9fd
 800919c:	0800b780 	.word	0x0800b780
 80091a0:	0800b758 	.word	0x0800b758
 80091a4:	7ff00000 	.word	0x7ff00000
 80091a8:	7ca00000 	.word	0x7ca00000
 80091ac:	7fefffff 	.word	0x7fefffff
 80091b0:	f015 0310 	ands.w	r3, r5, #16
 80091b4:	bf18      	it	ne
 80091b6:	236a      	movne	r3, #106	; 0x6a
 80091b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800955c <_strtod_l+0x94c>
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	4640      	mov	r0, r8
 80091c0:	4649      	mov	r1, r9
 80091c2:	2300      	movs	r3, #0
 80091c4:	07ea      	lsls	r2, r5, #31
 80091c6:	d504      	bpl.n	80091d2 <_strtod_l+0x5c2>
 80091c8:	e9da 2300 	ldrd	r2, r3, [sl]
 80091cc:	f7f7 fa14 	bl	80005f8 <__aeabi_dmul>
 80091d0:	2301      	movs	r3, #1
 80091d2:	106d      	asrs	r5, r5, #1
 80091d4:	f10a 0a08 	add.w	sl, sl, #8
 80091d8:	d1f4      	bne.n	80091c4 <_strtod_l+0x5b4>
 80091da:	b10b      	cbz	r3, 80091e0 <_strtod_l+0x5d0>
 80091dc:	4680      	mov	r8, r0
 80091de:	4689      	mov	r9, r1
 80091e0:	9b04      	ldr	r3, [sp, #16]
 80091e2:	b1bb      	cbz	r3, 8009214 <_strtod_l+0x604>
 80091e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80091e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	4649      	mov	r1, r9
 80091f0:	dd10      	ble.n	8009214 <_strtod_l+0x604>
 80091f2:	2b1f      	cmp	r3, #31
 80091f4:	f340 811e 	ble.w	8009434 <_strtod_l+0x824>
 80091f8:	2b34      	cmp	r3, #52	; 0x34
 80091fa:	bfde      	ittt	le
 80091fc:	f04f 33ff 	movle.w	r3, #4294967295
 8009200:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009204:	4093      	lslle	r3, r2
 8009206:	f04f 0800 	mov.w	r8, #0
 800920a:	bfcc      	ite	gt
 800920c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009210:	ea03 0901 	andle.w	r9, r3, r1
 8009214:	2200      	movs	r2, #0
 8009216:	2300      	movs	r3, #0
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f7 fc54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009220:	2800      	cmp	r0, #0
 8009222:	d1a6      	bne.n	8009172 <_strtod_l+0x562>
 8009224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009226:	9300      	str	r3, [sp, #0]
 8009228:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800922a:	4633      	mov	r3, r6
 800922c:	465a      	mov	r2, fp
 800922e:	4620      	mov	r0, r4
 8009230:	f7ff f8cc 	bl	80083cc <__s2b>
 8009234:	9009      	str	r0, [sp, #36]	; 0x24
 8009236:	2800      	cmp	r0, #0
 8009238:	f43f af2a 	beq.w	8009090 <_strtod_l+0x480>
 800923c:	9a08      	ldr	r2, [sp, #32]
 800923e:	9b05      	ldr	r3, [sp, #20]
 8009240:	2a00      	cmp	r2, #0
 8009242:	eba3 0307 	sub.w	r3, r3, r7
 8009246:	bfa8      	it	ge
 8009248:	2300      	movge	r3, #0
 800924a:	930c      	str	r3, [sp, #48]	; 0x30
 800924c:	2500      	movs	r5, #0
 800924e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009252:	9312      	str	r3, [sp, #72]	; 0x48
 8009254:	46ab      	mov	fp, r5
 8009256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009258:	4620      	mov	r0, r4
 800925a:	6859      	ldr	r1, [r3, #4]
 800925c:	f7ff f80e 	bl	800827c <_Balloc>
 8009260:	9005      	str	r0, [sp, #20]
 8009262:	2800      	cmp	r0, #0
 8009264:	f43f af18 	beq.w	8009098 <_strtod_l+0x488>
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	691a      	ldr	r2, [r3, #16]
 800926c:	3202      	adds	r2, #2
 800926e:	f103 010c 	add.w	r1, r3, #12
 8009272:	0092      	lsls	r2, r2, #2
 8009274:	300c      	adds	r0, #12
 8009276:	f7fe f924 	bl	80074c2 <memcpy>
 800927a:	ec49 8b10 	vmov	d0, r8, r9
 800927e:	aa18      	add	r2, sp, #96	; 0x60
 8009280:	a917      	add	r1, sp, #92	; 0x5c
 8009282:	4620      	mov	r0, r4
 8009284:	f7ff fbd6 	bl	8008a34 <__d2b>
 8009288:	ec49 8b18 	vmov	d8, r8, r9
 800928c:	9016      	str	r0, [sp, #88]	; 0x58
 800928e:	2800      	cmp	r0, #0
 8009290:	f43f af02 	beq.w	8009098 <_strtod_l+0x488>
 8009294:	2101      	movs	r1, #1
 8009296:	4620      	mov	r0, r4
 8009298:	f7ff f930 	bl	80084fc <__i2b>
 800929c:	4683      	mov	fp, r0
 800929e:	2800      	cmp	r0, #0
 80092a0:	f43f aefa 	beq.w	8009098 <_strtod_l+0x488>
 80092a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80092a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80092a8:	2e00      	cmp	r6, #0
 80092aa:	bfab      	itete	ge
 80092ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80092ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80092b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80092b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80092b6:	bfac      	ite	ge
 80092b8:	eb06 0a03 	addge.w	sl, r6, r3
 80092bc:	1b9f      	sublt	r7, r3, r6
 80092be:	9b04      	ldr	r3, [sp, #16]
 80092c0:	1af6      	subs	r6, r6, r3
 80092c2:	4416      	add	r6, r2
 80092c4:	4ba0      	ldr	r3, [pc, #640]	; (8009548 <_strtod_l+0x938>)
 80092c6:	3e01      	subs	r6, #1
 80092c8:	429e      	cmp	r6, r3
 80092ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80092ce:	f280 80c4 	bge.w	800945a <_strtod_l+0x84a>
 80092d2:	1b9b      	subs	r3, r3, r6
 80092d4:	2b1f      	cmp	r3, #31
 80092d6:	eba2 0203 	sub.w	r2, r2, r3
 80092da:	f04f 0101 	mov.w	r1, #1
 80092de:	f300 80b0 	bgt.w	8009442 <_strtod_l+0x832>
 80092e2:	fa01 f303 	lsl.w	r3, r1, r3
 80092e6:	930e      	str	r3, [sp, #56]	; 0x38
 80092e8:	2300      	movs	r3, #0
 80092ea:	930d      	str	r3, [sp, #52]	; 0x34
 80092ec:	eb0a 0602 	add.w	r6, sl, r2
 80092f0:	9b04      	ldr	r3, [sp, #16]
 80092f2:	45b2      	cmp	sl, r6
 80092f4:	4417      	add	r7, r2
 80092f6:	441f      	add	r7, r3
 80092f8:	4653      	mov	r3, sl
 80092fa:	bfa8      	it	ge
 80092fc:	4633      	movge	r3, r6
 80092fe:	42bb      	cmp	r3, r7
 8009300:	bfa8      	it	ge
 8009302:	463b      	movge	r3, r7
 8009304:	2b00      	cmp	r3, #0
 8009306:	bfc2      	ittt	gt
 8009308:	1af6      	subgt	r6, r6, r3
 800930a:	1aff      	subgt	r7, r7, r3
 800930c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009312:	2b00      	cmp	r3, #0
 8009314:	dd17      	ble.n	8009346 <_strtod_l+0x736>
 8009316:	4659      	mov	r1, fp
 8009318:	461a      	mov	r2, r3
 800931a:	4620      	mov	r0, r4
 800931c:	f7ff f9ae 	bl	800867c <__pow5mult>
 8009320:	4683      	mov	fp, r0
 8009322:	2800      	cmp	r0, #0
 8009324:	f43f aeb8 	beq.w	8009098 <_strtod_l+0x488>
 8009328:	4601      	mov	r1, r0
 800932a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800932c:	4620      	mov	r0, r4
 800932e:	f7ff f8fb 	bl	8008528 <__multiply>
 8009332:	900b      	str	r0, [sp, #44]	; 0x2c
 8009334:	2800      	cmp	r0, #0
 8009336:	f43f aeaf 	beq.w	8009098 <_strtod_l+0x488>
 800933a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800933c:	4620      	mov	r0, r4
 800933e:	f7fe ffdd 	bl	80082fc <_Bfree>
 8009342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009344:	9316      	str	r3, [sp, #88]	; 0x58
 8009346:	2e00      	cmp	r6, #0
 8009348:	f300 808c 	bgt.w	8009464 <_strtod_l+0x854>
 800934c:	9b08      	ldr	r3, [sp, #32]
 800934e:	2b00      	cmp	r3, #0
 8009350:	dd08      	ble.n	8009364 <_strtod_l+0x754>
 8009352:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009354:	9905      	ldr	r1, [sp, #20]
 8009356:	4620      	mov	r0, r4
 8009358:	f7ff f990 	bl	800867c <__pow5mult>
 800935c:	9005      	str	r0, [sp, #20]
 800935e:	2800      	cmp	r0, #0
 8009360:	f43f ae9a 	beq.w	8009098 <_strtod_l+0x488>
 8009364:	2f00      	cmp	r7, #0
 8009366:	dd08      	ble.n	800937a <_strtod_l+0x76a>
 8009368:	9905      	ldr	r1, [sp, #20]
 800936a:	463a      	mov	r2, r7
 800936c:	4620      	mov	r0, r4
 800936e:	f7ff f9df 	bl	8008730 <__lshift>
 8009372:	9005      	str	r0, [sp, #20]
 8009374:	2800      	cmp	r0, #0
 8009376:	f43f ae8f 	beq.w	8009098 <_strtod_l+0x488>
 800937a:	f1ba 0f00 	cmp.w	sl, #0
 800937e:	dd08      	ble.n	8009392 <_strtod_l+0x782>
 8009380:	4659      	mov	r1, fp
 8009382:	4652      	mov	r2, sl
 8009384:	4620      	mov	r0, r4
 8009386:	f7ff f9d3 	bl	8008730 <__lshift>
 800938a:	4683      	mov	fp, r0
 800938c:	2800      	cmp	r0, #0
 800938e:	f43f ae83 	beq.w	8009098 <_strtod_l+0x488>
 8009392:	9a05      	ldr	r2, [sp, #20]
 8009394:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009396:	4620      	mov	r0, r4
 8009398:	f7ff fa52 	bl	8008840 <__mdiff>
 800939c:	4605      	mov	r5, r0
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f ae7a 	beq.w	8009098 <_strtod_l+0x488>
 80093a4:	68c3      	ldr	r3, [r0, #12]
 80093a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80093a8:	2300      	movs	r3, #0
 80093aa:	60c3      	str	r3, [r0, #12]
 80093ac:	4659      	mov	r1, fp
 80093ae:	f7ff fa2b 	bl	8008808 <__mcmp>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	da60      	bge.n	8009478 <_strtod_l+0x868>
 80093b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093b8:	ea53 0308 	orrs.w	r3, r3, r8
 80093bc:	f040 8084 	bne.w	80094c8 <_strtod_l+0x8b8>
 80093c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d17f      	bne.n	80094c8 <_strtod_l+0x8b8>
 80093c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80093cc:	0d1b      	lsrs	r3, r3, #20
 80093ce:	051b      	lsls	r3, r3, #20
 80093d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80093d4:	d978      	bls.n	80094c8 <_strtod_l+0x8b8>
 80093d6:	696b      	ldr	r3, [r5, #20]
 80093d8:	b913      	cbnz	r3, 80093e0 <_strtod_l+0x7d0>
 80093da:	692b      	ldr	r3, [r5, #16]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	dd73      	ble.n	80094c8 <_strtod_l+0x8b8>
 80093e0:	4629      	mov	r1, r5
 80093e2:	2201      	movs	r2, #1
 80093e4:	4620      	mov	r0, r4
 80093e6:	f7ff f9a3 	bl	8008730 <__lshift>
 80093ea:	4659      	mov	r1, fp
 80093ec:	4605      	mov	r5, r0
 80093ee:	f7ff fa0b 	bl	8008808 <__mcmp>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	dd68      	ble.n	80094c8 <_strtod_l+0x8b8>
 80093f6:	9904      	ldr	r1, [sp, #16]
 80093f8:	4a54      	ldr	r2, [pc, #336]	; (800954c <_strtod_l+0x93c>)
 80093fa:	464b      	mov	r3, r9
 80093fc:	2900      	cmp	r1, #0
 80093fe:	f000 8084 	beq.w	800950a <_strtod_l+0x8fa>
 8009402:	ea02 0109 	and.w	r1, r2, r9
 8009406:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800940a:	dc7e      	bgt.n	800950a <_strtod_l+0x8fa>
 800940c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009410:	f77f aeb3 	ble.w	800917a <_strtod_l+0x56a>
 8009414:	4b4e      	ldr	r3, [pc, #312]	; (8009550 <_strtod_l+0x940>)
 8009416:	4640      	mov	r0, r8
 8009418:	4649      	mov	r1, r9
 800941a:	2200      	movs	r2, #0
 800941c:	f7f7 f8ec 	bl	80005f8 <__aeabi_dmul>
 8009420:	4b4a      	ldr	r3, [pc, #296]	; (800954c <_strtod_l+0x93c>)
 8009422:	400b      	ands	r3, r1
 8009424:	4680      	mov	r8, r0
 8009426:	4689      	mov	r9, r1
 8009428:	2b00      	cmp	r3, #0
 800942a:	f47f ae3f 	bne.w	80090ac <_strtod_l+0x49c>
 800942e:	2322      	movs	r3, #34	; 0x22
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	e63b      	b.n	80090ac <_strtod_l+0x49c>
 8009434:	f04f 32ff 	mov.w	r2, #4294967295
 8009438:	fa02 f303 	lsl.w	r3, r2, r3
 800943c:	ea03 0808 	and.w	r8, r3, r8
 8009440:	e6e8      	b.n	8009214 <_strtod_l+0x604>
 8009442:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009446:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800944a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800944e:	36e2      	adds	r6, #226	; 0xe2
 8009450:	fa01 f306 	lsl.w	r3, r1, r6
 8009454:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009458:	e748      	b.n	80092ec <_strtod_l+0x6dc>
 800945a:	2100      	movs	r1, #0
 800945c:	2301      	movs	r3, #1
 800945e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009462:	e743      	b.n	80092ec <_strtod_l+0x6dc>
 8009464:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009466:	4632      	mov	r2, r6
 8009468:	4620      	mov	r0, r4
 800946a:	f7ff f961 	bl	8008730 <__lshift>
 800946e:	9016      	str	r0, [sp, #88]	; 0x58
 8009470:	2800      	cmp	r0, #0
 8009472:	f47f af6b 	bne.w	800934c <_strtod_l+0x73c>
 8009476:	e60f      	b.n	8009098 <_strtod_l+0x488>
 8009478:	46ca      	mov	sl, r9
 800947a:	d171      	bne.n	8009560 <_strtod_l+0x950>
 800947c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800947e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009482:	b352      	cbz	r2, 80094da <_strtod_l+0x8ca>
 8009484:	4a33      	ldr	r2, [pc, #204]	; (8009554 <_strtod_l+0x944>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d12a      	bne.n	80094e0 <_strtod_l+0x8d0>
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	4641      	mov	r1, r8
 800948e:	b1fb      	cbz	r3, 80094d0 <_strtod_l+0x8c0>
 8009490:	4b2e      	ldr	r3, [pc, #184]	; (800954c <_strtod_l+0x93c>)
 8009492:	ea09 0303 	and.w	r3, r9, r3
 8009496:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800949a:	f04f 32ff 	mov.w	r2, #4294967295
 800949e:	d81a      	bhi.n	80094d6 <_strtod_l+0x8c6>
 80094a0:	0d1b      	lsrs	r3, r3, #20
 80094a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80094a6:	fa02 f303 	lsl.w	r3, r2, r3
 80094aa:	4299      	cmp	r1, r3
 80094ac:	d118      	bne.n	80094e0 <_strtod_l+0x8d0>
 80094ae:	4b2a      	ldr	r3, [pc, #168]	; (8009558 <_strtod_l+0x948>)
 80094b0:	459a      	cmp	sl, r3
 80094b2:	d102      	bne.n	80094ba <_strtod_l+0x8aa>
 80094b4:	3101      	adds	r1, #1
 80094b6:	f43f adef 	beq.w	8009098 <_strtod_l+0x488>
 80094ba:	4b24      	ldr	r3, [pc, #144]	; (800954c <_strtod_l+0x93c>)
 80094bc:	ea0a 0303 	and.w	r3, sl, r3
 80094c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80094c4:	f04f 0800 	mov.w	r8, #0
 80094c8:	9b04      	ldr	r3, [sp, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1a2      	bne.n	8009414 <_strtod_l+0x804>
 80094ce:	e5ed      	b.n	80090ac <_strtod_l+0x49c>
 80094d0:	f04f 33ff 	mov.w	r3, #4294967295
 80094d4:	e7e9      	b.n	80094aa <_strtod_l+0x89a>
 80094d6:	4613      	mov	r3, r2
 80094d8:	e7e7      	b.n	80094aa <_strtod_l+0x89a>
 80094da:	ea53 0308 	orrs.w	r3, r3, r8
 80094de:	d08a      	beq.n	80093f6 <_strtod_l+0x7e6>
 80094e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e2:	b1e3      	cbz	r3, 800951e <_strtod_l+0x90e>
 80094e4:	ea13 0f0a 	tst.w	r3, sl
 80094e8:	d0ee      	beq.n	80094c8 <_strtod_l+0x8b8>
 80094ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ec:	9a04      	ldr	r2, [sp, #16]
 80094ee:	4640      	mov	r0, r8
 80094f0:	4649      	mov	r1, r9
 80094f2:	b1c3      	cbz	r3, 8009526 <_strtod_l+0x916>
 80094f4:	f7ff fb6f 	bl	8008bd6 <sulp>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	ec51 0b18 	vmov	r0, r1, d8
 8009500:	f7f6 fec4 	bl	800028c <__adddf3>
 8009504:	4680      	mov	r8, r0
 8009506:	4689      	mov	r9, r1
 8009508:	e7de      	b.n	80094c8 <_strtod_l+0x8b8>
 800950a:	4013      	ands	r3, r2
 800950c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009510:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009514:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009518:	f04f 38ff 	mov.w	r8, #4294967295
 800951c:	e7d4      	b.n	80094c8 <_strtod_l+0x8b8>
 800951e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009520:	ea13 0f08 	tst.w	r3, r8
 8009524:	e7e0      	b.n	80094e8 <_strtod_l+0x8d8>
 8009526:	f7ff fb56 	bl	8008bd6 <sulp>
 800952a:	4602      	mov	r2, r0
 800952c:	460b      	mov	r3, r1
 800952e:	ec51 0b18 	vmov	r0, r1, d8
 8009532:	f7f6 fea9 	bl	8000288 <__aeabi_dsub>
 8009536:	2200      	movs	r2, #0
 8009538:	2300      	movs	r3, #0
 800953a:	4680      	mov	r8, r0
 800953c:	4689      	mov	r9, r1
 800953e:	f7f7 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009542:	2800      	cmp	r0, #0
 8009544:	d0c0      	beq.n	80094c8 <_strtod_l+0x8b8>
 8009546:	e618      	b.n	800917a <_strtod_l+0x56a>
 8009548:	fffffc02 	.word	0xfffffc02
 800954c:	7ff00000 	.word	0x7ff00000
 8009550:	39500000 	.word	0x39500000
 8009554:	000fffff 	.word	0x000fffff
 8009558:	7fefffff 	.word	0x7fefffff
 800955c:	0800b880 	.word	0x0800b880
 8009560:	4659      	mov	r1, fp
 8009562:	4628      	mov	r0, r5
 8009564:	f7ff fac0 	bl	8008ae8 <__ratio>
 8009568:	ec57 6b10 	vmov	r6, r7, d0
 800956c:	ee10 0a10 	vmov	r0, s0
 8009570:	2200      	movs	r2, #0
 8009572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009576:	4639      	mov	r1, r7
 8009578:	f7f7 faba 	bl	8000af0 <__aeabi_dcmple>
 800957c:	2800      	cmp	r0, #0
 800957e:	d071      	beq.n	8009664 <_strtod_l+0xa54>
 8009580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d17c      	bne.n	8009680 <_strtod_l+0xa70>
 8009586:	f1b8 0f00 	cmp.w	r8, #0
 800958a:	d15a      	bne.n	8009642 <_strtod_l+0xa32>
 800958c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009590:	2b00      	cmp	r3, #0
 8009592:	d15d      	bne.n	8009650 <_strtod_l+0xa40>
 8009594:	4b90      	ldr	r3, [pc, #576]	; (80097d8 <_strtod_l+0xbc8>)
 8009596:	2200      	movs	r2, #0
 8009598:	4630      	mov	r0, r6
 800959a:	4639      	mov	r1, r7
 800959c:	f7f7 fa9e 	bl	8000adc <__aeabi_dcmplt>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d15c      	bne.n	800965e <_strtod_l+0xa4e>
 80095a4:	4630      	mov	r0, r6
 80095a6:	4639      	mov	r1, r7
 80095a8:	4b8c      	ldr	r3, [pc, #560]	; (80097dc <_strtod_l+0xbcc>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	4606      	mov	r6, r0
 80095b2:	460f      	mov	r7, r1
 80095b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80095b8:	9606      	str	r6, [sp, #24]
 80095ba:	9307      	str	r3, [sp, #28]
 80095bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80095c4:	4b86      	ldr	r3, [pc, #536]	; (80097e0 <_strtod_l+0xbd0>)
 80095c6:	ea0a 0303 	and.w	r3, sl, r3
 80095ca:	930d      	str	r3, [sp, #52]	; 0x34
 80095cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095ce:	4b85      	ldr	r3, [pc, #532]	; (80097e4 <_strtod_l+0xbd4>)
 80095d0:	429a      	cmp	r2, r3
 80095d2:	f040 8090 	bne.w	80096f6 <_strtod_l+0xae6>
 80095d6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80095da:	ec49 8b10 	vmov	d0, r8, r9
 80095de:	f7ff f9b9 	bl	8008954 <__ulp>
 80095e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095e6:	ec51 0b10 	vmov	r0, r1, d0
 80095ea:	f7f7 f805 	bl	80005f8 <__aeabi_dmul>
 80095ee:	4642      	mov	r2, r8
 80095f0:	464b      	mov	r3, r9
 80095f2:	f7f6 fe4b 	bl	800028c <__adddf3>
 80095f6:	460b      	mov	r3, r1
 80095f8:	4979      	ldr	r1, [pc, #484]	; (80097e0 <_strtod_l+0xbd0>)
 80095fa:	4a7b      	ldr	r2, [pc, #492]	; (80097e8 <_strtod_l+0xbd8>)
 80095fc:	4019      	ands	r1, r3
 80095fe:	4291      	cmp	r1, r2
 8009600:	4680      	mov	r8, r0
 8009602:	d944      	bls.n	800968e <_strtod_l+0xa7e>
 8009604:	ee18 2a90 	vmov	r2, s17
 8009608:	4b78      	ldr	r3, [pc, #480]	; (80097ec <_strtod_l+0xbdc>)
 800960a:	429a      	cmp	r2, r3
 800960c:	d104      	bne.n	8009618 <_strtod_l+0xa08>
 800960e:	ee18 3a10 	vmov	r3, s16
 8009612:	3301      	adds	r3, #1
 8009614:	f43f ad40 	beq.w	8009098 <_strtod_l+0x488>
 8009618:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80097ec <_strtod_l+0xbdc>
 800961c:	f04f 38ff 	mov.w	r8, #4294967295
 8009620:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009622:	4620      	mov	r0, r4
 8009624:	f7fe fe6a 	bl	80082fc <_Bfree>
 8009628:	9905      	ldr	r1, [sp, #20]
 800962a:	4620      	mov	r0, r4
 800962c:	f7fe fe66 	bl	80082fc <_Bfree>
 8009630:	4659      	mov	r1, fp
 8009632:	4620      	mov	r0, r4
 8009634:	f7fe fe62 	bl	80082fc <_Bfree>
 8009638:	4629      	mov	r1, r5
 800963a:	4620      	mov	r0, r4
 800963c:	f7fe fe5e 	bl	80082fc <_Bfree>
 8009640:	e609      	b.n	8009256 <_strtod_l+0x646>
 8009642:	f1b8 0f01 	cmp.w	r8, #1
 8009646:	d103      	bne.n	8009650 <_strtod_l+0xa40>
 8009648:	f1b9 0f00 	cmp.w	r9, #0
 800964c:	f43f ad95 	beq.w	800917a <_strtod_l+0x56a>
 8009650:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80097a8 <_strtod_l+0xb98>
 8009654:	4f60      	ldr	r7, [pc, #384]	; (80097d8 <_strtod_l+0xbc8>)
 8009656:	ed8d 7b06 	vstr	d7, [sp, #24]
 800965a:	2600      	movs	r6, #0
 800965c:	e7ae      	b.n	80095bc <_strtod_l+0x9ac>
 800965e:	4f5f      	ldr	r7, [pc, #380]	; (80097dc <_strtod_l+0xbcc>)
 8009660:	2600      	movs	r6, #0
 8009662:	e7a7      	b.n	80095b4 <_strtod_l+0x9a4>
 8009664:	4b5d      	ldr	r3, [pc, #372]	; (80097dc <_strtod_l+0xbcc>)
 8009666:	4630      	mov	r0, r6
 8009668:	4639      	mov	r1, r7
 800966a:	2200      	movs	r2, #0
 800966c:	f7f6 ffc4 	bl	80005f8 <__aeabi_dmul>
 8009670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009672:	4606      	mov	r6, r0
 8009674:	460f      	mov	r7, r1
 8009676:	2b00      	cmp	r3, #0
 8009678:	d09c      	beq.n	80095b4 <_strtod_l+0x9a4>
 800967a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800967e:	e79d      	b.n	80095bc <_strtod_l+0x9ac>
 8009680:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80097b0 <_strtod_l+0xba0>
 8009684:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009688:	ec57 6b17 	vmov	r6, r7, d7
 800968c:	e796      	b.n	80095bc <_strtod_l+0x9ac>
 800968e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009692:	9b04      	ldr	r3, [sp, #16]
 8009694:	46ca      	mov	sl, r9
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1c2      	bne.n	8009620 <_strtod_l+0xa10>
 800969a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800969e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096a0:	0d1b      	lsrs	r3, r3, #20
 80096a2:	051b      	lsls	r3, r3, #20
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d1bb      	bne.n	8009620 <_strtod_l+0xa10>
 80096a8:	4630      	mov	r0, r6
 80096aa:	4639      	mov	r1, r7
 80096ac:	f7f7 fb04 	bl	8000cb8 <__aeabi_d2lz>
 80096b0:	f7f6 ff74 	bl	800059c <__aeabi_l2d>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	4630      	mov	r0, r6
 80096ba:	4639      	mov	r1, r7
 80096bc:	f7f6 fde4 	bl	8000288 <__aeabi_dsub>
 80096c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096c6:	ea43 0308 	orr.w	r3, r3, r8
 80096ca:	4313      	orrs	r3, r2
 80096cc:	4606      	mov	r6, r0
 80096ce:	460f      	mov	r7, r1
 80096d0:	d054      	beq.n	800977c <_strtod_l+0xb6c>
 80096d2:	a339      	add	r3, pc, #228	; (adr r3, 80097b8 <_strtod_l+0xba8>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f7f7 fa00 	bl	8000adc <__aeabi_dcmplt>
 80096dc:	2800      	cmp	r0, #0
 80096de:	f47f ace5 	bne.w	80090ac <_strtod_l+0x49c>
 80096e2:	a337      	add	r3, pc, #220	; (adr r3, 80097c0 <_strtod_l+0xbb0>)
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	4630      	mov	r0, r6
 80096ea:	4639      	mov	r1, r7
 80096ec:	f7f7 fa14 	bl	8000b18 <__aeabi_dcmpgt>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d095      	beq.n	8009620 <_strtod_l+0xa10>
 80096f4:	e4da      	b.n	80090ac <_strtod_l+0x49c>
 80096f6:	9b04      	ldr	r3, [sp, #16]
 80096f8:	b333      	cbz	r3, 8009748 <_strtod_l+0xb38>
 80096fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096fc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009700:	d822      	bhi.n	8009748 <_strtod_l+0xb38>
 8009702:	a331      	add	r3, pc, #196	; (adr r3, 80097c8 <_strtod_l+0xbb8>)
 8009704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009708:	4630      	mov	r0, r6
 800970a:	4639      	mov	r1, r7
 800970c:	f7f7 f9f0 	bl	8000af0 <__aeabi_dcmple>
 8009710:	b1a0      	cbz	r0, 800973c <_strtod_l+0xb2c>
 8009712:	4639      	mov	r1, r7
 8009714:	4630      	mov	r0, r6
 8009716:	f7f7 fa47 	bl	8000ba8 <__aeabi_d2uiz>
 800971a:	2801      	cmp	r0, #1
 800971c:	bf38      	it	cc
 800971e:	2001      	movcc	r0, #1
 8009720:	f7f6 fef0 	bl	8000504 <__aeabi_ui2d>
 8009724:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009726:	4606      	mov	r6, r0
 8009728:	460f      	mov	r7, r1
 800972a:	bb23      	cbnz	r3, 8009776 <_strtod_l+0xb66>
 800972c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009730:	9010      	str	r0, [sp, #64]	; 0x40
 8009732:	9311      	str	r3, [sp, #68]	; 0x44
 8009734:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009738:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800973c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800973e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009740:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009744:	1a9b      	subs	r3, r3, r2
 8009746:	930f      	str	r3, [sp, #60]	; 0x3c
 8009748:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800974c:	eeb0 0a48 	vmov.f32	s0, s16
 8009750:	eef0 0a68 	vmov.f32	s1, s17
 8009754:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009758:	f7ff f8fc 	bl	8008954 <__ulp>
 800975c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009760:	ec53 2b10 	vmov	r2, r3, d0
 8009764:	f7f6 ff48 	bl	80005f8 <__aeabi_dmul>
 8009768:	ec53 2b18 	vmov	r2, r3, d8
 800976c:	f7f6 fd8e 	bl	800028c <__adddf3>
 8009770:	4680      	mov	r8, r0
 8009772:	4689      	mov	r9, r1
 8009774:	e78d      	b.n	8009692 <_strtod_l+0xa82>
 8009776:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800977a:	e7db      	b.n	8009734 <_strtod_l+0xb24>
 800977c:	a314      	add	r3, pc, #80	; (adr r3, 80097d0 <_strtod_l+0xbc0>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f7 f9ab 	bl	8000adc <__aeabi_dcmplt>
 8009786:	e7b3      	b.n	80096f0 <_strtod_l+0xae0>
 8009788:	2300      	movs	r3, #0
 800978a:	930a      	str	r3, [sp, #40]	; 0x28
 800978c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800978e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	f7ff ba7c 	b.w	8008c8e <_strtod_l+0x7e>
 8009796:	2a65      	cmp	r2, #101	; 0x65
 8009798:	f43f ab75 	beq.w	8008e86 <_strtod_l+0x276>
 800979c:	2a45      	cmp	r2, #69	; 0x45
 800979e:	f43f ab72 	beq.w	8008e86 <_strtod_l+0x276>
 80097a2:	2301      	movs	r3, #1
 80097a4:	f7ff bbaa 	b.w	8008efc <_strtod_l+0x2ec>
 80097a8:	00000000 	.word	0x00000000
 80097ac:	bff00000 	.word	0xbff00000
 80097b0:	00000000 	.word	0x00000000
 80097b4:	3ff00000 	.word	0x3ff00000
 80097b8:	94a03595 	.word	0x94a03595
 80097bc:	3fdfffff 	.word	0x3fdfffff
 80097c0:	35afe535 	.word	0x35afe535
 80097c4:	3fe00000 	.word	0x3fe00000
 80097c8:	ffc00000 	.word	0xffc00000
 80097cc:	41dfffff 	.word	0x41dfffff
 80097d0:	94a03595 	.word	0x94a03595
 80097d4:	3fcfffff 	.word	0x3fcfffff
 80097d8:	3ff00000 	.word	0x3ff00000
 80097dc:	3fe00000 	.word	0x3fe00000
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	7fe00000 	.word	0x7fe00000
 80097e8:	7c9fffff 	.word	0x7c9fffff
 80097ec:	7fefffff 	.word	0x7fefffff

080097f0 <_strtod_r>:
 80097f0:	4b01      	ldr	r3, [pc, #4]	; (80097f8 <_strtod_r+0x8>)
 80097f2:	f7ff ba0d 	b.w	8008c10 <_strtod_l>
 80097f6:	bf00      	nop
 80097f8:	20000078 	.word	0x20000078

080097fc <_strtol_l.constprop.0>:
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009802:	d001      	beq.n	8009808 <_strtol_l.constprop.0+0xc>
 8009804:	2b24      	cmp	r3, #36	; 0x24
 8009806:	d906      	bls.n	8009816 <_strtol_l.constprop.0+0x1a>
 8009808:	f7fd fe26 	bl	8007458 <__errno>
 800980c:	2316      	movs	r3, #22
 800980e:	6003      	str	r3, [r0, #0]
 8009810:	2000      	movs	r0, #0
 8009812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009816:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80098fc <_strtol_l.constprop.0+0x100>
 800981a:	460d      	mov	r5, r1
 800981c:	462e      	mov	r6, r5
 800981e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009822:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009826:	f017 0708 	ands.w	r7, r7, #8
 800982a:	d1f7      	bne.n	800981c <_strtol_l.constprop.0+0x20>
 800982c:	2c2d      	cmp	r4, #45	; 0x2d
 800982e:	d132      	bne.n	8009896 <_strtol_l.constprop.0+0x9a>
 8009830:	782c      	ldrb	r4, [r5, #0]
 8009832:	2701      	movs	r7, #1
 8009834:	1cb5      	adds	r5, r6, #2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d05b      	beq.n	80098f2 <_strtol_l.constprop.0+0xf6>
 800983a:	2b10      	cmp	r3, #16
 800983c:	d109      	bne.n	8009852 <_strtol_l.constprop.0+0x56>
 800983e:	2c30      	cmp	r4, #48	; 0x30
 8009840:	d107      	bne.n	8009852 <_strtol_l.constprop.0+0x56>
 8009842:	782c      	ldrb	r4, [r5, #0]
 8009844:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009848:	2c58      	cmp	r4, #88	; 0x58
 800984a:	d14d      	bne.n	80098e8 <_strtol_l.constprop.0+0xec>
 800984c:	786c      	ldrb	r4, [r5, #1]
 800984e:	2310      	movs	r3, #16
 8009850:	3502      	adds	r5, #2
 8009852:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009856:	f108 38ff 	add.w	r8, r8, #4294967295
 800985a:	f04f 0e00 	mov.w	lr, #0
 800985e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009862:	4676      	mov	r6, lr
 8009864:	fb03 8a19 	mls	sl, r3, r9, r8
 8009868:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800986c:	f1bc 0f09 	cmp.w	ip, #9
 8009870:	d816      	bhi.n	80098a0 <_strtol_l.constprop.0+0xa4>
 8009872:	4664      	mov	r4, ip
 8009874:	42a3      	cmp	r3, r4
 8009876:	dd24      	ble.n	80098c2 <_strtol_l.constprop.0+0xc6>
 8009878:	f1be 3fff 	cmp.w	lr, #4294967295
 800987c:	d008      	beq.n	8009890 <_strtol_l.constprop.0+0x94>
 800987e:	45b1      	cmp	r9, r6
 8009880:	d31c      	bcc.n	80098bc <_strtol_l.constprop.0+0xc0>
 8009882:	d101      	bne.n	8009888 <_strtol_l.constprop.0+0x8c>
 8009884:	45a2      	cmp	sl, r4
 8009886:	db19      	blt.n	80098bc <_strtol_l.constprop.0+0xc0>
 8009888:	fb06 4603 	mla	r6, r6, r3, r4
 800988c:	f04f 0e01 	mov.w	lr, #1
 8009890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009894:	e7e8      	b.n	8009868 <_strtol_l.constprop.0+0x6c>
 8009896:	2c2b      	cmp	r4, #43	; 0x2b
 8009898:	bf04      	itt	eq
 800989a:	782c      	ldrbeq	r4, [r5, #0]
 800989c:	1cb5      	addeq	r5, r6, #2
 800989e:	e7ca      	b.n	8009836 <_strtol_l.constprop.0+0x3a>
 80098a0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098a4:	f1bc 0f19 	cmp.w	ip, #25
 80098a8:	d801      	bhi.n	80098ae <_strtol_l.constprop.0+0xb2>
 80098aa:	3c37      	subs	r4, #55	; 0x37
 80098ac:	e7e2      	b.n	8009874 <_strtol_l.constprop.0+0x78>
 80098ae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098b2:	f1bc 0f19 	cmp.w	ip, #25
 80098b6:	d804      	bhi.n	80098c2 <_strtol_l.constprop.0+0xc6>
 80098b8:	3c57      	subs	r4, #87	; 0x57
 80098ba:	e7db      	b.n	8009874 <_strtol_l.constprop.0+0x78>
 80098bc:	f04f 3eff 	mov.w	lr, #4294967295
 80098c0:	e7e6      	b.n	8009890 <_strtol_l.constprop.0+0x94>
 80098c2:	f1be 3fff 	cmp.w	lr, #4294967295
 80098c6:	d105      	bne.n	80098d4 <_strtol_l.constprop.0+0xd8>
 80098c8:	2322      	movs	r3, #34	; 0x22
 80098ca:	6003      	str	r3, [r0, #0]
 80098cc:	4646      	mov	r6, r8
 80098ce:	b942      	cbnz	r2, 80098e2 <_strtol_l.constprop.0+0xe6>
 80098d0:	4630      	mov	r0, r6
 80098d2:	e79e      	b.n	8009812 <_strtol_l.constprop.0+0x16>
 80098d4:	b107      	cbz	r7, 80098d8 <_strtol_l.constprop.0+0xdc>
 80098d6:	4276      	negs	r6, r6
 80098d8:	2a00      	cmp	r2, #0
 80098da:	d0f9      	beq.n	80098d0 <_strtol_l.constprop.0+0xd4>
 80098dc:	f1be 0f00 	cmp.w	lr, #0
 80098e0:	d000      	beq.n	80098e4 <_strtol_l.constprop.0+0xe8>
 80098e2:	1e69      	subs	r1, r5, #1
 80098e4:	6011      	str	r1, [r2, #0]
 80098e6:	e7f3      	b.n	80098d0 <_strtol_l.constprop.0+0xd4>
 80098e8:	2430      	movs	r4, #48	; 0x30
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1b1      	bne.n	8009852 <_strtol_l.constprop.0+0x56>
 80098ee:	2308      	movs	r3, #8
 80098f0:	e7af      	b.n	8009852 <_strtol_l.constprop.0+0x56>
 80098f2:	2c30      	cmp	r4, #48	; 0x30
 80098f4:	d0a5      	beq.n	8009842 <_strtol_l.constprop.0+0x46>
 80098f6:	230a      	movs	r3, #10
 80098f8:	e7ab      	b.n	8009852 <_strtol_l.constprop.0+0x56>
 80098fa:	bf00      	nop
 80098fc:	0800b8a9 	.word	0x0800b8a9

08009900 <_strtol_r>:
 8009900:	f7ff bf7c 	b.w	80097fc <_strtol_l.constprop.0>

08009904 <__ssputs_r>:
 8009904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	688e      	ldr	r6, [r1, #8]
 800990a:	461f      	mov	r7, r3
 800990c:	42be      	cmp	r6, r7
 800990e:	680b      	ldr	r3, [r1, #0]
 8009910:	4682      	mov	sl, r0
 8009912:	460c      	mov	r4, r1
 8009914:	4690      	mov	r8, r2
 8009916:	d82c      	bhi.n	8009972 <__ssputs_r+0x6e>
 8009918:	898a      	ldrh	r2, [r1, #12]
 800991a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800991e:	d026      	beq.n	800996e <__ssputs_r+0x6a>
 8009920:	6965      	ldr	r5, [r4, #20]
 8009922:	6909      	ldr	r1, [r1, #16]
 8009924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009928:	eba3 0901 	sub.w	r9, r3, r1
 800992c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009930:	1c7b      	adds	r3, r7, #1
 8009932:	444b      	add	r3, r9
 8009934:	106d      	asrs	r5, r5, #1
 8009936:	429d      	cmp	r5, r3
 8009938:	bf38      	it	cc
 800993a:	461d      	movcc	r5, r3
 800993c:	0553      	lsls	r3, r2, #21
 800993e:	d527      	bpl.n	8009990 <__ssputs_r+0x8c>
 8009940:	4629      	mov	r1, r5
 8009942:	f7fc fc87 	bl	8006254 <_malloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	b360      	cbz	r0, 80099a4 <__ssputs_r+0xa0>
 800994a:	6921      	ldr	r1, [r4, #16]
 800994c:	464a      	mov	r2, r9
 800994e:	f7fd fdb8 	bl	80074c2 <memcpy>
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995c:	81a3      	strh	r3, [r4, #12]
 800995e:	6126      	str	r6, [r4, #16]
 8009960:	6165      	str	r5, [r4, #20]
 8009962:	444e      	add	r6, r9
 8009964:	eba5 0509 	sub.w	r5, r5, r9
 8009968:	6026      	str	r6, [r4, #0]
 800996a:	60a5      	str	r5, [r4, #8]
 800996c:	463e      	mov	r6, r7
 800996e:	42be      	cmp	r6, r7
 8009970:	d900      	bls.n	8009974 <__ssputs_r+0x70>
 8009972:	463e      	mov	r6, r7
 8009974:	6820      	ldr	r0, [r4, #0]
 8009976:	4632      	mov	r2, r6
 8009978:	4641      	mov	r1, r8
 800997a:	f000 f9c9 	bl	8009d10 <memmove>
 800997e:	68a3      	ldr	r3, [r4, #8]
 8009980:	1b9b      	subs	r3, r3, r6
 8009982:	60a3      	str	r3, [r4, #8]
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	4433      	add	r3, r6
 8009988:	6023      	str	r3, [r4, #0]
 800998a:	2000      	movs	r0, #0
 800998c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009990:	462a      	mov	r2, r5
 8009992:	f000 fd86 	bl	800a4a2 <_realloc_r>
 8009996:	4606      	mov	r6, r0
 8009998:	2800      	cmp	r0, #0
 800999a:	d1e0      	bne.n	800995e <__ssputs_r+0x5a>
 800999c:	6921      	ldr	r1, [r4, #16]
 800999e:	4650      	mov	r0, sl
 80099a0:	f7fe fc20 	bl	80081e4 <_free_r>
 80099a4:	230c      	movs	r3, #12
 80099a6:	f8ca 3000 	str.w	r3, [sl]
 80099aa:	89a3      	ldrh	r3, [r4, #12]
 80099ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	e7e9      	b.n	800998c <__ssputs_r+0x88>

080099b8 <_svfiprintf_r>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	4698      	mov	r8, r3
 80099be:	898b      	ldrh	r3, [r1, #12]
 80099c0:	061b      	lsls	r3, r3, #24
 80099c2:	b09d      	sub	sp, #116	; 0x74
 80099c4:	4607      	mov	r7, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	4614      	mov	r4, r2
 80099ca:	d50e      	bpl.n	80099ea <_svfiprintf_r+0x32>
 80099cc:	690b      	ldr	r3, [r1, #16]
 80099ce:	b963      	cbnz	r3, 80099ea <_svfiprintf_r+0x32>
 80099d0:	2140      	movs	r1, #64	; 0x40
 80099d2:	f7fc fc3f 	bl	8006254 <_malloc_r>
 80099d6:	6028      	str	r0, [r5, #0]
 80099d8:	6128      	str	r0, [r5, #16]
 80099da:	b920      	cbnz	r0, 80099e6 <_svfiprintf_r+0x2e>
 80099dc:	230c      	movs	r3, #12
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	f04f 30ff 	mov.w	r0, #4294967295
 80099e4:	e0d0      	b.n	8009b88 <_svfiprintf_r+0x1d0>
 80099e6:	2340      	movs	r3, #64	; 0x40
 80099e8:	616b      	str	r3, [r5, #20]
 80099ea:	2300      	movs	r3, #0
 80099ec:	9309      	str	r3, [sp, #36]	; 0x24
 80099ee:	2320      	movs	r3, #32
 80099f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099f8:	2330      	movs	r3, #48	; 0x30
 80099fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ba0 <_svfiprintf_r+0x1e8>
 80099fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a02:	f04f 0901 	mov.w	r9, #1
 8009a06:	4623      	mov	r3, r4
 8009a08:	469a      	mov	sl, r3
 8009a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a0e:	b10a      	cbz	r2, 8009a14 <_svfiprintf_r+0x5c>
 8009a10:	2a25      	cmp	r2, #37	; 0x25
 8009a12:	d1f9      	bne.n	8009a08 <_svfiprintf_r+0x50>
 8009a14:	ebba 0b04 	subs.w	fp, sl, r4
 8009a18:	d00b      	beq.n	8009a32 <_svfiprintf_r+0x7a>
 8009a1a:	465b      	mov	r3, fp
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4638      	mov	r0, r7
 8009a22:	f7ff ff6f 	bl	8009904 <__ssputs_r>
 8009a26:	3001      	adds	r0, #1
 8009a28:	f000 80a9 	beq.w	8009b7e <_svfiprintf_r+0x1c6>
 8009a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a2e:	445a      	add	r2, fp
 8009a30:	9209      	str	r2, [sp, #36]	; 0x24
 8009a32:	f89a 3000 	ldrb.w	r3, [sl]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 80a1 	beq.w	8009b7e <_svfiprintf_r+0x1c6>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a46:	f10a 0a01 	add.w	sl, sl, #1
 8009a4a:	9304      	str	r3, [sp, #16]
 8009a4c:	9307      	str	r3, [sp, #28]
 8009a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a52:	931a      	str	r3, [sp, #104]	; 0x68
 8009a54:	4654      	mov	r4, sl
 8009a56:	2205      	movs	r2, #5
 8009a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5c:	4850      	ldr	r0, [pc, #320]	; (8009ba0 <_svfiprintf_r+0x1e8>)
 8009a5e:	f7f6 fbb7 	bl	80001d0 <memchr>
 8009a62:	9a04      	ldr	r2, [sp, #16]
 8009a64:	b9d8      	cbnz	r0, 8009a9e <_svfiprintf_r+0xe6>
 8009a66:	06d0      	lsls	r0, r2, #27
 8009a68:	bf44      	itt	mi
 8009a6a:	2320      	movmi	r3, #32
 8009a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a70:	0711      	lsls	r1, r2, #28
 8009a72:	bf44      	itt	mi
 8009a74:	232b      	movmi	r3, #43	; 0x2b
 8009a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a80:	d015      	beq.n	8009aae <_svfiprintf_r+0xf6>
 8009a82:	9a07      	ldr	r2, [sp, #28]
 8009a84:	4654      	mov	r4, sl
 8009a86:	2000      	movs	r0, #0
 8009a88:	f04f 0c0a 	mov.w	ip, #10
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a92:	3b30      	subs	r3, #48	; 0x30
 8009a94:	2b09      	cmp	r3, #9
 8009a96:	d94d      	bls.n	8009b34 <_svfiprintf_r+0x17c>
 8009a98:	b1b0      	cbz	r0, 8009ac8 <_svfiprintf_r+0x110>
 8009a9a:	9207      	str	r2, [sp, #28]
 8009a9c:	e014      	b.n	8009ac8 <_svfiprintf_r+0x110>
 8009a9e:	eba0 0308 	sub.w	r3, r0, r8
 8009aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	46a2      	mov	sl, r4
 8009aac:	e7d2      	b.n	8009a54 <_svfiprintf_r+0x9c>
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	1d19      	adds	r1, r3, #4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	9103      	str	r1, [sp, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bfbb      	ittet	lt
 8009aba:	425b      	neglt	r3, r3
 8009abc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ac0:	9307      	strge	r3, [sp, #28]
 8009ac2:	9307      	strlt	r3, [sp, #28]
 8009ac4:	bfb8      	it	lt
 8009ac6:	9204      	strlt	r2, [sp, #16]
 8009ac8:	7823      	ldrb	r3, [r4, #0]
 8009aca:	2b2e      	cmp	r3, #46	; 0x2e
 8009acc:	d10c      	bne.n	8009ae8 <_svfiprintf_r+0x130>
 8009ace:	7863      	ldrb	r3, [r4, #1]
 8009ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad2:	d134      	bne.n	8009b3e <_svfiprintf_r+0x186>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	1d1a      	adds	r2, r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	9203      	str	r2, [sp, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	bfb8      	it	lt
 8009ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ae4:	3402      	adds	r4, #2
 8009ae6:	9305      	str	r3, [sp, #20]
 8009ae8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009bb0 <_svfiprintf_r+0x1f8>
 8009aec:	7821      	ldrb	r1, [r4, #0]
 8009aee:	2203      	movs	r2, #3
 8009af0:	4650      	mov	r0, sl
 8009af2:	f7f6 fb6d 	bl	80001d0 <memchr>
 8009af6:	b138      	cbz	r0, 8009b08 <_svfiprintf_r+0x150>
 8009af8:	9b04      	ldr	r3, [sp, #16]
 8009afa:	eba0 000a 	sub.w	r0, r0, sl
 8009afe:	2240      	movs	r2, #64	; 0x40
 8009b00:	4082      	lsls	r2, r0
 8009b02:	4313      	orrs	r3, r2
 8009b04:	3401      	adds	r4, #1
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0c:	4825      	ldr	r0, [pc, #148]	; (8009ba4 <_svfiprintf_r+0x1ec>)
 8009b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b12:	2206      	movs	r2, #6
 8009b14:	f7f6 fb5c 	bl	80001d0 <memchr>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	d038      	beq.n	8009b8e <_svfiprintf_r+0x1d6>
 8009b1c:	4b22      	ldr	r3, [pc, #136]	; (8009ba8 <_svfiprintf_r+0x1f0>)
 8009b1e:	bb1b      	cbnz	r3, 8009b68 <_svfiprintf_r+0x1b0>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	3307      	adds	r3, #7
 8009b24:	f023 0307 	bic.w	r3, r3, #7
 8009b28:	3308      	adds	r3, #8
 8009b2a:	9303      	str	r3, [sp, #12]
 8009b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2e:	4433      	add	r3, r6
 8009b30:	9309      	str	r3, [sp, #36]	; 0x24
 8009b32:	e768      	b.n	8009a06 <_svfiprintf_r+0x4e>
 8009b34:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b38:	460c      	mov	r4, r1
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	e7a6      	b.n	8009a8c <_svfiprintf_r+0xd4>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	3401      	adds	r4, #1
 8009b42:	9305      	str	r3, [sp, #20]
 8009b44:	4619      	mov	r1, r3
 8009b46:	f04f 0c0a 	mov.w	ip, #10
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b50:	3a30      	subs	r2, #48	; 0x30
 8009b52:	2a09      	cmp	r2, #9
 8009b54:	d903      	bls.n	8009b5e <_svfiprintf_r+0x1a6>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0c6      	beq.n	8009ae8 <_svfiprintf_r+0x130>
 8009b5a:	9105      	str	r1, [sp, #20]
 8009b5c:	e7c4      	b.n	8009ae8 <_svfiprintf_r+0x130>
 8009b5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b62:	4604      	mov	r4, r0
 8009b64:	2301      	movs	r3, #1
 8009b66:	e7f0      	b.n	8009b4a <_svfiprintf_r+0x192>
 8009b68:	ab03      	add	r3, sp, #12
 8009b6a:	9300      	str	r3, [sp, #0]
 8009b6c:	462a      	mov	r2, r5
 8009b6e:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <_svfiprintf_r+0x1f4>)
 8009b70:	a904      	add	r1, sp, #16
 8009b72:	4638      	mov	r0, r7
 8009b74:	f7fc fc9a 	bl	80064ac <_printf_float>
 8009b78:	1c42      	adds	r2, r0, #1
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	d1d6      	bne.n	8009b2c <_svfiprintf_r+0x174>
 8009b7e:	89ab      	ldrh	r3, [r5, #12]
 8009b80:	065b      	lsls	r3, r3, #25
 8009b82:	f53f af2d 	bmi.w	80099e0 <_svfiprintf_r+0x28>
 8009b86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b88:	b01d      	add	sp, #116	; 0x74
 8009b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8e:	ab03      	add	r3, sp, #12
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	462a      	mov	r2, r5
 8009b94:	4b05      	ldr	r3, [pc, #20]	; (8009bac <_svfiprintf_r+0x1f4>)
 8009b96:	a904      	add	r1, sp, #16
 8009b98:	4638      	mov	r0, r7
 8009b9a:	f7fc ff2b 	bl	80069f4 <_printf_i>
 8009b9e:	e7eb      	b.n	8009b78 <_svfiprintf_r+0x1c0>
 8009ba0:	0800b9a9 	.word	0x0800b9a9
 8009ba4:	0800b9b3 	.word	0x0800b9b3
 8009ba8:	080064ad 	.word	0x080064ad
 8009bac:	08009905 	.word	0x08009905
 8009bb0:	0800b9af 	.word	0x0800b9af

08009bb4 <__sflush_r>:
 8009bb4:	898a      	ldrh	r2, [r1, #12]
 8009bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bba:	4605      	mov	r5, r0
 8009bbc:	0710      	lsls	r0, r2, #28
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	d458      	bmi.n	8009c74 <__sflush_r+0xc0>
 8009bc2:	684b      	ldr	r3, [r1, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	dc05      	bgt.n	8009bd4 <__sflush_r+0x20>
 8009bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	dc02      	bgt.n	8009bd4 <__sflush_r+0x20>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bd6:	2e00      	cmp	r6, #0
 8009bd8:	d0f9      	beq.n	8009bce <__sflush_r+0x1a>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009be0:	682f      	ldr	r7, [r5, #0]
 8009be2:	6a21      	ldr	r1, [r4, #32]
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	d032      	beq.n	8009c4e <__sflush_r+0x9a>
 8009be8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bea:	89a3      	ldrh	r3, [r4, #12]
 8009bec:	075a      	lsls	r2, r3, #29
 8009bee:	d505      	bpl.n	8009bfc <__sflush_r+0x48>
 8009bf0:	6863      	ldr	r3, [r4, #4]
 8009bf2:	1ac0      	subs	r0, r0, r3
 8009bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009bf6:	b10b      	cbz	r3, 8009bfc <__sflush_r+0x48>
 8009bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bfa:	1ac0      	subs	r0, r0, r3
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c02:	6a21      	ldr	r1, [r4, #32]
 8009c04:	4628      	mov	r0, r5
 8009c06:	47b0      	blx	r6
 8009c08:	1c43      	adds	r3, r0, #1
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	d106      	bne.n	8009c1c <__sflush_r+0x68>
 8009c0e:	6829      	ldr	r1, [r5, #0]
 8009c10:	291d      	cmp	r1, #29
 8009c12:	d82b      	bhi.n	8009c6c <__sflush_r+0xb8>
 8009c14:	4a29      	ldr	r2, [pc, #164]	; (8009cbc <__sflush_r+0x108>)
 8009c16:	410a      	asrs	r2, r1
 8009c18:	07d6      	lsls	r6, r2, #31
 8009c1a:	d427      	bmi.n	8009c6c <__sflush_r+0xb8>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	6062      	str	r2, [r4, #4]
 8009c20:	04d9      	lsls	r1, r3, #19
 8009c22:	6922      	ldr	r2, [r4, #16]
 8009c24:	6022      	str	r2, [r4, #0]
 8009c26:	d504      	bpl.n	8009c32 <__sflush_r+0x7e>
 8009c28:	1c42      	adds	r2, r0, #1
 8009c2a:	d101      	bne.n	8009c30 <__sflush_r+0x7c>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	b903      	cbnz	r3, 8009c32 <__sflush_r+0x7e>
 8009c30:	6560      	str	r0, [r4, #84]	; 0x54
 8009c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c34:	602f      	str	r7, [r5, #0]
 8009c36:	2900      	cmp	r1, #0
 8009c38:	d0c9      	beq.n	8009bce <__sflush_r+0x1a>
 8009c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c3e:	4299      	cmp	r1, r3
 8009c40:	d002      	beq.n	8009c48 <__sflush_r+0x94>
 8009c42:	4628      	mov	r0, r5
 8009c44:	f7fe face 	bl	80081e4 <_free_r>
 8009c48:	2000      	movs	r0, #0
 8009c4a:	6360      	str	r0, [r4, #52]	; 0x34
 8009c4c:	e7c0      	b.n	8009bd0 <__sflush_r+0x1c>
 8009c4e:	2301      	movs	r3, #1
 8009c50:	4628      	mov	r0, r5
 8009c52:	47b0      	blx	r6
 8009c54:	1c41      	adds	r1, r0, #1
 8009c56:	d1c8      	bne.n	8009bea <__sflush_r+0x36>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0c5      	beq.n	8009bea <__sflush_r+0x36>
 8009c5e:	2b1d      	cmp	r3, #29
 8009c60:	d001      	beq.n	8009c66 <__sflush_r+0xb2>
 8009c62:	2b16      	cmp	r3, #22
 8009c64:	d101      	bne.n	8009c6a <__sflush_r+0xb6>
 8009c66:	602f      	str	r7, [r5, #0]
 8009c68:	e7b1      	b.n	8009bce <__sflush_r+0x1a>
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c70:	81a3      	strh	r3, [r4, #12]
 8009c72:	e7ad      	b.n	8009bd0 <__sflush_r+0x1c>
 8009c74:	690f      	ldr	r7, [r1, #16]
 8009c76:	2f00      	cmp	r7, #0
 8009c78:	d0a9      	beq.n	8009bce <__sflush_r+0x1a>
 8009c7a:	0793      	lsls	r3, r2, #30
 8009c7c:	680e      	ldr	r6, [r1, #0]
 8009c7e:	bf08      	it	eq
 8009c80:	694b      	ldreq	r3, [r1, #20]
 8009c82:	600f      	str	r7, [r1, #0]
 8009c84:	bf18      	it	ne
 8009c86:	2300      	movne	r3, #0
 8009c88:	eba6 0807 	sub.w	r8, r6, r7
 8009c8c:	608b      	str	r3, [r1, #8]
 8009c8e:	f1b8 0f00 	cmp.w	r8, #0
 8009c92:	dd9c      	ble.n	8009bce <__sflush_r+0x1a>
 8009c94:	6a21      	ldr	r1, [r4, #32]
 8009c96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c98:	4643      	mov	r3, r8
 8009c9a:	463a      	mov	r2, r7
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b0      	blx	r6
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	dc06      	bgt.n	8009cb2 <__sflush_r+0xfe>
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb0:	e78e      	b.n	8009bd0 <__sflush_r+0x1c>
 8009cb2:	4407      	add	r7, r0
 8009cb4:	eba8 0800 	sub.w	r8, r8, r0
 8009cb8:	e7e9      	b.n	8009c8e <__sflush_r+0xda>
 8009cba:	bf00      	nop
 8009cbc:	dfbffffe 	.word	0xdfbffffe

08009cc0 <_fflush_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	690b      	ldr	r3, [r1, #16]
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	b913      	cbnz	r3, 8009cd0 <_fflush_r+0x10>
 8009cca:	2500      	movs	r5, #0
 8009ccc:	4628      	mov	r0, r5
 8009cce:	bd38      	pop	{r3, r4, r5, pc}
 8009cd0:	b118      	cbz	r0, 8009cda <_fflush_r+0x1a>
 8009cd2:	6a03      	ldr	r3, [r0, #32]
 8009cd4:	b90b      	cbnz	r3, 8009cda <_fflush_r+0x1a>
 8009cd6:	f7fd fa4b 	bl	8007170 <__sinit>
 8009cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0f3      	beq.n	8009cca <_fflush_r+0xa>
 8009ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ce4:	07d0      	lsls	r0, r2, #31
 8009ce6:	d404      	bmi.n	8009cf2 <_fflush_r+0x32>
 8009ce8:	0599      	lsls	r1, r3, #22
 8009cea:	d402      	bmi.n	8009cf2 <_fflush_r+0x32>
 8009cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cee:	f7fd fbde 	bl	80074ae <__retarget_lock_acquire_recursive>
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	f7ff ff5d 	bl	8009bb4 <__sflush_r>
 8009cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cfc:	07da      	lsls	r2, r3, #31
 8009cfe:	4605      	mov	r5, r0
 8009d00:	d4e4      	bmi.n	8009ccc <_fflush_r+0xc>
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	059b      	lsls	r3, r3, #22
 8009d06:	d4e1      	bmi.n	8009ccc <_fflush_r+0xc>
 8009d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d0a:	f7fd fbd1 	bl	80074b0 <__retarget_lock_release_recursive>
 8009d0e:	e7dd      	b.n	8009ccc <_fflush_r+0xc>

08009d10 <memmove>:
 8009d10:	4288      	cmp	r0, r1
 8009d12:	b510      	push	{r4, lr}
 8009d14:	eb01 0402 	add.w	r4, r1, r2
 8009d18:	d902      	bls.n	8009d20 <memmove+0x10>
 8009d1a:	4284      	cmp	r4, r0
 8009d1c:	4623      	mov	r3, r4
 8009d1e:	d807      	bhi.n	8009d30 <memmove+0x20>
 8009d20:	1e43      	subs	r3, r0, #1
 8009d22:	42a1      	cmp	r1, r4
 8009d24:	d008      	beq.n	8009d38 <memmove+0x28>
 8009d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d2e:	e7f8      	b.n	8009d22 <memmove+0x12>
 8009d30:	4402      	add	r2, r0
 8009d32:	4601      	mov	r1, r0
 8009d34:	428a      	cmp	r2, r1
 8009d36:	d100      	bne.n	8009d3a <memmove+0x2a>
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d42:	e7f7      	b.n	8009d34 <memmove+0x24>

08009d44 <strncmp>:
 8009d44:	b510      	push	{r4, lr}
 8009d46:	b16a      	cbz	r2, 8009d64 <strncmp+0x20>
 8009d48:	3901      	subs	r1, #1
 8009d4a:	1884      	adds	r4, r0, r2
 8009d4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d103      	bne.n	8009d60 <strncmp+0x1c>
 8009d58:	42a0      	cmp	r0, r4
 8009d5a:	d001      	beq.n	8009d60 <strncmp+0x1c>
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	d1f5      	bne.n	8009d4c <strncmp+0x8>
 8009d60:	1ad0      	subs	r0, r2, r3
 8009d62:	bd10      	pop	{r4, pc}
 8009d64:	4610      	mov	r0, r2
 8009d66:	e7fc      	b.n	8009d62 <strncmp+0x1e>

08009d68 <__assert_func>:
 8009d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d6a:	4614      	mov	r4, r2
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <__assert_func+0x2c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4605      	mov	r5, r0
 8009d74:	68d8      	ldr	r0, [r3, #12]
 8009d76:	b14c      	cbz	r4, 8009d8c <__assert_func+0x24>
 8009d78:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <__assert_func+0x30>)
 8009d7a:	9100      	str	r1, [sp, #0]
 8009d7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d80:	4906      	ldr	r1, [pc, #24]	; (8009d9c <__assert_func+0x34>)
 8009d82:	462b      	mov	r3, r5
 8009d84:	f000 fbca 	bl	800a51c <fiprintf>
 8009d88:	f7fc fa2c 	bl	80061e4 <abort>
 8009d8c:	4b04      	ldr	r3, [pc, #16]	; (8009da0 <__assert_func+0x38>)
 8009d8e:	461c      	mov	r4, r3
 8009d90:	e7f3      	b.n	8009d7a <__assert_func+0x12>
 8009d92:	bf00      	nop
 8009d94:	20000074 	.word	0x20000074
 8009d98:	0800b9c2 	.word	0x0800b9c2
 8009d9c:	0800b9cf 	.word	0x0800b9cf
 8009da0:	0800b9fd 	.word	0x0800b9fd

08009da4 <_calloc_r>:
 8009da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009da6:	fba1 2402 	umull	r2, r4, r1, r2
 8009daa:	b94c      	cbnz	r4, 8009dc0 <_calloc_r+0x1c>
 8009dac:	4611      	mov	r1, r2
 8009dae:	9201      	str	r2, [sp, #4]
 8009db0:	f7fc fa50 	bl	8006254 <_malloc_r>
 8009db4:	9a01      	ldr	r2, [sp, #4]
 8009db6:	4605      	mov	r5, r0
 8009db8:	b930      	cbnz	r0, 8009dc8 <_calloc_r+0x24>
 8009dba:	4628      	mov	r0, r5
 8009dbc:	b003      	add	sp, #12
 8009dbe:	bd30      	pop	{r4, r5, pc}
 8009dc0:	220c      	movs	r2, #12
 8009dc2:	6002      	str	r2, [r0, #0]
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	e7f8      	b.n	8009dba <_calloc_r+0x16>
 8009dc8:	4621      	mov	r1, r4
 8009dca:	f7fd fa9e 	bl	800730a <memset>
 8009dce:	e7f4      	b.n	8009dba <_calloc_r+0x16>

08009dd0 <rshift>:
 8009dd0:	6903      	ldr	r3, [r0, #16]
 8009dd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009dd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009dda:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009dde:	f100 0414 	add.w	r4, r0, #20
 8009de2:	dd45      	ble.n	8009e70 <rshift+0xa0>
 8009de4:	f011 011f 	ands.w	r1, r1, #31
 8009de8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009dec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009df0:	d10c      	bne.n	8009e0c <rshift+0x3c>
 8009df2:	f100 0710 	add.w	r7, r0, #16
 8009df6:	4629      	mov	r1, r5
 8009df8:	42b1      	cmp	r1, r6
 8009dfa:	d334      	bcc.n	8009e66 <rshift+0x96>
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	1eea      	subs	r2, r5, #3
 8009e02:	4296      	cmp	r6, r2
 8009e04:	bf38      	it	cc
 8009e06:	2300      	movcc	r3, #0
 8009e08:	4423      	add	r3, r4
 8009e0a:	e015      	b.n	8009e38 <rshift+0x68>
 8009e0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e10:	f1c1 0820 	rsb	r8, r1, #32
 8009e14:	40cf      	lsrs	r7, r1
 8009e16:	f105 0e04 	add.w	lr, r5, #4
 8009e1a:	46a1      	mov	r9, r4
 8009e1c:	4576      	cmp	r6, lr
 8009e1e:	46f4      	mov	ip, lr
 8009e20:	d815      	bhi.n	8009e4e <rshift+0x7e>
 8009e22:	1a9a      	subs	r2, r3, r2
 8009e24:	0092      	lsls	r2, r2, #2
 8009e26:	3a04      	subs	r2, #4
 8009e28:	3501      	adds	r5, #1
 8009e2a:	42ae      	cmp	r6, r5
 8009e2c:	bf38      	it	cc
 8009e2e:	2200      	movcc	r2, #0
 8009e30:	18a3      	adds	r3, r4, r2
 8009e32:	50a7      	str	r7, [r4, r2]
 8009e34:	b107      	cbz	r7, 8009e38 <rshift+0x68>
 8009e36:	3304      	adds	r3, #4
 8009e38:	1b1a      	subs	r2, r3, r4
 8009e3a:	42a3      	cmp	r3, r4
 8009e3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e40:	bf08      	it	eq
 8009e42:	2300      	moveq	r3, #0
 8009e44:	6102      	str	r2, [r0, #16]
 8009e46:	bf08      	it	eq
 8009e48:	6143      	streq	r3, [r0, #20]
 8009e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e4e:	f8dc c000 	ldr.w	ip, [ip]
 8009e52:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e56:	ea4c 0707 	orr.w	r7, ip, r7
 8009e5a:	f849 7b04 	str.w	r7, [r9], #4
 8009e5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e62:	40cf      	lsrs	r7, r1
 8009e64:	e7da      	b.n	8009e1c <rshift+0x4c>
 8009e66:	f851 cb04 	ldr.w	ip, [r1], #4
 8009e6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8009e6e:	e7c3      	b.n	8009df8 <rshift+0x28>
 8009e70:	4623      	mov	r3, r4
 8009e72:	e7e1      	b.n	8009e38 <rshift+0x68>

08009e74 <__hexdig_fun>:
 8009e74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009e78:	2b09      	cmp	r3, #9
 8009e7a:	d802      	bhi.n	8009e82 <__hexdig_fun+0xe>
 8009e7c:	3820      	subs	r0, #32
 8009e7e:	b2c0      	uxtb	r0, r0
 8009e80:	4770      	bx	lr
 8009e82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009e86:	2b05      	cmp	r3, #5
 8009e88:	d801      	bhi.n	8009e8e <__hexdig_fun+0x1a>
 8009e8a:	3847      	subs	r0, #71	; 0x47
 8009e8c:	e7f7      	b.n	8009e7e <__hexdig_fun+0xa>
 8009e8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009e92:	2b05      	cmp	r3, #5
 8009e94:	d801      	bhi.n	8009e9a <__hexdig_fun+0x26>
 8009e96:	3827      	subs	r0, #39	; 0x27
 8009e98:	e7f1      	b.n	8009e7e <__hexdig_fun+0xa>
 8009e9a:	2000      	movs	r0, #0
 8009e9c:	4770      	bx	lr
	...

08009ea0 <__gethex>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	4617      	mov	r7, r2
 8009ea6:	680a      	ldr	r2, [r1, #0]
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	f102 0b02 	add.w	fp, r2, #2
 8009eae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009eb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009eb6:	4681      	mov	r9, r0
 8009eb8:	468a      	mov	sl, r1
 8009eba:	9302      	str	r3, [sp, #8]
 8009ebc:	32fe      	adds	r2, #254	; 0xfe
 8009ebe:	eb02 030b 	add.w	r3, r2, fp
 8009ec2:	46d8      	mov	r8, fp
 8009ec4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	2830      	cmp	r0, #48	; 0x30
 8009ecc:	d0f7      	beq.n	8009ebe <__gethex+0x1e>
 8009ece:	f7ff ffd1 	bl	8009e74 <__hexdig_fun>
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	d138      	bne.n	8009f4a <__gethex+0xaa>
 8009ed8:	49a7      	ldr	r1, [pc, #668]	; (800a178 <__gethex+0x2d8>)
 8009eda:	2201      	movs	r2, #1
 8009edc:	4640      	mov	r0, r8
 8009ede:	f7ff ff31 	bl	8009d44 <strncmp>
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d169      	bne.n	8009fbc <__gethex+0x11c>
 8009ee8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009eec:	465d      	mov	r5, fp
 8009eee:	f7ff ffc1 	bl	8009e74 <__hexdig_fun>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d064      	beq.n	8009fc0 <__gethex+0x120>
 8009ef6:	465a      	mov	r2, fp
 8009ef8:	7810      	ldrb	r0, [r2, #0]
 8009efa:	2830      	cmp	r0, #48	; 0x30
 8009efc:	4690      	mov	r8, r2
 8009efe:	f102 0201 	add.w	r2, r2, #1
 8009f02:	d0f9      	beq.n	8009ef8 <__gethex+0x58>
 8009f04:	f7ff ffb6 	bl	8009e74 <__hexdig_fun>
 8009f08:	2301      	movs	r3, #1
 8009f0a:	fab0 f480 	clz	r4, r0
 8009f0e:	0964      	lsrs	r4, r4, #5
 8009f10:	465e      	mov	r6, fp
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	4642      	mov	r2, r8
 8009f16:	4615      	mov	r5, r2
 8009f18:	3201      	adds	r2, #1
 8009f1a:	7828      	ldrb	r0, [r5, #0]
 8009f1c:	f7ff ffaa 	bl	8009e74 <__hexdig_fun>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d1f8      	bne.n	8009f16 <__gethex+0x76>
 8009f24:	4994      	ldr	r1, [pc, #592]	; (800a178 <__gethex+0x2d8>)
 8009f26:	2201      	movs	r2, #1
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f7ff ff0b 	bl	8009d44 <strncmp>
 8009f2e:	b978      	cbnz	r0, 8009f50 <__gethex+0xb0>
 8009f30:	b946      	cbnz	r6, 8009f44 <__gethex+0xa4>
 8009f32:	1c6e      	adds	r6, r5, #1
 8009f34:	4632      	mov	r2, r6
 8009f36:	4615      	mov	r5, r2
 8009f38:	3201      	adds	r2, #1
 8009f3a:	7828      	ldrb	r0, [r5, #0]
 8009f3c:	f7ff ff9a 	bl	8009e74 <__hexdig_fun>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d1f8      	bne.n	8009f36 <__gethex+0x96>
 8009f44:	1b73      	subs	r3, r6, r5
 8009f46:	009e      	lsls	r6, r3, #2
 8009f48:	e004      	b.n	8009f54 <__gethex+0xb4>
 8009f4a:	2400      	movs	r4, #0
 8009f4c:	4626      	mov	r6, r4
 8009f4e:	e7e1      	b.n	8009f14 <__gethex+0x74>
 8009f50:	2e00      	cmp	r6, #0
 8009f52:	d1f7      	bne.n	8009f44 <__gethex+0xa4>
 8009f54:	782b      	ldrb	r3, [r5, #0]
 8009f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f5a:	2b50      	cmp	r3, #80	; 0x50
 8009f5c:	d13d      	bne.n	8009fda <__gethex+0x13a>
 8009f5e:	786b      	ldrb	r3, [r5, #1]
 8009f60:	2b2b      	cmp	r3, #43	; 0x2b
 8009f62:	d02f      	beq.n	8009fc4 <__gethex+0x124>
 8009f64:	2b2d      	cmp	r3, #45	; 0x2d
 8009f66:	d031      	beq.n	8009fcc <__gethex+0x12c>
 8009f68:	1c69      	adds	r1, r5, #1
 8009f6a:	f04f 0b00 	mov.w	fp, #0
 8009f6e:	7808      	ldrb	r0, [r1, #0]
 8009f70:	f7ff ff80 	bl	8009e74 <__hexdig_fun>
 8009f74:	1e42      	subs	r2, r0, #1
 8009f76:	b2d2      	uxtb	r2, r2
 8009f78:	2a18      	cmp	r2, #24
 8009f7a:	d82e      	bhi.n	8009fda <__gethex+0x13a>
 8009f7c:	f1a0 0210 	sub.w	r2, r0, #16
 8009f80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009f84:	f7ff ff76 	bl	8009e74 <__hexdig_fun>
 8009f88:	f100 3cff 	add.w	ip, r0, #4294967295
 8009f8c:	fa5f fc8c 	uxtb.w	ip, ip
 8009f90:	f1bc 0f18 	cmp.w	ip, #24
 8009f94:	d91d      	bls.n	8009fd2 <__gethex+0x132>
 8009f96:	f1bb 0f00 	cmp.w	fp, #0
 8009f9a:	d000      	beq.n	8009f9e <__gethex+0xfe>
 8009f9c:	4252      	negs	r2, r2
 8009f9e:	4416      	add	r6, r2
 8009fa0:	f8ca 1000 	str.w	r1, [sl]
 8009fa4:	b1dc      	cbz	r4, 8009fde <__gethex+0x13e>
 8009fa6:	9b01      	ldr	r3, [sp, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	bf14      	ite	ne
 8009fac:	f04f 0800 	movne.w	r8, #0
 8009fb0:	f04f 0806 	moveq.w	r8, #6
 8009fb4:	4640      	mov	r0, r8
 8009fb6:	b005      	add	sp, #20
 8009fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fbc:	4645      	mov	r5, r8
 8009fbe:	4626      	mov	r6, r4
 8009fc0:	2401      	movs	r4, #1
 8009fc2:	e7c7      	b.n	8009f54 <__gethex+0xb4>
 8009fc4:	f04f 0b00 	mov.w	fp, #0
 8009fc8:	1ca9      	adds	r1, r5, #2
 8009fca:	e7d0      	b.n	8009f6e <__gethex+0xce>
 8009fcc:	f04f 0b01 	mov.w	fp, #1
 8009fd0:	e7fa      	b.n	8009fc8 <__gethex+0x128>
 8009fd2:	230a      	movs	r3, #10
 8009fd4:	fb03 0002 	mla	r0, r3, r2, r0
 8009fd8:	e7d0      	b.n	8009f7c <__gethex+0xdc>
 8009fda:	4629      	mov	r1, r5
 8009fdc:	e7e0      	b.n	8009fa0 <__gethex+0x100>
 8009fde:	eba5 0308 	sub.w	r3, r5, r8
 8009fe2:	3b01      	subs	r3, #1
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	2b07      	cmp	r3, #7
 8009fe8:	dc0a      	bgt.n	800a000 <__gethex+0x160>
 8009fea:	4648      	mov	r0, r9
 8009fec:	f7fe f946 	bl	800827c <_Balloc>
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	b940      	cbnz	r0, 800a006 <__gethex+0x166>
 8009ff4:	4b61      	ldr	r3, [pc, #388]	; (800a17c <__gethex+0x2dc>)
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	21e4      	movs	r1, #228	; 0xe4
 8009ffa:	4861      	ldr	r0, [pc, #388]	; (800a180 <__gethex+0x2e0>)
 8009ffc:	f7ff feb4 	bl	8009d68 <__assert_func>
 800a000:	3101      	adds	r1, #1
 800a002:	105b      	asrs	r3, r3, #1
 800a004:	e7ef      	b.n	8009fe6 <__gethex+0x146>
 800a006:	f100 0a14 	add.w	sl, r0, #20
 800a00a:	2300      	movs	r3, #0
 800a00c:	495a      	ldr	r1, [pc, #360]	; (800a178 <__gethex+0x2d8>)
 800a00e:	f8cd a004 	str.w	sl, [sp, #4]
 800a012:	469b      	mov	fp, r3
 800a014:	45a8      	cmp	r8, r5
 800a016:	d342      	bcc.n	800a09e <__gethex+0x1fe>
 800a018:	9801      	ldr	r0, [sp, #4]
 800a01a:	f840 bb04 	str.w	fp, [r0], #4
 800a01e:	eba0 000a 	sub.w	r0, r0, sl
 800a022:	1080      	asrs	r0, r0, #2
 800a024:	6120      	str	r0, [r4, #16]
 800a026:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a02a:	4658      	mov	r0, fp
 800a02c:	f7fe fa18 	bl	8008460 <__hi0bits>
 800a030:	683d      	ldr	r5, [r7, #0]
 800a032:	eba8 0000 	sub.w	r0, r8, r0
 800a036:	42a8      	cmp	r0, r5
 800a038:	dd59      	ble.n	800a0ee <__gethex+0x24e>
 800a03a:	eba0 0805 	sub.w	r8, r0, r5
 800a03e:	4641      	mov	r1, r8
 800a040:	4620      	mov	r0, r4
 800a042:	f7fe fda7 	bl	8008b94 <__any_on>
 800a046:	4683      	mov	fp, r0
 800a048:	b1b8      	cbz	r0, 800a07a <__gethex+0x1da>
 800a04a:	f108 33ff 	add.w	r3, r8, #4294967295
 800a04e:	1159      	asrs	r1, r3, #5
 800a050:	f003 021f 	and.w	r2, r3, #31
 800a054:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a058:	f04f 0b01 	mov.w	fp, #1
 800a05c:	fa0b f202 	lsl.w	r2, fp, r2
 800a060:	420a      	tst	r2, r1
 800a062:	d00a      	beq.n	800a07a <__gethex+0x1da>
 800a064:	455b      	cmp	r3, fp
 800a066:	dd06      	ble.n	800a076 <__gethex+0x1d6>
 800a068:	f1a8 0102 	sub.w	r1, r8, #2
 800a06c:	4620      	mov	r0, r4
 800a06e:	f7fe fd91 	bl	8008b94 <__any_on>
 800a072:	2800      	cmp	r0, #0
 800a074:	d138      	bne.n	800a0e8 <__gethex+0x248>
 800a076:	f04f 0b02 	mov.w	fp, #2
 800a07a:	4641      	mov	r1, r8
 800a07c:	4620      	mov	r0, r4
 800a07e:	f7ff fea7 	bl	8009dd0 <rshift>
 800a082:	4446      	add	r6, r8
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	42b3      	cmp	r3, r6
 800a088:	da41      	bge.n	800a10e <__gethex+0x26e>
 800a08a:	4621      	mov	r1, r4
 800a08c:	4648      	mov	r0, r9
 800a08e:	f7fe f935 	bl	80082fc <_Bfree>
 800a092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a094:	2300      	movs	r3, #0
 800a096:	6013      	str	r3, [r2, #0]
 800a098:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a09c:	e78a      	b.n	8009fb4 <__gethex+0x114>
 800a09e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a0a2:	2a2e      	cmp	r2, #46	; 0x2e
 800a0a4:	d014      	beq.n	800a0d0 <__gethex+0x230>
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d106      	bne.n	800a0b8 <__gethex+0x218>
 800a0aa:	9b01      	ldr	r3, [sp, #4]
 800a0ac:	f843 bb04 	str.w	fp, [r3], #4
 800a0b0:	f04f 0b00 	mov.w	fp, #0
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	465b      	mov	r3, fp
 800a0b8:	7828      	ldrb	r0, [r5, #0]
 800a0ba:	9303      	str	r3, [sp, #12]
 800a0bc:	f7ff feda 	bl	8009e74 <__hexdig_fun>
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	f000 000f 	and.w	r0, r0, #15
 800a0c6:	4098      	lsls	r0, r3
 800a0c8:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0cc:	3304      	adds	r3, #4
 800a0ce:	e7a1      	b.n	800a014 <__gethex+0x174>
 800a0d0:	45a8      	cmp	r8, r5
 800a0d2:	d8e8      	bhi.n	800a0a6 <__gethex+0x206>
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	4628      	mov	r0, r5
 800a0d8:	9303      	str	r3, [sp, #12]
 800a0da:	f7ff fe33 	bl	8009d44 <strncmp>
 800a0de:	4926      	ldr	r1, [pc, #152]	; (800a178 <__gethex+0x2d8>)
 800a0e0:	9b03      	ldr	r3, [sp, #12]
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	d1df      	bne.n	800a0a6 <__gethex+0x206>
 800a0e6:	e795      	b.n	800a014 <__gethex+0x174>
 800a0e8:	f04f 0b03 	mov.w	fp, #3
 800a0ec:	e7c5      	b.n	800a07a <__gethex+0x1da>
 800a0ee:	da0b      	bge.n	800a108 <__gethex+0x268>
 800a0f0:	eba5 0800 	sub.w	r8, r5, r0
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	4642      	mov	r2, r8
 800a0f8:	4648      	mov	r0, r9
 800a0fa:	f7fe fb19 	bl	8008730 <__lshift>
 800a0fe:	eba6 0608 	sub.w	r6, r6, r8
 800a102:	4604      	mov	r4, r0
 800a104:	f100 0a14 	add.w	sl, r0, #20
 800a108:	f04f 0b00 	mov.w	fp, #0
 800a10c:	e7ba      	b.n	800a084 <__gethex+0x1e4>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	42b3      	cmp	r3, r6
 800a112:	dd73      	ble.n	800a1fc <__gethex+0x35c>
 800a114:	1b9e      	subs	r6, r3, r6
 800a116:	42b5      	cmp	r5, r6
 800a118:	dc34      	bgt.n	800a184 <__gethex+0x2e4>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d023      	beq.n	800a168 <__gethex+0x2c8>
 800a120:	2b03      	cmp	r3, #3
 800a122:	d025      	beq.n	800a170 <__gethex+0x2d0>
 800a124:	2b01      	cmp	r3, #1
 800a126:	d115      	bne.n	800a154 <__gethex+0x2b4>
 800a128:	42b5      	cmp	r5, r6
 800a12a:	d113      	bne.n	800a154 <__gethex+0x2b4>
 800a12c:	2d01      	cmp	r5, #1
 800a12e:	d10b      	bne.n	800a148 <__gethex+0x2a8>
 800a130:	9a02      	ldr	r2, [sp, #8]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6013      	str	r3, [r2, #0]
 800a136:	2301      	movs	r3, #1
 800a138:	6123      	str	r3, [r4, #16]
 800a13a:	f8ca 3000 	str.w	r3, [sl]
 800a13e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a140:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a144:	601c      	str	r4, [r3, #0]
 800a146:	e735      	b.n	8009fb4 <__gethex+0x114>
 800a148:	1e69      	subs	r1, r5, #1
 800a14a:	4620      	mov	r0, r4
 800a14c:	f7fe fd22 	bl	8008b94 <__any_on>
 800a150:	2800      	cmp	r0, #0
 800a152:	d1ed      	bne.n	800a130 <__gethex+0x290>
 800a154:	4621      	mov	r1, r4
 800a156:	4648      	mov	r0, r9
 800a158:	f7fe f8d0 	bl	80082fc <_Bfree>
 800a15c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a15e:	2300      	movs	r3, #0
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a166:	e725      	b.n	8009fb4 <__gethex+0x114>
 800a168:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1f2      	bne.n	800a154 <__gethex+0x2b4>
 800a16e:	e7df      	b.n	800a130 <__gethex+0x290>
 800a170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1dc      	bne.n	800a130 <__gethex+0x290>
 800a176:	e7ed      	b.n	800a154 <__gethex+0x2b4>
 800a178:	0800b28d 	.word	0x0800b28d
 800a17c:	0800b6eb 	.word	0x0800b6eb
 800a180:	0800b9fe 	.word	0x0800b9fe
 800a184:	f106 38ff 	add.w	r8, r6, #4294967295
 800a188:	f1bb 0f00 	cmp.w	fp, #0
 800a18c:	d133      	bne.n	800a1f6 <__gethex+0x356>
 800a18e:	f1b8 0f00 	cmp.w	r8, #0
 800a192:	d004      	beq.n	800a19e <__gethex+0x2fe>
 800a194:	4641      	mov	r1, r8
 800a196:	4620      	mov	r0, r4
 800a198:	f7fe fcfc 	bl	8008b94 <__any_on>
 800a19c:	4683      	mov	fp, r0
 800a19e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1a8:	f008 081f 	and.w	r8, r8, #31
 800a1ac:	fa03 f308 	lsl.w	r3, r3, r8
 800a1b0:	4213      	tst	r3, r2
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	bf18      	it	ne
 800a1b8:	f04b 0b02 	orrne.w	fp, fp, #2
 800a1bc:	1bad      	subs	r5, r5, r6
 800a1be:	f7ff fe07 	bl	8009dd0 <rshift>
 800a1c2:	687e      	ldr	r6, [r7, #4]
 800a1c4:	f04f 0802 	mov.w	r8, #2
 800a1c8:	f1bb 0f00 	cmp.w	fp, #0
 800a1cc:	d04a      	beq.n	800a264 <__gethex+0x3c4>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	d016      	beq.n	800a202 <__gethex+0x362>
 800a1d4:	2b03      	cmp	r3, #3
 800a1d6:	d018      	beq.n	800a20a <__gethex+0x36a>
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d109      	bne.n	800a1f0 <__gethex+0x350>
 800a1dc:	f01b 0f02 	tst.w	fp, #2
 800a1e0:	d006      	beq.n	800a1f0 <__gethex+0x350>
 800a1e2:	f8da 3000 	ldr.w	r3, [sl]
 800a1e6:	ea4b 0b03 	orr.w	fp, fp, r3
 800a1ea:	f01b 0f01 	tst.w	fp, #1
 800a1ee:	d10f      	bne.n	800a210 <__gethex+0x370>
 800a1f0:	f048 0810 	orr.w	r8, r8, #16
 800a1f4:	e036      	b.n	800a264 <__gethex+0x3c4>
 800a1f6:	f04f 0b01 	mov.w	fp, #1
 800a1fa:	e7d0      	b.n	800a19e <__gethex+0x2fe>
 800a1fc:	f04f 0801 	mov.w	r8, #1
 800a200:	e7e2      	b.n	800a1c8 <__gethex+0x328>
 800a202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a204:	f1c3 0301 	rsb	r3, r3, #1
 800a208:	930f      	str	r3, [sp, #60]	; 0x3c
 800a20a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0ef      	beq.n	800a1f0 <__gethex+0x350>
 800a210:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a214:	f104 0214 	add.w	r2, r4, #20
 800a218:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a222:	2300      	movs	r3, #0
 800a224:	4694      	mov	ip, r2
 800a226:	f852 1b04 	ldr.w	r1, [r2], #4
 800a22a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a22e:	d01e      	beq.n	800a26e <__gethex+0x3ce>
 800a230:	3101      	adds	r1, #1
 800a232:	f8cc 1000 	str.w	r1, [ip]
 800a236:	f1b8 0f02 	cmp.w	r8, #2
 800a23a:	f104 0214 	add.w	r2, r4, #20
 800a23e:	d13d      	bne.n	800a2bc <__gethex+0x41c>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	3b01      	subs	r3, #1
 800a244:	42ab      	cmp	r3, r5
 800a246:	d10b      	bne.n	800a260 <__gethex+0x3c0>
 800a248:	1169      	asrs	r1, r5, #5
 800a24a:	2301      	movs	r3, #1
 800a24c:	f005 051f 	and.w	r5, r5, #31
 800a250:	fa03 f505 	lsl.w	r5, r3, r5
 800a254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a258:	421d      	tst	r5, r3
 800a25a:	bf18      	it	ne
 800a25c:	f04f 0801 	movne.w	r8, #1
 800a260:	f048 0820 	orr.w	r8, r8, #32
 800a264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a266:	601c      	str	r4, [r3, #0]
 800a268:	9b02      	ldr	r3, [sp, #8]
 800a26a:	601e      	str	r6, [r3, #0]
 800a26c:	e6a2      	b.n	8009fb4 <__gethex+0x114>
 800a26e:	4290      	cmp	r0, r2
 800a270:	f842 3c04 	str.w	r3, [r2, #-4]
 800a274:	d8d6      	bhi.n	800a224 <__gethex+0x384>
 800a276:	68a2      	ldr	r2, [r4, #8]
 800a278:	4593      	cmp	fp, r2
 800a27a:	db17      	blt.n	800a2ac <__gethex+0x40c>
 800a27c:	6861      	ldr	r1, [r4, #4]
 800a27e:	4648      	mov	r0, r9
 800a280:	3101      	adds	r1, #1
 800a282:	f7fd fffb 	bl	800827c <_Balloc>
 800a286:	4682      	mov	sl, r0
 800a288:	b918      	cbnz	r0, 800a292 <__gethex+0x3f2>
 800a28a:	4b1b      	ldr	r3, [pc, #108]	; (800a2f8 <__gethex+0x458>)
 800a28c:	4602      	mov	r2, r0
 800a28e:	2184      	movs	r1, #132	; 0x84
 800a290:	e6b3      	b.n	8009ffa <__gethex+0x15a>
 800a292:	6922      	ldr	r2, [r4, #16]
 800a294:	3202      	adds	r2, #2
 800a296:	f104 010c 	add.w	r1, r4, #12
 800a29a:	0092      	lsls	r2, r2, #2
 800a29c:	300c      	adds	r0, #12
 800a29e:	f7fd f910 	bl	80074c2 <memcpy>
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	4648      	mov	r0, r9
 800a2a6:	f7fe f829 	bl	80082fc <_Bfree>
 800a2aa:	4654      	mov	r4, sl
 800a2ac:	6922      	ldr	r2, [r4, #16]
 800a2ae:	1c51      	adds	r1, r2, #1
 800a2b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a2b4:	6121      	str	r1, [r4, #16]
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	6151      	str	r1, [r2, #20]
 800a2ba:	e7bc      	b.n	800a236 <__gethex+0x396>
 800a2bc:	6921      	ldr	r1, [r4, #16]
 800a2be:	4559      	cmp	r1, fp
 800a2c0:	dd0b      	ble.n	800a2da <__gethex+0x43a>
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f7ff fd83 	bl	8009dd0 <rshift>
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	3601      	adds	r6, #1
 800a2ce:	42b3      	cmp	r3, r6
 800a2d0:	f6ff aedb 	blt.w	800a08a <__gethex+0x1ea>
 800a2d4:	f04f 0801 	mov.w	r8, #1
 800a2d8:	e7c2      	b.n	800a260 <__gethex+0x3c0>
 800a2da:	f015 051f 	ands.w	r5, r5, #31
 800a2de:	d0f9      	beq.n	800a2d4 <__gethex+0x434>
 800a2e0:	9b01      	ldr	r3, [sp, #4]
 800a2e2:	441a      	add	r2, r3
 800a2e4:	f1c5 0520 	rsb	r5, r5, #32
 800a2e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a2ec:	f7fe f8b8 	bl	8008460 <__hi0bits>
 800a2f0:	42a8      	cmp	r0, r5
 800a2f2:	dbe6      	blt.n	800a2c2 <__gethex+0x422>
 800a2f4:	e7ee      	b.n	800a2d4 <__gethex+0x434>
 800a2f6:	bf00      	nop
 800a2f8:	0800b6eb 	.word	0x0800b6eb

0800a2fc <L_shift>:
 800a2fc:	f1c2 0208 	rsb	r2, r2, #8
 800a300:	0092      	lsls	r2, r2, #2
 800a302:	b570      	push	{r4, r5, r6, lr}
 800a304:	f1c2 0620 	rsb	r6, r2, #32
 800a308:	6843      	ldr	r3, [r0, #4]
 800a30a:	6804      	ldr	r4, [r0, #0]
 800a30c:	fa03 f506 	lsl.w	r5, r3, r6
 800a310:	432c      	orrs	r4, r5
 800a312:	40d3      	lsrs	r3, r2
 800a314:	6004      	str	r4, [r0, #0]
 800a316:	f840 3f04 	str.w	r3, [r0, #4]!
 800a31a:	4288      	cmp	r0, r1
 800a31c:	d3f4      	bcc.n	800a308 <L_shift+0xc>
 800a31e:	bd70      	pop	{r4, r5, r6, pc}

0800a320 <__match>:
 800a320:	b530      	push	{r4, r5, lr}
 800a322:	6803      	ldr	r3, [r0, #0]
 800a324:	3301      	adds	r3, #1
 800a326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a32a:	b914      	cbnz	r4, 800a332 <__match+0x12>
 800a32c:	6003      	str	r3, [r0, #0]
 800a32e:	2001      	movs	r0, #1
 800a330:	bd30      	pop	{r4, r5, pc}
 800a332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a336:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a33a:	2d19      	cmp	r5, #25
 800a33c:	bf98      	it	ls
 800a33e:	3220      	addls	r2, #32
 800a340:	42a2      	cmp	r2, r4
 800a342:	d0f0      	beq.n	800a326 <__match+0x6>
 800a344:	2000      	movs	r0, #0
 800a346:	e7f3      	b.n	800a330 <__match+0x10>

0800a348 <__hexnan>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	680b      	ldr	r3, [r1, #0]
 800a34e:	6801      	ldr	r1, [r0, #0]
 800a350:	115e      	asrs	r6, r3, #5
 800a352:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a356:	f013 031f 	ands.w	r3, r3, #31
 800a35a:	b087      	sub	sp, #28
 800a35c:	bf18      	it	ne
 800a35e:	3604      	addne	r6, #4
 800a360:	2500      	movs	r5, #0
 800a362:	1f37      	subs	r7, r6, #4
 800a364:	4682      	mov	sl, r0
 800a366:	4690      	mov	r8, r2
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a36e:	46b9      	mov	r9, r7
 800a370:	463c      	mov	r4, r7
 800a372:	9502      	str	r5, [sp, #8]
 800a374:	46ab      	mov	fp, r5
 800a376:	784a      	ldrb	r2, [r1, #1]
 800a378:	1c4b      	adds	r3, r1, #1
 800a37a:	9303      	str	r3, [sp, #12]
 800a37c:	b342      	cbz	r2, 800a3d0 <__hexnan+0x88>
 800a37e:	4610      	mov	r0, r2
 800a380:	9105      	str	r1, [sp, #20]
 800a382:	9204      	str	r2, [sp, #16]
 800a384:	f7ff fd76 	bl	8009e74 <__hexdig_fun>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d14f      	bne.n	800a42c <__hexnan+0xe4>
 800a38c:	9a04      	ldr	r2, [sp, #16]
 800a38e:	9905      	ldr	r1, [sp, #20]
 800a390:	2a20      	cmp	r2, #32
 800a392:	d818      	bhi.n	800a3c6 <__hexnan+0x7e>
 800a394:	9b02      	ldr	r3, [sp, #8]
 800a396:	459b      	cmp	fp, r3
 800a398:	dd13      	ble.n	800a3c2 <__hexnan+0x7a>
 800a39a:	454c      	cmp	r4, r9
 800a39c:	d206      	bcs.n	800a3ac <__hexnan+0x64>
 800a39e:	2d07      	cmp	r5, #7
 800a3a0:	dc04      	bgt.n	800a3ac <__hexnan+0x64>
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff ffa8 	bl	800a2fc <L_shift>
 800a3ac:	4544      	cmp	r4, r8
 800a3ae:	d950      	bls.n	800a452 <__hexnan+0x10a>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a3b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3ba:	f8cd b008 	str.w	fp, [sp, #8]
 800a3be:	464c      	mov	r4, r9
 800a3c0:	461d      	mov	r5, r3
 800a3c2:	9903      	ldr	r1, [sp, #12]
 800a3c4:	e7d7      	b.n	800a376 <__hexnan+0x2e>
 800a3c6:	2a29      	cmp	r2, #41	; 0x29
 800a3c8:	d155      	bne.n	800a476 <__hexnan+0x12e>
 800a3ca:	3102      	adds	r1, #2
 800a3cc:	f8ca 1000 	str.w	r1, [sl]
 800a3d0:	f1bb 0f00 	cmp.w	fp, #0
 800a3d4:	d04f      	beq.n	800a476 <__hexnan+0x12e>
 800a3d6:	454c      	cmp	r4, r9
 800a3d8:	d206      	bcs.n	800a3e8 <__hexnan+0xa0>
 800a3da:	2d07      	cmp	r5, #7
 800a3dc:	dc04      	bgt.n	800a3e8 <__hexnan+0xa0>
 800a3de:	462a      	mov	r2, r5
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7ff ff8a 	bl	800a2fc <L_shift>
 800a3e8:	4544      	cmp	r4, r8
 800a3ea:	d934      	bls.n	800a456 <__hexnan+0x10e>
 800a3ec:	f1a8 0204 	sub.w	r2, r8, #4
 800a3f0:	4623      	mov	r3, r4
 800a3f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3fa:	429f      	cmp	r7, r3
 800a3fc:	d2f9      	bcs.n	800a3f2 <__hexnan+0xaa>
 800a3fe:	1b3b      	subs	r3, r7, r4
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	3304      	adds	r3, #4
 800a406:	3e03      	subs	r6, #3
 800a408:	3401      	adds	r4, #1
 800a40a:	42a6      	cmp	r6, r4
 800a40c:	bf38      	it	cc
 800a40e:	2304      	movcc	r3, #4
 800a410:	4443      	add	r3, r8
 800a412:	2200      	movs	r2, #0
 800a414:	f843 2b04 	str.w	r2, [r3], #4
 800a418:	429f      	cmp	r7, r3
 800a41a:	d2fb      	bcs.n	800a414 <__hexnan+0xcc>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	b91b      	cbnz	r3, 800a428 <__hexnan+0xe0>
 800a420:	4547      	cmp	r7, r8
 800a422:	d126      	bne.n	800a472 <__hexnan+0x12a>
 800a424:	2301      	movs	r3, #1
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	2005      	movs	r0, #5
 800a42a:	e025      	b.n	800a478 <__hexnan+0x130>
 800a42c:	3501      	adds	r5, #1
 800a42e:	2d08      	cmp	r5, #8
 800a430:	f10b 0b01 	add.w	fp, fp, #1
 800a434:	dd06      	ble.n	800a444 <__hexnan+0xfc>
 800a436:	4544      	cmp	r4, r8
 800a438:	d9c3      	bls.n	800a3c2 <__hexnan+0x7a>
 800a43a:	2300      	movs	r3, #0
 800a43c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a440:	2501      	movs	r5, #1
 800a442:	3c04      	subs	r4, #4
 800a444:	6822      	ldr	r2, [r4, #0]
 800a446:	f000 000f 	and.w	r0, r0, #15
 800a44a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a44e:	6020      	str	r0, [r4, #0]
 800a450:	e7b7      	b.n	800a3c2 <__hexnan+0x7a>
 800a452:	2508      	movs	r5, #8
 800a454:	e7b5      	b.n	800a3c2 <__hexnan+0x7a>
 800a456:	9b01      	ldr	r3, [sp, #4]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d0df      	beq.n	800a41c <__hexnan+0xd4>
 800a45c:	f1c3 0320 	rsb	r3, r3, #32
 800a460:	f04f 32ff 	mov.w	r2, #4294967295
 800a464:	40da      	lsrs	r2, r3
 800a466:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a46a:	4013      	ands	r3, r2
 800a46c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a470:	e7d4      	b.n	800a41c <__hexnan+0xd4>
 800a472:	3f04      	subs	r7, #4
 800a474:	e7d2      	b.n	800a41c <__hexnan+0xd4>
 800a476:	2004      	movs	r0, #4
 800a478:	b007      	add	sp, #28
 800a47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a47e <__ascii_mbtowc>:
 800a47e:	b082      	sub	sp, #8
 800a480:	b901      	cbnz	r1, 800a484 <__ascii_mbtowc+0x6>
 800a482:	a901      	add	r1, sp, #4
 800a484:	b142      	cbz	r2, 800a498 <__ascii_mbtowc+0x1a>
 800a486:	b14b      	cbz	r3, 800a49c <__ascii_mbtowc+0x1e>
 800a488:	7813      	ldrb	r3, [r2, #0]
 800a48a:	600b      	str	r3, [r1, #0]
 800a48c:	7812      	ldrb	r2, [r2, #0]
 800a48e:	1e10      	subs	r0, r2, #0
 800a490:	bf18      	it	ne
 800a492:	2001      	movne	r0, #1
 800a494:	b002      	add	sp, #8
 800a496:	4770      	bx	lr
 800a498:	4610      	mov	r0, r2
 800a49a:	e7fb      	b.n	800a494 <__ascii_mbtowc+0x16>
 800a49c:	f06f 0001 	mvn.w	r0, #1
 800a4a0:	e7f8      	b.n	800a494 <__ascii_mbtowc+0x16>

0800a4a2 <_realloc_r>:
 800a4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a6:	4680      	mov	r8, r0
 800a4a8:	4614      	mov	r4, r2
 800a4aa:	460e      	mov	r6, r1
 800a4ac:	b921      	cbnz	r1, 800a4b8 <_realloc_r+0x16>
 800a4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	f7fb bece 	b.w	8006254 <_malloc_r>
 800a4b8:	b92a      	cbnz	r2, 800a4c6 <_realloc_r+0x24>
 800a4ba:	f7fd fe93 	bl	80081e4 <_free_r>
 800a4be:	4625      	mov	r5, r4
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c6:	f000 f83b 	bl	800a540 <_malloc_usable_size_r>
 800a4ca:	4284      	cmp	r4, r0
 800a4cc:	4607      	mov	r7, r0
 800a4ce:	d802      	bhi.n	800a4d6 <_realloc_r+0x34>
 800a4d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4d4:	d812      	bhi.n	800a4fc <_realloc_r+0x5a>
 800a4d6:	4621      	mov	r1, r4
 800a4d8:	4640      	mov	r0, r8
 800a4da:	f7fb febb 	bl	8006254 <_malloc_r>
 800a4de:	4605      	mov	r5, r0
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d0ed      	beq.n	800a4c0 <_realloc_r+0x1e>
 800a4e4:	42bc      	cmp	r4, r7
 800a4e6:	4622      	mov	r2, r4
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	bf28      	it	cs
 800a4ec:	463a      	movcs	r2, r7
 800a4ee:	f7fc ffe8 	bl	80074c2 <memcpy>
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	f7fd fe75 	bl	80081e4 <_free_r>
 800a4fa:	e7e1      	b.n	800a4c0 <_realloc_r+0x1e>
 800a4fc:	4635      	mov	r5, r6
 800a4fe:	e7df      	b.n	800a4c0 <_realloc_r+0x1e>

0800a500 <__ascii_wctomb>:
 800a500:	b149      	cbz	r1, 800a516 <__ascii_wctomb+0x16>
 800a502:	2aff      	cmp	r2, #255	; 0xff
 800a504:	bf85      	ittet	hi
 800a506:	238a      	movhi	r3, #138	; 0x8a
 800a508:	6003      	strhi	r3, [r0, #0]
 800a50a:	700a      	strbls	r2, [r1, #0]
 800a50c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a510:	bf98      	it	ls
 800a512:	2001      	movls	r0, #1
 800a514:	4770      	bx	lr
 800a516:	4608      	mov	r0, r1
 800a518:	4770      	bx	lr
	...

0800a51c <fiprintf>:
 800a51c:	b40e      	push	{r1, r2, r3}
 800a51e:	b503      	push	{r0, r1, lr}
 800a520:	4601      	mov	r1, r0
 800a522:	ab03      	add	r3, sp, #12
 800a524:	4805      	ldr	r0, [pc, #20]	; (800a53c <fiprintf+0x20>)
 800a526:	f853 2b04 	ldr.w	r2, [r3], #4
 800a52a:	6800      	ldr	r0, [r0, #0]
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	f000 f839 	bl	800a5a4 <_vfiprintf_r>
 800a532:	b002      	add	sp, #8
 800a534:	f85d eb04 	ldr.w	lr, [sp], #4
 800a538:	b003      	add	sp, #12
 800a53a:	4770      	bx	lr
 800a53c:	20000074 	.word	0x20000074

0800a540 <_malloc_usable_size_r>:
 800a540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a544:	1f18      	subs	r0, r3, #4
 800a546:	2b00      	cmp	r3, #0
 800a548:	bfbc      	itt	lt
 800a54a:	580b      	ldrlt	r3, [r1, r0]
 800a54c:	18c0      	addlt	r0, r0, r3
 800a54e:	4770      	bx	lr

0800a550 <__sfputc_r>:
 800a550:	6893      	ldr	r3, [r2, #8]
 800a552:	3b01      	subs	r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	b410      	push	{r4}
 800a558:	6093      	str	r3, [r2, #8]
 800a55a:	da08      	bge.n	800a56e <__sfputc_r+0x1e>
 800a55c:	6994      	ldr	r4, [r2, #24]
 800a55e:	42a3      	cmp	r3, r4
 800a560:	db01      	blt.n	800a566 <__sfputc_r+0x16>
 800a562:	290a      	cmp	r1, #10
 800a564:	d103      	bne.n	800a56e <__sfputc_r+0x1e>
 800a566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a56a:	f000 b935 	b.w	800a7d8 <__swbuf_r>
 800a56e:	6813      	ldr	r3, [r2, #0]
 800a570:	1c58      	adds	r0, r3, #1
 800a572:	6010      	str	r0, [r2, #0]
 800a574:	7019      	strb	r1, [r3, #0]
 800a576:	4608      	mov	r0, r1
 800a578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <__sfputs_r>:
 800a57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a580:	4606      	mov	r6, r0
 800a582:	460f      	mov	r7, r1
 800a584:	4614      	mov	r4, r2
 800a586:	18d5      	adds	r5, r2, r3
 800a588:	42ac      	cmp	r4, r5
 800a58a:	d101      	bne.n	800a590 <__sfputs_r+0x12>
 800a58c:	2000      	movs	r0, #0
 800a58e:	e007      	b.n	800a5a0 <__sfputs_r+0x22>
 800a590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a594:	463a      	mov	r2, r7
 800a596:	4630      	mov	r0, r6
 800a598:	f7ff ffda 	bl	800a550 <__sfputc_r>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d1f3      	bne.n	800a588 <__sfputs_r+0xa>
 800a5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5a4 <_vfiprintf_r>:
 800a5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a8:	460d      	mov	r5, r1
 800a5aa:	b09d      	sub	sp, #116	; 0x74
 800a5ac:	4614      	mov	r4, r2
 800a5ae:	4698      	mov	r8, r3
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	b118      	cbz	r0, 800a5bc <_vfiprintf_r+0x18>
 800a5b4:	6a03      	ldr	r3, [r0, #32]
 800a5b6:	b90b      	cbnz	r3, 800a5bc <_vfiprintf_r+0x18>
 800a5b8:	f7fc fdda 	bl	8007170 <__sinit>
 800a5bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5be:	07d9      	lsls	r1, r3, #31
 800a5c0:	d405      	bmi.n	800a5ce <_vfiprintf_r+0x2a>
 800a5c2:	89ab      	ldrh	r3, [r5, #12]
 800a5c4:	059a      	lsls	r2, r3, #22
 800a5c6:	d402      	bmi.n	800a5ce <_vfiprintf_r+0x2a>
 800a5c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5ca:	f7fc ff70 	bl	80074ae <__retarget_lock_acquire_recursive>
 800a5ce:	89ab      	ldrh	r3, [r5, #12]
 800a5d0:	071b      	lsls	r3, r3, #28
 800a5d2:	d501      	bpl.n	800a5d8 <_vfiprintf_r+0x34>
 800a5d4:	692b      	ldr	r3, [r5, #16]
 800a5d6:	b99b      	cbnz	r3, 800a600 <_vfiprintf_r+0x5c>
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f000 f93a 	bl	800a854 <__swsetup_r>
 800a5e0:	b170      	cbz	r0, 800a600 <_vfiprintf_r+0x5c>
 800a5e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e4:	07dc      	lsls	r4, r3, #31
 800a5e6:	d504      	bpl.n	800a5f2 <_vfiprintf_r+0x4e>
 800a5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ec:	b01d      	add	sp, #116	; 0x74
 800a5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f2:	89ab      	ldrh	r3, [r5, #12]
 800a5f4:	0598      	lsls	r0, r3, #22
 800a5f6:	d4f7      	bmi.n	800a5e8 <_vfiprintf_r+0x44>
 800a5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5fa:	f7fc ff59 	bl	80074b0 <__retarget_lock_release_recursive>
 800a5fe:	e7f3      	b.n	800a5e8 <_vfiprintf_r+0x44>
 800a600:	2300      	movs	r3, #0
 800a602:	9309      	str	r3, [sp, #36]	; 0x24
 800a604:	2320      	movs	r3, #32
 800a606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a60a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a60e:	2330      	movs	r3, #48	; 0x30
 800a610:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a7c4 <_vfiprintf_r+0x220>
 800a614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a618:	f04f 0901 	mov.w	r9, #1
 800a61c:	4623      	mov	r3, r4
 800a61e:	469a      	mov	sl, r3
 800a620:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a624:	b10a      	cbz	r2, 800a62a <_vfiprintf_r+0x86>
 800a626:	2a25      	cmp	r2, #37	; 0x25
 800a628:	d1f9      	bne.n	800a61e <_vfiprintf_r+0x7a>
 800a62a:	ebba 0b04 	subs.w	fp, sl, r4
 800a62e:	d00b      	beq.n	800a648 <_vfiprintf_r+0xa4>
 800a630:	465b      	mov	r3, fp
 800a632:	4622      	mov	r2, r4
 800a634:	4629      	mov	r1, r5
 800a636:	4630      	mov	r0, r6
 800a638:	f7ff ffa1 	bl	800a57e <__sfputs_r>
 800a63c:	3001      	adds	r0, #1
 800a63e:	f000 80a9 	beq.w	800a794 <_vfiprintf_r+0x1f0>
 800a642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a644:	445a      	add	r2, fp
 800a646:	9209      	str	r2, [sp, #36]	; 0x24
 800a648:	f89a 3000 	ldrb.w	r3, [sl]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 80a1 	beq.w	800a794 <_vfiprintf_r+0x1f0>
 800a652:	2300      	movs	r3, #0
 800a654:	f04f 32ff 	mov.w	r2, #4294967295
 800a658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a65c:	f10a 0a01 	add.w	sl, sl, #1
 800a660:	9304      	str	r3, [sp, #16]
 800a662:	9307      	str	r3, [sp, #28]
 800a664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a668:	931a      	str	r3, [sp, #104]	; 0x68
 800a66a:	4654      	mov	r4, sl
 800a66c:	2205      	movs	r2, #5
 800a66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a672:	4854      	ldr	r0, [pc, #336]	; (800a7c4 <_vfiprintf_r+0x220>)
 800a674:	f7f5 fdac 	bl	80001d0 <memchr>
 800a678:	9a04      	ldr	r2, [sp, #16]
 800a67a:	b9d8      	cbnz	r0, 800a6b4 <_vfiprintf_r+0x110>
 800a67c:	06d1      	lsls	r1, r2, #27
 800a67e:	bf44      	itt	mi
 800a680:	2320      	movmi	r3, #32
 800a682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a686:	0713      	lsls	r3, r2, #28
 800a688:	bf44      	itt	mi
 800a68a:	232b      	movmi	r3, #43	; 0x2b
 800a68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a690:	f89a 3000 	ldrb.w	r3, [sl]
 800a694:	2b2a      	cmp	r3, #42	; 0x2a
 800a696:	d015      	beq.n	800a6c4 <_vfiprintf_r+0x120>
 800a698:	9a07      	ldr	r2, [sp, #28]
 800a69a:	4654      	mov	r4, sl
 800a69c:	2000      	movs	r0, #0
 800a69e:	f04f 0c0a 	mov.w	ip, #10
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a8:	3b30      	subs	r3, #48	; 0x30
 800a6aa:	2b09      	cmp	r3, #9
 800a6ac:	d94d      	bls.n	800a74a <_vfiprintf_r+0x1a6>
 800a6ae:	b1b0      	cbz	r0, 800a6de <_vfiprintf_r+0x13a>
 800a6b0:	9207      	str	r2, [sp, #28]
 800a6b2:	e014      	b.n	800a6de <_vfiprintf_r+0x13a>
 800a6b4:	eba0 0308 	sub.w	r3, r0, r8
 800a6b8:	fa09 f303 	lsl.w	r3, r9, r3
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	9304      	str	r3, [sp, #16]
 800a6c0:	46a2      	mov	sl, r4
 800a6c2:	e7d2      	b.n	800a66a <_vfiprintf_r+0xc6>
 800a6c4:	9b03      	ldr	r3, [sp, #12]
 800a6c6:	1d19      	adds	r1, r3, #4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	9103      	str	r1, [sp, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	bfbb      	ittet	lt
 800a6d0:	425b      	neglt	r3, r3
 800a6d2:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d6:	9307      	strge	r3, [sp, #28]
 800a6d8:	9307      	strlt	r3, [sp, #28]
 800a6da:	bfb8      	it	lt
 800a6dc:	9204      	strlt	r2, [sp, #16]
 800a6de:	7823      	ldrb	r3, [r4, #0]
 800a6e0:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e2:	d10c      	bne.n	800a6fe <_vfiprintf_r+0x15a>
 800a6e4:	7863      	ldrb	r3, [r4, #1]
 800a6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e8:	d134      	bne.n	800a754 <_vfiprintf_r+0x1b0>
 800a6ea:	9b03      	ldr	r3, [sp, #12]
 800a6ec:	1d1a      	adds	r2, r3, #4
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	9203      	str	r2, [sp, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	bfb8      	it	lt
 800a6f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6fa:	3402      	adds	r4, #2
 800a6fc:	9305      	str	r3, [sp, #20]
 800a6fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a7d4 <_vfiprintf_r+0x230>
 800a702:	7821      	ldrb	r1, [r4, #0]
 800a704:	2203      	movs	r2, #3
 800a706:	4650      	mov	r0, sl
 800a708:	f7f5 fd62 	bl	80001d0 <memchr>
 800a70c:	b138      	cbz	r0, 800a71e <_vfiprintf_r+0x17a>
 800a70e:	9b04      	ldr	r3, [sp, #16]
 800a710:	eba0 000a 	sub.w	r0, r0, sl
 800a714:	2240      	movs	r2, #64	; 0x40
 800a716:	4082      	lsls	r2, r0
 800a718:	4313      	orrs	r3, r2
 800a71a:	3401      	adds	r4, #1
 800a71c:	9304      	str	r3, [sp, #16]
 800a71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a722:	4829      	ldr	r0, [pc, #164]	; (800a7c8 <_vfiprintf_r+0x224>)
 800a724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a728:	2206      	movs	r2, #6
 800a72a:	f7f5 fd51 	bl	80001d0 <memchr>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d03f      	beq.n	800a7b2 <_vfiprintf_r+0x20e>
 800a732:	4b26      	ldr	r3, [pc, #152]	; (800a7cc <_vfiprintf_r+0x228>)
 800a734:	bb1b      	cbnz	r3, 800a77e <_vfiprintf_r+0x1da>
 800a736:	9b03      	ldr	r3, [sp, #12]
 800a738:	3307      	adds	r3, #7
 800a73a:	f023 0307 	bic.w	r3, r3, #7
 800a73e:	3308      	adds	r3, #8
 800a740:	9303      	str	r3, [sp, #12]
 800a742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a744:	443b      	add	r3, r7
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	e768      	b.n	800a61c <_vfiprintf_r+0x78>
 800a74a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a74e:	460c      	mov	r4, r1
 800a750:	2001      	movs	r0, #1
 800a752:	e7a6      	b.n	800a6a2 <_vfiprintf_r+0xfe>
 800a754:	2300      	movs	r3, #0
 800a756:	3401      	adds	r4, #1
 800a758:	9305      	str	r3, [sp, #20]
 800a75a:	4619      	mov	r1, r3
 800a75c:	f04f 0c0a 	mov.w	ip, #10
 800a760:	4620      	mov	r0, r4
 800a762:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a766:	3a30      	subs	r2, #48	; 0x30
 800a768:	2a09      	cmp	r2, #9
 800a76a:	d903      	bls.n	800a774 <_vfiprintf_r+0x1d0>
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0c6      	beq.n	800a6fe <_vfiprintf_r+0x15a>
 800a770:	9105      	str	r1, [sp, #20]
 800a772:	e7c4      	b.n	800a6fe <_vfiprintf_r+0x15a>
 800a774:	fb0c 2101 	mla	r1, ip, r1, r2
 800a778:	4604      	mov	r4, r0
 800a77a:	2301      	movs	r3, #1
 800a77c:	e7f0      	b.n	800a760 <_vfiprintf_r+0x1bc>
 800a77e:	ab03      	add	r3, sp, #12
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	462a      	mov	r2, r5
 800a784:	4b12      	ldr	r3, [pc, #72]	; (800a7d0 <_vfiprintf_r+0x22c>)
 800a786:	a904      	add	r1, sp, #16
 800a788:	4630      	mov	r0, r6
 800a78a:	f7fb fe8f 	bl	80064ac <_printf_float>
 800a78e:	4607      	mov	r7, r0
 800a790:	1c78      	adds	r0, r7, #1
 800a792:	d1d6      	bne.n	800a742 <_vfiprintf_r+0x19e>
 800a794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	d405      	bmi.n	800a7a6 <_vfiprintf_r+0x202>
 800a79a:	89ab      	ldrh	r3, [r5, #12]
 800a79c:	059a      	lsls	r2, r3, #22
 800a79e:	d402      	bmi.n	800a7a6 <_vfiprintf_r+0x202>
 800a7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a2:	f7fc fe85 	bl	80074b0 <__retarget_lock_release_recursive>
 800a7a6:	89ab      	ldrh	r3, [r5, #12]
 800a7a8:	065b      	lsls	r3, r3, #25
 800a7aa:	f53f af1d 	bmi.w	800a5e8 <_vfiprintf_r+0x44>
 800a7ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7b0:	e71c      	b.n	800a5ec <_vfiprintf_r+0x48>
 800a7b2:	ab03      	add	r3, sp, #12
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	462a      	mov	r2, r5
 800a7b8:	4b05      	ldr	r3, [pc, #20]	; (800a7d0 <_vfiprintf_r+0x22c>)
 800a7ba:	a904      	add	r1, sp, #16
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7fc f919 	bl	80069f4 <_printf_i>
 800a7c2:	e7e4      	b.n	800a78e <_vfiprintf_r+0x1ea>
 800a7c4:	0800b9a9 	.word	0x0800b9a9
 800a7c8:	0800b9b3 	.word	0x0800b9b3
 800a7cc:	080064ad 	.word	0x080064ad
 800a7d0:	0800a57f 	.word	0x0800a57f
 800a7d4:	0800b9af 	.word	0x0800b9af

0800a7d8 <__swbuf_r>:
 800a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7da:	460e      	mov	r6, r1
 800a7dc:	4614      	mov	r4, r2
 800a7de:	4605      	mov	r5, r0
 800a7e0:	b118      	cbz	r0, 800a7ea <__swbuf_r+0x12>
 800a7e2:	6a03      	ldr	r3, [r0, #32]
 800a7e4:	b90b      	cbnz	r3, 800a7ea <__swbuf_r+0x12>
 800a7e6:	f7fc fcc3 	bl	8007170 <__sinit>
 800a7ea:	69a3      	ldr	r3, [r4, #24]
 800a7ec:	60a3      	str	r3, [r4, #8]
 800a7ee:	89a3      	ldrh	r3, [r4, #12]
 800a7f0:	071a      	lsls	r2, r3, #28
 800a7f2:	d525      	bpl.n	800a840 <__swbuf_r+0x68>
 800a7f4:	6923      	ldr	r3, [r4, #16]
 800a7f6:	b31b      	cbz	r3, 800a840 <__swbuf_r+0x68>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	6922      	ldr	r2, [r4, #16]
 800a7fc:	1a98      	subs	r0, r3, r2
 800a7fe:	6963      	ldr	r3, [r4, #20]
 800a800:	b2f6      	uxtb	r6, r6
 800a802:	4283      	cmp	r3, r0
 800a804:	4637      	mov	r7, r6
 800a806:	dc04      	bgt.n	800a812 <__swbuf_r+0x3a>
 800a808:	4621      	mov	r1, r4
 800a80a:	4628      	mov	r0, r5
 800a80c:	f7ff fa58 	bl	8009cc0 <_fflush_r>
 800a810:	b9e0      	cbnz	r0, 800a84c <__swbuf_r+0x74>
 800a812:	68a3      	ldr	r3, [r4, #8]
 800a814:	3b01      	subs	r3, #1
 800a816:	60a3      	str	r3, [r4, #8]
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	1c5a      	adds	r2, r3, #1
 800a81c:	6022      	str	r2, [r4, #0]
 800a81e:	701e      	strb	r6, [r3, #0]
 800a820:	6962      	ldr	r2, [r4, #20]
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	429a      	cmp	r2, r3
 800a826:	d004      	beq.n	800a832 <__swbuf_r+0x5a>
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	07db      	lsls	r3, r3, #31
 800a82c:	d506      	bpl.n	800a83c <__swbuf_r+0x64>
 800a82e:	2e0a      	cmp	r6, #10
 800a830:	d104      	bne.n	800a83c <__swbuf_r+0x64>
 800a832:	4621      	mov	r1, r4
 800a834:	4628      	mov	r0, r5
 800a836:	f7ff fa43 	bl	8009cc0 <_fflush_r>
 800a83a:	b938      	cbnz	r0, 800a84c <__swbuf_r+0x74>
 800a83c:	4638      	mov	r0, r7
 800a83e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a840:	4621      	mov	r1, r4
 800a842:	4628      	mov	r0, r5
 800a844:	f000 f806 	bl	800a854 <__swsetup_r>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d0d5      	beq.n	800a7f8 <__swbuf_r+0x20>
 800a84c:	f04f 37ff 	mov.w	r7, #4294967295
 800a850:	e7f4      	b.n	800a83c <__swbuf_r+0x64>
	...

0800a854 <__swsetup_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	4b2a      	ldr	r3, [pc, #168]	; (800a900 <__swsetup_r+0xac>)
 800a858:	4605      	mov	r5, r0
 800a85a:	6818      	ldr	r0, [r3, #0]
 800a85c:	460c      	mov	r4, r1
 800a85e:	b118      	cbz	r0, 800a868 <__swsetup_r+0x14>
 800a860:	6a03      	ldr	r3, [r0, #32]
 800a862:	b90b      	cbnz	r3, 800a868 <__swsetup_r+0x14>
 800a864:	f7fc fc84 	bl	8007170 <__sinit>
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a86e:	0718      	lsls	r0, r3, #28
 800a870:	d422      	bmi.n	800a8b8 <__swsetup_r+0x64>
 800a872:	06d9      	lsls	r1, r3, #27
 800a874:	d407      	bmi.n	800a886 <__swsetup_r+0x32>
 800a876:	2309      	movs	r3, #9
 800a878:	602b      	str	r3, [r5, #0]
 800a87a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	e034      	b.n	800a8f0 <__swsetup_r+0x9c>
 800a886:	0758      	lsls	r0, r3, #29
 800a888:	d512      	bpl.n	800a8b0 <__swsetup_r+0x5c>
 800a88a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a88c:	b141      	cbz	r1, 800a8a0 <__swsetup_r+0x4c>
 800a88e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a892:	4299      	cmp	r1, r3
 800a894:	d002      	beq.n	800a89c <__swsetup_r+0x48>
 800a896:	4628      	mov	r0, r5
 800a898:	f7fd fca4 	bl	80081e4 <_free_r>
 800a89c:	2300      	movs	r3, #0
 800a89e:	6363      	str	r3, [r4, #52]	; 0x34
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8a6:	81a3      	strh	r3, [r4, #12]
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	6063      	str	r3, [r4, #4]
 800a8ac:	6923      	ldr	r3, [r4, #16]
 800a8ae:	6023      	str	r3, [r4, #0]
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	f043 0308 	orr.w	r3, r3, #8
 800a8b6:	81a3      	strh	r3, [r4, #12]
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	b94b      	cbnz	r3, 800a8d0 <__swsetup_r+0x7c>
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8c6:	d003      	beq.n	800a8d0 <__swsetup_r+0x7c>
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	f000 f840 	bl	800a950 <__smakebuf_r>
 800a8d0:	89a0      	ldrh	r0, [r4, #12]
 800a8d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8d6:	f010 0301 	ands.w	r3, r0, #1
 800a8da:	d00a      	beq.n	800a8f2 <__swsetup_r+0x9e>
 800a8dc:	2300      	movs	r3, #0
 800a8de:	60a3      	str	r3, [r4, #8]
 800a8e0:	6963      	ldr	r3, [r4, #20]
 800a8e2:	425b      	negs	r3, r3
 800a8e4:	61a3      	str	r3, [r4, #24]
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	b943      	cbnz	r3, 800a8fc <__swsetup_r+0xa8>
 800a8ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a8ee:	d1c4      	bne.n	800a87a <__swsetup_r+0x26>
 800a8f0:	bd38      	pop	{r3, r4, r5, pc}
 800a8f2:	0781      	lsls	r1, r0, #30
 800a8f4:	bf58      	it	pl
 800a8f6:	6963      	ldrpl	r3, [r4, #20]
 800a8f8:	60a3      	str	r3, [r4, #8]
 800a8fa:	e7f4      	b.n	800a8e6 <__swsetup_r+0x92>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e7f7      	b.n	800a8f0 <__swsetup_r+0x9c>
 800a900:	20000074 	.word	0x20000074

0800a904 <__swhatbuf_r>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	460c      	mov	r4, r1
 800a908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90c:	2900      	cmp	r1, #0
 800a90e:	b096      	sub	sp, #88	; 0x58
 800a910:	4615      	mov	r5, r2
 800a912:	461e      	mov	r6, r3
 800a914:	da0d      	bge.n	800a932 <__swhatbuf_r+0x2e>
 800a916:	89a3      	ldrh	r3, [r4, #12]
 800a918:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a91c:	f04f 0100 	mov.w	r1, #0
 800a920:	bf0c      	ite	eq
 800a922:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a926:	2340      	movne	r3, #64	; 0x40
 800a928:	2000      	movs	r0, #0
 800a92a:	6031      	str	r1, [r6, #0]
 800a92c:	602b      	str	r3, [r5, #0]
 800a92e:	b016      	add	sp, #88	; 0x58
 800a930:	bd70      	pop	{r4, r5, r6, pc}
 800a932:	466a      	mov	r2, sp
 800a934:	f000 f848 	bl	800a9c8 <_fstat_r>
 800a938:	2800      	cmp	r0, #0
 800a93a:	dbec      	blt.n	800a916 <__swhatbuf_r+0x12>
 800a93c:	9901      	ldr	r1, [sp, #4]
 800a93e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a942:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a946:	4259      	negs	r1, r3
 800a948:	4159      	adcs	r1, r3
 800a94a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a94e:	e7eb      	b.n	800a928 <__swhatbuf_r+0x24>

0800a950 <__smakebuf_r>:
 800a950:	898b      	ldrh	r3, [r1, #12]
 800a952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a954:	079d      	lsls	r5, r3, #30
 800a956:	4606      	mov	r6, r0
 800a958:	460c      	mov	r4, r1
 800a95a:	d507      	bpl.n	800a96c <__smakebuf_r+0x1c>
 800a95c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	6123      	str	r3, [r4, #16]
 800a964:	2301      	movs	r3, #1
 800a966:	6163      	str	r3, [r4, #20]
 800a968:	b002      	add	sp, #8
 800a96a:	bd70      	pop	{r4, r5, r6, pc}
 800a96c:	ab01      	add	r3, sp, #4
 800a96e:	466a      	mov	r2, sp
 800a970:	f7ff ffc8 	bl	800a904 <__swhatbuf_r>
 800a974:	9900      	ldr	r1, [sp, #0]
 800a976:	4605      	mov	r5, r0
 800a978:	4630      	mov	r0, r6
 800a97a:	f7fb fc6b 	bl	8006254 <_malloc_r>
 800a97e:	b948      	cbnz	r0, 800a994 <__smakebuf_r+0x44>
 800a980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a984:	059a      	lsls	r2, r3, #22
 800a986:	d4ef      	bmi.n	800a968 <__smakebuf_r+0x18>
 800a988:	f023 0303 	bic.w	r3, r3, #3
 800a98c:	f043 0302 	orr.w	r3, r3, #2
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	e7e3      	b.n	800a95c <__smakebuf_r+0xc>
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	6020      	str	r0, [r4, #0]
 800a998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99c:	81a3      	strh	r3, [r4, #12]
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	6163      	str	r3, [r4, #20]
 800a9a2:	9b01      	ldr	r3, [sp, #4]
 800a9a4:	6120      	str	r0, [r4, #16]
 800a9a6:	b15b      	cbz	r3, 800a9c0 <__smakebuf_r+0x70>
 800a9a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	f000 f81d 	bl	800a9ec <_isatty_r>
 800a9b2:	b128      	cbz	r0, 800a9c0 <__smakebuf_r+0x70>
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	431d      	orrs	r5, r3
 800a9c4:	81a5      	strh	r5, [r4, #12]
 800a9c6:	e7cf      	b.n	800a968 <__smakebuf_r+0x18>

0800a9c8 <_fstat_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d07      	ldr	r5, [pc, #28]	; (800a9e8 <_fstat_r+0x20>)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	4611      	mov	r1, r2
 800a9d4:	602b      	str	r3, [r5, #0]
 800a9d6:	f7f8 fb6e 	bl	80030b6 <_fstat>
 800a9da:	1c43      	adds	r3, r0, #1
 800a9dc:	d102      	bne.n	800a9e4 <_fstat_r+0x1c>
 800a9de:	682b      	ldr	r3, [r5, #0]
 800a9e0:	b103      	cbz	r3, 800a9e4 <_fstat_r+0x1c>
 800a9e2:	6023      	str	r3, [r4, #0]
 800a9e4:	bd38      	pop	{r3, r4, r5, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20000954 	.word	0x20000954

0800a9ec <_isatty_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4d06      	ldr	r5, [pc, #24]	; (800aa08 <_isatty_r+0x1c>)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	602b      	str	r3, [r5, #0]
 800a9f8:	f7f8 fb62 	bl	80030c0 <_isatty>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_isatty_r+0x1a>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_isatty_r+0x1a>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	20000954 	.word	0x20000954

0800aa0c <_init>:
 800aa0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0e:	bf00      	nop
 800aa10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa12:	bc08      	pop	{r3}
 800aa14:	469e      	mov	lr, r3
 800aa16:	4770      	bx	lr

0800aa18 <_fini>:
 800aa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1a:	bf00      	nop
 800aa1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa1e:	bc08      	pop	{r3}
 800aa20:	469e      	mov	lr, r3
 800aa22:	4770      	bx	lr
