
MPPT_Solar_Charge_Controller_TestBoard_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a04  08009fb8  08009fb8  00019fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9bc  0800a9bc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9bc  0800a9bc  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9bc  0800a9bc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9bc  0800a9bc  0001a9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9c0  0800a9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000006fc  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008d4  200008d4  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024070  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000048d6  00000000  00000000  000442bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001138  00000000  00000000  00048b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d1f  00000000  00000000  00049cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002789b  00000000  00000000  0004a9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bc89  00000000  00000000  0007228a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d754e  00000000  00000000  0008df13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005940  00000000  00000000  00165464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  0016ada4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f9c 	.word	0x08009f9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009f9c 	.word	0x08009f9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <_ZN4blib6AnalogC1Ev>:

#include "Analog.h"

namespace blib
{
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f9d2 	bl	800100c <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <_ZN4blib6AnalogC1Ev+0x44>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <_ZN4blib6AnalogC1Ev+0x48>)
 8000c82:	619a      	str	r2, [r3, #24]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <_ZN4blib6AnalogC1Ev+0x4c>)
 8000c88:	61da      	str	r2, [r3, #28]
    {
        sampling();
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f834 	bl	8000cf8 <_ZN4blib6Analog8samplingEv>
    }
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	0800a57c 	.word	0x0800a57c
 8000ca0:	200001f4 	.word	0x200001f4
 8000ca4:	20000244 	.word	0x20000244

08000ca8 <_ZN4blib6AnalogD1Ev>:

    Analog::~Analog()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <_ZN4blib6AnalogD1Ev+0x2c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 f8e8 	bl	8002e90 <HAL_ADC_Stop_DMA>
    Analog::~Analog()
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f9b2 	bl	800102c <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
    }
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	0800a57c 	.word	0x0800a57c

08000cd8 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    }
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ffe1 	bl	8000ca8 <_ZN4blib6AnalogD1Ev>
 8000ce6:	2134      	movs	r1, #52	; 0x34
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f006 fa95 	bl	8007218 <_ZdlPvj>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6998      	ldr	r0, [r3, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3304      	adds	r3, #4
 8000d08:	2205      	movs	r2, #5
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f001 ffa4 	bl	8002c58 <HAL_ADC_Start_DMA>
    }
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZN4blib6Analog10readAnalogEv>:
    {
        return mTemp;
    }

    void Analog::readAnalog()
    {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
        mVin = convertAdcChannel1(mAdcValues[0]);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f836 	bl	8000d98 <_ZN4blib6Analog18convertAdcChannel1Em>
 8000d2c:	eef0 7a40 	vmov.f32	s15, s0
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	edc3 7a08 	vstr	s15, [r3, #32]
        mIin = convertAdcChannel2(mAdcValues[1]);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 f85f 	bl	8000e00 <_ZN4blib6Analog18convertAdcChannel2Em>
 8000d42:	eef0 7a40 	vmov.f32	s15, s0
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        mVout = convertAdcChannel3(mAdcValues[2]);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	4619      	mov	r1, r3
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f8a4 	bl	8000ea0 <_ZN4blib6Analog18convertAdcChannel3Em>
 8000d58:	eef0 7a40 	vmov.f32	s15, s0
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        mIout = convertAdcChannel4(mAdcValues[3]);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	691b      	ldr	r3, [r3, #16]
 8000d66:	4619      	mov	r1, r3
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f8cd 	bl	8000f08 <_ZN4blib6Analog18convertAdcChannel4Em>
 8000d6e:	eef0 7a40 	vmov.f32	s15, s0
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        mTemp = convertAdcChannel5(mAdcValues[4]);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f912 	bl	8000fa8 <_ZN4blib6Analog18convertAdcChannel5Em>
 8000d84:	eef0 7a40 	vmov.f32	s15, s0
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
//        LOGI("mVin : [%.2f] V", mVin);
//        LOGI("mIin : [%.2f] A", mIin);
//        LOGI("mVout : [%.2f] V", mVout);
//        LOGI("mIout : [%.2f] A", mIout);
//        LOGI("mTemp : [%.2f] C", mTemp);
    }
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <_ZN4blib6Analog18convertAdcChannel1Em>:

    float Analog::convertAdcChannel1(uint32_t adcValue)    // Convert adcValue -> Vin
    {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	ee07 3a90 	vmov	s15, r3
 8000da8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dac:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000df8 <_ZN4blib6Analog18convertAdcChannel1Em+0x60>
 8000db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000db4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dbc:	ee17 0a90 	vmov	r0, s15
 8000dc0:	f7ff fbca 	bl	8000558 <__aeabi_f2d>
 8000dc4:	a30a      	add	r3, pc, #40	; (adr r3, 8000df0 <_ZN4blib6Analog18convertAdcChannel1Em+0x58>)
 8000dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dca:	f7ff fc1d 	bl	8000608 <__aeabi_dmul>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f7ff feef 	bl	8000bb8 <__aeabi_d2f>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	ee07 3a90 	vmov	s15, r3
    }
 8000de0:	eeb0 0a67 	vmov.f32	s0, s15
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	f3af 8000 	nop.w
 8000df0:	66666666 	.word	0x66666666
 8000df4:	400a6666 	.word	0x400a6666
 8000df8:	457ff000 	.word	0x457ff000
 8000dfc:	00000000 	.word	0x00000000

08000e00 <_ZN4blib6Analog18convertAdcChannel2Em>:

    float Analog::convertAdcChannel2(uint32_t adcValue)    // Convert adcValue -> Iin
    {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
        float voltage = CHANNEL_2_RATIO * ((float) adcValue / 4095) * 3.3;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	ee07 3a90 	vmov	s15, r3
 8000e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e14:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000e98 <_ZN4blib6Analog18convertAdcChannel2Em+0x98>
 8000e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e1c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e24:	ee17 0a90 	vmov	r0, s15
 8000e28:	f7ff fb96 	bl	8000558 <__aeabi_f2d>
 8000e2c:	a316      	add	r3, pc, #88	; (adr r3, 8000e88 <_ZN4blib6Analog18convertAdcChannel2Em+0x88>)
 8000e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e32:	f7ff fbe9 	bl	8000608 <__aeabi_dmul>
 8000e36:	4602      	mov	r2, r0
 8000e38:	460b      	mov	r3, r1
 8000e3a:	4610      	mov	r0, r2
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f7ff febb 	bl	8000bb8 <__aeabi_d2f>
 8000e42:	4603      	mov	r3, r0
 8000e44:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f7ff fb86 	bl	8000558 <__aeabi_f2d>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <_ZN4blib6Analog18convertAdcChannel2Em+0x9c>)
 8000e52:	f7ff fa21 	bl	8000298 <__aeabi_dsub>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	a30c      	add	r3, pc, #48	; (adr r3, 8000e90 <_ZN4blib6Analog18convertAdcChannel2Em+0x90>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	f7ff fcfa 	bl	800085c <__aeabi_ddiv>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f7ff fea2 	bl	8000bb8 <__aeabi_d2f>
 8000e74:	4603      	mov	r3, r0
 8000e76:	60bb      	str	r3, [r7, #8]

        return current;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	ee07 3a90 	vmov	s15, r3
    }
 8000e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	66666666 	.word	0x66666666
 8000e8c:	400a6666 	.word	0x400a6666
 8000e90:	a0000000 	.word	0xa0000000
 8000e94:	3fb99999 	.word	0x3fb99999
 8000e98:	457ff000 	.word	0x457ff000
 8000e9c:	40040000 	.word	0x40040000

08000ea0 <_ZN4blib6Analog18convertAdcChannel3Em>:
    float Analog::convertAdcChannel3(uint32_t adcValue)    // Convert adcValue -> Vout
    {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	ee07 3a90 	vmov	s15, r3
 8000eb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eb4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000f00 <_ZN4blib6Analog18convertAdcChannel3Em+0x60>
 8000eb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ebc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec4:	ee17 0a90 	vmov	r0, s15
 8000ec8:	f7ff fb46 	bl	8000558 <__aeabi_f2d>
 8000ecc:	a30a      	add	r3, pc, #40	; (adr r3, 8000ef8 <_ZN4blib6Analog18convertAdcChannel3Em+0x58>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff fb99 	bl	8000608 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe6b 	bl	8000bb8 <__aeabi_d2f>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	ee07 3a90 	vmov	s15, r3
    }
 8000ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	66666666 	.word	0x66666666
 8000efc:	400a6666 	.word	0x400a6666
 8000f00:	457ff000 	.word	0x457ff000
 8000f04:	00000000 	.word	0x00000000

08000f08 <_ZN4blib6Analog18convertAdcChannel4Em>:
    float Analog::convertAdcChannel4(uint32_t adcValue)    // Convert adcValue -> Iout
    {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
        float voltage = CHANNEL_4_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000fa0 <_ZN4blib6Analog18convertAdcChannel4Em+0x98>
 8000f20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f24:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f2c:	ee17 0a90 	vmov	r0, s15
 8000f30:	f7ff fb12 	bl	8000558 <__aeabi_f2d>
 8000f34:	a316      	add	r3, pc, #88	; (adr r3, 8000f90 <_ZN4blib6Analog18convertAdcChannel4Em+0x88>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff fb65 	bl	8000608 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f7ff fe37 	bl	8000bb8 <__aeabi_d2f>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff fb02 	bl	8000558 <__aeabi_f2d>
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <_ZN4blib6Analog18convertAdcChannel4Em+0x9c>)
 8000f5a:	f7ff f99d 	bl	8000298 <__aeabi_dsub>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4610      	mov	r0, r2
 8000f64:	4619      	mov	r1, r3
 8000f66:	a30c      	add	r3, pc, #48	; (adr r3, 8000f98 <_ZN4blib6Analog18convertAdcChannel4Em+0x90>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff fc76 	bl	800085c <__aeabi_ddiv>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fe1e 	bl	8000bb8 <__aeabi_d2f>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60bb      	str	r3, [r7, #8]

        return current;
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	ee07 3a90 	vmov	s15, r3
    }
 8000f86:	eeb0 0a67 	vmov.f32	s0, s15
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	66666666 	.word	0x66666666
 8000f94:	400a6666 	.word	0x400a6666
 8000f98:	a0000000 	.word	0xa0000000
 8000f9c:	3fb99999 	.word	0x3fb99999
 8000fa0:	457ff000 	.word	0x457ff000
 8000fa4:	40040000 	.word	0x40040000

08000fa8 <_ZN4blib6Analog18convertAdcChannel5Em>:
    float Analog::convertAdcChannel5(uint32_t adcValue)    // Convert adcValue -> Temperature NTC 10k
    {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fbc:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001008 <_ZN4blib6Analog18convertAdcChannel5Em+0x60>
 8000fc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fcc:	ee17 0a90 	vmov	r0, s15
 8000fd0:	f7ff fac2 	bl	8000558 <__aeabi_f2d>
 8000fd4:	a30a      	add	r3, pc, #40	; (adr r3, 8001000 <_ZN4blib6Analog18convertAdcChannel5Em+0x58>)
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	f7ff fb15 	bl	8000608 <__aeabi_dmul>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fde7 	bl	8000bb8 <__aeabi_d2f>
 8000fea:	4603      	mov	r3, r0
 8000fec:	ee07 3a90 	vmov	s15, r3
    }
 8000ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	66666666 	.word	0x66666666
 8001004:	400a6666 	.word	0x400a6666
 8001008:	457ff000 	.word	0x457ff000

0800100c <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
                {
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev+0x1c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	601a      	str	r2, [r3, #0]
                }
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	0800a58c 	.word	0x0800a58c

0800102c <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>:
                virtual ~Singleton()
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
                {
                }
 8001034:	4a04      	ldr	r2, [pc, #16]	; (8001048 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev+0x1c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	0800a58c 	.word	0x0800a58c

0800104c <_ZN4blib2dp9SingletonINS_6AnalogEED0Ev>:
                virtual ~Singleton()
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
                }
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ffe9 	bl	800102c <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 800105a:	2104      	movs	r1, #4
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f006 f8db 	bl	8007218 <_ZdlPvj>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <_ZN4blib6Logger5printEPKc+0x2c>)
 8001076:	681c      	ldr	r4, [r3, #0]
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff f901 	bl	8000280 <strlen>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	4620      	mov	r0, r4
 800108a:	f005 fb1f 	bl	80066cc <HAL_UART_Transmit>
            }
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}
 8001096:	bf00      	nop
 8001098:	2000000c 	.word	0x2000000c

0800109c <_ZN4blib13ChargeControlC1Ev>:
#include "ChargeControl.h"

namespace blib
{

    ChargeControl::ChargeControl()
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f83c 	bl	8001124 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>
 80010ac:	4a06      	ldr	r2, [pc, #24]	; (80010c8 <_ZN4blib13ChargeControlC1Ev+0x2c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	711a      	strb	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	715a      	strb	r2, [r3, #5]
    {

    }
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	0800a59c 	.word	0x0800a59c

080010cc <_ZN4blib13ChargeControlD1Ev>:
    ChargeControl::~ChargeControl()
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	4a05      	ldr	r2, [pc, #20]	; (80010ec <_ZN4blib13ChargeControlD1Ev+0x20>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f831 	bl	8001144 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
    {

    }
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	0800a59c 	.word	0x0800a59c

080010f0 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
    }
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_ZN4blib13ChargeControlD1Ev>
 80010fe:	210c      	movs	r1, #12
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f006 f889 	bl	8007218 <_ZdlPvj>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZN4blib13ChargeControl3runEv>:
    void ChargeControl::run()
    {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

    }
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>:
                Singleton()
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
                {
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev+0x1c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	601a      	str	r2, [r3, #0]
                }
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	0800a5ac 	.word	0x0800a5ac

08001144 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>:
                virtual ~Singleton()
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
                }
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev+0x1c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	0800a5ac 	.word	0x0800a5ac

08001164 <_ZN4blib2dp9SingletonINS_13ChargeControlEED0Ev>:
                virtual ~Singleton()
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
                }
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffe9 	bl	8001144 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
 8001172:	2104      	movs	r1, #4
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f006 f84f 	bl	8007218 <_ZdlPvj>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8001194:	f7ff ff6a 	bl	800106c <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 80011aa:	f006 fe3f 	bl	8007e2c <sniprintf>
                print(mBuffer);
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 80011b0:	f7ff ff5c 	bl	800106c <_ZN4blib6Logger5printEPKc>
                print("\n");
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 80011b6:	f7ff ff59 	bl	800106c <_ZN4blib6Logger5printEPKc>
            }
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	08009ff4 	.word	0x08009ff4
 80011c8:	20000384 	.word	0x20000384
 80011cc:	08009ffc 	.word	0x08009ffc

080011d0 <_ZN4blib7MonitorC1Ev>:
#include "Monitor.h"
#include "Button.h"

namespace blib
{
    Monitor::Monitor()
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fb54 	bl	8001888 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>
 80011e0:	4a0c      	ldr	r2, [pc, #48]	; (8001214 <_ZN4blib7MonitorC1Ev+0x44>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	711a      	strb	r2, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	741a      	strb	r2, [r3, #16]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	745a      	strb	r2, [r3, #17]
    {
//        mSettingMode = true;    // TODO: test
        showInit();
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f829 	bl	800125c <_ZN4blib7Monitor8showInitEv>
    }
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800a5bc 	.word	0x0800a5bc

08001218 <_ZN4blib7MonitorD1Ev>:
    Monitor::~Monitor()
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	4a05      	ldr	r2, [pc, #20]	; (8001238 <_ZN4blib7MonitorD1Ev+0x20>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fb3d 	bl	80018a8 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
    {

    }
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	0800a5bc 	.word	0x0800a5bc

0800123c <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    }
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffe7 	bl	8001218 <_ZN4blib7MonitorD1Ev>
 800124a:	2114      	movs	r1, #20
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f005 ffe3 	bl	8007218 <_ZdlPvj>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
        LOGI("MPPT INITIALIZED");
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <_ZN4blib7Monitor8showInitEv+0x28>)
 8001266:	221a      	movs	r2, #26
 8001268:	4907      	ldr	r1, [pc, #28]	; (8001288 <_ZN4blib7Monitor8showInitEv+0x2c>)
 800126a:	4808      	ldr	r0, [pc, #32]	; (800128c <_ZN4blib7Monitor8showInitEv+0x30>)
 800126c:	f7ff ff8a 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("FIRMWARE V1.00");
 8001270:	4b04      	ldr	r3, [pc, #16]	; (8001284 <_ZN4blib7Monitor8showInitEv+0x28>)
 8001272:	221b      	movs	r2, #27
 8001274:	4904      	ldr	r1, [pc, #16]	; (8001288 <_ZN4blib7Monitor8showInitEv+0x2c>)
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <_ZN4blib7Monitor8showInitEv+0x34>)
 8001278:	f7ff ff84 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
//        HAL_Delay(1500);
    }
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0800a000 	.word	0x0800a000
 8001288:	0800a00c 	.word	0x0800a00c
 800128c:	0800a018 	.word	0x0800a018
 8001290:	0800a038 	.word	0x0800a038

08001294 <_ZN4blib7Monitor8showMenuEv>:

    // Show when button pressed
    void Monitor::showMenu()
    {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
        //TODO: need to add check is permission shown

        // Check whether in setting mode or not
        if (getSetttingMode() == true)
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f8b2 	bl	8001406 <_ZNK4blib7Monitor15getSetttingModeEv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <_ZN4blib7Monitor8showMenuEv+0x26>
        {
            showSetting();
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f808 	bl	80012c8 <_ZN4blib7Monitor11showSettingEv>
        }
        else    // Not in setting mode - Display mode
        {
            showDisplay();
        }
    }
 80012b8:	e002      	b.n	80012c0 <_ZN4blib7Monitor8showMenuEv+0x2c>
            showDisplay();
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f85a 	bl	8001374 <_ZN4blib7Monitor11showDisplayEv>
    }
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <_ZN4blib7Monitor11showSettingEv>:

    void Monitor::showSetting()
    {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
        switch (getSettingLevel())
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f8f2 	bl	80014ba <_ZNK4blib7Monitor15getSettingLevelEv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b0a      	cmp	r3, #10
 80012da:	d845      	bhi.n	8001368 <_ZN4blib7Monitor11showSettingEv+0xa0>
 80012dc:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <_ZN4blib7Monitor11showSettingEv+0x1c>)
 80012de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e2:	bf00      	nop
 80012e4:	08001311 	.word	0x08001311
 80012e8:	08001319 	.word	0x08001319
 80012ec:	08001321 	.word	0x08001321
 80012f0:	08001329 	.word	0x08001329
 80012f4:	08001331 	.word	0x08001331
 80012f8:	08001339 	.word	0x08001339
 80012fc:	08001341 	.word	0x08001341
 8001300:	08001349 	.word	0x08001349
 8001304:	08001351 	.word	0x08001351
 8001308:	08001359 	.word	0x08001359
 800130c:	08001361 	.word	0x08001361
        {
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_0:
                showSettingSupplyAlgorithm();
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f9d1 	bl	80016b8 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>
                break;
 8001316:	e028      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_1:
                showSettingChargerPsuMode();
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f9e1 	bl	80016e0 <_ZN4blib7Monitor25showSettingChargerPsuModeEv>
                break;
 800131e:	e024      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_2:
                showSettingMaxBatteryVoltage();
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f9f1 	bl	8001708 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>
                break;
 8001326:	e020      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_3:
                showSettingMinBatteryVoltage();
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 fa01 	bl	8001730 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>
                break;
 800132e:	e01c      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_4:
                showSettingChargingCurrent();
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fa11 	bl	8001758 <_ZN4blib7Monitor26showSettingChargingCurrentEv>
                break;
 8001336:	e018      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_5:
                showSettingCoolingFan();
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 fa21 	bl	8001780 <_ZN4blib7Monitor21showSettingCoolingFanEv>
                break;
 800133e:	e014      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_6:
                showSettingFanTriggerTemp();
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fa33 	bl	80017ac <_ZN4blib7Monitor25showSettingFanTriggerTempEv>
                break;
 8001346:	e010      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_7:
                showSettingShutdownTemp();
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fa45 	bl	80017d8 <_ZN4blib7Monitor23showSettingShutdownTempEv>
                break;
 800134e:	e00c      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_8:
                showSettingAutoLoadFeature();
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 fa57 	bl	8001804 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>
                break;
 8001356:	e008      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_9:
                showSettingBackligthSleep();
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 fa69 	bl	8001830 <_ZN4blib7Monitor25showSettingBackligthSleepEv>
                break;
 800135e:	e004      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_10:
                showSettingFactoryReset();
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fa7b 	bl	800185c <_ZN4blib7Monitor23showSettingFactoryResetEv>
                break;
 8001366:	e000      	b.n	800136a <_ZN4blib7Monitor11showSettingEv+0xa2>
            default:
                break;
 8001368:	bf00      	nop
        }
    }
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop

08001374 <_ZN4blib7Monitor11showDisplayEv>:
    void Monitor::showDisplay()
    {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
        const Monitor::DisplayLevel displayLevel = getDisplayLevel();
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f8bd 	bl	80014fc <_ZNK4blib7Monitor15getDisplayLevelEv>
 8001382:	60f8      	str	r0, [r7, #12]
        switch (displayLevel)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b06      	cmp	r3, #6
 8001388:	d828      	bhi.n	80013dc <_ZN4blib7Monitor11showDisplayEv+0x68>
 800138a:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <_ZN4blib7Monitor11showDisplayEv+0x1c>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013dd 	.word	0x080013dd
 8001394:	080013ad 	.word	0x080013ad
 8001398:	080013b5 	.word	0x080013b5
 800139c:	080013bd 	.word	0x080013bd
 80013a0:	080013c5 	.word	0x080013c5
 80013a4:	080013cd 	.word	0x080013cd
 80013a8:	080013d5 	.word	0x080013d5
        {
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_0:
                // Do not show anything - Maybe show display off
                break;
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_1:
                showDisplayLevel1();
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 f8b1 	bl	8001514 <_ZN4blib7Monitor17showDisplayLevel1Ev>
                break;
 80013b2:	e014      	b.n	80013de <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_2:
                showDisplayLevel2();
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f8c1 	bl	800153c <_ZN4blib7Monitor17showDisplayLevel2Ev>
                break;
 80013ba:	e010      	b.n	80013de <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_3:
                showDisplayLevel3();
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f8d1 	bl	8001564 <_ZN4blib7Monitor17showDisplayLevel3Ev>
                break;
 80013c2:	e00c      	b.n	80013de <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_4:
                showDisplayLevel4();
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f000 f8e1 	bl	800158c <_ZN4blib7Monitor17showDisplayLevel4Ev>
                break;
 80013ca:	e008      	b.n	80013de <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_5:
                showDisplayChooseSettingMode();
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f8f1 	bl	80015b4 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>
                break;
 80013d2:	e004      	b.n	80013de <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_6:
                showDisplayFactoryReset();
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f909 	bl	80015ec <_ZN4blib7Monitor23showDisplayFactoryResetEv>
                break;
 80013da:	e000      	b.n	80013de <_ZN4blib7Monitor11showDisplayEv+0x6a>
            default:
                break;
 80013dc:	bf00      	nop
        }
    }
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop

080013e8 <_ZN4blib7Monitor14setSettingModeEb>:

    void Monitor::setSettingMode(const bool val)
    {
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
        mSettingMode = val;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	78fa      	ldrb	r2, [r7, #3]
 80013f8:	711a      	strb	r2, [r3, #4]
    }
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_ZNK4blib7Monitor15getSetttingModeEv>:
    bool Monitor::getSetttingMode() const
    {
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
        return mSettingMode;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	b2db      	uxtb	r3, r3
    }
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_ZN4blib7Monitor15setFactoryResetEb>:

    void Monitor::setFactoryReset(const bool val)
    {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	70fb      	strb	r3, [r7, #3]
        mFactoryResetEnable = val;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	78fa      	ldrb	r2, [r7, #3]
 8001430:	741a      	strb	r2, [r3, #16]
    }
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_ZNK4blib7Monitor15getFactoryResetEv>:
    bool Monitor::getFactoryReset() const
    {
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
        return mFactoryResetEnable;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7c1b      	ldrb	r3, [r3, #16]
 800144a:	b2db      	uxtb	r3, r3
    }
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_ZN4blib7Monitor22setConfirmFactoryResetEb>:
    void Monitor::setConfirmFactoryReset(const bool val)
    {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
        mConfirmFactoryReset = val;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	78fa      	ldrb	r2, [r7, #3]
 8001468:	745a      	strb	r2, [r3, #17]
    }
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_ZNK4blib7Monitor22getConfirmFactoryResetEv>:
    bool Monitor::getConfirmFactoryReset() const
    {
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
        return mConfirmFactoryReset;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7c5b      	ldrb	r3, [r3, #17]
 8001482:	b2db      	uxtb	r3, r3
    }
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>:

    void Monitor::setSettingLevel(const SettingLevel val)
    {
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
        uint8_t u8SettingLevel = (uint8_t) val;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	73fb      	strb	r3, [r7, #15]

        if (u8SettingLevel < 0)
        {
            u8SettingLevel = 0;
        }
        else if (u8SettingLevel >= (uint8_t) SettingLevel::SETTING_LEVEL_MAX)
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	2b0a      	cmp	r3, #10
 80014a2:	d901      	bls.n	80014a8 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE+0x18>
        {
            u8SettingLevel = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]
        }

        mSettingLevel = (SettingLevel) u8SettingLevel;
 80014a8:	7bfa      	ldrb	r2, [r7, #15]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	609a      	str	r2, [r3, #8]
    }
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <_ZNK4blib7Monitor15getSettingLevelEv>:
    Monitor::SettingLevel Monitor::getSettingLevel() const
    {
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
        return mSettingLevel;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
    }
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE>:

    void Monitor::setDisplayLevel(const DisplayLevel val)
    {
 80014d2:	b480      	push	{r7}
 80014d4:	b085      	sub	sp, #20
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
        uint8_t u8DisplayLevel = (uint8_t) val;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	73fb      	strb	r3, [r7, #15]

        if (u8DisplayLevel < 0)
        {
            u8DisplayLevel = 0;
        }
        else if (u8DisplayLevel >= (uint8_t) DisplayLevel::DISPLAY_LEVEL_MAX)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d901      	bls.n	80014ea <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE+0x18>
        {
            u8DisplayLevel = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	73fb      	strb	r3, [r7, #15]
        }

        mDisplayLevel = (DisplayLevel) u8DisplayLevel;
 80014ea:	7bfa      	ldrb	r2, [r7, #15]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	60da      	str	r2, [r3, #12]
    }
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_ZNK4blib7Monitor15getDisplayLevelEv>:
    Monitor::DisplayLevel Monitor::getDisplayLevel() const
    {
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
        return mDisplayLevel;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
    }
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <_ZN4blib7Monitor17showDisplayLevel1Ev>:

    void Monitor::showDisplayLevel1()
    {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
        LOGI();
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x1c>)
 800151e:	22bb      	movs	r2, #187	; 0xbb
 8001520:	4904      	ldr	r1, [pc, #16]	; (8001534 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x20>)
 8001522:	4805      	ldr	r0, [pc, #20]	; (8001538 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x24>)
 8001524:	f7ff fe2e 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	0800a054 	.word	0x0800a054
 8001534:	0800a00c 	.word	0x0800a00c
 8001538:	0800a068 	.word	0x0800a068

0800153c <_ZN4blib7Monitor17showDisplayLevel2Ev>:
    void Monitor::showDisplayLevel2()
    {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
        LOGI();
 8001544:	4b04      	ldr	r3, [pc, #16]	; (8001558 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x1c>)
 8001546:	22bf      	movs	r2, #191	; 0xbf
 8001548:	4904      	ldr	r1, [pc, #16]	; (800155c <_ZN4blib7Monitor17showDisplayLevel2Ev+0x20>)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x24>)
 800154c:	f7ff fe1a 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0800a078 	.word	0x0800a078
 800155c:	0800a00c 	.word	0x0800a00c
 8001560:	0800a068 	.word	0x0800a068

08001564 <_ZN4blib7Monitor17showDisplayLevel3Ev>:
    void Monitor::showDisplayLevel3()
    {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
        LOGI();
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x1c>)
 800156e:	22c3      	movs	r2, #195	; 0xc3
 8001570:	4904      	ldr	r1, [pc, #16]	; (8001584 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x20>)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x24>)
 8001574:	f7ff fe06 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	0800a08c 	.word	0x0800a08c
 8001584:	0800a00c 	.word	0x0800a00c
 8001588:	0800a068 	.word	0x0800a068

0800158c <_ZN4blib7Monitor17showDisplayLevel4Ev>:
    void Monitor::showDisplayLevel4()
    {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
        LOGI();
 8001594:	4b04      	ldr	r3, [pc, #16]	; (80015a8 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x1c>)
 8001596:	22c7      	movs	r2, #199	; 0xc7
 8001598:	4904      	ldr	r1, [pc, #16]	; (80015ac <_ZN4blib7Monitor17showDisplayLevel4Ev+0x20>)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x24>)
 800159c:	f7ff fdf2 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	0800a0a0 	.word	0x0800a0a0
 80015ac:	0800a00c 	.word	0x0800a00c
 80015b0:	0800a068 	.word	0x0800a068

080015b4 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>:
    void Monitor::showDisplayChooseSettingMode()
    {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
        LOGI("SETTINGS MENU");
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x28>)
 80015be:	22cb      	movs	r2, #203	; 0xcb
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x2c>)
 80015c2:	4808      	ldr	r0, [pc, #32]	; (80015e4 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x30>)
 80015c4:	f7ff fdde 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("--PRESS SELECT--");
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x28>)
 80015ca:	22cc      	movs	r2, #204	; 0xcc
 80015cc:	4904      	ldr	r1, [pc, #16]	; (80015e0 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x2c>)
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x34>)
 80015d0:	f7ff fdd8 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	0800a0b4 	.word	0x0800a0b4
 80015e0:	0800a00c 	.word	0x0800a00c
 80015e4:	0800a0d4 	.word	0x0800a0d4
 80015e8:	0800a0f0 	.word	0x0800a0f0

080015ec <_ZN4blib7Monitor23showDisplayFactoryResetEv>:
    void Monitor::showDisplayFactoryReset()
    {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
        if (getFactoryReset() == false)
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ff22 	bl	800143e <_ZNK4blib7Monitor15getFactoryResetEv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00c      	beq.n	8001624 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x38>
        {
            LOGI("FACTORY RESET");
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 800160c:	22d2      	movs	r2, #210	; 0xd2
 800160e:	4924      	ldr	r1, [pc, #144]	; (80016a0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 8001610:	4824      	ldr	r0, [pc, #144]	; (80016a4 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb8>)
 8001612:	f7ff fdb7 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
            LOGI("--PRESS SELECT--");
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8001618:	22d3      	movs	r2, #211	; 0xd3
 800161a:	4921      	ldr	r1, [pc, #132]	; (80016a0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 800161c:	4822      	ldr	r0, [pc, #136]	; (80016a8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xbc>)
 800161e:	f7ff fdb1 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                // Go to setting mode - show supply algorithm screen
                setSettingMode(true);
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
            }
        }
    }
 8001622:	e037      	b.n	8001694 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xa8>
            if (getConfirmFactoryReset() == false)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff26 	bl	8001476 <_ZNK4blib7Monitor22getConfirmFactoryResetEv>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	bf0c      	ite	eq
 8001630:	2301      	moveq	r3, #1
 8001632:	2300      	movne	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00c      	beq.n	8001654 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x68>
                LOGI("ARE YOU SURE?");
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 800163c:	22d9      	movs	r2, #217	; 0xd9
 800163e:	4918      	ldr	r1, [pc, #96]	; (80016a0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 8001640:	481a      	ldr	r0, [pc, #104]	; (80016ac <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc0>)
 8001642:	f7ff fd9f 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI(" >NO   >YES");
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8001648:	22da      	movs	r2, #218	; 0xda
 800164a:	4915      	ldr	r1, [pc, #84]	; (80016a0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 800164c:	4818      	ldr	r0, [pc, #96]	; (80016b0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc4>)
 800164e:	f7ff fd99 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001652:	e01f      	b.n	8001694 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xa8>
                LOGI("FACTORY RESET");
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8001656:	22de      	movs	r2, #222	; 0xde
 8001658:	4911      	ldr	r1, [pc, #68]	; (80016a0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 800165a:	4812      	ldr	r0, [pc, #72]	; (80016a4 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb8>)
 800165c:	f7ff fd92 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI("SUCCESSFULLY");
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8001662:	22df      	movs	r2, #223	; 0xdf
 8001664:	490e      	ldr	r1, [pc, #56]	; (80016a0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 8001666:	4813      	ldr	r0, [pc, #76]	; (80016b4 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc8>)
 8001668:	f7ff fd8c 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                HAL_Delay(1500);
 800166c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001670:	f001 f8b6 	bl	80027e0 <HAL_Delay>
                setConfirmFactoryReset(false);
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff feee 	bl	8001458 <_ZN4blib7Monitor22setConfirmFactoryResetEb>
                setFactoryReset(false);
 800167c:	2100      	movs	r1, #0
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fece 	bl	8001420 <_ZN4blib7Monitor15setFactoryResetEb>
                setSettingMode(true);
 8001684:	2101      	movs	r1, #1
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff feae 	bl	80013e8 <_ZN4blib7Monitor14setSettingModeEb>
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
 800168c:	2101      	movs	r1, #1
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fefe 	bl	8001490 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>
    }
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	0800a110 	.word	0x0800a110
 80016a0:	0800a00c 	.word	0x0800a00c
 80016a4:	0800a128 	.word	0x0800a128
 80016a8:	0800a0f0 	.word	0x0800a0f0
 80016ac:	0800a144 	.word	0x0800a144
 80016b0:	0800a160 	.word	0x0800a160
 80016b4:	0800a17c 	.word	0x0800a17c

080016b8 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>:
    void Monitor::showSettingSupplyAlgorithm()
    {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
        LOGI();
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x1c>)
 80016c2:	22ee      	movs	r2, #238	; 0xee
 80016c4:	4904      	ldr	r1, [pc, #16]	; (80016d8 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x20>)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x24>)
 80016c8:	f7ff fd5c 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	0800a198 	.word	0x0800a198
 80016d8:	0800a00c 	.word	0x0800a00c
 80016dc:	0800a068 	.word	0x0800a068

080016e0 <_ZN4blib7Monitor25showSettingChargerPsuModeEv>:
    void Monitor::showSettingChargerPsuMode()
    {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
        LOGI();
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x1c>)
 80016ea:	22f2      	movs	r2, #242	; 0xf2
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x20>)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x24>)
 80016f0:	f7ff fd48 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	0800a1b4 	.word	0x0800a1b4
 8001700:	0800a00c 	.word	0x0800a00c
 8001704:	0800a068 	.word	0x0800a068

08001708 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>:
    void Monitor::showSettingMaxBatteryVoltage()
    {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
        LOGI();
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x1c>)
 8001712:	22f6      	movs	r2, #246	; 0xf6
 8001714:	4904      	ldr	r1, [pc, #16]	; (8001728 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x20>)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x24>)
 8001718:	f7ff fd34 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	0800a1d0 	.word	0x0800a1d0
 8001728:	0800a00c 	.word	0x0800a00c
 800172c:	0800a068 	.word	0x0800a068

08001730 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>:
    void Monitor::showSettingMinBatteryVoltage()
    {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
        LOGI();
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x1c>)
 800173a:	22fa      	movs	r2, #250	; 0xfa
 800173c:	4904      	ldr	r1, [pc, #16]	; (8001750 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x20>)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x24>)
 8001740:	f7ff fd20 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	0800a1f0 	.word	0x0800a1f0
 8001750:	0800a00c 	.word	0x0800a00c
 8001754:	0800a068 	.word	0x0800a068

08001758 <_ZN4blib7Monitor26showSettingChargingCurrentEv>:
    void Monitor::showSettingChargingCurrent()
    {
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
        LOGI();
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x1c>)
 8001762:	22fe      	movs	r2, #254	; 0xfe
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x20>)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x24>)
 8001768:	f7ff fd0c 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	0800a210 	.word	0x0800a210
 8001778:	0800a00c 	.word	0x0800a00c
 800177c:	0800a068 	.word	0x0800a068

08001780 <_ZN4blib7Monitor21showSettingCoolingFanEv>:
    void Monitor::showSettingCoolingFan()
    {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
        LOGI();
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x20>)
 800178a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800178e:	4905      	ldr	r1, [pc, #20]	; (80017a4 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x24>)
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x28>)
 8001792:	f7ff fcf7 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	0800a22c 	.word	0x0800a22c
 80017a4:	0800a00c 	.word	0x0800a00c
 80017a8:	0800a068 	.word	0x0800a068

080017ac <_ZN4blib7Monitor25showSettingFanTriggerTempEv>:
    void Monitor::showSettingFanTriggerTemp()
    {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
        LOGI();
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x20>)
 80017b6:	f44f 7283 	mov.w	r2, #262	; 0x106
 80017ba:	4905      	ldr	r1, [pc, #20]	; (80017d0 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x24>)
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x28>)
 80017be:	f7ff fce1 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	0800a244 	.word	0x0800a244
 80017d0:	0800a00c 	.word	0x0800a00c
 80017d4:	0800a068 	.word	0x0800a068

080017d8 <_ZN4blib7Monitor23showSettingShutdownTempEv>:
    void Monitor::showSettingShutdownTemp()
    {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
        LOGI();
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x20>)
 80017e2:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80017e6:	4905      	ldr	r1, [pc, #20]	; (80017fc <_ZN4blib7Monitor23showSettingShutdownTempEv+0x24>)
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x28>)
 80017ea:	f7ff fccb 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800a260 	.word	0x0800a260
 80017fc:	0800a00c 	.word	0x0800a00c
 8001800:	0800a068 	.word	0x0800a068

08001804 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>:
    void Monitor::showSettingAutoLoadFeature()
    {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
        LOGI();
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x20>)
 800180e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001812:	4905      	ldr	r1, [pc, #20]	; (8001828 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x24>)
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x28>)
 8001816:	f7ff fcb5 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	0800a278 	.word	0x0800a278
 8001828:	0800a00c 	.word	0x0800a00c
 800182c:	0800a068 	.word	0x0800a068

08001830 <_ZN4blib7Monitor25showSettingBackligthSleepEv>:
    void Monitor::showSettingBackligthSleep()
    {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
        LOGI();
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x20>)
 800183a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800183e:	4905      	ldr	r1, [pc, #20]	; (8001854 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x24>)
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x28>)
 8001842:	f7ff fc9f 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	0800a294 	.word	0x0800a294
 8001854:	0800a00c 	.word	0x0800a00c
 8001858:	0800a068 	.word	0x0800a068

0800185c <_ZN4blib7Monitor23showSettingFactoryResetEv>:
    void Monitor::showSettingFactoryReset()
    {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
        LOGI();
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <_ZN4blib7Monitor23showSettingFactoryResetEv+0x20>)
 8001866:	f44f 728b 	mov.w	r2, #278	; 0x116
 800186a:	4905      	ldr	r1, [pc, #20]	; (8001880 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x24>)
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x28>)
 800186e:	f7ff fc89 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	0800a2b0 	.word	0x0800a2b0
 8001880:	0800a00c 	.word	0x0800a00c
 8001884:	0800a068 	.word	0x0800a068

08001888 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>:
                Singleton()
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
                {
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev+0x1c>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	601a      	str	r2, [r3, #0]
                }
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	0800a5cc 	.word	0x0800a5cc

080018a8 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>:
                virtual ~Singleton()
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
                }
 80018b0:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev+0x1c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	0800a5cc 	.word	0x0800a5cc

080018c8 <_ZN4blib2dp9SingletonINS_7MonitorEED0Ev>:
                virtual ~Singleton()
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
                }
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ffe9 	bl	80018a8 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
 80018d6:	2104      	movs	r1, #4
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f005 fc9d 	bl	8007218 <_ZdlPvj>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZN4blib13SerialMonitorC1Ev>:
#include "SerialMonitor.h"

namespace blib
{

    SerialMonitor::SerialMonitor()
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f8b8 	bl	8001a68 <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev>
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <_ZN4blib13SerialMonitorC1Ev+0x30>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_1);    // TODO: test
 8001904:	2101      	movs	r1, #1
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f850 	bl	80019ac <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>
    }
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	0800a5dc 	.word	0x0800a5dc

0800191c <_ZN4blib13SerialMonitorD1Ev>:
    SerialMonitor::~SerialMonitor()
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <_ZN4blib13SerialMonitorD1Ev+0x28>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_0);
 800192a:	2100      	movs	r1, #0
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f000 f83d 	bl	80019ac <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>
    SerialMonitor::~SerialMonitor()
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f8a7 	bl	8001a88 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>
    }
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800a5dc 	.word	0x0800a5dc

08001948 <_ZN4blib13SerialMonitorD0Ev>:
    SerialMonitor::~SerialMonitor()
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    }
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ffe3 	bl	800191c <_ZN4blib13SerialMonitorD1Ev>
 8001956:	2108      	movs	r1, #8
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f005 fc5d 	bl	8007218 <_ZdlPvj>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_ZN4blib13SerialMonitor4showEv>:
    void SerialMonitor::show()
    {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
        switch (getSerialLevel())
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f830 	bl	80019d6 <_ZNK4blib13SerialMonitor14getSerialLevelEv>
 8001976:	4603      	mov	r3, r0
 8001978:	2b03      	cmp	r3, #3
 800197a:	d00e      	beq.n	800199a <_ZN4blib13SerialMonitor4showEv+0x32>
 800197c:	2b03      	cmp	r3, #3
 800197e:	dc10      	bgt.n	80019a2 <_ZN4blib13SerialMonitor4showEv+0x3a>
 8001980:	2b01      	cmp	r3, #1
 8001982:	d002      	beq.n	800198a <_ZN4blib13SerialMonitor4showEv+0x22>
 8001984:	2b02      	cmp	r3, #2
 8001986:	d004      	beq.n	8001992 <_ZN4blib13SerialMonitor4showEv+0x2a>
                serialLevel3();
                break;
            case SerialLevel::SERIAL_LEVEL_0:
            case SerialLevel::SERIAL_LEVEL_MAX:
            default:
                break;
 8001988:	e00b      	b.n	80019a2 <_ZN4blib13SerialMonitor4showEv+0x3a>
                serialLevel1();
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f830 	bl	80019f0 <_ZN4blib13SerialMonitor12serialLevel1Ev>
                break;
 8001990:	e008      	b.n	80019a4 <_ZN4blib13SerialMonitor4showEv+0x3c>
                serialLevel2();
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f840 	bl	8001a18 <_ZN4blib13SerialMonitor12serialLevel2Ev>
                break;
 8001998:	e004      	b.n	80019a4 <_ZN4blib13SerialMonitor4showEv+0x3c>
                serialLevel3();
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f850 	bl	8001a40 <_ZN4blib13SerialMonitor12serialLevel3Ev>
                break;
 80019a0:	e000      	b.n	80019a4 <_ZN4blib13SerialMonitor4showEv+0x3c>
                break;
 80019a2:	bf00      	nop
        }
    }
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>:

    void SerialMonitor::setSerialLevel(const SerialLevel val)
    {
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
        uint8_t u8SerialLevel = (uint8_t) val;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	73fb      	strb	r3, [r7, #15]

        if (u8SerialLevel < 0)
        {
            u8SerialLevel = (uint8_t) SerialLevel::SERIAL_LEVEL_MAX - 1;    // Rotate
        }
        else if (u8SerialLevel >= (uint8_t) SerialLevel::SERIAL_LEVEL_MAX)
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d901      	bls.n	80019c4 <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE+0x18>
        {
            u8SerialLevel = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
        }

        mSerialLevel = (SerialLevel) u8SerialLevel;
 80019c4:	7bfa      	ldrb	r2, [r7, #15]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	605a      	str	r2, [r3, #4]
    }
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_ZNK4blib13SerialMonitor14getSerialLevelEv>:
    SerialMonitor::SerialLevel SerialMonitor::getSerialLevel() const
    {
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
        return mSerialLevel;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
    }
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <_ZN4blib13SerialMonitor12serialLevel1Ev>:

    void SerialMonitor::serialLevel1()
    {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
        LOGI(
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <_ZN4blib13SerialMonitor12serialLevel1Ev+0x1c>)
 80019fa:	2242      	movs	r2, #66	; 0x42
 80019fc:	4904      	ldr	r1, [pc, #16]	; (8001a10 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x20>)
 80019fe:	4805      	ldr	r0, [pc, #20]	; (8001a14 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x24>)
 8001a00:	f7ff fbc0 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " ERR:" " FLV:" " BNC:" " IUV:" " IOC:" " OOV:" " OOC:" " OTE:" " REC:" " MPPTA:" " CM:"

                " " " BYP:" " EN:" " FAN:" " WiFi:" " " " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " " " CSMPV:" " CSV:" " VO%Dev:" " SOC:" " T:" " LoopT:");
    }
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	0800a2d4 	.word	0x0800a2d4
 8001a10:	0800a2e4 	.word	0x0800a2e4
 8001a14:	0800a2f8 	.word	0x0800a2f8

08001a18 <_ZN4blib13SerialMonitor12serialLevel2Ev>:
    void SerialMonitor::serialLevel2()
    {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
        LOGI(
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x1c>)
 8001a22:	2249      	movs	r2, #73	; 0x49
 8001a24:	4904      	ldr	r1, [pc, #16]	; (8001a38 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x20>)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <_ZN4blib13SerialMonitor12serialLevel2Ev+0x24>)
 8001a28:	f7ff fbac 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " EN:" " FAN:" " SOC:" " T:" " LoopT:" "");
    }
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	0800a3a4 	.word	0x0800a3a4
 8001a38:	0800a2e4 	.word	0x0800a2e4
 8001a3c:	0800a3b4 	.word	0x0800a3b4

08001a40 <_ZN4blib13SerialMonitor12serialLevel3Ev>:
    void SerialMonitor::serialLevel3()
    {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
        LOGI();
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <_ZN4blib13SerialMonitor12serialLevel3Ev+0x1c>)
 8001a4a:	224e      	movs	r2, #78	; 0x4e
 8001a4c:	4904      	ldr	r1, [pc, #16]	; (8001a60 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x20>)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x24>)
 8001a50:	f7ff fb98 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	0800a404 	.word	0x0800a404
 8001a60:	0800a2e4 	.word	0x0800a2e4
 8001a64:	0800a414 	.word	0x0800a414

08001a68 <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev>:
                Singleton()
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
                {
 8001a70:	4a04      	ldr	r2, [pc, #16]	; (8001a84 <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev+0x1c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]
                }
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	0800a5ec 	.word	0x0800a5ec

08001a88 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>:
                virtual ~Singleton()
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
                }
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev+0x1c>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	0800a5ec 	.word	0x0800a5ec

08001aa8 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED0Ev>:
                virtual ~Singleton()
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
                }
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffe9 	bl	8001a88 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f005 fbad 	bl	8007218 <_ZdlPvj>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 160000U;
 8001ad6:	4b4e      	ldr	r3, [pc, #312]	; (8001c10 <HAL_GPIO_EXTI_Callback+0x148>)
 8001ad8:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_EXTI_Callback+0x1e>
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	bf8c      	ite	hi
 8001aee:	2301      	movhi	r3, #1
 8001af0:	2300      	movls	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f3      	bne.n	8001ae0 <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == BUT_LEFT_Pin)
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d10b      	bne.n	8001b1a <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Left pin");
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001b04:	224f      	movs	r2, #79	; 0x4f
 8001b06:	4944      	ldr	r1, [pc, #272]	; (8001c18 <HAL_GPIO_EXTI_Callback+0x150>)
 8001b08:	4844      	ldr	r0, [pc, #272]	; (8001c1c <HAL_GPIO_EXTI_Callback+0x154>)
 8001b0a:	f7ff fb3b 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::LEFT;
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x158>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_LEFT_GPIO_Port;
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	e032      	b.n	8001b80 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_RIGHT_Pin)
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d10b      	bne.n	8001b38 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Right pin");
 8001b20:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001b22:	2255      	movs	r2, #85	; 0x55
 8001b24:	493c      	ldr	r1, [pc, #240]	; (8001c18 <HAL_GPIO_EXTI_Callback+0x150>)
 8001b26:	4840      	ldr	r0, [pc, #256]	; (8001c28 <HAL_GPIO_EXTI_Callback+0x160>)
 8001b28:	f7ff fb2c 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::RIGHT;
 8001b2c:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x158>)
 8001b2e:	2202      	movs	r2, #2
 8001b30:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_RIGHT_GPIO_Port;
 8001b32:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	e023      	b.n	8001b80 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_BACK_Pin)
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d10b      	bne.n	8001b56 <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001b40:	225b      	movs	r2, #91	; 0x5b
 8001b42:	4935      	ldr	r1, [pc, #212]	; (8001c18 <HAL_GPIO_EXTI_Callback+0x150>)
 8001b44:	4839      	ldr	r0, [pc, #228]	; (8001c2c <HAL_GPIO_EXTI_Callback+0x164>)
 8001b46:	f7ff fb1d 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x158>)
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_BACK_GPIO_Port;
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001b52:	61fb      	str	r3, [r7, #28]
 8001b54:	e014      	b.n	8001b80 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_SELECT_Pin)
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	2b08      	cmp	r3, #8
 8001b5a:	d10b      	bne.n	8001b74 <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 8001b5c:	4b2d      	ldr	r3, [pc, #180]	; (8001c14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001b5e:	2261      	movs	r2, #97	; 0x61
 8001b60:	492d      	ldr	r1, [pc, #180]	; (8001c18 <HAL_GPIO_EXTI_Callback+0x150>)
 8001b62:	4833      	ldr	r0, [pc, #204]	; (8001c30 <HAL_GPIO_EXTI_Callback+0x168>)
 8001b64:	f7ff fb0e 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SELECT;
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x158>)
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_SELECT_GPIO_Port;
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e005      	b.n	8001b80 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 8001b74:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001b76:	2267      	movs	r2, #103	; 0x67
 8001b78:	4927      	ldr	r1, [pc, #156]	; (8001c18 <HAL_GPIO_EXTI_Callback+0x150>)
 8001b7a:	482e      	ldr	r0, [pc, #184]	; (8001c34 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001b7c:	f7ff fb02 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 8001b80:	f000 facc 	bl	800211c <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_GPIO_EXTI_Callback+0x158>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	f005 fa45 	bl	800701c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 8001b92:	f000 fac3 	bl	800211c <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f005 fa59 	bl	8007050 <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01e      	beq.n	8001be2 <HAL_GPIO_EXTI_Callback+0x11a>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 8001ba4:	e002      	b.n	8001bac <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	4619      	mov	r1, r3
 8001bb0:	69f8      	ldr	r0, [r7, #28]
 8001bb2:	f002 ff27 	bl	8004a04 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	69b9      	ldr	r1, [r7, #24]
 8001bc6:	4299      	cmp	r1, r3
 8001bc8:	bf8c      	ite	hi
 8001bca:	2301      	movhi	r3, #1
 8001bcc:	2300      	movls	r3, #0
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf14      	ite	ne
 8001bd8:	2301      	movne	r3, #1
 8001bda:	2300      	moveq	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1e1      	bne.n	8001ba6 <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_EXTI_Callback+0x126>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	bf8c      	ite	hi
 8001bf6:	2301      	movhi	r3, #1
 8001bf8:	2300      	movls	r3, #0
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f3      	bne.n	8001be8 <HAL_GPIO_EXTI_Callback+0x120>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <HAL_GPIO_EXTI_Callback+0x170>)
 8001c02:	88fb      	ldrh	r3, [r7, #6]
 8001c04:	6153      	str	r3, [r2, #20]
}
 8001c06:	bf00      	nop
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	00027100 	.word	0x00027100
 8001c14:	0800a430 	.word	0x0800a430
 8001c18:	0800a448 	.word	0x0800a448
 8001c1c:	0800a454 	.word	0x0800a454
 8001c20:	20000364 	.word	0x20000364
 8001c24:	48000800 	.word	0x48000800
 8001c28:	0800a474 	.word	0x0800a474
 8001c2c:	0800a494 	.word	0x0800a494
 8001c30:	0800a4b4 	.word	0x0800a4b4
 8001c34:	0800a4d4 	.word	0x0800a4d4
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    blib::Analog::getInstance().sampling();
 8001c44:	f000 fa80 	bl	8002148 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f854 	bl	8000cf8 <_ZN4blib6Analog8samplingEv>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001c5e:	f000 fd59 	bl	8002714 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001c62:	f000 f843 	bl	8001cec <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001c66:	f000 f9e1 	bl	800202c <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 8001c6a:	f000 f9c1 	bl	8001ff0 <_ZL11MX_DMA_Initv>
    MX_ADC1_Init();
 8001c6e:	f000 f8ab 	bl	8001dc8 <_ZL12MX_ADC1_Initv>
    MX_I2C1_Init();
 8001c72:	f000 f93b 	bl	8001eec <_ZL12MX_I2C1_Initv>
    MX_USART2_UART_Init();
 8001c76:	f000 f987 	bl	8001f88 <_ZL19MX_USART2_UART_Initv>
    /* USER CODE BEGIN 2 */
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <main+0x80>)
 8001c7c:	22a5      	movs	r2, #165	; 0xa5
 8001c7e:	4917      	ldr	r1, [pc, #92]	; (8001cdc <main+0x84>)
 8001c80:	4817      	ldr	r0, [pc, #92]	; (8001ce0 <main+0x88>)
 8001c82:	f7ff fa7f 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <main+0x80>)
 8001c88:	22a6      	movs	r2, #166	; 0xa6
 8001c8a:	4914      	ldr	r1, [pc, #80]	; (8001cdc <main+0x84>)
 8001c8c:	4815      	ldr	r0, [pc, #84]	; (8001ce4 <main+0x8c>)
 8001c8e:	f7ff fa79 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <main+0x80>)
 8001c94:	22a7      	movs	r2, #167	; 0xa7
 8001c96:	4911      	ldr	r1, [pc, #68]	; (8001cdc <main+0x84>)
 8001c98:	4813      	ldr	r0, [pc, #76]	; (8001ce8 <main+0x90>)
 8001c9a:	f7ff fa73 	bl	8001184 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

    auto &analog = blib::Analog::getInstance();
 8001c9e:	f000 fa53 	bl	8002148 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001ca2:	60f8      	str	r0, [r7, #12]
    auto &monitor = blib::Monitor::getInstance();
 8001ca4:	f000 fa66 	bl	8002174 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 8001ca8:	60b8      	str	r0, [r7, #8]
    auto &chargeCtrl = blib::ChargeControl::getInstance();
 8001caa:	f000 fa79 	bl	80021a0 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8001cae:	6078      	str	r0, [r7, #4]
    auto &serialMnt = blib::SerialMonitor::getInstance();
 8001cb0:	f000 fa8c 	bl	80021cc <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv>
 8001cb4:	6038      	str	r0, [r7, #0]
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        analog.readAnalog();
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff f82e 	bl	8000d18 <_ZN4blib6Analog10readAnalogEv>
        chargeCtrl.run();
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fa27 	bl	8001110 <_ZN4blib13ChargeControl3runEv>
        serialMnt.show();
 8001cc2:	6838      	ldr	r0, [r7, #0]
 8001cc4:	f7ff fe50 	bl	8001968 <_ZN4blib13SerialMonitor4showEv>
        monitor.showMenu();
 8001cc8:	68b8      	ldr	r0, [r7, #8]
 8001cca:	f7ff fae3 	bl	8001294 <_ZN4blib7Monitor8showMenuEv>
        HAL_Delay(1000);
 8001cce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cd2:	f000 fd85 	bl	80027e0 <HAL_Delay>
        analog.readAnalog();
 8001cd6:	e7ee      	b.n	8001cb6 <main+0x5e>
 8001cd8:	0800a4f8 	.word	0x0800a4f8
 8001cdc:	0800a448 	.word	0x0800a448
 8001ce0:	0800a500 	.word	0x0800a500
 8001ce4:	0800a52c 	.word	0x0800a52c
 8001ce8:	0800a548 	.word	0x0800a548

08001cec <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0a6      	sub	sp, #152	; 0x98
 8001cf0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cf2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001cf6:	2228      	movs	r2, #40	; 0x28
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 f90d 	bl	8007f1a <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001d00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2258      	movs	r2, #88	; 0x58
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f006 f8ff 	bl	8007f1a <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d20:	2301      	movs	r3, #1
 8001d22:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d24:	2310      	movs	r3, #16
 8001d26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d44:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f002 ffc9 	bl	8004ce0 <HAL_RCC_OscConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <_Z18SystemClock_Configv+0x76>
    {
        Error_Handler();
 8001d5e:	f000 f9d7 	bl	8002110 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001d62:	230f      	movs	r3, #15
 8001d64:	65fb      	str	r3, [r7, #92]	; 0x5c
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d66:	2302      	movs	r3, #2
 8001d68:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d72:	2300      	movs	r3, #0
 8001d74:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f004 f803 	bl	8005d88 <HAL_RCC_ClockConfig>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <_Z18SystemClock_Configv+0xaa>
    {
        Error_Handler();
 8001d92:	f000 f9bd 	bl	8002110 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 8001d96:	2322      	movs	r3, #34	; 0x22
 8001d98:	607b      	str	r3, [r7, #4]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fa25 	bl	80061f4 <HAL_RCCEx_PeriphCLKConfig>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf14      	ite	ne
 8001db0:	2301      	movne	r3, #1
 8001db2:	2300      	moveq	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <_Z18SystemClock_Configv+0xd2>
    {
        Error_Handler();
 8001dba:	f000 f9a9 	bl	8002110 <Error_Handler>
    }
}
 8001dbe:	bf00      	nop
 8001dc0:	3798      	adds	r7, #152	; 0x98
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = { 0 };
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8001dea:	4b3f      	ldr	r3, [pc, #252]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001dec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001df0:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001df4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001df8:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001e06:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	765a      	strb	r2, [r3, #25]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e14:	4b34      	ldr	r3, [pc, #208]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e1a:	4b33      	ldr	r3, [pc, #204]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 2;
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e2c:	4b2e      	ldr	r3, [pc, #184]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e36:	2204      	movs	r2, #4
 8001e38:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e3a:	4b2b      	ldr	r3, [pc, #172]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	761a      	strb	r2, [r3, #24]
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e46:	4828      	ldr	r0, [pc, #160]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e48:	f000 fd0c 	bl	8002864 <HAL_ADC_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <_ZL12MX_ADC1_Initv+0x98>
    {
        Error_Handler();
 8001e5c:	f000 f958 	bl	8002110 <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	4619      	mov	r1, r3
 8001e6a:	481f      	ldr	r0, [pc, #124]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001e6c:	f001 fe6a 	bl	8003b44 <HAL_ADCEx_MultiModeConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <_ZL12MX_ADC1_Initv+0xbc>
    {
        Error_Handler();
 8001e80:	f000 f946 	bl	8002110 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001e90:	2307      	movs	r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4811      	ldr	r0, [pc, #68]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001ea2:	f001 fb65 	bl	8003570 <HAL_ADC_ConfigChannel>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	bf14      	ite	ne
 8001eac:	2301      	movne	r3, #1
 8001eae:	2300      	moveq	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <_ZL12MX_ADC1_Initv+0xf2>
    {
        Error_Handler();
 8001eb6:	f000 f92b 	bl	8002110 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_2;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4808      	ldr	r0, [pc, #32]	; (8001ee8 <_ZL12MX_ADC1_Initv+0x120>)
 8001ec8:	f001 fb52 	bl	8003570 <HAL_ADC_ConfigChannel>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf14      	ite	ne
 8001ed2:	2301      	movne	r3, #1
 8001ed4:	2300      	moveq	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <_ZL12MX_ADC1_Initv+0x118>
    {
        Error_Handler();
 8001edc:	f000 f918 	bl	8002110 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	; 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	200001f4 	.word	0x200001f4

08001eec <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001ef2:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <_ZL12MX_I2C1_Initv+0x94>)
 8001ef4:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x2000090E;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001ef8:	4a22      	ldr	r2, [pc, #136]	; (8001f84 <_ZL12MX_I2C1_Initv+0x98>)
 8001efa:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b1b      	ldr	r3, [pc, #108]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f26:	4815      	ldr	r0, [pc, #84]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f28:	f002 fdb4 	bl	8004a94 <HAL_I2C_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <_ZL12MX_I2C1_Initv+0x54>
    {
        Error_Handler();
 8001f3c:	f000 f8e8 	bl	8002110 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f40:	2100      	movs	r1, #0
 8001f42:	480e      	ldr	r0, [pc, #56]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f44:	f002 fe35 	bl	8004bb2 <HAL_I2CEx_ConfigAnalogFilter>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	bf14      	ite	ne
 8001f4e:	2301      	movne	r3, #1
 8001f50:	2300      	moveq	r3, #0
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <_ZL12MX_I2C1_Initv+0x70>
    {
        Error_Handler();
 8001f58:	f000 f8da 	bl	8002110 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <_ZL12MX_I2C1_Initv+0x90>)
 8001f60:	f002 fe72 	bl	8004c48 <HAL_I2CEx_ConfigDigitalFilter>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <_ZL12MX_I2C1_Initv+0x8c>
    {
        Error_Handler();
 8001f74:	f000 f8cc 	bl	8002110 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000288 	.word	0x20000288
 8001f80:	40005400 	.word	0x40005400
 8001f84:	2000090e 	.word	0x2000090e

08001f88 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f8e:	4a17      	ldr	r2, [pc, #92]	; (8001fec <_ZL19MX_USART2_UART_Initv+0x64>)
 8001f90:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fca:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001fcc:	f004 fb30 	bl	8006630 <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <_ZL19MX_USART2_UART_Initv+0x5c>
    {
        Error_Handler();
 8001fe0:	f000 f896 	bl	8002110 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200002dc 	.word	0x200002dc
 8001fec:	40004400 	.word	0x40004400

08001ff0 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001ff6:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <_ZL11MX_DMA_Initv+0x38>)
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <_ZL11MX_DMA_Initv+0x38>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6153      	str	r3, [r2, #20]
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <_ZL11MX_DMA_Initv+0x38>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	200b      	movs	r0, #11
 8002014:	f002 f949 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002018:	200b      	movs	r0, #11
 800201a:	f002 f962 	bl	80042e2 <HAL_NVIC_EnableIRQ>

}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000

0800202c <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4a30      	ldr	r2, [pc, #192]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 8002048:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800204c:	6153      	str	r3, [r2, #20]
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205a:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4a2a      	ldr	r2, [pc, #168]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	6153      	str	r3, [r2, #20]
 8002066:	4b28      	ldr	r3, [pc, #160]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b25      	ldr	r3, [pc, #148]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	4a24      	ldr	r2, [pc, #144]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6153      	str	r3, [r2, #20]
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <_ZL12MX_GPIO_Initv+0xdc>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_INDICATOR_GPIO_Port, LED_INDICATOR_Pin, GPIO_PIN_RESET);
 800208a:	2200      	movs	r2, #0
 800208c:	2120      	movs	r1, #32
 800208e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002092:	f002 fccf 	bl	8004a34 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_BACK_Pin BUT_SELECT_Pin */
    GPIO_InitStruct.Pin = BUT_LEFT_Pin | BUT_RIGHT_Pin | BUT_BACK_Pin | BUT_SELECT_Pin;
 8002096:	230f      	movs	r3, #15
 8002098:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800209a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800209e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	4619      	mov	r1, r3
 80020aa:	4818      	ldr	r0, [pc, #96]	; (800210c <_ZL12MX_GPIO_Initv+0xe0>)
 80020ac:	f002 fb20 	bl	80046f0 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED_INDICATOR_Pin */
    GPIO_InitStruct.Pin = LED_INDICATOR_Pin;
 80020b0:	2320      	movs	r3, #32
 80020b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020bc:	2300      	movs	r3, #0
 80020be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ca:	f002 fb11 	bl	80046f0 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2006      	movs	r0, #6
 80020d4:	f002 f8e9 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020d8:	2006      	movs	r0, #6
 80020da:	f002 f902 	bl	80042e2 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	2007      	movs	r0, #7
 80020e4:	f002 f8e1 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80020e8:	2007      	movs	r0, #7
 80020ea:	f002 f8fa 	bl	80042e2 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	2009      	movs	r0, #9
 80020f4:	f002 f8d9 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80020f8:	2009      	movs	r0, #9
 80020fa:	f002 f8f2 	bl	80042e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	48000800 	.word	0x48000800

08002110 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002114:	b672      	cpsid	i
}
 8002116:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002118:	e7fe      	b.n	8002118 <Error_Handler+0x8>
	...

0800211c <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 800211c:	b598      	push	{r3, r4, r7, lr}
 800211e:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d109      	bne.n	800213c <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002128:	2008      	movs	r0, #8
 800212a:	f005 f877 	bl	800721c <_Znwj>
 800212e:	4603      	mov	r3, r0
 8002130:	461c      	mov	r4, r3
 8002132:	4620      	mov	r0, r4
 8002134:	f004 ff3e 	bl	8006fb4 <_ZN4blib6ButtonC1Ev>
 8002138:	4b02      	ldr	r3, [pc, #8]	; (8002144 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 800213a:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 800213c:	4b01      	ldr	r3, [pc, #4]	; (8002144 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 800213e:	681b      	ldr	r3, [r3, #0]
                }
 8002140:	4618      	mov	r0, r3
 8002142:	bd98      	pop	{r3, r4, r7, pc}
 8002144:	2000036c 	.word	0x2000036c

08002148 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 8002148:	b598      	push	{r3, r4, r7, lr}
 800214a:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002154:	2034      	movs	r0, #52	; 0x34
 8002156:	f005 f861 	bl	800721c <_Znwj>
 800215a:	4603      	mov	r3, r0
 800215c:	461c      	mov	r4, r3
 800215e:	4620      	mov	r0, r4
 8002160:	f7fe fd7a 	bl	8000c58 <_ZN4blib6AnalogC1Ev>
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8002166:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002168:	4b01      	ldr	r3, [pc, #4]	; (8002170 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 800216a:	681b      	ldr	r3, [r3, #0]
                }
 800216c:	4618      	mov	r0, r3
 800216e:	bd98      	pop	{r3, r4, r7, pc}
 8002170:	20000370 	.word	0x20000370

08002174 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>:
                static T& getInstance()
 8002174:	b598      	push	{r3, r4, r7, lr}
 8002176:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002180:	2014      	movs	r0, #20
 8002182:	f005 f84b 	bl	800721c <_Znwj>
 8002186:	4603      	mov	r3, r0
 8002188:	461c      	mov	r4, r3
 800218a:	4620      	mov	r0, r4
 800218c:	f7ff f820 	bl	80011d0 <_ZN4blib7MonitorC1Ev>
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8002192:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002194:	4b01      	ldr	r3, [pc, #4]	; (800219c <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8002196:	681b      	ldr	r3, [r3, #0]
                }
 8002198:	4618      	mov	r0, r3
 800219a:	bd98      	pop	{r3, r4, r7, pc}
 800219c:	20000368 	.word	0x20000368

080021a0 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 80021a0:	b598      	push	{r3, r4, r7, lr}
 80021a2:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x20>
                        mInstance = new T();
 80021ac:	200c      	movs	r0, #12
 80021ae:	f005 f835 	bl	800721c <_Znwj>
 80021b2:	4603      	mov	r3, r0
 80021b4:	461c      	mov	r4, r3
 80021b6:	4620      	mov	r0, r4
 80021b8:	f7fe ff70 	bl	800109c <_ZN4blib13ChargeControlC1Ev>
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 80021be:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80021c0:	4b01      	ldr	r3, [pc, #4]	; (80021c8 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 80021c2:	681b      	ldr	r3, [r3, #0]
                }
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd98      	pop	{r3, r4, r7, pc}
 80021c8:	20000374 	.word	0x20000374

080021cc <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv>:
                static T& getInstance()
 80021cc:	b598      	push	{r3, r4, r7, lr}
 80021ce:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 80021d8:	2008      	movs	r0, #8
 80021da:	f005 f81f 	bl	800721c <_Znwj>
 80021de:	4603      	mov	r3, r0
 80021e0:	461c      	mov	r4, r3
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7ff fb80 	bl	80018e8 <_ZN4blib13SerialMonitorC1Ev>
 80021e8:	4b02      	ldr	r3, [pc, #8]	; (80021f4 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 80021ea:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80021ec:	4b01      	ldr	r3, [pc, #4]	; (80021f4 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 80021ee:	681b      	ldr	r3, [r3, #0]
                }
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd98      	pop	{r3, r4, r7, pc}
 80021f4:	20000378 	.word	0x20000378

080021f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <HAL_MspInit+0x44>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	4a0e      	ldr	r2, [pc, #56]	; (800223c <HAL_MspInit+0x44>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6193      	str	r3, [r2, #24]
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_MspInit+0x44>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_MspInit+0x44>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_MspInit+0x44>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_MspInit+0x44>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000

08002240 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002260:	d154      	bne.n	800230c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_ADC_MspInit+0xd4>)
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4a2b      	ldr	r2, [pc, #172]	; (8002314 <HAL_ADC_MspInit+0xd4>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226c:	6153      	str	r3, [r2, #20]
 800226e:	4b29      	ldr	r3, [pc, #164]	; (8002314 <HAL_ADC_MspInit+0xd4>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	613b      	str	r3, [r7, #16]
 8002278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_ADC_MspInit+0xd4>)
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	4a25      	ldr	r2, [pc, #148]	; (8002314 <HAL_ADC_MspInit+0xd4>)
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	6153      	str	r3, [r2, #20]
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_ADC_MspInit+0xd4>)
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002292:	2303      	movs	r3, #3
 8002294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002296:	2303      	movs	r3, #3
 8002298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0314 	add.w	r3, r7, #20
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a8:	f002 fa22 	bl	80046f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022ae:	4a1b      	ldr	r2, [pc, #108]	; (800231c <HAL_ADC_MspInit+0xdc>)
 80022b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022c0:	2280      	movs	r2, #128	; 0x80
 80022c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022d4:	4b10      	ldr	r3, [pc, #64]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022d6:	2220      	movs	r2, #32
 80022d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022e0:	480d      	ldr	r0, [pc, #52]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022e2:	f002 f818 	bl	8004316 <HAL_DMA_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80022ec:	f7ff ff10 	bl	8002110 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_ADC_MspInit+0xd8>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2012      	movs	r0, #18
 8002302:	f001 ffd2 	bl	80042aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002306:	2012      	movs	r0, #18
 8002308:	f001 ffeb 	bl	80042e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800230c:	bf00      	nop
 800230e:	3728      	adds	r7, #40	; 0x28
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	20000244 	.word	0x20000244
 800231c:	40020008 	.word	0x40020008

08002320 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <HAL_I2C_MspInit+0xb8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d145      	bne.n	80023ce <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002342:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 8002348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234c:	6153      	str	r3, [r2, #20]
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4a1f      	ldr	r2, [pc, #124]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 8002360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002364:	6153      	str	r3, [r2, #20]
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002378:	2312      	movs	r3, #18
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002384:	2304      	movs	r3, #4
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002392:	f002 f9ad 	bl	80046f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800239a:	2312      	movs	r3, #18
 800239c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023a6:	2304      	movs	r3, #4
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023aa:	f107 0314 	add.w	r3, r7, #20
 80023ae:	4619      	mov	r1, r3
 80023b0:	480b      	ldr	r0, [pc, #44]	; (80023e0 <HAL_I2C_MspInit+0xc0>)
 80023b2:	f002 f99d 	bl	80046f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 80023bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_I2C_MspInit+0xbc>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023ce:	bf00      	nop
 80023d0:	3728      	adds	r7, #40	; 0x28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40005400 	.word	0x40005400
 80023dc:	40021000 	.word	0x40021000
 80023e0:	48000400 	.word	0x48000400

080023e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a17      	ldr	r2, [pc, #92]	; (8002460 <HAL_UART_MspInit+0x7c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d128      	bne.n	8002458 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_UART_MspInit+0x80>)
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	4a16      	ldr	r2, [pc, #88]	; (8002464 <HAL_UART_MspInit+0x80>)
 800240c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002410:	61d3      	str	r3, [r2, #28]
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_UART_MspInit+0x80>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_UART_MspInit+0x80>)
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <HAL_UART_MspInit+0x80>)
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	6153      	str	r3, [r2, #20]
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_UART_MspInit+0x80>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002436:	230c      	movs	r3, #12
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002446:	2307      	movs	r3, #7
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244a:	f107 0314 	add.w	r3, r7, #20
 800244e:	4619      	mov	r1, r3
 8002450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002454:	f002 f94c 	bl	80046f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40004400 	.word	0x40004400
 8002464:	40021000 	.word	0x40021000

08002468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800246c:	e7fe      	b.n	800246c <NMI_Handler+0x4>

0800246e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002472:	e7fe      	b.n	8002472 <HardFault_Handler+0x4>

08002474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002478:	e7fe      	b.n	8002478 <MemManage_Handler+0x4>

0800247a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800247e:	e7fe      	b.n	800247e <BusFault_Handler+0x4>

08002480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <UsageFault_Handler+0x4>

08002486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b4:	f000 f974 	bl	80027a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_LEFT_Pin);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f002 facf 	bl	8004a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}

080024ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_RIGHT_Pin);
 80024ce:	2002      	movs	r0, #2
 80024d0:	f002 fac8 	bl	8004a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SELECT_Pin);
 80024dc:	2008      	movs	r0, #8
 80024de:	f002 fac1 	bl	8004a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <DMA1_Channel1_IRQHandler+0x10>)
 80024ee:	f001 fff1 	bl	80044d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000244 	.word	0x20000244

080024fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <ADC1_2_IRQHandler+0x10>)
 8002502:	f000 fd27 	bl	8002f54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200001f4 	.word	0x200001f4

08002510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return 1;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_kill>:

int _kill(int pid, int sig)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800252a:	f005 fd9d 	bl	8008068 <__errno>
 800252e:	4603      	mov	r3, r0
 8002530:	2216      	movs	r2, #22
 8002532:	601a      	str	r2, [r3, #0]
  return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_exit>:

void _exit (int status)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002548:	f04f 31ff 	mov.w	r1, #4294967295
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ffe7 	bl	8002520 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002552:	e7fe      	b.n	8002552 <_exit+0x12>

08002554 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e00a      	b.n	800257c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002566:	f3af 8000 	nop.w
 800256a:	4601      	mov	r1, r0
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	b2ca      	uxtb	r2, r1
 8002574:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	dbf0      	blt.n	8002566 <_read+0x12>
  }

  return len;
 8002584:	687b      	ldr	r3, [r7, #4]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e009      	b.n	80025b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	60ba      	str	r2, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf1      	blt.n	80025a0 <_write+0x12>
  }
  return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_close>:

int _close(int file)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ee:	605a      	str	r2, [r3, #4]
  return 0;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_isatty>:

int _isatty(int file)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <_sbrk+0x5c>)
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <_sbrk+0x60>)
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <_sbrk+0x64>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <_sbrk+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002660:	f005 fd02 	bl	8008068 <__errno>
 8002664:	4603      	mov	r3, r0
 8002666:	220c      	movs	r2, #12
 8002668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e009      	b.n	8002684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <_sbrk+0x64>)
 8002680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002682:	68fb      	ldr	r3, [r7, #12]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20010000 	.word	0x20010000
 8002690:	00000400 	.word	0x00000400
 8002694:	2000037c 	.word	0x2000037c
 8002698:	200008d8 	.word	0x200008d8

0800269c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <SystemInit+0x20>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <SystemInit+0x20>)
 80026a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026c4:	f7ff ffea 	bl	800269c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c8:	480c      	ldr	r0, [pc, #48]	; (80026fc <LoopForever+0x6>)
  ldr r1, =_edata
 80026ca:	490d      	ldr	r1, [pc, #52]	; (8002700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <LoopForever+0xe>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026e0:	4c0a      	ldr	r4, [pc, #40]	; (800270c <LoopForever+0x16>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ee:	f005 fcc1 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026f2:	f7ff fab1 	bl	8001c58 <main>

080026f6 <LoopForever>:

LoopForever:
    b LoopForever
 80026f6:	e7fe      	b.n	80026f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002704:	0800a9c4 	.word	0x0800a9c4
  ldr r2, =_sbss
 8002708:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800270c:	200008d4 	.word	0x200008d4

08002710 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC3_IRQHandler>
	...

08002714 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002718:	4b08      	ldr	r3, [pc, #32]	; (800273c <HAL_Init+0x28>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a07      	ldr	r2, [pc, #28]	; (800273c <HAL_Init+0x28>)
 800271e:	f043 0310 	orr.w	r3, r3, #16
 8002722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002724:	2003      	movs	r0, #3
 8002726:	f001 fdb5 	bl	8004294 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800272a:	200f      	movs	r0, #15
 800272c:	f000 f808 	bl	8002740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002730:	f7ff fd62 	bl	80021f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40022000 	.word	0x40022000

08002740 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_InitTick+0x54>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_InitTick+0x58>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	4619      	mov	r1, r3
 8002752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002756:	fbb3 f3f1 	udiv	r3, r3, r1
 800275a:	fbb2 f3f3 	udiv	r3, r2, r3
 800275e:	4618      	mov	r0, r3
 8002760:	f001 fdcd 	bl	80042fe <HAL_SYSTICK_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e00e      	b.n	800278c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b0f      	cmp	r3, #15
 8002772:	d80a      	bhi.n	800278a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002774:	2200      	movs	r2, #0
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f001 fd95 	bl	80042aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_InitTick+0x5c>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000000 	.word	0x20000000
 8002798:	20000008 	.word	0x20000008
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b06      	ldr	r3, [pc, #24]	; (80027c0 <HAL_IncTick+0x20>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_IncTick+0x24>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <HAL_IncTick+0x24>)
 80027b2:	6013      	str	r3, [r2, #0]
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000008 	.word	0x20000008
 80027c4:	20000380 	.word	0x20000380

080027c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_GetTick+0x14>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000380 	.word	0x20000380

080027e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027e8:	f7ff ffee 	bl	80027c8 <HAL_GetTick>
 80027ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d005      	beq.n	8002806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_Delay+0x44>)
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	461a      	mov	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002806:	bf00      	nop
 8002808:	f7ff ffde 	bl	80027c8 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	429a      	cmp	r2, r3
 8002816:	d8f7      	bhi.n	8002808 <HAL_Delay+0x28>
  {
  }
}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000008 	.word	0x20000008

08002828 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b09a      	sub	sp, #104	; 0x68
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e1e3      	b.n	8002c4c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d176      	bne.n	8002984 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d152      	bne.n	8002944 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fcc1 	bl	8002240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d13b      	bne.n	8002944 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f001 faf5 	bl	8003ebc <ADC_Disable>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d12f      	bne.n	8002944 <HAL_ADC_Init+0xe0>
 80028e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d12b      	bne.n	8002944 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028f4:	f023 0302 	bic.w	r3, r3, #2
 80028f8:	f043 0202 	orr.w	r2, r3, #2
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800290e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800291e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002920:	4b92      	ldr	r3, [pc, #584]	; (8002b6c <HAL_ADC_Init+0x308>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a92      	ldr	r2, [pc, #584]	; (8002b70 <HAL_ADC_Init+0x30c>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0c9a      	lsrs	r2, r3, #18
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002936:	e002      	b.n	800293e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	3b01      	subs	r3, #1
 800293c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f9      	bne.n	8002938 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800295c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002960:	d110      	bne.n	8002984 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f023 0312 	bic.w	r3, r3, #18
 800296a:	f043 0210 	orr.w	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	f040 8150 	bne.w	8002c32 <HAL_ADC_Init+0x3ce>
 8002992:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 814b 	bne.w	8002c32 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f040 8143 	bne.w	8002c32 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029b4:	f043 0202 	orr.w	r2, r3, #2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_Init+0x16c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a6a      	ldr	r2, [pc, #424]	; (8002b74 <HAL_ADC_Init+0x310>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_ADC_Init+0x170>
 80029d0:	4b69      	ldr	r3, [pc, #420]	; (8002b78 <HAL_ADC_Init+0x314>)
 80029d2:	e000      	b.n	80029d6 <HAL_ADC_Init+0x172>
 80029d4:	4b69      	ldr	r3, [pc, #420]	; (8002b7c <HAL_ADC_Init+0x318>)
 80029d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e0:	d102      	bne.n	80029e8 <HAL_ADC_Init+0x184>
 80029e2:	4b64      	ldr	r3, [pc, #400]	; (8002b74 <HAL_ADC_Init+0x310>)
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	e01a      	b.n	8002a1e <HAL_ADC_Init+0x1ba>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a61      	ldr	r2, [pc, #388]	; (8002b74 <HAL_ADC_Init+0x310>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d103      	bne.n	80029fa <HAL_ADC_Init+0x196>
 80029f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e011      	b.n	8002a1e <HAL_ADC_Init+0x1ba>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a60      	ldr	r2, [pc, #384]	; (8002b80 <HAL_ADC_Init+0x31c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d102      	bne.n	8002a0a <HAL_ADC_Init+0x1a6>
 8002a04:	4b5f      	ldr	r3, [pc, #380]	; (8002b84 <HAL_ADC_Init+0x320>)
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e009      	b.n	8002a1e <HAL_ADC_Init+0x1ba>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a5d      	ldr	r2, [pc, #372]	; (8002b84 <HAL_ADC_Init+0x320>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d102      	bne.n	8002a1a <HAL_ADC_Init+0x1b6>
 8002a14:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <HAL_ADC_Init+0x31c>)
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e001      	b.n	8002a1e <HAL_ADC_Init+0x1ba>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d108      	bne.n	8002a3e <HAL_ADC_Init+0x1da>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_Init+0x1da>
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_ADC_Init+0x1dc>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d11c      	bne.n	8002a7e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a44:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d010      	beq.n	8002a6c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d107      	bne.n	8002a66 <HAL_ADC_Init+0x202>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Init+0x202>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <HAL_ADC_Init+0x204>
 8002a66:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d108      	bne.n	8002a7e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002a6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a7c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7e5b      	ldrb	r3, [r3, #25]
 8002a82:	035b      	lsls	r3, r3, #13
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a88:	2a01      	cmp	r2, #1
 8002a8a:	d002      	beq.n	8002a92 <HAL_ADC_Init+0x22e>
 8002a8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a90:	e000      	b.n	8002a94 <HAL_ADC_Init+0x230>
 8002a92:	2200      	movs	r2, #0
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d11b      	bne.n	8002aea <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7e5b      	ldrb	r3, [r3, #25]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	045a      	lsls	r2, r3, #17
 8002ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aca:	663b      	str	r3, [r7, #96]	; 0x60
 8002acc:	e00d      	b.n	8002aea <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ad6:	f043 0220 	orr.w	r2, r3, #32
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d054      	beq.n	8002b9c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <HAL_ADC_Init+0x31c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d004      	beq.n	8002b06 <HAL_ADC_Init+0x2a2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_ADC_Init+0x320>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d140      	bne.n	8002b88 <HAL_ADC_Init+0x324>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002b0e:	d02a      	beq.n	8002b66 <HAL_ADC_Init+0x302>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b18:	d022      	beq.n	8002b60 <HAL_ADC_Init+0x2fc>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002b22:	d01a      	beq.n	8002b5a <HAL_ADC_Init+0x2f6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b28:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8002b2c:	d012      	beq.n	8002b54 <HAL_ADC_Init+0x2f0>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b32:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002b36:	d00a      	beq.n	8002b4e <HAL_ADC_Init+0x2ea>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002b40:	d002      	beq.n	8002b48 <HAL_ADC_Init+0x2e4>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	e023      	b.n	8002b90 <HAL_ADC_Init+0x32c>
 8002b48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b4c:	e020      	b.n	8002b90 <HAL_ADC_Init+0x32c>
 8002b4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b52:	e01d      	b.n	8002b90 <HAL_ADC_Init+0x32c>
 8002b54:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b58:	e01a      	b.n	8002b90 <HAL_ADC_Init+0x32c>
 8002b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b5e:	e017      	b.n	8002b90 <HAL_ADC_Init+0x32c>
 8002b60:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002b64:	e014      	b.n	8002b90 <HAL_ADC_Init+0x32c>
 8002b66:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002b6a:	e011      	b.n	8002b90 <HAL_ADC_Init+0x32c>
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	431bde83 	.word	0x431bde83
 8002b74:	50000100 	.word	0x50000100
 8002b78:	50000300 	.word	0x50000300
 8002b7c:	50000700 	.word	0x50000700
 8002b80:	50000400 	.word	0x50000400
 8002b84:	50000500 	.word	0x50000500
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b94:	4313      	orrs	r3, r2
 8002b96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d114      	bne.n	8002bd4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb8:	f023 0302 	bic.w	r3, r3, #2
 8002bbc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7e1b      	ldrb	r3, [r3, #24]
 8002bc2:	039a      	lsls	r2, r3, #14
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <HAL_ADC_Init+0x3f0>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002be4:	430b      	orrs	r3, r1
 8002be6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d10c      	bne.n	8002c0a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f023 010f 	bic.w	r1, r3, #15
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	1e5a      	subs	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
 8002c08:	e007      	b.n	8002c1a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 020f 	bic.w	r2, r2, #15
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f023 0303 	bic.w	r3, r3, #3
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c30:	e00a      	b.n	8002c48 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f023 0312 	bic.w	r3, r3, #18
 8002c3a:	f043 0210 	orr.w	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002c42:	2301      	movs	r3, #1
 8002c44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002c48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3768      	adds	r7, #104	; 0x68
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fff0c007 	.word	0xfff0c007

08002c58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 80f7 	bne.w	8002e66 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_ADC_Start_DMA+0x2e>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e0f2      	b.n	8002e6c <HAL_ADC_Start_DMA+0x214>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c96:	d004      	beq.n	8002ca2 <HAL_ADC_Start_DMA+0x4a>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a75      	ldr	r2, [pc, #468]	; (8002e74 <HAL_ADC_Start_DMA+0x21c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d109      	bne.n	8002cb6 <HAL_ADC_Start_DMA+0x5e>
 8002ca2:	4b75      	ldr	r3, [pc, #468]	; (8002e78 <HAL_ADC_Start_DMA+0x220>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	e008      	b.n	8002cc8 <HAL_ADC_Start_DMA+0x70>
 8002cb6:	4b71      	ldr	r3, [pc, #452]	; (8002e7c <HAL_ADC_Start_DMA+0x224>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 031f 	and.w	r3, r3, #31
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf0c      	ite	eq
 8002cc2:	2301      	moveq	r3, #1
 8002cc4:	2300      	movne	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80c5 	beq.w	8002e58 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f001 f890 	bl	8003df4 <ADC_Enable>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002cd8:	7dfb      	ldrb	r3, [r7, #23]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f040 80b7 	bne.w	8002e4e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cfc:	d004      	beq.n	8002d08 <HAL_ADC_Start_DMA+0xb0>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a5c      	ldr	r2, [pc, #368]	; (8002e74 <HAL_ADC_Start_DMA+0x21c>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d106      	bne.n	8002d16 <HAL_ADC_Start_DMA+0xbe>
 8002d08:	4b5b      	ldr	r3, [pc, #364]	; (8002e78 <HAL_ADC_Start_DMA+0x220>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_ADC_Start_DMA+0xde>
 8002d14:	e005      	b.n	8002d22 <HAL_ADC_Start_DMA+0xca>
 8002d16:	4b59      	ldr	r3, [pc, #356]	; (8002e7c <HAL_ADC_Start_DMA+0x224>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_ADC_Start_DMA+0xde>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d2a:	d004      	beq.n	8002d36 <HAL_ADC_Start_DMA+0xde>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a53      	ldr	r2, [pc, #332]	; (8002e80 <HAL_ADC_Start_DMA+0x228>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d115      	bne.n	8002d62 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d036      	beq.n	8002dbe <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002d60:	e02d      	b.n	8002dbe <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d76:	d004      	beq.n	8002d82 <HAL_ADC_Start_DMA+0x12a>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a3d      	ldr	r2, [pc, #244]	; (8002e74 <HAL_ADC_Start_DMA+0x21c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_Start_DMA+0x140>
 8002d82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e008      	b.n	8002daa <HAL_ADC_Start_DMA+0x152>
 8002d98:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <HAL_ADC_Start_DMA+0x228>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf14      	ite	ne
 8002da4:	2301      	movne	r3, #1
 8002da6:	2300      	moveq	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002db6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dca:	d106      	bne.n	8002dda <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f023 0206 	bic.w	r2, r3, #6
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
 8002dd8:	e002      	b.n	8002de0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	4a25      	ldr	r2, [pc, #148]	; (8002e84 <HAL_ADC_Start_DMA+0x22c>)
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	4a24      	ldr	r2, [pc, #144]	; (8002e88 <HAL_ADC_Start_DMA+0x230>)
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	4a23      	ldr	r2, [pc, #140]	; (8002e8c <HAL_ADC_Start_DMA+0x234>)
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	221c      	movs	r2, #28
 8002e06:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0210 	orr.w	r2, r2, #16
 8002e16:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3340      	adds	r3, #64	; 0x40
 8002e32:	4619      	mov	r1, r3
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f001 fab4 	bl	80043a4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0204 	orr.w	r2, r2, #4
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	e00d      	b.n	8002e6a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e56:	e008      	b.n	8002e6a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e64:	e001      	b.n	8002e6a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	50000100 	.word	0x50000100
 8002e78:	50000300 	.word	0x50000300
 8002e7c:	50000700 	.word	0x50000700
 8002e80:	50000400 	.word	0x50000400
 8002e84:	08003d29 	.word	0x08003d29
 8002e88:	08003da3 	.word	0x08003da3
 8002e8c:	08003dbf 	.word	0x08003dbf

08002e90 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_Stop_DMA+0x1a>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e050      	b.n	8002f4c <HAL_ADC_Stop_DMA+0xbc>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002eb2:	216c      	movs	r1, #108	; 0x6c
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f001 f867 	bl	8003f88 <ADC_ConversionStop>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d13e      	bne.n	8002f42 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0201 	bic.w	r2, r2, #1
 8002ed2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d10f      	bne.n	8002f00 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 fabc 	bl	8004462 <HAL_DMA_Abort>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d005      	beq.n	8002f00 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0210 	bic.w	r2, r2, #16
 8002f0e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 ffd0 	bl	8003ebc <ADC_Disable>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e002      	b.n	8002f28 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 ffca 	bl	8003ebc <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	f043 0201 	orr.w	r2, r3, #1
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <HAL_ADC_IRQHandler+0x38>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10b      	bne.n	8002fa4 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 80bc 	beq.w	8003110 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80b6 	beq.w	8003110 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc4:	d004      	beq.n	8002fd0 <HAL_ADC_IRQHandler+0x7c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a90      	ldr	r2, [pc, #576]	; (800320c <HAL_ADC_IRQHandler+0x2b8>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d106      	bne.n	8002fde <HAL_ADC_IRQHandler+0x8a>
 8002fd0:	4b8f      	ldr	r3, [pc, #572]	; (8003210 <HAL_ADC_IRQHandler+0x2bc>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d03e      	beq.n	800305a <HAL_ADC_IRQHandler+0x106>
 8002fdc:	e005      	b.n	8002fea <HAL_ADC_IRQHandler+0x96>
 8002fde:	4b8d      	ldr	r3, [pc, #564]	; (8003214 <HAL_ADC_IRQHandler+0x2c0>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d037      	beq.n	800305a <HAL_ADC_IRQHandler+0x106>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ff2:	d004      	beq.n	8002ffe <HAL_ADC_IRQHandler+0xaa>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a84      	ldr	r2, [pc, #528]	; (800320c <HAL_ADC_IRQHandler+0x2b8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d106      	bne.n	800300c <HAL_ADC_IRQHandler+0xb8>
 8002ffe:	4b84      	ldr	r3, [pc, #528]	; (8003210 <HAL_ADC_IRQHandler+0x2bc>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2b05      	cmp	r3, #5
 8003008:	d027      	beq.n	800305a <HAL_ADC_IRQHandler+0x106>
 800300a:	e005      	b.n	8003018 <HAL_ADC_IRQHandler+0xc4>
 800300c:	4b81      	ldr	r3, [pc, #516]	; (8003214 <HAL_ADC_IRQHandler+0x2c0>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	2b05      	cmp	r3, #5
 8003016:	d020      	beq.n	800305a <HAL_ADC_IRQHandler+0x106>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003020:	d004      	beq.n	800302c <HAL_ADC_IRQHandler+0xd8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a79      	ldr	r2, [pc, #484]	; (800320c <HAL_ADC_IRQHandler+0x2b8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d106      	bne.n	800303a <HAL_ADC_IRQHandler+0xe6>
 800302c:	4b78      	ldr	r3, [pc, #480]	; (8003210 <HAL_ADC_IRQHandler+0x2bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2b09      	cmp	r3, #9
 8003036:	d010      	beq.n	800305a <HAL_ADC_IRQHandler+0x106>
 8003038:	e005      	b.n	8003046 <HAL_ADC_IRQHandler+0xf2>
 800303a:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_ADC_IRQHandler+0x2c0>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2b09      	cmp	r3, #9
 8003044:	d009      	beq.n	800305a <HAL_ADC_IRQHandler+0x106>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800304e:	d004      	beq.n	800305a <HAL_ADC_IRQHandler+0x106>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a70      	ldr	r2, [pc, #448]	; (8003218 <HAL_ADC_IRQHandler+0x2c4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d104      	bne.n	8003064 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e00f      	b.n	8003084 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306c:	d004      	beq.n	8003078 <HAL_ADC_IRQHandler+0x124>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a66      	ldr	r2, [pc, #408]	; (800320c <HAL_ADC_IRQHandler+0x2b8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d102      	bne.n	800307e <HAL_ADC_IRQHandler+0x12a>
 8003078:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800307c:	e000      	b.n	8003080 <HAL_ADC_IRQHandler+0x12c>
 800307e:	4b66      	ldr	r3, [pc, #408]	; (8003218 <HAL_ADC_IRQHandler+0x2c4>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800308e:	2b00      	cmp	r3, #0
 8003090:	d137      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003098:	2b00      	cmp	r3, #0
 800309a:	d132      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d02d      	beq.n	8003102 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11a      	bne.n	80030ea <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 020c 	bic.w	r2, r2, #12
 80030c2:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d112      	bne.n	8003102 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	f043 0201 	orr.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	641a      	str	r2, [r3, #64]	; 0x40
 80030e8:	e00b      	b.n	8003102 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f043 0210 	orr.w	r2, r3, #16
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fe fd9a 	bl	8001c3c <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	220c      	movs	r2, #12
 800310e:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_ADC_IRQHandler+0x1d0>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10b      	bne.n	800313c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 8138 	beq.w	80033a0 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8132 	beq.w	80033a0 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003150:	d004      	beq.n	800315c <HAL_ADC_IRQHandler+0x208>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a2d      	ldr	r2, [pc, #180]	; (800320c <HAL_ADC_IRQHandler+0x2b8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d106      	bne.n	800316a <HAL_ADC_IRQHandler+0x216>
 800315c:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <HAL_ADC_IRQHandler+0x2bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	2b00      	cmp	r3, #0
 8003166:	d03e      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x292>
 8003168:	e005      	b.n	8003176 <HAL_ADC_IRQHandler+0x222>
 800316a:	4b2a      	ldr	r3, [pc, #168]	; (8003214 <HAL_ADC_IRQHandler+0x2c0>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	2b00      	cmp	r3, #0
 8003174:	d037      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x292>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317e:	d004      	beq.n	800318a <HAL_ADC_IRQHandler+0x236>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a21      	ldr	r2, [pc, #132]	; (800320c <HAL_ADC_IRQHandler+0x2b8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d106      	bne.n	8003198 <HAL_ADC_IRQHandler+0x244>
 800318a:	4b21      	ldr	r3, [pc, #132]	; (8003210 <HAL_ADC_IRQHandler+0x2bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 031f 	and.w	r3, r3, #31
 8003192:	2b05      	cmp	r3, #5
 8003194:	d027      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x292>
 8003196:	e005      	b.n	80031a4 <HAL_ADC_IRQHandler+0x250>
 8003198:	4b1e      	ldr	r3, [pc, #120]	; (8003214 <HAL_ADC_IRQHandler+0x2c0>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2b05      	cmp	r3, #5
 80031a2:	d020      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x292>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ac:	d004      	beq.n	80031b8 <HAL_ADC_IRQHandler+0x264>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a16      	ldr	r2, [pc, #88]	; (800320c <HAL_ADC_IRQHandler+0x2b8>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d106      	bne.n	80031c6 <HAL_ADC_IRQHandler+0x272>
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_ADC_IRQHandler+0x2bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	2b09      	cmp	r3, #9
 80031c2:	d010      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x292>
 80031c4:	e005      	b.n	80031d2 <HAL_ADC_IRQHandler+0x27e>
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_ADC_IRQHandler+0x2c0>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2b09      	cmp	r3, #9
 80031d0:	d009      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x292>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031da:	d004      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x292>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a0d      	ldr	r2, [pc, #52]	; (8003218 <HAL_ADC_IRQHandler+0x2c4>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d104      	bne.n	80031f0 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	e018      	b.n	8003222 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f8:	d004      	beq.n	8003204 <HAL_ADC_IRQHandler+0x2b0>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a03      	ldr	r2, [pc, #12]	; (800320c <HAL_ADC_IRQHandler+0x2b8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10b      	bne.n	800321c <HAL_ADC_IRQHandler+0x2c8>
 8003204:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003208:	e009      	b.n	800321e <HAL_ADC_IRQHandler+0x2ca>
 800320a:	bf00      	nop
 800320c:	50000100 	.word	0x50000100
 8003210:	50000300 	.word	0x50000300
 8003214:	50000700 	.word	0x50000700
 8003218:	50000400 	.word	0x50000400
 800321c:	4b92      	ldr	r3, [pc, #584]	; (8003468 <HAL_ADC_IRQHandler+0x514>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003228:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 80b0 	bne.w	8003392 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003246:	2b00      	cmp	r3, #0
 8003248:	f040 80a3 	bne.w	8003392 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003252:	2b00      	cmp	r3, #0
 8003254:	f040 809d 	bne.w	8003392 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8097 	beq.w	8003392 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800326c:	d004      	beq.n	8003278 <HAL_ADC_IRQHandler+0x324>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a7e      	ldr	r2, [pc, #504]	; (800346c <HAL_ADC_IRQHandler+0x518>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d106      	bne.n	8003286 <HAL_ADC_IRQHandler+0x332>
 8003278:	4b7d      	ldr	r3, [pc, #500]	; (8003470 <HAL_ADC_IRQHandler+0x51c>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2b00      	cmp	r3, #0
 8003282:	d03e      	beq.n	8003302 <HAL_ADC_IRQHandler+0x3ae>
 8003284:	e005      	b.n	8003292 <HAL_ADC_IRQHandler+0x33e>
 8003286:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_ADC_IRQHandler+0x520>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2b00      	cmp	r3, #0
 8003290:	d037      	beq.n	8003302 <HAL_ADC_IRQHandler+0x3ae>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329a:	d004      	beq.n	80032a6 <HAL_ADC_IRQHandler+0x352>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a72      	ldr	r2, [pc, #456]	; (800346c <HAL_ADC_IRQHandler+0x518>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d106      	bne.n	80032b4 <HAL_ADC_IRQHandler+0x360>
 80032a6:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_ADC_IRQHandler+0x51c>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d027      	beq.n	8003302 <HAL_ADC_IRQHandler+0x3ae>
 80032b2:	e005      	b.n	80032c0 <HAL_ADC_IRQHandler+0x36c>
 80032b4:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <HAL_ADC_IRQHandler+0x520>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	2b06      	cmp	r3, #6
 80032be:	d020      	beq.n	8003302 <HAL_ADC_IRQHandler+0x3ae>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c8:	d004      	beq.n	80032d4 <HAL_ADC_IRQHandler+0x380>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a67      	ldr	r2, [pc, #412]	; (800346c <HAL_ADC_IRQHandler+0x518>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d106      	bne.n	80032e2 <HAL_ADC_IRQHandler+0x38e>
 80032d4:	4b66      	ldr	r3, [pc, #408]	; (8003470 <HAL_ADC_IRQHandler+0x51c>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2b07      	cmp	r3, #7
 80032de:	d010      	beq.n	8003302 <HAL_ADC_IRQHandler+0x3ae>
 80032e0:	e005      	b.n	80032ee <HAL_ADC_IRQHandler+0x39a>
 80032e2:	4b64      	ldr	r3, [pc, #400]	; (8003474 <HAL_ADC_IRQHandler+0x520>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	2b07      	cmp	r3, #7
 80032ec:	d009      	beq.n	8003302 <HAL_ADC_IRQHandler+0x3ae>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f6:	d004      	beq.n	8003302 <HAL_ADC_IRQHandler+0x3ae>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a5a      	ldr	r2, [pc, #360]	; (8003468 <HAL_ADC_IRQHandler+0x514>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d104      	bne.n	800330c <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	e00f      	b.n	800332c <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003314:	d004      	beq.n	8003320 <HAL_ADC_IRQHandler+0x3cc>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a54      	ldr	r2, [pc, #336]	; (800346c <HAL_ADC_IRQHandler+0x518>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d102      	bne.n	8003326 <HAL_ADC_IRQHandler+0x3d2>
 8003320:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003324:	e000      	b.n	8003328 <HAL_ADC_IRQHandler+0x3d4>
 8003326:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_ADC_IRQHandler+0x514>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d12d      	bne.n	8003392 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0308 	and.w	r3, r3, #8
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11a      	bne.n	800337a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003352:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d112      	bne.n	8003392 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	f043 0201 	orr.w	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	641a      	str	r2, [r3, #64]	; 0x40
 8003378:	e00b      	b.n	8003392 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f043 0210 	orr.w	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	f043 0201 	orr.w	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f8c4 	bl	8003520 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2260      	movs	r2, #96	; 0x60
 800339e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d011      	beq.n	80033ce <HAL_ADC_IRQHandler+0x47a>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00c      	beq.n	80033ce <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fa3b 	bl	800283c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2280      	movs	r2, #128	; 0x80
 80033cc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d012      	beq.n	80033fe <HAL_ADC_IRQHandler+0x4aa>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8aa 	bl	8003548 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033fc:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_ADC_IRQHandler+0x4da>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f89c 	bl	800355c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	d04f      	beq.n	80034d8 <HAL_ADC_IRQHandler+0x584>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d04a      	beq.n	80034d8 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003446:	2b01      	cmp	r3, #1
 8003448:	d102      	bne.n	8003450 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800344a:	2301      	movs	r3, #1
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	e02d      	b.n	80034ac <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003458:	d004      	beq.n	8003464 <HAL_ADC_IRQHandler+0x510>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a03      	ldr	r2, [pc, #12]	; (800346c <HAL_ADC_IRQHandler+0x518>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d109      	bne.n	8003478 <HAL_ADC_IRQHandler+0x524>
 8003464:	4b02      	ldr	r3, [pc, #8]	; (8003470 <HAL_ADC_IRQHandler+0x51c>)
 8003466:	e008      	b.n	800347a <HAL_ADC_IRQHandler+0x526>
 8003468:	50000400 	.word	0x50000400
 800346c:	50000100 	.word	0x50000100
 8003470:	50000300 	.word	0x50000300
 8003474:	50000700 	.word	0x50000700
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <HAL_ADC_IRQHandler+0x5c8>)
 800347a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10a      	bne.n	80034ac <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003496:	2301      	movs	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
 800349a:	e007      	b.n	80034ac <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80034a8:	2301      	movs	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10e      	bne.n	80034d0 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7ff f9c0 	bl	8002850 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2210      	movs	r2, #16
 80034d6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d018      	beq.n	8003514 <HAL_ADC_IRQHandler+0x5c0>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f043 0208 	orr.w	r2, r3, #8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f810 	bl	8003534 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8003514:	bf00      	nop
 8003516:	3720      	adds	r7, #32
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	50000700 	.word	0x50000700

08003520 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b09b      	sub	sp, #108	; 0x6c
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x22>
 800358e:	2302      	movs	r3, #2
 8003590:	e2c8      	b.n	8003b24 <HAL_ADC_ConfigChannel+0x5b4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f040 82ac 	bne.w	8003b02 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d81c      	bhi.n	80035ec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	461a      	mov	r2, r3
 80035c6:	231f      	movs	r3, #31
 80035c8:	4093      	lsls	r3, r2
 80035ca:	43db      	mvns	r3, r3
 80035cc:	4019      	ands	r1, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	4413      	add	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	fa00 f203 	lsl.w	r2, r0, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	631a      	str	r2, [r3, #48]	; 0x30
 80035ea:	e063      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b09      	cmp	r3, #9
 80035f2:	d81e      	bhi.n	8003632 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	3b1e      	subs	r3, #30
 8003608:	221f      	movs	r2, #31
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	4019      	ands	r1, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	3b1e      	subs	r3, #30
 8003624:	fa00 f203 	lsl.w	r2, r0, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	635a      	str	r2, [r3, #52]	; 0x34
 8003630:	e040      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b0e      	cmp	r3, #14
 8003638:	d81e      	bhi.n	8003678 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	3b3c      	subs	r3, #60	; 0x3c
 800364e:	221f      	movs	r2, #31
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	4019      	ands	r1, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	3b3c      	subs	r3, #60	; 0x3c
 800366a:	fa00 f203 	lsl.w	r2, r0, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
 8003676:	e01d      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	3b5a      	subs	r3, #90	; 0x5a
 800368c:	221f      	movs	r2, #31
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	4019      	ands	r1, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	3b5a      	subs	r3, #90	; 0x5a
 80036a8:	fa00 f203 	lsl.w	r2, r0, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f040 80e5 	bne.w	800388e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b09      	cmp	r3, #9
 80036ca:	d91c      	bls.n	8003706 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6999      	ldr	r1, [r3, #24]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	3b1e      	subs	r3, #30
 80036de:	2207      	movs	r2, #7
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	4019      	ands	r1, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	6898      	ldr	r0, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	4413      	add	r3, r2
 80036f6:	3b1e      	subs	r3, #30
 80036f8:	fa00 f203 	lsl.w	r2, r0, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	619a      	str	r2, [r3, #24]
 8003704:	e019      	b.n	800373a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6959      	ldr	r1, [r3, #20]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	2207      	movs	r2, #7
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	4019      	ands	r1, r3
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6898      	ldr	r0, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	fa00 f203 	lsl.w	r2, r0, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	08db      	lsrs	r3, r3, #3
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	3b01      	subs	r3, #1
 8003758:	2b03      	cmp	r3, #3
 800375a:	d84f      	bhi.n	80037fc <HAL_ADC_ConfigChannel+0x28c>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_ADC_ConfigChannel+0x1f4>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003775 	.word	0x08003775
 8003768:	08003797 	.word	0x08003797
 800376c:	080037b9 	.word	0x080037b9
 8003770:	080037db 	.word	0x080037db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800377a:	4b99      	ldr	r3, [pc, #612]	; (80039e0 <HAL_ADC_ConfigChannel+0x470>)
 800377c:	4013      	ands	r3, r2
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	6812      	ldr	r2, [r2, #0]
 8003782:	0691      	lsls	r1, r2, #26
 8003784:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003786:	430a      	orrs	r2, r1
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003792:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003794:	e07b      	b.n	800388e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800379c:	4b90      	ldr	r3, [pc, #576]	; (80039e0 <HAL_ADC_ConfigChannel+0x470>)
 800379e:	4013      	ands	r3, r2
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	0691      	lsls	r1, r2, #26
 80037a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037a8:	430a      	orrs	r2, r1
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037b4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037b6:	e06a      	b.n	800388e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037be:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_ADC_ConfigChannel+0x470>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	6812      	ldr	r2, [r2, #0]
 80037c6:	0691      	lsls	r1, r2, #26
 80037c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ca:	430a      	orrs	r2, r1
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037d6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037d8:	e059      	b.n	800388e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037e0:	4b7f      	ldr	r3, [pc, #508]	; (80039e0 <HAL_ADC_ConfigChannel+0x470>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	6812      	ldr	r2, [r2, #0]
 80037e8:	0691      	lsls	r1, r2, #26
 80037ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037ec:	430a      	orrs	r2, r1
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037f8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80037fa:	e048      	b.n	800388e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	069b      	lsls	r3, r3, #26
 800380c:	429a      	cmp	r2, r3
 800380e:	d107      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800381e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003826:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	069b      	lsls	r3, r3, #26
 8003830:	429a      	cmp	r2, r3
 8003832:	d107      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003842:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800384a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	069b      	lsls	r3, r3, #26
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003866:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	069b      	lsls	r3, r3, #26
 8003878:	429a      	cmp	r2, r3
 800387a:	d107      	bne.n	800388c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800388a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800388c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b01      	cmp	r3, #1
 800389a:	d108      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x33e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x33e>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_ADC_ConfigChannel+0x340>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f040 8131 	bne.w	8003b18 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d00f      	beq.n	80038de <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2201      	movs	r2, #1
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43da      	mvns	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	400a      	ands	r2, r1
 80038d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80038dc:	e049      	b.n	8003972 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2201      	movs	r2, #1
 80038ec:	409a      	lsls	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b09      	cmp	r3, #9
 80038fe:	d91c      	bls.n	800393a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6999      	ldr	r1, [r3, #24]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	3b1b      	subs	r3, #27
 8003912:	2207      	movs	r2, #7
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	43db      	mvns	r3, r3
 800391a:	4019      	ands	r1, r3
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6898      	ldr	r0, [r3, #8]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	3b1b      	subs	r3, #27
 800392c:	fa00 f203 	lsl.w	r2, r0, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	619a      	str	r2, [r3, #24]
 8003938:	e01b      	b.n	8003972 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6959      	ldr	r1, [r3, #20]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	2207      	movs	r2, #7
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	4019      	ands	r1, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6898      	ldr	r0, [r3, #8]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	fa00 f203 	lsl.w	r2, r0, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800397a:	d004      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x416>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <HAL_ADC_ConfigChannel+0x474>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x41a>
 8003986:	4b18      	ldr	r3, [pc, #96]	; (80039e8 <HAL_ADC_ConfigChannel+0x478>)
 8003988:	e000      	b.n	800398c <HAL_ADC_ConfigChannel+0x41c>
 800398a:	4b18      	ldr	r3, [pc, #96]	; (80039ec <HAL_ADC_ConfigChannel+0x47c>)
 800398c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b10      	cmp	r3, #16
 8003994:	d105      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d015      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80039a6:	2b11      	cmp	r3, #17
 80039a8:	d105      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00b      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80039ba:	2b12      	cmp	r3, #18
 80039bc:	f040 80ac 	bne.w	8003b18 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80039c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f040 80a5 	bne.w	8003b18 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039d6:	d10b      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x480>
 80039d8:	4b02      	ldr	r3, [pc, #8]	; (80039e4 <HAL_ADC_ConfigChannel+0x474>)
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e023      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x4b6>
 80039de:	bf00      	nop
 80039e0:	83fff000 	.word	0x83fff000
 80039e4:	50000100 	.word	0x50000100
 80039e8:	50000300 	.word	0x50000300
 80039ec:	50000700 	.word	0x50000700
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a4e      	ldr	r2, [pc, #312]	; (8003b30 <HAL_ADC_ConfigChannel+0x5c0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d103      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x492>
 80039fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e011      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x4b6>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a4b      	ldr	r2, [pc, #300]	; (8003b34 <HAL_ADC_ConfigChannel+0x5c4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d102      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x4a2>
 8003a0c:	4b4a      	ldr	r3, [pc, #296]	; (8003b38 <HAL_ADC_ConfigChannel+0x5c8>)
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	e009      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x4b6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a48      	ldr	r2, [pc, #288]	; (8003b38 <HAL_ADC_ConfigChannel+0x5c8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d102      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x4b2>
 8003a1c:	4b45      	ldr	r3, [pc, #276]	; (8003b34 <HAL_ADC_ConfigChannel+0x5c4>)
 8003a1e:	60fb      	str	r3, [r7, #12]
 8003a20:	e001      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x4b6>
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d108      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x4d6>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x4d6>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x4d8>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d150      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a4c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x4fe>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x4fe>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x500>
 8003a6e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d13c      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d11d      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x548>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a84:	d118      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a90:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_ADC_ConfigChannel+0x5cc>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2a      	ldr	r2, [pc, #168]	; (8003b40 <HAL_ADC_ConfigChannel+0x5d0>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	0c9a      	lsrs	r2, r3, #18
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aa8:	e002      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f9      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ab6:	e02e      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b11      	cmp	r3, #17
 8003abe:	d10b      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x568>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac8:	d106      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ad4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ad6:	e01e      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b12      	cmp	r3, #18
 8003ade:	d11a      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003aec:	e013      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f043 0220 	orr.w	r2, r3, #32
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b00:	e00a      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003b14:	e000      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b16:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003b20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	376c      	adds	r7, #108	; 0x6c
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	50000100 	.word	0x50000100
 8003b34:	50000400 	.word	0x50000400
 8003b38:	50000500 	.word	0x50000500
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	431bde83 	.word	0x431bde83

08003b44 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b099      	sub	sp, #100	; 0x64
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b5c:	d102      	bne.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003b5e:	4b6d      	ldr	r3, [pc, #436]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	e01a      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d103      	bne.n	8003b76 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003b6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	e011      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a67      	ldr	r2, [pc, #412]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d102      	bne.n	8003b86 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b80:	4b66      	ldr	r3, [pc, #408]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	e009      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a64      	ldr	r2, [pc, #400]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d102      	bne.n	8003b96 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b90:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	e001      	b.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0b0      	b.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e0a9      	b.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f040 808d 	bne.w	8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f040 8086 	bne.w	8003ce4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be0:	d004      	beq.n	8003bec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a4b      	ldr	r2, [pc, #300]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003bec:	4b4c      	ldr	r3, [pc, #304]	; (8003d20 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003bee:	e000      	b.n	8003bf2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003bf0:	4b4c      	ldr	r3, [pc, #304]	; (8003d24 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003bf2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d040      	beq.n	8003c7e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c0e:	035b      	lsls	r3, r3, #13
 8003c10:	430b      	orrs	r3, r1
 8003c12:	431a      	orrs	r2, r3
 8003c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c16:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d108      	bne.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d15c      	bne.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003c5a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d14b      	bne.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	6811      	ldr	r1, [r2, #0]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	6892      	ldr	r2, [r2, #8]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	431a      	orrs	r2, r3
 8003c78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c7a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c7c:	e03c      	b.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c88:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d108      	bne.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d123      	bne.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d107      	bne.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003ccc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d112      	bne.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003cda:	f023 030f 	bic.w	r3, r3, #15
 8003cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ce0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ce2:	e009      	b.n	8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	f043 0220 	orr.w	r2, r3, #32
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003cf6:	e000      	b.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003d02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003d06:	4618      	mov	r0, r3
 8003d08:	3764      	adds	r7, #100	; 0x64
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	50000100 	.word	0x50000100
 8003d18:	50000400 	.word	0x50000400
 8003d1c:	50000500 	.word	0x50000500
 8003d20:	50000300 	.word	0x50000300
 8003d24:	50000700 	.word	0x50000700

08003d28 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d126      	bne.n	8003d90 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d115      	bne.n	8003d88 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d111      	bne.n	8003d88 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f043 0201 	orr.w	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f7fd ff57 	bl	8001c3c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003d8e:	e004      	b.n	8003d9a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b084      	sub	sp, #16
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f7fe fd39 	bl	8002828 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ddc:	f043 0204 	orr.w	r2, r3, #4
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f7fe fd33 	bl	8002850 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d108      	bne.n	8003e20 <ADC_Enable+0x2c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <ADC_Enable+0x2c>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <ADC_Enable+0x2e>
 8003e20:	2300      	movs	r3, #0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d143      	bne.n	8003eae <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4b22      	ldr	r3, [pc, #136]	; (8003eb8 <ADC_Enable+0xc4>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f043 0210 	orr.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e02f      	b.n	8003eb0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003e60:	f7fe fcb2 	bl	80027c8 <HAL_GetTick>
 8003e64:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e66:	e01b      	b.n	8003ea0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e68:	f7fe fcae 	bl	80027c8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d914      	bls.n	8003ea0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d00d      	beq.n	8003ea0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f043 0210 	orr.w	r2, r3, #16
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e94:	f043 0201 	orr.w	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d1dc      	bne.n	8003e68 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	8000003f 	.word	0x8000003f

08003ebc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d108      	bne.n	8003ee8 <ADC_Disable+0x2c>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d101      	bne.n	8003ee8 <ADC_Disable+0x2c>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <ADC_Disable+0x2e>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d047      	beq.n	8003f7e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030d 	and.w	r3, r3, #13
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d10f      	bne.n	8003f1c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0202 	orr.w	r2, r2, #2
 8003f0a:	609a      	str	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2203      	movs	r2, #3
 8003f12:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003f14:	f7fe fc58 	bl	80027c8 <HAL_GetTick>
 8003f18:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f1a:	e029      	b.n	8003f70 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f043 0210 	orr.w	r2, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e023      	b.n	8003f80 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f38:	f7fe fc46 	bl	80027c8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d914      	bls.n	8003f70 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d10d      	bne.n	8003f70 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	f043 0210 	orr.w	r2, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e007      	b.n	8003f80 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d0dc      	beq.n	8003f38 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 030c 	and.w	r3, r3, #12
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 809b 	beq.w	80040e4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fbc:	d12a      	bne.n	8004014 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d126      	bne.n	8004014 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d122      	bne.n	8004014 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003fce:	230c      	movs	r3, #12
 8003fd0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003fd2:	e014      	b.n	8003ffe <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4a46      	ldr	r2, [pc, #280]	; (80040f0 <ADC_ConversionStop+0x168>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d90d      	bls.n	8003ff8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f043 0210 	orr.w	r2, r3, #16
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	f043 0201 	orr.w	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e076      	b.n	80040e6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d1e3      	bne.n	8003fd4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2240      	movs	r2, #64	; 0x40
 8004012:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b60      	cmp	r3, #96	; 0x60
 8004018:	d015      	beq.n	8004046 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d10e      	bne.n	8004046 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004032:	2b00      	cmp	r3, #0
 8004034:	d107      	bne.n	8004046 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0210 	orr.w	r2, r2, #16
 8004044:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d015      	beq.n	8004078 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b08      	cmp	r3, #8
 8004058:	d10e      	bne.n	8004078 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8004064:	2b00      	cmp	r3, #0
 8004066:	d107      	bne.n	8004078 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0220 	orr.w	r2, r2, #32
 8004076:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b60      	cmp	r3, #96	; 0x60
 800407c:	d005      	beq.n	800408a <ADC_ConversionStop+0x102>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2b6c      	cmp	r3, #108	; 0x6c
 8004082:	d105      	bne.n	8004090 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004084:	230c      	movs	r3, #12
 8004086:	617b      	str	r3, [r7, #20]
        break;
 8004088:	e005      	b.n	8004096 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800408a:	2308      	movs	r3, #8
 800408c:	617b      	str	r3, [r7, #20]
        break;
 800408e:	e002      	b.n	8004096 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004090:	2304      	movs	r3, #4
 8004092:	617b      	str	r3, [r7, #20]
        break;
 8004094:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004096:	f7fe fb97 	bl	80027c8 <HAL_GetTick>
 800409a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800409c:	e01b      	b.n	80040d6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800409e:	f7fe fb93 	bl	80027c8 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b0b      	cmp	r3, #11
 80040aa:	d914      	bls.n	80040d6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040be:	f043 0210 	orr.w	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f043 0201 	orr.w	r2, r3, #1
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e007      	b.n	80040e6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1dc      	bne.n	800409e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	000993ff 	.word	0x000993ff

080040f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <__NVIC_SetPriorityGrouping+0x44>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004110:	4013      	ands	r3, r2
 8004112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800411c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004126:	4a04      	ldr	r2, [pc, #16]	; (8004138 <__NVIC_SetPriorityGrouping+0x44>)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	60d3      	str	r3, [r2, #12]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <__NVIC_GetPriorityGrouping+0x18>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	0a1b      	lsrs	r3, r3, #8
 8004146:	f003 0307 	and.w	r3, r3, #7
}
 800414a:	4618      	mov	r0, r3
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	2b00      	cmp	r3, #0
 8004168:	db0b      	blt.n	8004182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	f003 021f 	and.w	r2, r3, #31
 8004170:	4907      	ldr	r1, [pc, #28]	; (8004190 <__NVIC_EnableIRQ+0x38>)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	2001      	movs	r0, #1
 800417a:	fa00 f202 	lsl.w	r2, r0, r2
 800417e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000e100 	.word	0xe000e100

08004194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	6039      	str	r1, [r7, #0]
 800419e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	db0a      	blt.n	80041be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	490c      	ldr	r1, [pc, #48]	; (80041e0 <__NVIC_SetPriority+0x4c>)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	440b      	add	r3, r1
 80041b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041bc:	e00a      	b.n	80041d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4908      	ldr	r1, [pc, #32]	; (80041e4 <__NVIC_SetPriority+0x50>)
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	f003 030f 	and.w	r3, r3, #15
 80041ca:	3b04      	subs	r3, #4
 80041cc:	0112      	lsls	r2, r2, #4
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	440b      	add	r3, r1
 80041d2:	761a      	strb	r2, [r3, #24]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000e100 	.word	0xe000e100
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b089      	sub	sp, #36	; 0x24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f1c3 0307 	rsb	r3, r3, #7
 8004202:	2b04      	cmp	r3, #4
 8004204:	bf28      	it	cs
 8004206:	2304      	movcs	r3, #4
 8004208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3304      	adds	r3, #4
 800420e:	2b06      	cmp	r3, #6
 8004210:	d902      	bls.n	8004218 <NVIC_EncodePriority+0x30>
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3b03      	subs	r3, #3
 8004216:	e000      	b.n	800421a <NVIC_EncodePriority+0x32>
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800421c:	f04f 32ff 	mov.w	r2, #4294967295
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	401a      	ands	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004230:	f04f 31ff 	mov.w	r1, #4294967295
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fa01 f303 	lsl.w	r3, r1, r3
 800423a:	43d9      	mvns	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004240:	4313      	orrs	r3, r2
         );
}
 8004242:	4618      	mov	r0, r3
 8004244:	3724      	adds	r7, #36	; 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004260:	d301      	bcc.n	8004266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004262:	2301      	movs	r3, #1
 8004264:	e00f      	b.n	8004286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <SysTick_Config+0x40>)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3b01      	subs	r3, #1
 800426c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800426e:	210f      	movs	r1, #15
 8004270:	f04f 30ff 	mov.w	r0, #4294967295
 8004274:	f7ff ff8e 	bl	8004194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004278:	4b05      	ldr	r3, [pc, #20]	; (8004290 <SysTick_Config+0x40>)
 800427a:	2200      	movs	r2, #0
 800427c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800427e:	4b04      	ldr	r3, [pc, #16]	; (8004290 <SysTick_Config+0x40>)
 8004280:	2207      	movs	r2, #7
 8004282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	e000e010 	.word	0xe000e010

08004294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ff29 	bl	80040f4 <__NVIC_SetPriorityGrouping>
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	4603      	mov	r3, r0
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042bc:	f7ff ff3e 	bl	800413c <__NVIC_GetPriorityGrouping>
 80042c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f7ff ff8e 	bl	80041e8 <NVIC_EncodePriority>
 80042cc:	4602      	mov	r2, r0
 80042ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d2:	4611      	mov	r1, r2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ff5d 	bl	8004194 <__NVIC_SetPriority>
}
 80042da:	bf00      	nop
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	4603      	mov	r3, r0
 80042ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff31 	bl	8004158 <__NVIC_EnableIRQ>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ffa2 	bl	8004250 <SysTick_Config>
 800430c:	4603      	mov	r3, r0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e037      	b.n	800439c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004342:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004346:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f97a 	bl	8004678 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}  
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_DMA_Start_IT+0x20>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e04a      	b.n	800445a <HAL_DMA_Start_IT+0xb6>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d13a      	bne.n	800444c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 f90d 	bl	800461a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 020e 	orr.w	r2, r2, #14
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e00f      	b.n	800443a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 020a 	orr.w	r2, r2, #10
 8004428:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0204 	bic.w	r2, r2, #4
 8004438:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f042 0201 	orr.w	r2, r2, #1
 8004448:	601a      	str	r2, [r3, #0]
 800444a:	e005      	b.n	8004458 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004454:	2302      	movs	r3, #2
 8004456:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004458:	7dfb      	ldrb	r3, [r7, #23]
} 
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004470:	2b02      	cmp	r3, #2
 8004472:	d008      	beq.n	8004486 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2204      	movs	r2, #4
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e020      	b.n	80044c8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 020e 	bic.w	r2, r2, #14
 8004494:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0201 	bic.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ae:	2101      	movs	r1, #1
 80044b0:	fa01 f202 	lsl.w	r2, r1, r2
 80044b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2204      	movs	r2, #4
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d024      	beq.n	8004546 <HAL_DMA_IRQHandler+0x72>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 0304 	and.w	r3, r3, #4
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01f      	beq.n	8004546 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d107      	bne.n	8004524 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0204 	bic.w	r2, r2, #4
 8004522:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	2104      	movs	r1, #4
 800452e:	fa01 f202 	lsl.w	r2, r1, r2
 8004532:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	2b00      	cmp	r3, #0
 800453a:	d06a      	beq.n	8004612 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004544:	e065      	b.n	8004612 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2202      	movs	r2, #2
 800454c:	409a      	lsls	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d02c      	beq.n	80045b0 <HAL_DMA_IRQHandler+0xdc>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d027      	beq.n	80045b0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 020a 	bic.w	r2, r2, #10
 800457c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	2102      	movs	r1, #2
 8004590:	fa01 f202 	lsl.w	r2, r1, r2
 8004594:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d035      	beq.n	8004612 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80045ae:	e030      	b.n	8004612 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	2208      	movs	r2, #8
 80045b6:	409a      	lsls	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d028      	beq.n	8004612 <HAL_DMA_IRQHandler+0x13e>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d023      	beq.n	8004612 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 020e 	bic.w	r2, r2, #14
 80045d8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	2101      	movs	r1, #1
 80045e4:	fa01 f202 	lsl.w	r2, r1, r2
 80045e8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d004      	beq.n	8004612 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
    }
  }
}  
 8004610:	e7ff      	b.n	8004612 <HAL_DMA_IRQHandler+0x13e>
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800461a:	b480      	push	{r7}
 800461c:	b085      	sub	sp, #20
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
 8004626:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	2101      	movs	r1, #1
 8004632:	fa01 f202 	lsl.w	r2, r1, r2
 8004636:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b10      	cmp	r3, #16
 8004646:	d108      	bne.n	800465a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004658:	e007      	b.n	800466a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	60da      	str	r2, [r3, #12]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <DMA_CalcBaseAndBitshift+0x60>)
 8004688:	429a      	cmp	r2, r3
 800468a:	d80f      	bhi.n	80046ac <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <DMA_CalcBaseAndBitshift+0x64>)
 8004694:	4413      	add	r3, r2
 8004696:	4a12      	ldr	r2, [pc, #72]	; (80046e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	009a      	lsls	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a0f      	ldr	r2, [pc, #60]	; (80046e4 <DMA_CalcBaseAndBitshift+0x6c>)
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80046aa:	e00e      	b.n	80046ca <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <DMA_CalcBaseAndBitshift+0x70>)
 80046b4:	4413      	add	r3, r2
 80046b6:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <DMA_CalcBaseAndBitshift+0x68>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	009a      	lsls	r2, r3, #2
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <DMA_CalcBaseAndBitshift+0x74>)
 80046c8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40020407 	.word	0x40020407
 80046dc:	bffdfff8 	.word	0xbffdfff8
 80046e0:	cccccccd 	.word	0xcccccccd
 80046e4:	40020000 	.word	0x40020000
 80046e8:	bffdfbf8 	.word	0xbffdfbf8
 80046ec:	40020400 	.word	0x40020400

080046f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046fe:	e160      	b.n	80049c2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	2101      	movs	r1, #1
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	4013      	ands	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8152 	beq.w	80049bc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d005      	beq.n	8004730 <HAL_GPIO_Init+0x40>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f003 0303 	and.w	r3, r3, #3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d130      	bne.n	8004792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	2203      	movs	r2, #3
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004766:	2201      	movs	r2, #1
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4013      	ands	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	f003 0201 	and.w	r2, r3, #1
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	fa02 f303 	lsl.w	r3, r2, r3
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b03      	cmp	r3, #3
 800479c:	d017      	beq.n	80047ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	2203      	movs	r2, #3
 80047aa:	fa02 f303 	lsl.w	r3, r2, r3
 80047ae:	43db      	mvns	r3, r3
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d123      	bne.n	8004822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	08da      	lsrs	r2, r3, #3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3208      	adds	r2, #8
 80047e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	220f      	movs	r2, #15
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43db      	mvns	r3, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	08da      	lsrs	r2, r3, #3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3208      	adds	r2, #8
 800481c:	6939      	ldr	r1, [r7, #16]
 800481e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	2203      	movs	r2, #3
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f003 0203 	and.w	r2, r3, #3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 80ac 	beq.w	80049bc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004864:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <HAL_GPIO_Init+0x2f0>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	4a5d      	ldr	r2, [pc, #372]	; (80049e0 <HAL_GPIO_Init+0x2f0>)
 800486a:	f043 0301 	orr.w	r3, r3, #1
 800486e:	6193      	str	r3, [r2, #24]
 8004870:	4b5b      	ldr	r3, [pc, #364]	; (80049e0 <HAL_GPIO_Init+0x2f0>)
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800487c:	4a59      	ldr	r2, [pc, #356]	; (80049e4 <HAL_GPIO_Init+0x2f4>)
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	089b      	lsrs	r3, r3, #2
 8004882:	3302      	adds	r3, #2
 8004884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004888:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	220f      	movs	r2, #15
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4013      	ands	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048a6:	d025      	beq.n	80048f4 <HAL_GPIO_Init+0x204>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a4f      	ldr	r2, [pc, #316]	; (80049e8 <HAL_GPIO_Init+0x2f8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d01f      	beq.n	80048f0 <HAL_GPIO_Init+0x200>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a4e      	ldr	r2, [pc, #312]	; (80049ec <HAL_GPIO_Init+0x2fc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d019      	beq.n	80048ec <HAL_GPIO_Init+0x1fc>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a4d      	ldr	r2, [pc, #308]	; (80049f0 <HAL_GPIO_Init+0x300>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d013      	beq.n	80048e8 <HAL_GPIO_Init+0x1f8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a4c      	ldr	r2, [pc, #304]	; (80049f4 <HAL_GPIO_Init+0x304>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00d      	beq.n	80048e4 <HAL_GPIO_Init+0x1f4>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a4b      	ldr	r2, [pc, #300]	; (80049f8 <HAL_GPIO_Init+0x308>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <HAL_GPIO_Init+0x1f0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a4a      	ldr	r2, [pc, #296]	; (80049fc <HAL_GPIO_Init+0x30c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d101      	bne.n	80048dc <HAL_GPIO_Init+0x1ec>
 80048d8:	2306      	movs	r3, #6
 80048da:	e00c      	b.n	80048f6 <HAL_GPIO_Init+0x206>
 80048dc:	2307      	movs	r3, #7
 80048de:	e00a      	b.n	80048f6 <HAL_GPIO_Init+0x206>
 80048e0:	2305      	movs	r3, #5
 80048e2:	e008      	b.n	80048f6 <HAL_GPIO_Init+0x206>
 80048e4:	2304      	movs	r3, #4
 80048e6:	e006      	b.n	80048f6 <HAL_GPIO_Init+0x206>
 80048e8:	2303      	movs	r3, #3
 80048ea:	e004      	b.n	80048f6 <HAL_GPIO_Init+0x206>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e002      	b.n	80048f6 <HAL_GPIO_Init+0x206>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_GPIO_Init+0x206>
 80048f4:	2300      	movs	r3, #0
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	f002 0203 	and.w	r2, r2, #3
 80048fc:	0092      	lsls	r2, r2, #2
 80048fe:	4093      	lsls	r3, r2
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004906:	4937      	ldr	r1, [pc, #220]	; (80049e4 <HAL_GPIO_Init+0x2f4>)
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	3302      	adds	r3, #2
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004914:	4b3a      	ldr	r3, [pc, #232]	; (8004a00 <HAL_GPIO_Init+0x310>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	43db      	mvns	r3, r3
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4013      	ands	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d003      	beq.n	8004938 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004938:	4a31      	ldr	r2, [pc, #196]	; (8004a00 <HAL_GPIO_Init+0x310>)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800493e:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <HAL_GPIO_Init+0x310>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	43db      	mvns	r3, r3
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004962:	4a27      	ldr	r2, [pc, #156]	; (8004a00 <HAL_GPIO_Init+0x310>)
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_GPIO_Init+0x310>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	43db      	mvns	r3, r3
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4013      	ands	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800498c:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_GPIO_Init+0x310>)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004992:	4b1b      	ldr	r3, [pc, #108]	; (8004a00 <HAL_GPIO_Init+0x310>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	43db      	mvns	r3, r3
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80049b6:	4a12      	ldr	r2, [pc, #72]	; (8004a00 <HAL_GPIO_Init+0x310>)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	3301      	adds	r3, #1
 80049c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	fa22 f303 	lsr.w	r3, r2, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f47f ae97 	bne.w	8004700 <HAL_GPIO_Init+0x10>
  }
}
 80049d2:	bf00      	nop
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	40021000 	.word	0x40021000
 80049e4:	40010000 	.word	0x40010000
 80049e8:	48000400 	.word	0x48000400
 80049ec:	48000800 	.word	0x48000800
 80049f0:	48000c00 	.word	0x48000c00
 80049f4:	48001000 	.word	0x48001000
 80049f8:	48001400 	.word	0x48001400
 80049fc:	48001800 	.word	0x48001800
 8004a00:	40010400 	.word	0x40010400

08004a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	887b      	ldrh	r3, [r7, #2]
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
 8004a20:	e001      	b.n	8004a26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
 8004a40:	4613      	mov	r3, r2
 8004a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a44:	787b      	ldrb	r3, [r7, #1]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a4a:	887a      	ldrh	r2, [r7, #2]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a50:	e002      	b.n	8004a58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a52:	887a      	ldrh	r2, [r7, #2]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	4013      	ands	r3, r2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d006      	beq.n	8004a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a7a:	4a05      	ldr	r2, [pc, #20]	; (8004a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
 8004a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd f820 	bl	8001ac8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40010400 	.word	0x40010400

08004a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e081      	b.n	8004baa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fd fc30 	bl	8002320 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	; 0x24
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ae4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004af4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d107      	bne.n	8004b0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	e006      	b.n	8004b1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d104      	bne.n	8004b2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	69d9      	ldr	r1, [r3, #28]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1a      	ldr	r2, [r3, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
 8004bba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d138      	bne.n	8004c3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e032      	b.n	8004c3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2224      	movs	r2, #36	; 0x24
 8004be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	6819      	ldr	r1, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f042 0201 	orr.w	r2, r2, #1
 8004c24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	e000      	b.n	8004c3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	d139      	bne.n	8004cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e033      	b.n	8004cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2224      	movs	r2, #36	; 0x24
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0201 	bic.w	r2, r2, #1
 8004c8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	021b      	lsls	r3, r3, #8
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e000      	b.n	8004cd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
  }
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cf0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d102      	bne.n	8004d06 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f001 b83a 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d0a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f000 816f 	beq.w	8004ffa <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004d1c:	4bb5      	ldr	r3, [pc, #724]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 030c 	and.w	r3, r3, #12
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d00c      	beq.n	8004d42 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d28:	4bb2      	ldr	r3, [pc, #712]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 030c 	and.w	r3, r3, #12
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d15c      	bne.n	8004dee <HAL_RCC_OscConfig+0x10e>
 8004d34:	4baf      	ldr	r3, [pc, #700]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d40:	d155      	bne.n	8004dee <HAL_RCC_OscConfig+0x10e>
 8004d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d46:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004d4e:	fa93 f3a3 	rbit	r3, r3
 8004d52:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004d56:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d102      	bne.n	8004d74 <HAL_RCC_OscConfig+0x94>
 8004d6e:	4ba1      	ldr	r3, [pc, #644]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	e015      	b.n	8004da0 <HAL_RCC_OscConfig+0xc0>
 8004d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d78:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004d80:	fa93 f3a3 	rbit	r3, r3
 8004d84:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d8c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004d90:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004d94:	fa93 f3a3 	rbit	r3, r3
 8004d98:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004d9c:	4b95      	ldr	r3, [pc, #596]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004da4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8004da8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004dac:	fa92 f2a2 	rbit	r2, r2
 8004db0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004db4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004db8:	fab2 f282 	clz	r2, r2
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	f042 0220 	orr.w	r2, r2, #32
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	f002 021f 	and.w	r2, r2, #31
 8004dc8:	2101      	movs	r1, #1
 8004dca:	fa01 f202 	lsl.w	r2, r1, r2
 8004dce:	4013      	ands	r3, r2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 8111 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x318>
 8004dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f040 8108 	bne.w	8004ff8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f000 bfc6 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCC_OscConfig+0x12e>
 8004e00:	4b7c      	ldr	r3, [pc, #496]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a7b      	ldr	r2, [pc, #492]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0a:	6013      	str	r3, [r2, #0]
 8004e0c:	e036      	b.n	8004e7c <HAL_RCC_OscConfig+0x19c>
 8004e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x158>
 8004e1e:	4b75      	ldr	r3, [pc, #468]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a74      	ldr	r2, [pc, #464]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b72      	ldr	r3, [pc, #456]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a71      	ldr	r2, [pc, #452]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e021      	b.n	8004e7c <HAL_RCC_OscConfig+0x19c>
 8004e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCC_OscConfig+0x184>
 8004e4a:	4b6a      	ldr	r3, [pc, #424]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a69      	ldr	r2, [pc, #420]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	4b67      	ldr	r3, [pc, #412]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a66      	ldr	r2, [pc, #408]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	e00b      	b.n	8004e7c <HAL_RCC_OscConfig+0x19c>
 8004e64:	4b63      	ldr	r3, [pc, #396]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a62      	ldr	r2, [pc, #392]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	4b60      	ldr	r3, [pc, #384]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a5f      	ldr	r2, [pc, #380]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e7a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d059      	beq.n	8004f40 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fd fc9c 	bl	80027c8 <HAL_GetTick>
 8004e90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e96:	f7fd fc97 	bl	80027c8 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b64      	cmp	r3, #100	; 0x64
 8004ea4:	d902      	bls.n	8004eac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	f000 bf67 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>
 8004eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eb0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004ec0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec4:	fab3 f383 	clz	r3, r3
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d102      	bne.n	8004ede <HAL_RCC_OscConfig+0x1fe>
 8004ed8:	4b46      	ldr	r3, [pc, #280]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	e015      	b.n	8004f0a <HAL_RCC_OscConfig+0x22a>
 8004ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ee2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8004eea:	fa93 f3a3 	rbit	r3, r3
 8004eee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ef6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004efa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004efe:	fa93 f3a3 	rbit	r3, r3
 8004f02:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004f06:	4b3b      	ldr	r3, [pc, #236]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004f0e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004f12:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004f16:	fa92 f2a2 	rbit	r2, r2
 8004f1a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004f1e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004f22:	fab2 f282 	clz	r2, r2
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	f042 0220 	orr.w	r2, r2, #32
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	f002 021f 	and.w	r2, r2, #31
 8004f32:	2101      	movs	r1, #1
 8004f34:	fa01 f202 	lsl.w	r2, r1, r2
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0ab      	beq.n	8004e96 <HAL_RCC_OscConfig+0x1b6>
 8004f3e:	e05c      	b.n	8004ffa <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fd fc42 	bl	80027c8 <HAL_GetTick>
 8004f44:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f48:	e00a      	b.n	8004f60 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f4a:	f7fd fc3d 	bl	80027c8 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d902      	bls.n	8004f60 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	f000 bf0d 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>
 8004f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f64:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f68:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8004f6c:	fa93 f3a3 	rbit	r3, r3
 8004f70:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8004f74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCC_OscConfig+0x2b2>
 8004f8c:	4b19      	ldr	r3, [pc, #100]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	e015      	b.n	8004fbe <HAL_RCC_OscConfig+0x2de>
 8004f92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f96:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004fa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004faa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004fae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004fb2:	fa93 f3a3 	rbit	r3, r3
 8004fb6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004fba:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <HAL_RCC_OscConfig+0x314>)
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fc2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004fc6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004fca:	fa92 f2a2 	rbit	r2, r2
 8004fce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004fd2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004fd6:	fab2 f282 	clz	r2, r2
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	f042 0220 	orr.w	r2, r2, #32
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	f002 021f 	and.w	r2, r2, #31
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1ab      	bne.n	8004f4a <HAL_RCC_OscConfig+0x26a>
 8004ff2:	e002      	b.n	8004ffa <HAL_RCC_OscConfig+0x31a>
 8004ff4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ffe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 817f 	beq.w	800530e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005010:	4ba7      	ldr	r3, [pc, #668]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00c      	beq.n	8005036 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800501c:	4ba4      	ldr	r3, [pc, #656]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b08      	cmp	r3, #8
 8005026:	d173      	bne.n	8005110 <HAL_RCC_OscConfig+0x430>
 8005028:	4ba1      	ldr	r3, [pc, #644]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005034:	d16c      	bne.n	8005110 <HAL_RCC_OscConfig+0x430>
 8005036:	2302      	movs	r3, #2
 8005038:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005040:	fa93 f3a3 	rbit	r3, r3
 8005044:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005048:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504c:	fab3 f383 	clz	r3, r3
 8005050:	b2db      	uxtb	r3, r3
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b01      	cmp	r3, #1
 800505e:	d102      	bne.n	8005066 <HAL_RCC_OscConfig+0x386>
 8005060:	4b93      	ldr	r3, [pc, #588]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	e013      	b.n	800508e <HAL_RCC_OscConfig+0x3ae>
 8005066:	2302      	movs	r3, #2
 8005068:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005078:	2302      	movs	r3, #2
 800507a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800507e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005082:	fa93 f3a3 	rbit	r3, r3
 8005086:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800508a:	4b89      	ldr	r3, [pc, #548]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2202      	movs	r2, #2
 8005090:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005094:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005098:	fa92 f2a2 	rbit	r2, r2
 800509c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80050a0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80050a4:	fab2 f282 	clz	r2, r2
 80050a8:	b2d2      	uxtb	r2, r2
 80050aa:	f042 0220 	orr.w	r2, r2, #32
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	f002 021f 	and.w	r2, r2, #31
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCC_OscConfig+0x3f6>
 80050c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d002      	beq.n	80050d6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f000 be52 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d6:	4b76      	ldr	r3, [pc, #472]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	21f8      	movs	r1, #248	; 0xf8
 80050ec:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f0:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80050f4:	fa91 f1a1 	rbit	r1, r1
 80050f8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80050fc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005100:	fab1 f181 	clz	r1, r1
 8005104:	b2c9      	uxtb	r1, r1
 8005106:	408b      	lsls	r3, r1
 8005108:	4969      	ldr	r1, [pc, #420]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510e:	e0fe      	b.n	800530e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005114:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 8088 	beq.w	8005232 <HAL_RCC_OscConfig+0x552>
 8005122:	2301      	movs	r3, #1
 8005124:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005128:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800512c:	fa93 f3a3 	rbit	r3, r3
 8005130:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005134:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005138:	fab3 f383 	clz	r3, r3
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005142:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	461a      	mov	r2, r3
 800514a:	2301      	movs	r3, #1
 800514c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7fd fb3b 	bl	80027c8 <HAL_GetTick>
 8005152:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005156:	e00a      	b.n	800516e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005158:	f7fd fb36 	bl	80027c8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d902      	bls.n	800516e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	f000 be06 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>
 800516e:	2302      	movs	r3, #2
 8005170:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005174:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005178:	fa93 f3a3 	rbit	r3, r3
 800517c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005180:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005184:	fab3 f383 	clz	r3, r3
 8005188:	b2db      	uxtb	r3, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f043 0301 	orr.w	r3, r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	d102      	bne.n	800519e <HAL_RCC_OscConfig+0x4be>
 8005198:	4b45      	ldr	r3, [pc, #276]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	e013      	b.n	80051c6 <HAL_RCC_OscConfig+0x4e6>
 800519e:	2302      	movs	r3, #2
 80051a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80051a8:	fa93 f3a3 	rbit	r3, r3
 80051ac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80051b0:	2302      	movs	r3, #2
 80051b2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80051b6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80051ba:	fa93 f3a3 	rbit	r3, r3
 80051be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80051c2:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	2202      	movs	r2, #2
 80051c8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80051cc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80051d0:	fa92 f2a2 	rbit	r2, r2
 80051d4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80051d8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80051dc:	fab2 f282 	clz	r2, r2
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	f042 0220 	orr.w	r2, r2, #32
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	f002 021f 	and.w	r2, r2, #31
 80051ec:	2101      	movs	r1, #1
 80051ee:	fa01 f202 	lsl.w	r2, r1, r2
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0af      	beq.n	8005158 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f8:	4b2d      	ldr	r3, [pc, #180]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005204:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	21f8      	movs	r1, #248	; 0xf8
 800520e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005212:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005216:	fa91 f1a1 	rbit	r1, r1
 800521a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800521e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005222:	fab1 f181 	clz	r1, r1
 8005226:	b2c9      	uxtb	r1, r1
 8005228:	408b      	lsls	r3, r1
 800522a:	4921      	ldr	r1, [pc, #132]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 800522c:	4313      	orrs	r3, r2
 800522e:	600b      	str	r3, [r1, #0]
 8005230:	e06d      	b.n	800530e <HAL_RCC_OscConfig+0x62e>
 8005232:	2301      	movs	r3, #1
 8005234:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800523c:	fa93 f3a3 	rbit	r3, r3
 8005240:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005244:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005248:	fab3 f383 	clz	r3, r3
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005252:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	461a      	mov	r2, r3
 800525a:	2300      	movs	r3, #0
 800525c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525e:	f7fd fab3 	bl	80027c8 <HAL_GetTick>
 8005262:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005266:	e00a      	b.n	800527e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005268:	f7fd faae 	bl	80027c8 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d902      	bls.n	800527e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	f000 bd7e 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>
 800527e:	2302      	movs	r3, #2
 8005280:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005284:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005288:	fa93 f3a3 	rbit	r3, r3
 800528c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005290:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005294:	fab3 f383 	clz	r3, r3
 8005298:	b2db      	uxtb	r3, r3
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d105      	bne.n	80052b4 <HAL_RCC_OscConfig+0x5d4>
 80052a8:	4b01      	ldr	r3, [pc, #4]	; (80052b0 <HAL_RCC_OscConfig+0x5d0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	e016      	b.n	80052dc <HAL_RCC_OscConfig+0x5fc>
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
 80052b4:	2302      	movs	r3, #2
 80052b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052be:	fa93 f3a3 	rbit	r3, r3
 80052c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052c6:	2302      	movs	r3, #2
 80052c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80052cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80052d0:	fa93 f3a3 	rbit	r3, r3
 80052d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80052d8:	4bbf      	ldr	r3, [pc, #764]	; (80055d8 <HAL_RCC_OscConfig+0x8f8>)
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2202      	movs	r2, #2
 80052de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80052e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80052e6:	fa92 f2a2 	rbit	r2, r2
 80052ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80052ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80052f2:	fab2 f282 	clz	r2, r2
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	f042 0220 	orr.w	r2, r2, #32
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	f002 021f 	and.w	r2, r2, #31
 8005302:	2101      	movs	r1, #1
 8005304:	fa01 f202 	lsl.w	r2, r1, r2
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ac      	bne.n	8005268 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005312:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8113 	beq.w	800554a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005328:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d07c      	beq.n	800542e <HAL_RCC_OscConfig+0x74e>
 8005334:	2301      	movs	r3, #1
 8005336:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800533e:	fa93 f3a3 	rbit	r3, r3
 8005342:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005346:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800534a:	fab3 f383 	clz	r3, r3
 800534e:	b2db      	uxtb	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	4ba2      	ldr	r3, [pc, #648]	; (80055dc <HAL_RCC_OscConfig+0x8fc>)
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	461a      	mov	r2, r3
 800535a:	2301      	movs	r3, #1
 800535c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800535e:	f7fd fa33 	bl	80027c8 <HAL_GetTick>
 8005362:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005366:	e00a      	b.n	800537e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005368:	f7fd fa2e 	bl	80027c8 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d902      	bls.n	800537e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	f000 bcfe 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>
 800537e:	2302      	movs	r3, #2
 8005380:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005388:	fa93 f2a3 	rbit	r2, r3
 800538c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005390:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800539a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800539e:	2202      	movs	r2, #2
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	fa93 f2a3 	rbit	r2, r3
 80053b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053c2:	2202      	movs	r2, #2
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	fa93 f2a3 	rbit	r2, r3
 80053d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80053dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053de:	4b7e      	ldr	r3, [pc, #504]	; (80055d8 <HAL_RCC_OscConfig+0x8f8>)
 80053e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053ea:	2102      	movs	r1, #2
 80053ec:	6019      	str	r1, [r3, #0]
 80053ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	fa93 f1a3 	rbit	r1, r3
 80053fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005400:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005404:	6019      	str	r1, [r3, #0]
  return result;
 8005406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800540a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	fab3 f383 	clz	r3, r3
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f003 031f 	and.w	r3, r3, #31
 8005420:	2101      	movs	r1, #1
 8005422:	fa01 f303 	lsl.w	r3, r1, r3
 8005426:	4013      	ands	r3, r2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d09d      	beq.n	8005368 <HAL_RCC_OscConfig+0x688>
 800542c:	e08d      	b.n	800554a <HAL_RCC_OscConfig+0x86a>
 800542e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005432:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005436:	2201      	movs	r2, #1
 8005438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800543e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	fa93 f2a3 	rbit	r2, r3
 8005448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800544c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005450:	601a      	str	r2, [r3, #0]
  return result;
 8005452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005456:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800545a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800545c:	fab3 f383 	clz	r3, r3
 8005460:	b2db      	uxtb	r3, r3
 8005462:	461a      	mov	r2, r3
 8005464:	4b5d      	ldr	r3, [pc, #372]	; (80055dc <HAL_RCC_OscConfig+0x8fc>)
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	461a      	mov	r2, r3
 800546c:	2300      	movs	r3, #0
 800546e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005470:	f7fd f9aa 	bl	80027c8 <HAL_GetTick>
 8005474:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005478:	e00a      	b.n	8005490 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800547a:	f7fd f9a5 	bl	80027c8 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d902      	bls.n	8005490 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	f000 bc75 	b.w	8005d7a <HAL_RCC_OscConfig+0x109a>
 8005490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005494:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005498:	2202      	movs	r2, #2
 800549a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	fa93 f2a3 	rbit	r2, r3
 80054aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054bc:	2202      	movs	r2, #2
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	fa93 f2a3 	rbit	r2, r3
 80054ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80054e0:	2202      	movs	r2, #2
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054e8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	fa93 f2a3 	rbit	r2, r3
 80054f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80054fa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054fc:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <HAL_RCC_OscConfig+0x8f8>)
 80054fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005504:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005508:	2102      	movs	r1, #2
 800550a:	6019      	str	r1, [r3, #0]
 800550c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005510:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	fa93 f1a3 	rbit	r1, r3
 800551a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800551e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005522:	6019      	str	r1, [r3, #0]
  return result;
 8005524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005528:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f003 031f 	and.w	r3, r3, #31
 800553e:	2101      	movs	r1, #1
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d197      	bne.n	800547a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800554a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800554e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0304 	and.w	r3, r3, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 81a5 	beq.w	80058aa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005560:	2300      	movs	r3, #0
 8005562:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005566:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <HAL_RCC_OscConfig+0x8f8>)
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d116      	bne.n	80055a0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005572:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <HAL_RCC_OscConfig+0x8f8>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <HAL_RCC_OscConfig+0x8f8>)
 8005578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557c:	61d3      	str	r3, [r2, #28]
 800557e:	4b16      	ldr	r3, [pc, #88]	; (80055d8 <HAL_RCC_OscConfig+0x8f8>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800558a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005594:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005598:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <HAL_RCC_OscConfig+0x900>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d121      	bne.n	80055f0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <HAL_RCC_OscConfig+0x900>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a0b      	ldr	r2, [pc, #44]	; (80055e0 <HAL_RCC_OscConfig+0x900>)
 80055b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b8:	f7fd f906 	bl	80027c8 <HAL_GetTick>
 80055bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055c0:	e010      	b.n	80055e4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055c2:	f7fd f901 	bl	80027c8 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d908      	bls.n	80055e4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e3d1      	b.n	8005d7a <HAL_RCC_OscConfig+0x109a>
 80055d6:	bf00      	nop
 80055d8:	40021000 	.word	0x40021000
 80055dc:	10908120 	.word	0x10908120
 80055e0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e4:	4b8d      	ldr	r3, [pc, #564]	; (800581c <HAL_RCC_OscConfig+0xb3c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0e8      	beq.n	80055c2 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d106      	bne.n	800560e <HAL_RCC_OscConfig+0x92e>
 8005600:	4b87      	ldr	r3, [pc, #540]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	4a86      	ldr	r2, [pc, #536]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	6213      	str	r3, [r2, #32]
 800560c:	e035      	b.n	800567a <HAL_RCC_OscConfig+0x99a>
 800560e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005612:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <HAL_RCC_OscConfig+0x958>
 800561e:	4b80      	ldr	r3, [pc, #512]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	4a7f      	ldr	r2, [pc, #508]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	6213      	str	r3, [r2, #32]
 800562a:	4b7d      	ldr	r3, [pc, #500]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	4a7c      	ldr	r2, [pc, #496]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005630:	f023 0304 	bic.w	r3, r3, #4
 8005634:	6213      	str	r3, [r2, #32]
 8005636:	e020      	b.n	800567a <HAL_RCC_OscConfig+0x99a>
 8005638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800563c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b05      	cmp	r3, #5
 8005646:	d10c      	bne.n	8005662 <HAL_RCC_OscConfig+0x982>
 8005648:	4b75      	ldr	r3, [pc, #468]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	4a74      	ldr	r2, [pc, #464]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 800564e:	f043 0304 	orr.w	r3, r3, #4
 8005652:	6213      	str	r3, [r2, #32]
 8005654:	4b72      	ldr	r3, [pc, #456]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	4a71      	ldr	r2, [pc, #452]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6213      	str	r3, [r2, #32]
 8005660:	e00b      	b.n	800567a <HAL_RCC_OscConfig+0x99a>
 8005662:	4b6f      	ldr	r3, [pc, #444]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4a6e      	ldr	r2, [pc, #440]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005668:	f023 0301 	bic.w	r3, r3, #1
 800566c:	6213      	str	r3, [r2, #32]
 800566e:	4b6c      	ldr	r3, [pc, #432]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4a6b      	ldr	r2, [pc, #428]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005674:	f023 0304 	bic.w	r3, r3, #4
 8005678:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800567a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800567e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8081 	beq.w	800578e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568c:	f7fd f89c 	bl	80027c8 <HAL_GetTick>
 8005690:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005694:	e00b      	b.n	80056ae <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005696:	f7fd f897 	bl	80027c8 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e365      	b.n	8005d7a <HAL_RCC_OscConfig+0x109a>
 80056ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80056b6:	2202      	movs	r2, #2
 80056b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	fa93 f2a3 	rbit	r2, r3
 80056c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80056da:	2202      	movs	r2, #2
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056e2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	fa93 f2a3 	rbit	r2, r3
 80056ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80056f4:	601a      	str	r2, [r3, #0]
  return result;
 80056f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056fa:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80056fe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005700:	fab3 f383 	clz	r3, r3
 8005704:	b2db      	uxtb	r3, r3
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	b2db      	uxtb	r3, r3
 800570a:	f043 0302 	orr.w	r3, r3, #2
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d102      	bne.n	800571a <HAL_RCC_OscConfig+0xa3a>
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	e013      	b.n	8005742 <HAL_RCC_OscConfig+0xa62>
 800571a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800571e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005722:	2202      	movs	r2, #2
 8005724:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800572a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	fa93 f2a3 	rbit	r2, r3
 8005734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005738:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	4b38      	ldr	r3, [pc, #224]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005746:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800574a:	2102      	movs	r1, #2
 800574c:	6011      	str	r1, [r2, #0]
 800574e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005752:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	fa92 f1a2 	rbit	r1, r2
 800575c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005760:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005764:	6011      	str	r1, [r2, #0]
  return result;
 8005766:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800576a:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	fab2 f282 	clz	r2, r2
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	f002 021f 	and.w	r2, r2, #31
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f202 	lsl.w	r2, r1, r2
 8005786:	4013      	ands	r3, r2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d084      	beq.n	8005696 <HAL_RCC_OscConfig+0x9b6>
 800578c:	e083      	b.n	8005896 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800578e:	f7fd f81b 	bl	80027c8 <HAL_GetTick>
 8005792:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f7fd f816 	bl	80027c8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e2e4      	b.n	8005d7a <HAL_RCC_OscConfig+0x109a>
 80057b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80057b8:	2202      	movs	r2, #2
 80057ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	fa93 f2a3 	rbit	r2, r3
 80057ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80057dc:	2202      	movs	r2, #2
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	fa93 f2a3 	rbit	r2, r3
 80057ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057f2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80057f6:	601a      	str	r2, [r3, #0]
  return result;
 80057f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057fc:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005800:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f043 0302 	orr.w	r3, r3, #2
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d106      	bne.n	8005824 <HAL_RCC_OscConfig+0xb44>
 8005816:	4b02      	ldr	r3, [pc, #8]	; (8005820 <HAL_RCC_OscConfig+0xb40>)
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	e017      	b.n	800584c <HAL_RCC_OscConfig+0xb6c>
 800581c:	40007000 	.word	0x40007000
 8005820:	40021000 	.word	0x40021000
 8005824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005828:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800582c:	2202      	movs	r2, #2
 800582e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005830:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005834:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	fa93 f2a3 	rbit	r2, r3
 800583e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005842:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	4bb3      	ldr	r3, [pc, #716]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005850:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005854:	2102      	movs	r1, #2
 8005856:	6011      	str	r1, [r2, #0]
 8005858:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800585c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	fa92 f1a2 	rbit	r1, r2
 8005866:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800586a:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800586e:	6011      	str	r1, [r2, #0]
  return result;
 8005870:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005874:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005878:	6812      	ldr	r2, [r2, #0]
 800587a:	fab2 f282 	clz	r2, r2
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	f002 021f 	and.w	r2, r2, #31
 800588a:	2101      	movs	r1, #1
 800588c:	fa01 f202 	lsl.w	r2, r1, r2
 8005890:	4013      	ands	r3, r2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d180      	bne.n	8005798 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005896:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800589a:	2b01      	cmp	r3, #1
 800589c:	d105      	bne.n	80058aa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589e:	4b9e      	ldr	r3, [pc, #632]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	4a9d      	ldr	r2, [pc, #628]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 80058a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 825e 	beq.w	8005d78 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058bc:	4b96      	ldr	r3, [pc, #600]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 030c 	and.w	r3, r3, #12
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	f000 821f 	beq.w	8005d08 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	f040 8170 	bne.w	8005bbc <HAL_RCC_OscConfig+0xedc>
 80058dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058e0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80058e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80058e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ee:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	fa93 f2a3 	rbit	r2, r3
 80058f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058fc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005900:	601a      	str	r2, [r3, #0]
  return result;
 8005902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005906:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800590a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800590c:	fab3 f383 	clz	r3, r3
 8005910:	b2db      	uxtb	r3, r3
 8005912:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005916:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005922:	f7fc ff51 	bl	80027c8 <HAL_GetTick>
 8005926:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800592a:	e009      	b.n	8005940 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800592c:	f7fc ff4c 	bl	80027c8 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e21c      	b.n	8005d7a <HAL_RCC_OscConfig+0x109a>
 8005940:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005944:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005948:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800594c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005952:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	fa93 f2a3 	rbit	r2, r3
 800595c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005960:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005964:	601a      	str	r2, [r3, #0]
  return result;
 8005966:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800596a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800596e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005970:	fab3 f383 	clz	r3, r3
 8005974:	b2db      	uxtb	r3, r3
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f043 0301 	orr.w	r3, r3, #1
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	d102      	bne.n	800598a <HAL_RCC_OscConfig+0xcaa>
 8005984:	4b64      	ldr	r3, [pc, #400]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	e027      	b.n	80059da <HAL_RCC_OscConfig+0xcfa>
 800598a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800598e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005992:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005996:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800599c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	fa93 f2a3 	rbit	r2, r3
 80059a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059aa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80059b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	fa93 f2a3 	rbit	r2, r3
 80059cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059d0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80059e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80059e6:	6011      	str	r1, [r2, #0]
 80059e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059ec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80059f0:	6812      	ldr	r2, [r2, #0]
 80059f2:	fa92 f1a2 	rbit	r1, r2
 80059f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80059fa:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80059fe:	6011      	str	r1, [r2, #0]
  return result;
 8005a00:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005a04:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	fab2 f282 	clz	r2, r2
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	f042 0220 	orr.w	r2, r2, #32
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	f002 021f 	and.w	r2, r2, #31
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d182      	bne.n	800592c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a26:	4b3c      	ldr	r3, [pc, #240]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	f023 020f 	bic.w	r2, r3, #15
 8005a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	4937      	ldr	r1, [pc, #220]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005a40:	4b35      	ldr	r3, [pc, #212]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6a19      	ldr	r1, [r3, #32]
 8005a54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	430b      	orrs	r3, r1
 8005a62:	492d      	ldr	r1, [pc, #180]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	604b      	str	r3, [r1, #4]
 8005a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a7a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	fa93 f2a3 	rbit	r2, r3
 8005a84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a88:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005a8c:	601a      	str	r2, [r3, #0]
  return result;
 8005a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a92:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005a96:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a98:	fab3 f383 	clz	r3, r3
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005aa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2301      	movs	r3, #1
 8005aac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aae:	f7fc fe8b 	bl	80027c8 <HAL_GetTick>
 8005ab2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ab6:	e009      	b.n	8005acc <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ab8:	f7fc fe86 	bl	80027c8 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e156      	b.n	8005d7a <HAL_RCC_OscConfig+0x109a>
 8005acc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ad0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ad4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ad8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ade:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	fa93 f2a3 	rbit	r2, r3
 8005ae8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005aec:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005af0:	601a      	str	r2, [r3, #0]
  return result;
 8005af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005af6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005afa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005afc:	fab3 f383 	clz	r3, r3
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f043 0301 	orr.w	r3, r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d105      	bne.n	8005b1c <HAL_RCC_OscConfig+0xe3c>
 8005b10:	4b01      	ldr	r3, [pc, #4]	; (8005b18 <HAL_RCC_OscConfig+0xe38>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	e02a      	b.n	8005b6c <HAL_RCC_OscConfig+0xe8c>
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b20:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005b24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b2e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	fa93 f2a3 	rbit	r2, r3
 8005b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b3c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b46:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b54:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	fa93 f2a3 	rbit	r2, r3
 8005b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b62:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	4b86      	ldr	r3, [pc, #536]	; (8005d84 <HAL_RCC_OscConfig+0x10a4>)
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b70:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005b74:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005b78:	6011      	str	r1, [r2, #0]
 8005b7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b7e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	fa92 f1a2 	rbit	r1, r2
 8005b88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b8c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005b90:	6011      	str	r1, [r2, #0]
  return result;
 8005b92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b96:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005b9a:	6812      	ldr	r2, [r2, #0]
 8005b9c:	fab2 f282 	clz	r2, r2
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	f042 0220 	orr.w	r2, r2, #32
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	f002 021f 	and.w	r2, r2, #31
 8005bac:	2101      	movs	r1, #1
 8005bae:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f43f af7f 	beq.w	8005ab8 <HAL_RCC_OscConfig+0xdd8>
 8005bba:	e0dd      	b.n	8005d78 <HAL_RCC_OscConfig+0x1098>
 8005bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bc0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005bc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bce:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	fa93 f2a3 	rbit	r2, r3
 8005bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bdc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005be0:	601a      	str	r2, [r3, #0]
  return result;
 8005be2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005be6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005bea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bec:	fab3 f383 	clz	r3, r3
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005bf6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c02:	f7fc fde1 	bl	80027c8 <HAL_GetTick>
 8005c06:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c0a:	e009      	b.n	8005c20 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fc fddc 	bl	80027c8 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d901      	bls.n	8005c20 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e0ac      	b.n	8005d7a <HAL_RCC_OscConfig+0x109a>
 8005c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c24:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c32:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	fa93 f2a3 	rbit	r2, r3
 8005c3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c40:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005c44:	601a      	str	r2, [r3, #0]
  return result;
 8005c46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c4a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005c4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c50:	fab3 f383 	clz	r3, r3
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d102      	bne.n	8005c6a <HAL_RCC_OscConfig+0xf8a>
 8005c64:	4b47      	ldr	r3, [pc, #284]	; (8005d84 <HAL_RCC_OscConfig+0x10a4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	e027      	b.n	8005cba <HAL_RCC_OscConfig+0xfda>
 8005c6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c6e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	fa93 f2a3 	rbit	r2, r3
 8005c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c8a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c94:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005c9c:	601a      	str	r2, [r3, #0]
 8005c9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ca2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	fa93 f2a3 	rbit	r2, r3
 8005cac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cb0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005cb4:	601a      	str	r2, [r3, #0]
 8005cb6:	4b33      	ldr	r3, [pc, #204]	; (8005d84 <HAL_RCC_OscConfig+0x10a4>)
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005cbe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005cc2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005cc6:	6011      	str	r1, [r2, #0]
 8005cc8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005ccc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	fa92 f1a2 	rbit	r1, r2
 8005cd6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005cda:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005cde:	6011      	str	r1, [r2, #0]
  return result;
 8005ce0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005ce4:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	fab2 f282 	clz	r2, r2
 8005cee:	b2d2      	uxtb	r2, r2
 8005cf0:	f042 0220 	orr.w	r2, r2, #32
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	f002 021f 	and.w	r2, r2, #31
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d182      	bne.n	8005c0c <HAL_RCC_OscConfig+0xf2c>
 8005d06:	e037      	b.n	8005d78 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e02e      	b.n	8005d7a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d1c:	4b19      	ldr	r3, [pc, #100]	; (8005d84 <HAL_RCC_OscConfig+0x10a4>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005d24:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <HAL_RCC_OscConfig+0x10a4>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d30:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005d34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d117      	bne.n	8005d74 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005d44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005d48:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d50:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d10b      	bne.n	8005d74 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d60:	f003 020f 	and.w	r2, r3, #15
 8005d64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d001      	beq.n	8005d78 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e000      	b.n	8005d7a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40021000 	.word	0x40021000

08005d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b09e      	sub	sp, #120	; 0x78
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e162      	b.n	8006066 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005da0:	4b90      	ldr	r3, [pc, #576]	; (8005fe4 <HAL_RCC_ClockConfig+0x25c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d910      	bls.n	8005dd0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dae:	4b8d      	ldr	r3, [pc, #564]	; (8005fe4 <HAL_RCC_ClockConfig+0x25c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f023 0207 	bic.w	r2, r3, #7
 8005db6:	498b      	ldr	r1, [pc, #556]	; (8005fe4 <HAL_RCC_ClockConfig+0x25c>)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dbe:	4b89      	ldr	r3, [pc, #548]	; (8005fe4 <HAL_RCC_ClockConfig+0x25c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d001      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e14a      	b.n	8006066 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d008      	beq.n	8005dee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ddc:	4b82      	ldr	r3, [pc, #520]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	497f      	ldr	r1, [pc, #508]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 80dc 	beq.w	8005fb4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d13c      	bne.n	8005e7e <HAL_RCC_ClockConfig+0xf6>
 8005e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e08:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e0c:	fa93 f3a3 	rbit	r3, r3
 8005e10:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e14:	fab3 f383 	clz	r3, r3
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d102      	bne.n	8005e2e <HAL_RCC_ClockConfig+0xa6>
 8005e28:	4b6f      	ldr	r3, [pc, #444]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	e00f      	b.n	8005e4e <HAL_RCC_ClockConfig+0xc6>
 8005e2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e36:	fa93 f3a3 	rbit	r3, r3
 8005e3a:	667b      	str	r3, [r7, #100]	; 0x64
 8005e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e40:	663b      	str	r3, [r7, #96]	; 0x60
 8005e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e44:	fa93 f3a3 	rbit	r3, r3
 8005e48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e4a:	4b67      	ldr	r3, [pc, #412]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e52:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e56:	fa92 f2a2 	rbit	r2, r2
 8005e5a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005e5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e5e:	fab2 f282 	clz	r2, r2
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	f042 0220 	orr.w	r2, r2, #32
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	f002 021f 	and.w	r2, r2, #31
 8005e6e:	2101      	movs	r1, #1
 8005e70:	fa01 f202 	lsl.w	r2, r1, r2
 8005e74:	4013      	ands	r3, r2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d17b      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0f3      	b.n	8006066 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d13c      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x178>
 8005e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e8e:	fa93 f3a3 	rbit	r3, r3
 8005e92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e96:	fab3 f383 	clz	r3, r3
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	095b      	lsrs	r3, r3, #5
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	f043 0301 	orr.w	r3, r3, #1
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d102      	bne.n	8005eb0 <HAL_RCC_ClockConfig+0x128>
 8005eaa:	4b4f      	ldr	r3, [pc, #316]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	e00f      	b.n	8005ed0 <HAL_RCC_ClockConfig+0x148>
 8005eb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005eb4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb8:	fa93 f3a3 	rbit	r3, r3
 8005ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ec2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec6:	fa93 f3a3 	rbit	r3, r3
 8005eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ecc:	4b46      	ldr	r3, [pc, #280]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ed4:	63ba      	str	r2, [r7, #56]	; 0x38
 8005ed6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ed8:	fa92 f2a2 	rbit	r2, r2
 8005edc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ee0:	fab2 f282 	clz	r2, r2
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	f042 0220 	orr.w	r2, r2, #32
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	f002 021f 	and.w	r2, r2, #31
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d13a      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e0b2      	b.n	8006066 <HAL_RCC_ClockConfig+0x2de>
 8005f00:	2302      	movs	r3, #2
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	fa93 f3a3 	rbit	r3, r3
 8005f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0e:	fab3 f383 	clz	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d102      	bne.n	8005f28 <HAL_RCC_ClockConfig+0x1a0>
 8005f22:	4b31      	ldr	r3, [pc, #196]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	e00d      	b.n	8005f44 <HAL_RCC_ClockConfig+0x1bc>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2e:	fa93 f3a3 	rbit	r3, r3
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
 8005f34:	2302      	movs	r3, #2
 8005f36:	623b      	str	r3, [r7, #32]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	fa93 f3a3 	rbit	r3, r3
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	4b29      	ldr	r3, [pc, #164]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	2202      	movs	r2, #2
 8005f46:	61ba      	str	r2, [r7, #24]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	fa92 f2a2 	rbit	r2, r2
 8005f4e:	617a      	str	r2, [r7, #20]
  return result;
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	fab2 f282 	clz	r2, r2
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	f042 0220 	orr.w	r2, r2, #32
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	f002 021f 	and.w	r2, r2, #31
 8005f62:	2101      	movs	r1, #1
 8005f64:	fa01 f202 	lsl.w	r2, r1, r2
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e079      	b.n	8006066 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f72:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f023 0203 	bic.w	r2, r3, #3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	491a      	ldr	r1, [pc, #104]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f84:	f7fc fc20 	bl	80027c8 <HAL_GetTick>
 8005f88:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f8a:	e00a      	b.n	8005fa2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f8c:	f7fc fc1c 	bl	80027c8 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e061      	b.n	8006066 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fa2:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <HAL_RCC_ClockConfig+0x260>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f003 020c 	and.w	r2, r3, #12
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d1eb      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_RCC_ClockConfig+0x25c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0307 	and.w	r3, r3, #7
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d214      	bcs.n	8005fec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc2:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <HAL_RCC_ClockConfig+0x25c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f023 0207 	bic.w	r2, r3, #7
 8005fca:	4906      	ldr	r1, [pc, #24]	; (8005fe4 <HAL_RCC_ClockConfig+0x25c>)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd2:	4b04      	ldr	r3, [pc, #16]	; (8005fe4 <HAL_RCC_ClockConfig+0x25c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0307 	and.w	r3, r3, #7
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d005      	beq.n	8005fec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e040      	b.n	8006066 <HAL_RCC_ClockConfig+0x2de>
 8005fe4:	40022000 	.word	0x40022000
 8005fe8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ff8:	4b1d      	ldr	r3, [pc, #116]	; (8006070 <HAL_RCC_ClockConfig+0x2e8>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	491a      	ldr	r1, [pc, #104]	; (8006070 <HAL_RCC_ClockConfig+0x2e8>)
 8006006:	4313      	orrs	r3, r2
 8006008:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006016:	4b16      	ldr	r3, [pc, #88]	; (8006070 <HAL_RCC_ClockConfig+0x2e8>)
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4912      	ldr	r1, [pc, #72]	; (8006070 <HAL_RCC_ClockConfig+0x2e8>)
 8006026:	4313      	orrs	r3, r2
 8006028:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800602a:	f000 f829 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 800602e:	4601      	mov	r1, r0
 8006030:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <HAL_RCC_ClockConfig+0x2e8>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006038:	22f0      	movs	r2, #240	; 0xf0
 800603a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	fa92 f2a2 	rbit	r2, r2
 8006042:	60fa      	str	r2, [r7, #12]
  return result;
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	fab2 f282 	clz	r2, r2
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	40d3      	lsrs	r3, r2
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <HAL_RCC_ClockConfig+0x2ec>)
 8006050:	5cd3      	ldrb	r3, [r2, r3]
 8006052:	fa21 f303 	lsr.w	r3, r1, r3
 8006056:	4a08      	ldr	r2, [pc, #32]	; (8006078 <HAL_RCC_ClockConfig+0x2f0>)
 8006058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800605a:	4b08      	ldr	r3, [pc, #32]	; (800607c <HAL_RCC_ClockConfig+0x2f4>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7fc fb6e 	bl	8002740 <HAL_InitTick>
  
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3778      	adds	r7, #120	; 0x78
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000
 8006074:	0800a5f4 	.word	0x0800a5f4
 8006078:	20000000 	.word	0x20000000
 800607c:	20000004 	.word	0x20000004

08006080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006080:	b480      	push	{r7}
 8006082:	b08b      	sub	sp, #44	; 0x2c
 8006084:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	2300      	movs	r3, #0
 800608c:	61bb      	str	r3, [r7, #24]
 800608e:	2300      	movs	r3, #0
 8006090:	627b      	str	r3, [r7, #36]	; 0x24
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800609a:	4b2a      	ldr	r3, [pc, #168]	; (8006144 <HAL_RCC_GetSysClockFreq+0xc4>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d002      	beq.n	80060b0 <HAL_RCC_GetSysClockFreq+0x30>
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d003      	beq.n	80060b6 <HAL_RCC_GetSysClockFreq+0x36>
 80060ae:	e03f      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80060b0:	4b25      	ldr	r3, [pc, #148]	; (8006148 <HAL_RCC_GetSysClockFreq+0xc8>)
 80060b2:	623b      	str	r3, [r7, #32]
      break;
 80060b4:	e03f      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80060bc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80060c0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	fa92 f2a2 	rbit	r2, r2
 80060c8:	607a      	str	r2, [r7, #4]
  return result;
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	fab2 f282 	clz	r2, r2
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	40d3      	lsrs	r3, r2
 80060d4:	4a1d      	ldr	r2, [pc, #116]	; (800614c <HAL_RCC_GetSysClockFreq+0xcc>)
 80060d6:	5cd3      	ldrb	r3, [r2, r3]
 80060d8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80060da:	4b1a      	ldr	r3, [pc, #104]	; (8006144 <HAL_RCC_GetSysClockFreq+0xc4>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	220f      	movs	r2, #15
 80060e4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	fa92 f2a2 	rbit	r2, r2
 80060ec:	60fa      	str	r2, [r7, #12]
  return result;
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	fab2 f282 	clz	r2, r2
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	40d3      	lsrs	r3, r2
 80060f8:	4a15      	ldr	r2, [pc, #84]	; (8006150 <HAL_RCC_GetSysClockFreq+0xd0>)
 80060fa:	5cd3      	ldrb	r3, [r2, r3]
 80060fc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d008      	beq.n	800611a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006108:	4a0f      	ldr	r2, [pc, #60]	; (8006148 <HAL_RCC_GetSysClockFreq+0xc8>)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	627b      	str	r3, [r7, #36]	; 0x24
 8006118:	e007      	b.n	800612a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800611a:	4a0b      	ldr	r2, [pc, #44]	; (8006148 <HAL_RCC_GetSysClockFreq+0xc8>)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	fb02 f303 	mul.w	r3, r2, r3
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	623b      	str	r3, [r7, #32]
      break;
 800612e:	e002      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006130:	4b05      	ldr	r3, [pc, #20]	; (8006148 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006132:	623b      	str	r3, [r7, #32]
      break;
 8006134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006136:	6a3b      	ldr	r3, [r7, #32]
}
 8006138:	4618      	mov	r0, r3
 800613a:	372c      	adds	r7, #44	; 0x2c
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	40021000 	.word	0x40021000
 8006148:	007a1200 	.word	0x007a1200
 800614c:	0800a60c 	.word	0x0800a60c
 8006150:	0800a61c 	.word	0x0800a61c

08006154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006158:	4b03      	ldr	r3, [pc, #12]	; (8006168 <HAL_RCC_GetHCLKFreq+0x14>)
 800615a:	681b      	ldr	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
 8006166:	bf00      	nop
 8006168:	20000000 	.word	0x20000000

0800616c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006172:	f7ff ffef 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 8006176:	4601      	mov	r1, r0
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006180:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006184:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	fa92 f2a2 	rbit	r2, r2
 800618c:	603a      	str	r2, [r7, #0]
  return result;
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	fab2 f282 	clz	r2, r2
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	40d3      	lsrs	r3, r2
 8006198:	4a04      	ldr	r2, [pc, #16]	; (80061ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800619a:	5cd3      	ldrb	r3, [r2, r3]
 800619c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40021000 	.word	0x40021000
 80061ac:	0800a604 	.word	0x0800a604

080061b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80061b6:	f7ff ffcd 	bl	8006154 <HAL_RCC_GetHCLKFreq>
 80061ba:	4601      	mov	r1, r0
 80061bc:	4b0b      	ldr	r3, [pc, #44]	; (80061ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80061c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80061c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	fa92 f2a2 	rbit	r2, r2
 80061d0:	603a      	str	r2, [r7, #0]
  return result;
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	fab2 f282 	clz	r2, r2
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	40d3      	lsrs	r3, r2
 80061dc:	4a04      	ldr	r2, [pc, #16]	; (80061f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80061de:	5cd3      	ldrb	r3, [r2, r3]
 80061e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80061e4:	4618      	mov	r0, r3
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40021000 	.word	0x40021000
 80061f0:	0800a604 	.word	0x0800a604

080061f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b092      	sub	sp, #72	; 0x48
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006204:	2300      	movs	r3, #0
 8006206:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80d4 	beq.w	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006218:	4b4e      	ldr	r3, [pc, #312]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10e      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006224:	4b4b      	ldr	r3, [pc, #300]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4a4a      	ldr	r2, [pc, #296]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800622a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622e:	61d3      	str	r3, [r2, #28]
 8006230:	4b48      	ldr	r3, [pc, #288]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006238:	60bb      	str	r3, [r7, #8]
 800623a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800623c:	2301      	movs	r3, #1
 800623e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006242:	4b45      	ldr	r3, [pc, #276]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d118      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800624e:	4b42      	ldr	r3, [pc, #264]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a41      	ldr	r2, [pc, #260]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006258:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800625a:	f7fc fab5 	bl	80027c8 <HAL_GetTick>
 800625e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006260:	e008      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006262:	f7fc fab1 	bl	80027c8 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b64      	cmp	r3, #100	; 0x64
 800626e:	d901      	bls.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e1d6      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006274:	4b38      	ldr	r3, [pc, #224]	; (8006358 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006280:	4b34      	ldr	r3, [pc, #208]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006282:	6a1b      	ldr	r3, [r3, #32]
 8006284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006288:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800628a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628c:	2b00      	cmp	r3, #0
 800628e:	f000 8084 	beq.w	800639a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800629a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800629c:	429a      	cmp	r2, r3
 800629e:	d07c      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062a0:	4b2c      	ldr	r3, [pc, #176]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	fa93 f3a3 	rbit	r3, r3
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062ba:	fab3 f383 	clz	r3, r3
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	4b26      	ldr	r3, [pc, #152]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	461a      	mov	r2, r3
 80062ca:	2301      	movs	r3, #1
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80062d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	fa93 f3a3 	rbit	r3, r3
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062de:	fab3 f383 	clz	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	4b1d      	ldr	r3, [pc, #116]	; (800635c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80062e8:	4413      	add	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	461a      	mov	r2, r3
 80062ee:	2300      	movs	r3, #0
 80062f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80062f2:	4a18      	ldr	r2, [pc, #96]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80062f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d04b      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006302:	f7fc fa61 	bl	80027c8 <HAL_GetTick>
 8006306:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006308:	e00a      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630a:	f7fc fa5d 	bl	80027c8 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	f241 3288 	movw	r2, #5000	; 0x1388
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e180      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006320:	2302      	movs	r3, #2
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	fa93 f3a3 	rbit	r3, r3
 800632a:	627b      	str	r3, [r7, #36]	; 0x24
 800632c:	2302      	movs	r3, #2
 800632e:	623b      	str	r3, [r7, #32]
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	fa93 f3a3 	rbit	r3, r3
 8006336:	61fb      	str	r3, [r7, #28]
  return result;
 8006338:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800633a:	fab3 f383 	clz	r3, r3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f043 0302 	orr.w	r3, r3, #2
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d108      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800634e:	4b01      	ldr	r3, [pc, #4]	; (8006354 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	e00d      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006354:	40021000 	.word	0x40021000
 8006358:	40007000 	.word	0x40007000
 800635c:	10908100 	.word	0x10908100
 8006360:	2302      	movs	r3, #2
 8006362:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	fa93 f3a3 	rbit	r3, r3
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	4b9a      	ldr	r3, [pc, #616]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2202      	movs	r2, #2
 8006372:	613a      	str	r2, [r7, #16]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	fa92 f2a2 	rbit	r2, r2
 800637a:	60fa      	str	r2, [r7, #12]
  return result;
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	fab2 f282 	clz	r2, r2
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	f002 021f 	and.w	r2, r2, #31
 800638e:	2101      	movs	r1, #1
 8006390:	fa01 f202 	lsl.w	r2, r1, r2
 8006394:	4013      	ands	r3, r2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d0b7      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800639a:	4b8f      	ldr	r3, [pc, #572]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	498c      	ldr	r1, [pc, #560]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80063ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d105      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b4:	4b88      	ldr	r3, [pc, #544]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	4a87      	ldr	r2, [pc, #540]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063cc:	4b82      	ldr	r3, [pc, #520]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d0:	f023 0203 	bic.w	r2, r3, #3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	497f      	ldr	r1, [pc, #508]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d008      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80063ea:	4b7b      	ldr	r3, [pc, #492]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	4978      	ldr	r1, [pc, #480]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d008      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006408:	4b73      	ldr	r3, [pc, #460]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	4970      	ldr	r1, [pc, #448]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006416:	4313      	orrs	r3, r2
 8006418:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d008      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006426:	4b6c      	ldr	r3, [pc, #432]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	f023 0210 	bic.w	r2, r3, #16
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	4969      	ldr	r1, [pc, #420]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006434:	4313      	orrs	r3, r2
 8006436:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006444:	4b64      	ldr	r3, [pc, #400]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006450:	4961      	ldr	r1, [pc, #388]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006452:	4313      	orrs	r3, r2
 8006454:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006462:	4b5d      	ldr	r3, [pc, #372]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006466:	f023 0220 	bic.w	r2, r3, #32
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	495a      	ldr	r1, [pc, #360]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006470:	4313      	orrs	r3, r2
 8006472:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006480:	4b55      	ldr	r3, [pc, #340]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	4952      	ldr	r1, [pc, #328]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800648e:	4313      	orrs	r3, r2
 8006490:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800649e:	4b4e      	ldr	r3, [pc, #312]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	494b      	ldr	r1, [pc, #300]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064bc:	4b46      	ldr	r3, [pc, #280]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	4943      	ldr	r1, [pc, #268]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80064da:	4b3f      	ldr	r3, [pc, #252]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	493c      	ldr	r1, [pc, #240]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d008      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80064f8:	4b37      	ldr	r3, [pc, #220]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	4934      	ldr	r1, [pc, #208]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006506:	4313      	orrs	r3, r2
 8006508:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	2b00      	cmp	r3, #0
 8006514:	d008      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006516:	4b30      	ldr	r3, [pc, #192]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	492d      	ldr	r1, [pc, #180]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006524:	4313      	orrs	r3, r2
 8006526:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006530:	2b00      	cmp	r3, #0
 8006532:	d008      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006534:	4b28      	ldr	r3, [pc, #160]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	4925      	ldr	r1, [pc, #148]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006542:	4313      	orrs	r3, r2
 8006544:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006552:	4b21      	ldr	r3, [pc, #132]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006556:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655e:	491e      	ldr	r1, [pc, #120]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006560:	4313      	orrs	r3, r2
 8006562:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006570:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	4916      	ldr	r1, [pc, #88]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800657e:	4313      	orrs	r3, r2
 8006580:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d008      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659a:	490f      	ldr	r1, [pc, #60]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800659c:	4313      	orrs	r3, r2
 800659e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b8:	4907      	ldr	r1, [pc, #28]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80065ca:	4b03      	ldr	r3, [pc, #12]	; (80065d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	e002      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80065d6:	bf00      	nop
 80065d8:	40021000 	.word	0x40021000
 80065dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065de:	4913      	ldr	r1, [pc, #76]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fc:	490b      	ldr	r1, [pc, #44]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d008      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661a:	4904      	ldr	r1, [pc, #16]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800661c:	4313      	orrs	r3, r2
 800661e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3748      	adds	r7, #72	; 0x48
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40021000 	.word	0x40021000

08006630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e040      	b.n	80066c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fb fec6 	bl	80023e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2224      	movs	r2, #36	; 0x24
 800665c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0201 	bic.w	r2, r2, #1
 800666c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f8b6 	bl	80067e0 <UART_SetConfig>
 8006674:	4603      	mov	r3, r0
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e022      	b.n	80066c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fa7e 	bl	8006b88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800669a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f042 0201 	orr.w	r2, r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fb05 	bl	8006ccc <UART_CheckIdleState>
 80066c2:	4603      	mov	r3, r0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08a      	sub	sp, #40	; 0x28
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e0:	2b20      	cmp	r3, #32
 80066e2:	d178      	bne.n	80067d6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Transmit+0x24>
 80066ea:	88fb      	ldrh	r3, [r7, #6]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e071      	b.n	80067d8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2221      	movs	r2, #33	; 0x21
 8006700:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006702:	f7fc f861 	bl	80027c8 <HAL_GetTick>
 8006706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	88fa      	ldrh	r2, [r7, #6]
 800670c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	88fa      	ldrh	r2, [r7, #6]
 8006714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006720:	d108      	bne.n	8006734 <HAL_UART_Transmit+0x68>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d104      	bne.n	8006734 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800672a:	2300      	movs	r3, #0
 800672c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e003      	b.n	800673c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006738:	2300      	movs	r3, #0
 800673a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800673c:	e030      	b.n	80067a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	9300      	str	r3, [sp, #0]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2200      	movs	r2, #0
 8006746:	2180      	movs	r1, #128	; 0x80
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fb67 	bl	8006e1c <UART_WaitOnFlagUntilTimeout>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2220      	movs	r2, #32
 8006758:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e03c      	b.n	80067d8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	881a      	ldrh	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006770:	b292      	uxth	r2, r2
 8006772:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	3302      	adds	r3, #2
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	e008      	b.n	800678e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	781a      	ldrb	r2, [r3, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	b292      	uxth	r2, r2
 8006786:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	3301      	adds	r3, #1
 800678c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1c8      	bne.n	800673e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	2200      	movs	r2, #0
 80067b4:	2140      	movs	r1, #64	; 0x40
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fb30 	bl	8006e1c <UART_WaitOnFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2220      	movs	r2, #32
 80067c6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e005      	b.n	80067d8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e000      	b.n	80067d8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80067d6:	2302      	movs	r3, #2
  }
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3720      	adds	r7, #32
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	4313      	orrs	r3, r2
 8006802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	4b92      	ldr	r3, [pc, #584]	; (8006a54 <UART_SetConfig+0x274>)
 800680c:	4013      	ands	r3, r2
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	6979      	ldr	r1, [r7, #20]
 8006814:	430b      	orrs	r3, r1
 8006816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	430a      	orrs	r2, r1
 8006850:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a80      	ldr	r2, [pc, #512]	; (8006a58 <UART_SetConfig+0x278>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d120      	bne.n	800689e <UART_SetConfig+0xbe>
 800685c:	4b7f      	ldr	r3, [pc, #508]	; (8006a5c <UART_SetConfig+0x27c>)
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	2b03      	cmp	r3, #3
 8006866:	d817      	bhi.n	8006898 <UART_SetConfig+0xb8>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <UART_SetConfig+0x90>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	08006881 	.word	0x08006881
 8006874:	0800688d 	.word	0x0800688d
 8006878:	08006893 	.word	0x08006893
 800687c:	08006887 	.word	0x08006887
 8006880:	2301      	movs	r3, #1
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e0b5      	b.n	80069f2 <UART_SetConfig+0x212>
 8006886:	2302      	movs	r3, #2
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e0b2      	b.n	80069f2 <UART_SetConfig+0x212>
 800688c:	2304      	movs	r3, #4
 800688e:	77fb      	strb	r3, [r7, #31]
 8006890:	e0af      	b.n	80069f2 <UART_SetConfig+0x212>
 8006892:	2308      	movs	r3, #8
 8006894:	77fb      	strb	r3, [r7, #31]
 8006896:	e0ac      	b.n	80069f2 <UART_SetConfig+0x212>
 8006898:	2310      	movs	r3, #16
 800689a:	77fb      	strb	r3, [r7, #31]
 800689c:	e0a9      	b.n	80069f2 <UART_SetConfig+0x212>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a6f      	ldr	r2, [pc, #444]	; (8006a60 <UART_SetConfig+0x280>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d124      	bne.n	80068f2 <UART_SetConfig+0x112>
 80068a8:	4b6c      	ldr	r3, [pc, #432]	; (8006a5c <UART_SetConfig+0x27c>)
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068b4:	d011      	beq.n	80068da <UART_SetConfig+0xfa>
 80068b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068ba:	d817      	bhi.n	80068ec <UART_SetConfig+0x10c>
 80068bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068c0:	d011      	beq.n	80068e6 <UART_SetConfig+0x106>
 80068c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068c6:	d811      	bhi.n	80068ec <UART_SetConfig+0x10c>
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <UART_SetConfig+0xf4>
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d0:	d006      	beq.n	80068e0 <UART_SetConfig+0x100>
 80068d2:	e00b      	b.n	80068ec <UART_SetConfig+0x10c>
 80068d4:	2300      	movs	r3, #0
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e08b      	b.n	80069f2 <UART_SetConfig+0x212>
 80068da:	2302      	movs	r3, #2
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e088      	b.n	80069f2 <UART_SetConfig+0x212>
 80068e0:	2304      	movs	r3, #4
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e085      	b.n	80069f2 <UART_SetConfig+0x212>
 80068e6:	2308      	movs	r3, #8
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e082      	b.n	80069f2 <UART_SetConfig+0x212>
 80068ec:	2310      	movs	r3, #16
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e07f      	b.n	80069f2 <UART_SetConfig+0x212>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a5b      	ldr	r2, [pc, #364]	; (8006a64 <UART_SetConfig+0x284>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d124      	bne.n	8006946 <UART_SetConfig+0x166>
 80068fc:	4b57      	ldr	r3, [pc, #348]	; (8006a5c <UART_SetConfig+0x27c>)
 80068fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006900:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006904:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006908:	d011      	beq.n	800692e <UART_SetConfig+0x14e>
 800690a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800690e:	d817      	bhi.n	8006940 <UART_SetConfig+0x160>
 8006910:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006914:	d011      	beq.n	800693a <UART_SetConfig+0x15a>
 8006916:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800691a:	d811      	bhi.n	8006940 <UART_SetConfig+0x160>
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <UART_SetConfig+0x148>
 8006920:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006924:	d006      	beq.n	8006934 <UART_SetConfig+0x154>
 8006926:	e00b      	b.n	8006940 <UART_SetConfig+0x160>
 8006928:	2300      	movs	r3, #0
 800692a:	77fb      	strb	r3, [r7, #31]
 800692c:	e061      	b.n	80069f2 <UART_SetConfig+0x212>
 800692e:	2302      	movs	r3, #2
 8006930:	77fb      	strb	r3, [r7, #31]
 8006932:	e05e      	b.n	80069f2 <UART_SetConfig+0x212>
 8006934:	2304      	movs	r3, #4
 8006936:	77fb      	strb	r3, [r7, #31]
 8006938:	e05b      	b.n	80069f2 <UART_SetConfig+0x212>
 800693a:	2308      	movs	r3, #8
 800693c:	77fb      	strb	r3, [r7, #31]
 800693e:	e058      	b.n	80069f2 <UART_SetConfig+0x212>
 8006940:	2310      	movs	r3, #16
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e055      	b.n	80069f2 <UART_SetConfig+0x212>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a47      	ldr	r2, [pc, #284]	; (8006a68 <UART_SetConfig+0x288>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d124      	bne.n	800699a <UART_SetConfig+0x1ba>
 8006950:	4b42      	ldr	r3, [pc, #264]	; (8006a5c <UART_SetConfig+0x27c>)
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006958:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800695c:	d011      	beq.n	8006982 <UART_SetConfig+0x1a2>
 800695e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006962:	d817      	bhi.n	8006994 <UART_SetConfig+0x1b4>
 8006964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006968:	d011      	beq.n	800698e <UART_SetConfig+0x1ae>
 800696a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800696e:	d811      	bhi.n	8006994 <UART_SetConfig+0x1b4>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <UART_SetConfig+0x19c>
 8006974:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006978:	d006      	beq.n	8006988 <UART_SetConfig+0x1a8>
 800697a:	e00b      	b.n	8006994 <UART_SetConfig+0x1b4>
 800697c:	2300      	movs	r3, #0
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e037      	b.n	80069f2 <UART_SetConfig+0x212>
 8006982:	2302      	movs	r3, #2
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e034      	b.n	80069f2 <UART_SetConfig+0x212>
 8006988:	2304      	movs	r3, #4
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e031      	b.n	80069f2 <UART_SetConfig+0x212>
 800698e:	2308      	movs	r3, #8
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e02e      	b.n	80069f2 <UART_SetConfig+0x212>
 8006994:	2310      	movs	r3, #16
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e02b      	b.n	80069f2 <UART_SetConfig+0x212>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a33      	ldr	r2, [pc, #204]	; (8006a6c <UART_SetConfig+0x28c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d124      	bne.n	80069ee <UART_SetConfig+0x20e>
 80069a4:	4b2d      	ldr	r3, [pc, #180]	; (8006a5c <UART_SetConfig+0x27c>)
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80069ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069b0:	d011      	beq.n	80069d6 <UART_SetConfig+0x1f6>
 80069b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80069b6:	d817      	bhi.n	80069e8 <UART_SetConfig+0x208>
 80069b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069bc:	d011      	beq.n	80069e2 <UART_SetConfig+0x202>
 80069be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069c2:	d811      	bhi.n	80069e8 <UART_SetConfig+0x208>
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <UART_SetConfig+0x1f0>
 80069c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069cc:	d006      	beq.n	80069dc <UART_SetConfig+0x1fc>
 80069ce:	e00b      	b.n	80069e8 <UART_SetConfig+0x208>
 80069d0:	2300      	movs	r3, #0
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e00d      	b.n	80069f2 <UART_SetConfig+0x212>
 80069d6:	2302      	movs	r3, #2
 80069d8:	77fb      	strb	r3, [r7, #31]
 80069da:	e00a      	b.n	80069f2 <UART_SetConfig+0x212>
 80069dc:	2304      	movs	r3, #4
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e007      	b.n	80069f2 <UART_SetConfig+0x212>
 80069e2:	2308      	movs	r3, #8
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e004      	b.n	80069f2 <UART_SetConfig+0x212>
 80069e8:	2310      	movs	r3, #16
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e001      	b.n	80069f2 <UART_SetConfig+0x212>
 80069ee:	2310      	movs	r3, #16
 80069f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069fa:	d16b      	bne.n	8006ad4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80069fc:	7ffb      	ldrb	r3, [r7, #31]
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	d838      	bhi.n	8006a74 <UART_SetConfig+0x294>
 8006a02:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <UART_SetConfig+0x228>)
 8006a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a08:	08006a2d 	.word	0x08006a2d
 8006a0c:	08006a35 	.word	0x08006a35
 8006a10:	08006a3d 	.word	0x08006a3d
 8006a14:	08006a75 	.word	0x08006a75
 8006a18:	08006a43 	.word	0x08006a43
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	08006a75 	.word	0x08006a75
 8006a28:	08006a4b 	.word	0x08006a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a2c:	f7ff fb9e 	bl	800616c <HAL_RCC_GetPCLK1Freq>
 8006a30:	61b8      	str	r0, [r7, #24]
        break;
 8006a32:	e024      	b.n	8006a7e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a34:	f7ff fbbc 	bl	80061b0 <HAL_RCC_GetPCLK2Freq>
 8006a38:	61b8      	str	r0, [r7, #24]
        break;
 8006a3a:	e020      	b.n	8006a7e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <UART_SetConfig+0x290>)
 8006a3e:	61bb      	str	r3, [r7, #24]
        break;
 8006a40:	e01d      	b.n	8006a7e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a42:	f7ff fb1d 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8006a46:	61b8      	str	r0, [r7, #24]
        break;
 8006a48:	e019      	b.n	8006a7e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a4e:	61bb      	str	r3, [r7, #24]
        break;
 8006a50:	e015      	b.n	8006a7e <UART_SetConfig+0x29e>
 8006a52:	bf00      	nop
 8006a54:	efff69f3 	.word	0xefff69f3
 8006a58:	40013800 	.word	0x40013800
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40004400 	.word	0x40004400
 8006a64:	40004800 	.word	0x40004800
 8006a68:	40004c00 	.word	0x40004c00
 8006a6c:	40005000 	.word	0x40005000
 8006a70:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	77bb      	strb	r3, [r7, #30]
        break;
 8006a7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d073      	beq.n	8006b6c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	005a      	lsls	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	441a      	add	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	2b0f      	cmp	r3, #15
 8006a9e:	d916      	bls.n	8006ace <UART_SetConfig+0x2ee>
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa6:	d212      	bcs.n	8006ace <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f023 030f 	bic.w	r3, r3, #15
 8006ab0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	89fb      	ldrh	r3, [r7, #14]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	89fa      	ldrh	r2, [r7, #14]
 8006aca:	60da      	str	r2, [r3, #12]
 8006acc:	e04e      	b.n	8006b6c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	77bb      	strb	r3, [r7, #30]
 8006ad2:	e04b      	b.n	8006b6c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ad4:	7ffb      	ldrb	r3, [r7, #31]
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d827      	bhi.n	8006b2a <UART_SetConfig+0x34a>
 8006ada:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <UART_SetConfig+0x300>)
 8006adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae0:	08006b05 	.word	0x08006b05
 8006ae4:	08006b0d 	.word	0x08006b0d
 8006ae8:	08006b15 	.word	0x08006b15
 8006aec:	08006b2b 	.word	0x08006b2b
 8006af0:	08006b1b 	.word	0x08006b1b
 8006af4:	08006b2b 	.word	0x08006b2b
 8006af8:	08006b2b 	.word	0x08006b2b
 8006afc:	08006b2b 	.word	0x08006b2b
 8006b00:	08006b23 	.word	0x08006b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b04:	f7ff fb32 	bl	800616c <HAL_RCC_GetPCLK1Freq>
 8006b08:	61b8      	str	r0, [r7, #24]
        break;
 8006b0a:	e013      	b.n	8006b34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b0c:	f7ff fb50 	bl	80061b0 <HAL_RCC_GetPCLK2Freq>
 8006b10:	61b8      	str	r0, [r7, #24]
        break;
 8006b12:	e00f      	b.n	8006b34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b14:	4b1b      	ldr	r3, [pc, #108]	; (8006b84 <UART_SetConfig+0x3a4>)
 8006b16:	61bb      	str	r3, [r7, #24]
        break;
 8006b18:	e00c      	b.n	8006b34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1a:	f7ff fab1 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 8006b1e:	61b8      	str	r0, [r7, #24]
        break;
 8006b20:	e008      	b.n	8006b34 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b26:	61bb      	str	r3, [r7, #24]
        break;
 8006b28:	e004      	b.n	8006b34 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	77bb      	strb	r3, [r7, #30]
        break;
 8006b32:	bf00      	nop
    }

    if (pclk != 0U)
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d018      	beq.n	8006b6c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	085a      	lsrs	r2, r3, #1
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	441a      	add	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	2b0f      	cmp	r3, #15
 8006b52:	d909      	bls.n	8006b68 <UART_SetConfig+0x388>
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b5a:	d205      	bcs.n	8006b68 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60da      	str	r2, [r3, #12]
 8006b66:	e001      	b.n	8006b6c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b78:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3720      	adds	r7, #32
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	007a1200 	.word	0x007a1200

08006b88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d00a      	beq.n	8006bd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	f003 0308 	and.w	r3, r3, #8
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d01a      	beq.n	8006c9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c86:	d10a      	bne.n	8006c9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	605a      	str	r2, [r3, #4]
  }
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b098      	sub	sp, #96	; 0x60
 8006cd0:	af02      	add	r7, sp, #8
 8006cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cdc:	f7fb fd74 	bl	80027c8 <HAL_GetTick>
 8006ce0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0308 	and.w	r3, r3, #8
 8006cec:	2b08      	cmp	r3, #8
 8006cee:	d12e      	bne.n	8006d4e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f88c 	bl	8006e1c <UART_WaitOnFlagUntilTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d021      	beq.n	8006d4e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	461a      	mov	r2, r3
 8006d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d28:	647b      	str	r3, [r7, #68]	; 0x44
 8006d2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e6      	bne.n	8006d0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e062      	b.n	8006e14 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f003 0304 	and.w	r3, r3, #4
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d149      	bne.n	8006df0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d64:	2200      	movs	r2, #0
 8006d66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f856 	bl	8006e1c <UART_WaitOnFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d03c      	beq.n	8006df0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7e:	e853 3f00 	ldrex	r3, [r3]
 8006d82:	623b      	str	r3, [r7, #32]
   return(result);
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	461a      	mov	r2, r3
 8006d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d94:	633b      	str	r3, [r7, #48]	; 0x30
 8006d96:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9c:	e841 2300 	strex	r3, r2, [r1]
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d1e6      	bne.n	8006d76 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	e853 3f00 	ldrex	r3, [r3]
 8006db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dc8:	61fa      	str	r2, [r7, #28]
 8006dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dcc:	69b9      	ldr	r1, [r7, #24]
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	e841 2300 	strex	r3, r2, [r1]
 8006dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1e5      	bne.n	8006da8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e011      	b.n	8006e14 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2220      	movs	r2, #32
 8006df4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3758      	adds	r7, #88	; 0x58
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	603b      	str	r3, [r7, #0]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e2c:	e049      	b.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e34:	d045      	beq.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e36:	f7fb fcc7 	bl	80027c8 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d302      	bcc.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e048      	b.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0304 	and.w	r3, r3, #4
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d031      	beq.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	f003 0308 	and.w	r3, r3, #8
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d110      	bne.n	8006e8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2208      	movs	r2, #8
 8006e72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f000 f838 	bl	8006eea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2208      	movs	r2, #8
 8006e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e029      	b.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e9c:	d111      	bne.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ea6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f81e 	bl	8006eea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e00f      	b.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	bf0c      	ite	eq
 8006ed2:	2301      	moveq	r3, #1
 8006ed4:	2300      	movne	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d0a6      	beq.n	8006e2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b095      	sub	sp, #84	; 0x54
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f10:	643b      	str	r3, [r7, #64]	; 0x40
 8006f12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e6      	bne.n	8006ef2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e5      	bne.n	8006f24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d118      	bne.n	8006f92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f023 0310 	bic.w	r3, r3, #16
 8006f74:	647b      	str	r3, [r7, #68]	; 0x44
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6979      	ldr	r1, [r7, #20]
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e6      	bne.n	8006f60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fa6:	bf00      	nop
 8006fa8:	3754      	adds	r7, #84	; 0x54
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <_ZN4blib6ButtonC1Ev>:
#include "Button.h"
#include "Monitor.h"

namespace blib
{
    Button::Button()
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f8fa 	bl	80071b8 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 8006fc4:	4a03      	ldr	r2, [pc, #12]	; (8006fd4 <_ZN4blib6ButtonC1Ev+0x20>)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
    {

    }
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	0800a634 	.word	0x0800a634

08006fd8 <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	4a05      	ldr	r2, [pc, #20]	; (8006ff8 <_ZN4blib6ButtonD1Ev+0x20>)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 f8f5 	bl	80071d8 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
    {

    }
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	0800a634 	.word	0x0800a634

08006ffc <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
    }
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff ffe7 	bl	8006fd8 <_ZN4blib6ButtonD1Ev>
 800700a:	2108      	movs	r1, #8
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f903 	bl	8007218 <_ZdlPvj>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	605a      	str	r2, [r3, #4]
    }
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
        return mLatestPressedButton;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
    }
 8007044:	4618      	mov	r0, r3
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
        auto &monitor = Monitor::getInstance();
 8007058:	f7fb f88c 	bl	8002174 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 800705c:	60b8      	str	r0, [r7, #8]

        // In display mode
        if (monitor.getSetttingMode() == false)
 800705e:	68b8      	ldr	r0, [r7, #8]
 8007060:	f7fa f9d1 	bl	8001406 <_ZNK4blib7Monitor15getSetttingModeEv>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	bf0c      	ite	eq
 800706a:	2301      	moveq	r3, #1
 800706c:	2300      	movne	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d06b      	beq.n	800714c <_ZN4blib6Button12handleSignalEv+0xfc>
        {
            switch (monitor.getDisplayLevel())
 8007074:	68b8      	ldr	r0, [r7, #8]
 8007076:	f7fa fa41 	bl	80014fc <_ZNK4blib7Monitor15getDisplayLevelEv>
 800707a:	4603      	mov	r3, r0
 800707c:	2b06      	cmp	r3, #6
 800707e:	d019      	beq.n	80070b4 <_ZN4blib6Button12handleSignalEv+0x64>
 8007080:	2b06      	cmp	r3, #6
 8007082:	dc31      	bgt.n	80070e8 <_ZN4blib6Button12handleSignalEv+0x98>
 8007084:	2b04      	cmp	r3, #4
 8007086:	dc02      	bgt.n	800708e <_ZN4blib6Button12handleSignalEv+0x3e>
 8007088:	2b00      	cmp	r3, #0
 800708a:	da2f      	bge.n	80070ec <_ZN4blib6Button12handleSignalEv+0x9c>

                    }

                default:

                    break;
 800708c:	e02c      	b.n	80070e8 <_ZN4blib6Button12handleSignalEv+0x98>
            switch (monitor.getDisplayLevel())
 800708e:	2b05      	cmp	r3, #5
 8007090:	d000      	beq.n	8007094 <_ZN4blib6Button12handleSignalEv+0x44>
                    break;
 8007092:	e029      	b.n	80070e8 <_ZN4blib6Button12handleSignalEv+0x98>
                    if (getLatestPressedButton() == ButtonName::SELECT)
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff ffcf 	bl	8007038 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800709a:	4603      	mov	r3, r0
 800709c:	2b04      	cmp	r3, #4
 800709e:	bf0c      	ite	eq
 80070a0:	2301      	moveq	r3, #1
 80070a2:	2300      	movne	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d022      	beq.n	80070f0 <_ZN4blib6Button12handleSignalEv+0xa0>
                        monitor.setSettingMode(true);
 80070aa:	2101      	movs	r1, #1
 80070ac:	68b8      	ldr	r0, [r7, #8]
 80070ae:	f7fa f99b 	bl	80013e8 <_ZN4blib7Monitor14setSettingModeEb>
                    break;
 80070b2:	e01d      	b.n	80070f0 <_ZN4blib6Button12handleSignalEv+0xa0>
                    if (monitor.getFactoryReset() == false)
 80070b4:	68b8      	ldr	r0, [r7, #8]
 80070b6:	f7fa f9c2 	bl	800143e <_ZNK4blib7Monitor15getFactoryResetEv>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bf0c      	ite	eq
 80070c0:	2301      	moveq	r3, #1
 80070c2:	2300      	movne	r3, #0
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <_ZN4blib6Button12handleSignalEv+0x98>
                        if (getLatestPressedButton() == ButtonName::SELECT)
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff ffb4 	bl	8007038 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	bf0c      	ite	eq
 80070d6:	2301      	moveq	r3, #1
 80070d8:	2300      	movne	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <_ZN4blib6Button12handleSignalEv+0x98>
                            monitor.setFactoryReset(true);
 80070e0:	2101      	movs	r1, #1
 80070e2:	68b8      	ldr	r0, [r7, #8]
 80070e4:	f7fa f99c 	bl	8001420 <_ZN4blib7Monitor15setFactoryResetEb>
                    break;
 80070e8:	bf00      	nop
 80070ea:	e002      	b.n	80070f2 <_ZN4blib6Button12handleSignalEv+0xa2>
                    break;
 80070ec:	bf00      	nop
 80070ee:	e000      	b.n	80070f2 <_ZN4blib6Button12handleSignalEv+0xa2>
                    break;
 80070f0:	bf00      	nop
            }

            uint8_t u8DisplayLevel = 0;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]

            // Press left button - go to previous screen
            if (getLatestPressedButton() == ButtonName::LEFT)
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7ff ff9e 	bl	8007038 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b01      	cmp	r3, #1
 8007100:	bf0c      	ite	eq
 8007102:	2301      	moveq	r3, #1
 8007104:	2300      	movne	r3, #0
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <_ZN4blib6Button12handleSignalEv+0xcc>
            {
                u8DisplayLevel = (uint8_t) monitor.getDisplayLevel() - 1;
 800710c:	68b8      	ldr	r0, [r7, #8]
 800710e:	f7fa f9f5 	bl	80014fc <_ZNK4blib7Monitor15getDisplayLevelEv>
 8007112:	4603      	mov	r3, r0
 8007114:	b2db      	uxtb	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	73fb      	strb	r3, [r7, #15]
 800711a:	e011      	b.n	8007140 <_ZN4blib6Button12handleSignalEv+0xf0>
            }
            // Press right buton - go to next screen
            else if (getLatestPressedButton() == ButtonName::RIGHT)
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff ff8b 	bl	8007038 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8007122:	4603      	mov	r3, r0
 8007124:	2b02      	cmp	r3, #2
 8007126:	bf0c      	ite	eq
 8007128:	2301      	moveq	r3, #1
 800712a:	2300      	movne	r3, #0
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d006      	beq.n	8007140 <_ZN4blib6Button12handleSignalEv+0xf0>
            {
                u8DisplayLevel = (uint8_t) monitor.getDisplayLevel() + 1;
 8007132:	68b8      	ldr	r0, [r7, #8]
 8007134:	f7fa f9e2 	bl	80014fc <_ZNK4blib7Monitor15getDisplayLevelEv>
 8007138:	4603      	mov	r3, r0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	3301      	adds	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
            }

            monitor.setDisplayLevel((Monitor::DisplayLevel) u8DisplayLevel);
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	4619      	mov	r1, r3
 8007144:	68b8      	ldr	r0, [r7, #8]
 8007146:	f7fa f9c4 	bl	80014d2 <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() + 1;
            }

            monitor.setSettingLevel((Monitor::SettingLevel) u8SettingLevel);
        }
    }
 800714a:	e031      	b.n	80071b0 <_ZN4blib6Button12handleSignalEv+0x160>
            switch (monitor.getSettingLevel())
 800714c:	68b8      	ldr	r0, [r7, #8]
 800714e:	f7fa f9b4 	bl	80014ba <_ZNK4blib7Monitor15getSettingLevelEv>
 8007152:	4603      	mov	r3, r0
 8007154:	2b07      	cmp	r3, #7
                    break;
 8007156:	bf00      	nop
            uint8_t u8SettingLevel = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	73bb      	strb	r3, [r7, #14]
            if (getLatestPressedButton() == ButtonName::LEFT)
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff ff6b 	bl	8007038 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8007162:	4603      	mov	r3, r0
 8007164:	2b01      	cmp	r3, #1
 8007166:	bf0c      	ite	eq
 8007168:	2301      	moveq	r3, #1
 800716a:	2300      	movne	r3, #0
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <_ZN4blib6Button12handleSignalEv+0x132>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() - 1;
 8007172:	68b8      	ldr	r0, [r7, #8]
 8007174:	f7fa f9a1 	bl	80014ba <_ZNK4blib7Monitor15getSettingLevelEv>
 8007178:	4603      	mov	r3, r0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	3b01      	subs	r3, #1
 800717e:	73bb      	strb	r3, [r7, #14]
 8007180:	e011      	b.n	80071a6 <_ZN4blib6Button12handleSignalEv+0x156>
            else if (getLatestPressedButton() == ButtonName::RIGHT)
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7ff ff58 	bl	8007038 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8007188:	4603      	mov	r3, r0
 800718a:	2b02      	cmp	r3, #2
 800718c:	bf0c      	ite	eq
 800718e:	2301      	moveq	r3, #1
 8007190:	2300      	movne	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d006      	beq.n	80071a6 <_ZN4blib6Button12handleSignalEv+0x156>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() + 1;
 8007198:	68b8      	ldr	r0, [r7, #8]
 800719a:	f7fa f98e 	bl	80014ba <_ZNK4blib7Monitor15getSettingLevelEv>
 800719e:	4603      	mov	r3, r0
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	3301      	adds	r3, #1
 80071a4:	73bb      	strb	r3, [r7, #14]
            monitor.setSettingLevel((Monitor::SettingLevel) u8SettingLevel);
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	4619      	mov	r1, r3
 80071aa:	68b8      	ldr	r0, [r7, #8]
 80071ac:	f7fa f970 	bl	8001490 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>
    }
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
                {
 80071c0:	4a04      	ldr	r2, [pc, #16]	; (80071d4 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	601a      	str	r2, [r3, #0]
                }
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	0800a644 	.word	0x0800a644

080071d8 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
                }
 80071e0:	4a04      	ldr	r2, [pc, #16]	; (80071f4 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4618      	mov	r0, r3
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	0800a644 	.word	0x0800a644

080071f8 <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
                }
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ffe9 	bl	80071d8 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 8007206:	2104      	movs	r1, #4
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f805 	bl	8007218 <_ZdlPvj>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <_ZdlPvj>:
 8007218:	f000 b811 	b.w	800723e <_ZdlPv>

0800721c <_Znwj>:
 800721c:	2801      	cmp	r0, #1
 800721e:	bf38      	it	cc
 8007220:	2001      	movcc	r0, #1
 8007222:	b510      	push	{r4, lr}
 8007224:	4604      	mov	r4, r0
 8007226:	4620      	mov	r0, r4
 8007228:	f000 f81c 	bl	8007264 <malloc>
 800722c:	b100      	cbz	r0, 8007230 <_Znwj+0x14>
 800722e:	bd10      	pop	{r4, pc}
 8007230:	f000 f808 	bl	8007244 <_ZSt15get_new_handlerv>
 8007234:	b908      	cbnz	r0, 800723a <_Znwj+0x1e>
 8007236:	f000 f80d 	bl	8007254 <abort>
 800723a:	4780      	blx	r0
 800723c:	e7f3      	b.n	8007226 <_Znwj+0xa>

0800723e <_ZdlPv>:
 800723e:	f000 b819 	b.w	8007274 <free>
	...

08007244 <_ZSt15get_new_handlerv>:
 8007244:	4b02      	ldr	r3, [pc, #8]	; (8007250 <_ZSt15get_new_handlerv+0xc>)
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	f3bf 8f5b 	dmb	ish
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	20000784 	.word	0x20000784

08007254 <abort>:
 8007254:	b508      	push	{r3, lr}
 8007256:	2006      	movs	r0, #6
 8007258:	f000 fe90 	bl	8007f7c <raise>
 800725c:	2001      	movs	r0, #1
 800725e:	f7fb f96f 	bl	8002540 <_exit>
	...

08007264 <malloc>:
 8007264:	4b02      	ldr	r3, [pc, #8]	; (8007270 <malloc+0xc>)
 8007266:	4601      	mov	r1, r0
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	f000 b82b 	b.w	80072c4 <_malloc_r>
 800726e:	bf00      	nop
 8007270:	20000068 	.word	0x20000068

08007274 <free>:
 8007274:	4b02      	ldr	r3, [pc, #8]	; (8007280 <free+0xc>)
 8007276:	4601      	mov	r1, r0
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	f001 bd9f 	b.w	8008dbc <_free_r>
 800727e:	bf00      	nop
 8007280:	20000068 	.word	0x20000068

08007284 <sbrk_aligned>:
 8007284:	b570      	push	{r4, r5, r6, lr}
 8007286:	4e0e      	ldr	r6, [pc, #56]	; (80072c0 <sbrk_aligned+0x3c>)
 8007288:	460c      	mov	r4, r1
 800728a:	6831      	ldr	r1, [r6, #0]
 800728c:	4605      	mov	r5, r0
 800728e:	b911      	cbnz	r1, 8007296 <sbrk_aligned+0x12>
 8007290:	f000 fec8 	bl	8008024 <_sbrk_r>
 8007294:	6030      	str	r0, [r6, #0]
 8007296:	4621      	mov	r1, r4
 8007298:	4628      	mov	r0, r5
 800729a:	f000 fec3 	bl	8008024 <_sbrk_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	d00a      	beq.n	80072b8 <sbrk_aligned+0x34>
 80072a2:	1cc4      	adds	r4, r0, #3
 80072a4:	f024 0403 	bic.w	r4, r4, #3
 80072a8:	42a0      	cmp	r0, r4
 80072aa:	d007      	beq.n	80072bc <sbrk_aligned+0x38>
 80072ac:	1a21      	subs	r1, r4, r0
 80072ae:	4628      	mov	r0, r5
 80072b0:	f000 feb8 	bl	8008024 <_sbrk_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	d101      	bne.n	80072bc <sbrk_aligned+0x38>
 80072b8:	f04f 34ff 	mov.w	r4, #4294967295
 80072bc:	4620      	mov	r0, r4
 80072be:	bd70      	pop	{r4, r5, r6, pc}
 80072c0:	2000078c 	.word	0x2000078c

080072c4 <_malloc_r>:
 80072c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c8:	1ccd      	adds	r5, r1, #3
 80072ca:	f025 0503 	bic.w	r5, r5, #3
 80072ce:	3508      	adds	r5, #8
 80072d0:	2d0c      	cmp	r5, #12
 80072d2:	bf38      	it	cc
 80072d4:	250c      	movcc	r5, #12
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	4607      	mov	r7, r0
 80072da:	db01      	blt.n	80072e0 <_malloc_r+0x1c>
 80072dc:	42a9      	cmp	r1, r5
 80072de:	d905      	bls.n	80072ec <_malloc_r+0x28>
 80072e0:	230c      	movs	r3, #12
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	2600      	movs	r6, #0
 80072e6:	4630      	mov	r0, r6
 80072e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80073c0 <_malloc_r+0xfc>
 80072f0:	f000 f868 	bl	80073c4 <__malloc_lock>
 80072f4:	f8d8 3000 	ldr.w	r3, [r8]
 80072f8:	461c      	mov	r4, r3
 80072fa:	bb5c      	cbnz	r4, 8007354 <_malloc_r+0x90>
 80072fc:	4629      	mov	r1, r5
 80072fe:	4638      	mov	r0, r7
 8007300:	f7ff ffc0 	bl	8007284 <sbrk_aligned>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	4604      	mov	r4, r0
 8007308:	d155      	bne.n	80073b6 <_malloc_r+0xf2>
 800730a:	f8d8 4000 	ldr.w	r4, [r8]
 800730e:	4626      	mov	r6, r4
 8007310:	2e00      	cmp	r6, #0
 8007312:	d145      	bne.n	80073a0 <_malloc_r+0xdc>
 8007314:	2c00      	cmp	r4, #0
 8007316:	d048      	beq.n	80073aa <_malloc_r+0xe6>
 8007318:	6823      	ldr	r3, [r4, #0]
 800731a:	4631      	mov	r1, r6
 800731c:	4638      	mov	r0, r7
 800731e:	eb04 0903 	add.w	r9, r4, r3
 8007322:	f000 fe7f 	bl	8008024 <_sbrk_r>
 8007326:	4581      	cmp	r9, r0
 8007328:	d13f      	bne.n	80073aa <_malloc_r+0xe6>
 800732a:	6821      	ldr	r1, [r4, #0]
 800732c:	1a6d      	subs	r5, r5, r1
 800732e:	4629      	mov	r1, r5
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ffa7 	bl	8007284 <sbrk_aligned>
 8007336:	3001      	adds	r0, #1
 8007338:	d037      	beq.n	80073aa <_malloc_r+0xe6>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	442b      	add	r3, r5
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	f8d8 3000 	ldr.w	r3, [r8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d038      	beq.n	80073ba <_malloc_r+0xf6>
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	42a2      	cmp	r2, r4
 800734c:	d12b      	bne.n	80073a6 <_malloc_r+0xe2>
 800734e:	2200      	movs	r2, #0
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e00f      	b.n	8007374 <_malloc_r+0xb0>
 8007354:	6822      	ldr	r2, [r4, #0]
 8007356:	1b52      	subs	r2, r2, r5
 8007358:	d41f      	bmi.n	800739a <_malloc_r+0xd6>
 800735a:	2a0b      	cmp	r2, #11
 800735c:	d917      	bls.n	800738e <_malloc_r+0xca>
 800735e:	1961      	adds	r1, r4, r5
 8007360:	42a3      	cmp	r3, r4
 8007362:	6025      	str	r5, [r4, #0]
 8007364:	bf18      	it	ne
 8007366:	6059      	strne	r1, [r3, #4]
 8007368:	6863      	ldr	r3, [r4, #4]
 800736a:	bf08      	it	eq
 800736c:	f8c8 1000 	streq.w	r1, [r8]
 8007370:	5162      	str	r2, [r4, r5]
 8007372:	604b      	str	r3, [r1, #4]
 8007374:	4638      	mov	r0, r7
 8007376:	f104 060b 	add.w	r6, r4, #11
 800737a:	f000 f829 	bl	80073d0 <__malloc_unlock>
 800737e:	f026 0607 	bic.w	r6, r6, #7
 8007382:	1d23      	adds	r3, r4, #4
 8007384:	1af2      	subs	r2, r6, r3
 8007386:	d0ae      	beq.n	80072e6 <_malloc_r+0x22>
 8007388:	1b9b      	subs	r3, r3, r6
 800738a:	50a3      	str	r3, [r4, r2]
 800738c:	e7ab      	b.n	80072e6 <_malloc_r+0x22>
 800738e:	42a3      	cmp	r3, r4
 8007390:	6862      	ldr	r2, [r4, #4]
 8007392:	d1dd      	bne.n	8007350 <_malloc_r+0x8c>
 8007394:	f8c8 2000 	str.w	r2, [r8]
 8007398:	e7ec      	b.n	8007374 <_malloc_r+0xb0>
 800739a:	4623      	mov	r3, r4
 800739c:	6864      	ldr	r4, [r4, #4]
 800739e:	e7ac      	b.n	80072fa <_malloc_r+0x36>
 80073a0:	4634      	mov	r4, r6
 80073a2:	6876      	ldr	r6, [r6, #4]
 80073a4:	e7b4      	b.n	8007310 <_malloc_r+0x4c>
 80073a6:	4613      	mov	r3, r2
 80073a8:	e7cc      	b.n	8007344 <_malloc_r+0x80>
 80073aa:	230c      	movs	r3, #12
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	4638      	mov	r0, r7
 80073b0:	f000 f80e 	bl	80073d0 <__malloc_unlock>
 80073b4:	e797      	b.n	80072e6 <_malloc_r+0x22>
 80073b6:	6025      	str	r5, [r4, #0]
 80073b8:	e7dc      	b.n	8007374 <_malloc_r+0xb0>
 80073ba:	605b      	str	r3, [r3, #4]
 80073bc:	deff      	udf	#255	; 0xff
 80073be:	bf00      	nop
 80073c0:	20000788 	.word	0x20000788

080073c4 <__malloc_lock>:
 80073c4:	4801      	ldr	r0, [pc, #4]	; (80073cc <__malloc_lock+0x8>)
 80073c6:	f000 be7a 	b.w	80080be <__retarget_lock_acquire_recursive>
 80073ca:	bf00      	nop
 80073cc:	200008d0 	.word	0x200008d0

080073d0 <__malloc_unlock>:
 80073d0:	4801      	ldr	r0, [pc, #4]	; (80073d8 <__malloc_unlock+0x8>)
 80073d2:	f000 be75 	b.w	80080c0 <__retarget_lock_release_recursive>
 80073d6:	bf00      	nop
 80073d8:	200008d0 	.word	0x200008d0

080073dc <__cvt>:
 80073dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e0:	ec55 4b10 	vmov	r4, r5, d0
 80073e4:	2d00      	cmp	r5, #0
 80073e6:	460e      	mov	r6, r1
 80073e8:	4619      	mov	r1, r3
 80073ea:	462b      	mov	r3, r5
 80073ec:	bfbb      	ittet	lt
 80073ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073f2:	461d      	movlt	r5, r3
 80073f4:	2300      	movge	r3, #0
 80073f6:	232d      	movlt	r3, #45	; 0x2d
 80073f8:	700b      	strb	r3, [r1, #0]
 80073fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007400:	4691      	mov	r9, r2
 8007402:	f023 0820 	bic.w	r8, r3, #32
 8007406:	bfbc      	itt	lt
 8007408:	4622      	movlt	r2, r4
 800740a:	4614      	movlt	r4, r2
 800740c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007410:	d005      	beq.n	800741e <__cvt+0x42>
 8007412:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007416:	d100      	bne.n	800741a <__cvt+0x3e>
 8007418:	3601      	adds	r6, #1
 800741a:	2102      	movs	r1, #2
 800741c:	e000      	b.n	8007420 <__cvt+0x44>
 800741e:	2103      	movs	r1, #3
 8007420:	ab03      	add	r3, sp, #12
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	ab02      	add	r3, sp, #8
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	ec45 4b10 	vmov	d0, r4, r5
 800742c:	4653      	mov	r3, sl
 800742e:	4632      	mov	r2, r6
 8007430:	f000 fed2 	bl	80081d8 <_dtoa_r>
 8007434:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007438:	4607      	mov	r7, r0
 800743a:	d102      	bne.n	8007442 <__cvt+0x66>
 800743c:	f019 0f01 	tst.w	r9, #1
 8007440:	d022      	beq.n	8007488 <__cvt+0xac>
 8007442:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007446:	eb07 0906 	add.w	r9, r7, r6
 800744a:	d110      	bne.n	800746e <__cvt+0x92>
 800744c:	783b      	ldrb	r3, [r7, #0]
 800744e:	2b30      	cmp	r3, #48	; 0x30
 8007450:	d10a      	bne.n	8007468 <__cvt+0x8c>
 8007452:	2200      	movs	r2, #0
 8007454:	2300      	movs	r3, #0
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800745e:	b918      	cbnz	r0, 8007468 <__cvt+0x8c>
 8007460:	f1c6 0601 	rsb	r6, r6, #1
 8007464:	f8ca 6000 	str.w	r6, [sl]
 8007468:	f8da 3000 	ldr.w	r3, [sl]
 800746c:	4499      	add	r9, r3
 800746e:	2200      	movs	r2, #0
 8007470:	2300      	movs	r3, #0
 8007472:	4620      	mov	r0, r4
 8007474:	4629      	mov	r1, r5
 8007476:	f7f9 fb2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800747a:	b108      	cbz	r0, 8007480 <__cvt+0xa4>
 800747c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007480:	2230      	movs	r2, #48	; 0x30
 8007482:	9b03      	ldr	r3, [sp, #12]
 8007484:	454b      	cmp	r3, r9
 8007486:	d307      	bcc.n	8007498 <__cvt+0xbc>
 8007488:	9b03      	ldr	r3, [sp, #12]
 800748a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800748c:	1bdb      	subs	r3, r3, r7
 800748e:	4638      	mov	r0, r7
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	b004      	add	sp, #16
 8007494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007498:	1c59      	adds	r1, r3, #1
 800749a:	9103      	str	r1, [sp, #12]
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e7f0      	b.n	8007482 <__cvt+0xa6>

080074a0 <__exponent>:
 80074a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074a2:	4603      	mov	r3, r0
 80074a4:	2900      	cmp	r1, #0
 80074a6:	bfb8      	it	lt
 80074a8:	4249      	neglt	r1, r1
 80074aa:	f803 2b02 	strb.w	r2, [r3], #2
 80074ae:	bfb4      	ite	lt
 80074b0:	222d      	movlt	r2, #45	; 0x2d
 80074b2:	222b      	movge	r2, #43	; 0x2b
 80074b4:	2909      	cmp	r1, #9
 80074b6:	7042      	strb	r2, [r0, #1]
 80074b8:	dd2a      	ble.n	8007510 <__exponent+0x70>
 80074ba:	f10d 0207 	add.w	r2, sp, #7
 80074be:	4617      	mov	r7, r2
 80074c0:	260a      	movs	r6, #10
 80074c2:	4694      	mov	ip, r2
 80074c4:	fb91 f5f6 	sdiv	r5, r1, r6
 80074c8:	fb06 1415 	mls	r4, r6, r5, r1
 80074cc:	3430      	adds	r4, #48	; 0x30
 80074ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074d2:	460c      	mov	r4, r1
 80074d4:	2c63      	cmp	r4, #99	; 0x63
 80074d6:	f102 32ff 	add.w	r2, r2, #4294967295
 80074da:	4629      	mov	r1, r5
 80074dc:	dcf1      	bgt.n	80074c2 <__exponent+0x22>
 80074de:	3130      	adds	r1, #48	; 0x30
 80074e0:	f1ac 0402 	sub.w	r4, ip, #2
 80074e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074e8:	1c41      	adds	r1, r0, #1
 80074ea:	4622      	mov	r2, r4
 80074ec:	42ba      	cmp	r2, r7
 80074ee:	d30a      	bcc.n	8007506 <__exponent+0x66>
 80074f0:	f10d 0209 	add.w	r2, sp, #9
 80074f4:	eba2 020c 	sub.w	r2, r2, ip
 80074f8:	42bc      	cmp	r4, r7
 80074fa:	bf88      	it	hi
 80074fc:	2200      	movhi	r2, #0
 80074fe:	4413      	add	r3, r2
 8007500:	1a18      	subs	r0, r3, r0
 8007502:	b003      	add	sp, #12
 8007504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007506:	f812 5b01 	ldrb.w	r5, [r2], #1
 800750a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800750e:	e7ed      	b.n	80074ec <__exponent+0x4c>
 8007510:	2330      	movs	r3, #48	; 0x30
 8007512:	3130      	adds	r1, #48	; 0x30
 8007514:	7083      	strb	r3, [r0, #2]
 8007516:	70c1      	strb	r1, [r0, #3]
 8007518:	1d03      	adds	r3, r0, #4
 800751a:	e7f1      	b.n	8007500 <__exponent+0x60>

0800751c <_printf_float>:
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	ed2d 8b02 	vpush	{d8}
 8007524:	b08d      	sub	sp, #52	; 0x34
 8007526:	460c      	mov	r4, r1
 8007528:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800752c:	4616      	mov	r6, r2
 800752e:	461f      	mov	r7, r3
 8007530:	4605      	mov	r5, r0
 8007532:	f000 fd2b 	bl	8007f8c <_localeconv_r>
 8007536:	f8d0 a000 	ldr.w	sl, [r0]
 800753a:	4650      	mov	r0, sl
 800753c:	f7f8 fea0 	bl	8000280 <strlen>
 8007540:	2300      	movs	r3, #0
 8007542:	930a      	str	r3, [sp, #40]	; 0x28
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	9305      	str	r3, [sp, #20]
 8007548:	f8d8 3000 	ldr.w	r3, [r8]
 800754c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007550:	3307      	adds	r3, #7
 8007552:	f023 0307 	bic.w	r3, r3, #7
 8007556:	f103 0208 	add.w	r2, r3, #8
 800755a:	f8c8 2000 	str.w	r2, [r8]
 800755e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007562:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	f8cd 8018 	str.w	r8, [sp, #24]
 800756c:	ee08 0a10 	vmov	s16, r0
 8007570:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007578:	4b9e      	ldr	r3, [pc, #632]	; (80077f4 <_printf_float+0x2d8>)
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	f7f9 fadd 	bl	8000b3c <__aeabi_dcmpun>
 8007582:	bb88      	cbnz	r0, 80075e8 <_printf_float+0xcc>
 8007584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007588:	4b9a      	ldr	r3, [pc, #616]	; (80077f4 <_printf_float+0x2d8>)
 800758a:	f04f 32ff 	mov.w	r2, #4294967295
 800758e:	f7f9 fab7 	bl	8000b00 <__aeabi_dcmple>
 8007592:	bb48      	cbnz	r0, 80075e8 <_printf_float+0xcc>
 8007594:	2200      	movs	r2, #0
 8007596:	2300      	movs	r3, #0
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	f7f9 faa6 	bl	8000aec <__aeabi_dcmplt>
 80075a0:	b110      	cbz	r0, 80075a8 <_printf_float+0x8c>
 80075a2:	232d      	movs	r3, #45	; 0x2d
 80075a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a8:	4a93      	ldr	r2, [pc, #588]	; (80077f8 <_printf_float+0x2dc>)
 80075aa:	4b94      	ldr	r3, [pc, #592]	; (80077fc <_printf_float+0x2e0>)
 80075ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075b0:	bf94      	ite	ls
 80075b2:	4690      	movls	r8, r2
 80075b4:	4698      	movhi	r8, r3
 80075b6:	2303      	movs	r3, #3
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	9b05      	ldr	r3, [sp, #20]
 80075bc:	f023 0304 	bic.w	r3, r3, #4
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	f04f 0900 	mov.w	r9, #0
 80075c6:	9700      	str	r7, [sp, #0]
 80075c8:	4633      	mov	r3, r6
 80075ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80075cc:	4621      	mov	r1, r4
 80075ce:	4628      	mov	r0, r5
 80075d0:	f000 f9da 	bl	8007988 <_printf_common>
 80075d4:	3001      	adds	r0, #1
 80075d6:	f040 8090 	bne.w	80076fa <_printf_float+0x1de>
 80075da:	f04f 30ff 	mov.w	r0, #4294967295
 80075de:	b00d      	add	sp, #52	; 0x34
 80075e0:	ecbd 8b02 	vpop	{d8}
 80075e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e8:	4642      	mov	r2, r8
 80075ea:	464b      	mov	r3, r9
 80075ec:	4640      	mov	r0, r8
 80075ee:	4649      	mov	r1, r9
 80075f0:	f7f9 faa4 	bl	8000b3c <__aeabi_dcmpun>
 80075f4:	b140      	cbz	r0, 8007608 <_printf_float+0xec>
 80075f6:	464b      	mov	r3, r9
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	bfbc      	itt	lt
 80075fc:	232d      	movlt	r3, #45	; 0x2d
 80075fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007602:	4a7f      	ldr	r2, [pc, #508]	; (8007800 <_printf_float+0x2e4>)
 8007604:	4b7f      	ldr	r3, [pc, #508]	; (8007804 <_printf_float+0x2e8>)
 8007606:	e7d1      	b.n	80075ac <_printf_float+0x90>
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800760e:	9206      	str	r2, [sp, #24]
 8007610:	1c5a      	adds	r2, r3, #1
 8007612:	d13f      	bne.n	8007694 <_printf_float+0x178>
 8007614:	2306      	movs	r3, #6
 8007616:	6063      	str	r3, [r4, #4]
 8007618:	9b05      	ldr	r3, [sp, #20]
 800761a:	6861      	ldr	r1, [r4, #4]
 800761c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007620:	2300      	movs	r3, #0
 8007622:	9303      	str	r3, [sp, #12]
 8007624:	ab0a      	add	r3, sp, #40	; 0x28
 8007626:	e9cd b301 	strd	fp, r3, [sp, #4]
 800762a:	ab09      	add	r3, sp, #36	; 0x24
 800762c:	ec49 8b10 	vmov	d0, r8, r9
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	6022      	str	r2, [r4, #0]
 8007634:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007638:	4628      	mov	r0, r5
 800763a:	f7ff fecf 	bl	80073dc <__cvt>
 800763e:	9b06      	ldr	r3, [sp, #24]
 8007640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007642:	2b47      	cmp	r3, #71	; 0x47
 8007644:	4680      	mov	r8, r0
 8007646:	d108      	bne.n	800765a <_printf_float+0x13e>
 8007648:	1cc8      	adds	r0, r1, #3
 800764a:	db02      	blt.n	8007652 <_printf_float+0x136>
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	4299      	cmp	r1, r3
 8007650:	dd41      	ble.n	80076d6 <_printf_float+0x1ba>
 8007652:	f1ab 0302 	sub.w	r3, fp, #2
 8007656:	fa5f fb83 	uxtb.w	fp, r3
 800765a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800765e:	d820      	bhi.n	80076a2 <_printf_float+0x186>
 8007660:	3901      	subs	r1, #1
 8007662:	465a      	mov	r2, fp
 8007664:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007668:	9109      	str	r1, [sp, #36]	; 0x24
 800766a:	f7ff ff19 	bl	80074a0 <__exponent>
 800766e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007670:	1813      	adds	r3, r2, r0
 8007672:	2a01      	cmp	r2, #1
 8007674:	4681      	mov	r9, r0
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	dc02      	bgt.n	8007680 <_printf_float+0x164>
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	07d2      	lsls	r2, r2, #31
 800767e:	d501      	bpl.n	8007684 <_printf_float+0x168>
 8007680:	3301      	adds	r3, #1
 8007682:	6123      	str	r3, [r4, #16]
 8007684:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007688:	2b00      	cmp	r3, #0
 800768a:	d09c      	beq.n	80075c6 <_printf_float+0xaa>
 800768c:	232d      	movs	r3, #45	; 0x2d
 800768e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007692:	e798      	b.n	80075c6 <_printf_float+0xaa>
 8007694:	9a06      	ldr	r2, [sp, #24]
 8007696:	2a47      	cmp	r2, #71	; 0x47
 8007698:	d1be      	bne.n	8007618 <_printf_float+0xfc>
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1bc      	bne.n	8007618 <_printf_float+0xfc>
 800769e:	2301      	movs	r3, #1
 80076a0:	e7b9      	b.n	8007616 <_printf_float+0xfa>
 80076a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076a6:	d118      	bne.n	80076da <_printf_float+0x1be>
 80076a8:	2900      	cmp	r1, #0
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	dd0b      	ble.n	80076c6 <_printf_float+0x1aa>
 80076ae:	6121      	str	r1, [r4, #16]
 80076b0:	b913      	cbnz	r3, 80076b8 <_printf_float+0x19c>
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	07d0      	lsls	r0, r2, #31
 80076b6:	d502      	bpl.n	80076be <_printf_float+0x1a2>
 80076b8:	3301      	adds	r3, #1
 80076ba:	440b      	add	r3, r1
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	65a1      	str	r1, [r4, #88]	; 0x58
 80076c0:	f04f 0900 	mov.w	r9, #0
 80076c4:	e7de      	b.n	8007684 <_printf_float+0x168>
 80076c6:	b913      	cbnz	r3, 80076ce <_printf_float+0x1b2>
 80076c8:	6822      	ldr	r2, [r4, #0]
 80076ca:	07d2      	lsls	r2, r2, #31
 80076cc:	d501      	bpl.n	80076d2 <_printf_float+0x1b6>
 80076ce:	3302      	adds	r3, #2
 80076d0:	e7f4      	b.n	80076bc <_printf_float+0x1a0>
 80076d2:	2301      	movs	r3, #1
 80076d4:	e7f2      	b.n	80076bc <_printf_float+0x1a0>
 80076d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076dc:	4299      	cmp	r1, r3
 80076de:	db05      	blt.n	80076ec <_printf_float+0x1d0>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	6121      	str	r1, [r4, #16]
 80076e4:	07d8      	lsls	r0, r3, #31
 80076e6:	d5ea      	bpl.n	80076be <_printf_float+0x1a2>
 80076e8:	1c4b      	adds	r3, r1, #1
 80076ea:	e7e7      	b.n	80076bc <_printf_float+0x1a0>
 80076ec:	2900      	cmp	r1, #0
 80076ee:	bfd4      	ite	le
 80076f0:	f1c1 0202 	rsble	r2, r1, #2
 80076f4:	2201      	movgt	r2, #1
 80076f6:	4413      	add	r3, r2
 80076f8:	e7e0      	b.n	80076bc <_printf_float+0x1a0>
 80076fa:	6823      	ldr	r3, [r4, #0]
 80076fc:	055a      	lsls	r2, r3, #21
 80076fe:	d407      	bmi.n	8007710 <_printf_float+0x1f4>
 8007700:	6923      	ldr	r3, [r4, #16]
 8007702:	4642      	mov	r2, r8
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	d12c      	bne.n	8007768 <_printf_float+0x24c>
 800770e:	e764      	b.n	80075da <_printf_float+0xbe>
 8007710:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007714:	f240 80e0 	bls.w	80078d8 <_printf_float+0x3bc>
 8007718:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800771c:	2200      	movs	r2, #0
 800771e:	2300      	movs	r3, #0
 8007720:	f7f9 f9da 	bl	8000ad8 <__aeabi_dcmpeq>
 8007724:	2800      	cmp	r0, #0
 8007726:	d034      	beq.n	8007792 <_printf_float+0x276>
 8007728:	4a37      	ldr	r2, [pc, #220]	; (8007808 <_printf_float+0x2ec>)
 800772a:	2301      	movs	r3, #1
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	f43f af51 	beq.w	80075da <_printf_float+0xbe>
 8007738:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800773c:	429a      	cmp	r2, r3
 800773e:	db02      	blt.n	8007746 <_printf_float+0x22a>
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	07d8      	lsls	r0, r3, #31
 8007744:	d510      	bpl.n	8007768 <_printf_float+0x24c>
 8007746:	ee18 3a10 	vmov	r3, s16
 800774a:	4652      	mov	r2, sl
 800774c:	4631      	mov	r1, r6
 800774e:	4628      	mov	r0, r5
 8007750:	47b8      	blx	r7
 8007752:	3001      	adds	r0, #1
 8007754:	f43f af41 	beq.w	80075da <_printf_float+0xbe>
 8007758:	f04f 0800 	mov.w	r8, #0
 800775c:	f104 091a 	add.w	r9, r4, #26
 8007760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007762:	3b01      	subs	r3, #1
 8007764:	4543      	cmp	r3, r8
 8007766:	dc09      	bgt.n	800777c <_printf_float+0x260>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	079b      	lsls	r3, r3, #30
 800776c:	f100 8107 	bmi.w	800797e <_printf_float+0x462>
 8007770:	68e0      	ldr	r0, [r4, #12]
 8007772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007774:	4298      	cmp	r0, r3
 8007776:	bfb8      	it	lt
 8007778:	4618      	movlt	r0, r3
 800777a:	e730      	b.n	80075de <_printf_float+0xc2>
 800777c:	2301      	movs	r3, #1
 800777e:	464a      	mov	r2, r9
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f af27 	beq.w	80075da <_printf_float+0xbe>
 800778c:	f108 0801 	add.w	r8, r8, #1
 8007790:	e7e6      	b.n	8007760 <_printf_float+0x244>
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	dc39      	bgt.n	800780c <_printf_float+0x2f0>
 8007798:	4a1b      	ldr	r2, [pc, #108]	; (8007808 <_printf_float+0x2ec>)
 800779a:	2301      	movs	r3, #1
 800779c:	4631      	mov	r1, r6
 800779e:	4628      	mov	r0, r5
 80077a0:	47b8      	blx	r7
 80077a2:	3001      	adds	r0, #1
 80077a4:	f43f af19 	beq.w	80075da <_printf_float+0xbe>
 80077a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077ac:	4313      	orrs	r3, r2
 80077ae:	d102      	bne.n	80077b6 <_printf_float+0x29a>
 80077b0:	6823      	ldr	r3, [r4, #0]
 80077b2:	07d9      	lsls	r1, r3, #31
 80077b4:	d5d8      	bpl.n	8007768 <_printf_float+0x24c>
 80077b6:	ee18 3a10 	vmov	r3, s16
 80077ba:	4652      	mov	r2, sl
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	f43f af09 	beq.w	80075da <_printf_float+0xbe>
 80077c8:	f04f 0900 	mov.w	r9, #0
 80077cc:	f104 0a1a 	add.w	sl, r4, #26
 80077d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d2:	425b      	negs	r3, r3
 80077d4:	454b      	cmp	r3, r9
 80077d6:	dc01      	bgt.n	80077dc <_printf_float+0x2c0>
 80077d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077da:	e792      	b.n	8007702 <_printf_float+0x1e6>
 80077dc:	2301      	movs	r3, #1
 80077de:	4652      	mov	r2, sl
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f aef7 	beq.w	80075da <_printf_float+0xbe>
 80077ec:	f109 0901 	add.w	r9, r9, #1
 80077f0:	e7ee      	b.n	80077d0 <_printf_float+0x2b4>
 80077f2:	bf00      	nop
 80077f4:	7fefffff 	.word	0x7fefffff
 80077f8:	0800a64c 	.word	0x0800a64c
 80077fc:	0800a650 	.word	0x0800a650
 8007800:	0800a654 	.word	0x0800a654
 8007804:	0800a658 	.word	0x0800a658
 8007808:	0800a65c 	.word	0x0800a65c
 800780c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800780e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007810:	429a      	cmp	r2, r3
 8007812:	bfa8      	it	ge
 8007814:	461a      	movge	r2, r3
 8007816:	2a00      	cmp	r2, #0
 8007818:	4691      	mov	r9, r2
 800781a:	dc37      	bgt.n	800788c <_printf_float+0x370>
 800781c:	f04f 0b00 	mov.w	fp, #0
 8007820:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007824:	f104 021a 	add.w	r2, r4, #26
 8007828:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	eba3 0309 	sub.w	r3, r3, r9
 8007830:	455b      	cmp	r3, fp
 8007832:	dc33      	bgt.n	800789c <_printf_float+0x380>
 8007834:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007838:	429a      	cmp	r2, r3
 800783a:	db3b      	blt.n	80078b4 <_printf_float+0x398>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07da      	lsls	r2, r3, #31
 8007840:	d438      	bmi.n	80078b4 <_printf_float+0x398>
 8007842:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007846:	eba2 0903 	sub.w	r9, r2, r3
 800784a:	9b05      	ldr	r3, [sp, #20]
 800784c:	1ad2      	subs	r2, r2, r3
 800784e:	4591      	cmp	r9, r2
 8007850:	bfa8      	it	ge
 8007852:	4691      	movge	r9, r2
 8007854:	f1b9 0f00 	cmp.w	r9, #0
 8007858:	dc35      	bgt.n	80078c6 <_printf_float+0x3aa>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007862:	f104 0a1a 	add.w	sl, r4, #26
 8007866:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800786a:	1a9b      	subs	r3, r3, r2
 800786c:	eba3 0309 	sub.w	r3, r3, r9
 8007870:	4543      	cmp	r3, r8
 8007872:	f77f af79 	ble.w	8007768 <_printf_float+0x24c>
 8007876:	2301      	movs	r3, #1
 8007878:	4652      	mov	r2, sl
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f aeaa 	beq.w	80075da <_printf_float+0xbe>
 8007886:	f108 0801 	add.w	r8, r8, #1
 800788a:	e7ec      	b.n	8007866 <_printf_float+0x34a>
 800788c:	4613      	mov	r3, r2
 800788e:	4631      	mov	r1, r6
 8007890:	4642      	mov	r2, r8
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	d1c0      	bne.n	800781c <_printf_float+0x300>
 800789a:	e69e      	b.n	80075da <_printf_float+0xbe>
 800789c:	2301      	movs	r3, #1
 800789e:	4631      	mov	r1, r6
 80078a0:	4628      	mov	r0, r5
 80078a2:	9205      	str	r2, [sp, #20]
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	f43f ae97 	beq.w	80075da <_printf_float+0xbe>
 80078ac:	9a05      	ldr	r2, [sp, #20]
 80078ae:	f10b 0b01 	add.w	fp, fp, #1
 80078b2:	e7b9      	b.n	8007828 <_printf_float+0x30c>
 80078b4:	ee18 3a10 	vmov	r3, s16
 80078b8:	4652      	mov	r2, sl
 80078ba:	4631      	mov	r1, r6
 80078bc:	4628      	mov	r0, r5
 80078be:	47b8      	blx	r7
 80078c0:	3001      	adds	r0, #1
 80078c2:	d1be      	bne.n	8007842 <_printf_float+0x326>
 80078c4:	e689      	b.n	80075da <_printf_float+0xbe>
 80078c6:	9a05      	ldr	r2, [sp, #20]
 80078c8:	464b      	mov	r3, r9
 80078ca:	4442      	add	r2, r8
 80078cc:	4631      	mov	r1, r6
 80078ce:	4628      	mov	r0, r5
 80078d0:	47b8      	blx	r7
 80078d2:	3001      	adds	r0, #1
 80078d4:	d1c1      	bne.n	800785a <_printf_float+0x33e>
 80078d6:	e680      	b.n	80075da <_printf_float+0xbe>
 80078d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078da:	2a01      	cmp	r2, #1
 80078dc:	dc01      	bgt.n	80078e2 <_printf_float+0x3c6>
 80078de:	07db      	lsls	r3, r3, #31
 80078e0:	d53a      	bpl.n	8007958 <_printf_float+0x43c>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4642      	mov	r2, r8
 80078e6:	4631      	mov	r1, r6
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f ae74 	beq.w	80075da <_printf_float+0xbe>
 80078f2:	ee18 3a10 	vmov	r3, s16
 80078f6:	4652      	mov	r2, sl
 80078f8:	4631      	mov	r1, r6
 80078fa:	4628      	mov	r0, r5
 80078fc:	47b8      	blx	r7
 80078fe:	3001      	adds	r0, #1
 8007900:	f43f ae6b 	beq.w	80075da <_printf_float+0xbe>
 8007904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007908:	2200      	movs	r2, #0
 800790a:	2300      	movs	r3, #0
 800790c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007910:	f7f9 f8e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007914:	b9d8      	cbnz	r0, 800794e <_printf_float+0x432>
 8007916:	f10a 33ff 	add.w	r3, sl, #4294967295
 800791a:	f108 0201 	add.w	r2, r8, #1
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	d10e      	bne.n	8007946 <_printf_float+0x42a>
 8007928:	e657      	b.n	80075da <_printf_float+0xbe>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	f43f ae50 	beq.w	80075da <_printf_float+0xbe>
 800793a:	f108 0801 	add.w	r8, r8, #1
 800793e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007940:	3b01      	subs	r3, #1
 8007942:	4543      	cmp	r3, r8
 8007944:	dcf1      	bgt.n	800792a <_printf_float+0x40e>
 8007946:	464b      	mov	r3, r9
 8007948:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800794c:	e6da      	b.n	8007704 <_printf_float+0x1e8>
 800794e:	f04f 0800 	mov.w	r8, #0
 8007952:	f104 0a1a 	add.w	sl, r4, #26
 8007956:	e7f2      	b.n	800793e <_printf_float+0x422>
 8007958:	2301      	movs	r3, #1
 800795a:	4642      	mov	r2, r8
 800795c:	e7df      	b.n	800791e <_printf_float+0x402>
 800795e:	2301      	movs	r3, #1
 8007960:	464a      	mov	r2, r9
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	f43f ae36 	beq.w	80075da <_printf_float+0xbe>
 800796e:	f108 0801 	add.w	r8, r8, #1
 8007972:	68e3      	ldr	r3, [r4, #12]
 8007974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007976:	1a5b      	subs	r3, r3, r1
 8007978:	4543      	cmp	r3, r8
 800797a:	dcf0      	bgt.n	800795e <_printf_float+0x442>
 800797c:	e6f8      	b.n	8007770 <_printf_float+0x254>
 800797e:	f04f 0800 	mov.w	r8, #0
 8007982:	f104 0919 	add.w	r9, r4, #25
 8007986:	e7f4      	b.n	8007972 <_printf_float+0x456>

08007988 <_printf_common>:
 8007988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800798c:	4616      	mov	r6, r2
 800798e:	4699      	mov	r9, r3
 8007990:	688a      	ldr	r2, [r1, #8]
 8007992:	690b      	ldr	r3, [r1, #16]
 8007994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007998:	4293      	cmp	r3, r2
 800799a:	bfb8      	it	lt
 800799c:	4613      	movlt	r3, r2
 800799e:	6033      	str	r3, [r6, #0]
 80079a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079a4:	4607      	mov	r7, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	b10a      	cbz	r2, 80079ae <_printf_common+0x26>
 80079aa:	3301      	adds	r3, #1
 80079ac:	6033      	str	r3, [r6, #0]
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	0699      	lsls	r1, r3, #26
 80079b2:	bf42      	ittt	mi
 80079b4:	6833      	ldrmi	r3, [r6, #0]
 80079b6:	3302      	addmi	r3, #2
 80079b8:	6033      	strmi	r3, [r6, #0]
 80079ba:	6825      	ldr	r5, [r4, #0]
 80079bc:	f015 0506 	ands.w	r5, r5, #6
 80079c0:	d106      	bne.n	80079d0 <_printf_common+0x48>
 80079c2:	f104 0a19 	add.w	sl, r4, #25
 80079c6:	68e3      	ldr	r3, [r4, #12]
 80079c8:	6832      	ldr	r2, [r6, #0]
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	42ab      	cmp	r3, r5
 80079ce:	dc26      	bgt.n	8007a1e <_printf_common+0x96>
 80079d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079d4:	1e13      	subs	r3, r2, #0
 80079d6:	6822      	ldr	r2, [r4, #0]
 80079d8:	bf18      	it	ne
 80079da:	2301      	movne	r3, #1
 80079dc:	0692      	lsls	r2, r2, #26
 80079de:	d42b      	bmi.n	8007a38 <_printf_common+0xb0>
 80079e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079e4:	4649      	mov	r1, r9
 80079e6:	4638      	mov	r0, r7
 80079e8:	47c0      	blx	r8
 80079ea:	3001      	adds	r0, #1
 80079ec:	d01e      	beq.n	8007a2c <_printf_common+0xa4>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	6922      	ldr	r2, [r4, #16]
 80079f2:	f003 0306 	and.w	r3, r3, #6
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	bf02      	ittt	eq
 80079fa:	68e5      	ldreq	r5, [r4, #12]
 80079fc:	6833      	ldreq	r3, [r6, #0]
 80079fe:	1aed      	subeq	r5, r5, r3
 8007a00:	68a3      	ldr	r3, [r4, #8]
 8007a02:	bf0c      	ite	eq
 8007a04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a08:	2500      	movne	r5, #0
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	bfc4      	itt	gt
 8007a0e:	1a9b      	subgt	r3, r3, r2
 8007a10:	18ed      	addgt	r5, r5, r3
 8007a12:	2600      	movs	r6, #0
 8007a14:	341a      	adds	r4, #26
 8007a16:	42b5      	cmp	r5, r6
 8007a18:	d11a      	bne.n	8007a50 <_printf_common+0xc8>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e008      	b.n	8007a30 <_printf_common+0xa8>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4652      	mov	r2, sl
 8007a22:	4649      	mov	r1, r9
 8007a24:	4638      	mov	r0, r7
 8007a26:	47c0      	blx	r8
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d103      	bne.n	8007a34 <_printf_common+0xac>
 8007a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a34:	3501      	adds	r5, #1
 8007a36:	e7c6      	b.n	80079c6 <_printf_common+0x3e>
 8007a38:	18e1      	adds	r1, r4, r3
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	2030      	movs	r0, #48	; 0x30
 8007a3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a42:	4422      	add	r2, r4
 8007a44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	e7c7      	b.n	80079e0 <_printf_common+0x58>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4622      	mov	r2, r4
 8007a54:	4649      	mov	r1, r9
 8007a56:	4638      	mov	r0, r7
 8007a58:	47c0      	blx	r8
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	d0e6      	beq.n	8007a2c <_printf_common+0xa4>
 8007a5e:	3601      	adds	r6, #1
 8007a60:	e7d9      	b.n	8007a16 <_printf_common+0x8e>
	...

08007a64 <_printf_i>:
 8007a64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a68:	7e0f      	ldrb	r7, [r1, #24]
 8007a6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a6c:	2f78      	cmp	r7, #120	; 0x78
 8007a6e:	4691      	mov	r9, r2
 8007a70:	4680      	mov	r8, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	469a      	mov	sl, r3
 8007a76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a7a:	d807      	bhi.n	8007a8c <_printf_i+0x28>
 8007a7c:	2f62      	cmp	r7, #98	; 0x62
 8007a7e:	d80a      	bhi.n	8007a96 <_printf_i+0x32>
 8007a80:	2f00      	cmp	r7, #0
 8007a82:	f000 80d4 	beq.w	8007c2e <_printf_i+0x1ca>
 8007a86:	2f58      	cmp	r7, #88	; 0x58
 8007a88:	f000 80c0 	beq.w	8007c0c <_printf_i+0x1a8>
 8007a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a94:	e03a      	b.n	8007b0c <_printf_i+0xa8>
 8007a96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a9a:	2b15      	cmp	r3, #21
 8007a9c:	d8f6      	bhi.n	8007a8c <_printf_i+0x28>
 8007a9e:	a101      	add	r1, pc, #4	; (adr r1, 8007aa4 <_printf_i+0x40>)
 8007aa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aa4:	08007afd 	.word	0x08007afd
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007a8d 	.word	0x08007a8d
 8007ab0:	08007a8d 	.word	0x08007a8d
 8007ab4:	08007a8d 	.word	0x08007a8d
 8007ab8:	08007a8d 	.word	0x08007a8d
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007a8d 	.word	0x08007a8d
 8007ac4:	08007a8d 	.word	0x08007a8d
 8007ac8:	08007a8d 	.word	0x08007a8d
 8007acc:	08007a8d 	.word	0x08007a8d
 8007ad0:	08007c15 	.word	0x08007c15
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007bcf 	.word	0x08007bcf
 8007adc:	08007a8d 	.word	0x08007a8d
 8007ae0:	08007a8d 	.word	0x08007a8d
 8007ae4:	08007c37 	.word	0x08007c37
 8007ae8:	08007a8d 	.word	0x08007a8d
 8007aec:	08007b3d 	.word	0x08007b3d
 8007af0:	08007a8d 	.word	0x08007a8d
 8007af4:	08007a8d 	.word	0x08007a8d
 8007af8:	08007bd7 	.word	0x08007bd7
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	1d1a      	adds	r2, r3, #4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	602a      	str	r2, [r5, #0]
 8007b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e09f      	b.n	8007c50 <_printf_i+0x1ec>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	682b      	ldr	r3, [r5, #0]
 8007b14:	0607      	lsls	r7, r0, #24
 8007b16:	f103 0104 	add.w	r1, r3, #4
 8007b1a:	6029      	str	r1, [r5, #0]
 8007b1c:	d501      	bpl.n	8007b22 <_printf_i+0xbe>
 8007b1e:	681e      	ldr	r6, [r3, #0]
 8007b20:	e003      	b.n	8007b2a <_printf_i+0xc6>
 8007b22:	0646      	lsls	r6, r0, #25
 8007b24:	d5fb      	bpl.n	8007b1e <_printf_i+0xba>
 8007b26:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b2a:	2e00      	cmp	r6, #0
 8007b2c:	da03      	bge.n	8007b36 <_printf_i+0xd2>
 8007b2e:	232d      	movs	r3, #45	; 0x2d
 8007b30:	4276      	negs	r6, r6
 8007b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b36:	485a      	ldr	r0, [pc, #360]	; (8007ca0 <_printf_i+0x23c>)
 8007b38:	230a      	movs	r3, #10
 8007b3a:	e012      	b.n	8007b62 <_printf_i+0xfe>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	1d19      	adds	r1, r3, #4
 8007b42:	6029      	str	r1, [r5, #0]
 8007b44:	0605      	lsls	r5, r0, #24
 8007b46:	d501      	bpl.n	8007b4c <_printf_i+0xe8>
 8007b48:	681e      	ldr	r6, [r3, #0]
 8007b4a:	e002      	b.n	8007b52 <_printf_i+0xee>
 8007b4c:	0641      	lsls	r1, r0, #25
 8007b4e:	d5fb      	bpl.n	8007b48 <_printf_i+0xe4>
 8007b50:	881e      	ldrh	r6, [r3, #0]
 8007b52:	4853      	ldr	r0, [pc, #332]	; (8007ca0 <_printf_i+0x23c>)
 8007b54:	2f6f      	cmp	r7, #111	; 0x6f
 8007b56:	bf0c      	ite	eq
 8007b58:	2308      	moveq	r3, #8
 8007b5a:	230a      	movne	r3, #10
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b62:	6865      	ldr	r5, [r4, #4]
 8007b64:	60a5      	str	r5, [r4, #8]
 8007b66:	2d00      	cmp	r5, #0
 8007b68:	bfa2      	ittt	ge
 8007b6a:	6821      	ldrge	r1, [r4, #0]
 8007b6c:	f021 0104 	bicge.w	r1, r1, #4
 8007b70:	6021      	strge	r1, [r4, #0]
 8007b72:	b90e      	cbnz	r6, 8007b78 <_printf_i+0x114>
 8007b74:	2d00      	cmp	r5, #0
 8007b76:	d04b      	beq.n	8007c10 <_printf_i+0x1ac>
 8007b78:	4615      	mov	r5, r2
 8007b7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b7e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b82:	5dc7      	ldrb	r7, [r0, r7]
 8007b84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b88:	4637      	mov	r7, r6
 8007b8a:	42bb      	cmp	r3, r7
 8007b8c:	460e      	mov	r6, r1
 8007b8e:	d9f4      	bls.n	8007b7a <_printf_i+0x116>
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d10b      	bne.n	8007bac <_printf_i+0x148>
 8007b94:	6823      	ldr	r3, [r4, #0]
 8007b96:	07de      	lsls	r6, r3, #31
 8007b98:	d508      	bpl.n	8007bac <_printf_i+0x148>
 8007b9a:	6923      	ldr	r3, [r4, #16]
 8007b9c:	6861      	ldr	r1, [r4, #4]
 8007b9e:	4299      	cmp	r1, r3
 8007ba0:	bfde      	ittt	le
 8007ba2:	2330      	movle	r3, #48	; 0x30
 8007ba4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ba8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bac:	1b52      	subs	r2, r2, r5
 8007bae:	6122      	str	r2, [r4, #16]
 8007bb0:	f8cd a000 	str.w	sl, [sp]
 8007bb4:	464b      	mov	r3, r9
 8007bb6:	aa03      	add	r2, sp, #12
 8007bb8:	4621      	mov	r1, r4
 8007bba:	4640      	mov	r0, r8
 8007bbc:	f7ff fee4 	bl	8007988 <_printf_common>
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d14a      	bne.n	8007c5a <_printf_i+0x1f6>
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	b004      	add	sp, #16
 8007bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	f043 0320 	orr.w	r3, r3, #32
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	4833      	ldr	r0, [pc, #204]	; (8007ca4 <_printf_i+0x240>)
 8007bd8:	2778      	movs	r7, #120	; 0x78
 8007bda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	6829      	ldr	r1, [r5, #0]
 8007be2:	061f      	lsls	r7, r3, #24
 8007be4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be8:	d402      	bmi.n	8007bf0 <_printf_i+0x18c>
 8007bea:	065f      	lsls	r7, r3, #25
 8007bec:	bf48      	it	mi
 8007bee:	b2b6      	uxthmi	r6, r6
 8007bf0:	07df      	lsls	r7, r3, #31
 8007bf2:	bf48      	it	mi
 8007bf4:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf8:	6029      	str	r1, [r5, #0]
 8007bfa:	bf48      	it	mi
 8007bfc:	6023      	strmi	r3, [r4, #0]
 8007bfe:	b91e      	cbnz	r6, 8007c08 <_printf_i+0x1a4>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	f023 0320 	bic.w	r3, r3, #32
 8007c06:	6023      	str	r3, [r4, #0]
 8007c08:	2310      	movs	r3, #16
 8007c0a:	e7a7      	b.n	8007b5c <_printf_i+0xf8>
 8007c0c:	4824      	ldr	r0, [pc, #144]	; (8007ca0 <_printf_i+0x23c>)
 8007c0e:	e7e4      	b.n	8007bda <_printf_i+0x176>
 8007c10:	4615      	mov	r5, r2
 8007c12:	e7bd      	b.n	8007b90 <_printf_i+0x12c>
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	6826      	ldr	r6, [r4, #0]
 8007c18:	6961      	ldr	r1, [r4, #20]
 8007c1a:	1d18      	adds	r0, r3, #4
 8007c1c:	6028      	str	r0, [r5, #0]
 8007c1e:	0635      	lsls	r5, r6, #24
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	d501      	bpl.n	8007c28 <_printf_i+0x1c4>
 8007c24:	6019      	str	r1, [r3, #0]
 8007c26:	e002      	b.n	8007c2e <_printf_i+0x1ca>
 8007c28:	0670      	lsls	r0, r6, #25
 8007c2a:	d5fb      	bpl.n	8007c24 <_printf_i+0x1c0>
 8007c2c:	8019      	strh	r1, [r3, #0]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	6123      	str	r3, [r4, #16]
 8007c32:	4615      	mov	r5, r2
 8007c34:	e7bc      	b.n	8007bb0 <_printf_i+0x14c>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	1d1a      	adds	r2, r3, #4
 8007c3a:	602a      	str	r2, [r5, #0]
 8007c3c:	681d      	ldr	r5, [r3, #0]
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	2100      	movs	r1, #0
 8007c42:	4628      	mov	r0, r5
 8007c44:	f7f8 facc 	bl	80001e0 <memchr>
 8007c48:	b108      	cbz	r0, 8007c4e <_printf_i+0x1ea>
 8007c4a:	1b40      	subs	r0, r0, r5
 8007c4c:	6060      	str	r0, [r4, #4]
 8007c4e:	6863      	ldr	r3, [r4, #4]
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	2300      	movs	r3, #0
 8007c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c58:	e7aa      	b.n	8007bb0 <_printf_i+0x14c>
 8007c5a:	6923      	ldr	r3, [r4, #16]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4640      	mov	r0, r8
 8007c62:	47d0      	blx	sl
 8007c64:	3001      	adds	r0, #1
 8007c66:	d0ad      	beq.n	8007bc4 <_printf_i+0x160>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	079b      	lsls	r3, r3, #30
 8007c6c:	d413      	bmi.n	8007c96 <_printf_i+0x232>
 8007c6e:	68e0      	ldr	r0, [r4, #12]
 8007c70:	9b03      	ldr	r3, [sp, #12]
 8007c72:	4298      	cmp	r0, r3
 8007c74:	bfb8      	it	lt
 8007c76:	4618      	movlt	r0, r3
 8007c78:	e7a6      	b.n	8007bc8 <_printf_i+0x164>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4632      	mov	r2, r6
 8007c7e:	4649      	mov	r1, r9
 8007c80:	4640      	mov	r0, r8
 8007c82:	47d0      	blx	sl
 8007c84:	3001      	adds	r0, #1
 8007c86:	d09d      	beq.n	8007bc4 <_printf_i+0x160>
 8007c88:	3501      	adds	r5, #1
 8007c8a:	68e3      	ldr	r3, [r4, #12]
 8007c8c:	9903      	ldr	r1, [sp, #12]
 8007c8e:	1a5b      	subs	r3, r3, r1
 8007c90:	42ab      	cmp	r3, r5
 8007c92:	dcf2      	bgt.n	8007c7a <_printf_i+0x216>
 8007c94:	e7eb      	b.n	8007c6e <_printf_i+0x20a>
 8007c96:	2500      	movs	r5, #0
 8007c98:	f104 0619 	add.w	r6, r4, #25
 8007c9c:	e7f5      	b.n	8007c8a <_printf_i+0x226>
 8007c9e:	bf00      	nop
 8007ca0:	0800a65e 	.word	0x0800a65e
 8007ca4:	0800a66f 	.word	0x0800a66f

08007ca8 <std>:
 8007ca8:	2300      	movs	r3, #0
 8007caa:	b510      	push	{r4, lr}
 8007cac:	4604      	mov	r4, r0
 8007cae:	e9c0 3300 	strd	r3, r3, [r0]
 8007cb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cb6:	6083      	str	r3, [r0, #8]
 8007cb8:	8181      	strh	r1, [r0, #12]
 8007cba:	6643      	str	r3, [r0, #100]	; 0x64
 8007cbc:	81c2      	strh	r2, [r0, #14]
 8007cbe:	6183      	str	r3, [r0, #24]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	2208      	movs	r2, #8
 8007cc4:	305c      	adds	r0, #92	; 0x5c
 8007cc6:	f000 f928 	bl	8007f1a <memset>
 8007cca:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <std+0x58>)
 8007ccc:	6263      	str	r3, [r4, #36]	; 0x24
 8007cce:	4b0d      	ldr	r3, [pc, #52]	; (8007d04 <std+0x5c>)
 8007cd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <std+0x60>)
 8007cd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cd6:	4b0d      	ldr	r3, [pc, #52]	; (8007d0c <std+0x64>)
 8007cd8:	6323      	str	r3, [r4, #48]	; 0x30
 8007cda:	4b0d      	ldr	r3, [pc, #52]	; (8007d10 <std+0x68>)
 8007cdc:	6224      	str	r4, [r4, #32]
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	d006      	beq.n	8007cf0 <std+0x48>
 8007ce2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ce6:	4294      	cmp	r4, r2
 8007ce8:	d002      	beq.n	8007cf0 <std+0x48>
 8007cea:	33d0      	adds	r3, #208	; 0xd0
 8007cec:	429c      	cmp	r4, r3
 8007cee:	d105      	bne.n	8007cfc <std+0x54>
 8007cf0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf8:	f000 b9e0 	b.w	80080bc <__retarget_lock_init_recursive>
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	08007e95 	.word	0x08007e95
 8007d04:	08007eb7 	.word	0x08007eb7
 8007d08:	08007eef 	.word	0x08007eef
 8007d0c:	08007f13 	.word	0x08007f13
 8007d10:	20000790 	.word	0x20000790

08007d14 <stdio_exit_handler>:
 8007d14:	4a02      	ldr	r2, [pc, #8]	; (8007d20 <stdio_exit_handler+0xc>)
 8007d16:	4903      	ldr	r1, [pc, #12]	; (8007d24 <stdio_exit_handler+0x10>)
 8007d18:	4803      	ldr	r0, [pc, #12]	; (8007d28 <stdio_exit_handler+0x14>)
 8007d1a:	f000 b869 	b.w	8007df0 <_fwalk_sglue>
 8007d1e:	bf00      	nop
 8007d20:	20000010 	.word	0x20000010
 8007d24:	08009909 	.word	0x08009909
 8007d28:	2000001c 	.word	0x2000001c

08007d2c <cleanup_stdio>:
 8007d2c:	6841      	ldr	r1, [r0, #4]
 8007d2e:	4b0c      	ldr	r3, [pc, #48]	; (8007d60 <cleanup_stdio+0x34>)
 8007d30:	4299      	cmp	r1, r3
 8007d32:	b510      	push	{r4, lr}
 8007d34:	4604      	mov	r4, r0
 8007d36:	d001      	beq.n	8007d3c <cleanup_stdio+0x10>
 8007d38:	f001 fde6 	bl	8009908 <_fflush_r>
 8007d3c:	68a1      	ldr	r1, [r4, #8]
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <cleanup_stdio+0x38>)
 8007d40:	4299      	cmp	r1, r3
 8007d42:	d002      	beq.n	8007d4a <cleanup_stdio+0x1e>
 8007d44:	4620      	mov	r0, r4
 8007d46:	f001 fddf 	bl	8009908 <_fflush_r>
 8007d4a:	68e1      	ldr	r1, [r4, #12]
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <cleanup_stdio+0x3c>)
 8007d4e:	4299      	cmp	r1, r3
 8007d50:	d004      	beq.n	8007d5c <cleanup_stdio+0x30>
 8007d52:	4620      	mov	r0, r4
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f001 bdd6 	b.w	8009908 <_fflush_r>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	bf00      	nop
 8007d60:	20000790 	.word	0x20000790
 8007d64:	200007f8 	.word	0x200007f8
 8007d68:	20000860 	.word	0x20000860

08007d6c <global_stdio_init.part.0>:
 8007d6c:	b510      	push	{r4, lr}
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	; (8007d9c <global_stdio_init.part.0+0x30>)
 8007d70:	4c0b      	ldr	r4, [pc, #44]	; (8007da0 <global_stdio_init.part.0+0x34>)
 8007d72:	4a0c      	ldr	r2, [pc, #48]	; (8007da4 <global_stdio_init.part.0+0x38>)
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	4620      	mov	r0, r4
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	f7ff ff94 	bl	8007ca8 <std>
 8007d80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d84:	2201      	movs	r2, #1
 8007d86:	2109      	movs	r1, #9
 8007d88:	f7ff ff8e 	bl	8007ca8 <std>
 8007d8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d90:	2202      	movs	r2, #2
 8007d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d96:	2112      	movs	r1, #18
 8007d98:	f7ff bf86 	b.w	8007ca8 <std>
 8007d9c:	200008c8 	.word	0x200008c8
 8007da0:	20000790 	.word	0x20000790
 8007da4:	08007d15 	.word	0x08007d15

08007da8 <__sfp_lock_acquire>:
 8007da8:	4801      	ldr	r0, [pc, #4]	; (8007db0 <__sfp_lock_acquire+0x8>)
 8007daa:	f000 b988 	b.w	80080be <__retarget_lock_acquire_recursive>
 8007dae:	bf00      	nop
 8007db0:	200008d1 	.word	0x200008d1

08007db4 <__sfp_lock_release>:
 8007db4:	4801      	ldr	r0, [pc, #4]	; (8007dbc <__sfp_lock_release+0x8>)
 8007db6:	f000 b983 	b.w	80080c0 <__retarget_lock_release_recursive>
 8007dba:	bf00      	nop
 8007dbc:	200008d1 	.word	0x200008d1

08007dc0 <__sinit>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	4604      	mov	r4, r0
 8007dc4:	f7ff fff0 	bl	8007da8 <__sfp_lock_acquire>
 8007dc8:	6a23      	ldr	r3, [r4, #32]
 8007dca:	b11b      	cbz	r3, 8007dd4 <__sinit+0x14>
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	f7ff bff0 	b.w	8007db4 <__sfp_lock_release>
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <__sinit+0x28>)
 8007dd6:	6223      	str	r3, [r4, #32]
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <__sinit+0x2c>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1f5      	bne.n	8007dcc <__sinit+0xc>
 8007de0:	f7ff ffc4 	bl	8007d6c <global_stdio_init.part.0>
 8007de4:	e7f2      	b.n	8007dcc <__sinit+0xc>
 8007de6:	bf00      	nop
 8007de8:	08007d2d 	.word	0x08007d2d
 8007dec:	200008c8 	.word	0x200008c8

08007df0 <_fwalk_sglue>:
 8007df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007df4:	4607      	mov	r7, r0
 8007df6:	4688      	mov	r8, r1
 8007df8:	4614      	mov	r4, r2
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e00:	f1b9 0901 	subs.w	r9, r9, #1
 8007e04:	d505      	bpl.n	8007e12 <_fwalk_sglue+0x22>
 8007e06:	6824      	ldr	r4, [r4, #0]
 8007e08:	2c00      	cmp	r4, #0
 8007e0a:	d1f7      	bne.n	8007dfc <_fwalk_sglue+0xc>
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e12:	89ab      	ldrh	r3, [r5, #12]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d907      	bls.n	8007e28 <_fwalk_sglue+0x38>
 8007e18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	d003      	beq.n	8007e28 <_fwalk_sglue+0x38>
 8007e20:	4629      	mov	r1, r5
 8007e22:	4638      	mov	r0, r7
 8007e24:	47c0      	blx	r8
 8007e26:	4306      	orrs	r6, r0
 8007e28:	3568      	adds	r5, #104	; 0x68
 8007e2a:	e7e9      	b.n	8007e00 <_fwalk_sglue+0x10>

08007e2c <sniprintf>:
 8007e2c:	b40c      	push	{r2, r3}
 8007e2e:	b530      	push	{r4, r5, lr}
 8007e30:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <sniprintf+0x64>)
 8007e32:	1e0c      	subs	r4, r1, #0
 8007e34:	681d      	ldr	r5, [r3, #0]
 8007e36:	b09d      	sub	sp, #116	; 0x74
 8007e38:	da08      	bge.n	8007e4c <sniprintf+0x20>
 8007e3a:	238b      	movs	r3, #139	; 0x8b
 8007e3c:	602b      	str	r3, [r5, #0]
 8007e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e42:	b01d      	add	sp, #116	; 0x74
 8007e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e48:	b002      	add	sp, #8
 8007e4a:	4770      	bx	lr
 8007e4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e54:	bf14      	ite	ne
 8007e56:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007e5a:	4623      	moveq	r3, r4
 8007e5c:	9304      	str	r3, [sp, #16]
 8007e5e:	9307      	str	r3, [sp, #28]
 8007e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e64:	9002      	str	r0, [sp, #8]
 8007e66:	9006      	str	r0, [sp, #24]
 8007e68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e6e:	ab21      	add	r3, sp, #132	; 0x84
 8007e70:	a902      	add	r1, sp, #8
 8007e72:	4628      	mov	r0, r5
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	f001 fbc3 	bl	8009600 <_svfiprintf_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	bfbc      	itt	lt
 8007e7e:	238b      	movlt	r3, #139	; 0x8b
 8007e80:	602b      	strlt	r3, [r5, #0]
 8007e82:	2c00      	cmp	r4, #0
 8007e84:	d0dd      	beq.n	8007e42 <sniprintf+0x16>
 8007e86:	9b02      	ldr	r3, [sp, #8]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	701a      	strb	r2, [r3, #0]
 8007e8c:	e7d9      	b.n	8007e42 <sniprintf+0x16>
 8007e8e:	bf00      	nop
 8007e90:	20000068 	.word	0x20000068

08007e94 <__sread>:
 8007e94:	b510      	push	{r4, lr}
 8007e96:	460c      	mov	r4, r1
 8007e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e9c:	f000 f89c 	bl	8007fd8 <_read_r>
 8007ea0:	2800      	cmp	r0, #0
 8007ea2:	bfab      	itete	ge
 8007ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ea8:	181b      	addge	r3, r3, r0
 8007eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007eae:	bfac      	ite	ge
 8007eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007eb2:	81a3      	strhlt	r3, [r4, #12]
 8007eb4:	bd10      	pop	{r4, pc}

08007eb6 <__swrite>:
 8007eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eba:	461f      	mov	r7, r3
 8007ebc:	898b      	ldrh	r3, [r1, #12]
 8007ebe:	05db      	lsls	r3, r3, #23
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	460c      	mov	r4, r1
 8007ec4:	4616      	mov	r6, r2
 8007ec6:	d505      	bpl.n	8007ed4 <__swrite+0x1e>
 8007ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ecc:	2302      	movs	r3, #2
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f000 f870 	bl	8007fb4 <_lseek_r>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	463b      	mov	r3, r7
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007eea:	f000 b8ab 	b.w	8008044 <_write_r>

08007eee <__sseek>:
 8007eee:	b510      	push	{r4, lr}
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef6:	f000 f85d 	bl	8007fb4 <_lseek_r>
 8007efa:	1c43      	adds	r3, r0, #1
 8007efc:	89a3      	ldrh	r3, [r4, #12]
 8007efe:	bf15      	itete	ne
 8007f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f0a:	81a3      	strheq	r3, [r4, #12]
 8007f0c:	bf18      	it	ne
 8007f0e:	81a3      	strhne	r3, [r4, #12]
 8007f10:	bd10      	pop	{r4, pc}

08007f12 <__sclose>:
 8007f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f16:	f000 b83d 	b.w	8007f94 <_close_r>

08007f1a <memset>:
 8007f1a:	4402      	add	r2, r0
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d100      	bne.n	8007f24 <memset+0xa>
 8007f22:	4770      	bx	lr
 8007f24:	f803 1b01 	strb.w	r1, [r3], #1
 8007f28:	e7f9      	b.n	8007f1e <memset+0x4>

08007f2a <_raise_r>:
 8007f2a:	291f      	cmp	r1, #31
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4604      	mov	r4, r0
 8007f30:	460d      	mov	r5, r1
 8007f32:	d904      	bls.n	8007f3e <_raise_r+0x14>
 8007f34:	2316      	movs	r3, #22
 8007f36:	6003      	str	r3, [r0, #0]
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	bd38      	pop	{r3, r4, r5, pc}
 8007f3e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007f40:	b112      	cbz	r2, 8007f48 <_raise_r+0x1e>
 8007f42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f46:	b94b      	cbnz	r3, 8007f5c <_raise_r+0x32>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	f000 f869 	bl	8008020 <_getpid_r>
 8007f4e:	462a      	mov	r2, r5
 8007f50:	4601      	mov	r1, r0
 8007f52:	4620      	mov	r0, r4
 8007f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f58:	f000 b850 	b.w	8007ffc <_kill_r>
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d00a      	beq.n	8007f76 <_raise_r+0x4c>
 8007f60:	1c59      	adds	r1, r3, #1
 8007f62:	d103      	bne.n	8007f6c <_raise_r+0x42>
 8007f64:	2316      	movs	r3, #22
 8007f66:	6003      	str	r3, [r0, #0]
 8007f68:	2001      	movs	r0, #1
 8007f6a:	e7e7      	b.n	8007f3c <_raise_r+0x12>
 8007f6c:	2400      	movs	r4, #0
 8007f6e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f72:	4628      	mov	r0, r5
 8007f74:	4798      	blx	r3
 8007f76:	2000      	movs	r0, #0
 8007f78:	e7e0      	b.n	8007f3c <_raise_r+0x12>
	...

08007f7c <raise>:
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <raise+0xc>)
 8007f7e:	4601      	mov	r1, r0
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	f7ff bfd2 	b.w	8007f2a <_raise_r>
 8007f86:	bf00      	nop
 8007f88:	20000068 	.word	0x20000068

08007f8c <_localeconv_r>:
 8007f8c:	4800      	ldr	r0, [pc, #0]	; (8007f90 <_localeconv_r+0x4>)
 8007f8e:	4770      	bx	lr
 8007f90:	2000015c 	.word	0x2000015c

08007f94 <_close_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d06      	ldr	r5, [pc, #24]	; (8007fb0 <_close_r+0x1c>)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	602b      	str	r3, [r5, #0]
 8007fa0:	f7fa fb11 	bl	80025c6 <_close>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d102      	bne.n	8007fae <_close_r+0x1a>
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	b103      	cbz	r3, 8007fae <_close_r+0x1a>
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
 8007fb0:	200008cc 	.word	0x200008cc

08007fb4 <_lseek_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	; (8007fd4 <_lseek_r+0x20>)
 8007fb8:	4604      	mov	r4, r0
 8007fba:	4608      	mov	r0, r1
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	602a      	str	r2, [r5, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f7fa fb26 	bl	8002614 <_lseek>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_lseek_r+0x1e>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_lseek_r+0x1e>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	200008cc 	.word	0x200008cc

08007fd8 <_read_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	; (8007ff8 <_read_r+0x20>)
 8007fdc:	4604      	mov	r4, r0
 8007fde:	4608      	mov	r0, r1
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	602a      	str	r2, [r5, #0]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7fa fab4 	bl	8002554 <_read>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d102      	bne.n	8007ff6 <_read_r+0x1e>
 8007ff0:	682b      	ldr	r3, [r5, #0]
 8007ff2:	b103      	cbz	r3, 8007ff6 <_read_r+0x1e>
 8007ff4:	6023      	str	r3, [r4, #0]
 8007ff6:	bd38      	pop	{r3, r4, r5, pc}
 8007ff8:	200008cc 	.word	0x200008cc

08007ffc <_kill_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	; (800801c <_kill_r+0x20>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	4611      	mov	r1, r2
 8008008:	602b      	str	r3, [r5, #0]
 800800a:	f7fa fa89 	bl	8002520 <_kill>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	d102      	bne.n	8008018 <_kill_r+0x1c>
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	b103      	cbz	r3, 8008018 <_kill_r+0x1c>
 8008016:	6023      	str	r3, [r4, #0]
 8008018:	bd38      	pop	{r3, r4, r5, pc}
 800801a:	bf00      	nop
 800801c:	200008cc 	.word	0x200008cc

08008020 <_getpid_r>:
 8008020:	f7fa ba76 	b.w	8002510 <_getpid>

08008024 <_sbrk_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4d06      	ldr	r5, [pc, #24]	; (8008040 <_sbrk_r+0x1c>)
 8008028:	2300      	movs	r3, #0
 800802a:	4604      	mov	r4, r0
 800802c:	4608      	mov	r0, r1
 800802e:	602b      	str	r3, [r5, #0]
 8008030:	f7fa fafe 	bl	8002630 <_sbrk>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	d102      	bne.n	800803e <_sbrk_r+0x1a>
 8008038:	682b      	ldr	r3, [r5, #0]
 800803a:	b103      	cbz	r3, 800803e <_sbrk_r+0x1a>
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	200008cc 	.word	0x200008cc

08008044 <_write_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4d07      	ldr	r5, [pc, #28]	; (8008064 <_write_r+0x20>)
 8008048:	4604      	mov	r4, r0
 800804a:	4608      	mov	r0, r1
 800804c:	4611      	mov	r1, r2
 800804e:	2200      	movs	r2, #0
 8008050:	602a      	str	r2, [r5, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	f7fa fa9b 	bl	800258e <_write>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_write_r+0x1e>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_write_r+0x1e>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	200008cc 	.word	0x200008cc

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	; (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	20000068 	.word	0x20000068

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	4d0d      	ldr	r5, [pc, #52]	; (80080ac <__libc_init_array+0x38>)
 8008078:	4c0d      	ldr	r4, [pc, #52]	; (80080b0 <__libc_init_array+0x3c>)
 800807a:	1b64      	subs	r4, r4, r5
 800807c:	10a4      	asrs	r4, r4, #2
 800807e:	2600      	movs	r6, #0
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	4d0b      	ldr	r5, [pc, #44]	; (80080b4 <__libc_init_array+0x40>)
 8008086:	4c0c      	ldr	r4, [pc, #48]	; (80080b8 <__libc_init_array+0x44>)
 8008088:	f001 ff88 	bl	8009f9c <_init>
 800808c:	1b64      	subs	r4, r4, r5
 800808e:	10a4      	asrs	r4, r4, #2
 8008090:	2600      	movs	r6, #0
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	0800a9bc 	.word	0x0800a9bc
 80080b0:	0800a9bc 	.word	0x0800a9bc
 80080b4:	0800a9bc 	.word	0x0800a9bc
 80080b8:	0800a9c0 	.word	0x0800a9c0

080080bc <__retarget_lock_init_recursive>:
 80080bc:	4770      	bx	lr

080080be <__retarget_lock_acquire_recursive>:
 80080be:	4770      	bx	lr

080080c0 <__retarget_lock_release_recursive>:
 80080c0:	4770      	bx	lr

080080c2 <quorem>:
 80080c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080c6:	6903      	ldr	r3, [r0, #16]
 80080c8:	690c      	ldr	r4, [r1, #16]
 80080ca:	42a3      	cmp	r3, r4
 80080cc:	4607      	mov	r7, r0
 80080ce:	db7e      	blt.n	80081ce <quorem+0x10c>
 80080d0:	3c01      	subs	r4, #1
 80080d2:	f101 0814 	add.w	r8, r1, #20
 80080d6:	f100 0514 	add.w	r5, r0, #20
 80080da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e8:	3301      	adds	r3, #1
 80080ea:	429a      	cmp	r2, r3
 80080ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80080f8:	d331      	bcc.n	800815e <quorem+0x9c>
 80080fa:	f04f 0e00 	mov.w	lr, #0
 80080fe:	4640      	mov	r0, r8
 8008100:	46ac      	mov	ip, r5
 8008102:	46f2      	mov	sl, lr
 8008104:	f850 2b04 	ldr.w	r2, [r0], #4
 8008108:	b293      	uxth	r3, r2
 800810a:	fb06 e303 	mla	r3, r6, r3, lr
 800810e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008112:	0c1a      	lsrs	r2, r3, #16
 8008114:	b29b      	uxth	r3, r3
 8008116:	ebaa 0303 	sub.w	r3, sl, r3
 800811a:	f8dc a000 	ldr.w	sl, [ip]
 800811e:	fa13 f38a 	uxtah	r3, r3, sl
 8008122:	fb06 220e 	mla	r2, r6, lr, r2
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	9b00      	ldr	r3, [sp, #0]
 800812a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800812e:	b292      	uxth	r2, r2
 8008130:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008138:	f8bd 3000 	ldrh.w	r3, [sp]
 800813c:	4581      	cmp	r9, r0
 800813e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008142:	f84c 3b04 	str.w	r3, [ip], #4
 8008146:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800814a:	d2db      	bcs.n	8008104 <quorem+0x42>
 800814c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008150:	b92b      	cbnz	r3, 800815e <quorem+0x9c>
 8008152:	9b01      	ldr	r3, [sp, #4]
 8008154:	3b04      	subs	r3, #4
 8008156:	429d      	cmp	r5, r3
 8008158:	461a      	mov	r2, r3
 800815a:	d32c      	bcc.n	80081b6 <quorem+0xf4>
 800815c:	613c      	str	r4, [r7, #16]
 800815e:	4638      	mov	r0, r7
 8008160:	f001 f8f4 	bl	800934c <__mcmp>
 8008164:	2800      	cmp	r0, #0
 8008166:	db22      	blt.n	80081ae <quorem+0xec>
 8008168:	3601      	adds	r6, #1
 800816a:	4629      	mov	r1, r5
 800816c:	2000      	movs	r0, #0
 800816e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008172:	f8d1 c000 	ldr.w	ip, [r1]
 8008176:	b293      	uxth	r3, r2
 8008178:	1ac3      	subs	r3, r0, r3
 800817a:	0c12      	lsrs	r2, r2, #16
 800817c:	fa13 f38c 	uxtah	r3, r3, ip
 8008180:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008188:	b29b      	uxth	r3, r3
 800818a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800818e:	45c1      	cmp	r9, r8
 8008190:	f841 3b04 	str.w	r3, [r1], #4
 8008194:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008198:	d2e9      	bcs.n	800816e <quorem+0xac>
 800819a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800819e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081a2:	b922      	cbnz	r2, 80081ae <quorem+0xec>
 80081a4:	3b04      	subs	r3, #4
 80081a6:	429d      	cmp	r5, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	d30a      	bcc.n	80081c2 <quorem+0x100>
 80081ac:	613c      	str	r4, [r7, #16]
 80081ae:	4630      	mov	r0, r6
 80081b0:	b003      	add	sp, #12
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	3b04      	subs	r3, #4
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	d1ce      	bne.n	800815c <quorem+0x9a>
 80081be:	3c01      	subs	r4, #1
 80081c0:	e7c9      	b.n	8008156 <quorem+0x94>
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	3b04      	subs	r3, #4
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	d1f0      	bne.n	80081ac <quorem+0xea>
 80081ca:	3c01      	subs	r4, #1
 80081cc:	e7eb      	b.n	80081a6 <quorem+0xe4>
 80081ce:	2000      	movs	r0, #0
 80081d0:	e7ee      	b.n	80081b0 <quorem+0xee>
 80081d2:	0000      	movs	r0, r0
 80081d4:	0000      	movs	r0, r0
	...

080081d8 <_dtoa_r>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	ed2d 8b04 	vpush	{d8-d9}
 80081e0:	69c5      	ldr	r5, [r0, #28]
 80081e2:	b093      	sub	sp, #76	; 0x4c
 80081e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081e8:	ec57 6b10 	vmov	r6, r7, d0
 80081ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081f0:	9107      	str	r1, [sp, #28]
 80081f2:	4604      	mov	r4, r0
 80081f4:	920a      	str	r2, [sp, #40]	; 0x28
 80081f6:	930d      	str	r3, [sp, #52]	; 0x34
 80081f8:	b975      	cbnz	r5, 8008218 <_dtoa_r+0x40>
 80081fa:	2010      	movs	r0, #16
 80081fc:	f7ff f832 	bl	8007264 <malloc>
 8008200:	4602      	mov	r2, r0
 8008202:	61e0      	str	r0, [r4, #28]
 8008204:	b920      	cbnz	r0, 8008210 <_dtoa_r+0x38>
 8008206:	4bae      	ldr	r3, [pc, #696]	; (80084c0 <_dtoa_r+0x2e8>)
 8008208:	21ef      	movs	r1, #239	; 0xef
 800820a:	48ae      	ldr	r0, [pc, #696]	; (80084c4 <_dtoa_r+0x2ec>)
 800820c:	f001 fbcc 	bl	80099a8 <__assert_func>
 8008210:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008214:	6005      	str	r5, [r0, #0]
 8008216:	60c5      	str	r5, [r0, #12]
 8008218:	69e3      	ldr	r3, [r4, #28]
 800821a:	6819      	ldr	r1, [r3, #0]
 800821c:	b151      	cbz	r1, 8008234 <_dtoa_r+0x5c>
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	604a      	str	r2, [r1, #4]
 8008222:	2301      	movs	r3, #1
 8008224:	4093      	lsls	r3, r2
 8008226:	608b      	str	r3, [r1, #8]
 8008228:	4620      	mov	r0, r4
 800822a:	f000 fe53 	bl	8008ed4 <_Bfree>
 800822e:	69e3      	ldr	r3, [r4, #28]
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
 8008234:	1e3b      	subs	r3, r7, #0
 8008236:	bfbb      	ittet	lt
 8008238:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800823c:	9303      	strlt	r3, [sp, #12]
 800823e:	2300      	movge	r3, #0
 8008240:	2201      	movlt	r2, #1
 8008242:	bfac      	ite	ge
 8008244:	f8c8 3000 	strge.w	r3, [r8]
 8008248:	f8c8 2000 	strlt.w	r2, [r8]
 800824c:	4b9e      	ldr	r3, [pc, #632]	; (80084c8 <_dtoa_r+0x2f0>)
 800824e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008252:	ea33 0308 	bics.w	r3, r3, r8
 8008256:	d11b      	bne.n	8008290 <_dtoa_r+0xb8>
 8008258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800825a:	f242 730f 	movw	r3, #9999	; 0x270f
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008264:	4333      	orrs	r3, r6
 8008266:	f000 8593 	beq.w	8008d90 <_dtoa_r+0xbb8>
 800826a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800826c:	b963      	cbnz	r3, 8008288 <_dtoa_r+0xb0>
 800826e:	4b97      	ldr	r3, [pc, #604]	; (80084cc <_dtoa_r+0x2f4>)
 8008270:	e027      	b.n	80082c2 <_dtoa_r+0xea>
 8008272:	4b97      	ldr	r3, [pc, #604]	; (80084d0 <_dtoa_r+0x2f8>)
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	3308      	adds	r3, #8
 8008278:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	9800      	ldr	r0, [sp, #0]
 800827e:	b013      	add	sp, #76	; 0x4c
 8008280:	ecbd 8b04 	vpop	{d8-d9}
 8008284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008288:	4b90      	ldr	r3, [pc, #576]	; (80084cc <_dtoa_r+0x2f4>)
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	3303      	adds	r3, #3
 800828e:	e7f3      	b.n	8008278 <_dtoa_r+0xa0>
 8008290:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008294:	2200      	movs	r2, #0
 8008296:	ec51 0b17 	vmov	r0, r1, d7
 800829a:	eeb0 8a47 	vmov.f32	s16, s14
 800829e:	eef0 8a67 	vmov.f32	s17, s15
 80082a2:	2300      	movs	r3, #0
 80082a4:	f7f8 fc18 	bl	8000ad8 <__aeabi_dcmpeq>
 80082a8:	4681      	mov	r9, r0
 80082aa:	b160      	cbz	r0, 80082c6 <_dtoa_r+0xee>
 80082ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80082ae:	2301      	movs	r3, #1
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8568 	beq.w	8008d8a <_dtoa_r+0xbb2>
 80082ba:	4b86      	ldr	r3, [pc, #536]	; (80084d4 <_dtoa_r+0x2fc>)
 80082bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	3b01      	subs	r3, #1
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	e7da      	b.n	800827c <_dtoa_r+0xa4>
 80082c6:	aa10      	add	r2, sp, #64	; 0x40
 80082c8:	a911      	add	r1, sp, #68	; 0x44
 80082ca:	4620      	mov	r0, r4
 80082cc:	eeb0 0a48 	vmov.f32	s0, s16
 80082d0:	eef0 0a68 	vmov.f32	s1, s17
 80082d4:	f001 f8e0 	bl	8009498 <__d2b>
 80082d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80082dc:	4682      	mov	sl, r0
 80082de:	2d00      	cmp	r5, #0
 80082e0:	d07f      	beq.n	80083e2 <_dtoa_r+0x20a>
 80082e2:	ee18 3a90 	vmov	r3, s17
 80082e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80082ee:	ec51 0b18 	vmov	r0, r1, d8
 80082f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80082f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80082fe:	4619      	mov	r1, r3
 8008300:	2200      	movs	r2, #0
 8008302:	4b75      	ldr	r3, [pc, #468]	; (80084d8 <_dtoa_r+0x300>)
 8008304:	f7f7 ffc8 	bl	8000298 <__aeabi_dsub>
 8008308:	a367      	add	r3, pc, #412	; (adr r3, 80084a8 <_dtoa_r+0x2d0>)
 800830a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830e:	f7f8 f97b 	bl	8000608 <__aeabi_dmul>
 8008312:	a367      	add	r3, pc, #412	; (adr r3, 80084b0 <_dtoa_r+0x2d8>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f7f7 ffc0 	bl	800029c <__adddf3>
 800831c:	4606      	mov	r6, r0
 800831e:	4628      	mov	r0, r5
 8008320:	460f      	mov	r7, r1
 8008322:	f7f8 f907 	bl	8000534 <__aeabi_i2d>
 8008326:	a364      	add	r3, pc, #400	; (adr r3, 80084b8 <_dtoa_r+0x2e0>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f8 f96c 	bl	8000608 <__aeabi_dmul>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	4630      	mov	r0, r6
 8008336:	4639      	mov	r1, r7
 8008338:	f7f7 ffb0 	bl	800029c <__adddf3>
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	f7f8 fc12 	bl	8000b68 <__aeabi_d2iz>
 8008344:	2200      	movs	r2, #0
 8008346:	4683      	mov	fp, r0
 8008348:	2300      	movs	r3, #0
 800834a:	4630      	mov	r0, r6
 800834c:	4639      	mov	r1, r7
 800834e:	f7f8 fbcd 	bl	8000aec <__aeabi_dcmplt>
 8008352:	b148      	cbz	r0, 8008368 <_dtoa_r+0x190>
 8008354:	4658      	mov	r0, fp
 8008356:	f7f8 f8ed 	bl	8000534 <__aeabi_i2d>
 800835a:	4632      	mov	r2, r6
 800835c:	463b      	mov	r3, r7
 800835e:	f7f8 fbbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008362:	b908      	cbnz	r0, 8008368 <_dtoa_r+0x190>
 8008364:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008368:	f1bb 0f16 	cmp.w	fp, #22
 800836c:	d857      	bhi.n	800841e <_dtoa_r+0x246>
 800836e:	4b5b      	ldr	r3, [pc, #364]	; (80084dc <_dtoa_r+0x304>)
 8008370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	ec51 0b18 	vmov	r0, r1, d8
 800837c:	f7f8 fbb6 	bl	8000aec <__aeabi_dcmplt>
 8008380:	2800      	cmp	r0, #0
 8008382:	d04e      	beq.n	8008422 <_dtoa_r+0x24a>
 8008384:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008388:	2300      	movs	r3, #0
 800838a:	930c      	str	r3, [sp, #48]	; 0x30
 800838c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800838e:	1b5b      	subs	r3, r3, r5
 8008390:	1e5a      	subs	r2, r3, #1
 8008392:	bf45      	ittet	mi
 8008394:	f1c3 0301 	rsbmi	r3, r3, #1
 8008398:	9305      	strmi	r3, [sp, #20]
 800839a:	2300      	movpl	r3, #0
 800839c:	2300      	movmi	r3, #0
 800839e:	9206      	str	r2, [sp, #24]
 80083a0:	bf54      	ite	pl
 80083a2:	9305      	strpl	r3, [sp, #20]
 80083a4:	9306      	strmi	r3, [sp, #24]
 80083a6:	f1bb 0f00 	cmp.w	fp, #0
 80083aa:	db3c      	blt.n	8008426 <_dtoa_r+0x24e>
 80083ac:	9b06      	ldr	r3, [sp, #24]
 80083ae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80083b2:	445b      	add	r3, fp
 80083b4:	9306      	str	r3, [sp, #24]
 80083b6:	2300      	movs	r3, #0
 80083b8:	9308      	str	r3, [sp, #32]
 80083ba:	9b07      	ldr	r3, [sp, #28]
 80083bc:	2b09      	cmp	r3, #9
 80083be:	d868      	bhi.n	8008492 <_dtoa_r+0x2ba>
 80083c0:	2b05      	cmp	r3, #5
 80083c2:	bfc4      	itt	gt
 80083c4:	3b04      	subgt	r3, #4
 80083c6:	9307      	strgt	r3, [sp, #28]
 80083c8:	9b07      	ldr	r3, [sp, #28]
 80083ca:	f1a3 0302 	sub.w	r3, r3, #2
 80083ce:	bfcc      	ite	gt
 80083d0:	2500      	movgt	r5, #0
 80083d2:	2501      	movle	r5, #1
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	f200 8085 	bhi.w	80084e4 <_dtoa_r+0x30c>
 80083da:	e8df f003 	tbb	[pc, r3]
 80083de:	3b2e      	.short	0x3b2e
 80083e0:	5839      	.short	0x5839
 80083e2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80083e6:	441d      	add	r5, r3
 80083e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	bfc1      	itttt	gt
 80083f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80083f8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80083fc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008400:	bfd6      	itet	le
 8008402:	f1c3 0320 	rsble	r3, r3, #32
 8008406:	ea48 0003 	orrgt.w	r0, r8, r3
 800840a:	fa06 f003 	lslle.w	r0, r6, r3
 800840e:	f7f8 f881 	bl	8000514 <__aeabi_ui2d>
 8008412:	2201      	movs	r2, #1
 8008414:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008418:	3d01      	subs	r5, #1
 800841a:	920e      	str	r2, [sp, #56]	; 0x38
 800841c:	e76f      	b.n	80082fe <_dtoa_r+0x126>
 800841e:	2301      	movs	r3, #1
 8008420:	e7b3      	b.n	800838a <_dtoa_r+0x1b2>
 8008422:	900c      	str	r0, [sp, #48]	; 0x30
 8008424:	e7b2      	b.n	800838c <_dtoa_r+0x1b4>
 8008426:	9b05      	ldr	r3, [sp, #20]
 8008428:	eba3 030b 	sub.w	r3, r3, fp
 800842c:	9305      	str	r3, [sp, #20]
 800842e:	f1cb 0300 	rsb	r3, fp, #0
 8008432:	9308      	str	r3, [sp, #32]
 8008434:	2300      	movs	r3, #0
 8008436:	930b      	str	r3, [sp, #44]	; 0x2c
 8008438:	e7bf      	b.n	80083ba <_dtoa_r+0x1e2>
 800843a:	2300      	movs	r3, #0
 800843c:	9309      	str	r3, [sp, #36]	; 0x24
 800843e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008440:	2b00      	cmp	r3, #0
 8008442:	dc52      	bgt.n	80084ea <_dtoa_r+0x312>
 8008444:	2301      	movs	r3, #1
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	9304      	str	r3, [sp, #16]
 800844a:	461a      	mov	r2, r3
 800844c:	920a      	str	r2, [sp, #40]	; 0x28
 800844e:	e00b      	b.n	8008468 <_dtoa_r+0x290>
 8008450:	2301      	movs	r3, #1
 8008452:	e7f3      	b.n	800843c <_dtoa_r+0x264>
 8008454:	2300      	movs	r3, #0
 8008456:	9309      	str	r3, [sp, #36]	; 0x24
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	445b      	add	r3, fp
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	3301      	adds	r3, #1
 8008460:	2b01      	cmp	r3, #1
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	bfb8      	it	lt
 8008466:	2301      	movlt	r3, #1
 8008468:	69e0      	ldr	r0, [r4, #28]
 800846a:	2100      	movs	r1, #0
 800846c:	2204      	movs	r2, #4
 800846e:	f102 0614 	add.w	r6, r2, #20
 8008472:	429e      	cmp	r6, r3
 8008474:	d93d      	bls.n	80084f2 <_dtoa_r+0x31a>
 8008476:	6041      	str	r1, [r0, #4]
 8008478:	4620      	mov	r0, r4
 800847a:	f000 fceb 	bl	8008e54 <_Balloc>
 800847e:	9000      	str	r0, [sp, #0]
 8008480:	2800      	cmp	r0, #0
 8008482:	d139      	bne.n	80084f8 <_dtoa_r+0x320>
 8008484:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <_dtoa_r+0x308>)
 8008486:	4602      	mov	r2, r0
 8008488:	f240 11af 	movw	r1, #431	; 0x1af
 800848c:	e6bd      	b.n	800820a <_dtoa_r+0x32>
 800848e:	2301      	movs	r3, #1
 8008490:	e7e1      	b.n	8008456 <_dtoa_r+0x27e>
 8008492:	2501      	movs	r5, #1
 8008494:	2300      	movs	r3, #0
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	9509      	str	r5, [sp, #36]	; 0x24
 800849a:	f04f 33ff 	mov.w	r3, #4294967295
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	2200      	movs	r2, #0
 80084a4:	2312      	movs	r3, #18
 80084a6:	e7d1      	b.n	800844c <_dtoa_r+0x274>
 80084a8:	636f4361 	.word	0x636f4361
 80084ac:	3fd287a7 	.word	0x3fd287a7
 80084b0:	8b60c8b3 	.word	0x8b60c8b3
 80084b4:	3fc68a28 	.word	0x3fc68a28
 80084b8:	509f79fb 	.word	0x509f79fb
 80084bc:	3fd34413 	.word	0x3fd34413
 80084c0:	0800a68d 	.word	0x0800a68d
 80084c4:	0800a6a4 	.word	0x0800a6a4
 80084c8:	7ff00000 	.word	0x7ff00000
 80084cc:	0800a689 	.word	0x0800a689
 80084d0:	0800a680 	.word	0x0800a680
 80084d4:	0800a65d 	.word	0x0800a65d
 80084d8:	3ff80000 	.word	0x3ff80000
 80084dc:	0800a790 	.word	0x0800a790
 80084e0:	0800a6fc 	.word	0x0800a6fc
 80084e4:	2301      	movs	r3, #1
 80084e6:	9309      	str	r3, [sp, #36]	; 0x24
 80084e8:	e7d7      	b.n	800849a <_dtoa_r+0x2c2>
 80084ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	9304      	str	r3, [sp, #16]
 80084f0:	e7ba      	b.n	8008468 <_dtoa_r+0x290>
 80084f2:	3101      	adds	r1, #1
 80084f4:	0052      	lsls	r2, r2, #1
 80084f6:	e7ba      	b.n	800846e <_dtoa_r+0x296>
 80084f8:	69e3      	ldr	r3, [r4, #28]
 80084fa:	9a00      	ldr	r2, [sp, #0]
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	9b04      	ldr	r3, [sp, #16]
 8008500:	2b0e      	cmp	r3, #14
 8008502:	f200 80a8 	bhi.w	8008656 <_dtoa_r+0x47e>
 8008506:	2d00      	cmp	r5, #0
 8008508:	f000 80a5 	beq.w	8008656 <_dtoa_r+0x47e>
 800850c:	f1bb 0f00 	cmp.w	fp, #0
 8008510:	dd38      	ble.n	8008584 <_dtoa_r+0x3ac>
 8008512:	4bc0      	ldr	r3, [pc, #768]	; (8008814 <_dtoa_r+0x63c>)
 8008514:	f00b 020f 	and.w	r2, fp, #15
 8008518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800851c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008520:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008524:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008528:	d019      	beq.n	800855e <_dtoa_r+0x386>
 800852a:	4bbb      	ldr	r3, [pc, #748]	; (8008818 <_dtoa_r+0x640>)
 800852c:	ec51 0b18 	vmov	r0, r1, d8
 8008530:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008534:	f7f8 f992 	bl	800085c <__aeabi_ddiv>
 8008538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800853c:	f008 080f 	and.w	r8, r8, #15
 8008540:	2503      	movs	r5, #3
 8008542:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008818 <_dtoa_r+0x640>
 8008546:	f1b8 0f00 	cmp.w	r8, #0
 800854a:	d10a      	bne.n	8008562 <_dtoa_r+0x38a>
 800854c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008550:	4632      	mov	r2, r6
 8008552:	463b      	mov	r3, r7
 8008554:	f7f8 f982 	bl	800085c <__aeabi_ddiv>
 8008558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800855c:	e02b      	b.n	80085b6 <_dtoa_r+0x3de>
 800855e:	2502      	movs	r5, #2
 8008560:	e7ef      	b.n	8008542 <_dtoa_r+0x36a>
 8008562:	f018 0f01 	tst.w	r8, #1
 8008566:	d008      	beq.n	800857a <_dtoa_r+0x3a2>
 8008568:	4630      	mov	r0, r6
 800856a:	4639      	mov	r1, r7
 800856c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008570:	f7f8 f84a 	bl	8000608 <__aeabi_dmul>
 8008574:	3501      	adds	r5, #1
 8008576:	4606      	mov	r6, r0
 8008578:	460f      	mov	r7, r1
 800857a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800857e:	f109 0908 	add.w	r9, r9, #8
 8008582:	e7e0      	b.n	8008546 <_dtoa_r+0x36e>
 8008584:	f000 809f 	beq.w	80086c6 <_dtoa_r+0x4ee>
 8008588:	f1cb 0600 	rsb	r6, fp, #0
 800858c:	4ba1      	ldr	r3, [pc, #644]	; (8008814 <_dtoa_r+0x63c>)
 800858e:	4fa2      	ldr	r7, [pc, #648]	; (8008818 <_dtoa_r+0x640>)
 8008590:	f006 020f 	and.w	r2, r6, #15
 8008594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859c:	ec51 0b18 	vmov	r0, r1, d8
 80085a0:	f7f8 f832 	bl	8000608 <__aeabi_dmul>
 80085a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085a8:	1136      	asrs	r6, r6, #4
 80085aa:	2300      	movs	r3, #0
 80085ac:	2502      	movs	r5, #2
 80085ae:	2e00      	cmp	r6, #0
 80085b0:	d17e      	bne.n	80086b0 <_dtoa_r+0x4d8>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1d0      	bne.n	8008558 <_dtoa_r+0x380>
 80085b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8084 	beq.w	80086ca <_dtoa_r+0x4f2>
 80085c2:	4b96      	ldr	r3, [pc, #600]	; (800881c <_dtoa_r+0x644>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	f7f8 fa8f 	bl	8000aec <__aeabi_dcmplt>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	d07b      	beq.n	80086ca <_dtoa_r+0x4f2>
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d078      	beq.n	80086ca <_dtoa_r+0x4f2>
 80085d8:	9b01      	ldr	r3, [sp, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dd39      	ble.n	8008652 <_dtoa_r+0x47a>
 80085de:	4b90      	ldr	r3, [pc, #576]	; (8008820 <_dtoa_r+0x648>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	4640      	mov	r0, r8
 80085e4:	4649      	mov	r1, r9
 80085e6:	f7f8 f80f 	bl	8000608 <__aeabi_dmul>
 80085ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ee:	9e01      	ldr	r6, [sp, #4]
 80085f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80085f4:	3501      	adds	r5, #1
 80085f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80085fa:	4628      	mov	r0, r5
 80085fc:	f7f7 ff9a 	bl	8000534 <__aeabi_i2d>
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	f7f8 f800 	bl	8000608 <__aeabi_dmul>
 8008608:	4b86      	ldr	r3, [pc, #536]	; (8008824 <_dtoa_r+0x64c>)
 800860a:	2200      	movs	r2, #0
 800860c:	f7f7 fe46 	bl	800029c <__adddf3>
 8008610:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	2e00      	cmp	r6, #0
 800861c:	d158      	bne.n	80086d0 <_dtoa_r+0x4f8>
 800861e:	4b82      	ldr	r3, [pc, #520]	; (8008828 <_dtoa_r+0x650>)
 8008620:	2200      	movs	r2, #0
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	f7f7 fe37 	bl	8000298 <__aeabi_dsub>
 800862a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800862e:	4680      	mov	r8, r0
 8008630:	4689      	mov	r9, r1
 8008632:	f7f8 fa79 	bl	8000b28 <__aeabi_dcmpgt>
 8008636:	2800      	cmp	r0, #0
 8008638:	f040 8296 	bne.w	8008b68 <_dtoa_r+0x990>
 800863c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008640:	4640      	mov	r0, r8
 8008642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008646:	4649      	mov	r1, r9
 8008648:	f7f8 fa50 	bl	8000aec <__aeabi_dcmplt>
 800864c:	2800      	cmp	r0, #0
 800864e:	f040 8289 	bne.w	8008b64 <_dtoa_r+0x98c>
 8008652:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008658:	2b00      	cmp	r3, #0
 800865a:	f2c0 814e 	blt.w	80088fa <_dtoa_r+0x722>
 800865e:	f1bb 0f0e 	cmp.w	fp, #14
 8008662:	f300 814a 	bgt.w	80088fa <_dtoa_r+0x722>
 8008666:	4b6b      	ldr	r3, [pc, #428]	; (8008814 <_dtoa_r+0x63c>)
 8008668:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800866c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008672:	2b00      	cmp	r3, #0
 8008674:	f280 80dc 	bge.w	8008830 <_dtoa_r+0x658>
 8008678:	9b04      	ldr	r3, [sp, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f300 80d8 	bgt.w	8008830 <_dtoa_r+0x658>
 8008680:	f040 826f 	bne.w	8008b62 <_dtoa_r+0x98a>
 8008684:	4b68      	ldr	r3, [pc, #416]	; (8008828 <_dtoa_r+0x650>)
 8008686:	2200      	movs	r2, #0
 8008688:	4640      	mov	r0, r8
 800868a:	4649      	mov	r1, r9
 800868c:	f7f7 ffbc 	bl	8000608 <__aeabi_dmul>
 8008690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008694:	f7f8 fa3e 	bl	8000b14 <__aeabi_dcmpge>
 8008698:	9e04      	ldr	r6, [sp, #16]
 800869a:	4637      	mov	r7, r6
 800869c:	2800      	cmp	r0, #0
 800869e:	f040 8245 	bne.w	8008b2c <_dtoa_r+0x954>
 80086a2:	9d00      	ldr	r5, [sp, #0]
 80086a4:	2331      	movs	r3, #49	; 0x31
 80086a6:	f805 3b01 	strb.w	r3, [r5], #1
 80086aa:	f10b 0b01 	add.w	fp, fp, #1
 80086ae:	e241      	b.n	8008b34 <_dtoa_r+0x95c>
 80086b0:	07f2      	lsls	r2, r6, #31
 80086b2:	d505      	bpl.n	80086c0 <_dtoa_r+0x4e8>
 80086b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b8:	f7f7 ffa6 	bl	8000608 <__aeabi_dmul>
 80086bc:	3501      	adds	r5, #1
 80086be:	2301      	movs	r3, #1
 80086c0:	1076      	asrs	r6, r6, #1
 80086c2:	3708      	adds	r7, #8
 80086c4:	e773      	b.n	80085ae <_dtoa_r+0x3d6>
 80086c6:	2502      	movs	r5, #2
 80086c8:	e775      	b.n	80085b6 <_dtoa_r+0x3de>
 80086ca:	9e04      	ldr	r6, [sp, #16]
 80086cc:	465f      	mov	r7, fp
 80086ce:	e792      	b.n	80085f6 <_dtoa_r+0x41e>
 80086d0:	9900      	ldr	r1, [sp, #0]
 80086d2:	4b50      	ldr	r3, [pc, #320]	; (8008814 <_dtoa_r+0x63c>)
 80086d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086d8:	4431      	add	r1, r6
 80086da:	9102      	str	r1, [sp, #8]
 80086dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086de:	eeb0 9a47 	vmov.f32	s18, s14
 80086e2:	eef0 9a67 	vmov.f32	s19, s15
 80086e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80086ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086ee:	2900      	cmp	r1, #0
 80086f0:	d044      	beq.n	800877c <_dtoa_r+0x5a4>
 80086f2:	494e      	ldr	r1, [pc, #312]	; (800882c <_dtoa_r+0x654>)
 80086f4:	2000      	movs	r0, #0
 80086f6:	f7f8 f8b1 	bl	800085c <__aeabi_ddiv>
 80086fa:	ec53 2b19 	vmov	r2, r3, d9
 80086fe:	f7f7 fdcb 	bl	8000298 <__aeabi_dsub>
 8008702:	9d00      	ldr	r5, [sp, #0]
 8008704:	ec41 0b19 	vmov	d9, r0, r1
 8008708:	4649      	mov	r1, r9
 800870a:	4640      	mov	r0, r8
 800870c:	f7f8 fa2c 	bl	8000b68 <__aeabi_d2iz>
 8008710:	4606      	mov	r6, r0
 8008712:	f7f7 ff0f 	bl	8000534 <__aeabi_i2d>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4640      	mov	r0, r8
 800871c:	4649      	mov	r1, r9
 800871e:	f7f7 fdbb 	bl	8000298 <__aeabi_dsub>
 8008722:	3630      	adds	r6, #48	; 0x30
 8008724:	f805 6b01 	strb.w	r6, [r5], #1
 8008728:	ec53 2b19 	vmov	r2, r3, d9
 800872c:	4680      	mov	r8, r0
 800872e:	4689      	mov	r9, r1
 8008730:	f7f8 f9dc 	bl	8000aec <__aeabi_dcmplt>
 8008734:	2800      	cmp	r0, #0
 8008736:	d164      	bne.n	8008802 <_dtoa_r+0x62a>
 8008738:	4642      	mov	r2, r8
 800873a:	464b      	mov	r3, r9
 800873c:	4937      	ldr	r1, [pc, #220]	; (800881c <_dtoa_r+0x644>)
 800873e:	2000      	movs	r0, #0
 8008740:	f7f7 fdaa 	bl	8000298 <__aeabi_dsub>
 8008744:	ec53 2b19 	vmov	r2, r3, d9
 8008748:	f7f8 f9d0 	bl	8000aec <__aeabi_dcmplt>
 800874c:	2800      	cmp	r0, #0
 800874e:	f040 80b6 	bne.w	80088be <_dtoa_r+0x6e6>
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	429d      	cmp	r5, r3
 8008756:	f43f af7c 	beq.w	8008652 <_dtoa_r+0x47a>
 800875a:	4b31      	ldr	r3, [pc, #196]	; (8008820 <_dtoa_r+0x648>)
 800875c:	ec51 0b19 	vmov	r0, r1, d9
 8008760:	2200      	movs	r2, #0
 8008762:	f7f7 ff51 	bl	8000608 <__aeabi_dmul>
 8008766:	4b2e      	ldr	r3, [pc, #184]	; (8008820 <_dtoa_r+0x648>)
 8008768:	ec41 0b19 	vmov	d9, r0, r1
 800876c:	2200      	movs	r2, #0
 800876e:	4640      	mov	r0, r8
 8008770:	4649      	mov	r1, r9
 8008772:	f7f7 ff49 	bl	8000608 <__aeabi_dmul>
 8008776:	4680      	mov	r8, r0
 8008778:	4689      	mov	r9, r1
 800877a:	e7c5      	b.n	8008708 <_dtoa_r+0x530>
 800877c:	ec51 0b17 	vmov	r0, r1, d7
 8008780:	f7f7 ff42 	bl	8000608 <__aeabi_dmul>
 8008784:	9b02      	ldr	r3, [sp, #8]
 8008786:	9d00      	ldr	r5, [sp, #0]
 8008788:	930f      	str	r3, [sp, #60]	; 0x3c
 800878a:	ec41 0b19 	vmov	d9, r0, r1
 800878e:	4649      	mov	r1, r9
 8008790:	4640      	mov	r0, r8
 8008792:	f7f8 f9e9 	bl	8000b68 <__aeabi_d2iz>
 8008796:	4606      	mov	r6, r0
 8008798:	f7f7 fecc 	bl	8000534 <__aeabi_i2d>
 800879c:	3630      	adds	r6, #48	; 0x30
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4640      	mov	r0, r8
 80087a4:	4649      	mov	r1, r9
 80087a6:	f7f7 fd77 	bl	8000298 <__aeabi_dsub>
 80087aa:	f805 6b01 	strb.w	r6, [r5], #1
 80087ae:	9b02      	ldr	r3, [sp, #8]
 80087b0:	429d      	cmp	r5, r3
 80087b2:	4680      	mov	r8, r0
 80087b4:	4689      	mov	r9, r1
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	d124      	bne.n	8008806 <_dtoa_r+0x62e>
 80087bc:	4b1b      	ldr	r3, [pc, #108]	; (800882c <_dtoa_r+0x654>)
 80087be:	ec51 0b19 	vmov	r0, r1, d9
 80087c2:	f7f7 fd6b 	bl	800029c <__adddf3>
 80087c6:	4602      	mov	r2, r0
 80087c8:	460b      	mov	r3, r1
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f7f8 f9ab 	bl	8000b28 <__aeabi_dcmpgt>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d173      	bne.n	80088be <_dtoa_r+0x6e6>
 80087d6:	ec53 2b19 	vmov	r2, r3, d9
 80087da:	4914      	ldr	r1, [pc, #80]	; (800882c <_dtoa_r+0x654>)
 80087dc:	2000      	movs	r0, #0
 80087de:	f7f7 fd5b 	bl	8000298 <__aeabi_dsub>
 80087e2:	4602      	mov	r2, r0
 80087e4:	460b      	mov	r3, r1
 80087e6:	4640      	mov	r0, r8
 80087e8:	4649      	mov	r1, r9
 80087ea:	f7f8 f97f 	bl	8000aec <__aeabi_dcmplt>
 80087ee:	2800      	cmp	r0, #0
 80087f0:	f43f af2f 	beq.w	8008652 <_dtoa_r+0x47a>
 80087f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80087f6:	1e6b      	subs	r3, r5, #1
 80087f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80087fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087fe:	2b30      	cmp	r3, #48	; 0x30
 8008800:	d0f8      	beq.n	80087f4 <_dtoa_r+0x61c>
 8008802:	46bb      	mov	fp, r7
 8008804:	e04a      	b.n	800889c <_dtoa_r+0x6c4>
 8008806:	4b06      	ldr	r3, [pc, #24]	; (8008820 <_dtoa_r+0x648>)
 8008808:	f7f7 fefe 	bl	8000608 <__aeabi_dmul>
 800880c:	4680      	mov	r8, r0
 800880e:	4689      	mov	r9, r1
 8008810:	e7bd      	b.n	800878e <_dtoa_r+0x5b6>
 8008812:	bf00      	nop
 8008814:	0800a790 	.word	0x0800a790
 8008818:	0800a768 	.word	0x0800a768
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	40240000 	.word	0x40240000
 8008824:	401c0000 	.word	0x401c0000
 8008828:	40140000 	.word	0x40140000
 800882c:	3fe00000 	.word	0x3fe00000
 8008830:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008834:	9d00      	ldr	r5, [sp, #0]
 8008836:	4642      	mov	r2, r8
 8008838:	464b      	mov	r3, r9
 800883a:	4630      	mov	r0, r6
 800883c:	4639      	mov	r1, r7
 800883e:	f7f8 f80d 	bl	800085c <__aeabi_ddiv>
 8008842:	f7f8 f991 	bl	8000b68 <__aeabi_d2iz>
 8008846:	9001      	str	r0, [sp, #4]
 8008848:	f7f7 fe74 	bl	8000534 <__aeabi_i2d>
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	f7f7 feda 	bl	8000608 <__aeabi_dmul>
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4630      	mov	r0, r6
 800885a:	4639      	mov	r1, r7
 800885c:	f7f7 fd1c 	bl	8000298 <__aeabi_dsub>
 8008860:	9e01      	ldr	r6, [sp, #4]
 8008862:	9f04      	ldr	r7, [sp, #16]
 8008864:	3630      	adds	r6, #48	; 0x30
 8008866:	f805 6b01 	strb.w	r6, [r5], #1
 800886a:	9e00      	ldr	r6, [sp, #0]
 800886c:	1bae      	subs	r6, r5, r6
 800886e:	42b7      	cmp	r7, r6
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	d134      	bne.n	80088e0 <_dtoa_r+0x708>
 8008876:	f7f7 fd11 	bl	800029c <__adddf3>
 800887a:	4642      	mov	r2, r8
 800887c:	464b      	mov	r3, r9
 800887e:	4606      	mov	r6, r0
 8008880:	460f      	mov	r7, r1
 8008882:	f7f8 f951 	bl	8000b28 <__aeabi_dcmpgt>
 8008886:	b9c8      	cbnz	r0, 80088bc <_dtoa_r+0x6e4>
 8008888:	4642      	mov	r2, r8
 800888a:	464b      	mov	r3, r9
 800888c:	4630      	mov	r0, r6
 800888e:	4639      	mov	r1, r7
 8008890:	f7f8 f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8008894:	b110      	cbz	r0, 800889c <_dtoa_r+0x6c4>
 8008896:	9b01      	ldr	r3, [sp, #4]
 8008898:	07db      	lsls	r3, r3, #31
 800889a:	d40f      	bmi.n	80088bc <_dtoa_r+0x6e4>
 800889c:	4651      	mov	r1, sl
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 fb18 	bl	8008ed4 <_Bfree>
 80088a4:	2300      	movs	r3, #0
 80088a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088a8:	702b      	strb	r3, [r5, #0]
 80088aa:	f10b 0301 	add.w	r3, fp, #1
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f43f ace2 	beq.w	800827c <_dtoa_r+0xa4>
 80088b8:	601d      	str	r5, [r3, #0]
 80088ba:	e4df      	b.n	800827c <_dtoa_r+0xa4>
 80088bc:	465f      	mov	r7, fp
 80088be:	462b      	mov	r3, r5
 80088c0:	461d      	mov	r5, r3
 80088c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088c6:	2a39      	cmp	r2, #57	; 0x39
 80088c8:	d106      	bne.n	80088d8 <_dtoa_r+0x700>
 80088ca:	9a00      	ldr	r2, [sp, #0]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d1f7      	bne.n	80088c0 <_dtoa_r+0x6e8>
 80088d0:	9900      	ldr	r1, [sp, #0]
 80088d2:	2230      	movs	r2, #48	; 0x30
 80088d4:	3701      	adds	r7, #1
 80088d6:	700a      	strb	r2, [r1, #0]
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	3201      	adds	r2, #1
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	e790      	b.n	8008802 <_dtoa_r+0x62a>
 80088e0:	4ba3      	ldr	r3, [pc, #652]	; (8008b70 <_dtoa_r+0x998>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	f7f7 fe90 	bl	8000608 <__aeabi_dmul>
 80088e8:	2200      	movs	r2, #0
 80088ea:	2300      	movs	r3, #0
 80088ec:	4606      	mov	r6, r0
 80088ee:	460f      	mov	r7, r1
 80088f0:	f7f8 f8f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	d09e      	beq.n	8008836 <_dtoa_r+0x65e>
 80088f8:	e7d0      	b.n	800889c <_dtoa_r+0x6c4>
 80088fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088fc:	2a00      	cmp	r2, #0
 80088fe:	f000 80ca 	beq.w	8008a96 <_dtoa_r+0x8be>
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	2a01      	cmp	r2, #1
 8008906:	f300 80ad 	bgt.w	8008a64 <_dtoa_r+0x88c>
 800890a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800890c:	2a00      	cmp	r2, #0
 800890e:	f000 80a5 	beq.w	8008a5c <_dtoa_r+0x884>
 8008912:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008916:	9e08      	ldr	r6, [sp, #32]
 8008918:	9d05      	ldr	r5, [sp, #20]
 800891a:	9a05      	ldr	r2, [sp, #20]
 800891c:	441a      	add	r2, r3
 800891e:	9205      	str	r2, [sp, #20]
 8008920:	9a06      	ldr	r2, [sp, #24]
 8008922:	2101      	movs	r1, #1
 8008924:	441a      	add	r2, r3
 8008926:	4620      	mov	r0, r4
 8008928:	9206      	str	r2, [sp, #24]
 800892a:	f000 fb89 	bl	8009040 <__i2b>
 800892e:	4607      	mov	r7, r0
 8008930:	b165      	cbz	r5, 800894c <_dtoa_r+0x774>
 8008932:	9b06      	ldr	r3, [sp, #24]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd09      	ble.n	800894c <_dtoa_r+0x774>
 8008938:	42ab      	cmp	r3, r5
 800893a:	9a05      	ldr	r2, [sp, #20]
 800893c:	bfa8      	it	ge
 800893e:	462b      	movge	r3, r5
 8008940:	1ad2      	subs	r2, r2, r3
 8008942:	9205      	str	r2, [sp, #20]
 8008944:	9a06      	ldr	r2, [sp, #24]
 8008946:	1aed      	subs	r5, r5, r3
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	9306      	str	r3, [sp, #24]
 800894c:	9b08      	ldr	r3, [sp, #32]
 800894e:	b1f3      	cbz	r3, 800898e <_dtoa_r+0x7b6>
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	2b00      	cmp	r3, #0
 8008954:	f000 80a3 	beq.w	8008a9e <_dtoa_r+0x8c6>
 8008958:	2e00      	cmp	r6, #0
 800895a:	dd10      	ble.n	800897e <_dtoa_r+0x7a6>
 800895c:	4639      	mov	r1, r7
 800895e:	4632      	mov	r2, r6
 8008960:	4620      	mov	r0, r4
 8008962:	f000 fc2d 	bl	80091c0 <__pow5mult>
 8008966:	4652      	mov	r2, sl
 8008968:	4601      	mov	r1, r0
 800896a:	4607      	mov	r7, r0
 800896c:	4620      	mov	r0, r4
 800896e:	f000 fb7d 	bl	800906c <__multiply>
 8008972:	4651      	mov	r1, sl
 8008974:	4680      	mov	r8, r0
 8008976:	4620      	mov	r0, r4
 8008978:	f000 faac 	bl	8008ed4 <_Bfree>
 800897c:	46c2      	mov	sl, r8
 800897e:	9b08      	ldr	r3, [sp, #32]
 8008980:	1b9a      	subs	r2, r3, r6
 8008982:	d004      	beq.n	800898e <_dtoa_r+0x7b6>
 8008984:	4651      	mov	r1, sl
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fc1a 	bl	80091c0 <__pow5mult>
 800898c:	4682      	mov	sl, r0
 800898e:	2101      	movs	r1, #1
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fb55 	bl	8009040 <__i2b>
 8008996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008998:	2b00      	cmp	r3, #0
 800899a:	4606      	mov	r6, r0
 800899c:	f340 8081 	ble.w	8008aa2 <_dtoa_r+0x8ca>
 80089a0:	461a      	mov	r2, r3
 80089a2:	4601      	mov	r1, r0
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fc0b 	bl	80091c0 <__pow5mult>
 80089aa:	9b07      	ldr	r3, [sp, #28]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	4606      	mov	r6, r0
 80089b0:	dd7a      	ble.n	8008aa8 <_dtoa_r+0x8d0>
 80089b2:	f04f 0800 	mov.w	r8, #0
 80089b6:	6933      	ldr	r3, [r6, #16]
 80089b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089bc:	6918      	ldr	r0, [r3, #16]
 80089be:	f000 faf1 	bl	8008fa4 <__hi0bits>
 80089c2:	f1c0 0020 	rsb	r0, r0, #32
 80089c6:	9b06      	ldr	r3, [sp, #24]
 80089c8:	4418      	add	r0, r3
 80089ca:	f010 001f 	ands.w	r0, r0, #31
 80089ce:	f000 8094 	beq.w	8008afa <_dtoa_r+0x922>
 80089d2:	f1c0 0320 	rsb	r3, r0, #32
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	f340 8085 	ble.w	8008ae6 <_dtoa_r+0x90e>
 80089dc:	9b05      	ldr	r3, [sp, #20]
 80089de:	f1c0 001c 	rsb	r0, r0, #28
 80089e2:	4403      	add	r3, r0
 80089e4:	9305      	str	r3, [sp, #20]
 80089e6:	9b06      	ldr	r3, [sp, #24]
 80089e8:	4403      	add	r3, r0
 80089ea:	4405      	add	r5, r0
 80089ec:	9306      	str	r3, [sp, #24]
 80089ee:	9b05      	ldr	r3, [sp, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dd05      	ble.n	8008a00 <_dtoa_r+0x828>
 80089f4:	4651      	mov	r1, sl
 80089f6:	461a      	mov	r2, r3
 80089f8:	4620      	mov	r0, r4
 80089fa:	f000 fc3b 	bl	8009274 <__lshift>
 80089fe:	4682      	mov	sl, r0
 8008a00:	9b06      	ldr	r3, [sp, #24]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dd05      	ble.n	8008a12 <_dtoa_r+0x83a>
 8008a06:	4631      	mov	r1, r6
 8008a08:	461a      	mov	r2, r3
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f000 fc32 	bl	8009274 <__lshift>
 8008a10:	4606      	mov	r6, r0
 8008a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d072      	beq.n	8008afe <_dtoa_r+0x926>
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4650      	mov	r0, sl
 8008a1c:	f000 fc96 	bl	800934c <__mcmp>
 8008a20:	2800      	cmp	r0, #0
 8008a22:	da6c      	bge.n	8008afe <_dtoa_r+0x926>
 8008a24:	2300      	movs	r3, #0
 8008a26:	4651      	mov	r1, sl
 8008a28:	220a      	movs	r2, #10
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 fa74 	bl	8008f18 <__multadd>
 8008a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a36:	4682      	mov	sl, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 81b0 	beq.w	8008d9e <_dtoa_r+0xbc6>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4639      	mov	r1, r7
 8008a42:	220a      	movs	r2, #10
 8008a44:	4620      	mov	r0, r4
 8008a46:	f000 fa67 	bl	8008f18 <__multadd>
 8008a4a:	9b01      	ldr	r3, [sp, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	4607      	mov	r7, r0
 8008a50:	f300 8096 	bgt.w	8008b80 <_dtoa_r+0x9a8>
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	dc59      	bgt.n	8008b0e <_dtoa_r+0x936>
 8008a5a:	e091      	b.n	8008b80 <_dtoa_r+0x9a8>
 8008a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a62:	e758      	b.n	8008916 <_dtoa_r+0x73e>
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	1e5e      	subs	r6, r3, #1
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	42b3      	cmp	r3, r6
 8008a6c:	bfbf      	itttt	lt
 8008a6e:	9b08      	ldrlt	r3, [sp, #32]
 8008a70:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008a72:	9608      	strlt	r6, [sp, #32]
 8008a74:	1af3      	sublt	r3, r6, r3
 8008a76:	bfb4      	ite	lt
 8008a78:	18d2      	addlt	r2, r2, r3
 8008a7a:	1b9e      	subge	r6, r3, r6
 8008a7c:	9b04      	ldr	r3, [sp, #16]
 8008a7e:	bfbc      	itt	lt
 8008a80:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008a82:	2600      	movlt	r6, #0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bfb7      	itett	lt
 8008a88:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008a8c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008a90:	1a9d      	sublt	r5, r3, r2
 8008a92:	2300      	movlt	r3, #0
 8008a94:	e741      	b.n	800891a <_dtoa_r+0x742>
 8008a96:	9e08      	ldr	r6, [sp, #32]
 8008a98:	9d05      	ldr	r5, [sp, #20]
 8008a9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008a9c:	e748      	b.n	8008930 <_dtoa_r+0x758>
 8008a9e:	9a08      	ldr	r2, [sp, #32]
 8008aa0:	e770      	b.n	8008984 <_dtoa_r+0x7ac>
 8008aa2:	9b07      	ldr	r3, [sp, #28]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	dc19      	bgt.n	8008adc <_dtoa_r+0x904>
 8008aa8:	9b02      	ldr	r3, [sp, #8]
 8008aaa:	b9bb      	cbnz	r3, 8008adc <_dtoa_r+0x904>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab2:	b99b      	cbnz	r3, 8008adc <_dtoa_r+0x904>
 8008ab4:	9b03      	ldr	r3, [sp, #12]
 8008ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aba:	0d1b      	lsrs	r3, r3, #20
 8008abc:	051b      	lsls	r3, r3, #20
 8008abe:	b183      	cbz	r3, 8008ae2 <_dtoa_r+0x90a>
 8008ac0:	9b05      	ldr	r3, [sp, #20]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	9305      	str	r3, [sp, #20]
 8008ac6:	9b06      	ldr	r3, [sp, #24]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	9306      	str	r3, [sp, #24]
 8008acc:	f04f 0801 	mov.w	r8, #1
 8008ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f47f af6f 	bne.w	80089b6 <_dtoa_r+0x7de>
 8008ad8:	2001      	movs	r0, #1
 8008ada:	e774      	b.n	80089c6 <_dtoa_r+0x7ee>
 8008adc:	f04f 0800 	mov.w	r8, #0
 8008ae0:	e7f6      	b.n	8008ad0 <_dtoa_r+0x8f8>
 8008ae2:	4698      	mov	r8, r3
 8008ae4:	e7f4      	b.n	8008ad0 <_dtoa_r+0x8f8>
 8008ae6:	d082      	beq.n	80089ee <_dtoa_r+0x816>
 8008ae8:	9a05      	ldr	r2, [sp, #20]
 8008aea:	331c      	adds	r3, #28
 8008aec:	441a      	add	r2, r3
 8008aee:	9205      	str	r2, [sp, #20]
 8008af0:	9a06      	ldr	r2, [sp, #24]
 8008af2:	441a      	add	r2, r3
 8008af4:	441d      	add	r5, r3
 8008af6:	9206      	str	r2, [sp, #24]
 8008af8:	e779      	b.n	80089ee <_dtoa_r+0x816>
 8008afa:	4603      	mov	r3, r0
 8008afc:	e7f4      	b.n	8008ae8 <_dtoa_r+0x910>
 8008afe:	9b04      	ldr	r3, [sp, #16]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	dc37      	bgt.n	8008b74 <_dtoa_r+0x99c>
 8008b04:	9b07      	ldr	r3, [sp, #28]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	dd34      	ble.n	8008b74 <_dtoa_r+0x99c>
 8008b0a:	9b04      	ldr	r3, [sp, #16]
 8008b0c:	9301      	str	r3, [sp, #4]
 8008b0e:	9b01      	ldr	r3, [sp, #4]
 8008b10:	b963      	cbnz	r3, 8008b2c <_dtoa_r+0x954>
 8008b12:	4631      	mov	r1, r6
 8008b14:	2205      	movs	r2, #5
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 f9fe 	bl	8008f18 <__multadd>
 8008b1c:	4601      	mov	r1, r0
 8008b1e:	4606      	mov	r6, r0
 8008b20:	4650      	mov	r0, sl
 8008b22:	f000 fc13 	bl	800934c <__mcmp>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f73f adbb 	bgt.w	80086a2 <_dtoa_r+0x4ca>
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b2e:	9d00      	ldr	r5, [sp, #0]
 8008b30:	ea6f 0b03 	mvn.w	fp, r3
 8008b34:	f04f 0800 	mov.w	r8, #0
 8008b38:	4631      	mov	r1, r6
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 f9ca 	bl	8008ed4 <_Bfree>
 8008b40:	2f00      	cmp	r7, #0
 8008b42:	f43f aeab 	beq.w	800889c <_dtoa_r+0x6c4>
 8008b46:	f1b8 0f00 	cmp.w	r8, #0
 8008b4a:	d005      	beq.n	8008b58 <_dtoa_r+0x980>
 8008b4c:	45b8      	cmp	r8, r7
 8008b4e:	d003      	beq.n	8008b58 <_dtoa_r+0x980>
 8008b50:	4641      	mov	r1, r8
 8008b52:	4620      	mov	r0, r4
 8008b54:	f000 f9be 	bl	8008ed4 <_Bfree>
 8008b58:	4639      	mov	r1, r7
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 f9ba 	bl	8008ed4 <_Bfree>
 8008b60:	e69c      	b.n	800889c <_dtoa_r+0x6c4>
 8008b62:	2600      	movs	r6, #0
 8008b64:	4637      	mov	r7, r6
 8008b66:	e7e1      	b.n	8008b2c <_dtoa_r+0x954>
 8008b68:	46bb      	mov	fp, r7
 8008b6a:	4637      	mov	r7, r6
 8008b6c:	e599      	b.n	80086a2 <_dtoa_r+0x4ca>
 8008b6e:	bf00      	nop
 8008b70:	40240000 	.word	0x40240000
 8008b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f000 80c8 	beq.w	8008d0c <_dtoa_r+0xb34>
 8008b7c:	9b04      	ldr	r3, [sp, #16]
 8008b7e:	9301      	str	r3, [sp, #4]
 8008b80:	2d00      	cmp	r5, #0
 8008b82:	dd05      	ble.n	8008b90 <_dtoa_r+0x9b8>
 8008b84:	4639      	mov	r1, r7
 8008b86:	462a      	mov	r2, r5
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f000 fb73 	bl	8009274 <__lshift>
 8008b8e:	4607      	mov	r7, r0
 8008b90:	f1b8 0f00 	cmp.w	r8, #0
 8008b94:	d05b      	beq.n	8008c4e <_dtoa_r+0xa76>
 8008b96:	6879      	ldr	r1, [r7, #4]
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f000 f95b 	bl	8008e54 <_Balloc>
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	b928      	cbnz	r0, 8008bae <_dtoa_r+0x9d6>
 8008ba2:	4b83      	ldr	r3, [pc, #524]	; (8008db0 <_dtoa_r+0xbd8>)
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008baa:	f7ff bb2e 	b.w	800820a <_dtoa_r+0x32>
 8008bae:	693a      	ldr	r2, [r7, #16]
 8008bb0:	3202      	adds	r2, #2
 8008bb2:	0092      	lsls	r2, r2, #2
 8008bb4:	f107 010c 	add.w	r1, r7, #12
 8008bb8:	300c      	adds	r0, #12
 8008bba:	f000 fee7 	bl	800998c <memcpy>
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	f000 fb56 	bl	8009274 <__lshift>
 8008bc8:	9b00      	ldr	r3, [sp, #0]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	9304      	str	r3, [sp, #16]
 8008bce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	9308      	str	r3, [sp, #32]
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	46b8      	mov	r8, r7
 8008bde:	9306      	str	r3, [sp, #24]
 8008be0:	4607      	mov	r7, r0
 8008be2:	9b04      	ldr	r3, [sp, #16]
 8008be4:	4631      	mov	r1, r6
 8008be6:	3b01      	subs	r3, #1
 8008be8:	4650      	mov	r0, sl
 8008bea:	9301      	str	r3, [sp, #4]
 8008bec:	f7ff fa69 	bl	80080c2 <quorem>
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	9002      	str	r0, [sp, #8]
 8008bf4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008bf8:	4650      	mov	r0, sl
 8008bfa:	f000 fba7 	bl	800934c <__mcmp>
 8008bfe:	463a      	mov	r2, r7
 8008c00:	9005      	str	r0, [sp, #20]
 8008c02:	4631      	mov	r1, r6
 8008c04:	4620      	mov	r0, r4
 8008c06:	f000 fbbd 	bl	8009384 <__mdiff>
 8008c0a:	68c2      	ldr	r2, [r0, #12]
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	bb02      	cbnz	r2, 8008c52 <_dtoa_r+0xa7a>
 8008c10:	4601      	mov	r1, r0
 8008c12:	4650      	mov	r0, sl
 8008c14:	f000 fb9a 	bl	800934c <__mcmp>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	9209      	str	r2, [sp, #36]	; 0x24
 8008c20:	f000 f958 	bl	8008ed4 <_Bfree>
 8008c24:	9b07      	ldr	r3, [sp, #28]
 8008c26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c28:	9d04      	ldr	r5, [sp, #16]
 8008c2a:	ea43 0102 	orr.w	r1, r3, r2
 8008c2e:	9b06      	ldr	r3, [sp, #24]
 8008c30:	4319      	orrs	r1, r3
 8008c32:	d110      	bne.n	8008c56 <_dtoa_r+0xa7e>
 8008c34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c38:	d029      	beq.n	8008c8e <_dtoa_r+0xab6>
 8008c3a:	9b05      	ldr	r3, [sp, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dd02      	ble.n	8008c46 <_dtoa_r+0xa6e>
 8008c40:	9b02      	ldr	r3, [sp, #8]
 8008c42:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	f883 9000 	strb.w	r9, [r3]
 8008c4c:	e774      	b.n	8008b38 <_dtoa_r+0x960>
 8008c4e:	4638      	mov	r0, r7
 8008c50:	e7ba      	b.n	8008bc8 <_dtoa_r+0x9f0>
 8008c52:	2201      	movs	r2, #1
 8008c54:	e7e1      	b.n	8008c1a <_dtoa_r+0xa42>
 8008c56:	9b05      	ldr	r3, [sp, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	db04      	blt.n	8008c66 <_dtoa_r+0xa8e>
 8008c5c:	9907      	ldr	r1, [sp, #28]
 8008c5e:	430b      	orrs	r3, r1
 8008c60:	9906      	ldr	r1, [sp, #24]
 8008c62:	430b      	orrs	r3, r1
 8008c64:	d120      	bne.n	8008ca8 <_dtoa_r+0xad0>
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	dded      	ble.n	8008c46 <_dtoa_r+0xa6e>
 8008c6a:	4651      	mov	r1, sl
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 fb00 	bl	8009274 <__lshift>
 8008c74:	4631      	mov	r1, r6
 8008c76:	4682      	mov	sl, r0
 8008c78:	f000 fb68 	bl	800934c <__mcmp>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dc03      	bgt.n	8008c88 <_dtoa_r+0xab0>
 8008c80:	d1e1      	bne.n	8008c46 <_dtoa_r+0xa6e>
 8008c82:	f019 0f01 	tst.w	r9, #1
 8008c86:	d0de      	beq.n	8008c46 <_dtoa_r+0xa6e>
 8008c88:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008c8c:	d1d8      	bne.n	8008c40 <_dtoa_r+0xa68>
 8008c8e:	9a01      	ldr	r2, [sp, #4]
 8008c90:	2339      	movs	r3, #57	; 0x39
 8008c92:	7013      	strb	r3, [r2, #0]
 8008c94:	462b      	mov	r3, r5
 8008c96:	461d      	mov	r5, r3
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c9e:	2a39      	cmp	r2, #57	; 0x39
 8008ca0:	d06c      	beq.n	8008d7c <_dtoa_r+0xba4>
 8008ca2:	3201      	adds	r2, #1
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e747      	b.n	8008b38 <_dtoa_r+0x960>
 8008ca8:	2a00      	cmp	r2, #0
 8008caa:	dd07      	ble.n	8008cbc <_dtoa_r+0xae4>
 8008cac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008cb0:	d0ed      	beq.n	8008c8e <_dtoa_r+0xab6>
 8008cb2:	9a01      	ldr	r2, [sp, #4]
 8008cb4:	f109 0301 	add.w	r3, r9, #1
 8008cb8:	7013      	strb	r3, [r2, #0]
 8008cba:	e73d      	b.n	8008b38 <_dtoa_r+0x960>
 8008cbc:	9b04      	ldr	r3, [sp, #16]
 8008cbe:	9a08      	ldr	r2, [sp, #32]
 8008cc0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d043      	beq.n	8008d50 <_dtoa_r+0xb78>
 8008cc8:	4651      	mov	r1, sl
 8008cca:	2300      	movs	r3, #0
 8008ccc:	220a      	movs	r2, #10
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 f922 	bl	8008f18 <__multadd>
 8008cd4:	45b8      	cmp	r8, r7
 8008cd6:	4682      	mov	sl, r0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	f04f 020a 	mov.w	r2, #10
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	d107      	bne.n	8008cf6 <_dtoa_r+0xb1e>
 8008ce6:	f000 f917 	bl	8008f18 <__multadd>
 8008cea:	4680      	mov	r8, r0
 8008cec:	4607      	mov	r7, r0
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	9304      	str	r3, [sp, #16]
 8008cf4:	e775      	b.n	8008be2 <_dtoa_r+0xa0a>
 8008cf6:	f000 f90f 	bl	8008f18 <__multadd>
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	2300      	movs	r3, #0
 8008d00:	220a      	movs	r2, #10
 8008d02:	4620      	mov	r0, r4
 8008d04:	f000 f908 	bl	8008f18 <__multadd>
 8008d08:	4607      	mov	r7, r0
 8008d0a:	e7f0      	b.n	8008cee <_dtoa_r+0xb16>
 8008d0c:	9b04      	ldr	r3, [sp, #16]
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	9d00      	ldr	r5, [sp, #0]
 8008d12:	4631      	mov	r1, r6
 8008d14:	4650      	mov	r0, sl
 8008d16:	f7ff f9d4 	bl	80080c2 <quorem>
 8008d1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d1e:	9b00      	ldr	r3, [sp, #0]
 8008d20:	f805 9b01 	strb.w	r9, [r5], #1
 8008d24:	1aea      	subs	r2, r5, r3
 8008d26:	9b01      	ldr	r3, [sp, #4]
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	dd07      	ble.n	8008d3c <_dtoa_r+0xb64>
 8008d2c:	4651      	mov	r1, sl
 8008d2e:	2300      	movs	r3, #0
 8008d30:	220a      	movs	r2, #10
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 f8f0 	bl	8008f18 <__multadd>
 8008d38:	4682      	mov	sl, r0
 8008d3a:	e7ea      	b.n	8008d12 <_dtoa_r+0xb3a>
 8008d3c:	9b01      	ldr	r3, [sp, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	bfc8      	it	gt
 8008d42:	461d      	movgt	r5, r3
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	bfd8      	it	le
 8008d48:	2501      	movle	r5, #1
 8008d4a:	441d      	add	r5, r3
 8008d4c:	f04f 0800 	mov.w	r8, #0
 8008d50:	4651      	mov	r1, sl
 8008d52:	2201      	movs	r2, #1
 8008d54:	4620      	mov	r0, r4
 8008d56:	f000 fa8d 	bl	8009274 <__lshift>
 8008d5a:	4631      	mov	r1, r6
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	f000 faf5 	bl	800934c <__mcmp>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	dc96      	bgt.n	8008c94 <_dtoa_r+0xabc>
 8008d66:	d102      	bne.n	8008d6e <_dtoa_r+0xb96>
 8008d68:	f019 0f01 	tst.w	r9, #1
 8008d6c:	d192      	bne.n	8008c94 <_dtoa_r+0xabc>
 8008d6e:	462b      	mov	r3, r5
 8008d70:	461d      	mov	r5, r3
 8008d72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d76:	2a30      	cmp	r2, #48	; 0x30
 8008d78:	d0fa      	beq.n	8008d70 <_dtoa_r+0xb98>
 8008d7a:	e6dd      	b.n	8008b38 <_dtoa_r+0x960>
 8008d7c:	9a00      	ldr	r2, [sp, #0]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d189      	bne.n	8008c96 <_dtoa_r+0xabe>
 8008d82:	f10b 0b01 	add.w	fp, fp, #1
 8008d86:	2331      	movs	r3, #49	; 0x31
 8008d88:	e796      	b.n	8008cb8 <_dtoa_r+0xae0>
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <_dtoa_r+0xbdc>)
 8008d8c:	f7ff ba99 	b.w	80082c2 <_dtoa_r+0xea>
 8008d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f47f aa6d 	bne.w	8008272 <_dtoa_r+0x9a>
 8008d98:	4b07      	ldr	r3, [pc, #28]	; (8008db8 <_dtoa_r+0xbe0>)
 8008d9a:	f7ff ba92 	b.w	80082c2 <_dtoa_r+0xea>
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	dcb5      	bgt.n	8008d10 <_dtoa_r+0xb38>
 8008da4:	9b07      	ldr	r3, [sp, #28]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	f73f aeb1 	bgt.w	8008b0e <_dtoa_r+0x936>
 8008dac:	e7b0      	b.n	8008d10 <_dtoa_r+0xb38>
 8008dae:	bf00      	nop
 8008db0:	0800a6fc 	.word	0x0800a6fc
 8008db4:	0800a65c 	.word	0x0800a65c
 8008db8:	0800a680 	.word	0x0800a680

08008dbc <_free_r>:
 8008dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d044      	beq.n	8008e4c <_free_r+0x90>
 8008dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc6:	9001      	str	r0, [sp, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f1a1 0404 	sub.w	r4, r1, #4
 8008dce:	bfb8      	it	lt
 8008dd0:	18e4      	addlt	r4, r4, r3
 8008dd2:	f7fe faf7 	bl	80073c4 <__malloc_lock>
 8008dd6:	4a1e      	ldr	r2, [pc, #120]	; (8008e50 <_free_r+0x94>)
 8008dd8:	9801      	ldr	r0, [sp, #4]
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	b933      	cbnz	r3, 8008dec <_free_r+0x30>
 8008dde:	6063      	str	r3, [r4, #4]
 8008de0:	6014      	str	r4, [r2, #0]
 8008de2:	b003      	add	sp, #12
 8008de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de8:	f7fe baf2 	b.w	80073d0 <__malloc_unlock>
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d908      	bls.n	8008e02 <_free_r+0x46>
 8008df0:	6825      	ldr	r5, [r4, #0]
 8008df2:	1961      	adds	r1, r4, r5
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf01      	itttt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	1949      	addeq	r1, r1, r5
 8008dfe:	6021      	streq	r1, [r4, #0]
 8008e00:	e7ed      	b.n	8008dde <_free_r+0x22>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x50>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x46>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1855      	adds	r5, r2, r1
 8008e10:	42a5      	cmp	r5, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x70>
 8008e14:	6824      	ldr	r4, [r4, #0]
 8008e16:	4421      	add	r1, r4
 8008e18:	1854      	adds	r4, r2, r1
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1e0      	bne.n	8008de2 <_free_r+0x26>
 8008e20:	681c      	ldr	r4, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6053      	str	r3, [r2, #4]
 8008e26:	440c      	add	r4, r1
 8008e28:	6014      	str	r4, [r2, #0]
 8008e2a:	e7da      	b.n	8008de2 <_free_r+0x26>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x78>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	e7d6      	b.n	8008de2 <_free_r+0x26>
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	1961      	adds	r1, r4, r5
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf04      	itt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	bf04      	itt	eq
 8008e44:	1949      	addeq	r1, r1, r5
 8008e46:	6021      	streq	r1, [r4, #0]
 8008e48:	6054      	str	r4, [r2, #4]
 8008e4a:	e7ca      	b.n	8008de2 <_free_r+0x26>
 8008e4c:	b003      	add	sp, #12
 8008e4e:	bd30      	pop	{r4, r5, pc}
 8008e50:	20000788 	.word	0x20000788

08008e54 <_Balloc>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	69c6      	ldr	r6, [r0, #28]
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	b976      	cbnz	r6, 8008e7c <_Balloc+0x28>
 8008e5e:	2010      	movs	r0, #16
 8008e60:	f7fe fa00 	bl	8007264 <malloc>
 8008e64:	4602      	mov	r2, r0
 8008e66:	61e0      	str	r0, [r4, #28]
 8008e68:	b920      	cbnz	r0, 8008e74 <_Balloc+0x20>
 8008e6a:	4b18      	ldr	r3, [pc, #96]	; (8008ecc <_Balloc+0x78>)
 8008e6c:	4818      	ldr	r0, [pc, #96]	; (8008ed0 <_Balloc+0x7c>)
 8008e6e:	216b      	movs	r1, #107	; 0x6b
 8008e70:	f000 fd9a 	bl	80099a8 <__assert_func>
 8008e74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e78:	6006      	str	r6, [r0, #0]
 8008e7a:	60c6      	str	r6, [r0, #12]
 8008e7c:	69e6      	ldr	r6, [r4, #28]
 8008e7e:	68f3      	ldr	r3, [r6, #12]
 8008e80:	b183      	cbz	r3, 8008ea4 <_Balloc+0x50>
 8008e82:	69e3      	ldr	r3, [r4, #28]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e8a:	b9b8      	cbnz	r0, 8008ebc <_Balloc+0x68>
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	fa01 f605 	lsl.w	r6, r1, r5
 8008e92:	1d72      	adds	r2, r6, #5
 8008e94:	0092      	lsls	r2, r2, #2
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 fda4 	bl	80099e4 <_calloc_r>
 8008e9c:	b160      	cbz	r0, 8008eb8 <_Balloc+0x64>
 8008e9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ea2:	e00e      	b.n	8008ec2 <_Balloc+0x6e>
 8008ea4:	2221      	movs	r2, #33	; 0x21
 8008ea6:	2104      	movs	r1, #4
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f000 fd9b 	bl	80099e4 <_calloc_r>
 8008eae:	69e3      	ldr	r3, [r4, #28]
 8008eb0:	60f0      	str	r0, [r6, #12]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e4      	bne.n	8008e82 <_Balloc+0x2e>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	6802      	ldr	r2, [r0, #0]
 8008ebe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ec8:	e7f7      	b.n	8008eba <_Balloc+0x66>
 8008eca:	bf00      	nop
 8008ecc:	0800a68d 	.word	0x0800a68d
 8008ed0:	0800a70d 	.word	0x0800a70d

08008ed4 <_Bfree>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	69c6      	ldr	r6, [r0, #28]
 8008ed8:	4605      	mov	r5, r0
 8008eda:	460c      	mov	r4, r1
 8008edc:	b976      	cbnz	r6, 8008efc <_Bfree+0x28>
 8008ede:	2010      	movs	r0, #16
 8008ee0:	f7fe f9c0 	bl	8007264 <malloc>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	61e8      	str	r0, [r5, #28]
 8008ee8:	b920      	cbnz	r0, 8008ef4 <_Bfree+0x20>
 8008eea:	4b09      	ldr	r3, [pc, #36]	; (8008f10 <_Bfree+0x3c>)
 8008eec:	4809      	ldr	r0, [pc, #36]	; (8008f14 <_Bfree+0x40>)
 8008eee:	218f      	movs	r1, #143	; 0x8f
 8008ef0:	f000 fd5a 	bl	80099a8 <__assert_func>
 8008ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ef8:	6006      	str	r6, [r0, #0]
 8008efa:	60c6      	str	r6, [r0, #12]
 8008efc:	b13c      	cbz	r4, 8008f0e <_Bfree+0x3a>
 8008efe:	69eb      	ldr	r3, [r5, #28]
 8008f00:	6862      	ldr	r2, [r4, #4]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f08:	6021      	str	r1, [r4, #0]
 8008f0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	0800a68d 	.word	0x0800a68d
 8008f14:	0800a70d 	.word	0x0800a70d

08008f18 <__multadd>:
 8008f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	690d      	ldr	r5, [r1, #16]
 8008f1e:	4607      	mov	r7, r0
 8008f20:	460c      	mov	r4, r1
 8008f22:	461e      	mov	r6, r3
 8008f24:	f101 0c14 	add.w	ip, r1, #20
 8008f28:	2000      	movs	r0, #0
 8008f2a:	f8dc 3000 	ldr.w	r3, [ip]
 8008f2e:	b299      	uxth	r1, r3
 8008f30:	fb02 6101 	mla	r1, r2, r1, r6
 8008f34:	0c1e      	lsrs	r6, r3, #16
 8008f36:	0c0b      	lsrs	r3, r1, #16
 8008f38:	fb02 3306 	mla	r3, r2, r6, r3
 8008f3c:	b289      	uxth	r1, r1
 8008f3e:	3001      	adds	r0, #1
 8008f40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f44:	4285      	cmp	r5, r0
 8008f46:	f84c 1b04 	str.w	r1, [ip], #4
 8008f4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f4e:	dcec      	bgt.n	8008f2a <__multadd+0x12>
 8008f50:	b30e      	cbz	r6, 8008f96 <__multadd+0x7e>
 8008f52:	68a3      	ldr	r3, [r4, #8]
 8008f54:	42ab      	cmp	r3, r5
 8008f56:	dc19      	bgt.n	8008f8c <__multadd+0x74>
 8008f58:	6861      	ldr	r1, [r4, #4]
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	3101      	adds	r1, #1
 8008f5e:	f7ff ff79 	bl	8008e54 <_Balloc>
 8008f62:	4680      	mov	r8, r0
 8008f64:	b928      	cbnz	r0, 8008f72 <__multadd+0x5a>
 8008f66:	4602      	mov	r2, r0
 8008f68:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <__multadd+0x84>)
 8008f6a:	480d      	ldr	r0, [pc, #52]	; (8008fa0 <__multadd+0x88>)
 8008f6c:	21ba      	movs	r1, #186	; 0xba
 8008f6e:	f000 fd1b 	bl	80099a8 <__assert_func>
 8008f72:	6922      	ldr	r2, [r4, #16]
 8008f74:	3202      	adds	r2, #2
 8008f76:	f104 010c 	add.w	r1, r4, #12
 8008f7a:	0092      	lsls	r2, r2, #2
 8008f7c:	300c      	adds	r0, #12
 8008f7e:	f000 fd05 	bl	800998c <memcpy>
 8008f82:	4621      	mov	r1, r4
 8008f84:	4638      	mov	r0, r7
 8008f86:	f7ff ffa5 	bl	8008ed4 <_Bfree>
 8008f8a:	4644      	mov	r4, r8
 8008f8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f90:	3501      	adds	r5, #1
 8008f92:	615e      	str	r6, [r3, #20]
 8008f94:	6125      	str	r5, [r4, #16]
 8008f96:	4620      	mov	r0, r4
 8008f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f9c:	0800a6fc 	.word	0x0800a6fc
 8008fa0:	0800a70d 	.word	0x0800a70d

08008fa4 <__hi0bits>:
 8008fa4:	0c03      	lsrs	r3, r0, #16
 8008fa6:	041b      	lsls	r3, r3, #16
 8008fa8:	b9d3      	cbnz	r3, 8008fe0 <__hi0bits+0x3c>
 8008faa:	0400      	lsls	r0, r0, #16
 8008fac:	2310      	movs	r3, #16
 8008fae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008fb2:	bf04      	itt	eq
 8008fb4:	0200      	lsleq	r0, r0, #8
 8008fb6:	3308      	addeq	r3, #8
 8008fb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008fbc:	bf04      	itt	eq
 8008fbe:	0100      	lsleq	r0, r0, #4
 8008fc0:	3304      	addeq	r3, #4
 8008fc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008fc6:	bf04      	itt	eq
 8008fc8:	0080      	lsleq	r0, r0, #2
 8008fca:	3302      	addeq	r3, #2
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	db05      	blt.n	8008fdc <__hi0bits+0x38>
 8008fd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008fd4:	f103 0301 	add.w	r3, r3, #1
 8008fd8:	bf08      	it	eq
 8008fda:	2320      	moveq	r3, #32
 8008fdc:	4618      	mov	r0, r3
 8008fde:	4770      	bx	lr
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e7e4      	b.n	8008fae <__hi0bits+0xa>

08008fe4 <__lo0bits>:
 8008fe4:	6803      	ldr	r3, [r0, #0]
 8008fe6:	f013 0207 	ands.w	r2, r3, #7
 8008fea:	d00c      	beq.n	8009006 <__lo0bits+0x22>
 8008fec:	07d9      	lsls	r1, r3, #31
 8008fee:	d422      	bmi.n	8009036 <__lo0bits+0x52>
 8008ff0:	079a      	lsls	r2, r3, #30
 8008ff2:	bf49      	itett	mi
 8008ff4:	085b      	lsrmi	r3, r3, #1
 8008ff6:	089b      	lsrpl	r3, r3, #2
 8008ff8:	6003      	strmi	r3, [r0, #0]
 8008ffa:	2201      	movmi	r2, #1
 8008ffc:	bf5c      	itt	pl
 8008ffe:	6003      	strpl	r3, [r0, #0]
 8009000:	2202      	movpl	r2, #2
 8009002:	4610      	mov	r0, r2
 8009004:	4770      	bx	lr
 8009006:	b299      	uxth	r1, r3
 8009008:	b909      	cbnz	r1, 800900e <__lo0bits+0x2a>
 800900a:	0c1b      	lsrs	r3, r3, #16
 800900c:	2210      	movs	r2, #16
 800900e:	b2d9      	uxtb	r1, r3
 8009010:	b909      	cbnz	r1, 8009016 <__lo0bits+0x32>
 8009012:	3208      	adds	r2, #8
 8009014:	0a1b      	lsrs	r3, r3, #8
 8009016:	0719      	lsls	r1, r3, #28
 8009018:	bf04      	itt	eq
 800901a:	091b      	lsreq	r3, r3, #4
 800901c:	3204      	addeq	r2, #4
 800901e:	0799      	lsls	r1, r3, #30
 8009020:	bf04      	itt	eq
 8009022:	089b      	lsreq	r3, r3, #2
 8009024:	3202      	addeq	r2, #2
 8009026:	07d9      	lsls	r1, r3, #31
 8009028:	d403      	bmi.n	8009032 <__lo0bits+0x4e>
 800902a:	085b      	lsrs	r3, r3, #1
 800902c:	f102 0201 	add.w	r2, r2, #1
 8009030:	d003      	beq.n	800903a <__lo0bits+0x56>
 8009032:	6003      	str	r3, [r0, #0]
 8009034:	e7e5      	b.n	8009002 <__lo0bits+0x1e>
 8009036:	2200      	movs	r2, #0
 8009038:	e7e3      	b.n	8009002 <__lo0bits+0x1e>
 800903a:	2220      	movs	r2, #32
 800903c:	e7e1      	b.n	8009002 <__lo0bits+0x1e>
	...

08009040 <__i2b>:
 8009040:	b510      	push	{r4, lr}
 8009042:	460c      	mov	r4, r1
 8009044:	2101      	movs	r1, #1
 8009046:	f7ff ff05 	bl	8008e54 <_Balloc>
 800904a:	4602      	mov	r2, r0
 800904c:	b928      	cbnz	r0, 800905a <__i2b+0x1a>
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <__i2b+0x24>)
 8009050:	4805      	ldr	r0, [pc, #20]	; (8009068 <__i2b+0x28>)
 8009052:	f240 1145 	movw	r1, #325	; 0x145
 8009056:	f000 fca7 	bl	80099a8 <__assert_func>
 800905a:	2301      	movs	r3, #1
 800905c:	6144      	str	r4, [r0, #20]
 800905e:	6103      	str	r3, [r0, #16]
 8009060:	bd10      	pop	{r4, pc}
 8009062:	bf00      	nop
 8009064:	0800a6fc 	.word	0x0800a6fc
 8009068:	0800a70d 	.word	0x0800a70d

0800906c <__multiply>:
 800906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009070:	4691      	mov	r9, r2
 8009072:	690a      	ldr	r2, [r1, #16]
 8009074:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009078:	429a      	cmp	r2, r3
 800907a:	bfb8      	it	lt
 800907c:	460b      	movlt	r3, r1
 800907e:	460c      	mov	r4, r1
 8009080:	bfbc      	itt	lt
 8009082:	464c      	movlt	r4, r9
 8009084:	4699      	movlt	r9, r3
 8009086:	6927      	ldr	r7, [r4, #16]
 8009088:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800908c:	68a3      	ldr	r3, [r4, #8]
 800908e:	6861      	ldr	r1, [r4, #4]
 8009090:	eb07 060a 	add.w	r6, r7, sl
 8009094:	42b3      	cmp	r3, r6
 8009096:	b085      	sub	sp, #20
 8009098:	bfb8      	it	lt
 800909a:	3101      	addlt	r1, #1
 800909c:	f7ff feda 	bl	8008e54 <_Balloc>
 80090a0:	b930      	cbnz	r0, 80090b0 <__multiply+0x44>
 80090a2:	4602      	mov	r2, r0
 80090a4:	4b44      	ldr	r3, [pc, #272]	; (80091b8 <__multiply+0x14c>)
 80090a6:	4845      	ldr	r0, [pc, #276]	; (80091bc <__multiply+0x150>)
 80090a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80090ac:	f000 fc7c 	bl	80099a8 <__assert_func>
 80090b0:	f100 0514 	add.w	r5, r0, #20
 80090b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090b8:	462b      	mov	r3, r5
 80090ba:	2200      	movs	r2, #0
 80090bc:	4543      	cmp	r3, r8
 80090be:	d321      	bcc.n	8009104 <__multiply+0x98>
 80090c0:	f104 0314 	add.w	r3, r4, #20
 80090c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090c8:	f109 0314 	add.w	r3, r9, #20
 80090cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090d0:	9202      	str	r2, [sp, #8]
 80090d2:	1b3a      	subs	r2, r7, r4
 80090d4:	3a15      	subs	r2, #21
 80090d6:	f022 0203 	bic.w	r2, r2, #3
 80090da:	3204      	adds	r2, #4
 80090dc:	f104 0115 	add.w	r1, r4, #21
 80090e0:	428f      	cmp	r7, r1
 80090e2:	bf38      	it	cc
 80090e4:	2204      	movcc	r2, #4
 80090e6:	9201      	str	r2, [sp, #4]
 80090e8:	9a02      	ldr	r2, [sp, #8]
 80090ea:	9303      	str	r3, [sp, #12]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d80c      	bhi.n	800910a <__multiply+0x9e>
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	dd03      	ble.n	80090fc <__multiply+0x90>
 80090f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d05b      	beq.n	80091b4 <__multiply+0x148>
 80090fc:	6106      	str	r6, [r0, #16]
 80090fe:	b005      	add	sp, #20
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	f843 2b04 	str.w	r2, [r3], #4
 8009108:	e7d8      	b.n	80090bc <__multiply+0x50>
 800910a:	f8b3 a000 	ldrh.w	sl, [r3]
 800910e:	f1ba 0f00 	cmp.w	sl, #0
 8009112:	d024      	beq.n	800915e <__multiply+0xf2>
 8009114:	f104 0e14 	add.w	lr, r4, #20
 8009118:	46a9      	mov	r9, r5
 800911a:	f04f 0c00 	mov.w	ip, #0
 800911e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009122:	f8d9 1000 	ldr.w	r1, [r9]
 8009126:	fa1f fb82 	uxth.w	fp, r2
 800912a:	b289      	uxth	r1, r1
 800912c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009130:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009134:	f8d9 2000 	ldr.w	r2, [r9]
 8009138:	4461      	add	r1, ip
 800913a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800913e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009142:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009146:	b289      	uxth	r1, r1
 8009148:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800914c:	4577      	cmp	r7, lr
 800914e:	f849 1b04 	str.w	r1, [r9], #4
 8009152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009156:	d8e2      	bhi.n	800911e <__multiply+0xb2>
 8009158:	9a01      	ldr	r2, [sp, #4]
 800915a:	f845 c002 	str.w	ip, [r5, r2]
 800915e:	9a03      	ldr	r2, [sp, #12]
 8009160:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009164:	3304      	adds	r3, #4
 8009166:	f1b9 0f00 	cmp.w	r9, #0
 800916a:	d021      	beq.n	80091b0 <__multiply+0x144>
 800916c:	6829      	ldr	r1, [r5, #0]
 800916e:	f104 0c14 	add.w	ip, r4, #20
 8009172:	46ae      	mov	lr, r5
 8009174:	f04f 0a00 	mov.w	sl, #0
 8009178:	f8bc b000 	ldrh.w	fp, [ip]
 800917c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009180:	fb09 220b 	mla	r2, r9, fp, r2
 8009184:	4452      	add	r2, sl
 8009186:	b289      	uxth	r1, r1
 8009188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800918c:	f84e 1b04 	str.w	r1, [lr], #4
 8009190:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009194:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009198:	f8be 1000 	ldrh.w	r1, [lr]
 800919c:	fb09 110a 	mla	r1, r9, sl, r1
 80091a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80091a4:	4567      	cmp	r7, ip
 80091a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091aa:	d8e5      	bhi.n	8009178 <__multiply+0x10c>
 80091ac:	9a01      	ldr	r2, [sp, #4]
 80091ae:	50a9      	str	r1, [r5, r2]
 80091b0:	3504      	adds	r5, #4
 80091b2:	e799      	b.n	80090e8 <__multiply+0x7c>
 80091b4:	3e01      	subs	r6, #1
 80091b6:	e79b      	b.n	80090f0 <__multiply+0x84>
 80091b8:	0800a6fc 	.word	0x0800a6fc
 80091bc:	0800a70d 	.word	0x0800a70d

080091c0 <__pow5mult>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4615      	mov	r5, r2
 80091c6:	f012 0203 	ands.w	r2, r2, #3
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	d007      	beq.n	80091e0 <__pow5mult+0x20>
 80091d0:	4c25      	ldr	r4, [pc, #148]	; (8009268 <__pow5mult+0xa8>)
 80091d2:	3a01      	subs	r2, #1
 80091d4:	2300      	movs	r3, #0
 80091d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091da:	f7ff fe9d 	bl	8008f18 <__multadd>
 80091de:	4607      	mov	r7, r0
 80091e0:	10ad      	asrs	r5, r5, #2
 80091e2:	d03d      	beq.n	8009260 <__pow5mult+0xa0>
 80091e4:	69f4      	ldr	r4, [r6, #28]
 80091e6:	b97c      	cbnz	r4, 8009208 <__pow5mult+0x48>
 80091e8:	2010      	movs	r0, #16
 80091ea:	f7fe f83b 	bl	8007264 <malloc>
 80091ee:	4602      	mov	r2, r0
 80091f0:	61f0      	str	r0, [r6, #28]
 80091f2:	b928      	cbnz	r0, 8009200 <__pow5mult+0x40>
 80091f4:	4b1d      	ldr	r3, [pc, #116]	; (800926c <__pow5mult+0xac>)
 80091f6:	481e      	ldr	r0, [pc, #120]	; (8009270 <__pow5mult+0xb0>)
 80091f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80091fc:	f000 fbd4 	bl	80099a8 <__assert_func>
 8009200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009204:	6004      	str	r4, [r0, #0]
 8009206:	60c4      	str	r4, [r0, #12]
 8009208:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800920c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009210:	b94c      	cbnz	r4, 8009226 <__pow5mult+0x66>
 8009212:	f240 2171 	movw	r1, #625	; 0x271
 8009216:	4630      	mov	r0, r6
 8009218:	f7ff ff12 	bl	8009040 <__i2b>
 800921c:	2300      	movs	r3, #0
 800921e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009222:	4604      	mov	r4, r0
 8009224:	6003      	str	r3, [r0, #0]
 8009226:	f04f 0900 	mov.w	r9, #0
 800922a:	07eb      	lsls	r3, r5, #31
 800922c:	d50a      	bpl.n	8009244 <__pow5mult+0x84>
 800922e:	4639      	mov	r1, r7
 8009230:	4622      	mov	r2, r4
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff ff1a 	bl	800906c <__multiply>
 8009238:	4639      	mov	r1, r7
 800923a:	4680      	mov	r8, r0
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff fe49 	bl	8008ed4 <_Bfree>
 8009242:	4647      	mov	r7, r8
 8009244:	106d      	asrs	r5, r5, #1
 8009246:	d00b      	beq.n	8009260 <__pow5mult+0xa0>
 8009248:	6820      	ldr	r0, [r4, #0]
 800924a:	b938      	cbnz	r0, 800925c <__pow5mult+0x9c>
 800924c:	4622      	mov	r2, r4
 800924e:	4621      	mov	r1, r4
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff ff0b 	bl	800906c <__multiply>
 8009256:	6020      	str	r0, [r4, #0]
 8009258:	f8c0 9000 	str.w	r9, [r0]
 800925c:	4604      	mov	r4, r0
 800925e:	e7e4      	b.n	800922a <__pow5mult+0x6a>
 8009260:	4638      	mov	r0, r7
 8009262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009266:	bf00      	nop
 8009268:	0800a858 	.word	0x0800a858
 800926c:	0800a68d 	.word	0x0800a68d
 8009270:	0800a70d 	.word	0x0800a70d

08009274 <__lshift>:
 8009274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009278:	460c      	mov	r4, r1
 800927a:	6849      	ldr	r1, [r1, #4]
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009282:	68a3      	ldr	r3, [r4, #8]
 8009284:	4607      	mov	r7, r0
 8009286:	4691      	mov	r9, r2
 8009288:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800928c:	f108 0601 	add.w	r6, r8, #1
 8009290:	42b3      	cmp	r3, r6
 8009292:	db0b      	blt.n	80092ac <__lshift+0x38>
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff fddd 	bl	8008e54 <_Balloc>
 800929a:	4605      	mov	r5, r0
 800929c:	b948      	cbnz	r0, 80092b2 <__lshift+0x3e>
 800929e:	4602      	mov	r2, r0
 80092a0:	4b28      	ldr	r3, [pc, #160]	; (8009344 <__lshift+0xd0>)
 80092a2:	4829      	ldr	r0, [pc, #164]	; (8009348 <__lshift+0xd4>)
 80092a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80092a8:	f000 fb7e 	bl	80099a8 <__assert_func>
 80092ac:	3101      	adds	r1, #1
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	e7ee      	b.n	8009290 <__lshift+0x1c>
 80092b2:	2300      	movs	r3, #0
 80092b4:	f100 0114 	add.w	r1, r0, #20
 80092b8:	f100 0210 	add.w	r2, r0, #16
 80092bc:	4618      	mov	r0, r3
 80092be:	4553      	cmp	r3, sl
 80092c0:	db33      	blt.n	800932a <__lshift+0xb6>
 80092c2:	6920      	ldr	r0, [r4, #16]
 80092c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092c8:	f104 0314 	add.w	r3, r4, #20
 80092cc:	f019 091f 	ands.w	r9, r9, #31
 80092d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092d8:	d02b      	beq.n	8009332 <__lshift+0xbe>
 80092da:	f1c9 0e20 	rsb	lr, r9, #32
 80092de:	468a      	mov	sl, r1
 80092e0:	2200      	movs	r2, #0
 80092e2:	6818      	ldr	r0, [r3, #0]
 80092e4:	fa00 f009 	lsl.w	r0, r0, r9
 80092e8:	4310      	orrs	r0, r2
 80092ea:	f84a 0b04 	str.w	r0, [sl], #4
 80092ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f2:	459c      	cmp	ip, r3
 80092f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80092f8:	d8f3      	bhi.n	80092e2 <__lshift+0x6e>
 80092fa:	ebac 0304 	sub.w	r3, ip, r4
 80092fe:	3b15      	subs	r3, #21
 8009300:	f023 0303 	bic.w	r3, r3, #3
 8009304:	3304      	adds	r3, #4
 8009306:	f104 0015 	add.w	r0, r4, #21
 800930a:	4584      	cmp	ip, r0
 800930c:	bf38      	it	cc
 800930e:	2304      	movcc	r3, #4
 8009310:	50ca      	str	r2, [r1, r3]
 8009312:	b10a      	cbz	r2, 8009318 <__lshift+0xa4>
 8009314:	f108 0602 	add.w	r6, r8, #2
 8009318:	3e01      	subs	r6, #1
 800931a:	4638      	mov	r0, r7
 800931c:	612e      	str	r6, [r5, #16]
 800931e:	4621      	mov	r1, r4
 8009320:	f7ff fdd8 	bl	8008ed4 <_Bfree>
 8009324:	4628      	mov	r0, r5
 8009326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932a:	f842 0f04 	str.w	r0, [r2, #4]!
 800932e:	3301      	adds	r3, #1
 8009330:	e7c5      	b.n	80092be <__lshift+0x4a>
 8009332:	3904      	subs	r1, #4
 8009334:	f853 2b04 	ldr.w	r2, [r3], #4
 8009338:	f841 2f04 	str.w	r2, [r1, #4]!
 800933c:	459c      	cmp	ip, r3
 800933e:	d8f9      	bhi.n	8009334 <__lshift+0xc0>
 8009340:	e7ea      	b.n	8009318 <__lshift+0xa4>
 8009342:	bf00      	nop
 8009344:	0800a6fc 	.word	0x0800a6fc
 8009348:	0800a70d 	.word	0x0800a70d

0800934c <__mcmp>:
 800934c:	b530      	push	{r4, r5, lr}
 800934e:	6902      	ldr	r2, [r0, #16]
 8009350:	690c      	ldr	r4, [r1, #16]
 8009352:	1b12      	subs	r2, r2, r4
 8009354:	d10e      	bne.n	8009374 <__mcmp+0x28>
 8009356:	f100 0314 	add.w	r3, r0, #20
 800935a:	3114      	adds	r1, #20
 800935c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009360:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009364:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009368:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800936c:	42a5      	cmp	r5, r4
 800936e:	d003      	beq.n	8009378 <__mcmp+0x2c>
 8009370:	d305      	bcc.n	800937e <__mcmp+0x32>
 8009372:	2201      	movs	r2, #1
 8009374:	4610      	mov	r0, r2
 8009376:	bd30      	pop	{r4, r5, pc}
 8009378:	4283      	cmp	r3, r0
 800937a:	d3f3      	bcc.n	8009364 <__mcmp+0x18>
 800937c:	e7fa      	b.n	8009374 <__mcmp+0x28>
 800937e:	f04f 32ff 	mov.w	r2, #4294967295
 8009382:	e7f7      	b.n	8009374 <__mcmp+0x28>

08009384 <__mdiff>:
 8009384:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009388:	460c      	mov	r4, r1
 800938a:	4606      	mov	r6, r0
 800938c:	4611      	mov	r1, r2
 800938e:	4620      	mov	r0, r4
 8009390:	4690      	mov	r8, r2
 8009392:	f7ff ffdb 	bl	800934c <__mcmp>
 8009396:	1e05      	subs	r5, r0, #0
 8009398:	d110      	bne.n	80093bc <__mdiff+0x38>
 800939a:	4629      	mov	r1, r5
 800939c:	4630      	mov	r0, r6
 800939e:	f7ff fd59 	bl	8008e54 <_Balloc>
 80093a2:	b930      	cbnz	r0, 80093b2 <__mdiff+0x2e>
 80093a4:	4b3a      	ldr	r3, [pc, #232]	; (8009490 <__mdiff+0x10c>)
 80093a6:	4602      	mov	r2, r0
 80093a8:	f240 2137 	movw	r1, #567	; 0x237
 80093ac:	4839      	ldr	r0, [pc, #228]	; (8009494 <__mdiff+0x110>)
 80093ae:	f000 fafb 	bl	80099a8 <__assert_func>
 80093b2:	2301      	movs	r3, #1
 80093b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80093b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093bc:	bfa4      	itt	ge
 80093be:	4643      	movge	r3, r8
 80093c0:	46a0      	movge	r8, r4
 80093c2:	4630      	mov	r0, r6
 80093c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80093c8:	bfa6      	itte	ge
 80093ca:	461c      	movge	r4, r3
 80093cc:	2500      	movge	r5, #0
 80093ce:	2501      	movlt	r5, #1
 80093d0:	f7ff fd40 	bl	8008e54 <_Balloc>
 80093d4:	b920      	cbnz	r0, 80093e0 <__mdiff+0x5c>
 80093d6:	4b2e      	ldr	r3, [pc, #184]	; (8009490 <__mdiff+0x10c>)
 80093d8:	4602      	mov	r2, r0
 80093da:	f240 2145 	movw	r1, #581	; 0x245
 80093de:	e7e5      	b.n	80093ac <__mdiff+0x28>
 80093e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80093e4:	6926      	ldr	r6, [r4, #16]
 80093e6:	60c5      	str	r5, [r0, #12]
 80093e8:	f104 0914 	add.w	r9, r4, #20
 80093ec:	f108 0514 	add.w	r5, r8, #20
 80093f0:	f100 0e14 	add.w	lr, r0, #20
 80093f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80093f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80093fc:	f108 0210 	add.w	r2, r8, #16
 8009400:	46f2      	mov	sl, lr
 8009402:	2100      	movs	r1, #0
 8009404:	f859 3b04 	ldr.w	r3, [r9], #4
 8009408:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800940c:	fa11 f88b 	uxtah	r8, r1, fp
 8009410:	b299      	uxth	r1, r3
 8009412:	0c1b      	lsrs	r3, r3, #16
 8009414:	eba8 0801 	sub.w	r8, r8, r1
 8009418:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800941c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009420:	fa1f f888 	uxth.w	r8, r8
 8009424:	1419      	asrs	r1, r3, #16
 8009426:	454e      	cmp	r6, r9
 8009428:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800942c:	f84a 3b04 	str.w	r3, [sl], #4
 8009430:	d8e8      	bhi.n	8009404 <__mdiff+0x80>
 8009432:	1b33      	subs	r3, r6, r4
 8009434:	3b15      	subs	r3, #21
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	3304      	adds	r3, #4
 800943c:	3415      	adds	r4, #21
 800943e:	42a6      	cmp	r6, r4
 8009440:	bf38      	it	cc
 8009442:	2304      	movcc	r3, #4
 8009444:	441d      	add	r5, r3
 8009446:	4473      	add	r3, lr
 8009448:	469e      	mov	lr, r3
 800944a:	462e      	mov	r6, r5
 800944c:	4566      	cmp	r6, ip
 800944e:	d30e      	bcc.n	800946e <__mdiff+0xea>
 8009450:	f10c 0203 	add.w	r2, ip, #3
 8009454:	1b52      	subs	r2, r2, r5
 8009456:	f022 0203 	bic.w	r2, r2, #3
 800945a:	3d03      	subs	r5, #3
 800945c:	45ac      	cmp	ip, r5
 800945e:	bf38      	it	cc
 8009460:	2200      	movcc	r2, #0
 8009462:	4413      	add	r3, r2
 8009464:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009468:	b17a      	cbz	r2, 800948a <__mdiff+0x106>
 800946a:	6107      	str	r7, [r0, #16]
 800946c:	e7a4      	b.n	80093b8 <__mdiff+0x34>
 800946e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009472:	fa11 f288 	uxtah	r2, r1, r8
 8009476:	1414      	asrs	r4, r2, #16
 8009478:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800947c:	b292      	uxth	r2, r2
 800947e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009482:	f84e 2b04 	str.w	r2, [lr], #4
 8009486:	1421      	asrs	r1, r4, #16
 8009488:	e7e0      	b.n	800944c <__mdiff+0xc8>
 800948a:	3f01      	subs	r7, #1
 800948c:	e7ea      	b.n	8009464 <__mdiff+0xe0>
 800948e:	bf00      	nop
 8009490:	0800a6fc 	.word	0x0800a6fc
 8009494:	0800a70d 	.word	0x0800a70d

08009498 <__d2b>:
 8009498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800949c:	460f      	mov	r7, r1
 800949e:	2101      	movs	r1, #1
 80094a0:	ec59 8b10 	vmov	r8, r9, d0
 80094a4:	4616      	mov	r6, r2
 80094a6:	f7ff fcd5 	bl	8008e54 <_Balloc>
 80094aa:	4604      	mov	r4, r0
 80094ac:	b930      	cbnz	r0, 80094bc <__d2b+0x24>
 80094ae:	4602      	mov	r2, r0
 80094b0:	4b24      	ldr	r3, [pc, #144]	; (8009544 <__d2b+0xac>)
 80094b2:	4825      	ldr	r0, [pc, #148]	; (8009548 <__d2b+0xb0>)
 80094b4:	f240 310f 	movw	r1, #783	; 0x30f
 80094b8:	f000 fa76 	bl	80099a8 <__assert_func>
 80094bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094c4:	bb2d      	cbnz	r5, 8009512 <__d2b+0x7a>
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	f1b8 0300 	subs.w	r3, r8, #0
 80094cc:	d026      	beq.n	800951c <__d2b+0x84>
 80094ce:	4668      	mov	r0, sp
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	f7ff fd87 	bl	8008fe4 <__lo0bits>
 80094d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094da:	b1e8      	cbz	r0, 8009518 <__d2b+0x80>
 80094dc:	f1c0 0320 	rsb	r3, r0, #32
 80094e0:	fa02 f303 	lsl.w	r3, r2, r3
 80094e4:	430b      	orrs	r3, r1
 80094e6:	40c2      	lsrs	r2, r0
 80094e8:	6163      	str	r3, [r4, #20]
 80094ea:	9201      	str	r2, [sp, #4]
 80094ec:	9b01      	ldr	r3, [sp, #4]
 80094ee:	61a3      	str	r3, [r4, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	bf14      	ite	ne
 80094f4:	2202      	movne	r2, #2
 80094f6:	2201      	moveq	r2, #1
 80094f8:	6122      	str	r2, [r4, #16]
 80094fa:	b1bd      	cbz	r5, 800952c <__d2b+0x94>
 80094fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009500:	4405      	add	r5, r0
 8009502:	603d      	str	r5, [r7, #0]
 8009504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009508:	6030      	str	r0, [r6, #0]
 800950a:	4620      	mov	r0, r4
 800950c:	b003      	add	sp, #12
 800950e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009516:	e7d6      	b.n	80094c6 <__d2b+0x2e>
 8009518:	6161      	str	r1, [r4, #20]
 800951a:	e7e7      	b.n	80094ec <__d2b+0x54>
 800951c:	a801      	add	r0, sp, #4
 800951e:	f7ff fd61 	bl	8008fe4 <__lo0bits>
 8009522:	9b01      	ldr	r3, [sp, #4]
 8009524:	6163      	str	r3, [r4, #20]
 8009526:	3020      	adds	r0, #32
 8009528:	2201      	movs	r2, #1
 800952a:	e7e5      	b.n	80094f8 <__d2b+0x60>
 800952c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009530:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009534:	6038      	str	r0, [r7, #0]
 8009536:	6918      	ldr	r0, [r3, #16]
 8009538:	f7ff fd34 	bl	8008fa4 <__hi0bits>
 800953c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009540:	e7e2      	b.n	8009508 <__d2b+0x70>
 8009542:	bf00      	nop
 8009544:	0800a6fc 	.word	0x0800a6fc
 8009548:	0800a70d 	.word	0x0800a70d

0800954c <__ssputs_r>:
 800954c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009550:	688e      	ldr	r6, [r1, #8]
 8009552:	461f      	mov	r7, r3
 8009554:	42be      	cmp	r6, r7
 8009556:	680b      	ldr	r3, [r1, #0]
 8009558:	4682      	mov	sl, r0
 800955a:	460c      	mov	r4, r1
 800955c:	4690      	mov	r8, r2
 800955e:	d82c      	bhi.n	80095ba <__ssputs_r+0x6e>
 8009560:	898a      	ldrh	r2, [r1, #12]
 8009562:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009566:	d026      	beq.n	80095b6 <__ssputs_r+0x6a>
 8009568:	6965      	ldr	r5, [r4, #20]
 800956a:	6909      	ldr	r1, [r1, #16]
 800956c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009570:	eba3 0901 	sub.w	r9, r3, r1
 8009574:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009578:	1c7b      	adds	r3, r7, #1
 800957a:	444b      	add	r3, r9
 800957c:	106d      	asrs	r5, r5, #1
 800957e:	429d      	cmp	r5, r3
 8009580:	bf38      	it	cc
 8009582:	461d      	movcc	r5, r3
 8009584:	0553      	lsls	r3, r2, #21
 8009586:	d527      	bpl.n	80095d8 <__ssputs_r+0x8c>
 8009588:	4629      	mov	r1, r5
 800958a:	f7fd fe9b 	bl	80072c4 <_malloc_r>
 800958e:	4606      	mov	r6, r0
 8009590:	b360      	cbz	r0, 80095ec <__ssputs_r+0xa0>
 8009592:	6921      	ldr	r1, [r4, #16]
 8009594:	464a      	mov	r2, r9
 8009596:	f000 f9f9 	bl	800998c <memcpy>
 800959a:	89a3      	ldrh	r3, [r4, #12]
 800959c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a4:	81a3      	strh	r3, [r4, #12]
 80095a6:	6126      	str	r6, [r4, #16]
 80095a8:	6165      	str	r5, [r4, #20]
 80095aa:	444e      	add	r6, r9
 80095ac:	eba5 0509 	sub.w	r5, r5, r9
 80095b0:	6026      	str	r6, [r4, #0]
 80095b2:	60a5      	str	r5, [r4, #8]
 80095b4:	463e      	mov	r6, r7
 80095b6:	42be      	cmp	r6, r7
 80095b8:	d900      	bls.n	80095bc <__ssputs_r+0x70>
 80095ba:	463e      	mov	r6, r7
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	4632      	mov	r2, r6
 80095c0:	4641      	mov	r1, r8
 80095c2:	f000 f9c9 	bl	8009958 <memmove>
 80095c6:	68a3      	ldr	r3, [r4, #8]
 80095c8:	1b9b      	subs	r3, r3, r6
 80095ca:	60a3      	str	r3, [r4, #8]
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	4433      	add	r3, r6
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	2000      	movs	r0, #0
 80095d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d8:	462a      	mov	r2, r5
 80095da:	f000 fa2b 	bl	8009a34 <_realloc_r>
 80095de:	4606      	mov	r6, r0
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d1e0      	bne.n	80095a6 <__ssputs_r+0x5a>
 80095e4:	6921      	ldr	r1, [r4, #16]
 80095e6:	4650      	mov	r0, sl
 80095e8:	f7ff fbe8 	bl	8008dbc <_free_r>
 80095ec:	230c      	movs	r3, #12
 80095ee:	f8ca 3000 	str.w	r3, [sl]
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f8:	81a3      	strh	r3, [r4, #12]
 80095fa:	f04f 30ff 	mov.w	r0, #4294967295
 80095fe:	e7e9      	b.n	80095d4 <__ssputs_r+0x88>

08009600 <_svfiprintf_r>:
 8009600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009604:	4698      	mov	r8, r3
 8009606:	898b      	ldrh	r3, [r1, #12]
 8009608:	061b      	lsls	r3, r3, #24
 800960a:	b09d      	sub	sp, #116	; 0x74
 800960c:	4607      	mov	r7, r0
 800960e:	460d      	mov	r5, r1
 8009610:	4614      	mov	r4, r2
 8009612:	d50e      	bpl.n	8009632 <_svfiprintf_r+0x32>
 8009614:	690b      	ldr	r3, [r1, #16]
 8009616:	b963      	cbnz	r3, 8009632 <_svfiprintf_r+0x32>
 8009618:	2140      	movs	r1, #64	; 0x40
 800961a:	f7fd fe53 	bl	80072c4 <_malloc_r>
 800961e:	6028      	str	r0, [r5, #0]
 8009620:	6128      	str	r0, [r5, #16]
 8009622:	b920      	cbnz	r0, 800962e <_svfiprintf_r+0x2e>
 8009624:	230c      	movs	r3, #12
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	f04f 30ff 	mov.w	r0, #4294967295
 800962c:	e0d0      	b.n	80097d0 <_svfiprintf_r+0x1d0>
 800962e:	2340      	movs	r3, #64	; 0x40
 8009630:	616b      	str	r3, [r5, #20]
 8009632:	2300      	movs	r3, #0
 8009634:	9309      	str	r3, [sp, #36]	; 0x24
 8009636:	2320      	movs	r3, #32
 8009638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800963c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009640:	2330      	movs	r3, #48	; 0x30
 8009642:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80097e8 <_svfiprintf_r+0x1e8>
 8009646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800964a:	f04f 0901 	mov.w	r9, #1
 800964e:	4623      	mov	r3, r4
 8009650:	469a      	mov	sl, r3
 8009652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009656:	b10a      	cbz	r2, 800965c <_svfiprintf_r+0x5c>
 8009658:	2a25      	cmp	r2, #37	; 0x25
 800965a:	d1f9      	bne.n	8009650 <_svfiprintf_r+0x50>
 800965c:	ebba 0b04 	subs.w	fp, sl, r4
 8009660:	d00b      	beq.n	800967a <_svfiprintf_r+0x7a>
 8009662:	465b      	mov	r3, fp
 8009664:	4622      	mov	r2, r4
 8009666:	4629      	mov	r1, r5
 8009668:	4638      	mov	r0, r7
 800966a:	f7ff ff6f 	bl	800954c <__ssputs_r>
 800966e:	3001      	adds	r0, #1
 8009670:	f000 80a9 	beq.w	80097c6 <_svfiprintf_r+0x1c6>
 8009674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009676:	445a      	add	r2, fp
 8009678:	9209      	str	r2, [sp, #36]	; 0x24
 800967a:	f89a 3000 	ldrb.w	r3, [sl]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f000 80a1 	beq.w	80097c6 <_svfiprintf_r+0x1c6>
 8009684:	2300      	movs	r3, #0
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800968e:	f10a 0a01 	add.w	sl, sl, #1
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	9307      	str	r3, [sp, #28]
 8009696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800969a:	931a      	str	r3, [sp, #104]	; 0x68
 800969c:	4654      	mov	r4, sl
 800969e:	2205      	movs	r2, #5
 80096a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a4:	4850      	ldr	r0, [pc, #320]	; (80097e8 <_svfiprintf_r+0x1e8>)
 80096a6:	f7f6 fd9b 	bl	80001e0 <memchr>
 80096aa:	9a04      	ldr	r2, [sp, #16]
 80096ac:	b9d8      	cbnz	r0, 80096e6 <_svfiprintf_r+0xe6>
 80096ae:	06d0      	lsls	r0, r2, #27
 80096b0:	bf44      	itt	mi
 80096b2:	2320      	movmi	r3, #32
 80096b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096b8:	0711      	lsls	r1, r2, #28
 80096ba:	bf44      	itt	mi
 80096bc:	232b      	movmi	r3, #43	; 0x2b
 80096be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c2:	f89a 3000 	ldrb.w	r3, [sl]
 80096c6:	2b2a      	cmp	r3, #42	; 0x2a
 80096c8:	d015      	beq.n	80096f6 <_svfiprintf_r+0xf6>
 80096ca:	9a07      	ldr	r2, [sp, #28]
 80096cc:	4654      	mov	r4, sl
 80096ce:	2000      	movs	r0, #0
 80096d0:	f04f 0c0a 	mov.w	ip, #10
 80096d4:	4621      	mov	r1, r4
 80096d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096da:	3b30      	subs	r3, #48	; 0x30
 80096dc:	2b09      	cmp	r3, #9
 80096de:	d94d      	bls.n	800977c <_svfiprintf_r+0x17c>
 80096e0:	b1b0      	cbz	r0, 8009710 <_svfiprintf_r+0x110>
 80096e2:	9207      	str	r2, [sp, #28]
 80096e4:	e014      	b.n	8009710 <_svfiprintf_r+0x110>
 80096e6:	eba0 0308 	sub.w	r3, r0, r8
 80096ea:	fa09 f303 	lsl.w	r3, r9, r3
 80096ee:	4313      	orrs	r3, r2
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	46a2      	mov	sl, r4
 80096f4:	e7d2      	b.n	800969c <_svfiprintf_r+0x9c>
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	1d19      	adds	r1, r3, #4
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	9103      	str	r1, [sp, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	bfbb      	ittet	lt
 8009702:	425b      	neglt	r3, r3
 8009704:	f042 0202 	orrlt.w	r2, r2, #2
 8009708:	9307      	strge	r3, [sp, #28]
 800970a:	9307      	strlt	r3, [sp, #28]
 800970c:	bfb8      	it	lt
 800970e:	9204      	strlt	r2, [sp, #16]
 8009710:	7823      	ldrb	r3, [r4, #0]
 8009712:	2b2e      	cmp	r3, #46	; 0x2e
 8009714:	d10c      	bne.n	8009730 <_svfiprintf_r+0x130>
 8009716:	7863      	ldrb	r3, [r4, #1]
 8009718:	2b2a      	cmp	r3, #42	; 0x2a
 800971a:	d134      	bne.n	8009786 <_svfiprintf_r+0x186>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	1d1a      	adds	r2, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	9203      	str	r2, [sp, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfb8      	it	lt
 8009728:	f04f 33ff 	movlt.w	r3, #4294967295
 800972c:	3402      	adds	r4, #2
 800972e:	9305      	str	r3, [sp, #20]
 8009730:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80097f8 <_svfiprintf_r+0x1f8>
 8009734:	7821      	ldrb	r1, [r4, #0]
 8009736:	2203      	movs	r2, #3
 8009738:	4650      	mov	r0, sl
 800973a:	f7f6 fd51 	bl	80001e0 <memchr>
 800973e:	b138      	cbz	r0, 8009750 <_svfiprintf_r+0x150>
 8009740:	9b04      	ldr	r3, [sp, #16]
 8009742:	eba0 000a 	sub.w	r0, r0, sl
 8009746:	2240      	movs	r2, #64	; 0x40
 8009748:	4082      	lsls	r2, r0
 800974a:	4313      	orrs	r3, r2
 800974c:	3401      	adds	r4, #1
 800974e:	9304      	str	r3, [sp, #16]
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	4825      	ldr	r0, [pc, #148]	; (80097ec <_svfiprintf_r+0x1ec>)
 8009756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800975a:	2206      	movs	r2, #6
 800975c:	f7f6 fd40 	bl	80001e0 <memchr>
 8009760:	2800      	cmp	r0, #0
 8009762:	d038      	beq.n	80097d6 <_svfiprintf_r+0x1d6>
 8009764:	4b22      	ldr	r3, [pc, #136]	; (80097f0 <_svfiprintf_r+0x1f0>)
 8009766:	bb1b      	cbnz	r3, 80097b0 <_svfiprintf_r+0x1b0>
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	3307      	adds	r3, #7
 800976c:	f023 0307 	bic.w	r3, r3, #7
 8009770:	3308      	adds	r3, #8
 8009772:	9303      	str	r3, [sp, #12]
 8009774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009776:	4433      	add	r3, r6
 8009778:	9309      	str	r3, [sp, #36]	; 0x24
 800977a:	e768      	b.n	800964e <_svfiprintf_r+0x4e>
 800977c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009780:	460c      	mov	r4, r1
 8009782:	2001      	movs	r0, #1
 8009784:	e7a6      	b.n	80096d4 <_svfiprintf_r+0xd4>
 8009786:	2300      	movs	r3, #0
 8009788:	3401      	adds	r4, #1
 800978a:	9305      	str	r3, [sp, #20]
 800978c:	4619      	mov	r1, r3
 800978e:	f04f 0c0a 	mov.w	ip, #10
 8009792:	4620      	mov	r0, r4
 8009794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009798:	3a30      	subs	r2, #48	; 0x30
 800979a:	2a09      	cmp	r2, #9
 800979c:	d903      	bls.n	80097a6 <_svfiprintf_r+0x1a6>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0c6      	beq.n	8009730 <_svfiprintf_r+0x130>
 80097a2:	9105      	str	r1, [sp, #20]
 80097a4:	e7c4      	b.n	8009730 <_svfiprintf_r+0x130>
 80097a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097aa:	4604      	mov	r4, r0
 80097ac:	2301      	movs	r3, #1
 80097ae:	e7f0      	b.n	8009792 <_svfiprintf_r+0x192>
 80097b0:	ab03      	add	r3, sp, #12
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	462a      	mov	r2, r5
 80097b6:	4b0f      	ldr	r3, [pc, #60]	; (80097f4 <_svfiprintf_r+0x1f4>)
 80097b8:	a904      	add	r1, sp, #16
 80097ba:	4638      	mov	r0, r7
 80097bc:	f7fd feae 	bl	800751c <_printf_float>
 80097c0:	1c42      	adds	r2, r0, #1
 80097c2:	4606      	mov	r6, r0
 80097c4:	d1d6      	bne.n	8009774 <_svfiprintf_r+0x174>
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	065b      	lsls	r3, r3, #25
 80097ca:	f53f af2d 	bmi.w	8009628 <_svfiprintf_r+0x28>
 80097ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097d0:	b01d      	add	sp, #116	; 0x74
 80097d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d6:	ab03      	add	r3, sp, #12
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	462a      	mov	r2, r5
 80097dc:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <_svfiprintf_r+0x1f4>)
 80097de:	a904      	add	r1, sp, #16
 80097e0:	4638      	mov	r0, r7
 80097e2:	f7fe f93f 	bl	8007a64 <_printf_i>
 80097e6:	e7eb      	b.n	80097c0 <_svfiprintf_r+0x1c0>
 80097e8:	0800a864 	.word	0x0800a864
 80097ec:	0800a86e 	.word	0x0800a86e
 80097f0:	0800751d 	.word	0x0800751d
 80097f4:	0800954d 	.word	0x0800954d
 80097f8:	0800a86a 	.word	0x0800a86a

080097fc <__sflush_r>:
 80097fc:	898a      	ldrh	r2, [r1, #12]
 80097fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009802:	4605      	mov	r5, r0
 8009804:	0710      	lsls	r0, r2, #28
 8009806:	460c      	mov	r4, r1
 8009808:	d458      	bmi.n	80098bc <__sflush_r+0xc0>
 800980a:	684b      	ldr	r3, [r1, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	dc05      	bgt.n	800981c <__sflush_r+0x20>
 8009810:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009812:	2b00      	cmp	r3, #0
 8009814:	dc02      	bgt.n	800981c <__sflush_r+0x20>
 8009816:	2000      	movs	r0, #0
 8009818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800981c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800981e:	2e00      	cmp	r6, #0
 8009820:	d0f9      	beq.n	8009816 <__sflush_r+0x1a>
 8009822:	2300      	movs	r3, #0
 8009824:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009828:	682f      	ldr	r7, [r5, #0]
 800982a:	6a21      	ldr	r1, [r4, #32]
 800982c:	602b      	str	r3, [r5, #0]
 800982e:	d032      	beq.n	8009896 <__sflush_r+0x9a>
 8009830:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	075a      	lsls	r2, r3, #29
 8009836:	d505      	bpl.n	8009844 <__sflush_r+0x48>
 8009838:	6863      	ldr	r3, [r4, #4]
 800983a:	1ac0      	subs	r0, r0, r3
 800983c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800983e:	b10b      	cbz	r3, 8009844 <__sflush_r+0x48>
 8009840:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009842:	1ac0      	subs	r0, r0, r3
 8009844:	2300      	movs	r3, #0
 8009846:	4602      	mov	r2, r0
 8009848:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800984a:	6a21      	ldr	r1, [r4, #32]
 800984c:	4628      	mov	r0, r5
 800984e:	47b0      	blx	r6
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	d106      	bne.n	8009864 <__sflush_r+0x68>
 8009856:	6829      	ldr	r1, [r5, #0]
 8009858:	291d      	cmp	r1, #29
 800985a:	d82b      	bhi.n	80098b4 <__sflush_r+0xb8>
 800985c:	4a29      	ldr	r2, [pc, #164]	; (8009904 <__sflush_r+0x108>)
 800985e:	410a      	asrs	r2, r1
 8009860:	07d6      	lsls	r6, r2, #31
 8009862:	d427      	bmi.n	80098b4 <__sflush_r+0xb8>
 8009864:	2200      	movs	r2, #0
 8009866:	6062      	str	r2, [r4, #4]
 8009868:	04d9      	lsls	r1, r3, #19
 800986a:	6922      	ldr	r2, [r4, #16]
 800986c:	6022      	str	r2, [r4, #0]
 800986e:	d504      	bpl.n	800987a <__sflush_r+0x7e>
 8009870:	1c42      	adds	r2, r0, #1
 8009872:	d101      	bne.n	8009878 <__sflush_r+0x7c>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	b903      	cbnz	r3, 800987a <__sflush_r+0x7e>
 8009878:	6560      	str	r0, [r4, #84]	; 0x54
 800987a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800987c:	602f      	str	r7, [r5, #0]
 800987e:	2900      	cmp	r1, #0
 8009880:	d0c9      	beq.n	8009816 <__sflush_r+0x1a>
 8009882:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009886:	4299      	cmp	r1, r3
 8009888:	d002      	beq.n	8009890 <__sflush_r+0x94>
 800988a:	4628      	mov	r0, r5
 800988c:	f7ff fa96 	bl	8008dbc <_free_r>
 8009890:	2000      	movs	r0, #0
 8009892:	6360      	str	r0, [r4, #52]	; 0x34
 8009894:	e7c0      	b.n	8009818 <__sflush_r+0x1c>
 8009896:	2301      	movs	r3, #1
 8009898:	4628      	mov	r0, r5
 800989a:	47b0      	blx	r6
 800989c:	1c41      	adds	r1, r0, #1
 800989e:	d1c8      	bne.n	8009832 <__sflush_r+0x36>
 80098a0:	682b      	ldr	r3, [r5, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d0c5      	beq.n	8009832 <__sflush_r+0x36>
 80098a6:	2b1d      	cmp	r3, #29
 80098a8:	d001      	beq.n	80098ae <__sflush_r+0xb2>
 80098aa:	2b16      	cmp	r3, #22
 80098ac:	d101      	bne.n	80098b2 <__sflush_r+0xb6>
 80098ae:	602f      	str	r7, [r5, #0]
 80098b0:	e7b1      	b.n	8009816 <__sflush_r+0x1a>
 80098b2:	89a3      	ldrh	r3, [r4, #12]
 80098b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	e7ad      	b.n	8009818 <__sflush_r+0x1c>
 80098bc:	690f      	ldr	r7, [r1, #16]
 80098be:	2f00      	cmp	r7, #0
 80098c0:	d0a9      	beq.n	8009816 <__sflush_r+0x1a>
 80098c2:	0793      	lsls	r3, r2, #30
 80098c4:	680e      	ldr	r6, [r1, #0]
 80098c6:	bf08      	it	eq
 80098c8:	694b      	ldreq	r3, [r1, #20]
 80098ca:	600f      	str	r7, [r1, #0]
 80098cc:	bf18      	it	ne
 80098ce:	2300      	movne	r3, #0
 80098d0:	eba6 0807 	sub.w	r8, r6, r7
 80098d4:	608b      	str	r3, [r1, #8]
 80098d6:	f1b8 0f00 	cmp.w	r8, #0
 80098da:	dd9c      	ble.n	8009816 <__sflush_r+0x1a>
 80098dc:	6a21      	ldr	r1, [r4, #32]
 80098de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098e0:	4643      	mov	r3, r8
 80098e2:	463a      	mov	r2, r7
 80098e4:	4628      	mov	r0, r5
 80098e6:	47b0      	blx	r6
 80098e8:	2800      	cmp	r0, #0
 80098ea:	dc06      	bgt.n	80098fa <__sflush_r+0xfe>
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e78e      	b.n	8009818 <__sflush_r+0x1c>
 80098fa:	4407      	add	r7, r0
 80098fc:	eba8 0800 	sub.w	r8, r8, r0
 8009900:	e7e9      	b.n	80098d6 <__sflush_r+0xda>
 8009902:	bf00      	nop
 8009904:	dfbffffe 	.word	0xdfbffffe

08009908 <_fflush_r>:
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	690b      	ldr	r3, [r1, #16]
 800990c:	4605      	mov	r5, r0
 800990e:	460c      	mov	r4, r1
 8009910:	b913      	cbnz	r3, 8009918 <_fflush_r+0x10>
 8009912:	2500      	movs	r5, #0
 8009914:	4628      	mov	r0, r5
 8009916:	bd38      	pop	{r3, r4, r5, pc}
 8009918:	b118      	cbz	r0, 8009922 <_fflush_r+0x1a>
 800991a:	6a03      	ldr	r3, [r0, #32]
 800991c:	b90b      	cbnz	r3, 8009922 <_fflush_r+0x1a>
 800991e:	f7fe fa4f 	bl	8007dc0 <__sinit>
 8009922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0f3      	beq.n	8009912 <_fflush_r+0xa>
 800992a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800992c:	07d0      	lsls	r0, r2, #31
 800992e:	d404      	bmi.n	800993a <_fflush_r+0x32>
 8009930:	0599      	lsls	r1, r3, #22
 8009932:	d402      	bmi.n	800993a <_fflush_r+0x32>
 8009934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009936:	f7fe fbc2 	bl	80080be <__retarget_lock_acquire_recursive>
 800993a:	4628      	mov	r0, r5
 800993c:	4621      	mov	r1, r4
 800993e:	f7ff ff5d 	bl	80097fc <__sflush_r>
 8009942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009944:	07da      	lsls	r2, r3, #31
 8009946:	4605      	mov	r5, r0
 8009948:	d4e4      	bmi.n	8009914 <_fflush_r+0xc>
 800994a:	89a3      	ldrh	r3, [r4, #12]
 800994c:	059b      	lsls	r3, r3, #22
 800994e:	d4e1      	bmi.n	8009914 <_fflush_r+0xc>
 8009950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009952:	f7fe fbb5 	bl	80080c0 <__retarget_lock_release_recursive>
 8009956:	e7dd      	b.n	8009914 <_fflush_r+0xc>

08009958 <memmove>:
 8009958:	4288      	cmp	r0, r1
 800995a:	b510      	push	{r4, lr}
 800995c:	eb01 0402 	add.w	r4, r1, r2
 8009960:	d902      	bls.n	8009968 <memmove+0x10>
 8009962:	4284      	cmp	r4, r0
 8009964:	4623      	mov	r3, r4
 8009966:	d807      	bhi.n	8009978 <memmove+0x20>
 8009968:	1e43      	subs	r3, r0, #1
 800996a:	42a1      	cmp	r1, r4
 800996c:	d008      	beq.n	8009980 <memmove+0x28>
 800996e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009976:	e7f8      	b.n	800996a <memmove+0x12>
 8009978:	4402      	add	r2, r0
 800997a:	4601      	mov	r1, r0
 800997c:	428a      	cmp	r2, r1
 800997e:	d100      	bne.n	8009982 <memmove+0x2a>
 8009980:	bd10      	pop	{r4, pc}
 8009982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800998a:	e7f7      	b.n	800997c <memmove+0x24>

0800998c <memcpy>:
 800998c:	440a      	add	r2, r1
 800998e:	4291      	cmp	r1, r2
 8009990:	f100 33ff 	add.w	r3, r0, #4294967295
 8009994:	d100      	bne.n	8009998 <memcpy+0xc>
 8009996:	4770      	bx	lr
 8009998:	b510      	push	{r4, lr}
 800999a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800999e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099a2:	4291      	cmp	r1, r2
 80099a4:	d1f9      	bne.n	800999a <memcpy+0xe>
 80099a6:	bd10      	pop	{r4, pc}

080099a8 <__assert_func>:
 80099a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80099aa:	4614      	mov	r4, r2
 80099ac:	461a      	mov	r2, r3
 80099ae:	4b09      	ldr	r3, [pc, #36]	; (80099d4 <__assert_func+0x2c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4605      	mov	r5, r0
 80099b4:	68d8      	ldr	r0, [r3, #12]
 80099b6:	b14c      	cbz	r4, 80099cc <__assert_func+0x24>
 80099b8:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <__assert_func+0x30>)
 80099ba:	9100      	str	r1, [sp, #0]
 80099bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80099c0:	4906      	ldr	r1, [pc, #24]	; (80099dc <__assert_func+0x34>)
 80099c2:	462b      	mov	r3, r5
 80099c4:	f000 f872 	bl	8009aac <fiprintf>
 80099c8:	f7fd fc44 	bl	8007254 <abort>
 80099cc:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <__assert_func+0x38>)
 80099ce:	461c      	mov	r4, r3
 80099d0:	e7f3      	b.n	80099ba <__assert_func+0x12>
 80099d2:	bf00      	nop
 80099d4:	20000068 	.word	0x20000068
 80099d8:	0800a87f 	.word	0x0800a87f
 80099dc:	0800a88c 	.word	0x0800a88c
 80099e0:	0800a8ba 	.word	0x0800a8ba

080099e4 <_calloc_r>:
 80099e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099e6:	fba1 2402 	umull	r2, r4, r1, r2
 80099ea:	b94c      	cbnz	r4, 8009a00 <_calloc_r+0x1c>
 80099ec:	4611      	mov	r1, r2
 80099ee:	9201      	str	r2, [sp, #4]
 80099f0:	f7fd fc68 	bl	80072c4 <_malloc_r>
 80099f4:	9a01      	ldr	r2, [sp, #4]
 80099f6:	4605      	mov	r5, r0
 80099f8:	b930      	cbnz	r0, 8009a08 <_calloc_r+0x24>
 80099fa:	4628      	mov	r0, r5
 80099fc:	b003      	add	sp, #12
 80099fe:	bd30      	pop	{r4, r5, pc}
 8009a00:	220c      	movs	r2, #12
 8009a02:	6002      	str	r2, [r0, #0]
 8009a04:	2500      	movs	r5, #0
 8009a06:	e7f8      	b.n	80099fa <_calloc_r+0x16>
 8009a08:	4621      	mov	r1, r4
 8009a0a:	f7fe fa86 	bl	8007f1a <memset>
 8009a0e:	e7f4      	b.n	80099fa <_calloc_r+0x16>

08009a10 <__ascii_mbtowc>:
 8009a10:	b082      	sub	sp, #8
 8009a12:	b901      	cbnz	r1, 8009a16 <__ascii_mbtowc+0x6>
 8009a14:	a901      	add	r1, sp, #4
 8009a16:	b142      	cbz	r2, 8009a2a <__ascii_mbtowc+0x1a>
 8009a18:	b14b      	cbz	r3, 8009a2e <__ascii_mbtowc+0x1e>
 8009a1a:	7813      	ldrb	r3, [r2, #0]
 8009a1c:	600b      	str	r3, [r1, #0]
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	1e10      	subs	r0, r2, #0
 8009a22:	bf18      	it	ne
 8009a24:	2001      	movne	r0, #1
 8009a26:	b002      	add	sp, #8
 8009a28:	4770      	bx	lr
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	e7fb      	b.n	8009a26 <__ascii_mbtowc+0x16>
 8009a2e:	f06f 0001 	mvn.w	r0, #1
 8009a32:	e7f8      	b.n	8009a26 <__ascii_mbtowc+0x16>

08009a34 <_realloc_r>:
 8009a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a38:	4680      	mov	r8, r0
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	460e      	mov	r6, r1
 8009a3e:	b921      	cbnz	r1, 8009a4a <_realloc_r+0x16>
 8009a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a44:	4611      	mov	r1, r2
 8009a46:	f7fd bc3d 	b.w	80072c4 <_malloc_r>
 8009a4a:	b92a      	cbnz	r2, 8009a58 <_realloc_r+0x24>
 8009a4c:	f7ff f9b6 	bl	8008dbc <_free_r>
 8009a50:	4625      	mov	r5, r4
 8009a52:	4628      	mov	r0, r5
 8009a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a58:	f000 f83a 	bl	8009ad0 <_malloc_usable_size_r>
 8009a5c:	4284      	cmp	r4, r0
 8009a5e:	4607      	mov	r7, r0
 8009a60:	d802      	bhi.n	8009a68 <_realloc_r+0x34>
 8009a62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009a66:	d812      	bhi.n	8009a8e <_realloc_r+0x5a>
 8009a68:	4621      	mov	r1, r4
 8009a6a:	4640      	mov	r0, r8
 8009a6c:	f7fd fc2a 	bl	80072c4 <_malloc_r>
 8009a70:	4605      	mov	r5, r0
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d0ed      	beq.n	8009a52 <_realloc_r+0x1e>
 8009a76:	42bc      	cmp	r4, r7
 8009a78:	4622      	mov	r2, r4
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	bf28      	it	cs
 8009a7e:	463a      	movcs	r2, r7
 8009a80:	f7ff ff84 	bl	800998c <memcpy>
 8009a84:	4631      	mov	r1, r6
 8009a86:	4640      	mov	r0, r8
 8009a88:	f7ff f998 	bl	8008dbc <_free_r>
 8009a8c:	e7e1      	b.n	8009a52 <_realloc_r+0x1e>
 8009a8e:	4635      	mov	r5, r6
 8009a90:	e7df      	b.n	8009a52 <_realloc_r+0x1e>

08009a92 <__ascii_wctomb>:
 8009a92:	b149      	cbz	r1, 8009aa8 <__ascii_wctomb+0x16>
 8009a94:	2aff      	cmp	r2, #255	; 0xff
 8009a96:	bf85      	ittet	hi
 8009a98:	238a      	movhi	r3, #138	; 0x8a
 8009a9a:	6003      	strhi	r3, [r0, #0]
 8009a9c:	700a      	strbls	r2, [r1, #0]
 8009a9e:	f04f 30ff 	movhi.w	r0, #4294967295
 8009aa2:	bf98      	it	ls
 8009aa4:	2001      	movls	r0, #1
 8009aa6:	4770      	bx	lr
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	4770      	bx	lr

08009aac <fiprintf>:
 8009aac:	b40e      	push	{r1, r2, r3}
 8009aae:	b503      	push	{r0, r1, lr}
 8009ab0:	4601      	mov	r1, r0
 8009ab2:	ab03      	add	r3, sp, #12
 8009ab4:	4805      	ldr	r0, [pc, #20]	; (8009acc <fiprintf+0x20>)
 8009ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aba:	6800      	ldr	r0, [r0, #0]
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	f000 f839 	bl	8009b34 <_vfiprintf_r>
 8009ac2:	b002      	add	sp, #8
 8009ac4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ac8:	b003      	add	sp, #12
 8009aca:	4770      	bx	lr
 8009acc:	20000068 	.word	0x20000068

08009ad0 <_malloc_usable_size_r>:
 8009ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ad4:	1f18      	subs	r0, r3, #4
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	bfbc      	itt	lt
 8009ada:	580b      	ldrlt	r3, [r1, r0]
 8009adc:	18c0      	addlt	r0, r0, r3
 8009ade:	4770      	bx	lr

08009ae0 <__sfputc_r>:
 8009ae0:	6893      	ldr	r3, [r2, #8]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	b410      	push	{r4}
 8009ae8:	6093      	str	r3, [r2, #8]
 8009aea:	da08      	bge.n	8009afe <__sfputc_r+0x1e>
 8009aec:	6994      	ldr	r4, [r2, #24]
 8009aee:	42a3      	cmp	r3, r4
 8009af0:	db01      	blt.n	8009af6 <__sfputc_r+0x16>
 8009af2:	290a      	cmp	r1, #10
 8009af4:	d103      	bne.n	8009afe <__sfputc_r+0x1e>
 8009af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009afa:	f000 b935 	b.w	8009d68 <__swbuf_r>
 8009afe:	6813      	ldr	r3, [r2, #0]
 8009b00:	1c58      	adds	r0, r3, #1
 8009b02:	6010      	str	r0, [r2, #0]
 8009b04:	7019      	strb	r1, [r3, #0]
 8009b06:	4608      	mov	r0, r1
 8009b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <__sfputs_r>:
 8009b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b10:	4606      	mov	r6, r0
 8009b12:	460f      	mov	r7, r1
 8009b14:	4614      	mov	r4, r2
 8009b16:	18d5      	adds	r5, r2, r3
 8009b18:	42ac      	cmp	r4, r5
 8009b1a:	d101      	bne.n	8009b20 <__sfputs_r+0x12>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	e007      	b.n	8009b30 <__sfputs_r+0x22>
 8009b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b24:	463a      	mov	r2, r7
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff ffda 	bl	8009ae0 <__sfputc_r>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d1f3      	bne.n	8009b18 <__sfputs_r+0xa>
 8009b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b34 <_vfiprintf_r>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	460d      	mov	r5, r1
 8009b3a:	b09d      	sub	sp, #116	; 0x74
 8009b3c:	4614      	mov	r4, r2
 8009b3e:	4698      	mov	r8, r3
 8009b40:	4606      	mov	r6, r0
 8009b42:	b118      	cbz	r0, 8009b4c <_vfiprintf_r+0x18>
 8009b44:	6a03      	ldr	r3, [r0, #32]
 8009b46:	b90b      	cbnz	r3, 8009b4c <_vfiprintf_r+0x18>
 8009b48:	f7fe f93a 	bl	8007dc0 <__sinit>
 8009b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b4e:	07d9      	lsls	r1, r3, #31
 8009b50:	d405      	bmi.n	8009b5e <_vfiprintf_r+0x2a>
 8009b52:	89ab      	ldrh	r3, [r5, #12]
 8009b54:	059a      	lsls	r2, r3, #22
 8009b56:	d402      	bmi.n	8009b5e <_vfiprintf_r+0x2a>
 8009b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b5a:	f7fe fab0 	bl	80080be <__retarget_lock_acquire_recursive>
 8009b5e:	89ab      	ldrh	r3, [r5, #12]
 8009b60:	071b      	lsls	r3, r3, #28
 8009b62:	d501      	bpl.n	8009b68 <_vfiprintf_r+0x34>
 8009b64:	692b      	ldr	r3, [r5, #16]
 8009b66:	b99b      	cbnz	r3, 8009b90 <_vfiprintf_r+0x5c>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f000 f93a 	bl	8009de4 <__swsetup_r>
 8009b70:	b170      	cbz	r0, 8009b90 <_vfiprintf_r+0x5c>
 8009b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b74:	07dc      	lsls	r4, r3, #31
 8009b76:	d504      	bpl.n	8009b82 <_vfiprintf_r+0x4e>
 8009b78:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7c:	b01d      	add	sp, #116	; 0x74
 8009b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	0598      	lsls	r0, r3, #22
 8009b86:	d4f7      	bmi.n	8009b78 <_vfiprintf_r+0x44>
 8009b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b8a:	f7fe fa99 	bl	80080c0 <__retarget_lock_release_recursive>
 8009b8e:	e7f3      	b.n	8009b78 <_vfiprintf_r+0x44>
 8009b90:	2300      	movs	r3, #0
 8009b92:	9309      	str	r3, [sp, #36]	; 0x24
 8009b94:	2320      	movs	r3, #32
 8009b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b9e:	2330      	movs	r3, #48	; 0x30
 8009ba0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009d54 <_vfiprintf_r+0x220>
 8009ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ba8:	f04f 0901 	mov.w	r9, #1
 8009bac:	4623      	mov	r3, r4
 8009bae:	469a      	mov	sl, r3
 8009bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb4:	b10a      	cbz	r2, 8009bba <_vfiprintf_r+0x86>
 8009bb6:	2a25      	cmp	r2, #37	; 0x25
 8009bb8:	d1f9      	bne.n	8009bae <_vfiprintf_r+0x7a>
 8009bba:	ebba 0b04 	subs.w	fp, sl, r4
 8009bbe:	d00b      	beq.n	8009bd8 <_vfiprintf_r+0xa4>
 8009bc0:	465b      	mov	r3, fp
 8009bc2:	4622      	mov	r2, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f7ff ffa1 	bl	8009b0e <__sfputs_r>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f000 80a9 	beq.w	8009d24 <_vfiprintf_r+0x1f0>
 8009bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd4:	445a      	add	r2, fp
 8009bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8009bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	f000 80a1 	beq.w	8009d24 <_vfiprintf_r+0x1f0>
 8009be2:	2300      	movs	r3, #0
 8009be4:	f04f 32ff 	mov.w	r2, #4294967295
 8009be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bec:	f10a 0a01 	add.w	sl, sl, #1
 8009bf0:	9304      	str	r3, [sp, #16]
 8009bf2:	9307      	str	r3, [sp, #28]
 8009bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8009bfa:	4654      	mov	r4, sl
 8009bfc:	2205      	movs	r2, #5
 8009bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c02:	4854      	ldr	r0, [pc, #336]	; (8009d54 <_vfiprintf_r+0x220>)
 8009c04:	f7f6 faec 	bl	80001e0 <memchr>
 8009c08:	9a04      	ldr	r2, [sp, #16]
 8009c0a:	b9d8      	cbnz	r0, 8009c44 <_vfiprintf_r+0x110>
 8009c0c:	06d1      	lsls	r1, r2, #27
 8009c0e:	bf44      	itt	mi
 8009c10:	2320      	movmi	r3, #32
 8009c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c16:	0713      	lsls	r3, r2, #28
 8009c18:	bf44      	itt	mi
 8009c1a:	232b      	movmi	r3, #43	; 0x2b
 8009c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c20:	f89a 3000 	ldrb.w	r3, [sl]
 8009c24:	2b2a      	cmp	r3, #42	; 0x2a
 8009c26:	d015      	beq.n	8009c54 <_vfiprintf_r+0x120>
 8009c28:	9a07      	ldr	r2, [sp, #28]
 8009c2a:	4654      	mov	r4, sl
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f04f 0c0a 	mov.w	ip, #10
 8009c32:	4621      	mov	r1, r4
 8009c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c38:	3b30      	subs	r3, #48	; 0x30
 8009c3a:	2b09      	cmp	r3, #9
 8009c3c:	d94d      	bls.n	8009cda <_vfiprintf_r+0x1a6>
 8009c3e:	b1b0      	cbz	r0, 8009c6e <_vfiprintf_r+0x13a>
 8009c40:	9207      	str	r2, [sp, #28]
 8009c42:	e014      	b.n	8009c6e <_vfiprintf_r+0x13a>
 8009c44:	eba0 0308 	sub.w	r3, r0, r8
 8009c48:	fa09 f303 	lsl.w	r3, r9, r3
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	9304      	str	r3, [sp, #16]
 8009c50:	46a2      	mov	sl, r4
 8009c52:	e7d2      	b.n	8009bfa <_vfiprintf_r+0xc6>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	1d19      	adds	r1, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	9103      	str	r1, [sp, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	bfbb      	ittet	lt
 8009c60:	425b      	neglt	r3, r3
 8009c62:	f042 0202 	orrlt.w	r2, r2, #2
 8009c66:	9307      	strge	r3, [sp, #28]
 8009c68:	9307      	strlt	r3, [sp, #28]
 8009c6a:	bfb8      	it	lt
 8009c6c:	9204      	strlt	r2, [sp, #16]
 8009c6e:	7823      	ldrb	r3, [r4, #0]
 8009c70:	2b2e      	cmp	r3, #46	; 0x2e
 8009c72:	d10c      	bne.n	8009c8e <_vfiprintf_r+0x15a>
 8009c74:	7863      	ldrb	r3, [r4, #1]
 8009c76:	2b2a      	cmp	r3, #42	; 0x2a
 8009c78:	d134      	bne.n	8009ce4 <_vfiprintf_r+0x1b0>
 8009c7a:	9b03      	ldr	r3, [sp, #12]
 8009c7c:	1d1a      	adds	r2, r3, #4
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	9203      	str	r2, [sp, #12]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	bfb8      	it	lt
 8009c86:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c8a:	3402      	adds	r4, #2
 8009c8c:	9305      	str	r3, [sp, #20]
 8009c8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009d64 <_vfiprintf_r+0x230>
 8009c92:	7821      	ldrb	r1, [r4, #0]
 8009c94:	2203      	movs	r2, #3
 8009c96:	4650      	mov	r0, sl
 8009c98:	f7f6 faa2 	bl	80001e0 <memchr>
 8009c9c:	b138      	cbz	r0, 8009cae <_vfiprintf_r+0x17a>
 8009c9e:	9b04      	ldr	r3, [sp, #16]
 8009ca0:	eba0 000a 	sub.w	r0, r0, sl
 8009ca4:	2240      	movs	r2, #64	; 0x40
 8009ca6:	4082      	lsls	r2, r0
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	3401      	adds	r4, #1
 8009cac:	9304      	str	r3, [sp, #16]
 8009cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb2:	4829      	ldr	r0, [pc, #164]	; (8009d58 <_vfiprintf_r+0x224>)
 8009cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cb8:	2206      	movs	r2, #6
 8009cba:	f7f6 fa91 	bl	80001e0 <memchr>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d03f      	beq.n	8009d42 <_vfiprintf_r+0x20e>
 8009cc2:	4b26      	ldr	r3, [pc, #152]	; (8009d5c <_vfiprintf_r+0x228>)
 8009cc4:	bb1b      	cbnz	r3, 8009d0e <_vfiprintf_r+0x1da>
 8009cc6:	9b03      	ldr	r3, [sp, #12]
 8009cc8:	3307      	adds	r3, #7
 8009cca:	f023 0307 	bic.w	r3, r3, #7
 8009cce:	3308      	adds	r3, #8
 8009cd0:	9303      	str	r3, [sp, #12]
 8009cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd4:	443b      	add	r3, r7
 8009cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd8:	e768      	b.n	8009bac <_vfiprintf_r+0x78>
 8009cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cde:	460c      	mov	r4, r1
 8009ce0:	2001      	movs	r0, #1
 8009ce2:	e7a6      	b.n	8009c32 <_vfiprintf_r+0xfe>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	3401      	adds	r4, #1
 8009ce8:	9305      	str	r3, [sp, #20]
 8009cea:	4619      	mov	r1, r3
 8009cec:	f04f 0c0a 	mov.w	ip, #10
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cf6:	3a30      	subs	r2, #48	; 0x30
 8009cf8:	2a09      	cmp	r2, #9
 8009cfa:	d903      	bls.n	8009d04 <_vfiprintf_r+0x1d0>
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d0c6      	beq.n	8009c8e <_vfiprintf_r+0x15a>
 8009d00:	9105      	str	r1, [sp, #20]
 8009d02:	e7c4      	b.n	8009c8e <_vfiprintf_r+0x15a>
 8009d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d08:	4604      	mov	r4, r0
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e7f0      	b.n	8009cf0 <_vfiprintf_r+0x1bc>
 8009d0e:	ab03      	add	r3, sp, #12
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	462a      	mov	r2, r5
 8009d14:	4b12      	ldr	r3, [pc, #72]	; (8009d60 <_vfiprintf_r+0x22c>)
 8009d16:	a904      	add	r1, sp, #16
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7fd fbff 	bl	800751c <_printf_float>
 8009d1e:	4607      	mov	r7, r0
 8009d20:	1c78      	adds	r0, r7, #1
 8009d22:	d1d6      	bne.n	8009cd2 <_vfiprintf_r+0x19e>
 8009d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d26:	07d9      	lsls	r1, r3, #31
 8009d28:	d405      	bmi.n	8009d36 <_vfiprintf_r+0x202>
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	059a      	lsls	r2, r3, #22
 8009d2e:	d402      	bmi.n	8009d36 <_vfiprintf_r+0x202>
 8009d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d32:	f7fe f9c5 	bl	80080c0 <__retarget_lock_release_recursive>
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	065b      	lsls	r3, r3, #25
 8009d3a:	f53f af1d 	bmi.w	8009b78 <_vfiprintf_r+0x44>
 8009d3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d40:	e71c      	b.n	8009b7c <_vfiprintf_r+0x48>
 8009d42:	ab03      	add	r3, sp, #12
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	462a      	mov	r2, r5
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <_vfiprintf_r+0x22c>)
 8009d4a:	a904      	add	r1, sp, #16
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f7fd fe89 	bl	8007a64 <_printf_i>
 8009d52:	e7e4      	b.n	8009d1e <_vfiprintf_r+0x1ea>
 8009d54:	0800a864 	.word	0x0800a864
 8009d58:	0800a86e 	.word	0x0800a86e
 8009d5c:	0800751d 	.word	0x0800751d
 8009d60:	08009b0f 	.word	0x08009b0f
 8009d64:	0800a86a 	.word	0x0800a86a

08009d68 <__swbuf_r>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	460e      	mov	r6, r1
 8009d6c:	4614      	mov	r4, r2
 8009d6e:	4605      	mov	r5, r0
 8009d70:	b118      	cbz	r0, 8009d7a <__swbuf_r+0x12>
 8009d72:	6a03      	ldr	r3, [r0, #32]
 8009d74:	b90b      	cbnz	r3, 8009d7a <__swbuf_r+0x12>
 8009d76:	f7fe f823 	bl	8007dc0 <__sinit>
 8009d7a:	69a3      	ldr	r3, [r4, #24]
 8009d7c:	60a3      	str	r3, [r4, #8]
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	071a      	lsls	r2, r3, #28
 8009d82:	d525      	bpl.n	8009dd0 <__swbuf_r+0x68>
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	b31b      	cbz	r3, 8009dd0 <__swbuf_r+0x68>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	6922      	ldr	r2, [r4, #16]
 8009d8c:	1a98      	subs	r0, r3, r2
 8009d8e:	6963      	ldr	r3, [r4, #20]
 8009d90:	b2f6      	uxtb	r6, r6
 8009d92:	4283      	cmp	r3, r0
 8009d94:	4637      	mov	r7, r6
 8009d96:	dc04      	bgt.n	8009da2 <__swbuf_r+0x3a>
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f7ff fdb4 	bl	8009908 <_fflush_r>
 8009da0:	b9e0      	cbnz	r0, 8009ddc <__swbuf_r+0x74>
 8009da2:	68a3      	ldr	r3, [r4, #8]
 8009da4:	3b01      	subs	r3, #1
 8009da6:	60a3      	str	r3, [r4, #8]
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	6022      	str	r2, [r4, #0]
 8009dae:	701e      	strb	r6, [r3, #0]
 8009db0:	6962      	ldr	r2, [r4, #20]
 8009db2:	1c43      	adds	r3, r0, #1
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d004      	beq.n	8009dc2 <__swbuf_r+0x5a>
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	07db      	lsls	r3, r3, #31
 8009dbc:	d506      	bpl.n	8009dcc <__swbuf_r+0x64>
 8009dbe:	2e0a      	cmp	r6, #10
 8009dc0:	d104      	bne.n	8009dcc <__swbuf_r+0x64>
 8009dc2:	4621      	mov	r1, r4
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	f7ff fd9f 	bl	8009908 <_fflush_r>
 8009dca:	b938      	cbnz	r0, 8009ddc <__swbuf_r+0x74>
 8009dcc:	4638      	mov	r0, r7
 8009dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 f806 	bl	8009de4 <__swsetup_r>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d0d5      	beq.n	8009d88 <__swbuf_r+0x20>
 8009ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8009de0:	e7f4      	b.n	8009dcc <__swbuf_r+0x64>
	...

08009de4 <__swsetup_r>:
 8009de4:	b538      	push	{r3, r4, r5, lr}
 8009de6:	4b2a      	ldr	r3, [pc, #168]	; (8009e90 <__swsetup_r+0xac>)
 8009de8:	4605      	mov	r5, r0
 8009dea:	6818      	ldr	r0, [r3, #0]
 8009dec:	460c      	mov	r4, r1
 8009dee:	b118      	cbz	r0, 8009df8 <__swsetup_r+0x14>
 8009df0:	6a03      	ldr	r3, [r0, #32]
 8009df2:	b90b      	cbnz	r3, 8009df8 <__swsetup_r+0x14>
 8009df4:	f7fd ffe4 	bl	8007dc0 <__sinit>
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dfe:	0718      	lsls	r0, r3, #28
 8009e00:	d422      	bmi.n	8009e48 <__swsetup_r+0x64>
 8009e02:	06d9      	lsls	r1, r3, #27
 8009e04:	d407      	bmi.n	8009e16 <__swsetup_r+0x32>
 8009e06:	2309      	movs	r3, #9
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e0e:	81a3      	strh	r3, [r4, #12]
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295
 8009e14:	e034      	b.n	8009e80 <__swsetup_r+0x9c>
 8009e16:	0758      	lsls	r0, r3, #29
 8009e18:	d512      	bpl.n	8009e40 <__swsetup_r+0x5c>
 8009e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e1c:	b141      	cbz	r1, 8009e30 <__swsetup_r+0x4c>
 8009e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e22:	4299      	cmp	r1, r3
 8009e24:	d002      	beq.n	8009e2c <__swsetup_r+0x48>
 8009e26:	4628      	mov	r0, r5
 8009e28:	f7fe ffc8 	bl	8008dbc <_free_r>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	6363      	str	r3, [r4, #52]	; 0x34
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e36:	81a3      	strh	r3, [r4, #12]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	6063      	str	r3, [r4, #4]
 8009e3c:	6923      	ldr	r3, [r4, #16]
 8009e3e:	6023      	str	r3, [r4, #0]
 8009e40:	89a3      	ldrh	r3, [r4, #12]
 8009e42:	f043 0308 	orr.w	r3, r3, #8
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	b94b      	cbnz	r3, 8009e60 <__swsetup_r+0x7c>
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e56:	d003      	beq.n	8009e60 <__swsetup_r+0x7c>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 f840 	bl	8009ee0 <__smakebuf_r>
 8009e60:	89a0      	ldrh	r0, [r4, #12]
 8009e62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e66:	f010 0301 	ands.w	r3, r0, #1
 8009e6a:	d00a      	beq.n	8009e82 <__swsetup_r+0x9e>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	60a3      	str	r3, [r4, #8]
 8009e70:	6963      	ldr	r3, [r4, #20]
 8009e72:	425b      	negs	r3, r3
 8009e74:	61a3      	str	r3, [r4, #24]
 8009e76:	6923      	ldr	r3, [r4, #16]
 8009e78:	b943      	cbnz	r3, 8009e8c <__swsetup_r+0xa8>
 8009e7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e7e:	d1c4      	bne.n	8009e0a <__swsetup_r+0x26>
 8009e80:	bd38      	pop	{r3, r4, r5, pc}
 8009e82:	0781      	lsls	r1, r0, #30
 8009e84:	bf58      	it	pl
 8009e86:	6963      	ldrpl	r3, [r4, #20]
 8009e88:	60a3      	str	r3, [r4, #8]
 8009e8a:	e7f4      	b.n	8009e76 <__swsetup_r+0x92>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e7f7      	b.n	8009e80 <__swsetup_r+0x9c>
 8009e90:	20000068 	.word	0x20000068

08009e94 <__swhatbuf_r>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	460c      	mov	r4, r1
 8009e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e9c:	2900      	cmp	r1, #0
 8009e9e:	b096      	sub	sp, #88	; 0x58
 8009ea0:	4615      	mov	r5, r2
 8009ea2:	461e      	mov	r6, r3
 8009ea4:	da0d      	bge.n	8009ec2 <__swhatbuf_r+0x2e>
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009eac:	f04f 0100 	mov.w	r1, #0
 8009eb0:	bf0c      	ite	eq
 8009eb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009eb6:	2340      	movne	r3, #64	; 0x40
 8009eb8:	2000      	movs	r0, #0
 8009eba:	6031      	str	r1, [r6, #0]
 8009ebc:	602b      	str	r3, [r5, #0]
 8009ebe:	b016      	add	sp, #88	; 0x58
 8009ec0:	bd70      	pop	{r4, r5, r6, pc}
 8009ec2:	466a      	mov	r2, sp
 8009ec4:	f000 f848 	bl	8009f58 <_fstat_r>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	dbec      	blt.n	8009ea6 <__swhatbuf_r+0x12>
 8009ecc:	9901      	ldr	r1, [sp, #4]
 8009ece:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ed2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009ed6:	4259      	negs	r1, r3
 8009ed8:	4159      	adcs	r1, r3
 8009eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ede:	e7eb      	b.n	8009eb8 <__swhatbuf_r+0x24>

08009ee0 <__smakebuf_r>:
 8009ee0:	898b      	ldrh	r3, [r1, #12]
 8009ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009ee4:	079d      	lsls	r5, r3, #30
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460c      	mov	r4, r1
 8009eea:	d507      	bpl.n	8009efc <__smakebuf_r+0x1c>
 8009eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	6123      	str	r3, [r4, #16]
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	6163      	str	r3, [r4, #20]
 8009ef8:	b002      	add	sp, #8
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	ab01      	add	r3, sp, #4
 8009efe:	466a      	mov	r2, sp
 8009f00:	f7ff ffc8 	bl	8009e94 <__swhatbuf_r>
 8009f04:	9900      	ldr	r1, [sp, #0]
 8009f06:	4605      	mov	r5, r0
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7fd f9db 	bl	80072c4 <_malloc_r>
 8009f0e:	b948      	cbnz	r0, 8009f24 <__smakebuf_r+0x44>
 8009f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f14:	059a      	lsls	r2, r3, #22
 8009f16:	d4ef      	bmi.n	8009ef8 <__smakebuf_r+0x18>
 8009f18:	f023 0303 	bic.w	r3, r3, #3
 8009f1c:	f043 0302 	orr.w	r3, r3, #2
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	e7e3      	b.n	8009eec <__smakebuf_r+0xc>
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	6020      	str	r0, [r4, #0]
 8009f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f2c:	81a3      	strh	r3, [r4, #12]
 8009f2e:	9b00      	ldr	r3, [sp, #0]
 8009f30:	6163      	str	r3, [r4, #20]
 8009f32:	9b01      	ldr	r3, [sp, #4]
 8009f34:	6120      	str	r0, [r4, #16]
 8009f36:	b15b      	cbz	r3, 8009f50 <__smakebuf_r+0x70>
 8009f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	f000 f81d 	bl	8009f7c <_isatty_r>
 8009f42:	b128      	cbz	r0, 8009f50 <__smakebuf_r+0x70>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	f023 0303 	bic.w	r3, r3, #3
 8009f4a:	f043 0301 	orr.w	r3, r3, #1
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	431d      	orrs	r5, r3
 8009f54:	81a5      	strh	r5, [r4, #12]
 8009f56:	e7cf      	b.n	8009ef8 <__smakebuf_r+0x18>

08009f58 <_fstat_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d07      	ldr	r5, [pc, #28]	; (8009f78 <_fstat_r+0x20>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	4611      	mov	r1, r2
 8009f64:	602b      	str	r3, [r5, #0]
 8009f66:	f7f8 fb3a 	bl	80025de <_fstat>
 8009f6a:	1c43      	adds	r3, r0, #1
 8009f6c:	d102      	bne.n	8009f74 <_fstat_r+0x1c>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	b103      	cbz	r3, 8009f74 <_fstat_r+0x1c>
 8009f72:	6023      	str	r3, [r4, #0]
 8009f74:	bd38      	pop	{r3, r4, r5, pc}
 8009f76:	bf00      	nop
 8009f78:	200008cc 	.word	0x200008cc

08009f7c <_isatty_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_isatty_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f8 fb39 	bl	80025fe <_isatty>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_isatty_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_isatty_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	200008cc 	.word	0x200008cc

08009f9c <_init>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	bf00      	nop
 8009fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa2:	bc08      	pop	{r3}
 8009fa4:	469e      	mov	lr, r3
 8009fa6:	4770      	bx	lr

08009fa8 <_fini>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	bf00      	nop
 8009fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fae:	bc08      	pop	{r3}
 8009fb0:	469e      	mov	lr, r3
 8009fb2:	4770      	bx	lr
