
MPPT_Solar_Charge_Controller_TestBoard_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007568  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cb0  08007cb0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08007cb0  08007cb0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cb0  08007cb0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cb4  08007cb4  00017cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000006f0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000750  20000750  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ec2f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003dd1  00000000  00000000  0003ed02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001008  00000000  00000000  00042ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c43  00000000  00000000  00043ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026d7a  00000000  00000000  00044723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018da4  00000000  00000000  0006b49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6b21  00000000  00000000  00084241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a48  00000000  00000000  0015ad64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  0015f7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076f0 	.word	0x080076f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080076f0 	.word	0x080076f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <_ZN4blib6Logger5printEPKc+0x2c>)
 8000a36:	681c      	ldr	r4, [r3, #0]
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff fbd1 	bl	80001e0 <strlen>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f005 fb79 	bl	8006140 <HAL_UART_Transmit>
            }
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd90      	pop	{r4, r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000000c 	.word	0x2000000c

08000a5c <_ZN4blib6AnalogC1Ev>:

#include "Analog.h"

namespace blib
{
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f000 fa04 	bl	8000e74 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>
 8000a6c:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <_ZN4blib6AnalogC1Ev+0x44>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <_ZN4blib6AnalogC1Ev+0x48>)
 8000a86:	619a      	str	r2, [r3, #24]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <_ZN4blib6AnalogC1Ev+0x4c>)
 8000a8c:	61da      	str	r2, [r3, #28]
    {
        sampling();
 8000a8e:	6878      	ldr	r0, [r7, #4]
 8000a90:	f000 f834 	bl	8000afc <_ZN4blib6Analog8samplingEv>
    }
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	08007bec 	.word	0x08007bec
 8000aa4:	2000007c 	.word	0x2000007c
 8000aa8:	200000cc 	.word	0x200000cc

08000aac <_ZN4blib6AnalogD1Ev>:

    Analog::~Analog()
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <_ZN4blib6AnalogD1Ev+0x2c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	601a      	str	r2, [r3, #0]
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 ff20 	bl	8002904 <HAL_ADC_Stop_DMA>
    Analog::~Analog()
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f9e4 	bl	8000e94 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
    }
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08007bec 	.word	0x08007bec

08000adc <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    }
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ffe1 	bl	8000aac <_ZN4blib6AnalogD1Ev>
 8000aea:	2148      	movs	r1, #72	; 0x48
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f006 f8cd 	bl	8006c8c <_ZdlPvj>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6998      	ldr	r0, [r3, #24]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3304      	adds	r3, #4
 8000b0c:	2205      	movs	r2, #5
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f001 fddc 	bl	80026cc <HAL_ADC_Start_DMA>
    }
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <_ZN4blib6Analog10readAnalogEv>:
    {
        return mTemp;
    }

    void Analog::readAnalog()
    {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
        mVin = convertAdcChannel1(mAdcValues[0]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f890 	bl	8000c50 <_ZN4blib6Analog18convertAdcChannel1Em>
 8000b30:	eeb0 7a40 	vmov.f32	s14, s0
 8000b34:	eef0 7a60 	vmov.f32	s15, s1
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	ed83 7b08 	vstr	d7, [r3, #32]
        mIin = convertAdcChannel2(mAdcValues[1]);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	4619      	mov	r1, r3
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 f8bb 	bl	8000cc0 <_ZN4blib6Analog18convertAdcChannel2Em>
 8000b4a:	eeb0 7a40 	vmov.f32	s14, s0
 8000b4e:	eef0 7a60 	vmov.f32	s15, s1
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
        mVout = convertAdcChannel3(mAdcValues[2]);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f8e2 	bl	8000d28 <_ZN4blib6Analog18convertAdcChannel3Em>
 8000b64:	eeb0 7a40 	vmov.f32	s14, s0
 8000b68:	eef0 7a60 	vmov.f32	s15, s1
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
        mIout = convertAdcChannel4(mAdcValues[3]);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	4619      	mov	r1, r3
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 f90d 	bl	8000d98 <_ZN4blib6Analog18convertAdcChannel4Em>
 8000b7e:	eeb0 7a40 	vmov.f32	s14, s0
 8000b82:	eef0 7a60 	vmov.f32	s15, s1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
        mTemp = convertAdcChannel5(mAdcValues[4]);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	4619      	mov	r1, r3
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f000 f938 	bl	8000e08 <_ZN4blib6Analog18convertAdcChannel5Em>
 8000b98:	eeb0 7a40 	vmov.f32	s14, s0
 8000b9c:	eef0 7a60 	vmov.f32	s15, s1
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

        LOGI("mVin : [%.2f] V", mVin);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	ed93 7b08 	vldr	d7, [r3, #32]
 8000bac:	eeb0 0a47 	vmov.f32	s0, s14
 8000bb0:	eef0 0a67 	vmov.f32	s1, s15
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <_ZN4blib6Analog10readAnalogEv+0x114>)
 8000bb6:	2239      	movs	r2, #57	; 0x39
 8000bb8:	491e      	ldr	r1, [pc, #120]	; (8000c34 <_ZN4blib6Analog10readAnalogEv+0x118>)
 8000bba:	481f      	ldr	r0, [pc, #124]	; (8000c38 <_ZN4blib6Analog10readAnalogEv+0x11c>)
 8000bbc:	f000 f98a 	bl	8000ed4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
        LOGI("mIin : [%.2f] A", mIin);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8000bc6:	eeb0 0a47 	vmov.f32	s0, s14
 8000bca:	eef0 0a67 	vmov.f32	s1, s15
 8000bce:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <_ZN4blib6Analog10readAnalogEv+0x114>)
 8000bd0:	223a      	movs	r2, #58	; 0x3a
 8000bd2:	4918      	ldr	r1, [pc, #96]	; (8000c34 <_ZN4blib6Analog10readAnalogEv+0x118>)
 8000bd4:	4819      	ldr	r0, [pc, #100]	; (8000c3c <_ZN4blib6Analog10readAnalogEv+0x120>)
 8000bd6:	f000 f97d 	bl	8000ed4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
        LOGI("mVout : [%.2f] V", mVout);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000be0:	eeb0 0a47 	vmov.f32	s0, s14
 8000be4:	eef0 0a67 	vmov.f32	s1, s15
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_ZN4blib6Analog10readAnalogEv+0x114>)
 8000bea:	223b      	movs	r2, #59	; 0x3b
 8000bec:	4911      	ldr	r1, [pc, #68]	; (8000c34 <_ZN4blib6Analog10readAnalogEv+0x118>)
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <_ZN4blib6Analog10readAnalogEv+0x124>)
 8000bf0:	f000 f970 	bl	8000ed4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
        LOGI("mIout : [%.2f] A", mIout);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8000bfa:	eeb0 0a47 	vmov.f32	s0, s14
 8000bfe:	eef0 0a67 	vmov.f32	s1, s15
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <_ZN4blib6Analog10readAnalogEv+0x114>)
 8000c04:	223c      	movs	r2, #60	; 0x3c
 8000c06:	490b      	ldr	r1, [pc, #44]	; (8000c34 <_ZN4blib6Analog10readAnalogEv+0x118>)
 8000c08:	480e      	ldr	r0, [pc, #56]	; (8000c44 <_ZN4blib6Analog10readAnalogEv+0x128>)
 8000c0a:	f000 f963 	bl	8000ed4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
        LOGI("mTemp : [%.2f] C", mTemp);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8000c14:	eeb0 0a47 	vmov.f32	s0, s14
 8000c18:	eef0 0a67 	vmov.f32	s1, s15
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <_ZN4blib6Analog10readAnalogEv+0x114>)
 8000c1e:	223d      	movs	r2, #61	; 0x3d
 8000c20:	4904      	ldr	r1, [pc, #16]	; (8000c34 <_ZN4blib6Analog10readAnalogEv+0x118>)
 8000c22:	4809      	ldr	r0, [pc, #36]	; (8000c48 <_ZN4blib6Analog10readAnalogEv+0x12c>)
 8000c24:	f000 f956 	bl	8000ed4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>
    }
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08007708 	.word	0x08007708
 8000c34:	08007714 	.word	0x08007714
 8000c38:	08007720 	.word	0x08007720
 8000c3c:	08007740 	.word	0x08007740
 8000c40:	08007760 	.word	0x08007760
 8000c44:	08007780 	.word	0x08007780
 8000c48:	080077a0 	.word	0x080077a0
 8000c4c:	00000000 	.word	0x00000000

08000c50 <_ZN4blib6Analog18convertAdcChannel1Em>:

    double Analog::convertAdcChannel1(uint32_t adcValue)    // Convert adcValue -> Vin
    {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
        return CHANNEL_1_RATIO * ((double) adcValue / 4095) * 3.3;
 8000c5a:	6838      	ldr	r0, [r7, #0]
 8000c5c:	f7ff fc5a 	bl	8000514 <__aeabi_ui2d>
 8000c60:	a314      	add	r3, pc, #80	; (adr r3, 8000cb4 <_ZN4blib6Analog18convertAdcChannel1Em+0x64>)
 8000c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c66:	f7ff fdf9 	bl	800085c <__aeabi_ddiv>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	4610      	mov	r0, r2
 8000c70:	4619      	mov	r1, r3
 8000c72:	f04f 0200 	mov.w	r2, #0
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <_ZN4blib6Analog18convertAdcChannel1Em+0x60>)
 8000c78:	f7ff fcc6 	bl	8000608 <__aeabi_dmul>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	a308      	add	r3, pc, #32	; (adr r3, 8000ca8 <_ZN4blib6Analog18convertAdcChannel1Em+0x58>)
 8000c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8a:	f7ff fcbd 	bl	8000608 <__aeabi_dmul>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	460b      	mov	r3, r1
 8000c92:	ec43 2b17 	vmov	d7, r2, r3
    }
 8000c96:	eeb0 0a47 	vmov.f32	s0, s14
 8000c9a:	eef0 0a67 	vmov.f32	s1, s15
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	f3af 8000 	nop.w
 8000ca8:	66666666 	.word	0x66666666
 8000cac:	400a6666 	.word	0x400a6666
 8000cb0:	40240000 	.word	0x40240000
 8000cb4:	00000000 	.word	0x00000000
 8000cb8:	40affe00 	.word	0x40affe00
 8000cbc:	00000000 	.word	0x00000000

08000cc0 <_ZN4blib6Analog18convertAdcChannel2Em>:

    double Analog::convertAdcChannel2(uint32_t adcValue)    // Convert adcValue -> Iin
    {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
        return CHANNEL_2_RATIO * ((double) adcValue / 4095) * 3.3;
 8000cca:	6838      	ldr	r0, [r7, #0]
 8000ccc:	f7ff fc22 	bl	8000514 <__aeabi_ui2d>
 8000cd0:	a311      	add	r3, pc, #68	; (adr r3, 8000d18 <_ZN4blib6Analog18convertAdcChannel2Em+0x58>)
 8000cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd6:	f7ff fdc1 	bl	800085c <__aeabi_ddiv>
 8000cda:	4602      	mov	r2, r0
 8000cdc:	460b      	mov	r3, r1
 8000cde:	4610      	mov	r0, r2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	f7ff fad9 	bl	800029c <__adddf3>
 8000cea:	4602      	mov	r2, r0
 8000cec:	460b      	mov	r3, r1
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	a30b      	add	r3, pc, #44	; (adr r3, 8000d20 <_ZN4blib6Analog18convertAdcChannel2Em+0x60>)
 8000cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf8:	f7ff fc86 	bl	8000608 <__aeabi_dmul>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	ec43 2b17 	vmov	d7, r2, r3
    }
 8000d04:	eeb0 0a47 	vmov.f32	s0, s14
 8000d08:	eef0 0a67 	vmov.f32	s1, s15
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	00000000 	.word	0x00000000
 8000d1c:	40affe00 	.word	0x40affe00
 8000d20:	66666666 	.word	0x66666666
 8000d24:	400a6666 	.word	0x400a6666

08000d28 <_ZN4blib6Analog18convertAdcChannel3Em>:
    double Analog::convertAdcChannel3(uint32_t adcValue)    // Convert adcValue -> Vout
    {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
        return CHANNEL_3_RATIO * ((double) adcValue / 4095) * 3.3;
 8000d32:	6838      	ldr	r0, [r7, #0]
 8000d34:	f7ff fbee 	bl	8000514 <__aeabi_ui2d>
 8000d38:	a314      	add	r3, pc, #80	; (adr r3, 8000d8c <_ZN4blib6Analog18convertAdcChannel3Em+0x64>)
 8000d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3e:	f7ff fd8d 	bl	800085c <__aeabi_ddiv>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	4610      	mov	r0, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 0200 	mov.w	r2, #0
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <_ZN4blib6Analog18convertAdcChannel3Em+0x60>)
 8000d50:	f7ff fc5a 	bl	8000608 <__aeabi_dmul>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	a308      	add	r3, pc, #32	; (adr r3, 8000d80 <_ZN4blib6Analog18convertAdcChannel3Em+0x58>)
 8000d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d62:	f7ff fc51 	bl	8000608 <__aeabi_dmul>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	ec43 2b17 	vmov	d7, r2, r3
    }
 8000d6e:	eeb0 0a47 	vmov.f32	s0, s14
 8000d72:	eef0 0a67 	vmov.f32	s1, s15
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	f3af 8000 	nop.w
 8000d80:	66666666 	.word	0x66666666
 8000d84:	400a6666 	.word	0x400a6666
 8000d88:	40140000 	.word	0x40140000
 8000d8c:	00000000 	.word	0x00000000
 8000d90:	40affe00 	.word	0x40affe00
 8000d94:	00000000 	.word	0x00000000

08000d98 <_ZN4blib6Analog18convertAdcChannel4Em>:
    double Analog::convertAdcChannel4(uint32_t adcValue)    // Convert adcValue -> Iout
    {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
        return CHANNEL_4_RATIO * ((double) adcValue / 4095) * 3.3;
 8000da2:	6838      	ldr	r0, [r7, #0]
 8000da4:	f7ff fbb6 	bl	8000514 <__aeabi_ui2d>
 8000da8:	a314      	add	r3, pc, #80	; (adr r3, 8000dfc <_ZN4blib6Analog18convertAdcChannel4Em+0x64>)
 8000daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dae:	f7ff fd55 	bl	800085c <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <_ZN4blib6Analog18convertAdcChannel4Em+0x60>)
 8000dc0:	f7ff fc22 	bl	8000608 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	a308      	add	r3, pc, #32	; (adr r3, 8000df0 <_ZN4blib6Analog18convertAdcChannel4Em+0x58>)
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	f7ff fc19 	bl	8000608 <__aeabi_dmul>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	ec43 2b17 	vmov	d7, r2, r3
    }
 8000dde:	eeb0 0a47 	vmov.f32	s0, s14
 8000de2:	eef0 0a67 	vmov.f32	s1, s15
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	f3af 8000 	nop.w
 8000df0:	66666666 	.word	0x66666666
 8000df4:	400a6666 	.word	0x400a6666
 8000df8:	40240000 	.word	0x40240000
 8000dfc:	00000000 	.word	0x00000000
 8000e00:	40affe00 	.word	0x40affe00
 8000e04:	00000000 	.word	0x00000000

08000e08 <_ZN4blib6Analog18convertAdcChannel5Em>:
    double Analog::convertAdcChannel5(uint32_t adcValue)    // Convert adcValue -> Temperature
    {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
        return CHANNEL_5_RATIO * ((double) adcValue / 4095) * 3.3;
 8000e12:	6838      	ldr	r0, [r7, #0]
 8000e14:	f7ff fb7e 	bl	8000514 <__aeabi_ui2d>
 8000e18:	a314      	add	r3, pc, #80	; (adr r3, 8000e6c <_ZN4blib6Analog18convertAdcChannel5Em+0x64>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	f7ff fd1d 	bl	800085c <__aeabi_ddiv>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <_ZN4blib6Analog18convertAdcChannel5Em+0x60>)
 8000e30:	f7ff fbea 	bl	8000608 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	a308      	add	r3, pc, #32	; (adr r3, 8000e60 <_ZN4blib6Analog18convertAdcChannel5Em+0x58>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f7ff fbe1 	bl	8000608 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	ec43 2b17 	vmov	d7, r2, r3
    }
 8000e4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e52:	eef0 0a67 	vmov.f32	s1, s15
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	f3af 8000 	nop.w
 8000e60:	66666666 	.word	0x66666666
 8000e64:	400a6666 	.word	0x400a6666
 8000e68:	40240000 	.word	0x40240000
 8000e6c:	00000000 	.word	0x00000000
 8000e70:	40affe00 	.word	0x40affe00

08000e74 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
                {
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev+0x1c>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	601a      	str	r2, [r3, #0]
                }
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4618      	mov	r0, r3
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	08007bfc 	.word	0x08007bfc

08000e94 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>:
                virtual ~Singleton()
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
                {
                }
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev+0x1c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	08007bfc 	.word	0x08007bfc

08000eb4 <_ZN4blib2dp9SingletonINS_6AnalogEED0Ev>:
                virtual ~Singleton()
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
                }
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ffe9 	bl	8000e94 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 8000ec2:	2104      	movs	r1, #4
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f005 fee1 	bl	8006c8c <_ZdlPvj>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	; 0x28
 8000ed8:	af04      	add	r7, sp, #16
 8000eda:	6178      	str	r0, [r7, #20]
 8000edc:	6139      	str	r1, [r7, #16]
 8000ede:	60fa      	str	r2, [r7, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	ed87 0b00 	vstr	d0, [r7]
                print("[>]  ");
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_+0x4c>)
 8000ee8:	f7ff fda0 	bl	8000a2c <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_+0x50>)
 8000f06:	f005 ffa3 	bl	8006e50 <sniprintf>
                print(mBuffer);
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_+0x50>)
 8000f0c:	f7ff fd8e 	bl	8000a2c <_ZN4blib6Logger5printEPKc>
                print("\n");
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <_ZN4blib6Logger3LogIJPKciS3_dEEEvS3_DpT_+0x54>)
 8000f12:	f7ff fd8b 	bl	8000a2c <_ZN4blib6Logger5printEPKc>
            }
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	080077c0 	.word	0x080077c0
 8000f24:	20000204 	.word	0x20000204
 8000f28:	080077c8 	.word	0x080077c8

08000f2c <_ZN4blib7MonitorC1Ev>:
#include "Monitor.h"
#include "Button.h"

namespace blib
{
    Monitor::Monitor()
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fb54 	bl	80015e4 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <_ZN4blib7MonitorC1Ev+0x44>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	711a      	strb	r2, [r3, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	741a      	strb	r2, [r3, #16]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	745a      	strb	r2, [r3, #17]
    {
//        mSettingMode = true;    // TODO: test
        showInit();
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f000 f829 	bl	8000fb8 <_ZN4blib7Monitor8showInitEv>
    }
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	08007c0c 	.word	0x08007c0c

08000f74 <_ZN4blib7MonitorD1Ev>:
    Monitor::~Monitor()
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_ZN4blib7MonitorD1Ev+0x20>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fb3d 	bl	8001604 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
    {

    }
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	08007c0c 	.word	0x08007c0c

08000f98 <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
    }
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ffe7 	bl	8000f74 <_ZN4blib7MonitorD1Ev>
 8000fa6:	2114      	movs	r1, #20
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f005 fe6f 	bl	8006c8c <_ZdlPvj>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
        LOGI("MPPT INITIALIZED");
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_ZN4blib7Monitor8showInitEv+0x28>)
 8000fc2:	221a      	movs	r2, #26
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <_ZN4blib7Monitor8showInitEv+0x2c>)
 8000fc6:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <_ZN4blib7Monitor8showInitEv+0x30>)
 8000fc8:	f000 fb3c 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("FIRMWARE V1.00");
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <_ZN4blib7Monitor8showInitEv+0x28>)
 8000fce:	221b      	movs	r2, #27
 8000fd0:	4904      	ldr	r1, [pc, #16]	; (8000fe4 <_ZN4blib7Monitor8showInitEv+0x2c>)
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <_ZN4blib7Monitor8showInitEv+0x34>)
 8000fd4:	f000 fb36 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
//        HAL_Delay(1500);
    }
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	080077cc 	.word	0x080077cc
 8000fe4:	080077d8 	.word	0x080077d8
 8000fe8:	080077e4 	.word	0x080077e4
 8000fec:	08007804 	.word	0x08007804

08000ff0 <_ZN4blib7Monitor8showMenuEv>:

    // Show when button pressed
    void Monitor::showMenu()
    {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
        //TODO: need to add check is permission shown

        // Check whether in setting mode or not
        if (getSetttingMode() == true)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f8b2 	bl	8001162 <_ZNK4blib7Monitor15getSetttingModeEv>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	bf0c      	ite	eq
 8001004:	2301      	moveq	r3, #1
 8001006:	2300      	movne	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <_ZN4blib7Monitor8showMenuEv+0x26>
        {
            showSetting();
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f808 	bl	8001024 <_ZN4blib7Monitor11showSettingEv>
        }
        else    // Not in setting mode - Display mode
        {
            showDisplay();
        }
    }
 8001014:	e002      	b.n	800101c <_ZN4blib7Monitor8showMenuEv+0x2c>
            showDisplay();
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f85a 	bl	80010d0 <_ZN4blib7Monitor11showDisplayEv>
    }
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_ZN4blib7Monitor11showSettingEv>:

    void Monitor::showSetting()
    {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
        switch (getSettingLevel())
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f8f2 	bl	8001216 <_ZNK4blib7Monitor15getSettingLevelEv>
 8001032:	4603      	mov	r3, r0
 8001034:	2b0a      	cmp	r3, #10
 8001036:	d845      	bhi.n	80010c4 <_ZN4blib7Monitor11showSettingEv+0xa0>
 8001038:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <_ZN4blib7Monitor11showSettingEv+0x1c>)
 800103a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103e:	bf00      	nop
 8001040:	0800106d 	.word	0x0800106d
 8001044:	08001075 	.word	0x08001075
 8001048:	0800107d 	.word	0x0800107d
 800104c:	08001085 	.word	0x08001085
 8001050:	0800108d 	.word	0x0800108d
 8001054:	08001095 	.word	0x08001095
 8001058:	0800109d 	.word	0x0800109d
 800105c:	080010a5 	.word	0x080010a5
 8001060:	080010ad 	.word	0x080010ad
 8001064:	080010b5 	.word	0x080010b5
 8001068:	080010bd 	.word	0x080010bd
        {
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_0:
                showSettingSupplyAlgorithm();
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f9d1 	bl	8001414 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>
                break;
 8001072:	e028      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_1:
                showSettingChargerPsuMode();
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f9e1 	bl	800143c <_ZN4blib7Monitor25showSettingChargerPsuModeEv>
                break;
 800107a:	e024      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_2:
                showSettingMaxBatteryVoltage();
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f9f1 	bl	8001464 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>
                break;
 8001082:	e020      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_3:
                showSettingMinBatteryVoltage();
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fa01 	bl	800148c <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>
                break;
 800108a:	e01c      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_4:
                showSettingChargingCurrent();
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fa11 	bl	80014b4 <_ZN4blib7Monitor26showSettingChargingCurrentEv>
                break;
 8001092:	e018      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_5:
                showSettingCoolingFan();
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fa21 	bl	80014dc <_ZN4blib7Monitor21showSettingCoolingFanEv>
                break;
 800109a:	e014      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_6:
                showSettingFanTriggerTemp();
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 fa33 	bl	8001508 <_ZN4blib7Monitor25showSettingFanTriggerTempEv>
                break;
 80010a2:	e010      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_7:
                showSettingShutdownTemp();
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f000 fa45 	bl	8001534 <_ZN4blib7Monitor23showSettingShutdownTempEv>
                break;
 80010aa:	e00c      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_8:
                showSettingAutoLoadFeature();
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fa57 	bl	8001560 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>
                break;
 80010b2:	e008      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_9:
                showSettingBackligthSleep();
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 fa69 	bl	800158c <_ZN4blib7Monitor25showSettingBackligthSleepEv>
                break;
 80010ba:	e004      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_10:
                showSettingFactoryReset();
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f000 fa7b 	bl	80015b8 <_ZN4blib7Monitor23showSettingFactoryResetEv>
                break;
 80010c2:	e000      	b.n	80010c6 <_ZN4blib7Monitor11showSettingEv+0xa2>
            default:
                break;
 80010c4:	bf00      	nop
        }
    }
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop

080010d0 <_ZN4blib7Monitor11showDisplayEv>:
    void Monitor::showDisplay()
    {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
        const Monitor::DisplayLevel displayLevel = getDisplayLevel();
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f8bd 	bl	8001258 <_ZNK4blib7Monitor15getDisplayLevelEv>
 80010de:	60f8      	str	r0, [r7, #12]
        switch (displayLevel)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d828      	bhi.n	8001138 <_ZN4blib7Monitor11showDisplayEv+0x68>
 80010e6:	a201      	add	r2, pc, #4	; (adr r2, 80010ec <_ZN4blib7Monitor11showDisplayEv+0x1c>)
 80010e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ec:	08001139 	.word	0x08001139
 80010f0:	08001109 	.word	0x08001109
 80010f4:	08001111 	.word	0x08001111
 80010f8:	08001119 	.word	0x08001119
 80010fc:	08001121 	.word	0x08001121
 8001100:	08001129 	.word	0x08001129
 8001104:	08001131 	.word	0x08001131
        {
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_0:
                // Do not show anything - Maybe show display off
                break;
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_1:
                showDisplayLevel1();
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f8b1 	bl	8001270 <_ZN4blib7Monitor17showDisplayLevel1Ev>
                break;
 800110e:	e014      	b.n	800113a <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_2:
                showDisplayLevel2();
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f8c1 	bl	8001298 <_ZN4blib7Monitor17showDisplayLevel2Ev>
                break;
 8001116:	e010      	b.n	800113a <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_3:
                showDisplayLevel3();
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f8d1 	bl	80012c0 <_ZN4blib7Monitor17showDisplayLevel3Ev>
                break;
 800111e:	e00c      	b.n	800113a <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_4:
                showDisplayLevel4();
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 f8e1 	bl	80012e8 <_ZN4blib7Monitor17showDisplayLevel4Ev>
                break;
 8001126:	e008      	b.n	800113a <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_5:
                showDisplayChooseSettingMode();
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f8f1 	bl	8001310 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>
                break;
 800112e:	e004      	b.n	800113a <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_6:
                showDisplayFactoryReset();
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f909 	bl	8001348 <_ZN4blib7Monitor23showDisplayFactoryResetEv>
                break;
 8001136:	e000      	b.n	800113a <_ZN4blib7Monitor11showDisplayEv+0x6a>
            default:
                break;
 8001138:	bf00      	nop
        }
    }
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop

08001144 <_ZN4blib7Monitor14setSettingModeEb>:

    void Monitor::setSettingMode(const bool val)
    {
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]
        mSettingMode = val;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	78fa      	ldrb	r2, [r7, #3]
 8001154:	711a      	strb	r2, [r3, #4]
    }
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_ZNK4blib7Monitor15getSetttingModeEv>:
    bool Monitor::getSetttingMode() const
    {
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
        return mSettingMode;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	b2db      	uxtb	r3, r3
    }
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZN4blib7Monitor15setFactoryResetEb>:

    void Monitor::setFactoryReset(const bool val)
    {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
        mFactoryResetEnable = val;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	78fa      	ldrb	r2, [r7, #3]
 800118c:	741a      	strb	r2, [r3, #16]
    }
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <_ZNK4blib7Monitor15getFactoryResetEv>:
    bool Monitor::getFactoryReset() const
    {
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
        return mFactoryResetEnable;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7c1b      	ldrb	r3, [r3, #16]
 80011a6:	b2db      	uxtb	r3, r3
    }
 80011a8:	4618      	mov	r0, r3
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <_ZN4blib7Monitor22setConfirmFactoryResetEb>:
    void Monitor::setConfirmFactoryReset(const bool val)
    {
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	70fb      	strb	r3, [r7, #3]
        mConfirmFactoryReset = val;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	78fa      	ldrb	r2, [r7, #3]
 80011c4:	745a      	strb	r2, [r3, #17]
    }
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <_ZNK4blib7Monitor22getConfirmFactoryResetEv>:
    bool Monitor::getConfirmFactoryReset() const
    {
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
        return mConfirmFactoryReset;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7c5b      	ldrb	r3, [r3, #17]
 80011de:	b2db      	uxtb	r3, r3
    }
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>:

    void Monitor::setSettingLevel(const SettingLevel val)
    {
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
        uint8_t u8SettingLevel = (uint8_t) val;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	73fb      	strb	r3, [r7, #15]

        if (u8SettingLevel < 0)
        {
            u8SettingLevel = 0;
        }
        else if (u8SettingLevel >= (uint8_t) SettingLevel::SETTING_LEVEL_MAX)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	2b0a      	cmp	r3, #10
 80011fe:	d901      	bls.n	8001204 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE+0x18>
        {
            u8SettingLevel = 0;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
        }

        mSettingLevel = (SettingLevel) u8SettingLevel;
 8001204:	7bfa      	ldrb	r2, [r7, #15]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	609a      	str	r2, [r3, #8]
    }
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZNK4blib7Monitor15getSettingLevelEv>:
    Monitor::SettingLevel Monitor::getSettingLevel() const
    {
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
        return mSettingLevel;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
    }
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE>:

    void Monitor::setDisplayLevel(const DisplayLevel val)
    {
 800122e:	b480      	push	{r7}
 8001230:	b085      	sub	sp, #20
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
        uint8_t u8DisplayLevel = (uint8_t) val;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	73fb      	strb	r3, [r7, #15]

        if (u8DisplayLevel < 0)
        {
            u8DisplayLevel = 0;
        }
        else if (u8DisplayLevel >= (uint8_t) DisplayLevel::DISPLAY_LEVEL_MAX)
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	2b06      	cmp	r3, #6
 8001240:	d901      	bls.n	8001246 <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE+0x18>
        {
            u8DisplayLevel = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
        }

        mDisplayLevel = (DisplayLevel) u8DisplayLevel;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60da      	str	r2, [r3, #12]
    }
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_ZNK4blib7Monitor15getDisplayLevelEv>:
    Monitor::DisplayLevel Monitor::getDisplayLevel() const
    {
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
        return mDisplayLevel;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
    }
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <_ZN4blib7Monitor17showDisplayLevel1Ev>:

    void Monitor::showDisplayLevel1()
    {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
        LOGI();
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <_ZN4blib7Monitor17showDisplayLevel1Ev+0x1c>)
 800127a:	22bb      	movs	r2, #187	; 0xbb
 800127c:	4904      	ldr	r1, [pc, #16]	; (8001290 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x20>)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x24>)
 8001280:	f000 f9e0 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08007820 	.word	0x08007820
 8001290:	080077d8 	.word	0x080077d8
 8001294:	08007834 	.word	0x08007834

08001298 <_ZN4blib7Monitor17showDisplayLevel2Ev>:
    void Monitor::showDisplayLevel2()
    {
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
        LOGI();
 80012a0:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x1c>)
 80012a2:	22bf      	movs	r2, #191	; 0xbf
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x20>)
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <_ZN4blib7Monitor17showDisplayLevel2Ev+0x24>)
 80012a8:	f000 f9cc 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	08007844 	.word	0x08007844
 80012b8:	080077d8 	.word	0x080077d8
 80012bc:	08007834 	.word	0x08007834

080012c0 <_ZN4blib7Monitor17showDisplayLevel3Ev>:
    void Monitor::showDisplayLevel3()
    {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
        LOGI();
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <_ZN4blib7Monitor17showDisplayLevel3Ev+0x1c>)
 80012ca:	22c3      	movs	r2, #195	; 0xc3
 80012cc:	4904      	ldr	r1, [pc, #16]	; (80012e0 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x20>)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x24>)
 80012d0:	f000 f9b8 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	08007858 	.word	0x08007858
 80012e0:	080077d8 	.word	0x080077d8
 80012e4:	08007834 	.word	0x08007834

080012e8 <_ZN4blib7Monitor17showDisplayLevel4Ev>:
    void Monitor::showDisplayLevel4()
    {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
        LOGI();
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x1c>)
 80012f2:	22c7      	movs	r2, #199	; 0xc7
 80012f4:	4904      	ldr	r1, [pc, #16]	; (8001308 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x20>)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <_ZN4blib7Monitor17showDisplayLevel4Ev+0x24>)
 80012f8:	f000 f9a4 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	0800786c 	.word	0x0800786c
 8001308:	080077d8 	.word	0x080077d8
 800130c:	08007834 	.word	0x08007834

08001310 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>:
    void Monitor::showDisplayChooseSettingMode()
    {
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
        LOGI("SETTINGS MENU");
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x28>)
 800131a:	22cb      	movs	r2, #203	; 0xcb
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x2c>)
 800131e:	4808      	ldr	r0, [pc, #32]	; (8001340 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x30>)
 8001320:	f000 f990 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("--PRESS SELECT--");
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x28>)
 8001326:	22cc      	movs	r2, #204	; 0xcc
 8001328:	4904      	ldr	r1, [pc, #16]	; (800133c <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x2c>)
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x34>)
 800132c:	f000 f98a 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08007880 	.word	0x08007880
 800133c:	080077d8 	.word	0x080077d8
 8001340:	080078a0 	.word	0x080078a0
 8001344:	080078bc 	.word	0x080078bc

08001348 <_ZN4blib7Monitor23showDisplayFactoryResetEv>:
    void Monitor::showDisplayFactoryReset()
    {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
        if (getFactoryReset() == false)
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff22 	bl	800119a <_ZNK4blib7Monitor15getFactoryResetEv>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00c      	beq.n	8001380 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x38>
        {
            LOGI("FACTORY RESET");
 8001366:	4b24      	ldr	r3, [pc, #144]	; (80013f8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8001368:	22d2      	movs	r2, #210	; 0xd2
 800136a:	4924      	ldr	r1, [pc, #144]	; (80013fc <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 800136c:	4824      	ldr	r0, [pc, #144]	; (8001400 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb8>)
 800136e:	f000 f969 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
            LOGI("--PRESS SELECT--");
 8001372:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8001374:	22d3      	movs	r2, #211	; 0xd3
 8001376:	4921      	ldr	r1, [pc, #132]	; (80013fc <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 8001378:	4822      	ldr	r0, [pc, #136]	; (8001404 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xbc>)
 800137a:	f000 f963 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                // Go to setting mode - show supply algorithm screen
                setSettingMode(true);
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
            }
        }
    }
 800137e:	e037      	b.n	80013f0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xa8>
            if (getConfirmFactoryReset() == false)
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff26 	bl	80011d2 <_ZNK4blib7Monitor22getConfirmFactoryResetEv>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x68>
                LOGI("ARE YOU SURE?");
 8001396:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8001398:	22d9      	movs	r2, #217	; 0xd9
 800139a:	4918      	ldr	r1, [pc, #96]	; (80013fc <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 800139c:	481a      	ldr	r0, [pc, #104]	; (8001408 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc0>)
 800139e:	f000 f951 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI(" >NO   >YES");
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 80013a4:	22da      	movs	r2, #218	; 0xda
 80013a6:	4915      	ldr	r1, [pc, #84]	; (80013fc <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc4>)
 80013aa:	f000 f94b 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80013ae:	e01f      	b.n	80013f0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xa8>
                LOGI("FACTORY RESET");
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 80013b2:	22de      	movs	r2, #222	; 0xde
 80013b4:	4911      	ldr	r1, [pc, #68]	; (80013fc <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb8>)
 80013b8:	f000 f944 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI("SUCCESSFULLY");
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 80013be:	22df      	movs	r2, #223	; 0xdf
 80013c0:	490e      	ldr	r1, [pc, #56]	; (80013fc <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 80013c2:	4813      	ldr	r0, [pc, #76]	; (8001410 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc8>)
 80013c4:	f000 f93e 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                HAL_Delay(1500);
 80013c8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80013cc:	f000 ff42 	bl	8002254 <HAL_Delay>
                setConfirmFactoryReset(false);
 80013d0:	2100      	movs	r1, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff feee 	bl	80011b4 <_ZN4blib7Monitor22setConfirmFactoryResetEb>
                setFactoryReset(false);
 80013d8:	2100      	movs	r1, #0
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fece 	bl	800117c <_ZN4blib7Monitor15setFactoryResetEb>
                setSettingMode(true);
 80013e0:	2101      	movs	r1, #1
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff feae 	bl	8001144 <_ZN4blib7Monitor14setSettingModeEb>
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
 80013e8:	2101      	movs	r1, #1
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fefe 	bl	80011ec <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>
    }
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	080078dc 	.word	0x080078dc
 80013fc:	080077d8 	.word	0x080077d8
 8001400:	080078f4 	.word	0x080078f4
 8001404:	080078bc 	.word	0x080078bc
 8001408:	08007910 	.word	0x08007910
 800140c:	0800792c 	.word	0x0800792c
 8001410:	08007948 	.word	0x08007948

08001414 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>:
    void Monitor::showSettingSupplyAlgorithm()
    {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
        LOGI();
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x1c>)
 800141e:	22ee      	movs	r2, #238	; 0xee
 8001420:	4904      	ldr	r1, [pc, #16]	; (8001434 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x20>)
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x24>)
 8001424:	f000 f90e 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	08007964 	.word	0x08007964
 8001434:	080077d8 	.word	0x080077d8
 8001438:	08007834 	.word	0x08007834

0800143c <_ZN4blib7Monitor25showSettingChargerPsuModeEv>:
    void Monitor::showSettingChargerPsuMode()
    {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
        LOGI();
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x1c>)
 8001446:	22f2      	movs	r2, #242	; 0xf2
 8001448:	4904      	ldr	r1, [pc, #16]	; (800145c <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x20>)
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x24>)
 800144c:	f000 f8fa 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001450:	bf00      	nop
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	08007980 	.word	0x08007980
 800145c:	080077d8 	.word	0x080077d8
 8001460:	08007834 	.word	0x08007834

08001464 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>:
    void Monitor::showSettingMaxBatteryVoltage()
    {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
        LOGI();
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x1c>)
 800146e:	22f6      	movs	r2, #246	; 0xf6
 8001470:	4904      	ldr	r1, [pc, #16]	; (8001484 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x20>)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x24>)
 8001474:	f000 f8e6 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	0800799c 	.word	0x0800799c
 8001484:	080077d8 	.word	0x080077d8
 8001488:	08007834 	.word	0x08007834

0800148c <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>:
    void Monitor::showSettingMinBatteryVoltage()
    {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
        LOGI();
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x1c>)
 8001496:	22fa      	movs	r2, #250	; 0xfa
 8001498:	4904      	ldr	r1, [pc, #16]	; (80014ac <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x20>)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x24>)
 800149c:	f000 f8d2 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	080079bc 	.word	0x080079bc
 80014ac:	080077d8 	.word	0x080077d8
 80014b0:	08007834 	.word	0x08007834

080014b4 <_ZN4blib7Monitor26showSettingChargingCurrentEv>:
    void Monitor::showSettingChargingCurrent()
    {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
        LOGI();
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x1c>)
 80014be:	22fe      	movs	r2, #254	; 0xfe
 80014c0:	4904      	ldr	r1, [pc, #16]	; (80014d4 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x20>)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x24>)
 80014c4:	f000 f8be 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	080079dc 	.word	0x080079dc
 80014d4:	080077d8 	.word	0x080077d8
 80014d8:	08007834 	.word	0x08007834

080014dc <_ZN4blib7Monitor21showSettingCoolingFanEv>:
    void Monitor::showSettingCoolingFan()
    {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
        LOGI();
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <_ZN4blib7Monitor21showSettingCoolingFanEv+0x20>)
 80014e6:	f44f 7281 	mov.w	r2, #258	; 0x102
 80014ea:	4905      	ldr	r1, [pc, #20]	; (8001500 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x24>)
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x28>)
 80014ee:	f000 f8a9 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	080079f8 	.word	0x080079f8
 8001500:	080077d8 	.word	0x080077d8
 8001504:	08007834 	.word	0x08007834

08001508 <_ZN4blib7Monitor25showSettingFanTriggerTempEv>:
    void Monitor::showSettingFanTriggerTemp()
    {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
        LOGI();
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x20>)
 8001512:	f44f 7283 	mov.w	r2, #262	; 0x106
 8001516:	4905      	ldr	r1, [pc, #20]	; (800152c <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x24>)
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x28>)
 800151a:	f000 f893 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	08007a10 	.word	0x08007a10
 800152c:	080077d8 	.word	0x080077d8
 8001530:	08007834 	.word	0x08007834

08001534 <_ZN4blib7Monitor23showSettingShutdownTempEv>:
    void Monitor::showSettingShutdownTemp()
    {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
        LOGI();
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x20>)
 800153e:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8001542:	4905      	ldr	r1, [pc, #20]	; (8001558 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x24>)
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <_ZN4blib7Monitor23showSettingShutdownTempEv+0x28>)
 8001546:	f000 f87d 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	08007a2c 	.word	0x08007a2c
 8001558:	080077d8 	.word	0x080077d8
 800155c:	08007834 	.word	0x08007834

08001560 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>:
    void Monitor::showSettingAutoLoadFeature()
    {
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
        LOGI();
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x20>)
 800156a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800156e:	4905      	ldr	r1, [pc, #20]	; (8001584 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x24>)
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x28>)
 8001572:	f000 f867 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	08007a44 	.word	0x08007a44
 8001584:	080077d8 	.word	0x080077d8
 8001588:	08007834 	.word	0x08007834

0800158c <_ZN4blib7Monitor25showSettingBackligthSleepEv>:
    void Monitor::showSettingBackligthSleep()
    {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
        LOGI();
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x20>)
 8001596:	f44f 7289 	mov.w	r2, #274	; 0x112
 800159a:	4905      	ldr	r1, [pc, #20]	; (80015b0 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x24>)
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x28>)
 800159e:	f000 f851 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08007a60 	.word	0x08007a60
 80015b0:	080077d8 	.word	0x080077d8
 80015b4:	08007834 	.word	0x08007834

080015b8 <_ZN4blib7Monitor23showSettingFactoryResetEv>:
    void Monitor::showSettingFactoryReset()
    {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
        LOGI();
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x20>)
 80015c2:	f44f 728b 	mov.w	r2, #278	; 0x116
 80015c6:	4905      	ldr	r1, [pc, #20]	; (80015dc <_ZN4blib7Monitor23showSettingFactoryResetEv+0x24>)
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x28>)
 80015ca:	f000 f83b 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08007a7c 	.word	0x08007a7c
 80015dc:	080077d8 	.word	0x080077d8
 80015e0:	08007834 	.word	0x08007834

080015e4 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>:
                Singleton()
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
                {
 80015ec:	4a04      	ldr	r2, [pc, #16]	; (8001600 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev+0x1c>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	601a      	str	r2, [r3, #0]
                }
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	08007c1c 	.word	0x08007c1c

08001604 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>:
                virtual ~Singleton()
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
                }
 800160c:	4a04      	ldr	r2, [pc, #16]	; (8001620 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev+0x1c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	08007c1c 	.word	0x08007c1c

08001624 <_ZN4blib2dp9SingletonINS_7MonitorEED0Ev>:
                virtual ~Singleton()
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
                }
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffe9 	bl	8001604 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
 8001632:	2104      	movs	r1, #4
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f005 fb29 	bl	8006c8c <_ZdlPvj>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8001654:	f7ff f9ea 	bl	8000a2c <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001668:	4807      	ldr	r0, [pc, #28]	; (8001688 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 800166a:	f005 fbf1 	bl	8006e50 <sniprintf>
                print(mBuffer);
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8001670:	f7ff f9dc 	bl	8000a2c <_ZN4blib6Logger5printEPKc>
                print("\n");
 8001674:	4805      	ldr	r0, [pc, #20]	; (800168c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 8001676:	f7ff f9d9 	bl	8000a2c <_ZN4blib6Logger5printEPKc>
            }
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	08007a94 	.word	0x08007a94
 8001688:	20000204 	.word	0x20000204
 800168c:	08007a9c 	.word	0x08007a9c

08001690 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 160000U;
 800169e:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x148>)
 80016a0:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80016a2:	2300      	movs	r3, #0
 80016a4:	613b      	str	r3, [r7, #16]
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_EXTI_Callback+0x1e>
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	3301      	adds	r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	bf8c      	ite	hi
 80016b6:	2301      	movhi	r3, #1
 80016b8:	2300      	movls	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f3      	bne.n	80016a8 <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == BUT_LEFT_Pin)
 80016c4:	88fb      	ldrh	r3, [r7, #6]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d10b      	bne.n	80016e2 <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Left pin");
 80016ca:	4b44      	ldr	r3, [pc, #272]	; (80017dc <HAL_GPIO_EXTI_Callback+0x14c>)
 80016cc:	224d      	movs	r2, #77	; 0x4d
 80016ce:	4944      	ldr	r1, [pc, #272]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x150>)
 80016d0:	4844      	ldr	r0, [pc, #272]	; (80017e4 <HAL_GPIO_EXTI_Callback+0x154>)
 80016d2:	f7ff ffb7 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::LEFT;
 80016d6:	4b44      	ldr	r3, [pc, #272]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x158>)
 80016d8:	2201      	movs	r2, #1
 80016da:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_LEFT_GPIO_Port;
 80016dc:	4b43      	ldr	r3, [pc, #268]	; (80017ec <HAL_GPIO_EXTI_Callback+0x15c>)
 80016de:	61fb      	str	r3, [r7, #28]
 80016e0:	e032      	b.n	8001748 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_RIGHT_Pin)
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d10b      	bne.n	8001700 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Right pin");
 80016e8:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <HAL_GPIO_EXTI_Callback+0x14c>)
 80016ea:	2253      	movs	r2, #83	; 0x53
 80016ec:	493c      	ldr	r1, [pc, #240]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x150>)
 80016ee:	4840      	ldr	r0, [pc, #256]	; (80017f0 <HAL_GPIO_EXTI_Callback+0x160>)
 80016f0:	f7ff ffa8 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::RIGHT;
 80016f4:	4b3c      	ldr	r3, [pc, #240]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x158>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_RIGHT_GPIO_Port;
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <HAL_GPIO_EXTI_Callback+0x15c>)
 80016fc:	61fb      	str	r3, [r7, #28]
 80016fe:	e023      	b.n	8001748 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_BACK_Pin)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	2b04      	cmp	r3, #4
 8001704:	d10b      	bne.n	800171e <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 8001706:	4b35      	ldr	r3, [pc, #212]	; (80017dc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001708:	2259      	movs	r2, #89	; 0x59
 800170a:	4935      	ldr	r1, [pc, #212]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x150>)
 800170c:	4839      	ldr	r0, [pc, #228]	; (80017f4 <HAL_GPIO_EXTI_Callback+0x164>)
 800170e:	f7ff ff99 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001714:	2203      	movs	r2, #3
 8001716:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_BACK_GPIO_Port;
 8001718:	4b34      	ldr	r3, [pc, #208]	; (80017ec <HAL_GPIO_EXTI_Callback+0x15c>)
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	e014      	b.n	8001748 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_SELECT_Pin)
 800171e:	88fb      	ldrh	r3, [r7, #6]
 8001720:	2b08      	cmp	r3, #8
 8001722:	d10b      	bne.n	800173c <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 8001724:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_GPIO_EXTI_Callback+0x14c>)
 8001726:	225f      	movs	r2, #95	; 0x5f
 8001728:	492d      	ldr	r1, [pc, #180]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x150>)
 800172a:	4833      	ldr	r0, [pc, #204]	; (80017f8 <HAL_GPIO_EXTI_Callback+0x168>)
 800172c:	f7ff ff8a 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SELECT;
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001732:	2204      	movs	r2, #4
 8001734:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_SELECT_GPIO_Port;
 8001736:	4b2d      	ldr	r3, [pc, #180]	; (80017ec <HAL_GPIO_EXTI_Callback+0x15c>)
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	e005      	b.n	8001748 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_GPIO_EXTI_Callback+0x14c>)
 800173e:	2265      	movs	r2, #101	; 0x65
 8001740:	4927      	ldr	r1, [pc, #156]	; (80017e0 <HAL_GPIO_EXTI_Callback+0x150>)
 8001742:	482e      	ldr	r0, [pc, #184]	; (80017fc <HAL_GPIO_EXTI_Callback+0x16c>)
 8001744:	f7ff ff7e 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 8001748:	f000 fab6 	bl	8001cb8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800174c:	4602      	mov	r2, r0
 800174e:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x158>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	4610      	mov	r0, r2
 8001756:	f005 f99b 	bl	8006a90 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 800175a:	f000 faad 	bl	8001cb8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800175e:	4603      	mov	r3, r0
 8001760:	4618      	mov	r0, r3
 8001762:	f005 f9af 	bl	8006ac4 <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01e      	beq.n	80017aa <HAL_GPIO_EXTI_Callback+0x11a>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 800176c:	e002      	b.n	8001774 <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	4619      	mov	r1, r3
 8001778:	69f8      	ldr	r0, [r7, #28]
 800177a:	f002 fe7d 	bl	8004478 <HAL_GPIO_ReadPin>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	bf0c      	ite	eq
 8001784:	2301      	moveq	r3, #1
 8001786:	2300      	movne	r3, #0
 8001788:	b2da      	uxtb	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	69b9      	ldr	r1, [r7, #24]
 800178e:	4299      	cmp	r1, r3
 8001790:	bf8c      	ite	hi
 8001792:	2301      	movhi	r3, #1
 8001794:	2300      	movls	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	4013      	ands	r3, r2
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf14      	ite	ne
 80017a0:	2301      	movne	r3, #1
 80017a2:	2300      	moveq	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1e1      	bne.n	800176e <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e002      	b.n	80017b6 <HAL_GPIO_EXTI_Callback+0x126>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	bf8c      	ite	hi
 80017be:	2301      	movhi	r3, #1
 80017c0:	2300      	movls	r3, #0
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f3      	bne.n	80017b0 <HAL_GPIO_EXTI_Callback+0x120>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <HAL_GPIO_EXTI_Callback+0x170>)
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	6153      	str	r3, [r2, #20]
}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	00027100 	.word	0x00027100
 80017dc:	08007aa0 	.word	0x08007aa0
 80017e0:	08007ab8 	.word	0x08007ab8
 80017e4:	08007ac4 	.word	0x08007ac4
 80017e8:	200001ec 	.word	0x200001ec
 80017ec:	48000800 	.word	0x48000800
 80017f0:	08007ae4 	.word	0x08007ae4
 80017f4:	08007b04 	.word	0x08007b04
 80017f8:	08007b24 	.word	0x08007b24
 80017fc:	08007b44 	.word	0x08007b44
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
    blib::Analog::getInstance().sampling();
 800180c:	f000 fa6a 	bl	8001ce4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001810:	4603      	mov	r3, r0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f972 	bl	8000afc <_ZN4blib6Analog8samplingEv>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001826:	f000 fcaf 	bl	8002188 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800182a:	f000 f837 	bl	800189c <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800182e:	f000 f9c3 	bl	8001bb8 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 8001832:	f000 f9a3 	bl	8001b7c <_ZL11MX_DMA_Initv>
    MX_ADC1_Init();
 8001836:	f000 f89f 	bl	8001978 <_ZL12MX_ADC1_Initv>
    MX_I2C1_Init();
 800183a:	f000 f91d 	bl	8001a78 <_ZL12MX_I2C1_Initv>
    MX_USART2_UART_Init();
 800183e:	f000 f969 	bl	8001b14 <_ZL19MX_USART2_UART_Initv>
    /* USER CODE BEGIN 2 */
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <main+0x68>)
 8001844:	22a3      	movs	r2, #163	; 0xa3
 8001846:	4911      	ldr	r1, [pc, #68]	; (800188c <main+0x6c>)
 8001848:	4811      	ldr	r0, [pc, #68]	; (8001890 <main+0x70>)
 800184a:	f7ff fefb 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <main+0x68>)
 8001850:	22a4      	movs	r2, #164	; 0xa4
 8001852:	490e      	ldr	r1, [pc, #56]	; (800188c <main+0x6c>)
 8001854:	480f      	ldr	r0, [pc, #60]	; (8001894 <main+0x74>)
 8001856:	f7ff fef5 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <main+0x68>)
 800185c:	22a5      	movs	r2, #165	; 0xa5
 800185e:	490b      	ldr	r1, [pc, #44]	; (800188c <main+0x6c>)
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <main+0x78>)
 8001862:	f7ff feef 	bl	8001644 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

    auto &analog = blib::Analog::getInstance();
 8001866:	f000 fa3d 	bl	8001ce4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 800186a:	6078      	str	r0, [r7, #4]
    auto &monitor = blib::Monitor::getInstance();
 800186c:	f000 fa50 	bl	8001d10 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 8001870:	6038      	str	r0, [r7, #0]
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        analog.readAnalog();
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff f952 	bl	8000b1c <_ZN4blib6Analog10readAnalogEv>
        monitor.showMenu();
 8001878:	6838      	ldr	r0, [r7, #0]
 800187a:	f7ff fbb9 	bl	8000ff0 <_ZN4blib7Monitor8showMenuEv>
        HAL_Delay(1000);
 800187e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001882:	f000 fce7 	bl	8002254 <HAL_Delay>
        analog.readAnalog();
 8001886:	e7f4      	b.n	8001872 <main+0x52>
 8001888:	08007b68 	.word	0x08007b68
 800188c:	08007ab8 	.word	0x08007ab8
 8001890:	08007b70 	.word	0x08007b70
 8001894:	08007b9c 	.word	0x08007b9c
 8001898:	08007bb8 	.word	0x08007bb8

0800189c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b0a6      	sub	sp, #152	; 0x98
 80018a0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018a6:	2228      	movs	r2, #40	; 0x28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f005 fb04 	bl	8006eb8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	2258      	movs	r2, #88	; 0x58
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 faf6 	bl	8006eb8 <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018cc:	2302      	movs	r3, #2
 80018ce:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d0:	2301      	movs	r3, #1
 80018d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018d4:	2310      	movs	r3, #16
 80018d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018da:	2302      	movs	r3, #2
 80018dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 ff2b 	bl	8004754 <HAL_RCC_OscConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <_Z18SystemClock_Configv+0x76>
    {
        Error_Handler();
 800190e:	f000 f9cd 	bl	8001cac <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001912:	230f      	movs	r3, #15
 8001914:	65fb      	str	r3, [r7, #92]	; 0x5c
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2302      	movs	r3, #2
 8001918:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001922:	2300      	movs	r3, #0
 8001924:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001926:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f003 ff65 	bl	80057fc <HAL_RCC_ClockConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <_Z18SystemClock_Configv+0xaa>
    {
        Error_Handler();
 8001942:	f000 f9b3 	bl	8001cac <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 8001946:	2322      	movs	r3, #34	; 0x22
 8001948:	607b      	str	r3, [r7, #4]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4618      	mov	r0, r3
 8001956:	f004 f987 	bl	8005c68 <HAL_RCCEx_PeriphCLKConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf14      	ite	ne
 8001960:	2301      	movne	r3, #1
 8001962:	2300      	moveq	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <_Z18SystemClock_Configv+0xd2>
    {
        Error_Handler();
 800196a:	f000 f99f 	bl	8001cac <Error_Handler>
    }
}
 800196e:	bf00      	nop
 8001970:	3798      	adds	r7, #152	; 0x98
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = { 0 };
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
 8001998:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 800199a:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 800199c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019a0:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019a2:	4b34      	ldr	r3, [pc, #208]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80019a8:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80019b6:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	765a      	strb	r2, [r3, #25]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c4:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d0:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 80019d6:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019d8:	2201      	movs	r2, #1
 80019da:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80019dc:	4b25      	ldr	r3, [pc, #148]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019e6:	2204      	movs	r2, #4
 80019e8:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 80019ea:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	761a      	strb	r2, [r3, #24]
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019f6:	481f      	ldr	r0, [pc, #124]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 80019f8:	f000 fc6e 	bl	80022d8 <HAL_ADC_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <_ZL12MX_ADC1_Initv+0x98>
    {
        Error_Handler();
 8001a0c:	f000 f94e 	bl	8001cac <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4816      	ldr	r0, [pc, #88]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 8001a1c:	f001 fdcc 	bl	80035b8 <HAL_ADCEx_MultiModeConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <_ZL12MX_ADC1_Initv+0xbc>
    {
        Error_Handler();
 8001a30:	f000 f93c 	bl	8001cac <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8001a34:	2301      	movs	r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001a40:	2307      	movs	r3, #7
 8001a42:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4808      	ldr	r0, [pc, #32]	; (8001a74 <_ZL12MX_ADC1_Initv+0xfc>)
 8001a52:	f001 fac7 	bl	8002fe4 <HAL_ADC_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf14      	ite	ne
 8001a5c:	2301      	movne	r3, #1
 8001a5e:	2300      	moveq	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <_ZL12MX_ADC1_Initv+0xf2>
    {
        Error_Handler();
 8001a66:	f000 f921 	bl	8001cac <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000007c 	.word	0x2000007c

08001a78 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001a7e:	4a23      	ldr	r2, [pc, #140]	; (8001b0c <_ZL12MX_I2C1_Initv+0x94>)
 8001a80:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x2000090E;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001a84:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <_ZL12MX_I2C1_Initv+0x98>)
 8001a86:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a8e:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a94:	4b1c      	ldr	r3, [pc, #112]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aac:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ab2:	4815      	ldr	r0, [pc, #84]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001ab4:	f002 fd28 	bl	8004508 <HAL_I2C_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf14      	ite	ne
 8001abe:	2301      	movne	r3, #1
 8001ac0:	2300      	moveq	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <_ZL12MX_I2C1_Initv+0x54>
    {
        Error_Handler();
 8001ac8:	f000 f8f0 	bl	8001cac <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001acc:	2100      	movs	r1, #0
 8001ace:	480e      	ldr	r0, [pc, #56]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001ad0:	f002 fda9 	bl	8004626 <HAL_I2CEx_ConfigAnalogFilter>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <_ZL12MX_I2C1_Initv+0x70>
    {
        Error_Handler();
 8001ae4:	f000 f8e2 	bl	8001cac <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <_ZL12MX_I2C1_Initv+0x90>)
 8001aec:	f002 fde6 	bl	80046bc <HAL_I2CEx_ConfigDigitalFilter>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf14      	ite	ne
 8001af6:	2301      	movne	r3, #1
 8001af8:	2300      	moveq	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <_ZL12MX_I2C1_Initv+0x8c>
    {
        Error_Handler();
 8001b00:	f000 f8d4 	bl	8001cac <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000110 	.word	0x20000110
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	2000090e 	.word	0x2000090e

08001b14 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001b1c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b56:	4807      	ldr	r0, [pc, #28]	; (8001b74 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001b58:	f004 faa4 	bl	80060a4 <HAL_UART_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <_ZL19MX_USART2_UART_Initv+0x5c>
    {
        Error_Handler();
 8001b6c:	f000 f89e 	bl	8001cac <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000164 	.word	0x20000164
 8001b78:	40004400 	.word	0x40004400

08001b7c <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <_ZL11MX_DMA_Initv+0x38>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <_ZL11MX_DMA_Initv+0x38>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6153      	str	r3, [r2, #20]
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <_ZL11MX_DMA_Initv+0x38>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	200b      	movs	r0, #11
 8001ba0:	f002 f8bd 	bl	8003d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ba4:	200b      	movs	r0, #11
 8001ba6:	f002 f8d6 	bl	8003d56 <HAL_NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40021000 	.word	0x40021000

08001bb8 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	4a34      	ldr	r2, [pc, #208]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001bd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bd8:	6153      	str	r3, [r2, #20]
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	4b2f      	ldr	r3, [pc, #188]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	4a2e      	ldr	r2, [pc, #184]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	6153      	str	r3, [r2, #20]
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6153      	str	r3, [r2, #20]
 8001c0a:	4b26      	ldr	r3, [pc, #152]	; (8001ca4 <_ZL12MX_GPIO_Initv+0xec>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_INDICATOR_GPIO_Port, LED_INDICATOR_Pin, GPIO_PIN_RESET);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2120      	movs	r1, #32
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f002 fc43 	bl	80044a8 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_BACK_Pin BUT_SELECT_Pin */
    GPIO_InitStruct.Pin = BUT_LEFT_Pin | BUT_RIGHT_Pin | BUT_BACK_Pin | BUT_SELECT_Pin;
 8001c22:	230f      	movs	r3, #15
 8001c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	4619      	mov	r1, r3
 8001c36:	481c      	ldr	r0, [pc, #112]	; (8001ca8 <_ZL12MX_GPIO_Initv+0xf0>)
 8001c38:	f002 fa94 	bl	8004164 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED_INDICATOR_Pin */
    GPIO_InitStruct.Pin = LED_INDICATOR_Pin;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8001c4c:	f107 030c 	add.w	r3, r7, #12
 8001c50:	4619      	mov	r1, r3
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c56:	f002 fa85 	bl	8004164 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2006      	movs	r0, #6
 8001c60:	f002 f85d 	bl	8003d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c64:	2006      	movs	r0, #6
 8001c66:	f002 f876 	bl	8003d56 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2007      	movs	r0, #7
 8001c70:	f002 f855 	bl	8003d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c74:	2007      	movs	r0, #7
 8001c76:	f002 f86e 	bl	8003d56 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2008      	movs	r0, #8
 8001c80:	f002 f84d 	bl	8003d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8001c84:	2008      	movs	r0, #8
 8001c86:	f002 f866 	bl	8003d56 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2009      	movs	r0, #9
 8001c90:	f002 f845 	bl	8003d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c94:	2009      	movs	r0, #9
 8001c96:	f002 f85e 	bl	8003d56 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	48000800 	.word	0x48000800

08001cac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb0:	b672      	cpsid	i
}
 8001cb2:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <Error_Handler+0x8>
	...

08001cb8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 8001cb8:	b598      	push	{r3, r4, r7, lr}
 8001cba:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001cc4:	2008      	movs	r0, #8
 8001cc6:	f004 ffe3 	bl	8006c90 <_Znwj>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461c      	mov	r4, r3
 8001cce:	4620      	mov	r0, r4
 8001cd0:	f004 feaa 	bl	8006a28 <_ZN4blib6ButtonC1Ev>
 8001cd4:	4b02      	ldr	r3, [pc, #8]	; (8001ce0 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8001cd6:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001cd8:	4b01      	ldr	r3, [pc, #4]	; (8001ce0 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8001cda:	681b      	ldr	r3, [r3, #0]
                }
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd98      	pop	{r3, r4, r7, pc}
 8001ce0:	200001f4 	.word	0x200001f4

08001ce4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 8001ce4:	b598      	push	{r3, r4, r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001cf0:	2048      	movs	r0, #72	; 0x48
 8001cf2:	f004 ffcd 	bl	8006c90 <_Znwj>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	461c      	mov	r4, r3
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7fe feae 	bl	8000a5c <_ZN4blib6AnalogC1Ev>
 8001d00:	4b02      	ldr	r3, [pc, #8]	; (8001d0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8001d02:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8001d06:	681b      	ldr	r3, [r3, #0]
                }
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd98      	pop	{r3, r4, r7, pc}
 8001d0c:	200001f8 	.word	0x200001f8

08001d10 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>:
                static T& getInstance()
 8001d10:	b598      	push	{r3, r4, r7, lr}
 8001d12:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001d1c:	2014      	movs	r0, #20
 8001d1e:	f004 ffb7 	bl	8006c90 <_Znwj>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461c      	mov	r4, r3
 8001d26:	4620      	mov	r0, r4
 8001d28:	f7ff f900 	bl	8000f2c <_ZN4blib7MonitorC1Ev>
 8001d2c:	4b02      	ldr	r3, [pc, #8]	; (8001d38 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8001d2e:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001d30:	4b01      	ldr	r3, [pc, #4]	; (8001d38 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8001d32:	681b      	ldr	r3, [r3, #0]
                }
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd98      	pop	{r3, r4, r7, pc}
 8001d38:	200001f0 	.word	0x200001f0

08001d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d42:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <HAL_MspInit+0x44>)
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_MspInit+0x44>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6193      	str	r3, [r2, #24]
 8001d4e:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <HAL_MspInit+0x44>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	607b      	str	r3, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_MspInit+0x44>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a08      	ldr	r2, [pc, #32]	; (8001d80 <HAL_MspInit+0x44>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_MspInit+0x44>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000

08001d84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08a      	sub	sp, #40	; 0x28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001da4:	d154      	bne.n	8001e50 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_ADC_MspInit+0xd4>)
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4a2b      	ldr	r2, [pc, #172]	; (8001e58 <HAL_ADC_MspInit+0xd4>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	6153      	str	r3, [r2, #20]
 8001db2:	4b29      	ldr	r3, [pc, #164]	; (8001e58 <HAL_ADC_MspInit+0xd4>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b26      	ldr	r3, [pc, #152]	; (8001e58 <HAL_ADC_MspInit+0xd4>)
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	4a25      	ldr	r2, [pc, #148]	; (8001e58 <HAL_ADC_MspInit+0xd4>)
 8001dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc8:	6153      	str	r3, [r2, #20]
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_ADC_MspInit+0xd4>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dec:	f002 f9ba 	bl	8004164 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001df2:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <HAL_ADC_MspInit+0xdc>)
 8001df4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001e04:	2280      	movs	r2, #128	; 0x80
 8001e06:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001e26:	f001 ffb0 	bl	8003d8a <HAL_DMA_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001e30:	f7ff ff3c 	bl	8001cac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_ADC_MspInit+0xd8>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2100      	movs	r1, #0
 8001e44:	2012      	movs	r0, #18
 8001e46:	f001 ff6a 	bl	8003d1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e4a:	2012      	movs	r0, #18
 8001e4c:	f001 ff83 	bl	8003d56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	200000cc 	.word	0x200000cc
 8001e60:	40020008 	.word	0x40020008

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <HAL_I2C_MspInit+0xb8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d145      	bne.n	8001f12 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	4a25      	ldr	r2, [pc, #148]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e90:	6153      	str	r3, [r2, #20]
 8001e92:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6153      	str	r3, [r2, #20]
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ebc:	2312      	movs	r3, #18
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ed6:	f002 f945 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eea:	2304      	movs	r3, #4
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <HAL_I2C_MspInit+0xc0>)
 8001ef6:	f002 f935 	bl	8004164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f04:	61d3      	str	r3, [r2, #28]
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_I2C_MspInit+0xbc>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f12:	bf00      	nop
 8001f14:	3728      	adds	r7, #40	; 0x28
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40005400 	.word	0x40005400
 8001f20:	40021000 	.word	0x40021000
 8001f24:	48000400 	.word	0x48000400

08001f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a17      	ldr	r2, [pc, #92]	; (8001fa4 <HAL_UART_MspInit+0x7c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d128      	bne.n	8001f9c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_UART_MspInit+0x80>)
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <HAL_UART_MspInit+0x80>)
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	61d3      	str	r3, [r2, #28]
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_UART_MspInit+0x80>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_UART_MspInit+0x80>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_UART_MspInit+0x80>)
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	6153      	str	r3, [r2, #20]
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_UART_MspInit+0x80>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f8a:	2307      	movs	r3, #7
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f98:	f002 f8e4 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	40021000 	.word	0x40021000

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <MemManage_Handler+0x4>

08001fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc2:	e7fe      	b.n	8001fc2 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f000 f90c 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_LEFT_Pin);
 8002004:	2001      	movs	r0, #1
 8002006:	f002 fa67 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}

0800200e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_RIGHT_Pin);
 8002012:	2002      	movs	r0, #2
 8002014:	f002 fa60 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BACK_Pin);
 8002020:	2004      	movs	r0, #4
 8002022:	f002 fa59 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}

0800202a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SELECT_Pin);
 800202e:	2008      	movs	r0, #8
 8002030:	f002 fa52 	bl	80044d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}

08002038 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <DMA1_Channel1_IRQHandler+0x10>)
 800203e:	f001 ff83 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200000cc 	.word	0x200000cc

0800204c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <ADC1_2_IRQHandler+0x10>)
 8002052:	f000 fcb9 	bl	80029c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	2000007c 	.word	0x2000007c

08002060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return 1;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_kill>:

int _kill(int pid, int sig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800207a:	f004 ff79 	bl	8006f70 <__errno>
 800207e:	4603      	mov	r3, r0
 8002080:	2216      	movs	r2, #22
 8002082:	601a      	str	r2, [r3, #0]
  return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_exit>:

void _exit (int status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffe7 	bl	8002070 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020a2:	e7fe      	b.n	80020a2 <_exit+0x12>

080020a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ac:	4a14      	ldr	r2, [pc, #80]	; (8002100 <_sbrk+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <_sbrk+0x60>)
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <_sbrk+0x64>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	; (800210c <_sbrk+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c6:	4b10      	ldr	r3, [pc, #64]	; (8002108 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d207      	bcs.n	80020e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d4:	f004 ff4c 	bl	8006f70 <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	220c      	movs	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e009      	b.n	80020f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <_sbrk+0x64>)
 80020f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20010000 	.word	0x20010000
 8002104:	00000400 	.word	0x00000400
 8002108:	200001fc 	.word	0x200001fc
 800210c:	20000750 	.word	0x20000750

08002110 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <SystemInit+0x20>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	4a05      	ldr	r2, [pc, #20]	; (8002130 <SystemInit+0x20>)
 800211c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800216c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002138:	f7ff ffea 	bl	8002110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800213c:	480c      	ldr	r0, [pc, #48]	; (8002170 <LoopForever+0x6>)
  ldr r1, =_edata
 800213e:	490d      	ldr	r1, [pc, #52]	; (8002174 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002140:	4a0d      	ldr	r2, [pc, #52]	; (8002178 <LoopForever+0xe>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002144:	e002      	b.n	800214c <LoopCopyDataInit>

08002146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214a:	3304      	adds	r3, #4

0800214c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800214c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002150:	d3f9      	bcc.n	8002146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002154:	4c0a      	ldr	r4, [pc, #40]	; (8002180 <LoopForever+0x16>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002158:	e001      	b.n	800215e <LoopFillZerobss>

0800215a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800215c:	3204      	adds	r2, #4

0800215e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002160:	d3fb      	bcc.n	800215a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002162:	f004 ff0b 	bl	8006f7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002166:	f7ff fb5b 	bl	8001820 <main>

0800216a <LoopForever>:

LoopForever:
    b LoopForever
 800216a:	e7fe      	b.n	800216a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800216c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002174:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002178:	08007cb8 	.word	0x08007cb8
  ldr r2, =_sbss
 800217c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002180:	20000750 	.word	0x20000750

08002184 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC3_IRQHandler>
	...

08002188 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_Init+0x28>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <HAL_Init+0x28>)
 8002192:	f043 0310 	orr.w	r3, r3, #16
 8002196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002198:	2003      	movs	r0, #3
 800219a:	f001 fdb5 	bl	8003d08 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800219e:	200f      	movs	r0, #15
 80021a0:	f000 f808 	bl	80021b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021a4:	f7ff fdca 	bl	8001d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40022000 	.word	0x40022000

080021b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_InitTick+0x54>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f001 fdcd 	bl	8003d72 <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f001 fd95 	bl	8003d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <HAL_InitTick+0x5c>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000000 	.word	0x20000000
 800220c:	20000008 	.word	0x20000008
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008
 8002238:	20000200 	.word	0x20000200

0800223c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000200 	.word	0x20000200

08002254 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000008 	.word	0x20000008

0800229c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b09a      	sub	sp, #104	; 0x68
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e0:	2300      	movs	r3, #0
 80022e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e1e3      	b.n	80026c0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b00      	cmp	r3, #0
 8002308:	d176      	bne.n	80023f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d152      	bne.n	80023b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff fd29 	bl	8001d84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d13b      	bne.n	80023b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f001 faf5 	bl	8003930 <ADC_Disable>
 8002346:	4603      	mov	r3, r0
 8002348:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b00      	cmp	r3, #0
 8002356:	d12f      	bne.n	80023b8 <HAL_ADC_Init+0xe0>
 8002358:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800235c:	2b00      	cmp	r3, #0
 800235e:	d12b      	bne.n	80023b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002368:	f023 0302 	bic.w	r3, r3, #2
 800236c:	f043 0202 	orr.w	r2, r3, #2
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002382:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002392:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002394:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_ADC_Init+0x308>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a92      	ldr	r2, [pc, #584]	; (80025e4 <HAL_ADC_Init+0x30c>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9a      	lsrs	r2, r3, #18
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023aa:	e002      	b.n	80023b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80023d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d4:	d110      	bne.n	80023f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f023 0312 	bic.w	r3, r3, #18
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 8150 	bne.w	80026a6 <HAL_ADC_Init+0x3ce>
 8002406:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 814b 	bne.w	80026a6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 8143 	bne.w	80026a6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002428:	f043 0202 	orr.w	r2, r3, #2
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002438:	d004      	beq.n	8002444 <HAL_ADC_Init+0x16c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <HAL_ADC_Init+0x310>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d101      	bne.n	8002448 <HAL_ADC_Init+0x170>
 8002444:	4b69      	ldr	r3, [pc, #420]	; (80025ec <HAL_ADC_Init+0x314>)
 8002446:	e000      	b.n	800244a <HAL_ADC_Init+0x172>
 8002448:	4b69      	ldr	r3, [pc, #420]	; (80025f0 <HAL_ADC_Init+0x318>)
 800244a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002454:	d102      	bne.n	800245c <HAL_ADC_Init+0x184>
 8002456:	4b64      	ldr	r3, [pc, #400]	; (80025e8 <HAL_ADC_Init+0x310>)
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e01a      	b.n	8002492 <HAL_ADC_Init+0x1ba>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a61      	ldr	r2, [pc, #388]	; (80025e8 <HAL_ADC_Init+0x310>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d103      	bne.n	800246e <HAL_ADC_Init+0x196>
 8002466:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	e011      	b.n	8002492 <HAL_ADC_Init+0x1ba>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a60      	ldr	r2, [pc, #384]	; (80025f4 <HAL_ADC_Init+0x31c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d102      	bne.n	800247e <HAL_ADC_Init+0x1a6>
 8002478:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_ADC_Init+0x320>)
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e009      	b.n	8002492 <HAL_ADC_Init+0x1ba>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <HAL_ADC_Init+0x320>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d102      	bne.n	800248e <HAL_ADC_Init+0x1b6>
 8002488:	4b5a      	ldr	r3, [pc, #360]	; (80025f4 <HAL_ADC_Init+0x31c>)
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e001      	b.n	8002492 <HAL_ADC_Init+0x1ba>
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d108      	bne.n	80024b2 <HAL_ADC_Init+0x1da>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_Init+0x1da>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_ADC_Init+0x1dc>
 80024b2:	2300      	movs	r3, #0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11c      	bne.n	80024f2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024b8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_ADC_Init+0x202>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Init+0x202>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <HAL_ADC_Init+0x204>
 80024da:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80024e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7e5b      	ldrb	r3, [r3, #25]
 80024f6:	035b      	lsls	r3, r3, #13
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024fc:	2a01      	cmp	r2, #1
 80024fe:	d002      	beq.n	8002506 <HAL_ADC_Init+0x22e>
 8002500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002504:	e000      	b.n	8002508 <HAL_ADC_Init+0x230>
 8002506:	2200      	movs	r2, #0
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4313      	orrs	r3, r2
 8002516:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002518:	4313      	orrs	r3, r2
 800251a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d11b      	bne.n	800255e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7e5b      	ldrb	r3, [r3, #25]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	3b01      	subs	r3, #1
 8002534:	045a      	lsls	r2, r3, #17
 8002536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002538:	4313      	orrs	r3, r2
 800253a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253e:	663b      	str	r3, [r7, #96]	; 0x60
 8002540:	e00d      	b.n	800255e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002562:	2b01      	cmp	r3, #1
 8002564:	d054      	beq.n	8002610 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <HAL_ADC_Init+0x31c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_ADC_Init+0x2a2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <HAL_ADC_Init+0x320>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d140      	bne.n	80025fc <HAL_ADC_Init+0x324>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8002582:	d02a      	beq.n	80025da <HAL_ADC_Init+0x302>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258c:	d022      	beq.n	80025d4 <HAL_ADC_Init+0x2fc>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8002596:	d01a      	beq.n	80025ce <HAL_ADC_Init+0x2f6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80025a0:	d012      	beq.n	80025c8 <HAL_ADC_Init+0x2f0>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80025aa:	d00a      	beq.n	80025c2 <HAL_ADC_Init+0x2ea>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80025b4:	d002      	beq.n	80025bc <HAL_ADC_Init+0x2e4>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	e023      	b.n	8002604 <HAL_ADC_Init+0x32c>
 80025bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025c0:	e020      	b.n	8002604 <HAL_ADC_Init+0x32c>
 80025c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80025c6:	e01d      	b.n	8002604 <HAL_ADC_Init+0x32c>
 80025c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025cc:	e01a      	b.n	8002604 <HAL_ADC_Init+0x32c>
 80025ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d2:	e017      	b.n	8002604 <HAL_ADC_Init+0x32c>
 80025d4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80025d8:	e014      	b.n	8002604 <HAL_ADC_Init+0x32c>
 80025da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80025de:	e011      	b.n	8002604 <HAL_ADC_Init+0x32c>
 80025e0:	20000000 	.word	0x20000000
 80025e4:	431bde83 	.word	0x431bde83
 80025e8:	50000100 	.word	0x50000100
 80025ec:	50000300 	.word	0x50000300
 80025f0:	50000700 	.word	0x50000700
 80025f4:	50000400 	.word	0x50000400
 80025f8:	50000500 	.word	0x50000500
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002608:	4313      	orrs	r3, r2
 800260a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800260c:	4313      	orrs	r3, r2
 800260e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b00      	cmp	r3, #0
 800261c:	d114      	bne.n	8002648 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	7e1b      	ldrb	r3, [r3, #24]
 8002636:	039a      	lsls	r2, r3, #14
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4313      	orrs	r3, r2
 8002642:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002644:	4313      	orrs	r3, r2
 8002646:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <HAL_ADC_Init+0x3f0>)
 8002650:	4013      	ands	r3, r2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002658:	430b      	orrs	r3, r1
 800265a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10c      	bne.n	800267e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	f023 010f 	bic.w	r1, r3, #15
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	631a      	str	r2, [r3, #48]	; 0x30
 800267c:	e007      	b.n	800268e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 020f 	bic.w	r2, r2, #15
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f023 0303 	bic.w	r3, r3, #3
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
 80026a4:	e00a      	b.n	80026bc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f023 0312 	bic.w	r3, r3, #18
 80026ae:	f043 0210 	orr.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80026bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3768      	adds	r7, #104	; 0x68
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	fff0c007 	.word	0xfff0c007

080026cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b086      	sub	sp, #24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 80f7 	bne.w	80028da <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_Start_DMA+0x2e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0f2      	b.n	80028e0 <HAL_ADC_Start_DMA+0x214>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270a:	d004      	beq.n	8002716 <HAL_ADC_Start_DMA+0x4a>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a75      	ldr	r2, [pc, #468]	; (80028e8 <HAL_ADC_Start_DMA+0x21c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d109      	bne.n	800272a <HAL_ADC_Start_DMA+0x5e>
 8002716:	4b75      	ldr	r3, [pc, #468]	; (80028ec <HAL_ADC_Start_DMA+0x220>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf0c      	ite	eq
 8002722:	2301      	moveq	r3, #1
 8002724:	2300      	movne	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	e008      	b.n	800273c <HAL_ADC_Start_DMA+0x70>
 800272a:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_ADC_Start_DMA+0x224>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2b00      	cmp	r3, #0
 8002734:	bf0c      	ite	eq
 8002736:	2301      	moveq	r3, #1
 8002738:	2300      	movne	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80c5 	beq.w	80028cc <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f001 f890 	bl	8003868 <ADC_Enable>
 8002748:	4603      	mov	r3, r0
 800274a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b00      	cmp	r3, #0
 8002750:	f040 80b7 	bne.w	80028c2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002770:	d004      	beq.n	800277c <HAL_ADC_Start_DMA+0xb0>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a5c      	ldr	r2, [pc, #368]	; (80028e8 <HAL_ADC_Start_DMA+0x21c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d106      	bne.n	800278a <HAL_ADC_Start_DMA+0xbe>
 800277c:	4b5b      	ldr	r3, [pc, #364]	; (80028ec <HAL_ADC_Start_DMA+0x220>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2b00      	cmp	r3, #0
 8002786:	d010      	beq.n	80027aa <HAL_ADC_Start_DMA+0xde>
 8002788:	e005      	b.n	8002796 <HAL_ADC_Start_DMA+0xca>
 800278a:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_ADC_Start_DMA+0x224>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <HAL_ADC_Start_DMA+0xde>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800279e:	d004      	beq.n	80027aa <HAL_ADC_Start_DMA+0xde>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a53      	ldr	r2, [pc, #332]	; (80028f4 <HAL_ADC_Start_DMA+0x228>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d115      	bne.n	80027d6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d036      	beq.n	8002832 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80027d4:	e02d      	b.n	8002832 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027ea:	d004      	beq.n	80027f6 <HAL_ADC_Start_DMA+0x12a>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a3d      	ldr	r2, [pc, #244]	; (80028e8 <HAL_ADC_Start_DMA+0x21c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10a      	bne.n	800280c <HAL_ADC_Start_DMA+0x140>
 80027f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	bf14      	ite	ne
 8002804:	2301      	movne	r3, #1
 8002806:	2300      	moveq	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e008      	b.n	800281e <HAL_ADC_Start_DMA+0x152>
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <HAL_ADC_Start_DMA+0x228>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf14      	ite	ne
 8002818:	2301      	movne	r3, #1
 800281a:	2300      	moveq	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d007      	beq.n	8002832 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800282a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d106      	bne.n	800284e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	f023 0206 	bic.w	r2, r3, #6
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	645a      	str	r2, [r3, #68]	; 0x44
 800284c:	e002      	b.n	8002854 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	4a25      	ldr	r2, [pc, #148]	; (80028f8 <HAL_ADC_Start_DMA+0x22c>)
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	4a24      	ldr	r2, [pc, #144]	; (80028fc <HAL_ADC_Start_DMA+0x230>)
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	4a23      	ldr	r2, [pc, #140]	; (8002900 <HAL_ADC_Start_DMA+0x234>)
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	221c      	movs	r2, #28
 800287a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0210 	orr.w	r2, r2, #16
 800288a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3340      	adds	r3, #64	; 0x40
 80028a6:	4619      	mov	r1, r3
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f001 fab4 	bl	8003e18 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0204 	orr.w	r2, r2, #4
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	e00d      	b.n	80028de <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028ca:	e008      	b.n	80028de <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80028d8:	e001      	b.n	80028de <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028da:	2302      	movs	r3, #2
 80028dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028de:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	50000100 	.word	0x50000100
 80028ec:	50000300 	.word	0x50000300
 80028f0:	50000700 	.word	0x50000700
 80028f4:	50000400 	.word	0x50000400
 80028f8:	0800379d 	.word	0x0800379d
 80028fc:	08003817 	.word	0x08003817
 8002900:	08003833 	.word	0x08003833

08002904 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_ADC_Stop_DMA+0x1a>
 800291a:	2302      	movs	r3, #2
 800291c:	e050      	b.n	80029c0 <HAL_ADC_Stop_DMA+0xbc>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002926:	216c      	movs	r1, #108	; 0x6c
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f001 f867 	bl	80039fc <ADC_ConversionStop>
 800292e:	4603      	mov	r3, r0
 8002930:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d13e      	bne.n	80029b6 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0201 	bic.w	r2, r2, #1
 8002946:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002950:	2b02      	cmp	r3, #2
 8002952:	d10f      	bne.n	8002974 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fabc 	bl	8003ed6 <HAL_DMA_Abort>
 800295e:	4603      	mov	r3, r0
 8002960:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0210 	bic.w	r2, r2, #16
 8002982:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 ffd0 	bl	8003930 <ADC_Disable>
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e002      	b.n	800299c <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 ffca 	bl	8003930 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	f043 0201 	orr.w	r2, r3, #1
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f003 0304 	and.w	r3, r3, #4
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <HAL_ADC_IRQHandler+0x38>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80bc 	beq.w	8002b84 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 80b6 	beq.w	8002b84 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a38:	d004      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x7c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a90      	ldr	r2, [pc, #576]	; (8002c80 <HAL_ADC_IRQHandler+0x2b8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d106      	bne.n	8002a52 <HAL_ADC_IRQHandler+0x8a>
 8002a44:	4b8f      	ldr	r3, [pc, #572]	; (8002c84 <HAL_ADC_IRQHandler+0x2bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d03e      	beq.n	8002ace <HAL_ADC_IRQHandler+0x106>
 8002a50:	e005      	b.n	8002a5e <HAL_ADC_IRQHandler+0x96>
 8002a52:	4b8d      	ldr	r3, [pc, #564]	; (8002c88 <HAL_ADC_IRQHandler+0x2c0>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d037      	beq.n	8002ace <HAL_ADC_IRQHandler+0x106>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_IRQHandler+0xaa>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a84      	ldr	r2, [pc, #528]	; (8002c80 <HAL_ADC_IRQHandler+0x2b8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d106      	bne.n	8002a80 <HAL_ADC_IRQHandler+0xb8>
 8002a72:	4b84      	ldr	r3, [pc, #528]	; (8002c84 <HAL_ADC_IRQHandler+0x2bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d027      	beq.n	8002ace <HAL_ADC_IRQHandler+0x106>
 8002a7e:	e005      	b.n	8002a8c <HAL_ADC_IRQHandler+0xc4>
 8002a80:	4b81      	ldr	r3, [pc, #516]	; (8002c88 <HAL_ADC_IRQHandler+0x2c0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	2b05      	cmp	r3, #5
 8002a8a:	d020      	beq.n	8002ace <HAL_ADC_IRQHandler+0x106>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a94:	d004      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0xd8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a79      	ldr	r2, [pc, #484]	; (8002c80 <HAL_ADC_IRQHandler+0x2b8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d106      	bne.n	8002aae <HAL_ADC_IRQHandler+0xe6>
 8002aa0:	4b78      	ldr	r3, [pc, #480]	; (8002c84 <HAL_ADC_IRQHandler+0x2bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d010      	beq.n	8002ace <HAL_ADC_IRQHandler+0x106>
 8002aac:	e005      	b.n	8002aba <HAL_ADC_IRQHandler+0xf2>
 8002aae:	4b76      	ldr	r3, [pc, #472]	; (8002c88 <HAL_ADC_IRQHandler+0x2c0>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2b09      	cmp	r3, #9
 8002ab8:	d009      	beq.n	8002ace <HAL_ADC_IRQHandler+0x106>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ac2:	d004      	beq.n	8002ace <HAL_ADC_IRQHandler+0x106>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a70      	ldr	r2, [pc, #448]	; (8002c8c <HAL_ADC_IRQHandler+0x2c4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d104      	bne.n	8002ad8 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	e00f      	b.n	8002af8 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae0:	d004      	beq.n	8002aec <HAL_ADC_IRQHandler+0x124>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a66      	ldr	r2, [pc, #408]	; (8002c80 <HAL_ADC_IRQHandler+0x2b8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d102      	bne.n	8002af2 <HAL_ADC_IRQHandler+0x12a>
 8002aec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002af0:	e000      	b.n	8002af4 <HAL_ADC_IRQHandler+0x12c>
 8002af2:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_ADC_IRQHandler+0x2c4>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d137      	bne.n	8002b76 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d132      	bne.n	8002b76 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02d      	beq.n	8002b76 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11a      	bne.n	8002b5e <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 020c 	bic.w	r2, r2, #12
 8002b36:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d112      	bne.n	8002b76 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5c:	e00b      	b.n	8002b76 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f043 0210 	orr.w	r2, r3, #16
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6e:	f043 0201 	orr.w	r2, r3, #1
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fe44 	bl	8001804 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	220c      	movs	r2, #12
 8002b82:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x1d0>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10b      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8138 	beq.w	8002e14 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 8132 	beq.w	8002e14 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc4:	d004      	beq.n	8002bd0 <HAL_ADC_IRQHandler+0x208>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2d      	ldr	r2, [pc, #180]	; (8002c80 <HAL_ADC_IRQHandler+0x2b8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d106      	bne.n	8002bde <HAL_ADC_IRQHandler+0x216>
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_ADC_IRQHandler+0x2bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d03e      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x292>
 8002bdc:	e005      	b.n	8002bea <HAL_ADC_IRQHandler+0x222>
 8002bde:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <HAL_ADC_IRQHandler+0x2c0>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d037      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x292>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bf2:	d004      	beq.n	8002bfe <HAL_ADC_IRQHandler+0x236>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a21      	ldr	r2, [pc, #132]	; (8002c80 <HAL_ADC_IRQHandler+0x2b8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d106      	bne.n	8002c0c <HAL_ADC_IRQHandler+0x244>
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <HAL_ADC_IRQHandler+0x2bc>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d027      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x292>
 8002c0a:	e005      	b.n	8002c18 <HAL_ADC_IRQHandler+0x250>
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <HAL_ADC_IRQHandler+0x2c0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d020      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x292>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c20:	d004      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x264>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <HAL_ADC_IRQHandler+0x2b8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d106      	bne.n	8002c3a <HAL_ADC_IRQHandler+0x272>
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <HAL_ADC_IRQHandler+0x2bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	d010      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x292>
 8002c38:	e005      	b.n	8002c46 <HAL_ADC_IRQHandler+0x27e>
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_ADC_IRQHandler+0x2c0>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 031f 	and.w	r3, r3, #31
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d009      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x292>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c4e:	d004      	beq.n	8002c5a <HAL_ADC_IRQHandler+0x292>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <HAL_ADC_IRQHandler+0x2c4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d104      	bne.n	8002c64 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	e018      	b.n	8002c96 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c6c:	d004      	beq.n	8002c78 <HAL_ADC_IRQHandler+0x2b0>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a03      	ldr	r2, [pc, #12]	; (8002c80 <HAL_ADC_IRQHandler+0x2b8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d10b      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x2c8>
 8002c78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c7c:	e009      	b.n	8002c92 <HAL_ADC_IRQHandler+0x2ca>
 8002c7e:	bf00      	nop
 8002c80:	50000100 	.word	0x50000100
 8002c84:	50000300 	.word	0x50000300
 8002c88:	50000700 	.word	0x50000700
 8002c8c:	50000400 	.word	0x50000400
 8002c90:	4b92      	ldr	r3, [pc, #584]	; (8002edc <HAL_ADC_IRQHandler+0x514>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f040 80b0 	bne.w	8002e06 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f040 80a3 	bne.w	8002e06 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 809d 	bne.w	8002e06 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8097 	beq.w	8002e06 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ce0:	d004      	beq.n	8002cec <HAL_ADC_IRQHandler+0x324>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a7e      	ldr	r2, [pc, #504]	; (8002ee0 <HAL_ADC_IRQHandler+0x518>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d106      	bne.n	8002cfa <HAL_ADC_IRQHandler+0x332>
 8002cec:	4b7d      	ldr	r3, [pc, #500]	; (8002ee4 <HAL_ADC_IRQHandler+0x51c>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d03e      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3ae>
 8002cf8:	e005      	b.n	8002d06 <HAL_ADC_IRQHandler+0x33e>
 8002cfa:	4b7b      	ldr	r3, [pc, #492]	; (8002ee8 <HAL_ADC_IRQHandler+0x520>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 031f 	and.w	r3, r3, #31
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d037      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3ae>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0e:	d004      	beq.n	8002d1a <HAL_ADC_IRQHandler+0x352>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a72      	ldr	r2, [pc, #456]	; (8002ee0 <HAL_ADC_IRQHandler+0x518>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d106      	bne.n	8002d28 <HAL_ADC_IRQHandler+0x360>
 8002d1a:	4b72      	ldr	r3, [pc, #456]	; (8002ee4 <HAL_ADC_IRQHandler+0x51c>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d027      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3ae>
 8002d26:	e005      	b.n	8002d34 <HAL_ADC_IRQHandler+0x36c>
 8002d28:	4b6f      	ldr	r3, [pc, #444]	; (8002ee8 <HAL_ADC_IRQHandler+0x520>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 031f 	and.w	r3, r3, #31
 8002d30:	2b06      	cmp	r3, #6
 8002d32:	d020      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3ae>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d3c:	d004      	beq.n	8002d48 <HAL_ADC_IRQHandler+0x380>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a67      	ldr	r2, [pc, #412]	; (8002ee0 <HAL_ADC_IRQHandler+0x518>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d106      	bne.n	8002d56 <HAL_ADC_IRQHandler+0x38e>
 8002d48:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <HAL_ADC_IRQHandler+0x51c>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2b07      	cmp	r3, #7
 8002d52:	d010      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3ae>
 8002d54:	e005      	b.n	8002d62 <HAL_ADC_IRQHandler+0x39a>
 8002d56:	4b64      	ldr	r3, [pc, #400]	; (8002ee8 <HAL_ADC_IRQHandler+0x520>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2b07      	cmp	r3, #7
 8002d60:	d009      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3ae>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x3ae>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a5a      	ldr	r2, [pc, #360]	; (8002edc <HAL_ADC_IRQHandler+0x514>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d104      	bne.n	8002d80 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e00f      	b.n	8002da0 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d88:	d004      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x3cc>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a54      	ldr	r2, [pc, #336]	; (8002ee0 <HAL_ADC_IRQHandler+0x518>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d102      	bne.n	8002d9a <HAL_ADC_IRQHandler+0x3d2>
 8002d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d98:	e000      	b.n	8002d9c <HAL_ADC_IRQHandler+0x3d4>
 8002d9a:	4b50      	ldr	r3, [pc, #320]	; (8002edc <HAL_ADC_IRQHandler+0x514>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d12d      	bne.n	8002e06 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d11a      	bne.n	8002dee <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dc6:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d112      	bne.n	8002e06 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0201 	orr.w	r2, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40
 8002dec:	e00b      	b.n	8002e06 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8c4 	bl	8002f94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2260      	movs	r2, #96	; 0x60
 8002e12:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d011      	beq.n	8002e42 <HAL_ADC_IRQHandler+0x47a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00c      	beq.n	8002e42 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff fa3b 	bl	80022b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2280      	movs	r2, #128	; 0x80
 8002e40:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d012      	beq.n	8002e72 <HAL_ADC_IRQHandler+0x4aa>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8aa 	bl	8002fbc <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e70:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <HAL_ADC_IRQHandler+0x4da>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f89c 	bl	8002fd0 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ea0:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d04f      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x584>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d04a      	beq.n	8002f4c <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	e02d      	b.n	8002f20 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ecc:	d004      	beq.n	8002ed8 <HAL_ADC_IRQHandler+0x510>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a03      	ldr	r2, [pc, #12]	; (8002ee0 <HAL_ADC_IRQHandler+0x518>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d109      	bne.n	8002eec <HAL_ADC_IRQHandler+0x524>
 8002ed8:	4b02      	ldr	r3, [pc, #8]	; (8002ee4 <HAL_ADC_IRQHandler+0x51c>)
 8002eda:	e008      	b.n	8002eee <HAL_ADC_IRQHandler+0x526>
 8002edc:	50000400 	.word	0x50000400
 8002ee0:	50000100 	.word	0x50000100
 8002ee4:	50000300 	.word	0x50000300
 8002ee8:	50000700 	.word	0x50000700
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <HAL_ADC_IRQHandler+0x5c8>)
 8002eee:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d109      	bne.n	8002f10 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d10a      	bne.n	8002f20 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	e007      	b.n	8002f20 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d10e      	bne.n	8002f44 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f043 0202 	orr.w	r2, r3, #2
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff f9c0 	bl	80022c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d018      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x5c0>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f043 0208 	orr.w	r2, r3, #8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f80:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f810 	bl	8002fa8 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8002f88:	bf00      	nop
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	50000700 	.word	0x50000700

08002f94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b09b      	sub	sp, #108	; 0x6c
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x22>
 8003002:	2302      	movs	r3, #2
 8003004:	e2c8      	b.n	8003598 <HAL_ADC_ConfigChannel+0x5b4>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f040 82ac 	bne.w	8003576 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b04      	cmp	r3, #4
 8003024:	d81c      	bhi.n	8003060 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	461a      	mov	r2, r3
 800303a:	231f      	movs	r3, #31
 800303c:	4093      	lsls	r3, r2
 800303e:	43db      	mvns	r3, r3
 8003040:	4019      	ands	r1, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa00 f203 	lsl.w	r2, r0, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
 800305e:	e063      	b.n	8003128 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b09      	cmp	r3, #9
 8003066:	d81e      	bhi.n	80030a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	3b1e      	subs	r3, #30
 800307c:	221f      	movs	r2, #31
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	4019      	ands	r1, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	4413      	add	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	3b1e      	subs	r3, #30
 8003098:	fa00 f203 	lsl.w	r2, r0, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	635a      	str	r2, [r3, #52]	; 0x34
 80030a4:	e040      	b.n	8003128 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b0e      	cmp	r3, #14
 80030ac:	d81e      	bhi.n	80030ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	3b3c      	subs	r3, #60	; 0x3c
 80030c2:	221f      	movs	r2, #31
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	4019      	ands	r1, r3
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	3b3c      	subs	r3, #60	; 0x3c
 80030de:	fa00 f203 	lsl.w	r2, r0, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38
 80030ea:	e01d      	b.n	8003128 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	3b5a      	subs	r3, #90	; 0x5a
 8003100:	221f      	movs	r2, #31
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	4019      	ands	r1, r3
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	3b5a      	subs	r3, #90	; 0x5a
 800311c:	fa00 f203 	lsl.w	r2, r0, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b00      	cmp	r3, #0
 8003134:	f040 80e5 	bne.w	8003302 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b09      	cmp	r3, #9
 800313e:	d91c      	bls.n	800317a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6999      	ldr	r1, [r3, #24]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	3b1e      	subs	r3, #30
 8003152:	2207      	movs	r2, #7
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	4019      	ands	r1, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6898      	ldr	r0, [r3, #8]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	3b1e      	subs	r3, #30
 800316c:	fa00 f203 	lsl.w	r2, r0, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	619a      	str	r2, [r3, #24]
 8003178:	e019      	b.n	80031ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6959      	ldr	r1, [r3, #20]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	2207      	movs	r2, #7
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	4019      	ands	r1, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	6898      	ldr	r0, [r3, #8]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	fa00 f203 	lsl.w	r2, r0, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	08db      	lsrs	r3, r3, #3
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d84f      	bhi.n	8003270 <HAL_ADC_ConfigChannel+0x28c>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	0800320b 	.word	0x0800320b
 80031e0:	0800322d 	.word	0x0800322d
 80031e4:	0800324f 	.word	0x0800324f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031ee:	4b99      	ldr	r3, [pc, #612]	; (8003454 <HAL_ADC_ConfigChannel+0x470>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	0691      	lsls	r1, r2, #26
 80031f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031fa:	430a      	orrs	r2, r1
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003206:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003208:	e07b      	b.n	8003302 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003210:	4b90      	ldr	r3, [pc, #576]	; (8003454 <HAL_ADC_ConfigChannel+0x470>)
 8003212:	4013      	ands	r3, r2
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	0691      	lsls	r1, r2, #26
 800321a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800321c:	430a      	orrs	r2, r1
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003228:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800322a:	e06a      	b.n	8003302 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003232:	4b88      	ldr	r3, [pc, #544]	; (8003454 <HAL_ADC_ConfigChannel+0x470>)
 8003234:	4013      	ands	r3, r2
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	0691      	lsls	r1, r2, #26
 800323c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800323e:	430a      	orrs	r2, r1
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800324a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800324c:	e059      	b.n	8003302 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003254:	4b7f      	ldr	r3, [pc, #508]	; (8003454 <HAL_ADC_ConfigChannel+0x470>)
 8003256:	4013      	ands	r3, r2
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	6812      	ldr	r2, [r2, #0]
 800325c:	0691      	lsls	r1, r2, #26
 800325e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003260:	430a      	orrs	r2, r1
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800326c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800326e:	e048      	b.n	8003302 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	069b      	lsls	r3, r3, #26
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003292:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800329a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	069b      	lsls	r3, r3, #26
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d107      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	069b      	lsls	r3, r3, #26
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d107      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	069b      	lsls	r3, r3, #26
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003300:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b01      	cmp	r3, #1
 800330e:	d108      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x33e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b01      	cmp	r3, #1
 800331c:	d101      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x33e>
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_ADC_ConfigChannel+0x340>
 8003322:	2300      	movs	r3, #0
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 8131 	bne.w	800358c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d00f      	beq.n	8003352 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2201      	movs	r2, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43da      	mvns	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	400a      	ands	r2, r1
 800334c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003350:	e049      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2201      	movs	r2, #1
 8003360:	409a      	lsls	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2b09      	cmp	r3, #9
 8003372:	d91c      	bls.n	80033ae <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4413      	add	r3, r2
 8003384:	3b1b      	subs	r3, #27
 8003386:	2207      	movs	r2, #7
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	4019      	ands	r1, r3
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	6898      	ldr	r0, [r3, #8]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	3b1b      	subs	r3, #27
 80033a0:	fa00 f203 	lsl.w	r2, r0, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	619a      	str	r2, [r3, #24]
 80033ac:	e01b      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6959      	ldr	r1, [r3, #20]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	2207      	movs	r2, #7
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	4019      	ands	r1, r3
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6898      	ldr	r0, [r3, #8]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	fa00 f203 	lsl.w	r2, r0, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ee:	d004      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x416>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a18      	ldr	r2, [pc, #96]	; (8003458 <HAL_ADC_ConfigChannel+0x474>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x41a>
 80033fa:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_ADC_ConfigChannel+0x478>)
 80033fc:	e000      	b.n	8003400 <HAL_ADC_ConfigChannel+0x41c>
 80033fe:	4b18      	ldr	r3, [pc, #96]	; (8003460 <HAL_ADC_ConfigChannel+0x47c>)
 8003400:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2b10      	cmp	r3, #16
 8003408:	d105      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800340a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003412:	2b00      	cmp	r3, #0
 8003414:	d015      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800341a:	2b11      	cmp	r3, #17
 800341c:	d105      	bne.n	800342a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800342e:	2b12      	cmp	r3, #18
 8003430:	f040 80ac 	bne.w	800358c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800343c:	2b00      	cmp	r3, #0
 800343e:	f040 80a5 	bne.w	800358c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800344a:	d10b      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x480>
 800344c:	4b02      	ldr	r3, [pc, #8]	; (8003458 <HAL_ADC_ConfigChannel+0x474>)
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	e023      	b.n	800349a <HAL_ADC_ConfigChannel+0x4b6>
 8003452:	bf00      	nop
 8003454:	83fff000 	.word	0x83fff000
 8003458:	50000100 	.word	0x50000100
 800345c:	50000300 	.word	0x50000300
 8003460:	50000700 	.word	0x50000700
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a4e      	ldr	r2, [pc, #312]	; (80035a4 <HAL_ADC_ConfigChannel+0x5c0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d103      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x492>
 800346e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e011      	b.n	800349a <HAL_ADC_ConfigChannel+0x4b6>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <HAL_ADC_ConfigChannel+0x5c4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d102      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x4a2>
 8003480:	4b4a      	ldr	r3, [pc, #296]	; (80035ac <HAL_ADC_ConfigChannel+0x5c8>)
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	e009      	b.n	800349a <HAL_ADC_ConfigChannel+0x4b6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a48      	ldr	r2, [pc, #288]	; (80035ac <HAL_ADC_ConfigChannel+0x5c8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d102      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x4b2>
 8003490:	4b45      	ldr	r3, [pc, #276]	; (80035a8 <HAL_ADC_ConfigChannel+0x5c4>)
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e001      	b.n	800349a <HAL_ADC_ConfigChannel+0x4b6>
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d108      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x4d6>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x4d6>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_ADC_ConfigChannel+0x4d8>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d150      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034c0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d107      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x4fe>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_ConfigChannel+0x4fe>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x500>
 80034e2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d13c      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d11d      	bne.n	800352c <HAL_ADC_ConfigChannel+0x548>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f8:	d118      	bne.n	800352c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80034fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003504:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003506:	4b2a      	ldr	r3, [pc, #168]	; (80035b0 <HAL_ADC_ConfigChannel+0x5cc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <HAL_ADC_ConfigChannel+0x5d0>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	0c9a      	lsrs	r2, r3, #18
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800351c:	e002      	b.n	8003524 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3b01      	subs	r3, #1
 8003522:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f9      	bne.n	800351e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800352a:	e02e      	b.n	800358a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b11      	cmp	r3, #17
 8003532:	d10b      	bne.n	800354c <HAL_ADC_ConfigChannel+0x568>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800353c:	d106      	bne.n	800354c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800353e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003548:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800354a:	e01e      	b.n	800358a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b12      	cmp	r3, #18
 8003552:	d11a      	bne.n	800358a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800355c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800355e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003560:	e013      	b.n	800358a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003574:	e00a      	b.n	800358c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0220 	orr.w	r2, r3, #32
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003588:	e000      	b.n	800358c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800358a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003594:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003598:	4618      	mov	r0, r3
 800359a:	376c      	adds	r7, #108	; 0x6c
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	50000100 	.word	0x50000100
 80035a8:	50000400 	.word	0x50000400
 80035ac:	50000500 	.word	0x50000500
 80035b0:	20000000 	.word	0x20000000
 80035b4:	431bde83 	.word	0x431bde83

080035b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b099      	sub	sp, #100	; 0x64
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d0:	d102      	bne.n	80035d8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80035d2:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	e01a      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6a      	ldr	r2, [pc, #424]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d103      	bne.n	80035ea <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80035e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	e011      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a67      	ldr	r2, [pc, #412]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d102      	bne.n	80035fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	e009      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a64      	ldr	r2, [pc, #400]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d102      	bne.n	800360a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003604:	4b61      	ldr	r3, [pc, #388]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	e001      	b.n	800360e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0b0      	b.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003622:	2302      	movs	r3, #2
 8003624:	e0a9      	b.n	800377a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	f040 808d 	bne.w	8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	f040 8086 	bne.w	8003758 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003654:	d004      	beq.n	8003660 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a4b      	ldr	r2, [pc, #300]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d101      	bne.n	8003664 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003660:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003662:	e000      	b.n	8003666 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003664:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003666:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d040      	beq.n	80036f2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6859      	ldr	r1, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003682:	035b      	lsls	r3, r3, #13
 8003684:	430b      	orrs	r3, r1
 8003686:	431a      	orrs	r2, r3
 8003688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800368a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d108      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80036ac:	2300      	movs	r3, #0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d15c      	bne.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d107      	bne.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80036ce:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d14b      	bne.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80036d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036dc:	f023 030f 	bic.w	r3, r3, #15
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	6811      	ldr	r1, [r2, #0]
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	6892      	ldr	r2, [r2, #8]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	431a      	orrs	r2, r3
 80036ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ee:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f0:	e03c      	b.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036fc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d108      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800371e:	2300      	movs	r3, #0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d123      	bne.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d107      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003740:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003742:	2b00      	cmp	r3, #0
 8003744:	d112      	bne.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800374e:	f023 030f 	bic.w	r3, r3, #15
 8003752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003754:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003756:	e009      	b.n	800376c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800376a:	e000      	b.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800376c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800377a:	4618      	mov	r0, r3
 800377c:	3764      	adds	r7, #100	; 0x64
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	50000100 	.word	0x50000100
 800378c:	50000400 	.word	0x50000400
 8003790:	50000500 	.word	0x50000500
 8003794:	50000300 	.word	0x50000300
 8003798:	50000700 	.word	0x50000700

0800379c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d126      	bne.n	8003804 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d115      	bne.n	80037fc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	f043 0201 	orr.w	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7fe f801 	bl	8001804 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003802:	e004      	b.n	800380e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	4798      	blx	r3
}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7fe fd39 	bl	800229c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800382a:	bf00      	nop
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003844:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	f043 0204 	orr.w	r2, r3, #4
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7fe fd33 	bl	80022c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b01      	cmp	r3, #1
 8003880:	d108      	bne.n	8003894 <ADC_Enable+0x2c>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <ADC_Enable+0x2c>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <ADC_Enable+0x2e>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d143      	bne.n	8003922 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b22      	ldr	r3, [pc, #136]	; (800392c <ADC_Enable+0xc4>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f043 0210 	orr.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e02f      	b.n	8003924 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80038d4:	f7fe fcb2 	bl	800223c <HAL_GetTick>
 80038d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038da:	e01b      	b.n	8003914 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038dc:	f7fe fcae 	bl	800223c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d914      	bls.n	8003914 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d00d      	beq.n	8003914 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f043 0210 	orr.w	r2, r3, #16
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e007      	b.n	8003924 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b01      	cmp	r3, #1
 8003920:	d1dc      	bne.n	80038dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	8000003f 	.word	0x8000003f

08003930 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003938:	2300      	movs	r3, #0
 800393a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b01      	cmp	r3, #1
 8003948:	d108      	bne.n	800395c <ADC_Disable+0x2c>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <ADC_Disable+0x2c>
 8003958:	2301      	movs	r3, #1
 800395a:	e000      	b.n	800395e <ADC_Disable+0x2e>
 800395c:	2300      	movs	r3, #0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d047      	beq.n	80039f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030d 	and.w	r3, r3, #13
 800396c:	2b01      	cmp	r3, #1
 800396e:	d10f      	bne.n	8003990 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0202 	orr.w	r2, r2, #2
 800397e:	609a      	str	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2203      	movs	r2, #3
 8003986:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003988:	f7fe fc58 	bl	800223c <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800398e:	e029      	b.n	80039e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f043 0210 	orr.w	r2, r3, #16
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e023      	b.n	80039f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039ac:	f7fe fc46 	bl	800223c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d914      	bls.n	80039e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d10d      	bne.n	80039e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f043 0210 	orr.w	r2, r3, #16
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	f043 0201 	orr.w	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e007      	b.n	80039f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d0dc      	beq.n	80039ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 030c 	and.w	r3, r3, #12
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 809b 	beq.w	8003b58 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a30:	d12a      	bne.n	8003a88 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d126      	bne.n	8003a88 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d122      	bne.n	8003a88 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003a42:	230c      	movs	r3, #12
 8003a44:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003a46:	e014      	b.n	8003a72 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4a46      	ldr	r2, [pc, #280]	; (8003b64 <ADC_ConversionStop+0x168>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d90d      	bls.n	8003a6c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f043 0210 	orr.w	r2, r3, #16
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a60:	f043 0201 	orr.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e076      	b.n	8003b5a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d1e3      	bne.n	8003a48 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2240      	movs	r2, #64	; 0x40
 8003a86:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b60      	cmp	r3, #96	; 0x60
 8003a8c:	d015      	beq.n	8003aba <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d10e      	bne.n	8003aba <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d107      	bne.n	8003aba <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f042 0210 	orr.w	r2, r2, #16
 8003ab8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b0c      	cmp	r3, #12
 8003abe:	d015      	beq.n	8003aec <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d10e      	bne.n	8003aec <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0220 	orr.w	r2, r2, #32
 8003aea:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b60      	cmp	r3, #96	; 0x60
 8003af0:	d005      	beq.n	8003afe <ADC_ConversionStop+0x102>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b6c      	cmp	r3, #108	; 0x6c
 8003af6:	d105      	bne.n	8003b04 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003af8:	230c      	movs	r3, #12
 8003afa:	617b      	str	r3, [r7, #20]
        break;
 8003afc:	e005      	b.n	8003b0a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003afe:	2308      	movs	r3, #8
 8003b00:	617b      	str	r3, [r7, #20]
        break;
 8003b02:	e002      	b.n	8003b0a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003b04:	2304      	movs	r3, #4
 8003b06:	617b      	str	r3, [r7, #20]
        break;
 8003b08:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003b0a:	f7fe fb97 	bl	800223c <HAL_GetTick>
 8003b0e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003b10:	e01b      	b.n	8003b4a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003b12:	f7fe fb93 	bl	800223c <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b0b      	cmp	r3, #11
 8003b1e:	d914      	bls.n	8003b4a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00d      	beq.n	8003b4a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0210 	orr.w	r2, r3, #16
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e007      	b.n	8003b5a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1dc      	bne.n	8003b12 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	000993ff 	.word	0x000993ff

08003b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b84:	4013      	ands	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60d3      	str	r3, [r2, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	f003 0307 	and.w	r3, r3, #7
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db0b      	blt.n	8003bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	4907      	ldr	r1, [pc, #28]	; (8003c04 <__NVIC_EnableIRQ+0x38>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2001      	movs	r0, #1
 8003bee:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000e100 	.word	0xe000e100

08003c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	6039      	str	r1, [r7, #0]
 8003c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	db0a      	blt.n	8003c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	490c      	ldr	r1, [pc, #48]	; (8003c54 <__NVIC_SetPriority+0x4c>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	0112      	lsls	r2, r2, #4
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c30:	e00a      	b.n	8003c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4908      	ldr	r1, [pc, #32]	; (8003c58 <__NVIC_SetPriority+0x50>)
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	0112      	lsls	r2, r2, #4
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	440b      	add	r3, r1
 8003c46:	761a      	strb	r2, [r3, #24]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000e100 	.word	0xe000e100
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f1c3 0307 	rsb	r3, r3, #7
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf28      	it	cs
 8003c7a:	2304      	movcs	r3, #4
 8003c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d902      	bls.n	8003c8c <NVIC_EncodePriority+0x30>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3b03      	subs	r3, #3
 8003c8a:	e000      	b.n	8003c8e <NVIC_EncodePriority+0x32>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c90:	f04f 32ff 	mov.w	r2, #4294967295
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	43d9      	mvns	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb4:	4313      	orrs	r3, r2
         );
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd4:	d301      	bcc.n	8003cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e00f      	b.n	8003cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <SysTick_Config+0x40>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ce2:	210f      	movs	r1, #15
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	f7ff ff8e 	bl	8003c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <SysTick_Config+0x40>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cf2:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <SysTick_Config+0x40>)
 8003cf4:	2207      	movs	r2, #7
 8003cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	e000e010 	.word	0xe000e010

08003d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff29 	bl	8003b68 <__NVIC_SetPriorityGrouping>
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	4603      	mov	r3, r0
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d30:	f7ff ff3e 	bl	8003bb0 <__NVIC_GetPriorityGrouping>
 8003d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f7ff ff8e 	bl	8003c5c <NVIC_EncodePriority>
 8003d40:	4602      	mov	r2, r0
 8003d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff5d 	bl	8003c08 <__NVIC_SetPriority>
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff31 	bl	8003bcc <__NVIC_EnableIRQ>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ffa2 	bl	8003cc4 <SysTick_Config>
 8003d80:	4603      	mov	r3, r0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e037      	b.n	8003e10 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003db6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003dba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f97a 	bl	80040ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}  
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
 8003e24:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d101      	bne.n	8003e38 <HAL_DMA_Start_IT+0x20>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e04a      	b.n	8003ece <HAL_DMA_Start_IT+0xb6>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d13a      	bne.n	8003ec0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f90d 	bl	800408e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 020e 	orr.w	r2, r2, #14
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e00f      	b.n	8003eae <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 020a 	orr.w	r2, r2, #10
 8003e9c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0204 	bic.w	r2, r2, #4
 8003eac:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	e005      	b.n	8003ecc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003ec8:	2302      	movs	r3, #2
 8003eca:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003ecc:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3718      	adds	r7, #24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d008      	beq.n	8003efa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2204      	movs	r2, #4
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e020      	b.n	8003f3c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 020e 	bic.w	r2, r2, #14
 8003f08:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0201 	bic.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f22:	2101      	movs	r1, #1
 8003f24:	fa01 f202 	lsl.w	r2, r1, r2
 8003f28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	2204      	movs	r2, #4
 8003f66:	409a      	lsls	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d024      	beq.n	8003fba <HAL_DMA_IRQHandler+0x72>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01f      	beq.n	8003fba <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d107      	bne.n	8003f98 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0204 	bic.w	r2, r2, #4
 8003f96:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d06a      	beq.n	8004086 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003fb8:	e065      	b.n	8004086 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d02c      	beq.n	8004024 <HAL_DMA_IRQHandler+0xdc>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d027      	beq.n	8004024 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 020a 	bic.w	r2, r2, #10
 8003ff0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	2102      	movs	r1, #2
 8004004:	fa01 f202 	lsl.w	r2, r1, r2
 8004008:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	2b00      	cmp	r3, #0
 8004018:	d035      	beq.n	8004086 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004022:	e030      	b.n	8004086 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	2208      	movs	r2, #8
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d028      	beq.n	8004086 <HAL_DMA_IRQHandler+0x13e>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d023      	beq.n	8004086 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 020e 	bic.w	r2, r2, #14
 800404c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	2101      	movs	r1, #1
 8004058:	fa01 f202 	lsl.w	r2, r1, r2
 800405c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
    }
  }
}  
 8004084:	e7ff      	b.n	8004086 <HAL_DMA_IRQHandler+0x13e>
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
 800409a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	2101      	movs	r1, #1
 80040a6:	fa01 f202 	lsl.w	r2, r1, r2
 80040aa:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b10      	cmp	r3, #16
 80040ba:	d108      	bne.n	80040ce <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040cc:	e007      	b.n	80040de <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	60da      	str	r2, [r3, #12]
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <DMA_CalcBaseAndBitshift+0x60>)
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d80f      	bhi.n	8004120 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <DMA_CalcBaseAndBitshift+0x64>)
 8004108:	4413      	add	r3, r2
 800410a:	4a12      	ldr	r2, [pc, #72]	; (8004154 <DMA_CalcBaseAndBitshift+0x68>)
 800410c:	fba2 2303 	umull	r2, r3, r2, r3
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	009a      	lsls	r2, r3, #2
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0f      	ldr	r2, [pc, #60]	; (8004158 <DMA_CalcBaseAndBitshift+0x6c>)
 800411c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800411e:	e00e      	b.n	800413e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <DMA_CalcBaseAndBitshift+0x70>)
 8004128:	4413      	add	r3, r2
 800412a:	4a0a      	ldr	r2, [pc, #40]	; (8004154 <DMA_CalcBaseAndBitshift+0x68>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	009a      	lsls	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a09      	ldr	r2, [pc, #36]	; (8004160 <DMA_CalcBaseAndBitshift+0x74>)
 800413c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40020407 	.word	0x40020407
 8004150:	bffdfff8 	.word	0xbffdfff8
 8004154:	cccccccd 	.word	0xcccccccd
 8004158:	40020000 	.word	0x40020000
 800415c:	bffdfbf8 	.word	0xbffdfbf8
 8004160:	40020400 	.word	0x40020400

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004172:	e160      	b.n	8004436 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	2101      	movs	r1, #1
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	fa01 f303 	lsl.w	r3, r1, r3
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8152 	beq.w	8004430 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b01      	cmp	r3, #1
 8004196:	d005      	beq.n	80041a4 <HAL_GPIO_Init+0x40>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d130      	bne.n	8004206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	2203      	movs	r2, #3
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	43db      	mvns	r3, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4013      	ands	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041da:	2201      	movs	r2, #1
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	091b      	lsrs	r3, r3, #4
 80041f0:	f003 0201 	and.w	r2, r3, #1
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b03      	cmp	r3, #3
 8004210:	d017      	beq.n	8004242 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2203      	movs	r2, #3
 800421e:	fa02 f303 	lsl.w	r3, r2, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d123      	bne.n	8004296 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	08da      	lsrs	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3208      	adds	r2, #8
 8004256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0307 	and.w	r3, r3, #7
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	220f      	movs	r2, #15
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43db      	mvns	r3, r3
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	691a      	ldr	r2, [r3, #16]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	08da      	lsrs	r2, r3, #3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	3208      	adds	r2, #8
 8004290:	6939      	ldr	r1, [r7, #16]
 8004292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	2203      	movs	r2, #3
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4013      	ands	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f003 0203 	and.w	r2, r3, #3
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	fa02 f303 	lsl.w	r3, r2, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 80ac 	beq.w	8004430 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d8:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <HAL_GPIO_Init+0x2f0>)
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	4a5d      	ldr	r2, [pc, #372]	; (8004454 <HAL_GPIO_Init+0x2f0>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6193      	str	r3, [r2, #24]
 80042e4:	4b5b      	ldr	r3, [pc, #364]	; (8004454 <HAL_GPIO_Init+0x2f0>)
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042f0:	4a59      	ldr	r2, [pc, #356]	; (8004458 <HAL_GPIO_Init+0x2f4>)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	089b      	lsrs	r3, r3, #2
 80042f6:	3302      	adds	r3, #2
 80042f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	220f      	movs	r2, #15
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800431a:	d025      	beq.n	8004368 <HAL_GPIO_Init+0x204>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a4f      	ldr	r2, [pc, #316]	; (800445c <HAL_GPIO_Init+0x2f8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d01f      	beq.n	8004364 <HAL_GPIO_Init+0x200>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a4e      	ldr	r2, [pc, #312]	; (8004460 <HAL_GPIO_Init+0x2fc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d019      	beq.n	8004360 <HAL_GPIO_Init+0x1fc>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a4d      	ldr	r2, [pc, #308]	; (8004464 <HAL_GPIO_Init+0x300>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <HAL_GPIO_Init+0x1f8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a4c      	ldr	r2, [pc, #304]	; (8004468 <HAL_GPIO_Init+0x304>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00d      	beq.n	8004358 <HAL_GPIO_Init+0x1f4>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a4b      	ldr	r2, [pc, #300]	; (800446c <HAL_GPIO_Init+0x308>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d007      	beq.n	8004354 <HAL_GPIO_Init+0x1f0>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a4a      	ldr	r2, [pc, #296]	; (8004470 <HAL_GPIO_Init+0x30c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d101      	bne.n	8004350 <HAL_GPIO_Init+0x1ec>
 800434c:	2306      	movs	r3, #6
 800434e:	e00c      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004350:	2307      	movs	r3, #7
 8004352:	e00a      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004354:	2305      	movs	r3, #5
 8004356:	e008      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004358:	2304      	movs	r3, #4
 800435a:	e006      	b.n	800436a <HAL_GPIO_Init+0x206>
 800435c:	2303      	movs	r3, #3
 800435e:	e004      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004360:	2302      	movs	r3, #2
 8004362:	e002      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_GPIO_Init+0x206>
 8004368:	2300      	movs	r3, #0
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	f002 0203 	and.w	r2, r2, #3
 8004370:	0092      	lsls	r2, r2, #2
 8004372:	4093      	lsls	r3, r2
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800437a:	4937      	ldr	r1, [pc, #220]	; (8004458 <HAL_GPIO_Init+0x2f4>)
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	3302      	adds	r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004388:	4b3a      	ldr	r3, [pc, #232]	; (8004474 <HAL_GPIO_Init+0x310>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	43db      	mvns	r3, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4013      	ands	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80043ac:	4a31      	ldr	r2, [pc, #196]	; (8004474 <HAL_GPIO_Init+0x310>)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043b2:	4b30      	ldr	r3, [pc, #192]	; (8004474 <HAL_GPIO_Init+0x310>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	43db      	mvns	r3, r3
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d003      	beq.n	80043d6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043d6:	4a27      	ldr	r2, [pc, #156]	; (8004474 <HAL_GPIO_Init+0x310>)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043dc:	4b25      	ldr	r3, [pc, #148]	; (8004474 <HAL_GPIO_Init+0x310>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	43db      	mvns	r3, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4013      	ands	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004400:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <HAL_GPIO_Init+0x310>)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_GPIO_Init+0x310>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	43db      	mvns	r3, r3
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4013      	ands	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_GPIO_Init+0x310>)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	3301      	adds	r3, #1
 8004434:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	f47f ae97 	bne.w	8004174 <HAL_GPIO_Init+0x10>
  }
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40021000 	.word	0x40021000
 8004458:	40010000 	.word	0x40010000
 800445c:	48000400 	.word	0x48000400
 8004460:	48000800 	.word	0x48000800
 8004464:	48000c00 	.word	0x48000c00
 8004468:	48001000 	.word	0x48001000
 800446c:	48001400 	.word	0x48001400
 8004470:	48001800 	.word	0x48001800
 8004474:	40010400 	.word	0x40010400

08004478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	887b      	ldrh	r3, [r7, #2]
 800448a:	4013      	ands	r3, r2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
 8004494:	e001      	b.n	800449a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800449a:	7bfb      	ldrb	r3, [r7, #15]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	807b      	strh	r3, [r7, #2]
 80044b4:	4613      	mov	r3, r2
 80044b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b8:	787b      	ldrb	r3, [r7, #1]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044c4:	e002      	b.n	80044cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044c6:	887a      	ldrh	r2, [r7, #2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044f4:	88fb      	ldrh	r3, [r7, #6]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fd f8ca 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 80044fc:	bf00      	nop
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40010400 	.word	0x40010400

08004508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e081      	b.n	800461e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fd fc98 	bl	8001e64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	; 0x24
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004558:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004568:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	e006      	b.n	8004590 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800458e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d104      	bne.n	80045a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69d9      	ldr	r1, [r3, #28]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1a      	ldr	r2, [r3, #32]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0201 	orr.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b20      	cmp	r3, #32
 800463a:	d138      	bne.n	80046ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004646:	2302      	movs	r3, #2
 8004648:	e032      	b.n	80046b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2224      	movs	r2, #36	; 0x24
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0201 	bic.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004678:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0201 	orr.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046ae:	2302      	movs	r3, #2
  }
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d139      	bne.n	8004746 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d101      	bne.n	80046e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046dc:	2302      	movs	r3, #2
 80046de:	e033      	b.n	8004748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2224      	movs	r2, #36	; 0x24
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0201 	bic.w	r2, r2, #1
 80046fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800470e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0201 	orr.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800475a:	af00      	add	r7, sp, #0
 800475c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004760:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004764:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800476a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	f001 b83a 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800477e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 816f 	beq.w	8004a6e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004790:	4bb5      	ldr	r3, [pc, #724]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f003 030c 	and.w	r3, r3, #12
 8004798:	2b04      	cmp	r3, #4
 800479a:	d00c      	beq.n	80047b6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800479c:	4bb2      	ldr	r3, [pc, #712]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d15c      	bne.n	8004862 <HAL_RCC_OscConfig+0x10e>
 80047a8:	4baf      	ldr	r3, [pc, #700]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d155      	bne.n	8004862 <HAL_RCC_OscConfig+0x10e>
 80047b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ba:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047ca:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <HAL_RCC_OscConfig+0x94>
 80047e2:	4ba1      	ldr	r3, [pc, #644]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	e015      	b.n	8004814 <HAL_RCC_OscConfig+0xc0>
 80047e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80047f4:	fa93 f3a3 	rbit	r3, r3
 80047f8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80047fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004800:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004804:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004810:	4b95      	ldr	r3, [pc, #596]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004818:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800481c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8004820:	fa92 f2a2 	rbit	r2, r2
 8004824:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004828:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800482c:	fab2 f282 	clz	r2, r2
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	f042 0220 	orr.w	r2, r2, #32
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	f002 021f 	and.w	r2, r2, #31
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f202 	lsl.w	r2, r1, r2
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8111 	beq.w	8004a6c <HAL_RCC_OscConfig+0x318>
 800484a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800484e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	f040 8108 	bne.w	8004a6c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	f000 bfc6 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004862:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004866:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004872:	d106      	bne.n	8004882 <HAL_RCC_OscConfig+0x12e>
 8004874:	4b7c      	ldr	r3, [pc, #496]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a7b      	ldr	r2, [pc, #492]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 800487a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e036      	b.n	80048f0 <HAL_RCC_OscConfig+0x19c>
 8004882:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004886:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10c      	bne.n	80048ac <HAL_RCC_OscConfig+0x158>
 8004892:	4b75      	ldr	r3, [pc, #468]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a74      	ldr	r2, [pc, #464]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 8004898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a71      	ldr	r2, [pc, #452]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e021      	b.n	80048f0 <HAL_RCC_OscConfig+0x19c>
 80048ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x184>
 80048be:	4b6a      	ldr	r3, [pc, #424]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a69      	ldr	r2, [pc, #420]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	4b67      	ldr	r3, [pc, #412]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a66      	ldr	r2, [pc, #408]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	e00b      	b.n	80048f0 <HAL_RCC_OscConfig+0x19c>
 80048d8:	4b63      	ldr	r3, [pc, #396]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a62      	ldr	r2, [pc, #392]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	4b60      	ldr	r3, [pc, #384]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a5f      	ldr	r2, [pc, #380]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 80048ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ee:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048f4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d059      	beq.n	80049b4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fd fc9c 	bl	800223c <HAL_GetTick>
 8004904:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800490a:	f7fd fc97 	bl	800223c <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d902      	bls.n	8004920 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	f000 bf67 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>
 8004920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004924:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004928:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800492c:	fa93 f3a3 	rbit	r3, r3
 8004930:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004934:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	b2db      	uxtb	r3, r3
 8004942:	f043 0301 	orr.w	r3, r3, #1
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d102      	bne.n	8004952 <HAL_RCC_OscConfig+0x1fe>
 800494c:	4b46      	ldr	r3, [pc, #280]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	e015      	b.n	800497e <HAL_RCC_OscConfig+0x22a>
 8004952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004956:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004966:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800496a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800496e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004982:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004986:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800498a:	fa92 f2a2 	rbit	r2, r2
 800498e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8004992:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004996:	fab2 f282 	clz	r2, r2
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	f042 0220 	orr.w	r2, r2, #32
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	f002 021f 	and.w	r2, r2, #31
 80049a6:	2101      	movs	r1, #1
 80049a8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ab      	beq.n	800490a <HAL_RCC_OscConfig+0x1b6>
 80049b2:	e05c      	b.n	8004a6e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd fc42 	bl	800223c <HAL_GetTick>
 80049b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049be:	f7fd fc3d 	bl	800223c <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d902      	bls.n	80049d4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	f000 bf0d 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>
 80049d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049d8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80049e0:	fa93 f3a3 	rbit	r3, r3
 80049e4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80049e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ec:	fab3 f383 	clz	r3, r3
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d102      	bne.n	8004a06 <HAL_RCC_OscConfig+0x2b2>
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	e015      	b.n	8004a32 <HAL_RCC_OscConfig+0x2de>
 8004a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8004a12:	fa93 f3a3 	rbit	r3, r3
 8004a16:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004a1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004a1e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004a22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004a26:	fa93 f3a3 	rbit	r3, r3
 8004a2a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <HAL_RCC_OscConfig+0x314>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a36:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004a3a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8004a3e:	fa92 f2a2 	rbit	r2, r2
 8004a42:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004a46:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a4a:	fab2 f282 	clz	r2, r2
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	f042 0220 	orr.w	r2, r2, #32
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	f002 021f 	and.w	r2, r2, #31
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1ab      	bne.n	80049be <HAL_RCC_OscConfig+0x26a>
 8004a66:	e002      	b.n	8004a6e <HAL_RCC_OscConfig+0x31a>
 8004a68:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 817f 	beq.w	8004d82 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a84:	4ba7      	ldr	r3, [pc, #668]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a90:	4ba4      	ldr	r3, [pc, #656]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d173      	bne.n	8004b84 <HAL_RCC_OscConfig+0x430>
 8004a9c:	4ba1      	ldr	r3, [pc, #644]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aa8:	d16c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x430>
 8004aaa:	2302      	movs	r3, #2
 8004aac:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004abc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ac0:	fab3 f383 	clz	r3, r3
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d102      	bne.n	8004ada <HAL_RCC_OscConfig+0x386>
 8004ad4:	4b93      	ldr	r3, [pc, #588]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	e013      	b.n	8004b02 <HAL_RCC_OscConfig+0x3ae>
 8004ada:	2302      	movs	r3, #2
 8004adc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ae0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004ae4:	fa93 f3a3 	rbit	r3, r3
 8004ae8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004aec:	2302      	movs	r3, #2
 8004aee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004af2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004afe:	4b89      	ldr	r3, [pc, #548]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2202      	movs	r2, #2
 8004b04:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004b08:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8004b0c:	fa92 f2a2 	rbit	r2, r2
 8004b10:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8004b14:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004b18:	fab2 f282 	clz	r2, r2
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	f042 0220 	orr.w	r2, r2, #32
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	f002 021f 	and.w	r2, r2, #31
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3f6>
 8004b34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b38:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d002      	beq.n	8004b4a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	f000 be52 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4a:	4b76      	ldr	r3, [pc, #472]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	21f8      	movs	r1, #248	; 0xf8
 8004b60:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b64:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004b68:	fa91 f1a1 	rbit	r1, r1
 8004b6c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004b70:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b74:	fab1 f181 	clz	r1, r1
 8004b78:	b2c9      	uxtb	r1, r1
 8004b7a:	408b      	lsls	r3, r1
 8004b7c:	4969      	ldr	r1, [pc, #420]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b82:	e0fe      	b.n	8004d82 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8088 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x552>
 8004b96:	2301      	movs	r3, #1
 8004b98:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004ba8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bac:	fab3 f383 	clz	r3, r3
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004bb6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fd fb3b 	bl	800223c <HAL_GetTick>
 8004bc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bca:	e00a      	b.n	8004be2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bcc:	f7fd fb36 	bl	800223c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d902      	bls.n	8004be2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	f000 be06 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>
 8004be2:	2302      	movs	r3, #2
 8004be4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004bec:	fa93 f3a3 	rbit	r3, r3
 8004bf0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004bf4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	fab3 f383 	clz	r3, r3
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	095b      	lsrs	r3, r3, #5
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d102      	bne.n	8004c12 <HAL_RCC_OscConfig+0x4be>
 8004c0c:	4b45      	ldr	r3, [pc, #276]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	e013      	b.n	8004c3a <HAL_RCC_OscConfig+0x4e6>
 8004c12:	2302      	movs	r3, #2
 8004c14:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c18:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004c1c:	fa93 f3a3 	rbit	r3, r3
 8004c20:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004c24:	2302      	movs	r3, #2
 8004c26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004c2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004c2e:	fa93 f3a3 	rbit	r3, r3
 8004c32:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004c36:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004c40:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004c44:	fa92 f2a2 	rbit	r2, r2
 8004c48:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004c4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004c50:	fab2 f282 	clz	r2, r2
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	f042 0220 	orr.w	r2, r2, #32
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	f002 021f 	and.w	r2, r2, #31
 8004c60:	2101      	movs	r1, #1
 8004c62:	fa01 f202 	lsl.w	r2, r1, r2
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0af      	beq.n	8004bcc <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b2d      	ldr	r3, [pc, #180]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	21f8      	movs	r1, #248	; 0xf8
 8004c82:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c86:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004c8a:	fa91 f1a1 	rbit	r1, r1
 8004c8e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004c92:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c96:	fab1 f181 	clz	r1, r1
 8004c9a:	b2c9      	uxtb	r1, r1
 8004c9c:	408b      	lsls	r3, r1
 8004c9e:	4921      	ldr	r1, [pc, #132]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]
 8004ca4:	e06d      	b.n	8004d82 <HAL_RCC_OscConfig+0x62e>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004cb8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cc6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2300      	movs	r3, #0
 8004cd0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd2:	f7fd fab3 	bl	800223c <HAL_GetTick>
 8004cd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cda:	e00a      	b.n	8004cf2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cdc:	f7fd faae 	bl	800223c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d902      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	f000 bd7e 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004d04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d08:	fab3 f383 	clz	r3, r3
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCC_OscConfig+0x5d4>
 8004d1c:	4b01      	ldr	r3, [pc, #4]	; (8004d24 <HAL_RCC_OscConfig+0x5d0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	e016      	b.n	8004d50 <HAL_RCC_OscConfig+0x5fc>
 8004d22:	bf00      	nop
 8004d24:	40021000 	.word	0x40021000
 8004d28:	2302      	movs	r3, #2
 8004d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d32:	fa93 f3a3 	rbit	r3, r3
 8004d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d44:	fa93 f3a3 	rbit	r3, r3
 8004d48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004d4c:	4bbf      	ldr	r3, [pc, #764]	; (800504c <HAL_RCC_OscConfig+0x8f8>)
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	2202      	movs	r2, #2
 8004d52:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004d56:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004d5a:	fa92 f2a2 	rbit	r2, r2
 8004d5e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004d62:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d66:	fab2 f282 	clz	r2, r2
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	f042 0220 	orr.w	r2, r2, #32
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	f002 021f 	and.w	r2, r2, #31
 8004d76:	2101      	movs	r1, #1
 8004d78:	fa01 f202 	lsl.w	r2, r1, r2
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ac      	bne.n	8004cdc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0308 	and.w	r3, r3, #8
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8113 	beq.w	8004fbe <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d07c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x74e>
 8004da8:	2301      	movs	r3, #1
 8004daa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db2:	fa93 f3a3 	rbit	r3, r3
 8004db6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004dba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dbe:	fab3 f383 	clz	r3, r3
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	4ba2      	ldr	r3, [pc, #648]	; (8005050 <HAL_RCC_OscConfig+0x8fc>)
 8004dc8:	4413      	add	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	461a      	mov	r2, r3
 8004dce:	2301      	movs	r3, #1
 8004dd0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd2:	f7fd fa33 	bl	800223c <HAL_GetTick>
 8004dd6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fd fa2e 	bl	800223c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d902      	bls.n	8004df2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	f000 bcfe 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>
 8004df2:	2302      	movs	r3, #2
 8004df4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfc:	fa93 f2a3 	rbit	r2, r3
 8004e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e12:	2202      	movs	r2, #2
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	fa93 f2a3 	rbit	r2, r3
 8004e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e36:	2202      	movs	r2, #2
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	fa93 f2a3 	rbit	r2, r3
 8004e48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e50:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e52:	4b7e      	ldr	r3, [pc, #504]	; (800504c <HAL_RCC_OscConfig+0x8f8>)
 8004e54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e5e:	2102      	movs	r1, #2
 8004e60:	6019      	str	r1, [r3, #0]
 8004e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	fa93 f1a3 	rbit	r1, r3
 8004e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e74:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e78:	6019      	str	r1, [r3, #0]
  return result;
 8004e7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e7e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	f003 031f 	and.w	r3, r3, #31
 8004e94:	2101      	movs	r1, #1
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d09d      	beq.n	8004ddc <HAL_RCC_OscConfig+0x688>
 8004ea0:	e08d      	b.n	8004fbe <HAL_RCC_OscConfig+0x86a>
 8004ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ea6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004eaa:	2201      	movs	r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eb2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	fa93 f2a3 	rbit	r2, r3
 8004ebc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ec0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ec4:	601a      	str	r2, [r3, #0]
  return result;
 8004ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004ece:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ed0:	fab3 f383 	clz	r3, r3
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4b5d      	ldr	r3, [pc, #372]	; (8005050 <HAL_RCC_OscConfig+0x8fc>)
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee4:	f7fd f9aa 	bl	800223c <HAL_GetTick>
 8004ee8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eee:	f7fd f9a5 	bl	800223c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d902      	bls.n	8004f04 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	f000 bc75 	b.w	80057ee <HAL_RCC_OscConfig+0x109a>
 8004f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	fa93 f2a3 	rbit	r2, r3
 8004f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f30:	2202      	movs	r2, #2
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	fa93 f2a3 	rbit	r2, r3
 8004f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004f54:	2202      	movs	r2, #2
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	fa93 f2a3 	rbit	r2, r3
 8004f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004f6e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f70:	4b36      	ldr	r3, [pc, #216]	; (800504c <HAL_RCC_OscConfig+0x8f8>)
 8004f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	6019      	str	r1, [r3, #0]
 8004f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f84:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	fa93 f1a3 	rbit	r1, r3
 8004f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f92:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004f96:	6019      	str	r1, [r3, #0]
  return result;
 8004f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f9c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb8:	4013      	ands	r3, r2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d197      	bne.n	8004eee <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fc2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 81a5 	beq.w	800531e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fda:	4b1c      	ldr	r3, [pc, #112]	; (800504c <HAL_RCC_OscConfig+0x8f8>)
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe6:	4b19      	ldr	r3, [pc, #100]	; (800504c <HAL_RCC_OscConfig+0x8f8>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	4a18      	ldr	r2, [pc, #96]	; (800504c <HAL_RCC_OscConfig+0x8f8>)
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	61d3      	str	r3, [r2, #28]
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <HAL_RCC_OscConfig+0x8f8>)
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ffa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800500c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005014:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <HAL_RCC_OscConfig+0x900>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501c:	2b00      	cmp	r3, #0
 800501e:	d121      	bne.n	8005064 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <HAL_RCC_OscConfig+0x900>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a0b      	ldr	r2, [pc, #44]	; (8005054 <HAL_RCC_OscConfig+0x900>)
 8005026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502c:	f7fd f906 	bl	800223c <HAL_GetTick>
 8005030:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005034:	e010      	b.n	8005058 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005036:	f7fd f901 	bl	800223c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b64      	cmp	r3, #100	; 0x64
 8005044:	d908      	bls.n	8005058 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e3d1      	b.n	80057ee <HAL_RCC_OscConfig+0x109a>
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
 8005050:	10908120 	.word	0x10908120
 8005054:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005058:	4b8d      	ldr	r3, [pc, #564]	; (8005290 <HAL_RCC_OscConfig+0xb3c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0e8      	beq.n	8005036 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005064:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005068:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <HAL_RCC_OscConfig+0x92e>
 8005074:	4b87      	ldr	r3, [pc, #540]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	4a86      	ldr	r2, [pc, #536]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	6213      	str	r3, [r2, #32]
 8005080:	e035      	b.n	80050ee <HAL_RCC_OscConfig+0x99a>
 8005082:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005086:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0x958>
 8005092:	4b80      	ldr	r3, [pc, #512]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	4a7f      	ldr	r2, [pc, #508]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	6213      	str	r3, [r2, #32]
 800509e:	4b7d      	ldr	r3, [pc, #500]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	4a7c      	ldr	r2, [pc, #496]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050a4:	f023 0304 	bic.w	r3, r3, #4
 80050a8:	6213      	str	r3, [r2, #32]
 80050aa:	e020      	b.n	80050ee <HAL_RCC_OscConfig+0x99a>
 80050ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b05      	cmp	r3, #5
 80050ba:	d10c      	bne.n	80050d6 <HAL_RCC_OscConfig+0x982>
 80050bc:	4b75      	ldr	r3, [pc, #468]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	4a74      	ldr	r2, [pc, #464]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050c2:	f043 0304 	orr.w	r3, r3, #4
 80050c6:	6213      	str	r3, [r2, #32]
 80050c8:	4b72      	ldr	r3, [pc, #456]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	4a71      	ldr	r2, [pc, #452]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	6213      	str	r3, [r2, #32]
 80050d4:	e00b      	b.n	80050ee <HAL_RCC_OscConfig+0x99a>
 80050d6:	4b6f      	ldr	r3, [pc, #444]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	4a6e      	ldr	r2, [pc, #440]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	6213      	str	r3, [r2, #32]
 80050e2:	4b6c      	ldr	r3, [pc, #432]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	4a6b      	ldr	r2, [pc, #428]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80050e8:	f023 0304 	bic.w	r3, r3, #4
 80050ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 8081 	beq.w	8005202 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005100:	f7fd f89c 	bl	800223c <HAL_GetTick>
 8005104:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005108:	e00b      	b.n	8005122 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800510a:	f7fd f897 	bl	800223c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e365      	b.n	80057ee <HAL_RCC_OscConfig+0x109a>
 8005122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005126:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800512a:	2202      	movs	r2, #2
 800512c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005132:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	fa93 f2a3 	rbit	r2, r3
 800513c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005140:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800514a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800514e:	2202      	movs	r2, #2
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005156:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	fa93 f2a3 	rbit	r2, r3
 8005160:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005164:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005168:	601a      	str	r2, [r3, #0]
  return result;
 800516a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800516e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005172:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005174:	fab3 f383 	clz	r3, r3
 8005178:	b2db      	uxtb	r3, r3
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f043 0302 	orr.w	r3, r3, #2
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d102      	bne.n	800518e <HAL_RCC_OscConfig+0xa3a>
 8005188:	4b42      	ldr	r3, [pc, #264]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	e013      	b.n	80051b6 <HAL_RCC_OscConfig+0xa62>
 800518e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005192:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005196:	2202      	movs	r2, #2
 8005198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800519e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	fa93 f2a3 	rbit	r2, r3
 80051a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ac:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	4b38      	ldr	r3, [pc, #224]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051be:	2102      	movs	r1, #2
 80051c0:	6011      	str	r1, [r2, #0]
 80051c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80051ca:	6812      	ldr	r2, [r2, #0]
 80051cc:	fa92 f1a2 	rbit	r1, r2
 80051d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051d4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80051d8:	6011      	str	r1, [r2, #0]
  return result;
 80051da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051de:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80051e2:	6812      	ldr	r2, [r2, #0]
 80051e4:	fab2 f282 	clz	r2, r2
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	f002 021f 	and.w	r2, r2, #31
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f202 	lsl.w	r2, r1, r2
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d084      	beq.n	800510a <HAL_RCC_OscConfig+0x9b6>
 8005200:	e083      	b.n	800530a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005202:	f7fd f81b 	bl	800223c <HAL_GetTick>
 8005206:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800520a:	e00b      	b.n	8005224 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fd f816 	bl	800223c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	f241 3288 	movw	r2, #5000	; 0x1388
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e2e4      	b.n	80057ee <HAL_RCC_OscConfig+0x109a>
 8005224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005228:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800522c:	2202      	movs	r2, #2
 800522e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005234:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	fa93 f2a3 	rbit	r2, r3
 800523e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005242:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800524c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005250:	2202      	movs	r2, #2
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005258:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	fa93 f2a3 	rbit	r2, r3
 8005262:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005266:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800526a:	601a      	str	r2, [r3, #0]
  return result;
 800526c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005270:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005274:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005276:	fab3 f383 	clz	r3, r3
 800527a:	b2db      	uxtb	r3, r3
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	b2db      	uxtb	r3, r3
 8005280:	f043 0302 	orr.w	r3, r3, #2
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d106      	bne.n	8005298 <HAL_RCC_OscConfig+0xb44>
 800528a:	4b02      	ldr	r3, [pc, #8]	; (8005294 <HAL_RCC_OscConfig+0xb40>)
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	e017      	b.n	80052c0 <HAL_RCC_OscConfig+0xb6c>
 8005290:	40007000 	.word	0x40007000
 8005294:	40021000 	.word	0x40021000
 8005298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800529c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80052a0:	2202      	movs	r2, #2
 80052a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	fa93 f2a3 	rbit	r2, r3
 80052b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	4bb3      	ldr	r3, [pc, #716]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052c8:	2102      	movs	r1, #2
 80052ca:	6011      	str	r1, [r2, #0]
 80052cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80052d4:	6812      	ldr	r2, [r2, #0]
 80052d6:	fa92 f1a2 	rbit	r1, r2
 80052da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052de:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80052e2:	6011      	str	r1, [r2, #0]
  return result;
 80052e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052e8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	fab2 f282 	clz	r2, r2
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f8:	b2d2      	uxtb	r2, r2
 80052fa:	f002 021f 	and.w	r2, r2, #31
 80052fe:	2101      	movs	r1, #1
 8005300:	fa01 f202 	lsl.w	r2, r1, r2
 8005304:	4013      	ands	r3, r2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d180      	bne.n	800520c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800530a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800530e:	2b01      	cmp	r3, #1
 8005310:	d105      	bne.n	800531e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005312:	4b9e      	ldr	r3, [pc, #632]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	4a9d      	ldr	r2, [pc, #628]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 8005318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800531e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005322:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 825e 	beq.w	80057ec <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005330:	4b96      	ldr	r3, [pc, #600]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 030c 	and.w	r3, r3, #12
 8005338:	2b08      	cmp	r3, #8
 800533a:	f000 821f 	beq.w	800577c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005342:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b02      	cmp	r3, #2
 800534c:	f040 8170 	bne.w	8005630 <HAL_RCC_OscConfig+0xedc>
 8005350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005354:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800535c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005362:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	fa93 f2a3 	rbit	r2, r3
 800536c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005370:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005374:	601a      	str	r2, [r3, #0]
  return result;
 8005376:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800537a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800537e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800538a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	461a      	mov	r2, r3
 8005392:	2300      	movs	r3, #0
 8005394:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005396:	f7fc ff51 	bl	800223c <HAL_GetTick>
 800539a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800539e:	e009      	b.n	80053b4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fc ff4c 	bl	800223c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e21c      	b.n	80057ee <HAL_RCC_OscConfig+0x109a>
 80053b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	fa93 f2a3 	rbit	r2, r3
 80053d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053d8:	601a      	str	r2, [r3, #0]
  return result;
 80053da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053de:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80053e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053e4:	fab3 f383 	clz	r3, r3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d102      	bne.n	80053fe <HAL_RCC_OscConfig+0xcaa>
 80053f8:	4b64      	ldr	r3, [pc, #400]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	e027      	b.n	800544e <HAL_RCC_OscConfig+0xcfa>
 80053fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005402:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800540a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005410:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	fa93 f2a3 	rbit	r2, r3
 800541a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800541e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005428:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800542c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005436:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	fa93 f2a3 	rbit	r2, r3
 8005440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005444:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	4b50      	ldr	r3, [pc, #320]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005452:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005456:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800545a:	6011      	str	r1, [r2, #0]
 800545c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005460:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005464:	6812      	ldr	r2, [r2, #0]
 8005466:	fa92 f1a2 	rbit	r1, r2
 800546a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800546e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005472:	6011      	str	r1, [r2, #0]
  return result;
 8005474:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005478:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800547c:	6812      	ldr	r2, [r2, #0]
 800547e:	fab2 f282 	clz	r2, r2
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	f042 0220 	orr.w	r2, r2, #32
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	f002 021f 	and.w	r2, r2, #31
 800548e:	2101      	movs	r1, #1
 8005490:	fa01 f202 	lsl.w	r2, r1, r2
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d182      	bne.n	80053a0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800549a:	4b3c      	ldr	r3, [pc, #240]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 800549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549e:	f023 020f 	bic.w	r2, r3, #15
 80054a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ae:	4937      	ldr	r1, [pc, #220]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80054b4:	4b35      	ldr	r3, [pc, #212]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80054bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6a19      	ldr	r1, [r3, #32]
 80054c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	430b      	orrs	r3, r1
 80054d6:	492d      	ldr	r1, [pc, #180]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	604b      	str	r3, [r1, #4]
 80054dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054e0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054ee:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	fa93 f2a3 	rbit	r2, r3
 80054f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054fc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005500:	601a      	str	r2, [r3, #0]
  return result;
 8005502:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005506:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800550a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800550c:	fab3 f383 	clz	r3, r3
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005516:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	461a      	mov	r2, r3
 800551e:	2301      	movs	r3, #1
 8005520:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005522:	f7fc fe8b 	bl	800223c <HAL_GetTick>
 8005526:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800552a:	e009      	b.n	8005540 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800552c:	f7fc fe86 	bl	800223c <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d901      	bls.n	8005540 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	e156      	b.n	80057ee <HAL_RCC_OscConfig+0x109a>
 8005540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005544:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005548:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800554c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800554e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005552:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	fa93 f2a3 	rbit	r2, r3
 800555c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005560:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005564:	601a      	str	r2, [r3, #0]
  return result;
 8005566:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800556a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800556e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005570:	fab3 f383 	clz	r3, r3
 8005574:	b2db      	uxtb	r3, r3
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	b2db      	uxtb	r3, r3
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b01      	cmp	r3, #1
 8005582:	d105      	bne.n	8005590 <HAL_RCC_OscConfig+0xe3c>
 8005584:	4b01      	ldr	r3, [pc, #4]	; (800558c <HAL_RCC_OscConfig+0xe38>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	e02a      	b.n	80055e0 <HAL_RCC_OscConfig+0xe8c>
 800558a:	bf00      	nop
 800558c:	40021000 	.word	0x40021000
 8005590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005594:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800559c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055a2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	fa93 f2a3 	rbit	r2, r3
 80055ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055b0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055ba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80055be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055c8:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	fa93 f2a3 	rbit	r2, r3
 80055d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055d6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	4b86      	ldr	r3, [pc, #536]	; (80057f8 <HAL_RCC_OscConfig+0x10a4>)
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055e4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80055ec:	6011      	str	r1, [r2, #0]
 80055ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80055f2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	fa92 f1a2 	rbit	r1, r2
 80055fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005600:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005604:	6011      	str	r1, [r2, #0]
  return result;
 8005606:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800560a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	fab2 f282 	clz	r2, r2
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	f042 0220 	orr.w	r2, r2, #32
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	f002 021f 	and.w	r2, r2, #31
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f202 	lsl.w	r2, r1, r2
 8005626:	4013      	ands	r3, r2
 8005628:	2b00      	cmp	r3, #0
 800562a:	f43f af7f 	beq.w	800552c <HAL_RCC_OscConfig+0xdd8>
 800562e:	e0dd      	b.n	80057ec <HAL_RCC_OscConfig+0x1098>
 8005630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005634:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800563c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800563e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005642:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	fa93 f2a3 	rbit	r2, r3
 800564c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005650:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005654:	601a      	str	r2, [r3, #0]
  return result;
 8005656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800565a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800565e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005660:	fab3 f383 	clz	r3, r3
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800566a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	461a      	mov	r2, r3
 8005672:	2300      	movs	r3, #0
 8005674:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005676:	f7fc fde1 	bl	800223c <HAL_GetTick>
 800567a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800567e:	e009      	b.n	8005694 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005680:	f7fc fddc 	bl	800223c <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e0ac      	b.n	80057ee <HAL_RCC_OscConfig+0x109a>
 8005694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005698:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800569c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056a6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	fa93 f2a3 	rbit	r2, r3
 80056b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056b4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80056b8:	601a      	str	r2, [r3, #0]
  return result;
 80056ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056be:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80056c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056c4:	fab3 f383 	clz	r3, r3
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f043 0301 	orr.w	r3, r3, #1
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d102      	bne.n	80056de <HAL_RCC_OscConfig+0xf8a>
 80056d8:	4b47      	ldr	r3, [pc, #284]	; (80057f8 <HAL_RCC_OscConfig+0x10a4>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	e027      	b.n	800572e <HAL_RCC_OscConfig+0xfda>
 80056de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056e2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80056e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056f0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	fa93 f2a3 	rbit	r2, r3
 80056fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056fe:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005708:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800570c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005716:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	fa93 f2a3 	rbit	r2, r3
 8005720:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005724:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	4b33      	ldr	r3, [pc, #204]	; (80057f8 <HAL_RCC_OscConfig+0x10a4>)
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005732:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005736:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800573a:	6011      	str	r1, [r2, #0]
 800573c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005740:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	fa92 f1a2 	rbit	r1, r2
 800574a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800574e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005752:	6011      	str	r1, [r2, #0]
  return result;
 8005754:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005758:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	fab2 f282 	clz	r2, r2
 8005762:	b2d2      	uxtb	r2, r2
 8005764:	f042 0220 	orr.w	r2, r2, #32
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	f002 021f 	and.w	r2, r2, #31
 800576e:	2101      	movs	r1, #1
 8005770:	fa01 f202 	lsl.w	r2, r1, r2
 8005774:	4013      	ands	r3, r2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d182      	bne.n	8005680 <HAL_RCC_OscConfig+0xf2c>
 800577a:	e037      	b.n	80057ec <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800577c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005780:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e02e      	b.n	80057ee <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005790:	4b19      	ldr	r3, [pc, #100]	; (80057f8 <HAL_RCC_OscConfig+0x10a4>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005798:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <HAL_RCC_OscConfig+0x10a4>)
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057a0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80057a4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80057a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d117      	bne.n	80057e8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80057b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80057bc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80057c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d10b      	bne.n	80057e8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80057d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80057d4:	f003 020f 	and.w	r2, r3, #15
 80057d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40021000 	.word	0x40021000

080057fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b09e      	sub	sp, #120	; 0x78
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005806:	2300      	movs	r3, #0
 8005808:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d101      	bne.n	8005814 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e162      	b.n	8005ada <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005814:	4b90      	ldr	r3, [pc, #576]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d910      	bls.n	8005844 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005822:	4b8d      	ldr	r3, [pc, #564]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f023 0207 	bic.w	r2, r3, #7
 800582a:	498b      	ldr	r1, [pc, #556]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005832:	4b89      	ldr	r3, [pc, #548]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0307 	and.w	r3, r3, #7
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d001      	beq.n	8005844 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e14a      	b.n	8005ada <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d008      	beq.n	8005862 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005850:	4b82      	ldr	r3, [pc, #520]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	497f      	ldr	r1, [pc, #508]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 800585e:	4313      	orrs	r3, r2
 8005860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0301 	and.w	r3, r3, #1
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80dc 	beq.w	8005a28 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d13c      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xf6>
 8005878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800587c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005880:	fa93 f3a3 	rbit	r3, r3
 8005884:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005888:	fab3 f383 	clz	r3, r3
 800588c:	b2db      	uxtb	r3, r3
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b01      	cmp	r3, #1
 800589a:	d102      	bne.n	80058a2 <HAL_RCC_ClockConfig+0xa6>
 800589c:	4b6f      	ldr	r3, [pc, #444]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	e00f      	b.n	80058c2 <HAL_RCC_ClockConfig+0xc6>
 80058a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058aa:	fa93 f3a3 	rbit	r3, r3
 80058ae:	667b      	str	r3, [r7, #100]	; 0x64
 80058b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058b4:	663b      	str	r3, [r7, #96]	; 0x60
 80058b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058b8:	fa93 f3a3 	rbit	r3, r3
 80058bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058be:	4b67      	ldr	r3, [pc, #412]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80058c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058ca:	fa92 f2a2 	rbit	r2, r2
 80058ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80058d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80058d2:	fab2 f282 	clz	r2, r2
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	f042 0220 	orr.w	r2, r2, #32
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	f002 021f 	and.w	r2, r2, #31
 80058e2:	2101      	movs	r1, #1
 80058e4:	fa01 f202 	lsl.w	r2, r1, r2
 80058e8:	4013      	ands	r3, r2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d17b      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e0f3      	b.n	8005ada <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d13c      	bne.n	8005974 <HAL_RCC_ClockConfig+0x178>
 80058fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005902:	fa93 f3a3 	rbit	r3, r3
 8005906:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800590a:	fab3 f383 	clz	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f043 0301 	orr.w	r3, r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b01      	cmp	r3, #1
 800591c:	d102      	bne.n	8005924 <HAL_RCC_ClockConfig+0x128>
 800591e:	4b4f      	ldr	r3, [pc, #316]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	e00f      	b.n	8005944 <HAL_RCC_ClockConfig+0x148>
 8005924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800592a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592c:	fa93 f3a3 	rbit	r3, r3
 8005930:	647b      	str	r3, [r7, #68]	; 0x44
 8005932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005936:	643b      	str	r3, [r7, #64]	; 0x40
 8005938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593a:	fa93 f3a3 	rbit	r3, r3
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005940:	4b46      	ldr	r3, [pc, #280]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005948:	63ba      	str	r2, [r7, #56]	; 0x38
 800594a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800594c:	fa92 f2a2 	rbit	r2, r2
 8005950:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8005952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005954:	fab2 f282 	clz	r2, r2
 8005958:	b2d2      	uxtb	r2, r2
 800595a:	f042 0220 	orr.w	r2, r2, #32
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	f002 021f 	and.w	r2, r2, #31
 8005964:	2101      	movs	r1, #1
 8005966:	fa01 f202 	lsl.w	r2, r1, r2
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d13a      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e0b2      	b.n	8005ada <HAL_RCC_ClockConfig+0x2de>
 8005974:	2302      	movs	r3, #2
 8005976:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	fa93 f3a3 	rbit	r3, r3
 800597e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005982:	fab3 f383 	clz	r3, r3
 8005986:	b2db      	uxtb	r3, r3
 8005988:	095b      	lsrs	r3, r3, #5
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f043 0301 	orr.w	r3, r3, #1
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b01      	cmp	r3, #1
 8005994:	d102      	bne.n	800599c <HAL_RCC_ClockConfig+0x1a0>
 8005996:	4b31      	ldr	r3, [pc, #196]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	e00d      	b.n	80059b8 <HAL_RCC_ClockConfig+0x1bc>
 800599c:	2302      	movs	r3, #2
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	fa93 f3a3 	rbit	r3, r3
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
 80059a8:	2302      	movs	r3, #2
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	fa93 f3a3 	rbit	r3, r3
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	4b29      	ldr	r3, [pc, #164]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	2202      	movs	r2, #2
 80059ba:	61ba      	str	r2, [r7, #24]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	fa92 f2a2 	rbit	r2, r2
 80059c2:	617a      	str	r2, [r7, #20]
  return result;
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	fab2 f282 	clz	r2, r2
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	f042 0220 	orr.w	r2, r2, #32
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	f002 021f 	and.w	r2, r2, #31
 80059d6:	2101      	movs	r1, #1
 80059d8:	fa01 f202 	lsl.w	r2, r1, r2
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e079      	b.n	8005ada <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e6:	4b1d      	ldr	r3, [pc, #116]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f023 0203 	bic.w	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	491a      	ldr	r1, [pc, #104]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f8:	f7fc fc20 	bl	800223c <HAL_GetTick>
 80059fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fe:	e00a      	b.n	8005a16 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a00:	f7fc fc1c 	bl	800223c <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e061      	b.n	8005ada <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a16:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <HAL_RCC_ClockConfig+0x260>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f003 020c 	and.w	r2, r3, #12
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d1eb      	bne.n	8005a00 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a28:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0307 	and.w	r3, r3, #7
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d214      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b08      	ldr	r3, [pc, #32]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f023 0207 	bic.w	r2, r3, #7
 8005a3e:	4906      	ldr	r1, [pc, #24]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a46:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <HAL_RCC_ClockConfig+0x25c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d005      	beq.n	8005a60 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e040      	b.n	8005ada <HAL_RCC_ClockConfig+0x2de>
 8005a58:	40022000 	.word	0x40022000
 8005a5c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	491a      	ldr	r1, [pc, #104]	; (8005ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8a:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4912      	ldr	r1, [pc, #72]	; (8005ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a9e:	f000 f829 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <HAL_RCC_ClockConfig+0x2e8>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aac:	22f0      	movs	r2, #240	; 0xf0
 8005aae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	fa92 f2a2 	rbit	r2, r2
 8005ab6:	60fa      	str	r2, [r7, #12]
  return result;
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	fab2 f282 	clz	r2, r2
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	40d3      	lsrs	r3, r2
 8005ac2:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <HAL_RCC_ClockConfig+0x2ec>)
 8005ac4:	5cd3      	ldrb	r3, [r2, r3]
 8005ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8005aca:	4a08      	ldr	r2, [pc, #32]	; (8005aec <HAL_RCC_ClockConfig+0x2f0>)
 8005acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005ace:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <HAL_RCC_ClockConfig+0x2f4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fc fb6e 	bl	80021b4 <HAL_InitTick>
  
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3778      	adds	r7, #120	; 0x78
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	08007c24 	.word	0x08007c24
 8005aec:	20000000 	.word	0x20000000
 8005af0:	20000004 	.word	0x20000004

08005af4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b08b      	sub	sp, #44	; 0x2c
 8005af8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	; 0x24
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005b0e:	4b2a      	ldr	r3, [pc, #168]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d002      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0x30>
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d003      	beq.n	8005b2a <HAL_RCC_GetSysClockFreq+0x36>
 8005b22:	e03f      	b.n	8005ba4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b24:	4b25      	ldr	r3, [pc, #148]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b26:	623b      	str	r3, [r7, #32]
      break;
 8005b28:	e03f      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005b30:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005b34:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	fa92 f2a2 	rbit	r2, r2
 8005b3c:	607a      	str	r2, [r7, #4]
  return result;
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	fab2 f282 	clz	r2, r2
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	40d3      	lsrs	r3, r2
 8005b48:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005b4a:	5cd3      	ldrb	r3, [r2, r3]
 8005b4c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005b4e:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	220f      	movs	r2, #15
 8005b58:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	fa92 f2a2 	rbit	r2, r2
 8005b60:	60fa      	str	r2, [r7, #12]
  return result;
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	fab2 f282 	clz	r2, r2
 8005b68:	b2d2      	uxtb	r2, r2
 8005b6a:	40d3      	lsrs	r3, r2
 8005b6c:	4a15      	ldr	r2, [pc, #84]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b6e:	5cd3      	ldrb	r3, [r2, r3]
 8005b70:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b7c:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	fb02 f303 	mul.w	r3, r2, r3
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8c:	e007      	b.n	8005b9e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b8e:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	623b      	str	r3, [r7, #32]
      break;
 8005ba2:	e002      	b.n	8005baa <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <HAL_RCC_GetSysClockFreq+0xc8>)
 8005ba6:	623b      	str	r3, [r7, #32]
      break;
 8005ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005baa:	6a3b      	ldr	r3, [r7, #32]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	372c      	adds	r7, #44	; 0x2c
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	007a1200 	.word	0x007a1200
 8005bc0:	08007c3c 	.word	0x08007c3c
 8005bc4:	08007c4c 	.word	0x08007c4c

08005bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bcc:	4b03      	ldr	r3, [pc, #12]	; (8005bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8005bce:	681b      	ldr	r3, [r3, #0]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	20000000 	.word	0x20000000

08005be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005be6:	f7ff ffef 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005bea:	4601      	mov	r1, r0
 8005bec:	4b0b      	ldr	r3, [pc, #44]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bf4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005bf8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	fa92 f2a2 	rbit	r2, r2
 8005c00:	603a      	str	r2, [r7, #0]
  return result;
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	fab2 f282 	clz	r2, r2
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	40d3      	lsrs	r3, r2
 8005c0c:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005c0e:	5cd3      	ldrb	r3, [r2, r3]
 8005c10:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40021000 	.word	0x40021000
 8005c20:	08007c34 	.word	0x08007c34

08005c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005c2a:	f7ff ffcd 	bl	8005bc8 <HAL_RCC_GetHCLKFreq>
 8005c2e:	4601      	mov	r1, r0
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005c38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005c3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	fa92 f2a2 	rbit	r2, r2
 8005c44:	603a      	str	r2, [r7, #0]
  return result;
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	fab2 f282 	clz	r2, r2
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	40d3      	lsrs	r3, r2
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005c52:	5cd3      	ldrb	r3, [r2, r3]
 8005c54:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40021000 	.word	0x40021000
 8005c64:	08007c34 	.word	0x08007c34

08005c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b092      	sub	sp, #72	; 0x48
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005c74:	2300      	movs	r3, #0
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80d4 	beq.w	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8c:	4b4e      	ldr	r3, [pc, #312]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10e      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c98:	4b4b      	ldr	r3, [pc, #300]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	4a4a      	ldr	r2, [pc, #296]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	61d3      	str	r3, [r2, #28]
 8005ca4:	4b48      	ldr	r3, [pc, #288]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cac:	60bb      	str	r3, [r7, #8]
 8005cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb6:	4b45      	ldr	r3, [pc, #276]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d118      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc2:	4b42      	ldr	r3, [pc, #264]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a41      	ldr	r2, [pc, #260]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ccc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fc fab5 	bl	800223c <HAL_GetTick>
 8005cd2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	e008      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd6:	f7fc fab1 	bl	800223c <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b64      	cmp	r3, #100	; 0x64
 8005ce2:	d901      	bls.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e1d6      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce8:	4b38      	ldr	r3, [pc, #224]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0f0      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005cf4:	4b34      	ldr	r3, [pc, #208]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8084 	beq.w	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d07c      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d14:	4b2c      	ldr	r3, [pc, #176]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	fa93 f3a3 	rbit	r3, r3
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005d2e:	fab3 f383 	clz	r3, r3
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	4b26      	ldr	r3, [pc, #152]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2301      	movs	r3, #1
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	fa93 f3a3 	rbit	r3, r3
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005d52:	fab3 f383 	clz	r3, r3
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4b1d      	ldr	r3, [pc, #116]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	461a      	mov	r2, r3
 8005d62:	2300      	movs	r3, #0
 8005d64:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d04b      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d76:	f7fc fa61 	bl	800223c <HAL_GetTick>
 8005d7a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7c:	e00a      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7e:	f7fc fa5d 	bl	800223c <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e180      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005d94:	2302      	movs	r3, #2
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	fa93 f3a3 	rbit	r3, r3
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005da0:	2302      	movs	r3, #2
 8005da2:	623b      	str	r3, [r7, #32]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	fa93 f3a3 	rbit	r3, r3
 8005daa:	61fb      	str	r3, [r7, #28]
  return result;
 8005dac:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dae:	fab3 f383 	clz	r3, r3
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	095b      	lsrs	r3, r3, #5
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d108      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005dc2:	4b01      	ldr	r3, [pc, #4]	; (8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	e00d      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40007000 	.word	0x40007000
 8005dd0:	10908100 	.word	0x10908100
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	fa93 f3a3 	rbit	r3, r3
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	4b9a      	ldr	r3, [pc, #616]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	2202      	movs	r2, #2
 8005de6:	613a      	str	r2, [r7, #16]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	fa92 f2a2 	rbit	r2, r2
 8005dee:	60fa      	str	r2, [r7, #12]
  return result;
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	fab2 f282 	clz	r2, r2
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	f002 021f 	and.w	r2, r2, #31
 8005e02:	2101      	movs	r1, #1
 8005e04:	fa01 f202 	lsl.w	r2, r1, r2
 8005e08:	4013      	ands	r3, r2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0b7      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005e0e:	4b8f      	ldr	r3, [pc, #572]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	498c      	ldr	r1, [pc, #560]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d105      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e28:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	4a87      	ldr	r2, [pc, #540]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d008      	beq.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e40:	4b82      	ldr	r3, [pc, #520]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	f023 0203 	bic.w	r2, r3, #3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	497f      	ldr	r1, [pc, #508]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d008      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e5e:	4b7b      	ldr	r3, [pc, #492]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	4978      	ldr	r1, [pc, #480]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d008      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e7c:	4b73      	ldr	r3, [pc, #460]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	4970      	ldr	r1, [pc, #448]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e9a:	4b6c      	ldr	r3, [pc, #432]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9e:	f023 0210 	bic.w	r2, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	4969      	ldr	r1, [pc, #420]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005eb8:	4b64      	ldr	r3, [pc, #400]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	4961      	ldr	r1, [pc, #388]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d008      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ed6:	4b5d      	ldr	r3, [pc, #372]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	f023 0220 	bic.w	r2, r3, #32
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	495a      	ldr	r1, [pc, #360]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ef4:	4b55      	ldr	r3, [pc, #340]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	4952      	ldr	r1, [pc, #328]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f12:	4b4e      	ldr	r3, [pc, #312]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	494b      	ldr	r1, [pc, #300]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d008      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f30:	4b46      	ldr	r3, [pc, #280]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	4943      	ldr	r1, [pc, #268]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005f4e:	4b3f      	ldr	r3, [pc, #252]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	493c      	ldr	r1, [pc, #240]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d008      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f6c:	4b37      	ldr	r3, [pc, #220]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	4934      	ldr	r1, [pc, #208]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005f8a:	4b30      	ldr	r3, [pc, #192]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	492d      	ldr	r1, [pc, #180]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d008      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	4925      	ldr	r1, [pc, #148]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005fc6:	4b21      	ldr	r3, [pc, #132]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	491e      	ldr	r1, [pc, #120]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005fe4:	4b19      	ldr	r3, [pc, #100]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	4916      	ldr	r1, [pc, #88]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d008      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	490f      	ldr	r1, [pc, #60]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006010:	4313      	orrs	r3, r2
 8006012:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602c:	4907      	ldr	r1, [pc, #28]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800602e:	4313      	orrs	r3, r2
 8006030:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00c      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800603e:	4b03      	ldr	r3, [pc, #12]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006042:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	e002      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
 8006050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006052:	4913      	ldr	r1, [pc, #76]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006054:	4313      	orrs	r3, r2
 8006056:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d008      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006070:	490b      	ldr	r1, [pc, #44]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006072:	4313      	orrs	r3, r2
 8006074:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d008      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006082:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608e:	4904      	ldr	r1, [pc, #16]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006090:	4313      	orrs	r3, r2
 8006092:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3748      	adds	r7, #72	; 0x48
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40021000 	.word	0x40021000

080060a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e040      	b.n	8006138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d106      	bne.n	80060cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fb ff2e 	bl	8001f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2224      	movs	r2, #36	; 0x24
 80060d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0201 	bic.w	r2, r2, #1
 80060e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f8b6 	bl	8006254 <UART_SetConfig>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d101      	bne.n	80060f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e022      	b.n	8006138 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fa7e 	bl	80065fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800610e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689a      	ldr	r2, [r3, #8]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800611e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0201 	orr.w	r2, r2, #1
 800612e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 fb05 	bl	8006740 <UART_CheckIdleState>
 8006136:	4603      	mov	r3, r0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08a      	sub	sp, #40	; 0x28
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	603b      	str	r3, [r7, #0]
 800614c:	4613      	mov	r3, r2
 800614e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006154:	2b20      	cmp	r3, #32
 8006156:	d178      	bne.n	800624a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <HAL_UART_Transmit+0x24>
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e071      	b.n	800624c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2221      	movs	r2, #33	; 0x21
 8006174:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006176:	f7fc f861 	bl	800223c <HAL_GetTick>
 800617a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	88fa      	ldrh	r2, [r7, #6]
 8006188:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006194:	d108      	bne.n	80061a8 <HAL_UART_Transmit+0x68>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	61bb      	str	r3, [r7, #24]
 80061a6:	e003      	b.n	80061b0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061b0:	e030      	b.n	8006214 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2200      	movs	r2, #0
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fb67 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e03c      	b.n	800624c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	881a      	ldrh	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e4:	b292      	uxth	r2, r2
 80061e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	3302      	adds	r3, #2
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e008      	b.n	8006202 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	781a      	ldrb	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	b292      	uxth	r2, r2
 80061fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	3301      	adds	r3, #1
 8006200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006208:	b29b      	uxth	r3, r3
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800621a:	b29b      	uxth	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1c8      	bne.n	80061b2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	2140      	movs	r1, #64	; 0x40
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fb30 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d004      	beq.n	8006240 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e005      	b.n	800624c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e000      	b.n	800624c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800625c:	2300      	movs	r3, #0
 800625e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4b92      	ldr	r3, [pc, #584]	; (80064c8 <UART_SetConfig+0x274>)
 8006280:	4013      	ands	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6812      	ldr	r2, [r2, #0]
 8006286:	6979      	ldr	r1, [r7, #20]
 8006288:	430b      	orrs	r3, r1
 800628a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a1b      	ldr	r3, [r3, #32]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a80      	ldr	r2, [pc, #512]	; (80064cc <UART_SetConfig+0x278>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d120      	bne.n	8006312 <UART_SetConfig+0xbe>
 80062d0:	4b7f      	ldr	r3, [pc, #508]	; (80064d0 <UART_SetConfig+0x27c>)
 80062d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d817      	bhi.n	800630c <UART_SetConfig+0xb8>
 80062dc:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0x90>)
 80062de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e2:	bf00      	nop
 80062e4:	080062f5 	.word	0x080062f5
 80062e8:	08006301 	.word	0x08006301
 80062ec:	08006307 	.word	0x08006307
 80062f0:	080062fb 	.word	0x080062fb
 80062f4:	2301      	movs	r3, #1
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e0b5      	b.n	8006466 <UART_SetConfig+0x212>
 80062fa:	2302      	movs	r3, #2
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e0b2      	b.n	8006466 <UART_SetConfig+0x212>
 8006300:	2304      	movs	r3, #4
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e0af      	b.n	8006466 <UART_SetConfig+0x212>
 8006306:	2308      	movs	r3, #8
 8006308:	77fb      	strb	r3, [r7, #31]
 800630a:	e0ac      	b.n	8006466 <UART_SetConfig+0x212>
 800630c:	2310      	movs	r3, #16
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e0a9      	b.n	8006466 <UART_SetConfig+0x212>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a6f      	ldr	r2, [pc, #444]	; (80064d4 <UART_SetConfig+0x280>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d124      	bne.n	8006366 <UART_SetConfig+0x112>
 800631c:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <UART_SetConfig+0x27c>)
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006324:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006328:	d011      	beq.n	800634e <UART_SetConfig+0xfa>
 800632a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800632e:	d817      	bhi.n	8006360 <UART_SetConfig+0x10c>
 8006330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006334:	d011      	beq.n	800635a <UART_SetConfig+0x106>
 8006336:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800633a:	d811      	bhi.n	8006360 <UART_SetConfig+0x10c>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <UART_SetConfig+0xf4>
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006344:	d006      	beq.n	8006354 <UART_SetConfig+0x100>
 8006346:	e00b      	b.n	8006360 <UART_SetConfig+0x10c>
 8006348:	2300      	movs	r3, #0
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e08b      	b.n	8006466 <UART_SetConfig+0x212>
 800634e:	2302      	movs	r3, #2
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e088      	b.n	8006466 <UART_SetConfig+0x212>
 8006354:	2304      	movs	r3, #4
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e085      	b.n	8006466 <UART_SetConfig+0x212>
 800635a:	2308      	movs	r3, #8
 800635c:	77fb      	strb	r3, [r7, #31]
 800635e:	e082      	b.n	8006466 <UART_SetConfig+0x212>
 8006360:	2310      	movs	r3, #16
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e07f      	b.n	8006466 <UART_SetConfig+0x212>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a5b      	ldr	r2, [pc, #364]	; (80064d8 <UART_SetConfig+0x284>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d124      	bne.n	80063ba <UART_SetConfig+0x166>
 8006370:	4b57      	ldr	r3, [pc, #348]	; (80064d0 <UART_SetConfig+0x27c>)
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006378:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800637c:	d011      	beq.n	80063a2 <UART_SetConfig+0x14e>
 800637e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006382:	d817      	bhi.n	80063b4 <UART_SetConfig+0x160>
 8006384:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006388:	d011      	beq.n	80063ae <UART_SetConfig+0x15a>
 800638a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800638e:	d811      	bhi.n	80063b4 <UART_SetConfig+0x160>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d003      	beq.n	800639c <UART_SetConfig+0x148>
 8006394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006398:	d006      	beq.n	80063a8 <UART_SetConfig+0x154>
 800639a:	e00b      	b.n	80063b4 <UART_SetConfig+0x160>
 800639c:	2300      	movs	r3, #0
 800639e:	77fb      	strb	r3, [r7, #31]
 80063a0:	e061      	b.n	8006466 <UART_SetConfig+0x212>
 80063a2:	2302      	movs	r3, #2
 80063a4:	77fb      	strb	r3, [r7, #31]
 80063a6:	e05e      	b.n	8006466 <UART_SetConfig+0x212>
 80063a8:	2304      	movs	r3, #4
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e05b      	b.n	8006466 <UART_SetConfig+0x212>
 80063ae:	2308      	movs	r3, #8
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e058      	b.n	8006466 <UART_SetConfig+0x212>
 80063b4:	2310      	movs	r3, #16
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e055      	b.n	8006466 <UART_SetConfig+0x212>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a47      	ldr	r2, [pc, #284]	; (80064dc <UART_SetConfig+0x288>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d124      	bne.n	800640e <UART_SetConfig+0x1ba>
 80063c4:	4b42      	ldr	r3, [pc, #264]	; (80064d0 <UART_SetConfig+0x27c>)
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80063cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063d0:	d011      	beq.n	80063f6 <UART_SetConfig+0x1a2>
 80063d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063d6:	d817      	bhi.n	8006408 <UART_SetConfig+0x1b4>
 80063d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063dc:	d011      	beq.n	8006402 <UART_SetConfig+0x1ae>
 80063de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063e2:	d811      	bhi.n	8006408 <UART_SetConfig+0x1b4>
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <UART_SetConfig+0x19c>
 80063e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ec:	d006      	beq.n	80063fc <UART_SetConfig+0x1a8>
 80063ee:	e00b      	b.n	8006408 <UART_SetConfig+0x1b4>
 80063f0:	2300      	movs	r3, #0
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e037      	b.n	8006466 <UART_SetConfig+0x212>
 80063f6:	2302      	movs	r3, #2
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e034      	b.n	8006466 <UART_SetConfig+0x212>
 80063fc:	2304      	movs	r3, #4
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e031      	b.n	8006466 <UART_SetConfig+0x212>
 8006402:	2308      	movs	r3, #8
 8006404:	77fb      	strb	r3, [r7, #31]
 8006406:	e02e      	b.n	8006466 <UART_SetConfig+0x212>
 8006408:	2310      	movs	r3, #16
 800640a:	77fb      	strb	r3, [r7, #31]
 800640c:	e02b      	b.n	8006466 <UART_SetConfig+0x212>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a33      	ldr	r2, [pc, #204]	; (80064e0 <UART_SetConfig+0x28c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d124      	bne.n	8006462 <UART_SetConfig+0x20e>
 8006418:	4b2d      	ldr	r3, [pc, #180]	; (80064d0 <UART_SetConfig+0x27c>)
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006420:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006424:	d011      	beq.n	800644a <UART_SetConfig+0x1f6>
 8006426:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800642a:	d817      	bhi.n	800645c <UART_SetConfig+0x208>
 800642c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006430:	d011      	beq.n	8006456 <UART_SetConfig+0x202>
 8006432:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006436:	d811      	bhi.n	800645c <UART_SetConfig+0x208>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <UART_SetConfig+0x1f0>
 800643c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006440:	d006      	beq.n	8006450 <UART_SetConfig+0x1fc>
 8006442:	e00b      	b.n	800645c <UART_SetConfig+0x208>
 8006444:	2300      	movs	r3, #0
 8006446:	77fb      	strb	r3, [r7, #31]
 8006448:	e00d      	b.n	8006466 <UART_SetConfig+0x212>
 800644a:	2302      	movs	r3, #2
 800644c:	77fb      	strb	r3, [r7, #31]
 800644e:	e00a      	b.n	8006466 <UART_SetConfig+0x212>
 8006450:	2304      	movs	r3, #4
 8006452:	77fb      	strb	r3, [r7, #31]
 8006454:	e007      	b.n	8006466 <UART_SetConfig+0x212>
 8006456:	2308      	movs	r3, #8
 8006458:	77fb      	strb	r3, [r7, #31]
 800645a:	e004      	b.n	8006466 <UART_SetConfig+0x212>
 800645c:	2310      	movs	r3, #16
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e001      	b.n	8006466 <UART_SetConfig+0x212>
 8006462:	2310      	movs	r3, #16
 8006464:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646e:	d16b      	bne.n	8006548 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006470:	7ffb      	ldrb	r3, [r7, #31]
 8006472:	2b08      	cmp	r3, #8
 8006474:	d838      	bhi.n	80064e8 <UART_SetConfig+0x294>
 8006476:	a201      	add	r2, pc, #4	; (adr r2, 800647c <UART_SetConfig+0x228>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064a9 	.word	0x080064a9
 8006484:	080064b1 	.word	0x080064b1
 8006488:	080064e9 	.word	0x080064e9
 800648c:	080064b7 	.word	0x080064b7
 8006490:	080064e9 	.word	0x080064e9
 8006494:	080064e9 	.word	0x080064e9
 8006498:	080064e9 	.word	0x080064e9
 800649c:	080064bf 	.word	0x080064bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a0:	f7ff fb9e 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 80064a4:	61b8      	str	r0, [r7, #24]
        break;
 80064a6:	e024      	b.n	80064f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a8:	f7ff fbbc 	bl	8005c24 <HAL_RCC_GetPCLK2Freq>
 80064ac:	61b8      	str	r0, [r7, #24]
        break;
 80064ae:	e020      	b.n	80064f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <UART_SetConfig+0x290>)
 80064b2:	61bb      	str	r3, [r7, #24]
        break;
 80064b4:	e01d      	b.n	80064f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064b6:	f7ff fb1d 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 80064ba:	61b8      	str	r0, [r7, #24]
        break;
 80064bc:	e019      	b.n	80064f2 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c2:	61bb      	str	r3, [r7, #24]
        break;
 80064c4:	e015      	b.n	80064f2 <UART_SetConfig+0x29e>
 80064c6:	bf00      	nop
 80064c8:	efff69f3 	.word	0xefff69f3
 80064cc:	40013800 	.word	0x40013800
 80064d0:	40021000 	.word	0x40021000
 80064d4:	40004400 	.word	0x40004400
 80064d8:	40004800 	.word	0x40004800
 80064dc:	40004c00 	.word	0x40004c00
 80064e0:	40005000 	.word	0x40005000
 80064e4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	77bb      	strb	r3, [r7, #30]
        break;
 80064f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d073      	beq.n	80065e0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	005a      	lsls	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	441a      	add	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b0f      	cmp	r3, #15
 8006512:	d916      	bls.n	8006542 <UART_SetConfig+0x2ee>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651a:	d212      	bcs.n	8006542 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f023 030f 	bic.w	r3, r3, #15
 8006524:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	085b      	lsrs	r3, r3, #1
 800652a:	b29b      	uxth	r3, r3
 800652c:	f003 0307 	and.w	r3, r3, #7
 8006530:	b29a      	uxth	r2, r3
 8006532:	89fb      	ldrh	r3, [r7, #14]
 8006534:	4313      	orrs	r3, r2
 8006536:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	89fa      	ldrh	r2, [r7, #14]
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	e04e      	b.n	80065e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	77bb      	strb	r3, [r7, #30]
 8006546:	e04b      	b.n	80065e0 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006548:	7ffb      	ldrb	r3, [r7, #31]
 800654a:	2b08      	cmp	r3, #8
 800654c:	d827      	bhi.n	800659e <UART_SetConfig+0x34a>
 800654e:	a201      	add	r2, pc, #4	; (adr r2, 8006554 <UART_SetConfig+0x300>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	0800659f 	.word	0x0800659f
 8006564:	0800658f 	.word	0x0800658f
 8006568:	0800659f 	.word	0x0800659f
 800656c:	0800659f 	.word	0x0800659f
 8006570:	0800659f 	.word	0x0800659f
 8006574:	08006597 	.word	0x08006597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006578:	f7ff fb32 	bl	8005be0 <HAL_RCC_GetPCLK1Freq>
 800657c:	61b8      	str	r0, [r7, #24]
        break;
 800657e:	e013      	b.n	80065a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006580:	f7ff fb50 	bl	8005c24 <HAL_RCC_GetPCLK2Freq>
 8006584:	61b8      	str	r0, [r7, #24]
        break;
 8006586:	e00f      	b.n	80065a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006588:	4b1b      	ldr	r3, [pc, #108]	; (80065f8 <UART_SetConfig+0x3a4>)
 800658a:	61bb      	str	r3, [r7, #24]
        break;
 800658c:	e00c      	b.n	80065a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800658e:	f7ff fab1 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8006592:	61b8      	str	r0, [r7, #24]
        break;
 8006594:	e008      	b.n	80065a8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800659a:	61bb      	str	r3, [r7, #24]
        break;
 800659c:	e004      	b.n	80065a8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	77bb      	strb	r3, [r7, #30]
        break;
 80065a6:	bf00      	nop
    }

    if (pclk != 0U)
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d018      	beq.n	80065e0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	085a      	lsrs	r2, r3, #1
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	441a      	add	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b0f      	cmp	r3, #15
 80065c6:	d909      	bls.n	80065dc <UART_SetConfig+0x388>
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ce:	d205      	bcs.n	80065dc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e001      	b.n	80065e0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	007a1200 	.word	0x007a1200

080065fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	f003 0304 	and.w	r3, r3, #4
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666e:	f003 0308 	and.w	r3, r3, #8
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	f003 0310 	and.w	r3, r3, #16
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b2:	f003 0320 	and.w	r3, r3, #32
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d01a      	beq.n	8006712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066fa:	d10a      	bne.n	8006712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	605a      	str	r2, [r3, #4]
  }
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b098      	sub	sp, #96	; 0x60
 8006744:	af02      	add	r7, sp, #8
 8006746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006750:	f7fb fd74 	bl	800223c <HAL_GetTick>
 8006754:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b08      	cmp	r3, #8
 8006762:	d12e      	bne.n	80067c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800676c:	2200      	movs	r2, #0
 800676e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f88c 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d021      	beq.n	80067c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800678c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006792:	653b      	str	r3, [r7, #80]	; 0x50
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800679c:	647b      	str	r3, [r7, #68]	; 0x44
 800679e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e6      	bne.n	800677e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e062      	b.n	8006888 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d149      	bne.n	8006864 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d8:	2200      	movs	r2, #0
 80067da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f856 	bl	8006890 <UART_WaitOnFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d03c      	beq.n	8006864 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	e853 3f00 	ldrex	r3, [r3]
 80067f6:	623b      	str	r3, [r7, #32]
   return(result);
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006808:	633b      	str	r3, [r7, #48]	; 0x30
 800680a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800680e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006810:	e841 2300 	strex	r3, r2, [r1]
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e6      	bne.n	80067ea <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	3308      	adds	r3, #8
 8006822:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	e853 3f00 	ldrex	r3, [r3]
 800682a:	60fb      	str	r3, [r7, #12]
   return(result);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	64bb      	str	r3, [r7, #72]	; 0x48
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	3308      	adds	r3, #8
 800683a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800683c:	61fa      	str	r2, [r7, #28]
 800683e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006840:	69b9      	ldr	r1, [r7, #24]
 8006842:	69fa      	ldr	r2, [r7, #28]
 8006844:	e841 2300 	strex	r3, r2, [r1]
 8006848:	617b      	str	r3, [r7, #20]
   return(result);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e5      	bne.n	800681c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2220      	movs	r2, #32
 8006854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e011      	b.n	8006888 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2220      	movs	r2, #32
 8006868:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3758      	adds	r7, #88	; 0x58
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	4613      	mov	r3, r2
 800689e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a0:	e049      	b.n	8006936 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a8:	d045      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068aa:	f7fb fcc7 	bl	800223c <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d302      	bcc.n	80068c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	e048      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d031      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69db      	ldr	r3, [r3, #28]
 80068d8:	f003 0308 	and.w	r3, r3, #8
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d110      	bne.n	8006902 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2208      	movs	r2, #8
 80068e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f838 	bl	800695e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2208      	movs	r2, #8
 80068f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e029      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800690c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006910:	d111      	bne.n	8006936 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800691a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f81e 	bl	800695e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e00f      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69da      	ldr	r2, [r3, #28]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4013      	ands	r3, r2
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	bf0c      	ite	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	2300      	movne	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	429a      	cmp	r2, r3
 8006952:	d0a6      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800695e:	b480      	push	{r7}
 8006960:	b095      	sub	sp, #84	; 0x54
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800697a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006984:	643b      	str	r3, [r7, #64]	; 0x40
 8006986:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800698a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e6      	bne.n	8006966 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3308      	adds	r3, #8
 800699e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	e853 3f00 	ldrex	r3, [r3]
 80069a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	f023 0301 	bic.w	r3, r3, #1
 80069ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3308      	adds	r3, #8
 80069b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c0:	e841 2300 	strex	r3, r2, [r1]
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1e5      	bne.n	8006998 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d118      	bne.n	8006a06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	e853 3f00 	ldrex	r3, [r3]
 80069e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	f023 0310 	bic.w	r3, r3, #16
 80069e8:	647b      	str	r3, [r7, #68]	; 0x44
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6979      	ldr	r1, [r7, #20]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	613b      	str	r3, [r7, #16]
   return(result);
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e6      	bne.n	80069d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a1a:	bf00      	nop
 8006a1c:	3754      	adds	r7, #84	; 0x54
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <_ZN4blib6ButtonC1Ev>:
#include "Button.h"
#include "Monitor.h"

namespace blib
{
    Button::Button()
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f8fa 	bl	8006c2c <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 8006a38:	4a03      	ldr	r2, [pc, #12]	; (8006a48 <_ZN4blib6ButtonC1Ev+0x20>)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
    {

    }
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	08007c64 	.word	0x08007c64

08006a4c <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	4a05      	ldr	r2, [pc, #20]	; (8006a6c <_ZN4blib6ButtonD1Ev+0x20>)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 f8f5 	bl	8006c4c <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
    {

    }
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	08007c64 	.word	0x08007c64

08006a70 <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
    }
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ffe7 	bl	8006a4c <_ZN4blib6ButtonD1Ev>
 8006a7e:	2108      	movs	r1, #8
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f903 	bl	8006c8c <_ZdlPvj>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	605a      	str	r2, [r3, #4]
    }
 8006aa0:	bf00      	nop
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
        return mLatestPressedButton;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
    }
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
        auto &monitor = Monitor::getInstance();
 8006acc:	f7fb f920 	bl	8001d10 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 8006ad0:	60b8      	str	r0, [r7, #8]

        // In display mode
        if (monitor.getSetttingMode() == false)
 8006ad2:	68b8      	ldr	r0, [r7, #8]
 8006ad4:	f7fa fb45 	bl	8001162 <_ZNK4blib7Monitor15getSetttingModeEv>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	bf0c      	ite	eq
 8006ade:	2301      	moveq	r3, #1
 8006ae0:	2300      	movne	r3, #0
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d06b      	beq.n	8006bc0 <_ZN4blib6Button12handleSignalEv+0xfc>
        {
            switch (monitor.getDisplayLevel())
 8006ae8:	68b8      	ldr	r0, [r7, #8]
 8006aea:	f7fa fbb5 	bl	8001258 <_ZNK4blib7Monitor15getDisplayLevelEv>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b06      	cmp	r3, #6
 8006af2:	d019      	beq.n	8006b28 <_ZN4blib6Button12handleSignalEv+0x64>
 8006af4:	2b06      	cmp	r3, #6
 8006af6:	dc31      	bgt.n	8006b5c <_ZN4blib6Button12handleSignalEv+0x98>
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	dc02      	bgt.n	8006b02 <_ZN4blib6Button12handleSignalEv+0x3e>
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	da2f      	bge.n	8006b60 <_ZN4blib6Button12handleSignalEv+0x9c>

                    }

                default:

                    break;
 8006b00:	e02c      	b.n	8006b5c <_ZN4blib6Button12handleSignalEv+0x98>
            switch (monitor.getDisplayLevel())
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d000      	beq.n	8006b08 <_ZN4blib6Button12handleSignalEv+0x44>
                    break;
 8006b06:	e029      	b.n	8006b5c <_ZN4blib6Button12handleSignalEv+0x98>
                    if (getLatestPressedButton() == ButtonName::SELECT)
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f7ff ffcf 	bl	8006aac <_ZNK4blib6Button22getLatestPressedButtonEv>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d022      	beq.n	8006b64 <_ZN4blib6Button12handleSignalEv+0xa0>
                        monitor.setSettingMode(true);
 8006b1e:	2101      	movs	r1, #1
 8006b20:	68b8      	ldr	r0, [r7, #8]
 8006b22:	f7fa fb0f 	bl	8001144 <_ZN4blib7Monitor14setSettingModeEb>
                    break;
 8006b26:	e01d      	b.n	8006b64 <_ZN4blib6Button12handleSignalEv+0xa0>
                    if (monitor.getFactoryReset() == false)
 8006b28:	68b8      	ldr	r0, [r7, #8]
 8006b2a:	f7fa fb36 	bl	800119a <_ZNK4blib7Monitor15getFactoryResetEv>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00e      	beq.n	8006b5c <_ZN4blib6Button12handleSignalEv+0x98>
                        if (getLatestPressedButton() == ButtonName::SELECT)
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff ffb4 	bl	8006aac <_ZNK4blib6Button22getLatestPressedButtonEv>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	bf0c      	ite	eq
 8006b4a:	2301      	moveq	r3, #1
 8006b4c:	2300      	movne	r3, #0
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <_ZN4blib6Button12handleSignalEv+0x98>
                            monitor.setFactoryReset(true);
 8006b54:	2101      	movs	r1, #1
 8006b56:	68b8      	ldr	r0, [r7, #8]
 8006b58:	f7fa fb10 	bl	800117c <_ZN4blib7Monitor15setFactoryResetEb>
                    break;
 8006b5c:	bf00      	nop
 8006b5e:	e002      	b.n	8006b66 <_ZN4blib6Button12handleSignalEv+0xa2>
                    break;
 8006b60:	bf00      	nop
 8006b62:	e000      	b.n	8006b66 <_ZN4blib6Button12handleSignalEv+0xa2>
                    break;
 8006b64:	bf00      	nop
            }

            uint8_t u8DisplayLevel = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]

            // Press left button - go to previous screen
            if (getLatestPressedButton() == ButtonName::LEFT)
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff ff9e 	bl	8006aac <_ZNK4blib6Button22getLatestPressedButtonEv>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	bf0c      	ite	eq
 8006b76:	2301      	moveq	r3, #1
 8006b78:	2300      	movne	r3, #0
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d007      	beq.n	8006b90 <_ZN4blib6Button12handleSignalEv+0xcc>
            {
                u8DisplayLevel = (uint8_t) monitor.getDisplayLevel() - 1;
 8006b80:	68b8      	ldr	r0, [r7, #8]
 8006b82:	f7fa fb69 	bl	8001258 <_ZNK4blib7Monitor15getDisplayLevelEv>
 8006b86:	4603      	mov	r3, r0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
 8006b8e:	e011      	b.n	8006bb4 <_ZN4blib6Button12handleSignalEv+0xf0>
            }
            // Press right buton - go to next screen
            else if (getLatestPressedButton() == ButtonName::RIGHT)
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff ff8b 	bl	8006aac <_ZNK4blib6Button22getLatestPressedButtonEv>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	bf0c      	ite	eq
 8006b9c:	2301      	moveq	r3, #1
 8006b9e:	2300      	movne	r3, #0
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d006      	beq.n	8006bb4 <_ZN4blib6Button12handleSignalEv+0xf0>
            {
                u8DisplayLevel = (uint8_t) monitor.getDisplayLevel() + 1;
 8006ba6:	68b8      	ldr	r0, [r7, #8]
 8006ba8:	f7fa fb56 	bl	8001258 <_ZNK4blib7Monitor15getDisplayLevelEv>
 8006bac:	4603      	mov	r3, r0
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	73fb      	strb	r3, [r7, #15]
            }

            monitor.setDisplayLevel((Monitor::DisplayLevel) u8DisplayLevel);
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	68b8      	ldr	r0, [r7, #8]
 8006bba:	f7fa fb38 	bl	800122e <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() + 1;
            }

            monitor.setSettingLevel((Monitor::SettingLevel) u8SettingLevel);
        }
    }
 8006bbe:	e031      	b.n	8006c24 <_ZN4blib6Button12handleSignalEv+0x160>
            switch (monitor.getSettingLevel())
 8006bc0:	68b8      	ldr	r0, [r7, #8]
 8006bc2:	f7fa fb28 	bl	8001216 <_ZNK4blib7Monitor15getSettingLevelEv>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b07      	cmp	r3, #7
                    break;
 8006bca:	bf00      	nop
            uint8_t u8SettingLevel = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73bb      	strb	r3, [r7, #14]
            if (getLatestPressedButton() == ButtonName::LEFT)
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff ff6b 	bl	8006aac <_ZNK4blib6Button22getLatestPressedButtonEv>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	bf0c      	ite	eq
 8006bdc:	2301      	moveq	r3, #1
 8006bde:	2300      	movne	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <_ZN4blib6Button12handleSignalEv+0x132>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() - 1;
 8006be6:	68b8      	ldr	r0, [r7, #8]
 8006be8:	f7fa fb15 	bl	8001216 <_ZNK4blib7Monitor15getSettingLevelEv>
 8006bec:	4603      	mov	r3, r0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	73bb      	strb	r3, [r7, #14]
 8006bf4:	e011      	b.n	8006c1a <_ZN4blib6Button12handleSignalEv+0x156>
            else if (getLatestPressedButton() == ButtonName::RIGHT)
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff ff58 	bl	8006aac <_ZNK4blib6Button22getLatestPressedButtonEv>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	bf0c      	ite	eq
 8006c02:	2301      	moveq	r3, #1
 8006c04:	2300      	movne	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <_ZN4blib6Button12handleSignalEv+0x156>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() + 1;
 8006c0c:	68b8      	ldr	r0, [r7, #8]
 8006c0e:	f7fa fb02 	bl	8001216 <_ZNK4blib7Monitor15getSettingLevelEv>
 8006c12:	4603      	mov	r3, r0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	3301      	adds	r3, #1
 8006c18:	73bb      	strb	r3, [r7, #14]
            monitor.setSettingLevel((Monitor::SettingLevel) u8SettingLevel);
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	68b8      	ldr	r0, [r7, #8]
 8006c20:	f7fa fae4 	bl	80011ec <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>
    }
 8006c24:	bf00      	nop
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
                {
 8006c34:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	601a      	str	r2, [r3, #0]
                }
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	08007c74 	.word	0x08007c74

08006c4c <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
                }
 8006c54:	4a04      	ldr	r2, [pc, #16]	; (8006c68 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	08007c74 	.word	0x08007c74

08006c6c <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
                }
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff ffe9 	bl	8006c4c <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 8006c7a:	2104      	movs	r1, #4
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 f805 	bl	8006c8c <_ZdlPvj>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <_ZdlPvj>:
 8006c8c:	f000 b811 	b.w	8006cb2 <_ZdlPv>

08006c90 <_Znwj>:
 8006c90:	2801      	cmp	r0, #1
 8006c92:	bf38      	it	cc
 8006c94:	2001      	movcc	r0, #1
 8006c96:	b510      	push	{r4, lr}
 8006c98:	4604      	mov	r4, r0
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f81c 	bl	8006cd8 <malloc>
 8006ca0:	b100      	cbz	r0, 8006ca4 <_Znwj+0x14>
 8006ca2:	bd10      	pop	{r4, pc}
 8006ca4:	f000 f808 	bl	8006cb8 <_ZSt15get_new_handlerv>
 8006ca8:	b908      	cbnz	r0, 8006cae <_Znwj+0x1e>
 8006caa:	f000 f80d 	bl	8006cc8 <abort>
 8006cae:	4780      	blx	r0
 8006cb0:	e7f3      	b.n	8006c9a <_Znwj+0xa>

08006cb2 <_ZdlPv>:
 8006cb2:	f000 b819 	b.w	8006ce8 <free>
	...

08006cb8 <_ZSt15get_new_handlerv>:
 8006cb8:	4b02      	ldr	r3, [pc, #8]	; (8006cc4 <_ZSt15get_new_handlerv+0xc>)
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	f3bf 8f5b 	dmb	ish
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20000604 	.word	0x20000604

08006cc8 <abort>:
 8006cc8:	b508      	push	{r3, lr}
 8006cca:	2006      	movs	r0, #6
 8006ccc:	f000 f924 	bl	8006f18 <raise>
 8006cd0:	2001      	movs	r0, #1
 8006cd2:	f7fb f9dd 	bl	8002090 <_exit>
	...

08006cd8 <malloc>:
 8006cd8:	4b02      	ldr	r3, [pc, #8]	; (8006ce4 <malloc+0xc>)
 8006cda:	4601      	mov	r1, r0
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	f000 b82b 	b.w	8006d38 <_malloc_r>
 8006ce2:	bf00      	nop
 8006ce4:	2000005c 	.word	0x2000005c

08006ce8 <free>:
 8006ce8:	4b02      	ldr	r3, [pc, #8]	; (8006cf4 <free+0xc>)
 8006cea:	4601      	mov	r1, r0
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	f000 b96b 	b.w	8006fc8 <_free_r>
 8006cf2:	bf00      	nop
 8006cf4:	2000005c 	.word	0x2000005c

08006cf8 <sbrk_aligned>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	4e0e      	ldr	r6, [pc, #56]	; (8006d34 <sbrk_aligned+0x3c>)
 8006cfc:	460c      	mov	r4, r1
 8006cfe:	6831      	ldr	r1, [r6, #0]
 8006d00:	4605      	mov	r5, r0
 8006d02:	b911      	cbnz	r1, 8006d0a <sbrk_aligned+0x12>
 8006d04:	f000 f924 	bl	8006f50 <_sbrk_r>
 8006d08:	6030      	str	r0, [r6, #0]
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f000 f91f 	bl	8006f50 <_sbrk_r>
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d00a      	beq.n	8006d2c <sbrk_aligned+0x34>
 8006d16:	1cc4      	adds	r4, r0, #3
 8006d18:	f024 0403 	bic.w	r4, r4, #3
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	d007      	beq.n	8006d30 <sbrk_aligned+0x38>
 8006d20:	1a21      	subs	r1, r4, r0
 8006d22:	4628      	mov	r0, r5
 8006d24:	f000 f914 	bl	8006f50 <_sbrk_r>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d101      	bne.n	8006d30 <sbrk_aligned+0x38>
 8006d2c:	f04f 34ff 	mov.w	r4, #4294967295
 8006d30:	4620      	mov	r0, r4
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	2000060c 	.word	0x2000060c

08006d38 <_malloc_r>:
 8006d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d3c:	1ccd      	adds	r5, r1, #3
 8006d3e:	f025 0503 	bic.w	r5, r5, #3
 8006d42:	3508      	adds	r5, #8
 8006d44:	2d0c      	cmp	r5, #12
 8006d46:	bf38      	it	cc
 8006d48:	250c      	movcc	r5, #12
 8006d4a:	2d00      	cmp	r5, #0
 8006d4c:	4607      	mov	r7, r0
 8006d4e:	db01      	blt.n	8006d54 <_malloc_r+0x1c>
 8006d50:	42a9      	cmp	r1, r5
 8006d52:	d905      	bls.n	8006d60 <_malloc_r+0x28>
 8006d54:	230c      	movs	r3, #12
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	2600      	movs	r6, #0
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d60:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e34 <_malloc_r+0xfc>
 8006d64:	f000 f868 	bl	8006e38 <__malloc_lock>
 8006d68:	f8d8 3000 	ldr.w	r3, [r8]
 8006d6c:	461c      	mov	r4, r3
 8006d6e:	bb5c      	cbnz	r4, 8006dc8 <_malloc_r+0x90>
 8006d70:	4629      	mov	r1, r5
 8006d72:	4638      	mov	r0, r7
 8006d74:	f7ff ffc0 	bl	8006cf8 <sbrk_aligned>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	d155      	bne.n	8006e2a <_malloc_r+0xf2>
 8006d7e:	f8d8 4000 	ldr.w	r4, [r8]
 8006d82:	4626      	mov	r6, r4
 8006d84:	2e00      	cmp	r6, #0
 8006d86:	d145      	bne.n	8006e14 <_malloc_r+0xdc>
 8006d88:	2c00      	cmp	r4, #0
 8006d8a:	d048      	beq.n	8006e1e <_malloc_r+0xe6>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4638      	mov	r0, r7
 8006d92:	eb04 0903 	add.w	r9, r4, r3
 8006d96:	f000 f8db 	bl	8006f50 <_sbrk_r>
 8006d9a:	4581      	cmp	r9, r0
 8006d9c:	d13f      	bne.n	8006e1e <_malloc_r+0xe6>
 8006d9e:	6821      	ldr	r1, [r4, #0]
 8006da0:	1a6d      	subs	r5, r5, r1
 8006da2:	4629      	mov	r1, r5
 8006da4:	4638      	mov	r0, r7
 8006da6:	f7ff ffa7 	bl	8006cf8 <sbrk_aligned>
 8006daa:	3001      	adds	r0, #1
 8006dac:	d037      	beq.n	8006e1e <_malloc_r+0xe6>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	442b      	add	r3, r5
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	f8d8 3000 	ldr.w	r3, [r8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d038      	beq.n	8006e2e <_malloc_r+0xf6>
 8006dbc:	685a      	ldr	r2, [r3, #4]
 8006dbe:	42a2      	cmp	r2, r4
 8006dc0:	d12b      	bne.n	8006e1a <_malloc_r+0xe2>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	605a      	str	r2, [r3, #4]
 8006dc6:	e00f      	b.n	8006de8 <_malloc_r+0xb0>
 8006dc8:	6822      	ldr	r2, [r4, #0]
 8006dca:	1b52      	subs	r2, r2, r5
 8006dcc:	d41f      	bmi.n	8006e0e <_malloc_r+0xd6>
 8006dce:	2a0b      	cmp	r2, #11
 8006dd0:	d917      	bls.n	8006e02 <_malloc_r+0xca>
 8006dd2:	1961      	adds	r1, r4, r5
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	6025      	str	r5, [r4, #0]
 8006dd8:	bf18      	it	ne
 8006dda:	6059      	strne	r1, [r3, #4]
 8006ddc:	6863      	ldr	r3, [r4, #4]
 8006dde:	bf08      	it	eq
 8006de0:	f8c8 1000 	streq.w	r1, [r8]
 8006de4:	5162      	str	r2, [r4, r5]
 8006de6:	604b      	str	r3, [r1, #4]
 8006de8:	4638      	mov	r0, r7
 8006dea:	f104 060b 	add.w	r6, r4, #11
 8006dee:	f000 f829 	bl	8006e44 <__malloc_unlock>
 8006df2:	f026 0607 	bic.w	r6, r6, #7
 8006df6:	1d23      	adds	r3, r4, #4
 8006df8:	1af2      	subs	r2, r6, r3
 8006dfa:	d0ae      	beq.n	8006d5a <_malloc_r+0x22>
 8006dfc:	1b9b      	subs	r3, r3, r6
 8006dfe:	50a3      	str	r3, [r4, r2]
 8006e00:	e7ab      	b.n	8006d5a <_malloc_r+0x22>
 8006e02:	42a3      	cmp	r3, r4
 8006e04:	6862      	ldr	r2, [r4, #4]
 8006e06:	d1dd      	bne.n	8006dc4 <_malloc_r+0x8c>
 8006e08:	f8c8 2000 	str.w	r2, [r8]
 8006e0c:	e7ec      	b.n	8006de8 <_malloc_r+0xb0>
 8006e0e:	4623      	mov	r3, r4
 8006e10:	6864      	ldr	r4, [r4, #4]
 8006e12:	e7ac      	b.n	8006d6e <_malloc_r+0x36>
 8006e14:	4634      	mov	r4, r6
 8006e16:	6876      	ldr	r6, [r6, #4]
 8006e18:	e7b4      	b.n	8006d84 <_malloc_r+0x4c>
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	e7cc      	b.n	8006db8 <_malloc_r+0x80>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	603b      	str	r3, [r7, #0]
 8006e22:	4638      	mov	r0, r7
 8006e24:	f000 f80e 	bl	8006e44 <__malloc_unlock>
 8006e28:	e797      	b.n	8006d5a <_malloc_r+0x22>
 8006e2a:	6025      	str	r5, [r4, #0]
 8006e2c:	e7dc      	b.n	8006de8 <_malloc_r+0xb0>
 8006e2e:	605b      	str	r3, [r3, #4]
 8006e30:	deff      	udf	#255	; 0xff
 8006e32:	bf00      	nop
 8006e34:	20000608 	.word	0x20000608

08006e38 <__malloc_lock>:
 8006e38:	4801      	ldr	r0, [pc, #4]	; (8006e40 <__malloc_lock+0x8>)
 8006e3a:	f000 b8c3 	b.w	8006fc4 <__retarget_lock_acquire_recursive>
 8006e3e:	bf00      	nop
 8006e40:	2000074c 	.word	0x2000074c

08006e44 <__malloc_unlock>:
 8006e44:	4801      	ldr	r0, [pc, #4]	; (8006e4c <__malloc_unlock+0x8>)
 8006e46:	f000 b8be 	b.w	8006fc6 <__retarget_lock_release_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	2000074c 	.word	0x2000074c

08006e50 <sniprintf>:
 8006e50:	b40c      	push	{r2, r3}
 8006e52:	b530      	push	{r4, r5, lr}
 8006e54:	4b17      	ldr	r3, [pc, #92]	; (8006eb4 <sniprintf+0x64>)
 8006e56:	1e0c      	subs	r4, r1, #0
 8006e58:	681d      	ldr	r5, [r3, #0]
 8006e5a:	b09d      	sub	sp, #116	; 0x74
 8006e5c:	da08      	bge.n	8006e70 <sniprintf+0x20>
 8006e5e:	238b      	movs	r3, #139	; 0x8b
 8006e60:	602b      	str	r3, [r5, #0]
 8006e62:	f04f 30ff 	mov.w	r0, #4294967295
 8006e66:	b01d      	add	sp, #116	; 0x74
 8006e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e6c:	b002      	add	sp, #8
 8006e6e:	4770      	bx	lr
 8006e70:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006e74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e78:	bf14      	ite	ne
 8006e7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e7e:	4623      	moveq	r3, r4
 8006e80:	9304      	str	r3, [sp, #16]
 8006e82:	9307      	str	r3, [sp, #28]
 8006e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e88:	9002      	str	r0, [sp, #8]
 8006e8a:	9006      	str	r0, [sp, #24]
 8006e8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006e90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006e92:	ab21      	add	r3, sp, #132	; 0x84
 8006e94:	a902      	add	r1, sp, #8
 8006e96:	4628      	mov	r0, r5
 8006e98:	9301      	str	r3, [sp, #4]
 8006e9a:	f000 f93b 	bl	8007114 <_svfiprintf_r>
 8006e9e:	1c43      	adds	r3, r0, #1
 8006ea0:	bfbc      	itt	lt
 8006ea2:	238b      	movlt	r3, #139	; 0x8b
 8006ea4:	602b      	strlt	r3, [r5, #0]
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d0dd      	beq.n	8006e66 <sniprintf+0x16>
 8006eaa:	9b02      	ldr	r3, [sp, #8]
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e7d9      	b.n	8006e66 <sniprintf+0x16>
 8006eb2:	bf00      	nop
 8006eb4:	2000005c 	.word	0x2000005c

08006eb8 <memset>:
 8006eb8:	4402      	add	r2, r0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d100      	bne.n	8006ec2 <memset+0xa>
 8006ec0:	4770      	bx	lr
 8006ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ec6:	e7f9      	b.n	8006ebc <memset+0x4>

08006ec8 <_raise_r>:
 8006ec8:	291f      	cmp	r1, #31
 8006eca:	b538      	push	{r3, r4, r5, lr}
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	d904      	bls.n	8006edc <_raise_r+0x14>
 8006ed2:	2316      	movs	r3, #22
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006ede:	b112      	cbz	r2, 8006ee6 <_raise_r+0x1e>
 8006ee0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ee4:	b94b      	cbnz	r3, 8006efa <_raise_r+0x32>
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f000 f830 	bl	8006f4c <_getpid_r>
 8006eec:	462a      	mov	r2, r5
 8006eee:	4601      	mov	r1, r0
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ef6:	f000 b817 	b.w	8006f28 <_kill_r>
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d00a      	beq.n	8006f14 <_raise_r+0x4c>
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	d103      	bne.n	8006f0a <_raise_r+0x42>
 8006f02:	2316      	movs	r3, #22
 8006f04:	6003      	str	r3, [r0, #0]
 8006f06:	2001      	movs	r0, #1
 8006f08:	e7e7      	b.n	8006eda <_raise_r+0x12>
 8006f0a:	2400      	movs	r4, #0
 8006f0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f10:	4628      	mov	r0, r5
 8006f12:	4798      	blx	r3
 8006f14:	2000      	movs	r0, #0
 8006f16:	e7e0      	b.n	8006eda <_raise_r+0x12>

08006f18 <raise>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <raise+0xc>)
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f7ff bfd3 	b.w	8006ec8 <_raise_r>
 8006f22:	bf00      	nop
 8006f24:	2000005c 	.word	0x2000005c

08006f28 <_kill_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <_kill_r+0x20>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	602b      	str	r3, [r5, #0]
 8006f36:	f7fb f89b 	bl	8002070 <_kill>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	d102      	bne.n	8006f44 <_kill_r+0x1c>
 8006f3e:	682b      	ldr	r3, [r5, #0]
 8006f40:	b103      	cbz	r3, 8006f44 <_kill_r+0x1c>
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	20000748 	.word	0x20000748

08006f4c <_getpid_r>:
 8006f4c:	f7fb b888 	b.w	8002060 <_getpid>

08006f50 <_sbrk_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d06      	ldr	r5, [pc, #24]	; (8006f6c <_sbrk_r+0x1c>)
 8006f54:	2300      	movs	r3, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7fb f8a2 	bl	80020a4 <_sbrk>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_sbrk_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_sbrk_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	20000748 	.word	0x20000748

08006f70 <__errno>:
 8006f70:	4b01      	ldr	r3, [pc, #4]	; (8006f78 <__errno+0x8>)
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	2000005c 	.word	0x2000005c

08006f7c <__libc_init_array>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	4d0d      	ldr	r5, [pc, #52]	; (8006fb4 <__libc_init_array+0x38>)
 8006f80:	4c0d      	ldr	r4, [pc, #52]	; (8006fb8 <__libc_init_array+0x3c>)
 8006f82:	1b64      	subs	r4, r4, r5
 8006f84:	10a4      	asrs	r4, r4, #2
 8006f86:	2600      	movs	r6, #0
 8006f88:	42a6      	cmp	r6, r4
 8006f8a:	d109      	bne.n	8006fa0 <__libc_init_array+0x24>
 8006f8c:	4d0b      	ldr	r5, [pc, #44]	; (8006fbc <__libc_init_array+0x40>)
 8006f8e:	4c0c      	ldr	r4, [pc, #48]	; (8006fc0 <__libc_init_array+0x44>)
 8006f90:	f000 fbae 	bl	80076f0 <_init>
 8006f94:	1b64      	subs	r4, r4, r5
 8006f96:	10a4      	asrs	r4, r4, #2
 8006f98:	2600      	movs	r6, #0
 8006f9a:	42a6      	cmp	r6, r4
 8006f9c:	d105      	bne.n	8006faa <__libc_init_array+0x2e>
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa4:	4798      	blx	r3
 8006fa6:	3601      	adds	r6, #1
 8006fa8:	e7ee      	b.n	8006f88 <__libc_init_array+0xc>
 8006faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fae:	4798      	blx	r3
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	e7f2      	b.n	8006f9a <__libc_init_array+0x1e>
 8006fb4:	08007cb0 	.word	0x08007cb0
 8006fb8:	08007cb0 	.word	0x08007cb0
 8006fbc:	08007cb0 	.word	0x08007cb0
 8006fc0:	08007cb4 	.word	0x08007cb4

08006fc4 <__retarget_lock_acquire_recursive>:
 8006fc4:	4770      	bx	lr

08006fc6 <__retarget_lock_release_recursive>:
 8006fc6:	4770      	bx	lr

08006fc8 <_free_r>:
 8006fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fca:	2900      	cmp	r1, #0
 8006fcc:	d044      	beq.n	8007058 <_free_r+0x90>
 8006fce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd2:	9001      	str	r0, [sp, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006fda:	bfb8      	it	lt
 8006fdc:	18e4      	addlt	r4, r4, r3
 8006fde:	f7ff ff2b 	bl	8006e38 <__malloc_lock>
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	; (800705c <_free_r+0x94>)
 8006fe4:	9801      	ldr	r0, [sp, #4]
 8006fe6:	6813      	ldr	r3, [r2, #0]
 8006fe8:	b933      	cbnz	r3, 8006ff8 <_free_r+0x30>
 8006fea:	6063      	str	r3, [r4, #4]
 8006fec:	6014      	str	r4, [r2, #0]
 8006fee:	b003      	add	sp, #12
 8006ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ff4:	f7ff bf26 	b.w	8006e44 <__malloc_unlock>
 8006ff8:	42a3      	cmp	r3, r4
 8006ffa:	d908      	bls.n	800700e <_free_r+0x46>
 8006ffc:	6825      	ldr	r5, [r4, #0]
 8006ffe:	1961      	adds	r1, r4, r5
 8007000:	428b      	cmp	r3, r1
 8007002:	bf01      	itttt	eq
 8007004:	6819      	ldreq	r1, [r3, #0]
 8007006:	685b      	ldreq	r3, [r3, #4]
 8007008:	1949      	addeq	r1, r1, r5
 800700a:	6021      	streq	r1, [r4, #0]
 800700c:	e7ed      	b.n	8006fea <_free_r+0x22>
 800700e:	461a      	mov	r2, r3
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b10b      	cbz	r3, 8007018 <_free_r+0x50>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d9fa      	bls.n	800700e <_free_r+0x46>
 8007018:	6811      	ldr	r1, [r2, #0]
 800701a:	1855      	adds	r5, r2, r1
 800701c:	42a5      	cmp	r5, r4
 800701e:	d10b      	bne.n	8007038 <_free_r+0x70>
 8007020:	6824      	ldr	r4, [r4, #0]
 8007022:	4421      	add	r1, r4
 8007024:	1854      	adds	r4, r2, r1
 8007026:	42a3      	cmp	r3, r4
 8007028:	6011      	str	r1, [r2, #0]
 800702a:	d1e0      	bne.n	8006fee <_free_r+0x26>
 800702c:	681c      	ldr	r4, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	6053      	str	r3, [r2, #4]
 8007032:	440c      	add	r4, r1
 8007034:	6014      	str	r4, [r2, #0]
 8007036:	e7da      	b.n	8006fee <_free_r+0x26>
 8007038:	d902      	bls.n	8007040 <_free_r+0x78>
 800703a:	230c      	movs	r3, #12
 800703c:	6003      	str	r3, [r0, #0]
 800703e:	e7d6      	b.n	8006fee <_free_r+0x26>
 8007040:	6825      	ldr	r5, [r4, #0]
 8007042:	1961      	adds	r1, r4, r5
 8007044:	428b      	cmp	r3, r1
 8007046:	bf04      	itt	eq
 8007048:	6819      	ldreq	r1, [r3, #0]
 800704a:	685b      	ldreq	r3, [r3, #4]
 800704c:	6063      	str	r3, [r4, #4]
 800704e:	bf04      	itt	eq
 8007050:	1949      	addeq	r1, r1, r5
 8007052:	6021      	streq	r1, [r4, #0]
 8007054:	6054      	str	r4, [r2, #4]
 8007056:	e7ca      	b.n	8006fee <_free_r+0x26>
 8007058:	b003      	add	sp, #12
 800705a:	bd30      	pop	{r4, r5, pc}
 800705c:	20000608 	.word	0x20000608

08007060 <__ssputs_r>:
 8007060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	688e      	ldr	r6, [r1, #8]
 8007066:	461f      	mov	r7, r3
 8007068:	42be      	cmp	r6, r7
 800706a:	680b      	ldr	r3, [r1, #0]
 800706c:	4682      	mov	sl, r0
 800706e:	460c      	mov	r4, r1
 8007070:	4690      	mov	r8, r2
 8007072:	d82c      	bhi.n	80070ce <__ssputs_r+0x6e>
 8007074:	898a      	ldrh	r2, [r1, #12]
 8007076:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800707a:	d026      	beq.n	80070ca <__ssputs_r+0x6a>
 800707c:	6965      	ldr	r5, [r4, #20]
 800707e:	6909      	ldr	r1, [r1, #16]
 8007080:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007084:	eba3 0901 	sub.w	r9, r3, r1
 8007088:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800708c:	1c7b      	adds	r3, r7, #1
 800708e:	444b      	add	r3, r9
 8007090:	106d      	asrs	r5, r5, #1
 8007092:	429d      	cmp	r5, r3
 8007094:	bf38      	it	cc
 8007096:	461d      	movcc	r5, r3
 8007098:	0553      	lsls	r3, r2, #21
 800709a:	d527      	bpl.n	80070ec <__ssputs_r+0x8c>
 800709c:	4629      	mov	r1, r5
 800709e:	f7ff fe4b 	bl	8006d38 <_malloc_r>
 80070a2:	4606      	mov	r6, r0
 80070a4:	b360      	cbz	r0, 8007100 <__ssputs_r+0xa0>
 80070a6:	6921      	ldr	r1, [r4, #16]
 80070a8:	464a      	mov	r2, r9
 80070aa:	f000 fadb 	bl	8007664 <memcpy>
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b8:	81a3      	strh	r3, [r4, #12]
 80070ba:	6126      	str	r6, [r4, #16]
 80070bc:	6165      	str	r5, [r4, #20]
 80070be:	444e      	add	r6, r9
 80070c0:	eba5 0509 	sub.w	r5, r5, r9
 80070c4:	6026      	str	r6, [r4, #0]
 80070c6:	60a5      	str	r5, [r4, #8]
 80070c8:	463e      	mov	r6, r7
 80070ca:	42be      	cmp	r6, r7
 80070cc:	d900      	bls.n	80070d0 <__ssputs_r+0x70>
 80070ce:	463e      	mov	r6, r7
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	4632      	mov	r2, r6
 80070d4:	4641      	mov	r1, r8
 80070d6:	f000 faab 	bl	8007630 <memmove>
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	1b9b      	subs	r3, r3, r6
 80070de:	60a3      	str	r3, [r4, #8]
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	4433      	add	r3, r6
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	2000      	movs	r0, #0
 80070e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ec:	462a      	mov	r2, r5
 80070ee:	f000 fac7 	bl	8007680 <_realloc_r>
 80070f2:	4606      	mov	r6, r0
 80070f4:	2800      	cmp	r0, #0
 80070f6:	d1e0      	bne.n	80070ba <__ssputs_r+0x5a>
 80070f8:	6921      	ldr	r1, [r4, #16]
 80070fa:	4650      	mov	r0, sl
 80070fc:	f7ff ff64 	bl	8006fc8 <_free_r>
 8007100:	230c      	movs	r3, #12
 8007102:	f8ca 3000 	str.w	r3, [sl]
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	f04f 30ff 	mov.w	r0, #4294967295
 8007112:	e7e9      	b.n	80070e8 <__ssputs_r+0x88>

08007114 <_svfiprintf_r>:
 8007114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007118:	4698      	mov	r8, r3
 800711a:	898b      	ldrh	r3, [r1, #12]
 800711c:	061b      	lsls	r3, r3, #24
 800711e:	b09d      	sub	sp, #116	; 0x74
 8007120:	4607      	mov	r7, r0
 8007122:	460d      	mov	r5, r1
 8007124:	4614      	mov	r4, r2
 8007126:	d50e      	bpl.n	8007146 <_svfiprintf_r+0x32>
 8007128:	690b      	ldr	r3, [r1, #16]
 800712a:	b963      	cbnz	r3, 8007146 <_svfiprintf_r+0x32>
 800712c:	2140      	movs	r1, #64	; 0x40
 800712e:	f7ff fe03 	bl	8006d38 <_malloc_r>
 8007132:	6028      	str	r0, [r5, #0]
 8007134:	6128      	str	r0, [r5, #16]
 8007136:	b920      	cbnz	r0, 8007142 <_svfiprintf_r+0x2e>
 8007138:	230c      	movs	r3, #12
 800713a:	603b      	str	r3, [r7, #0]
 800713c:	f04f 30ff 	mov.w	r0, #4294967295
 8007140:	e0d0      	b.n	80072e4 <_svfiprintf_r+0x1d0>
 8007142:	2340      	movs	r3, #64	; 0x40
 8007144:	616b      	str	r3, [r5, #20]
 8007146:	2300      	movs	r3, #0
 8007148:	9309      	str	r3, [sp, #36]	; 0x24
 800714a:	2320      	movs	r3, #32
 800714c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007150:	f8cd 800c 	str.w	r8, [sp, #12]
 8007154:	2330      	movs	r3, #48	; 0x30
 8007156:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072fc <_svfiprintf_r+0x1e8>
 800715a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800715e:	f04f 0901 	mov.w	r9, #1
 8007162:	4623      	mov	r3, r4
 8007164:	469a      	mov	sl, r3
 8007166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800716a:	b10a      	cbz	r2, 8007170 <_svfiprintf_r+0x5c>
 800716c:	2a25      	cmp	r2, #37	; 0x25
 800716e:	d1f9      	bne.n	8007164 <_svfiprintf_r+0x50>
 8007170:	ebba 0b04 	subs.w	fp, sl, r4
 8007174:	d00b      	beq.n	800718e <_svfiprintf_r+0x7a>
 8007176:	465b      	mov	r3, fp
 8007178:	4622      	mov	r2, r4
 800717a:	4629      	mov	r1, r5
 800717c:	4638      	mov	r0, r7
 800717e:	f7ff ff6f 	bl	8007060 <__ssputs_r>
 8007182:	3001      	adds	r0, #1
 8007184:	f000 80a9 	beq.w	80072da <_svfiprintf_r+0x1c6>
 8007188:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800718a:	445a      	add	r2, fp
 800718c:	9209      	str	r2, [sp, #36]	; 0x24
 800718e:	f89a 3000 	ldrb.w	r3, [sl]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80a1 	beq.w	80072da <_svfiprintf_r+0x1c6>
 8007198:	2300      	movs	r3, #0
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071a2:	f10a 0a01 	add.w	sl, sl, #1
 80071a6:	9304      	str	r3, [sp, #16]
 80071a8:	9307      	str	r3, [sp, #28]
 80071aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071ae:	931a      	str	r3, [sp, #104]	; 0x68
 80071b0:	4654      	mov	r4, sl
 80071b2:	2205      	movs	r2, #5
 80071b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b8:	4850      	ldr	r0, [pc, #320]	; (80072fc <_svfiprintf_r+0x1e8>)
 80071ba:	f7f9 f819 	bl	80001f0 <memchr>
 80071be:	9a04      	ldr	r2, [sp, #16]
 80071c0:	b9d8      	cbnz	r0, 80071fa <_svfiprintf_r+0xe6>
 80071c2:	06d0      	lsls	r0, r2, #27
 80071c4:	bf44      	itt	mi
 80071c6:	2320      	movmi	r3, #32
 80071c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071cc:	0711      	lsls	r1, r2, #28
 80071ce:	bf44      	itt	mi
 80071d0:	232b      	movmi	r3, #43	; 0x2b
 80071d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071d6:	f89a 3000 	ldrb.w	r3, [sl]
 80071da:	2b2a      	cmp	r3, #42	; 0x2a
 80071dc:	d015      	beq.n	800720a <_svfiprintf_r+0xf6>
 80071de:	9a07      	ldr	r2, [sp, #28]
 80071e0:	4654      	mov	r4, sl
 80071e2:	2000      	movs	r0, #0
 80071e4:	f04f 0c0a 	mov.w	ip, #10
 80071e8:	4621      	mov	r1, r4
 80071ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071ee:	3b30      	subs	r3, #48	; 0x30
 80071f0:	2b09      	cmp	r3, #9
 80071f2:	d94d      	bls.n	8007290 <_svfiprintf_r+0x17c>
 80071f4:	b1b0      	cbz	r0, 8007224 <_svfiprintf_r+0x110>
 80071f6:	9207      	str	r2, [sp, #28]
 80071f8:	e014      	b.n	8007224 <_svfiprintf_r+0x110>
 80071fa:	eba0 0308 	sub.w	r3, r0, r8
 80071fe:	fa09 f303 	lsl.w	r3, r9, r3
 8007202:	4313      	orrs	r3, r2
 8007204:	9304      	str	r3, [sp, #16]
 8007206:	46a2      	mov	sl, r4
 8007208:	e7d2      	b.n	80071b0 <_svfiprintf_r+0x9c>
 800720a:	9b03      	ldr	r3, [sp, #12]
 800720c:	1d19      	adds	r1, r3, #4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	9103      	str	r1, [sp, #12]
 8007212:	2b00      	cmp	r3, #0
 8007214:	bfbb      	ittet	lt
 8007216:	425b      	neglt	r3, r3
 8007218:	f042 0202 	orrlt.w	r2, r2, #2
 800721c:	9307      	strge	r3, [sp, #28]
 800721e:	9307      	strlt	r3, [sp, #28]
 8007220:	bfb8      	it	lt
 8007222:	9204      	strlt	r2, [sp, #16]
 8007224:	7823      	ldrb	r3, [r4, #0]
 8007226:	2b2e      	cmp	r3, #46	; 0x2e
 8007228:	d10c      	bne.n	8007244 <_svfiprintf_r+0x130>
 800722a:	7863      	ldrb	r3, [r4, #1]
 800722c:	2b2a      	cmp	r3, #42	; 0x2a
 800722e:	d134      	bne.n	800729a <_svfiprintf_r+0x186>
 8007230:	9b03      	ldr	r3, [sp, #12]
 8007232:	1d1a      	adds	r2, r3, #4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	9203      	str	r2, [sp, #12]
 8007238:	2b00      	cmp	r3, #0
 800723a:	bfb8      	it	lt
 800723c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007240:	3402      	adds	r4, #2
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800730c <_svfiprintf_r+0x1f8>
 8007248:	7821      	ldrb	r1, [r4, #0]
 800724a:	2203      	movs	r2, #3
 800724c:	4650      	mov	r0, sl
 800724e:	f7f8 ffcf 	bl	80001f0 <memchr>
 8007252:	b138      	cbz	r0, 8007264 <_svfiprintf_r+0x150>
 8007254:	9b04      	ldr	r3, [sp, #16]
 8007256:	eba0 000a 	sub.w	r0, r0, sl
 800725a:	2240      	movs	r2, #64	; 0x40
 800725c:	4082      	lsls	r2, r0
 800725e:	4313      	orrs	r3, r2
 8007260:	3401      	adds	r4, #1
 8007262:	9304      	str	r3, [sp, #16]
 8007264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007268:	4825      	ldr	r0, [pc, #148]	; (8007300 <_svfiprintf_r+0x1ec>)
 800726a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800726e:	2206      	movs	r2, #6
 8007270:	f7f8 ffbe 	bl	80001f0 <memchr>
 8007274:	2800      	cmp	r0, #0
 8007276:	d038      	beq.n	80072ea <_svfiprintf_r+0x1d6>
 8007278:	4b22      	ldr	r3, [pc, #136]	; (8007304 <_svfiprintf_r+0x1f0>)
 800727a:	bb1b      	cbnz	r3, 80072c4 <_svfiprintf_r+0x1b0>
 800727c:	9b03      	ldr	r3, [sp, #12]
 800727e:	3307      	adds	r3, #7
 8007280:	f023 0307 	bic.w	r3, r3, #7
 8007284:	3308      	adds	r3, #8
 8007286:	9303      	str	r3, [sp, #12]
 8007288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800728a:	4433      	add	r3, r6
 800728c:	9309      	str	r3, [sp, #36]	; 0x24
 800728e:	e768      	b.n	8007162 <_svfiprintf_r+0x4e>
 8007290:	fb0c 3202 	mla	r2, ip, r2, r3
 8007294:	460c      	mov	r4, r1
 8007296:	2001      	movs	r0, #1
 8007298:	e7a6      	b.n	80071e8 <_svfiprintf_r+0xd4>
 800729a:	2300      	movs	r3, #0
 800729c:	3401      	adds	r4, #1
 800729e:	9305      	str	r3, [sp, #20]
 80072a0:	4619      	mov	r1, r3
 80072a2:	f04f 0c0a 	mov.w	ip, #10
 80072a6:	4620      	mov	r0, r4
 80072a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072ac:	3a30      	subs	r2, #48	; 0x30
 80072ae:	2a09      	cmp	r2, #9
 80072b0:	d903      	bls.n	80072ba <_svfiprintf_r+0x1a6>
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0c6      	beq.n	8007244 <_svfiprintf_r+0x130>
 80072b6:	9105      	str	r1, [sp, #20]
 80072b8:	e7c4      	b.n	8007244 <_svfiprintf_r+0x130>
 80072ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80072be:	4604      	mov	r4, r0
 80072c0:	2301      	movs	r3, #1
 80072c2:	e7f0      	b.n	80072a6 <_svfiprintf_r+0x192>
 80072c4:	ab03      	add	r3, sp, #12
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	462a      	mov	r2, r5
 80072ca:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <_svfiprintf_r+0x1f4>)
 80072cc:	a904      	add	r1, sp, #16
 80072ce:	4638      	mov	r0, r7
 80072d0:	f3af 8000 	nop.w
 80072d4:	1c42      	adds	r2, r0, #1
 80072d6:	4606      	mov	r6, r0
 80072d8:	d1d6      	bne.n	8007288 <_svfiprintf_r+0x174>
 80072da:	89ab      	ldrh	r3, [r5, #12]
 80072dc:	065b      	lsls	r3, r3, #25
 80072de:	f53f af2d 	bmi.w	800713c <_svfiprintf_r+0x28>
 80072e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072e4:	b01d      	add	sp, #116	; 0x74
 80072e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ea:	ab03      	add	r3, sp, #12
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	462a      	mov	r2, r5
 80072f0:	4b05      	ldr	r3, [pc, #20]	; (8007308 <_svfiprintf_r+0x1f4>)
 80072f2:	a904      	add	r1, sp, #16
 80072f4:	4638      	mov	r0, r7
 80072f6:	f000 f879 	bl	80073ec <_printf_i>
 80072fa:	e7eb      	b.n	80072d4 <_svfiprintf_r+0x1c0>
 80072fc:	08007c7c 	.word	0x08007c7c
 8007300:	08007c86 	.word	0x08007c86
 8007304:	00000000 	.word	0x00000000
 8007308:	08007061 	.word	0x08007061
 800730c:	08007c82 	.word	0x08007c82

08007310 <_printf_common>:
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	4616      	mov	r6, r2
 8007316:	4699      	mov	r9, r3
 8007318:	688a      	ldr	r2, [r1, #8]
 800731a:	690b      	ldr	r3, [r1, #16]
 800731c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007320:	4293      	cmp	r3, r2
 8007322:	bfb8      	it	lt
 8007324:	4613      	movlt	r3, r2
 8007326:	6033      	str	r3, [r6, #0]
 8007328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800732c:	4607      	mov	r7, r0
 800732e:	460c      	mov	r4, r1
 8007330:	b10a      	cbz	r2, 8007336 <_printf_common+0x26>
 8007332:	3301      	adds	r3, #1
 8007334:	6033      	str	r3, [r6, #0]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	0699      	lsls	r1, r3, #26
 800733a:	bf42      	ittt	mi
 800733c:	6833      	ldrmi	r3, [r6, #0]
 800733e:	3302      	addmi	r3, #2
 8007340:	6033      	strmi	r3, [r6, #0]
 8007342:	6825      	ldr	r5, [r4, #0]
 8007344:	f015 0506 	ands.w	r5, r5, #6
 8007348:	d106      	bne.n	8007358 <_printf_common+0x48>
 800734a:	f104 0a19 	add.w	sl, r4, #25
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	6832      	ldr	r2, [r6, #0]
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	42ab      	cmp	r3, r5
 8007356:	dc26      	bgt.n	80073a6 <_printf_common+0x96>
 8007358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800735c:	1e13      	subs	r3, r2, #0
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	bf18      	it	ne
 8007362:	2301      	movne	r3, #1
 8007364:	0692      	lsls	r2, r2, #26
 8007366:	d42b      	bmi.n	80073c0 <_printf_common+0xb0>
 8007368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800736c:	4649      	mov	r1, r9
 800736e:	4638      	mov	r0, r7
 8007370:	47c0      	blx	r8
 8007372:	3001      	adds	r0, #1
 8007374:	d01e      	beq.n	80073b4 <_printf_common+0xa4>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	6922      	ldr	r2, [r4, #16]
 800737a:	f003 0306 	and.w	r3, r3, #6
 800737e:	2b04      	cmp	r3, #4
 8007380:	bf02      	ittt	eq
 8007382:	68e5      	ldreq	r5, [r4, #12]
 8007384:	6833      	ldreq	r3, [r6, #0]
 8007386:	1aed      	subeq	r5, r5, r3
 8007388:	68a3      	ldr	r3, [r4, #8]
 800738a:	bf0c      	ite	eq
 800738c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007390:	2500      	movne	r5, #0
 8007392:	4293      	cmp	r3, r2
 8007394:	bfc4      	itt	gt
 8007396:	1a9b      	subgt	r3, r3, r2
 8007398:	18ed      	addgt	r5, r5, r3
 800739a:	2600      	movs	r6, #0
 800739c:	341a      	adds	r4, #26
 800739e:	42b5      	cmp	r5, r6
 80073a0:	d11a      	bne.n	80073d8 <_printf_common+0xc8>
 80073a2:	2000      	movs	r0, #0
 80073a4:	e008      	b.n	80073b8 <_printf_common+0xa8>
 80073a6:	2301      	movs	r3, #1
 80073a8:	4652      	mov	r2, sl
 80073aa:	4649      	mov	r1, r9
 80073ac:	4638      	mov	r0, r7
 80073ae:	47c0      	blx	r8
 80073b0:	3001      	adds	r0, #1
 80073b2:	d103      	bne.n	80073bc <_printf_common+0xac>
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073bc:	3501      	adds	r5, #1
 80073be:	e7c6      	b.n	800734e <_printf_common+0x3e>
 80073c0:	18e1      	adds	r1, r4, r3
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	2030      	movs	r0, #48	; 0x30
 80073c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073ca:	4422      	add	r2, r4
 80073cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073d4:	3302      	adds	r3, #2
 80073d6:	e7c7      	b.n	8007368 <_printf_common+0x58>
 80073d8:	2301      	movs	r3, #1
 80073da:	4622      	mov	r2, r4
 80073dc:	4649      	mov	r1, r9
 80073de:	4638      	mov	r0, r7
 80073e0:	47c0      	blx	r8
 80073e2:	3001      	adds	r0, #1
 80073e4:	d0e6      	beq.n	80073b4 <_printf_common+0xa4>
 80073e6:	3601      	adds	r6, #1
 80073e8:	e7d9      	b.n	800739e <_printf_common+0x8e>
	...

080073ec <_printf_i>:
 80073ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	7e0f      	ldrb	r7, [r1, #24]
 80073f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073f4:	2f78      	cmp	r7, #120	; 0x78
 80073f6:	4691      	mov	r9, r2
 80073f8:	4680      	mov	r8, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	469a      	mov	sl, r3
 80073fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007402:	d807      	bhi.n	8007414 <_printf_i+0x28>
 8007404:	2f62      	cmp	r7, #98	; 0x62
 8007406:	d80a      	bhi.n	800741e <_printf_i+0x32>
 8007408:	2f00      	cmp	r7, #0
 800740a:	f000 80d4 	beq.w	80075b6 <_printf_i+0x1ca>
 800740e:	2f58      	cmp	r7, #88	; 0x58
 8007410:	f000 80c0 	beq.w	8007594 <_printf_i+0x1a8>
 8007414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800741c:	e03a      	b.n	8007494 <_printf_i+0xa8>
 800741e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007422:	2b15      	cmp	r3, #21
 8007424:	d8f6      	bhi.n	8007414 <_printf_i+0x28>
 8007426:	a101      	add	r1, pc, #4	; (adr r1, 800742c <_printf_i+0x40>)
 8007428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800742c:	08007485 	.word	0x08007485
 8007430:	08007499 	.word	0x08007499
 8007434:	08007415 	.word	0x08007415
 8007438:	08007415 	.word	0x08007415
 800743c:	08007415 	.word	0x08007415
 8007440:	08007415 	.word	0x08007415
 8007444:	08007499 	.word	0x08007499
 8007448:	08007415 	.word	0x08007415
 800744c:	08007415 	.word	0x08007415
 8007450:	08007415 	.word	0x08007415
 8007454:	08007415 	.word	0x08007415
 8007458:	0800759d 	.word	0x0800759d
 800745c:	080074c5 	.word	0x080074c5
 8007460:	08007557 	.word	0x08007557
 8007464:	08007415 	.word	0x08007415
 8007468:	08007415 	.word	0x08007415
 800746c:	080075bf 	.word	0x080075bf
 8007470:	08007415 	.word	0x08007415
 8007474:	080074c5 	.word	0x080074c5
 8007478:	08007415 	.word	0x08007415
 800747c:	08007415 	.word	0x08007415
 8007480:	0800755f 	.word	0x0800755f
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	602a      	str	r2, [r5, #0]
 800748c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007494:	2301      	movs	r3, #1
 8007496:	e09f      	b.n	80075d8 <_printf_i+0x1ec>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	682b      	ldr	r3, [r5, #0]
 800749c:	0607      	lsls	r7, r0, #24
 800749e:	f103 0104 	add.w	r1, r3, #4
 80074a2:	6029      	str	r1, [r5, #0]
 80074a4:	d501      	bpl.n	80074aa <_printf_i+0xbe>
 80074a6:	681e      	ldr	r6, [r3, #0]
 80074a8:	e003      	b.n	80074b2 <_printf_i+0xc6>
 80074aa:	0646      	lsls	r6, r0, #25
 80074ac:	d5fb      	bpl.n	80074a6 <_printf_i+0xba>
 80074ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80074b2:	2e00      	cmp	r6, #0
 80074b4:	da03      	bge.n	80074be <_printf_i+0xd2>
 80074b6:	232d      	movs	r3, #45	; 0x2d
 80074b8:	4276      	negs	r6, r6
 80074ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074be:	485a      	ldr	r0, [pc, #360]	; (8007628 <_printf_i+0x23c>)
 80074c0:	230a      	movs	r3, #10
 80074c2:	e012      	b.n	80074ea <_printf_i+0xfe>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	6820      	ldr	r0, [r4, #0]
 80074c8:	1d19      	adds	r1, r3, #4
 80074ca:	6029      	str	r1, [r5, #0]
 80074cc:	0605      	lsls	r5, r0, #24
 80074ce:	d501      	bpl.n	80074d4 <_printf_i+0xe8>
 80074d0:	681e      	ldr	r6, [r3, #0]
 80074d2:	e002      	b.n	80074da <_printf_i+0xee>
 80074d4:	0641      	lsls	r1, r0, #25
 80074d6:	d5fb      	bpl.n	80074d0 <_printf_i+0xe4>
 80074d8:	881e      	ldrh	r6, [r3, #0]
 80074da:	4853      	ldr	r0, [pc, #332]	; (8007628 <_printf_i+0x23c>)
 80074dc:	2f6f      	cmp	r7, #111	; 0x6f
 80074de:	bf0c      	ite	eq
 80074e0:	2308      	moveq	r3, #8
 80074e2:	230a      	movne	r3, #10
 80074e4:	2100      	movs	r1, #0
 80074e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ea:	6865      	ldr	r5, [r4, #4]
 80074ec:	60a5      	str	r5, [r4, #8]
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	bfa2      	ittt	ge
 80074f2:	6821      	ldrge	r1, [r4, #0]
 80074f4:	f021 0104 	bicge.w	r1, r1, #4
 80074f8:	6021      	strge	r1, [r4, #0]
 80074fa:	b90e      	cbnz	r6, 8007500 <_printf_i+0x114>
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	d04b      	beq.n	8007598 <_printf_i+0x1ac>
 8007500:	4615      	mov	r5, r2
 8007502:	fbb6 f1f3 	udiv	r1, r6, r3
 8007506:	fb03 6711 	mls	r7, r3, r1, r6
 800750a:	5dc7      	ldrb	r7, [r0, r7]
 800750c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007510:	4637      	mov	r7, r6
 8007512:	42bb      	cmp	r3, r7
 8007514:	460e      	mov	r6, r1
 8007516:	d9f4      	bls.n	8007502 <_printf_i+0x116>
 8007518:	2b08      	cmp	r3, #8
 800751a:	d10b      	bne.n	8007534 <_printf_i+0x148>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	07de      	lsls	r6, r3, #31
 8007520:	d508      	bpl.n	8007534 <_printf_i+0x148>
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	6861      	ldr	r1, [r4, #4]
 8007526:	4299      	cmp	r1, r3
 8007528:	bfde      	ittt	le
 800752a:	2330      	movle	r3, #48	; 0x30
 800752c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007530:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007534:	1b52      	subs	r2, r2, r5
 8007536:	6122      	str	r2, [r4, #16]
 8007538:	f8cd a000 	str.w	sl, [sp]
 800753c:	464b      	mov	r3, r9
 800753e:	aa03      	add	r2, sp, #12
 8007540:	4621      	mov	r1, r4
 8007542:	4640      	mov	r0, r8
 8007544:	f7ff fee4 	bl	8007310 <_printf_common>
 8007548:	3001      	adds	r0, #1
 800754a:	d14a      	bne.n	80075e2 <_printf_i+0x1f6>
 800754c:	f04f 30ff 	mov.w	r0, #4294967295
 8007550:	b004      	add	sp, #16
 8007552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	f043 0320 	orr.w	r3, r3, #32
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	4833      	ldr	r0, [pc, #204]	; (800762c <_printf_i+0x240>)
 8007560:	2778      	movs	r7, #120	; 0x78
 8007562:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	6829      	ldr	r1, [r5, #0]
 800756a:	061f      	lsls	r7, r3, #24
 800756c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007570:	d402      	bmi.n	8007578 <_printf_i+0x18c>
 8007572:	065f      	lsls	r7, r3, #25
 8007574:	bf48      	it	mi
 8007576:	b2b6      	uxthmi	r6, r6
 8007578:	07df      	lsls	r7, r3, #31
 800757a:	bf48      	it	mi
 800757c:	f043 0320 	orrmi.w	r3, r3, #32
 8007580:	6029      	str	r1, [r5, #0]
 8007582:	bf48      	it	mi
 8007584:	6023      	strmi	r3, [r4, #0]
 8007586:	b91e      	cbnz	r6, 8007590 <_printf_i+0x1a4>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	f023 0320 	bic.w	r3, r3, #32
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	2310      	movs	r3, #16
 8007592:	e7a7      	b.n	80074e4 <_printf_i+0xf8>
 8007594:	4824      	ldr	r0, [pc, #144]	; (8007628 <_printf_i+0x23c>)
 8007596:	e7e4      	b.n	8007562 <_printf_i+0x176>
 8007598:	4615      	mov	r5, r2
 800759a:	e7bd      	b.n	8007518 <_printf_i+0x12c>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	6826      	ldr	r6, [r4, #0]
 80075a0:	6961      	ldr	r1, [r4, #20]
 80075a2:	1d18      	adds	r0, r3, #4
 80075a4:	6028      	str	r0, [r5, #0]
 80075a6:	0635      	lsls	r5, r6, #24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0x1c4>
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0x1ca>
 80075b0:	0670      	lsls	r0, r6, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0x1c0>
 80075b4:	8019      	strh	r1, [r3, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	4615      	mov	r5, r2
 80075bc:	e7bc      	b.n	8007538 <_printf_i+0x14c>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	2100      	movs	r1, #0
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7f8 fe10 	bl	80001f0 <memchr>
 80075d0:	b108      	cbz	r0, 80075d6 <_printf_i+0x1ea>
 80075d2:	1b40      	subs	r0, r0, r5
 80075d4:	6060      	str	r0, [r4, #4]
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	e7aa      	b.n	8007538 <_printf_i+0x14c>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d0ad      	beq.n	800754c <_printf_i+0x160>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	079b      	lsls	r3, r3, #30
 80075f4:	d413      	bmi.n	800761e <_printf_i+0x232>
 80075f6:	68e0      	ldr	r0, [r4, #12]
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	4298      	cmp	r0, r3
 80075fc:	bfb8      	it	lt
 80075fe:	4618      	movlt	r0, r3
 8007600:	e7a6      	b.n	8007550 <_printf_i+0x164>
 8007602:	2301      	movs	r3, #1
 8007604:	4632      	mov	r2, r6
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d09d      	beq.n	800754c <_printf_i+0x160>
 8007610:	3501      	adds	r5, #1
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	1a5b      	subs	r3, r3, r1
 8007618:	42ab      	cmp	r3, r5
 800761a:	dcf2      	bgt.n	8007602 <_printf_i+0x216>
 800761c:	e7eb      	b.n	80075f6 <_printf_i+0x20a>
 800761e:	2500      	movs	r5, #0
 8007620:	f104 0619 	add.w	r6, r4, #25
 8007624:	e7f5      	b.n	8007612 <_printf_i+0x226>
 8007626:	bf00      	nop
 8007628:	08007c8d 	.word	0x08007c8d
 800762c:	08007c9e 	.word	0x08007c9e

08007630 <memmove>:
 8007630:	4288      	cmp	r0, r1
 8007632:	b510      	push	{r4, lr}
 8007634:	eb01 0402 	add.w	r4, r1, r2
 8007638:	d902      	bls.n	8007640 <memmove+0x10>
 800763a:	4284      	cmp	r4, r0
 800763c:	4623      	mov	r3, r4
 800763e:	d807      	bhi.n	8007650 <memmove+0x20>
 8007640:	1e43      	subs	r3, r0, #1
 8007642:	42a1      	cmp	r1, r4
 8007644:	d008      	beq.n	8007658 <memmove+0x28>
 8007646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800764a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800764e:	e7f8      	b.n	8007642 <memmove+0x12>
 8007650:	4402      	add	r2, r0
 8007652:	4601      	mov	r1, r0
 8007654:	428a      	cmp	r2, r1
 8007656:	d100      	bne.n	800765a <memmove+0x2a>
 8007658:	bd10      	pop	{r4, pc}
 800765a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800765e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007662:	e7f7      	b.n	8007654 <memmove+0x24>

08007664 <memcpy>:
 8007664:	440a      	add	r2, r1
 8007666:	4291      	cmp	r1, r2
 8007668:	f100 33ff 	add.w	r3, r0, #4294967295
 800766c:	d100      	bne.n	8007670 <memcpy+0xc>
 800766e:	4770      	bx	lr
 8007670:	b510      	push	{r4, lr}
 8007672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800767a:	4291      	cmp	r1, r2
 800767c:	d1f9      	bne.n	8007672 <memcpy+0xe>
 800767e:	bd10      	pop	{r4, pc}

08007680 <_realloc_r>:
 8007680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007684:	4680      	mov	r8, r0
 8007686:	4614      	mov	r4, r2
 8007688:	460e      	mov	r6, r1
 800768a:	b921      	cbnz	r1, 8007696 <_realloc_r+0x16>
 800768c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007690:	4611      	mov	r1, r2
 8007692:	f7ff bb51 	b.w	8006d38 <_malloc_r>
 8007696:	b92a      	cbnz	r2, 80076a4 <_realloc_r+0x24>
 8007698:	f7ff fc96 	bl	8006fc8 <_free_r>
 800769c:	4625      	mov	r5, r4
 800769e:	4628      	mov	r0, r5
 80076a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a4:	f000 f81b 	bl	80076de <_malloc_usable_size_r>
 80076a8:	4284      	cmp	r4, r0
 80076aa:	4607      	mov	r7, r0
 80076ac:	d802      	bhi.n	80076b4 <_realloc_r+0x34>
 80076ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80076b2:	d812      	bhi.n	80076da <_realloc_r+0x5a>
 80076b4:	4621      	mov	r1, r4
 80076b6:	4640      	mov	r0, r8
 80076b8:	f7ff fb3e 	bl	8006d38 <_malloc_r>
 80076bc:	4605      	mov	r5, r0
 80076be:	2800      	cmp	r0, #0
 80076c0:	d0ed      	beq.n	800769e <_realloc_r+0x1e>
 80076c2:	42bc      	cmp	r4, r7
 80076c4:	4622      	mov	r2, r4
 80076c6:	4631      	mov	r1, r6
 80076c8:	bf28      	it	cs
 80076ca:	463a      	movcs	r2, r7
 80076cc:	f7ff ffca 	bl	8007664 <memcpy>
 80076d0:	4631      	mov	r1, r6
 80076d2:	4640      	mov	r0, r8
 80076d4:	f7ff fc78 	bl	8006fc8 <_free_r>
 80076d8:	e7e1      	b.n	800769e <_realloc_r+0x1e>
 80076da:	4635      	mov	r5, r6
 80076dc:	e7df      	b.n	800769e <_realloc_r+0x1e>

080076de <_malloc_usable_size_r>:
 80076de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e2:	1f18      	subs	r0, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	bfbc      	itt	lt
 80076e8:	580b      	ldrlt	r3, [r1, r0]
 80076ea:	18c0      	addlt	r0, r0, r3
 80076ec:	4770      	bx	lr
	...

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
