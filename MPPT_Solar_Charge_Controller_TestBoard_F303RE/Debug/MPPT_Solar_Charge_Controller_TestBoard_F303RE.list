
MPPT_Solar_Charge_Controller_TestBoard_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001314  0800bca8  0800bca8  0001bca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfbc  0800cfbc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cfbc  0800cfbc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cfbc  0800cfbc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfbc  0800cfbc  0001cfbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfc0  0800cfc0  0001cfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cfc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000754  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000934  20000934  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00029328  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000050f0  00000000  00000000  0004957b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001830  00000000  00000000  0004e670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012c2  00000000  00000000  0004fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000289a8  00000000  00000000  00051162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021e71  00000000  00000000  00079b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e335d  00000000  00000000  0009b97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007990  00000000  00000000  0017ecd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00186668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bc90 	.word	0x0800bc90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bc90 	.word	0x0800bc90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <_ZN4blib6AnalogC1Ev>:

#include "Analog.h"

namespace blib
{
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f858 	bl	8000c78 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <_ZN4blib6AnalogC1Ev+0x44>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <_ZN4blib6AnalogC1Ev+0x48>)
 8000be2:	619a      	str	r2, [r3, #24]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <_ZN4blib6AnalogC1Ev+0x4c>)
 8000be8:	61da      	str	r2, [r3, #28]
    {
        sampling();
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f834 	bl	8000c58 <_ZN4blib6Analog8samplingEv>
    }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	0800cb6c 	.word	0x0800cb6c
 8000c00:	2000020c 	.word	0x2000020c
 8000c04:	2000025c 	.word	0x2000025c

08000c08 <_ZN4blib6AnalogD1Ev>:

    Analog::~Analog()
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <_ZN4blib6AnalogD1Ev+0x2c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 ffee 	bl	8003bfc <HAL_ADC_Stop_DMA>
    Analog::~Analog()
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f838 	bl	8000c98 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
    }
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	0800cb6c 	.word	0x0800cb6c

08000c38 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    }
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ffe1 	bl	8000c08 <_ZN4blib6AnalogD1Ev>
 8000c46:	2134      	movs	r1, #52	; 0x34
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f008 f95f 	bl	8008f0c <_ZdlPvj>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6998      	ldr	r0, [r3, #24]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3304      	adds	r3, #4
 8000c68:	2205      	movs	r2, #5
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f002 feaa 	bl	80039c4 <HAL_ADC_Start_DMA>
    }
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
                {
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev+0x1c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
                }
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	0800cb7c 	.word	0x0800cb7c

08000c98 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>:
                virtual ~Singleton()
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
                {
                }
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev+0x1c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	0800cb7c 	.word	0x0800cb7c

08000cb8 <_ZN4blib2dp9SingletonINS_6AnalogEED0Ev>:
                virtual ~Singleton()
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
                }
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe9 	bl	8000c98 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f008 f91f 	bl	8008f0c <_ZdlPvj>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_ZN4blib6Logger5printEPKc+0x2c>)
 8000ce2:	681c      	ldr	r4, [r3, #0]
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff facb 	bl	8000280 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f007 f933 	bl	8007f60 <HAL_UART_Transmit>
            }
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd90      	pop	{r4, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000014 	.word	0x20000014

08000d08 <_ZN4blib13ChargeControlC1Ev>:
        {
            return value;    // Nếu giá trị nằm trong khoảng, trả về giá trị ban đầu
        }
    }

    ChargeControl::ChargeControl()
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f836 	bl	8000d84 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <_ZN4blib13ChargeControlC1Ev+0x34>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	721a      	strb	r2, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	725a      	strb	r2, [r3, #9]
    {

    }
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	0800cb8c 	.word	0x0800cb8c

08000d40 <_ZN4blib13ChargeControlD1Ev>:
    ChargeControl::~ChargeControl()
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_ZN4blib13ChargeControlD1Ev+0x20>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f827 	bl	8000da4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
    {

    }
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800cb8c 	.word	0x0800cb8c

08000d64 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    }
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ffe7 	bl	8000d40 <_ZN4blib13ChargeControlD1Ev>
 8000d72:	211c      	movs	r1, #28
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f008 f8c9 	bl	8008f0c <_ZdlPvj>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>:
                Singleton()
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
                {
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev+0x1c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
                }
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	0800cb9c 	.word	0x0800cb9c

08000da4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>:
                virtual ~Singleton()
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
                }
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev+0x1c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	0800cb9c 	.word	0x0800cb9c

08000dc4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED0Ev>:
                virtual ~Singleton()
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
                }
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ffe9 	bl	8000da4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f008 f899 	bl	8008f0c <_ZdlPvj>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 8000de4:	b598      	push	{r3, r4, r7, lr}
 8000de6:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d109      	bne.n	8000e04 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x20>
                        mInstance = new T();
 8000df0:	2034      	movs	r0, #52	; 0x34
 8000df2:	f008 f88d 	bl	8008f10 <_Znwj>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461c      	mov	r4, r3
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f7ff fedc 	bl	8000bb8 <_ZN4blib6AnalogC1Ev>
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8000e02:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8000e04:	4b01      	ldr	r3, [pc, #4]	; (8000e0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8000e06:	681b      	ldr	r3, [r3, #0]
                }
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd98      	pop	{r3, r4, r7, pc}
 8000e0c:	200001fc 	.word	0x200001fc

08000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8000e20:	f7ff ff5a 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8000e36:	f008 fe73 	bl	8009b20 <sniprintf>
                print(mBuffer);
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8000e3c:	f7ff ff4c 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 8000e42:	f7ff ff49 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
            }
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	0800bce4 	.word	0x0800bce4
 8000e54:	200003e4 	.word	0x200003e4
 8000e58:	0800bcec 	.word	0x0800bcec

08000e5c <_ZN4blib7MonitorC1Ev>:
#include "Monitor.h"
#include "Button.h"
#include "Analog.h"
namespace blib
{
    Monitor::Monitor() : mLcdDisplay(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f89a 	bl	8000fa0 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>
 8000e6c:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <_ZN4blib7MonitorC1Ev+0x68>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	721a      	strb	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	725a      	strb	r2, [r3, #9]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2201      	movs	r2, #1
 8000e88:	729a      	strb	r2, [r3, #10]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	72da      	strb	r2, [r3, #11]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f103 0014 	add.w	r0, r3, #20
 8000ea2:	234e      	movs	r3, #78	; 0x4e
 8000ea4:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <_ZN4blib7MonitorC1Ev+0x6c>)
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f007 fd56 	bl	8008958 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>
    {
        showInit();
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f835 	bl	8000f1c <_ZN4blib7Monitor8showInitEv>
        HAL_Delay(1500);
 8000eb2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000eb6:	f002 fb53 	bl	8003560 <HAL_Delay>

    }
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	0800cbac 	.word	0x0800cbac
 8000ec8:	200002a0 	.word	0x200002a0

08000ecc <_ZN4blib7MonitorD1Ev>:
    Monitor::~Monitor()
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <_ZN4blib7MonitorD1Ev+0x2c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3314      	adds	r3, #20
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f007 fd58 	bl	8008994 <_ZN4blib3LcdD1Ev>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f86a 	bl	8000fc0 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
    {

    }
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	0800cbac 	.word	0x0800cbac

08000efc <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
    }
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ffe1 	bl	8000ecc <_ZN4blib7MonitorD1Ev>
 8000f0a:	2128      	movs	r1, #40	; 0x28
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f007 fffd 	bl	8008f0c <_ZdlPvj>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
        LOGI();
 8000f24:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <_ZN4blib7Monitor8showInitEv+0x68>)
 8000f26:	221c      	movs	r2, #28
 8000f28:	4917      	ldr	r1, [pc, #92]	; (8000f88 <_ZN4blib7Monitor8showInitEv+0x6c>)
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <_ZN4blib7Monitor8showInitEv+0x70>)
 8000f2c:	f7ff ff70 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        mLcdDisplay.clearDisplay();
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3314      	adds	r3, #20
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 feeb 	bl	8008d10 <_ZN4blib3Lcd12clearDisplayEv>
        mLcdDisplay.displayLine(0, 2, "DO AN TOT NGHIEP");
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f103 0014 	add.w	r0, r3, #20
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <_ZN4blib7Monitor8showInitEv+0x74>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	2100      	movs	r1, #0
 8000f46:	f007 fdc1 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(1, 2, "NAM HOC: 2023-2024");
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f103 0014 	add.w	r0, r3, #20
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_ZN4blib7Monitor8showInitEv+0x78>)
 8000f52:	2202      	movs	r2, #2
 8000f54:	2101      	movs	r1, #1
 8000f56:	f007 fdb9 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(2, 2, "LOP: DTD61DH");
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f103 0014 	add.w	r0, r3, #20
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <_ZN4blib7Monitor8showInitEv+0x7c>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	2102      	movs	r1, #2
 8000f66:	f007 fdb1 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(3, 1, "DAI HOC HANG HAI VN");
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f103 0014 	add.w	r0, r3, #20
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <_ZN4blib7Monitor8showInitEv+0x80>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	2103      	movs	r1, #3
 8000f76:	f007 fda9 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	0800bcf0 	.word	0x0800bcf0
 8000f88:	0800bcfc 	.word	0x0800bcfc
 8000f8c:	0800bd08 	.word	0x0800bd08
 8000f90:	0800bd18 	.word	0x0800bd18
 8000f94:	0800bd2c 	.word	0x0800bd2c
 8000f98:	0800bd40 	.word	0x0800bd40
 8000f9c:	0800bd50 	.word	0x0800bd50

08000fa0 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>:
                Singleton()
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
                {
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev+0x1c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
                }
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	0800cbbc 	.word	0x0800cbbc

08000fc0 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>:
                virtual ~Singleton()
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
                }
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev+0x1c>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	0800cbbc 	.word	0x0800cbbc

08000fe0 <_ZN4blib2dp9SingletonINS_7MonitorEED0Ev>:
                virtual ~Singleton()
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
                }
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffe9 	bl	8000fc0 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
 8000fee:	2104      	movs	r1, #4
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f007 ff8b 	bl	8008f0c <_ZdlPvj>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_ZN4blib11LcdSimulateC1Ev>:
    using Callback = void (LcdSimulate::*)();

    class LcdSimulate : public dp::Singleton<LcdSimulate>
    {
        public:
            LcdSimulate() : mLcd(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	f001 ff04 	bl	8002e18 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev>
 8001010:	4a0a      	ldr	r2, [pc, #40]	; (800103c <_ZN4blib11LcdSimulateC1Ev+0x3c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f103 000c 	add.w	r0, r3, #12
 800101c:	234e      	movs	r3, #78	; 0x4e
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <_ZN4blib11LcdSimulateC1Ev+0x40>)
 8001020:	2101      	movs	r1, #1
 8001022:	f007 fc99 	bl	8008958 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>
            {
                mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <_ZN4blib11LcdSimulateC1Ev+0x44>)
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
            }
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	0800cbcc 	.word	0x0800cbcc
 8001040:	200002a0 	.word	0x200002a0
 8001044:	080010e1 	.word	0x080010e1

08001048 <_ZN4blib11LcdSimulateD1Ev>:
            virtual ~LcdSimulate()
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
            {
 8001050:	4a08      	ldr	r2, [pc, #32]	; (8001074 <_ZN4blib11LcdSimulateD1Ev+0x2c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	330c      	adds	r3, #12
 800105a:	4618      	mov	r0, r3
 800105c:	f007 fc9a 	bl	8008994 <_ZN4blib3LcdD1Ev>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fee8 	bl	8002e38 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>

            }
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	0800cbcc 	.word	0x0800cbcc

08001078 <_ZN4blib11LcdSimulateD0Ev>:
            virtual ~LcdSimulate()
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
            }
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffe1 	bl	8001048 <_ZN4blib11LcdSimulateD1Ev>
 8001086:	2120      	movs	r1, #32
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f007 ff3f 	bl	8008f0c <_ZdlPvj>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4618      	mov	r0, r3
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <_ZN4blib11LcdSimulate3runEv>:
            void run()
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
            {
                (LcdSimulate::getInstance().*mCallback)();
 80010a0:	f001 feea 	bl	8002e78 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 80010a4:	4603      	mov	r3, r0
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6892      	ldr	r2, [r2, #8]
 80010aa:	1052      	asrs	r2, r2, #1
 80010ac:	1899      	adds	r1, r3, r2
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6892      	ldr	r2, [r2, #8]
 80010b2:	f002 0201 	and.w	r2, r2, #1
 80010b6:	2a00      	cmp	r2, #0
 80010b8:	d102      	bne.n	80010c0 <_ZN4blib11LcdSimulate3runEv+0x28>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	e008      	b.n	80010d2 <_ZN4blib11LcdSimulate3runEv+0x3a>
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6892      	ldr	r2, [r2, #8]
 80010c4:	1052      	asrs	r2, r2, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6852      	ldr	r2, [r2, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4608      	mov	r0, r1
 80010d4:	4798      	blx	r3
            }
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv>:
            void impl_1_HomeScreen()
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80010e8:	f001 fedc 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80010ec:	60f8      	str	r0, [r7, #12]

                mLcd.clearDisplay();
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	330c      	adds	r3, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f007 fe0c 	bl	8008d10 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 2, "HOME SCREEN");
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f103 000c 	add.w	r0, r3, #12
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xbc>)
 8001100:	2202      	movs	r2, #2
 8001102:	2100      	movs	r1, #0
 8001104:	f007 fce2 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 2, "HOME SCREEN");
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 000c 	add.w	r0, r3, #12
 800110e:	4b23      	ldr	r3, [pc, #140]	; (800119c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xbc>)
 8001110:	2202      	movs	r2, #2
 8001112:	2101      	movs	r1, #1
 8001114:	f007 fcda 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 2, "HOME SCREEN");
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f103 000c 	add.w	r0, r3, #12
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xbc>)
 8001120:	2202      	movs	r2, #2
 8001122:	2102      	movs	r1, #2
 8001124:	f007 fcd2 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 2, "Press any button");
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f103 000c 	add.w	r0, r3, #12
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xc0>)
 8001130:	2202      	movs	r2, #2
 8001132:	2103      	movs	r1, #3
 8001134:	f007 fcca 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>

                // Nhan nut bat ky thi se chuyen sang man hinh menu
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f007 fbc7 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 800113e:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001140:	2b01      	cmp	r3, #1
 8001142:	d011      	beq.n	8001168 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x88>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	f007 fbc1 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 800114a:	4603      	mov	r3, r0
 800114c:	2b02      	cmp	r3, #2
 800114e:	d00b      	beq.n	8001168 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x88>
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f007 fbbb 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001156:	4603      	mov	r3, r0
 8001158:	2b03      	cmp	r3, #3
 800115a:	d005      	beq.n	8001168 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x88>
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f007 fbb5 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001162:	4603      	mov	r3, r0
 8001164:	2b04      	cmp	r3, #4
 8001166:	d101      	bne.n	800116c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x8c>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x8e>
 800116c:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00f      	beq.n	8001192 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xb2>
                {
                    LOGI("Go to menu screen");
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xc4>)
 8001174:	223d      	movs	r2, #61	; 0x3d
 8001176:	490c      	ldr	r1, [pc, #48]	; (80011a8 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xc8>)
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xcc>)
 800117a:	f7ff fe49 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xd0>)
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
                    button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800118a:	2100      	movs	r1, #0
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f007 fb8f 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                }
            }
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	0800c20c 	.word	0x0800c20c
 80011a0:	0800c218 	.word	0x0800c218
 80011a4:	0800c22c 	.word	0x0800c22c
 80011a8:	0800c240 	.word	0x0800c240
 80011ac:	0800c24c 	.word	0x0800c24c
 80011b0:	080011b5 	.word	0x080011b5

080011b4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv>:

            void impl_2_MenuScreen()
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80011bc:	f001 fe72 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80011c0:	60f8      	str	r0, [r7, #12]
//                    return;
//                }

                static int arrowLine = 0;

                mLcd.clearDisplay();
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	330c      	adds	r3, #12
 80011c6:	4618      	mov	r0, r3
 80011c8:	f007 fda2 	bl	8008d10 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f103 000c 	add.w	r0, r3, #12
 80011d2:	4b56      	ldr	r3, [pc, #344]	; (800132c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x178>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	2100      	movs	r1, #0
 80011d8:	f007 fc78 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "2 SETTING MODE");
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f103 000c 	add.w	r0, r3, #12
 80011e2:	4b53      	ldr	r3, [pc, #332]	; (8001330 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x17c>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	2101      	movs	r1, #1
 80011e8:	f007 fc70 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "3 ABOUT");
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f103 000c 	add.w	r0, r3, #12
 80011f2:	4b50      	ldr	r3, [pc, #320]	; (8001334 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x180>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	2102      	movs	r1, #2
 80011f8:	f007 fc68 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f103 000c 	add.w	r0, r3, #12
 8001202:	4b4d      	ldr	r3, [pc, #308]	; (8001338 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x184>)
 8001204:	2201      	movs	r2, #1
 8001206:	2103      	movs	r1, #3
 8001208:	f007 fc60 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>

                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f007 fb5d 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001212:	4603      	mov	r3, r0
 8001214:	2b01      	cmp	r3, #1
 8001216:	bf0c      	ite	eq
 8001218:	2301      	moveq	r3, #1
 800121a:	2300      	movne	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00d      	beq.n	800123e <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x8a>
                {
                    if (arrowLine == 0)
 8001222:	4b46      	ldr	r3, [pc, #280]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x7e>
                    {
                        arrowLine = 2;
 800122a:	4b44      	ldr	r3, [pc, #272]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 800122c:	2202      	movs	r2, #2
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e073      	b.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                    }
                    else
                    {
                        arrowLine--;
 8001232:	4b42      	ldr	r3, [pc, #264]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3b01      	subs	r3, #1
 8001238:	4a40      	ldr	r2, [pc, #256]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e06d      	b.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 800123e:	68f8      	ldr	r0, [r7, #12]
 8001240:	f007 fb44 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001244:	4603      	mov	r3, r0
 8001246:	2b02      	cmp	r3, #2
 8001248:	bf0c      	ite	eq
 800124a:	2301      	moveq	r3, #1
 800124c:	2300      	movne	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00d      	beq.n	8001270 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xbc>
                {
                    if (arrowLine == 2)
 8001254:	4b39      	ldr	r3, [pc, #228]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d103      	bne.n	8001264 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xb0>
                    {
                        arrowLine = 0;
 800125c:	4b37      	ldr	r3, [pc, #220]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e05a      	b.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                    }
                    else
                    {
                        arrowLine++;
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a34      	ldr	r2, [pc, #208]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e054      	b.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f007 fb2b 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001276:	4603      	mov	r3, r0
 8001278:	2b04      	cmp	r3, #4
 800127a:	bf0c      	ite	eq
 800127c:	2301      	moveq	r3, #1
 800127e:	2300      	movne	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00c      	beq.n	80012a0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xec>
                {
                    LOGI("Go back to homescreen");
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x18c>)
 8001288:	226f      	movs	r2, #111	; 0x6f
 800128a:	492e      	ldr	r1, [pc, #184]	; (8001344 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 800128c:	482e      	ldr	r0, [pc, #184]	; (8001348 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 800128e:	f7ff fdbf 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a2d      	ldr	r2, [pc, #180]	; (800134c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	e03c      	b.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                }
                // Nhan nut SEL ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f007 fb13 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	bf0c      	ite	eq
 80012ac:	2301      	moveq	r3, #1
 80012ae:	2300      	movne	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d031      	beq.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                {
                    // Chon DISPLAY MODE
                    if (arrowLine == 0)
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10c      	bne.n	80012d8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x124>
                    {
                        LOGI("Go to Display Menu");
 80012be:	4b20      	ldr	r3, [pc, #128]	; (8001340 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x18c>)
 80012c0:	2278      	movs	r2, #120	; 0x78
 80012c2:	4920      	ldr	r1, [pc, #128]	; (8001344 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80012c4:	4822      	ldr	r0, [pc, #136]	; (8001350 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x19c>)
 80012c6:	f7ff fda3 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_DisplayScroll;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a21      	ldr	r2, [pc, #132]	; (8001354 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a0>)
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	e020      	b.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                    }
                    // Chon SETTING MODE
                    else if (arrowLine == 1)
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d10c      	bne.n	80012fa <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x146>
                    {
                        LOGI("Go to Setting Menu");
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x18c>)
 80012e2:	227e      	movs	r2, #126	; 0x7e
 80012e4:	4917      	ldr	r1, [pc, #92]	; (8001344 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80012e6:	481c      	ldr	r0, [pc, #112]	; (8001358 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a4>)
 80012e8:	f7ff fd92 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_SettingScroll;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	e00f      	b.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                    }
                    // Chon ABOUT
                    else if (arrowLine == 2)
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x188>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d10b      	bne.n	800131a <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x166>
                    {
                        LOGI("Go to About");
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x18c>)
 8001304:	2284      	movs	r2, #132	; 0x84
 8001306:	490f      	ldr	r1, [pc, #60]	; (8001344 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001308:	4815      	ldr	r0, [pc, #84]	; (8001360 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1ac>)
 800130a:	f7ff fd81 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_AboutScreen;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a14      	ldr	r2, [pc, #80]	; (8001364 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b0>)
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
                else
                {

                }

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800131a:	2100      	movs	r1, #0
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f007 fac7 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	0800c26c 	.word	0x0800c26c
 8001330:	0800c27c 	.word	0x0800c27c
 8001334:	0800c28c 	.word	0x0800c28c
 8001338:	0800c294 	.word	0x0800c294
 800133c:	20000200 	.word	0x20000200
 8001340:	0800c2ac 	.word	0x0800c2ac
 8001344:	0800c240 	.word	0x0800c240
 8001348:	0800c2c0 	.word	0x0800c2c0
 800134c:	080010e1 	.word	0x080010e1
 8001350:	0800c2e4 	.word	0x0800c2e4
 8001354:	08001401 	.word	0x08001401
 8001358:	0800c304 	.word	0x0800c304
 800135c:	08001705 	.word	0x08001705
 8001360:	0800c324 	.word	0x0800c324
 8001364:	08001369 	.word	0x08001369

08001368 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv>:

            void impl_3_AboutScreen()
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
            {
                mLcd.clearDisplay();
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	330c      	adds	r3, #12
 8001374:	4618      	mov	r0, r3
 8001376:	f007 fccb 	bl	8008d10 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MPPT SOLAR CHARGER");
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f103 000c 	add.w	r0, r3, #12
 8001380:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x84>)
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	f007 fba1 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, "FIRMWARE VER: 1.0.0");
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f103 000c 	add.w	r0, r3, #12
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x88>)
 8001392:	2200      	movs	r2, #0
 8001394:	2101      	movs	r1, #1
 8001396:	f007 fb99 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, "CONTACT:09123123123");
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f103 000c 	add.w	r0, r3, #12
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x8c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	2102      	movs	r1, #2
 80013a6:	f007 fb91 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, "4BACK");
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f103 000c 	add.w	r0, r3, #12
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x90>)
 80013b2:	220f      	movs	r2, #15
 80013b4:	2103      	movs	r1, #3
 80013b6:	f007 fb89 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>

                auto &button = Button::getInstance();
 80013ba:	f001 fd73 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80013be:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f007 fa83 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	bf0c      	ite	eq
 80013cc:	2301      	moveq	r3, #1
 80013ce:	2300      	movne	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x7a>
                {
                    mCallback = &LcdSimulate::impl_1_HomeScreen;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a08      	ldr	r2, [pc, #32]	; (80013fc <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x94>)
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
                }
            }
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800c340 	.word	0x0800c340
 80013f0:	0800c354 	.word	0x0800c354
 80013f4:	0800c368 	.word	0x0800c368
 80013f8:	0800c37c 	.word	0x0800c37c
 80013fc:	080010e1 	.word	0x080010e1

08001400 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv>:

            void impl_3_DisplayScroll()
 8001400:	b580      	push	{r7, lr}
 8001402:	b0a0      	sub	sp, #128	; 0x80
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
            {
                const int COL = 21;
 8001408:	2315      	movs	r3, #21
 800140a:	67fb      	str	r3, [r7, #124]	; 0x7c
                const int ROW = 5;
 800140c:	2305      	movs	r3, #5
 800140e:	67bb      	str	r3, [r7, #120]	; 0x78

                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
 8001410:	4aad      	ldr	r2, [pc, #692]	; (80016c8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2c8>)
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	4611      	mov	r1, r2
 8001418:	2269      	movs	r2, #105	; 0x69
 800141a:	4618      	mov	r0, r3
 800141c:	f008 fccb 	bl	8009db6 <memcpy>
                        "3 DISPLAY VIEW 3", "4 DISPLAY VIEW 4" };

                static int mIndexLine = 1;

                if (mIndexLine == 1)
 8001420:	4baa      	ldr	r3, [pc, #680]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d135      	bne.n	8001494 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x94>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f103 000c 	add.w	r0, r3, #12
 800142e:	4ba7      	ldr	r3, [pc, #668]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	f107 0108 	add.w	r1, r7, #8
 8001436:	4613      	mov	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4413      	add	r3, r2
 800143c:	00da      	lsls	r2, r3, #3
 800143e:	1ad2      	subs	r2, r2, r3
 8001440:	188b      	adds	r3, r1, r2
 8001442:	2201      	movs	r2, #1
 8001444:	2100      	movs	r1, #0
 8001446:	f007 fb41 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f103 000c 	add.w	r0, r3, #12
 8001450:	4b9e      	ldr	r3, [pc, #632]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	f107 0108 	add.w	r1, r7, #8
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	00da      	lsls	r2, r3, #3
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	188b      	adds	r3, r1, r2
 8001466:	2201      	movs	r2, #1
 8001468:	2101      	movs	r1, #1
 800146a:	f007 fb2f 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f103 000c 	add.w	r0, r3, #12
 8001474:	4b95      	ldr	r3, [pc, #596]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	1c9a      	adds	r2, r3, #2
 800147a:	f107 0108 	add.w	r1, r7, #8
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	00da      	lsls	r2, r3, #3
 8001486:	1ad2      	subs	r2, r2, r3
 8001488:	188b      	adds	r3, r1, r2
 800148a:	2201      	movs	r2, #1
 800148c:	2102      	movs	r1, #2
 800148e:	f007 fb1d 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 8001492:	e06e      	b.n	8001572 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x172>
                }
                else if (mIndexLine == ROW - 1)
 8001494:	4b8d      	ldr	r3, [pc, #564]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d135      	bne.n	8001508 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x108>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f103 000c 	add.w	r0, r3, #12
 80014a2:	4b8a      	ldr	r3, [pc, #552]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	1e9a      	subs	r2, r3, #2
 80014a8:	f107 0108 	add.w	r1, r7, #8
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	00da      	lsls	r2, r3, #3
 80014b4:	1ad2      	subs	r2, r2, r3
 80014b6:	188b      	adds	r3, r1, r2
 80014b8:	2201      	movs	r2, #1
 80014ba:	2100      	movs	r1, #0
 80014bc:	f007 fb06 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f103 000c 	add.w	r0, r3, #12
 80014c6:	4b81      	ldr	r3, [pc, #516]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	f107 0108 	add.w	r1, r7, #8
 80014d0:	4613      	mov	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	00da      	lsls	r2, r3, #3
 80014d8:	1ad2      	subs	r2, r2, r3
 80014da:	188b      	adds	r3, r1, r2
 80014dc:	2201      	movs	r2, #1
 80014de:	2101      	movs	r1, #1
 80014e0:	f007 faf4 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f103 000c 	add.w	r0, r3, #12
 80014ea:	4b78      	ldr	r3, [pc, #480]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	f107 0108 	add.w	r1, r7, #8
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	00da      	lsls	r2, r3, #3
 80014fa:	1ad2      	subs	r2, r2, r3
 80014fc:	188b      	adds	r3, r1, r2
 80014fe:	2201      	movs	r2, #1
 8001500:	2102      	movs	r1, #2
 8001502:	f007 fae3 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 8001506:	e034      	b.n	8001572 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x172>
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f103 000c 	add.w	r0, r3, #12
 800150e:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	1e5a      	subs	r2, r3, #1
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	00da      	lsls	r2, r3, #3
 8001520:	1ad2      	subs	r2, r2, r3
 8001522:	188b      	adds	r3, r1, r2
 8001524:	2201      	movs	r2, #1
 8001526:	2100      	movs	r1, #0
 8001528:	f007 fad0 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f103 000c 	add.w	r0, r3, #12
 8001532:	4b66      	ldr	r3, [pc, #408]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	f107 0108 	add.w	r1, r7, #8
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	00da      	lsls	r2, r3, #3
 8001542:	1ad2      	subs	r2, r2, r3
 8001544:	188b      	adds	r3, r1, r2
 8001546:	2201      	movs	r2, #1
 8001548:	2101      	movs	r1, #1
 800154a:	f007 fabf 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f103 000c 	add.w	r0, r3, #12
 8001554:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	f107 0108 	add.w	r1, r7, #8
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	00da      	lsls	r2, r3, #3
 8001566:	1ad2      	subs	r2, r2, r3
 8001568:	188b      	adds	r3, r1, r2
 800156a:	2201      	movs	r2, #1
 800156c:	2102      	movs	r1, #2
 800156e:	f007 faad 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f103 000c 	add.w	r0, r3, #12
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d0>)
 800157a:	2201      	movs	r2, #1
 800157c:	2103      	movs	r1, #3
 800157e:	f007 faa5 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                auto &button = Button::getInstance();
 8001582:	f001 fc8f 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001586:	6778      	str	r0, [r7, #116]	; 0x74
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001588:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800158a:	f007 f99f 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 800158e:	4603      	mov	r3, r0
 8001590:	2b01      	cmp	r3, #1
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00d      	beq.n	80015ba <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ba>
                {
                    if (mIndexLine == 1)
 800159e:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d103      	bne.n	80015ae <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ae>
                    {
                        mIndexLine = ROW - 1;
 80015a6:	4b49      	ldr	r3, [pc, #292]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80015a8:	2204      	movs	r2, #4
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e084      	b.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                    }
                    else
                    {
                        mIndexLine--;
 80015ae:	4b47      	ldr	r3, [pc, #284]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	4a45      	ldr	r2, [pc, #276]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e07e      	b.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80015ba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80015bc:	f007 f986 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00d      	beq.n	80015ec <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ec>
                {
                    if (mIndexLine == ROW - 1)
 80015d0:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b04      	cmp	r3, #4
 80015d6:	d103      	bne.n	80015e0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1e0>
                    {
                        mIndexLine = 1;
 80015d8:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e06b      	b.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                    }
                    else
                    {
                        mIndexLine++;
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	4a39      	ldr	r2, [pc, #228]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e065      	b.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (menuscreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80015ec:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80015ee:	f007 f96d 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	bf0c      	ite	eq
 80015f8:	2301      	moveq	r3, #1
 80015fa:	2300      	movne	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00c      	beq.n	800161c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x21c>
                {
                    LOGI("Go back to Menu screen");
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d4>)
 8001604:	22de      	movs	r2, #222	; 0xde
 8001606:	4934      	ldr	r1, [pc, #208]	; (80016d8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d8>)
 8001608:	4834      	ldr	r0, [pc, #208]	; (80016dc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2dc>)
 800160a:	f7ff fc01 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a33      	ldr	r2, [pc, #204]	; (80016e0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2e0>)
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	e04d      	b.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                }
                // Nhan nut SEL
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 800161c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800161e:	f007 f955 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001622:	4603      	mov	r3, r0
 8001624:	2b03      	cmp	r3, #3
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d042      	beq.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                {
                    // Chon DISPLAY MODE
                    if (mIndexLine == 1)
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d10c      	bne.n	8001654 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>
                    {
                        LOGI("Go to Display Config 1");
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d4>)
 800163c:	22e7      	movs	r2, #231	; 0xe7
 800163e:	4926      	ldr	r1, [pc, #152]	; (80016d8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d8>)
 8001640:	4828      	ldr	r0, [pc, #160]	; (80016e4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2e4>)
 8001642:	f7ff fbe5 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig1;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2e8>)
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	e031      	b.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                    }
                    // Chon SETTING MODE
                    else if (mIndexLine == 2)
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d10c      	bne.n	8001676 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x276>
                    {
                        LOGI("Go to Display Config 2");
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d4>)
 800165e:	22ed      	movs	r2, #237	; 0xed
 8001660:	491d      	ldr	r1, [pc, #116]	; (80016d8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d8>)
 8001662:	4822      	ldr	r0, [pc, #136]	; (80016ec <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2ec>)
 8001664:	f7ff fbd4 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig2;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a21      	ldr	r2, [pc, #132]	; (80016f0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2f0>)
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	e020      	b.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                    }
                    // Chon ABOUT
                    else if (mIndexLine == 3)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d10c      	bne.n	8001698 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x298>
                    {
                        LOGI("Go to Display Config 3");
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d4>)
 8001680:	22f3      	movs	r2, #243	; 0xf3
 8001682:	4915      	ldr	r1, [pc, #84]	; (80016d8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d8>)
 8001684:	481b      	ldr	r0, [pc, #108]	; (80016f4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2f4>)
 8001686:	f7ff fbc3 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig3;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2f8>)
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	e00f      	b.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                    }
                    else if (mIndexLine == 4)
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2cc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b04      	cmp	r3, #4
 800169e:	d10b      	bne.n	80016b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2b8>
                    {
                        LOGI("Go to Display Config 4");
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d4>)
 80016a2:	22f8      	movs	r2, #248	; 0xf8
 80016a4:	490c      	ldr	r1, [pc, #48]	; (80016d8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2d8>)
 80016a6:	4815      	ldr	r0, [pc, #84]	; (80016fc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2fc>)
 80016a8:	f7ff fbb2 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig4;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x300>)
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
                else
                {

                }

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80016b8:	2100      	movs	r1, #0
 80016ba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80016bc:	f007 f8f8 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80016c0:	bf00      	nop
 80016c2:	3780      	adds	r7, #128	; 0x80
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	0800c450 	.word	0x0800c450
 80016cc:	20000000 	.word	0x20000000
 80016d0:	0800c294 	.word	0x0800c294
 80016d4:	0800c384 	.word	0x0800c384
 80016d8:	0800c240 	.word	0x0800c240
 80016dc:	0800c39c 	.word	0x0800c39c
 80016e0:	080011b5 	.word	0x080011b5
 80016e4:	0800c3c0 	.word	0x0800c3c0
 80016e8:	08001e71 	.word	0x08001e71
 80016ec:	0800c3e4 	.word	0x0800c3e4
 80016f0:	08001ed1 	.word	0x08001ed1
 80016f4:	0800c408 	.word	0x0800c408
 80016f8:	08001f31 	.word	0x08001f31
 80016fc:	0800c42c 	.word	0x0800c42c
 8001700:	08001f91 	.word	0x08001f91

08001704 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv>:

            void impl_3_SettingScroll()
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b0cb      	sub	sp, #300	; 0x12c
 8001708:	af00      	add	r7, sp, #0
 800170a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800170e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001712:	6018      	str	r0, [r3, #0]
            {
                const int COL = 21;
 8001714:	2315      	movs	r3, #21
 8001716:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                const int ROW = 13;
 800171a:	230d      	movs	r3, #13
 800171c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
 8001720:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001724:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001728:	4618      	mov	r0, r3
 800172a:	f240 1311 	movw	r3, #273	; 0x111
 800172e:	461a      	mov	r2, r3
 8001730:	2100      	movs	r1, #0
 8001732:	f008 fa6c 	bl	8009c0e <memset>
 8001736:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800173a:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 800173e:	4bb3      	ldr	r3, [pc, #716]	; (8001a0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x308>)
 8001740:	f106 0515 	add.w	r5, r6, #21
 8001744:	461c      	mov	r4, r3
 8001746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001748:	6028      	str	r0, [r5, #0]
 800174a:	6069      	str	r1, [r5, #4]
 800174c:	60aa      	str	r2, [r5, #8]
 800174e:	60eb      	str	r3, [r5, #12]
 8001750:	8823      	ldrh	r3, [r4, #0]
 8001752:	78a2      	ldrb	r2, [r4, #2]
 8001754:	822b      	strh	r3, [r5, #16]
 8001756:	4613      	mov	r3, r2
 8001758:	74ab      	strb	r3, [r5, #18]
 800175a:	f106 0328 	add.w	r3, r6, #40	; 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	801a      	strh	r2, [r3, #0]
 8001762:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001766:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800176a:	4aa9      	ldr	r2, [pc, #676]	; (8001a10 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x30c>)
 800176c:	f101 032a 	add.w	r3, r1, #42	; 0x2a
 8001770:	6810      	ldr	r0, [r2, #0]
 8001772:	6018      	str	r0, [r3, #0]
 8001774:	8890      	ldrh	r0, [r2, #4]
 8001776:	7992      	ldrb	r2, [r2, #6]
 8001778:	8098      	strh	r0, [r3, #4]
 800177a:	719a      	strb	r2, [r3, #6]
 800177c:	f101 0331 	add.w	r3, r1, #49	; 0x31
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	819a      	strh	r2, [r3, #12]
 800178a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800178e:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 8001792:	4ba0      	ldr	r3, [pc, #640]	; (8001a14 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x310>)
 8001794:	f106 053f 	add.w	r5, r6, #63	; 0x3f
 8001798:	461c      	mov	r4, r3
 800179a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800179c:	6028      	str	r0, [r5, #0]
 800179e:	6069      	str	r1, [r5, #4]
 80017a0:	60aa      	str	r2, [r5, #8]
 80017a2:	60eb      	str	r3, [r5, #12]
 80017a4:	8823      	ldrh	r3, [r4, #0]
 80017a6:	78a2      	ldrb	r2, [r4, #2]
 80017a8:	822b      	strh	r3, [r5, #16]
 80017aa:	4613      	mov	r3, r2
 80017ac:	74ab      	strb	r3, [r5, #18]
 80017ae:	f106 0352 	add.w	r3, r6, #82	; 0x52
 80017b2:	2200      	movs	r2, #0
 80017b4:	801a      	strh	r2, [r3, #0]
 80017b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017ba:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 80017be:	4b96      	ldr	r3, [pc, #600]	; (8001a18 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x314>)
 80017c0:	f106 0454 	add.w	r4, r6, #84	; 0x54
 80017c4:	461d      	mov	r5, r3
 80017c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ca:	682b      	ldr	r3, [r5, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	8022      	strh	r2, [r4, #0]
 80017d0:	3402      	adds	r4, #2
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	7023      	strb	r3, [r4, #0]
 80017d6:	f106 0367 	add.w	r3, r6, #103	; 0x67
 80017da:	2200      	movs	r2, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017e2:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 80017e6:	4b8d      	ldr	r3, [pc, #564]	; (8001a1c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x318>)
 80017e8:	f106 0569 	add.w	r5, r6, #105	; 0x69
 80017ec:	461c      	mov	r4, r3
 80017ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017f0:	6028      	str	r0, [r5, #0]
 80017f2:	6069      	str	r1, [r5, #4]
 80017f4:	60aa      	str	r2, [r5, #8]
 80017f6:	60eb      	str	r3, [r5, #12]
 80017f8:	8823      	ldrh	r3, [r4, #0]
 80017fa:	78a2      	ldrb	r2, [r4, #2]
 80017fc:	822b      	strh	r3, [r5, #16]
 80017fe:	4613      	mov	r3, r2
 8001800:	74ab      	strb	r3, [r5, #18]
 8001802:	f106 037c 	add.w	r3, r6, #124	; 0x7c
 8001806:	2200      	movs	r2, #0
 8001808:	801a      	strh	r2, [r3, #0]
 800180a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800180e:	f5a3 7590 	sub.w	r5, r3, #288	; 0x120
 8001812:	4b83      	ldr	r3, [pc, #524]	; (8001a20 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x31c>)
 8001814:	f105 047e 	add.w	r4, r5, #126	; 0x7e
 8001818:	cb07      	ldmia	r3!, {r0, r1, r2}
 800181a:	6020      	str	r0, [r4, #0]
 800181c:	6061      	str	r1, [r4, #4]
 800181e:	60a2      	str	r2, [r4, #8]
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	81a3      	strh	r3, [r4, #12]
 8001824:	f105 038c 	add.w	r3, r5, #140	; 0x8c
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	f8c3 2003 	str.w	r2, [r3, #3]
 8001830:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001834:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 8001838:	4b7a      	ldr	r3, [pc, #488]	; (8001a24 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x320>)
 800183a:	f106 0593 	add.w	r5, r6, #147	; 0x93
 800183e:	461c      	mov	r4, r3
 8001840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001842:	6028      	str	r0, [r5, #0]
 8001844:	6069      	str	r1, [r5, #4]
 8001846:	60aa      	str	r2, [r5, #8]
 8001848:	60eb      	str	r3, [r5, #12]
 800184a:	8823      	ldrh	r3, [r4, #0]
 800184c:	78a2      	ldrb	r2, [r4, #2]
 800184e:	822b      	strh	r3, [r5, #16]
 8001850:	4613      	mov	r3, r2
 8001852:	74ab      	strb	r3, [r5, #18]
 8001854:	f106 03a6 	add.w	r3, r6, #166	; 0xa6
 8001858:	2200      	movs	r2, #0
 800185a:	801a      	strh	r2, [r3, #0]
 800185c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001860:	f5a3 7490 	sub.w	r4, r3, #288	; 0x120
 8001864:	4b70      	ldr	r3, [pc, #448]	; (8001a28 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x324>)
 8001866:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 800186a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001870:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	711a      	strb	r2, [r3, #4]
 800187a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800187e:	f5a3 7490 	sub.w	r4, r3, #288	; 0x120
 8001882:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x328>)
 8001884:	f104 02bd 	add.w	r2, r4, #189	; 0xbd
 8001888:	cb03      	ldmia	r3!, {r0, r1}
 800188a:	6010      	str	r0, [r2, #0]
 800188c:	6051      	str	r1, [r2, #4]
 800188e:	8819      	ldrh	r1, [r3, #0]
 8001890:	789b      	ldrb	r3, [r3, #2]
 8001892:	8111      	strh	r1, [r2, #8]
 8001894:	7293      	strb	r3, [r2, #10]
 8001896:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	811a      	strh	r2, [r3, #8]
 80018a2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018a6:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 80018aa:	4b61      	ldr	r3, [pc, #388]	; (8001a30 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x32c>)
 80018ac:	f106 05d2 	add.w	r5, r6, #210	; 0xd2
 80018b0:	461c      	mov	r4, r3
 80018b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018b4:	6028      	str	r0, [r5, #0]
 80018b6:	6069      	str	r1, [r5, #4]
 80018b8:	60aa      	str	r2, [r5, #8]
 80018ba:	60eb      	str	r3, [r5, #12]
 80018bc:	8823      	ldrh	r3, [r4, #0]
 80018be:	822b      	strh	r3, [r5, #16]
 80018c0:	f106 03e4 	add.w	r3, r6, #228	; 0xe4
 80018c4:	2100      	movs	r1, #0
 80018c6:	460a      	mov	r2, r1
 80018c8:	801a      	strh	r2, [r3, #0]
 80018ca:	460a      	mov	r2, r1
 80018cc:	709a      	strb	r2, [r3, #2]
 80018ce:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018d2:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 80018d6:	4b57      	ldr	r3, [pc, #348]	; (8001a34 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x330>)
 80018d8:	f106 04e7 	add.w	r4, r6, #231	; 0xe7
 80018dc:	461d      	mov	r5, r3
 80018de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e0:	6020      	str	r0, [r4, #0]
 80018e2:	6061      	str	r1, [r4, #4]
 80018e4:	60a2      	str	r2, [r4, #8]
 80018e6:	60e3      	str	r3, [r4, #12]
 80018e8:	f106 03f7 	add.w	r3, r6, #247	; 0xf7
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	711a      	strb	r2, [r3, #4]
                        "7 FAN TRIGGER TEMP", "8 SHUTDOWN TEMP", "9 AUTOLOAD", "10BACKLIGHT SLEEP",
                        "11FACTORY RESET" };

                static int mIndexLine = 1;

                if (mIndexLine == 1)
 80018f2:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d141      	bne.n	800197e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x27a>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 80018fa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80018fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f103 000c 	add.w	r0, r3, #12
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f107 0108 	add.w	r1, r7, #8
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	00da      	lsls	r2, r3, #3
 8001918:	1ad2      	subs	r2, r2, r3
 800191a:	188b      	adds	r3, r1, r2
 800191c:	2201      	movs	r2, #1
 800191e:	2100      	movs	r1, #0
 8001920:	f007 f8d4 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 8001924:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001928:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f103 000c 	add.w	r0, r3, #12
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	f107 0108 	add.w	r1, r7, #8
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	00da      	lsls	r2, r3, #3
 8001944:	1ad2      	subs	r2, r2, r3
 8001946:	188b      	adds	r3, r1, r2
 8001948:	2201      	movs	r2, #1
 800194a:	2101      	movs	r1, #1
 800194c:	f007 f8be 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 8001950:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001954:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f103 000c 	add.w	r0, r3, #12
 800195e:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1c9a      	adds	r2, r3, #2
 8001964:	f107 0108 	add.w	r1, r7, #8
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	00da      	lsls	r2, r3, #3
 8001970:	1ad2      	subs	r2, r2, r3
 8001972:	188b      	adds	r3, r1, r2
 8001974:	2201      	movs	r2, #1
 8001976:	2102      	movs	r1, #2
 8001978:	f007 f8a8 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 800197c:	e09f      	b.n	8001abe <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x3ba>
                }
                else if (mIndexLine == ROW - 1)
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d15a      	bne.n	8001a3c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x338>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 8001986:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800198a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f103 000c 	add.w	r0, r3, #12
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	1e9a      	subs	r2, r3, #2
 800199a:	f107 0108 	add.w	r1, r7, #8
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	00da      	lsls	r2, r3, #3
 80019a6:	1ad2      	subs	r2, r2, r3
 80019a8:	188b      	adds	r3, r1, r2
 80019aa:	2201      	movs	r2, #1
 80019ac:	2100      	movs	r1, #0
 80019ae:	f007 f88d 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 80019b2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019b6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f103 000c 	add.w	r0, r3, #12
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	1e5a      	subs	r2, r3, #1
 80019c6:	f107 0108 	add.w	r1, r7, #8
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	00da      	lsls	r2, r3, #3
 80019d2:	1ad2      	subs	r2, r2, r3
 80019d4:	188b      	adds	r3, r1, r2
 80019d6:	2201      	movs	r2, #1
 80019d8:	2101      	movs	r1, #1
 80019da:	f007 f877 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 80019de:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80019e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f103 000c 	add.w	r0, r3, #12
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	f107 0108 	add.w	r1, r7, #8
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	00da      	lsls	r2, r3, #3
 80019fc:	1ad2      	subs	r2, r2, r3
 80019fe:	188b      	adds	r3, r1, r2
 8001a00:	2201      	movs	r2, #1
 8001a02:	2102      	movs	r1, #2
 8001a04:	f007 f862 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 8001a08:	e059      	b.n	8001abe <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x3ba>
 8001a0a:	bf00      	nop
 8001a0c:	0800c65c 	.word	0x0800c65c
 8001a10:	0800c674 	.word	0x0800c674
 8001a14:	0800c68c 	.word	0x0800c68c
 8001a18:	0800c6a4 	.word	0x0800c6a4
 8001a1c:	0800c6bc 	.word	0x0800c6bc
 8001a20:	0800c6d4 	.word	0x0800c6d4
 8001a24:	0800c6ec 	.word	0x0800c6ec
 8001a28:	0800c704 	.word	0x0800c704
 8001a2c:	0800c71c 	.word	0x0800c71c
 8001a30:	0800c734 	.word	0x0800c734
 8001a34:	0800c74c 	.word	0x0800c74c
 8001a38:	20000004 	.word	0x20000004
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 8001a3c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a40:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f103 000c 	add.w	r0, r3, #12
 8001a4a:	4ba4      	ldr	r3, [pc, #656]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	1e5a      	subs	r2, r3, #1
 8001a50:	f107 0108 	add.w	r1, r7, #8
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	00da      	lsls	r2, r3, #3
 8001a5c:	1ad2      	subs	r2, r2, r3
 8001a5e:	188b      	adds	r3, r1, r2
 8001a60:	2201      	movs	r2, #1
 8001a62:	2100      	movs	r1, #0
 8001a64:	f007 f832 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 8001a68:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f103 000c 	add.w	r0, r3, #12
 8001a76:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	f107 0108 	add.w	r1, r7, #8
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00da      	lsls	r2, r3, #3
 8001a86:	1ad2      	subs	r2, r2, r3
 8001a88:	188b      	adds	r3, r1, r2
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	f007 f81d 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8001a92:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a96:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f103 000c 	add.w	r0, r3, #12
 8001aa0:	4b8e      	ldr	r3, [pc, #568]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	f107 0108 	add.w	r1, r7, #8
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	00da      	lsls	r2, r3, #3
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	188b      	adds	r3, r1, r2
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	2102      	movs	r1, #2
 8001aba:	f007 f807 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
 8001abe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ac2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f103 000c 	add.w	r0, r3, #12
 8001acc:	4b84      	ldr	r3, [pc, #528]	; (8001ce0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5dc>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	2103      	movs	r1, #3
 8001ad2:	f006 fffb 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                auto &button = Button::getInstance();
 8001ad6:	f001 f9e5 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001ada:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001ade:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001ae2:	f006 fef3 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00d      	beq.n	8001b12 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40e>
                {
                    if (mIndexLine == 1)
 8001af6:	4b79      	ldr	r3, [pc, #484]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d103      	bne.n	8001b06 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x402>
                    {
                        mIndexLine = ROW - 1;
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001b00:	220c      	movs	r2, #12
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e18f      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else
                    {
                        mIndexLine--;
 8001b06:	4b75      	ldr	r3, [pc, #468]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e189      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001b12:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001b16:	f006 fed9 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	bf0c      	ite	eq
 8001b20:	2301      	moveq	r3, #1
 8001b22:	2300      	movne	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x442>
                {
                    if (mIndexLine == ROW - 1)
 8001b2a:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d103      	bne.n	8001b3a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x436>
                    {
                        mIndexLine = 1;
 8001b32:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e175      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else
                    {
                        mIndexLine++;
 8001b3a:	4b68      	ldr	r3, [pc, #416]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e16f      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (menuscreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001b46:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001b4a:	f006 febf 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	bf0c      	ite	eq
 8001b54:	2301      	moveq	r3, #1
 8001b56:	2300      	movne	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d015      	beq.n	8001b8a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x486>
                {
                    LOGI("Go back to Menu screen");
 8001b5e:	4b61      	ldr	r3, [pc, #388]	; (8001ce4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e0>)
 8001b60:	f240 1245 	movw	r2, #325	; 0x145
 8001b64:	4960      	ldr	r1, [pc, #384]	; (8001ce8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e4>)
 8001b66:	4861      	ldr	r0, [pc, #388]	; (8001cec <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e8>)
 8001b68:	f7ff f952 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 8001b6c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5e      	ldr	r2, [pc, #376]	; (8001cf0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5ec>)
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b7e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	e14d      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                }
                // Nhan nut SEL
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001b8a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001b8e:	f006 fe9d 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8141 	beq.w	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                {
                    // Chon DISPLAY MODE
                    if (mIndexLine == 1)
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d115      	bne.n	8001bd8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x4d4>
                    {
                        LOGI("Go to Supply Algorithm");
 8001bac:	4b4d      	ldr	r3, [pc, #308]	; (8001ce4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e0>)
 8001bae:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8001bb2:	494d      	ldr	r1, [pc, #308]	; (8001ce8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e4>)
 8001bb4:	484f      	ldr	r0, [pc, #316]	; (8001cf4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5f0>)
 8001bb6:	f7ff f92b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_SupplyAlgorithm;
 8001bba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bbe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5f4>)
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bcc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	e126      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    // Chon SETTING MODE
                    else if (mIndexLine == 2)
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d115      	bne.n	8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x508>
                    {
                        LOGI("Go to Charge mode");
 8001be0:	4b40      	ldr	r3, [pc, #256]	; (8001ce4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e0>)
 8001be2:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8001be6:	4940      	ldr	r1, [pc, #256]	; (8001ce8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e4>)
 8001be8:	4844      	ldr	r0, [pc, #272]	; (8001cfc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5f8>)
 8001bea:	f7ff f911 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargeMode;
 8001bee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bf2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a41      	ldr	r2, [pc, #260]	; (8001d00 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5fc>)
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c00:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
 8001c0a:	e10c      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    // Chon ABOUT
                    else if (mIndexLine == 3)
 8001c0c:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b03      	cmp	r3, #3
 8001c12:	d115      	bne.n	8001c40 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x53c>
                    {
                        LOGI("Go to Max battery voltage");
 8001c14:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e0>)
 8001c16:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8001c1a:	4933      	ldr	r1, [pc, #204]	; (8001ce8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e4>)
 8001c1c:	4839      	ldr	r0, [pc, #228]	; (8001d04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x600>)
 8001c1e:	f7ff f8f7 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MaxBatteryVolt;
 8001c22:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c26:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a36      	ldr	r2, [pc, #216]	; (8001d08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x604>)
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c34:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	e0f2      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else if (mIndexLine == 4)
 8001c40:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d115      	bne.n	8001c74 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x570>
                    {
                        LOGI("Go to Min battery voltage");
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e0>)
 8001c4a:	f240 125f 	movw	r2, #351	; 0x15f
 8001c4e:	4926      	ldr	r1, [pc, #152]	; (8001ce8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e4>)
 8001c50:	482e      	ldr	r0, [pc, #184]	; (8001d0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x608>)
 8001c52:	f7ff f8dd 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MinBatteryVolt;
 8001c56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a2b      	ldr	r2, [pc, #172]	; (8001d10 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x60c>)
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	e0d8      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else if (mIndexLine == 5)
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d115      	bne.n	8001ca8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a4>
                    {
                        LOGI("Go to Charging current");
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e0>)
 8001c7e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8001c82:	4919      	ldr	r1, [pc, #100]	; (8001ce8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e4>)
 8001c84:	4823      	ldr	r0, [pc, #140]	; (8001d14 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x610>)
 8001c86:	f7ff f8c3 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargingCurrent;
 8001c8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c8e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x614>)
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c9c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	e0be      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else if (mIndexLine == 6)
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b06      	cmp	r3, #6
 8001cae:	d139      	bne.n	8001d24 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x620>
                    {
                        LOGI("Go to Cooling fan");
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e0>)
 8001cb2:	f240 1269 	movw	r2, #361	; 0x169
 8001cb6:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5e4>)
 8001cb8:	4818      	ldr	r0, [pc, #96]	; (8001d1c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8001cba:	f7ff f8a9 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_CoolingFan;
 8001cbe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cc2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x61c>)
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	e0a4      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
 8001cdc:	20000004 	.word	0x20000004
 8001ce0:	0800c294 	.word	0x0800c294
 8001ce4:	0800c4bc 	.word	0x0800c4bc
 8001ce8:	0800c240 	.word	0x0800c240
 8001cec:	0800c39c 	.word	0x0800c39c
 8001cf0:	080011b5 	.word	0x080011b5
 8001cf4:	0800c4d4 	.word	0x0800c4d4
 8001cf8:	08001ff1 	.word	0x08001ff1
 8001cfc:	0800c4f8 	.word	0x0800c4f8
 8001d00:	08002171 	.word	0x08002171
 8001d04:	0800c518 	.word	0x0800c518
 8001d08:	08002331 	.word	0x08002331
 8001d0c:	0800c540 	.word	0x0800c540
 8001d10:	08002391 	.word	0x08002391
 8001d14:	0800c568 	.word	0x0800c568
 8001d18:	080023f1 	.word	0x080023f1
 8001d1c:	0800c58c 	.word	0x0800c58c
 8001d20:	08002451 	.word	0x08002451
                    }
                    else if (mIndexLine == 7)
 8001d24:	4b45      	ldr	r3, [pc, #276]	; (8001e3c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x738>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b07      	cmp	r3, #7
 8001d2a:	d115      	bne.n	8001d58 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x654>
                    {
                        LOGI("Go to Fan trigger temp");
 8001d2c:	4b44      	ldr	r3, [pc, #272]	; (8001e40 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x73c>)
 8001d2e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8001d32:	4944      	ldr	r1, [pc, #272]	; (8001e44 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x740>)
 8001d34:	4844      	ldr	r0, [pc, #272]	; (8001e48 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x744>)
 8001d36:	f7ff f86b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FanTriggerTemp;
 8001d3a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d3e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a41      	ldr	r2, [pc, #260]	; (8001e4c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x748>)
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	e066      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else if (mIndexLine == 8)
 8001d58:	4b38      	ldr	r3, [pc, #224]	; (8001e3c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x738>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d115      	bne.n	8001d8c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x688>
                    {
                        LOGI("Go to Shutdown temp");
 8001d60:	4b37      	ldr	r3, [pc, #220]	; (8001e40 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x73c>)
 8001d62:	f240 1273 	movw	r2, #371	; 0x173
 8001d66:	4937      	ldr	r1, [pc, #220]	; (8001e44 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x740>)
 8001d68:	4839      	ldr	r0, [pc, #228]	; (8001e50 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x74c>)
 8001d6a:	f7ff f851 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ShutdownTemp;
 8001d6e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d72:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a36      	ldr	r2, [pc, #216]	; (8001e54 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x750>)
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	e04c      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else if (mIndexLine == 9)
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x738>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b09      	cmp	r3, #9
 8001d92:	d115      	bne.n	8001dc0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x6bc>
                    {
                        LOGI("Go to Autoload config");
 8001d94:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x73c>)
 8001d96:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001d9a:	492a      	ldr	r1, [pc, #168]	; (8001e44 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x740>)
 8001d9c:	482e      	ldr	r0, [pc, #184]	; (8001e58 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x754>)
 8001d9e:	f7ff f837 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_AutoloadCfg;
 8001da2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001da6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2b      	ldr	r2, [pc, #172]	; (8001e5c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x758>)
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001db4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	e032      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else if (mIndexLine == 10)
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x738>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b0a      	cmp	r3, #10
 8001dc6:	d115      	bne.n	8001df4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x6f0>
                    {
                        LOGI("Go to Backlight");
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x73c>)
 8001dca:	f240 127d 	movw	r2, #381	; 0x17d
 8001dce:	491d      	ldr	r1, [pc, #116]	; (8001e44 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x740>)
 8001dd0:	4823      	ldr	r0, [pc, #140]	; (8001e60 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x75c>)
 8001dd2:	f7ff f81d 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_Backlight;
 8001dd6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dda:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a20      	ldr	r2, [pc, #128]	; (8001e64 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x760>)
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001de8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
 8001df2:	e018      	b.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    }
                    else if (mIndexLine == 11)
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x738>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b0b      	cmp	r3, #11
 8001dfa:	d114      	bne.n	8001e26 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x722>
                    {
                        LOGI("Go to Factory reset");
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x73c>)
 8001dfe:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001e02:	4910      	ldr	r1, [pc, #64]	; (8001e44 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x740>)
 8001e04:	4818      	ldr	r0, [pc, #96]	; (8001e68 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x764>)
 8001e06:	f7ff f803 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FactoryReset;
 8001e0a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e0e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x768>)
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e1c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
                else
                {

                }

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001e26:	2100      	movs	r1, #0
 8001e28:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001e2c:	f006 fd40 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001e30:	bf00      	nop
 8001e32:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000004 	.word	0x20000004
 8001e40:	0800c4bc 	.word	0x0800c4bc
 8001e44:	0800c240 	.word	0x0800c240
 8001e48:	0800c5ac 	.word	0x0800c5ac
 8001e4c:	080024b1 	.word	0x080024b1
 8001e50:	0800c5d0 	.word	0x0800c5d0
 8001e54:	08002511 	.word	0x08002511
 8001e58:	0800c5f4 	.word	0x0800c5f4
 8001e5c:	08002571 	.word	0x08002571
 8001e60:	0800c618 	.word	0x0800c618
 8001e64:	080025d1 	.word	0x080025d1
 8001e68:	0800c638 	.word	0x0800c638
 8001e6c:	08002631 	.word	0x08002631

08001e70 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev>:

            void impl_3_1_DisplayConfig1()
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
//                mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                auto &button = Button::getInstance();
 8001e78:	f001 f814 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001e7c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f006 fd24 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00c      	beq.n	8001eae <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x50>)
 8001e96:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8001e9a:	490a      	ldr	r1, [pc, #40]	; (8001ec4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x54>)
 8001e9c:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x58>)
 8001e9e:	f7fe ffb7 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x5c>)
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001eae:	2100      	movs	r1, #0
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f006 fcfd 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	0800c764 	.word	0x0800c764
 8001ec4:	0800c240 	.word	0x0800c240
 8001ec8:	0800c77c 	.word	0x0800c77c
 8001ecc:	08001401 	.word	0x08001401

08001ed0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev>:

            void impl_3_1_DisplayConfig2()
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
//                mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                auto &button = Button::getInstance();
 8001ed8:	f000 ffe4 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001edc:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	f006 fcf4 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf0c      	ite	eq
 8001eea:	2301      	moveq	r3, #1
 8001eec:	2300      	movne	r3, #0
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00c      	beq.n	8001f0e <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x50>)
 8001ef6:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001efa:	490a      	ldr	r1, [pc, #40]	; (8001f24 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x54>)
 8001efc:	480a      	ldr	r0, [pc, #40]	; (8001f28 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x58>)
 8001efe:	f7fe ff87 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x5c>)
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f006 fccd 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	0800c7a4 	.word	0x0800c7a4
 8001f24:	0800c240 	.word	0x0800c240
 8001f28:	0800c77c 	.word	0x0800c77c
 8001f2c:	08001401 	.word	0x08001401

08001f30 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev>:

            void impl_3_1_DisplayConfig3()
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8001f38:	f000 ffb4 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001f3c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f006 fcc4 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf0c      	ite	eq
 8001f4a:	2301      	moveq	r3, #1
 8001f4c:	2300      	movne	r3, #0
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00c      	beq.n	8001f6e <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x50>)
 8001f56:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8001f5a:	490a      	ldr	r1, [pc, #40]	; (8001f84 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x54>)
 8001f5c:	480a      	ldr	r0, [pc, #40]	; (8001f88 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x58>)
 8001f5e:	f7fe ff57 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x5c>)
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f6e:	2100      	movs	r1, #0
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f006 fc9d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001f76:	bf00      	nop
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	0800c7bc 	.word	0x0800c7bc
 8001f84:	0800c240 	.word	0x0800c240
 8001f88:	0800c77c 	.word	0x0800c77c
 8001f8c:	08001401 	.word	0x08001401

08001f90 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev>:

            void impl_3_1_DisplayConfig4()
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
//                mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 15, "4BACK");
                auto &button = Button::getInstance();
 8001f98:	f000 ff84 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001f9c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f006 fc94 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00c      	beq.n	8001fce <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x50>)
 8001fb6:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x54>)
 8001fbc:	480a      	ldr	r0, [pc, #40]	; (8001fe8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x58>)
 8001fbe:	f7fe ff27 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a09      	ldr	r2, [pc, #36]	; (8001fec <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x5c>)
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001fce:	2100      	movs	r1, #0
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f006 fc6d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	0800c7d4 	.word	0x0800c7d4
 8001fe4:	0800c240 	.word	0x0800c240
 8001fe8:	0800c77c 	.word	0x0800c77c
 8001fec:	08001401 	.word	0x08001401

08001ff0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv>:

            void impl_3_2_SupplyAlgorithm()
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8001ff8:	f000 ff54 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001ffc:	60f8      	str	r0, [r7, #12]
                static int supplyAlgorithm = 0;    // MPPT+CC-CV va CC-CV Only

                mLcd.clearDisplay();
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	330c      	adds	r3, #12
 8002002:	4618      	mov	r0, r3
 8002004:	f006 fe84 	bl	8008d10 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f103 000c 	add.w	r0, r3, #12
 800200e:	4b4b      	ldr	r3, [pc, #300]	; (800213c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x14c>)
 8002010:	2200      	movs	r2, #0
 8002012:	2100      	movs	r1, #0
 8002014:	f006 fd5a 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f006 fc57 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 800201e:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002020:	2b01      	cmp	r3, #1
 8002022:	d005      	beq.n	8002030 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x40>
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f006 fc51 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 800202a:	4603      	mov	r3, r0
 800202c:	2b02      	cmp	r3, #2
 800202e:	d101      	bne.n	8002034 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x44>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x46>
 8002034:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002036:	2b00      	cmp	r3, #0
 8002038:	d009      	beq.n	800204e <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x5e>
                {
                    supplyAlgorithm = !supplyAlgorithm;
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	bf0c      	ite	eq
 8002042:	2301      	moveq	r3, #1
 8002044:	2300      	movne	r3, #0
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 800204c:	601a      	str	r2, [r3, #0]
                }

                if (supplyAlgorithm == 0)
 800204e:	4b3c      	ldr	r3, [pc, #240]	; (8002140 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d108      	bne.n	8002068 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x78>
                {
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f103 000c 	add.w	r0, r3, #12
 800205c:	4b39      	ldr	r3, [pc, #228]	; (8002144 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x154>)
 800205e:	2200      	movs	r2, #0
 8002060:	2101      	movs	r1, #1
 8002062:	f006 fd33 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 8002066:	e014      	b.n	8002092 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xa2>
                }
                else if (supplyAlgorithm == 1)
 8002068:	4b35      	ldr	r3, [pc, #212]	; (8002140 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d108      	bne.n	8002082 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x92>
                {
                    mLcd.displayLine(1, 0, "CC-CV Only");
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 000c 	add.w	r0, r3, #12
 8002076:	4b34      	ldr	r3, [pc, #208]	; (8002148 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x158>)
 8002078:	2200      	movs	r2, #0
 800207a:	2101      	movs	r1, #1
 800207c:	f006 fd26 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 8002080:	e007      	b.n	8002092 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xa2>
                }
                else
                {
                    mLcd.displayLine(1, 0, "Error");
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f103 000c 	add.w	r0, r3, #12
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x15c>)
 800208a:	2200      	movs	r2, #0
 800208c:	2101      	movs	r1, #1
 800208e:	f006 fd1d 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f006 fc1a 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002098:	4603      	mov	r3, r0
 800209a:	2b03      	cmp	r3, #3
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d021      	beq.n	80020ec <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>
                {
                    if (supplyAlgorithm == 0)
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d108      	bne.n	80020c2 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xd2>
                    {
                        mLcd.displayLine(2, 0, "> MPPT+CC-CV");
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 000c 	add.w	r0, r3, #12
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x160>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	2102      	movs	r1, #2
 80020bc:	f006 fd06 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 80020c0:	e014      	b.n	80020ec <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>
                    }
                    else if (supplyAlgorithm == 1)
 80020c2:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d108      	bne.n	80020dc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xec>
                    {
                        mLcd.displayLine(2, 0, "> CC-CV Only");
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f103 000c 	add.w	r0, r3, #12
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x164>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	2102      	movs	r1, #2
 80020d6:	f006 fcf9 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 80020da:	e007      	b.n	80020ec <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>
                    }
                    else
                    {
                        mLcd.displayLine(2, 0, "Error alogrithm");
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f103 000c 	add.w	r0, r3, #12
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x168>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	2102      	movs	r1, #2
 80020e8:	f006 fcf0 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 000c 	add.w	r0, r3, #12
 80020f2:	4b1a      	ldr	r3, [pc, #104]	; (800215c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x16c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	2103      	movs	r1, #3
 80020f8:	f006 fce8 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f006 fbe5 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002102:	4603      	mov	r3, r0
 8002104:	2b04      	cmp	r3, #4
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x13c>
                {
                    LOGI("Go back to Setting screen");
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x170>)
 8002114:	f240 2219 	movw	r2, #537	; 0x219
 8002118:	4912      	ldr	r1, [pc, #72]	; (8002164 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x174>)
 800211a:	4813      	ldr	r0, [pc, #76]	; (8002168 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x178>)
 800211c:	f7fe fe78 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x17c>)
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800212c:	2100      	movs	r1, #0
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f006 fbbe 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	0800c7ec 	.word	0x0800c7ec
 8002140:	20000204 	.word	0x20000204
 8002144:	0800c800 	.word	0x0800c800
 8002148:	0800c80c 	.word	0x0800c80c
 800214c:	0800c818 	.word	0x0800c818
 8002150:	0800c820 	.word	0x0800c820
 8002154:	0800c830 	.word	0x0800c830
 8002158:	0800c840 	.word	0x0800c840
 800215c:	0800c850 	.word	0x0800c850
 8002160:	0800c868 	.word	0x0800c868
 8002164:	0800c240 	.word	0x0800c240
 8002168:	0800c884 	.word	0x0800c884
 800216c:	08001705 	.word	0x08001705

08002170 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv>:

            void impl_3_2_ChargeMode()
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002178:	f000 fe94 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800217c:	60f8      	str	r0, [r7, #12]
                static int chargeMode = 0;    // PSU

                mLcd.clearDisplay();
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	330c      	adds	r3, #12
 8002182:	4618      	mov	r0, r3
 8002184:	f006 fdc4 	bl	8008d10 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 000c 	add.w	r0, r3, #12
 800218e:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x194>)
 8002190:	2200      	movs	r2, #0
 8002192:	2100      	movs	r1, #0
 8002194:	f006 fc9a 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f006 fb97 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00d      	beq.n	80021ca <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x5a>
                {
                    if (chargeMode == 0)
 80021ae:	4b56      	ldr	r3, [pc, #344]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x4e>
                    {
                        chargeMode = 3;
 80021b6:	4b54      	ldr	r3, [pc, #336]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021b8:	2203      	movs	r2, #3
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e019      	b.n	80021f2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x82>
                    }
                    else
                    {
                        chargeMode--;
 80021be:	4b52      	ldr	r3, [pc, #328]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	4a50      	ldr	r2, [pc, #320]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	e013      	b.n	80021f2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x82>
                    }
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f006 fb7e 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	bf0c      	ite	eq
 80021d6:	2301      	moveq	r3, #1
 80021d8:	2300      	movne	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x82>
                {
                    if (chargeMode == 2)
 80021e0:	4b49      	ldr	r3, [pc, #292]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d004      	beq.n	80021f2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x82>
                    {
                        chargeMode == 0;
                    }
                    else
                    {
                        chargeMode++;
 80021e8:	4b47      	ldr	r3, [pc, #284]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	4a46      	ldr	r2, [pc, #280]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021f0:	6013      	str	r3, [r2, #0]
                    }
                }

                if (chargeMode == 0)
 80021f2:	4b45      	ldr	r3, [pc, #276]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d108      	bne.n	800220c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x9c>
                {
                    mLcd.displayLine(1, 0, "PSU");
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f103 000c 	add.w	r0, r3, #12
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x19c>)
 8002202:	2200      	movs	r2, #0
 8002204:	2101      	movs	r1, #1
 8002206:	f006 fc61 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 800220a:	e018      	b.n	800223e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xce>
                }
                else if (chargeMode == 1)
 800220c:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d108      	bne.n	8002226 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xb6>
                {
                    mLcd.displayLine(1, 0, "Charger");
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 000c 	add.w	r0, r3, #12
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a0>)
 800221c:	2200      	movs	r2, #0
 800221e:	2101      	movs	r1, #1
 8002220:	f006 fc54 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 8002224:	e00b      	b.n	800223e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xce>
                }
                else if (chargeMode == 2)
 8002226:	4b38      	ldr	r3, [pc, #224]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xce>
                {
                    mLcd.displayLine(1, 0, "Inverter");
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f103 000c 	add.w	r0, r3, #12
 8002234:	4b37      	ldr	r3, [pc, #220]	; (8002314 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a4>)
 8002236:	2200      	movs	r2, #0
 8002238:	2101      	movs	r1, #1
 800223a:	f006 fc47 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f006 fb44 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002244:	4603      	mov	r3, r0
 8002246:	2b03      	cmp	r3, #3
 8002248:	bf0c      	ite	eq
 800224a:	2301      	moveq	r3, #1
 800224c:	2300      	movne	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02e      	beq.n	80022b2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x142>
                {
                    if (chargeMode == 0)
 8002254:	4b2c      	ldr	r3, [pc, #176]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d108      	bne.n	800226e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xfe>
                    {
                        mLcd.displayLine(2, 0, "PSU");
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f103 000c 	add.w	r0, r3, #12
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x19c>)
 8002264:	2200      	movs	r2, #0
 8002266:	2102      	movs	r1, #2
 8002268:	f006 fc30 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 800226c:	e021      	b.n	80022b2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x142>
                    }
                    else if (chargeMode == 1)
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d108      	bne.n	8002288 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x118>
                    {
                        mLcd.displayLine(2, 0, "Charger");
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 000c 	add.w	r0, r3, #12
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a0>)
 800227e:	2200      	movs	r2, #0
 8002280:	2102      	movs	r1, #2
 8002282:	f006 fc23 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 8002286:	e014      	b.n	80022b2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x142>
                    }
                    else if (chargeMode == 2)
 8002288:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d108      	bne.n	80022a2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x132>
                    {
                        mLcd.displayLine(2, 0, "Inverter");
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 000c 	add.w	r0, r3, #12
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a4>)
 8002298:	2200      	movs	r2, #0
 800229a:	2102      	movs	r1, #2
 800229c:	f006 fc16 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
 80022a0:	e007      	b.n	80022b2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x142>
                    }
                    else
                    {
                        mLcd.displayLine(2, 0, "Error mode");
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 000c 	add.w	r0, r3, #12
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	2102      	movs	r1, #2
 80022ae:	f006 fc0d 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 000c 	add.w	r0, r3, #12
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1ac>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	2103      	movs	r1, #3
 80022be:	f006 fc05 	bl	8008acc <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f006 fb02 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	bf0c      	ite	eq
 80022ce:	2301      	moveq	r3, #1
 80022d0:	2300      	movne	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00c      	beq.n	80022f2 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x182>
                {
                    LOGI("Go back to Setting screen");
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b0>)
 80022da:	f240 2265 	movw	r2, #613	; 0x265
 80022de:	4911      	ldr	r1, [pc, #68]	; (8002324 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 80022e0:	4811      	ldr	r0, [pc, #68]	; (8002328 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b8>)
 80022e2:	f7fe fd95 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a10      	ldr	r2, [pc, #64]	; (800232c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1bc>)
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80022f2:	2100      	movs	r1, #0
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f006 fadb 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	0800c7ec 	.word	0x0800c7ec
 8002308:	20000208 	.word	0x20000208
 800230c:	0800c8ac 	.word	0x0800c8ac
 8002310:	0800c8b0 	.word	0x0800c8b0
 8002314:	0800c8b8 	.word	0x0800c8b8
 8002318:	0800c8c4 	.word	0x0800c8c4
 800231c:	0800c850 	.word	0x0800c850
 8002320:	0800c8d0 	.word	0x0800c8d0
 8002324:	0800c240 	.word	0x0800c240
 8002328:	0800c884 	.word	0x0800c884
 800232c:	08001705 	.word	0x08001705

08002330 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv>:

            void impl_3_2_MaxBatteryVolt()
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002338:	f000 fdb4 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800233c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f006 fac4 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002344:	4603      	mov	r3, r0
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf0c      	ite	eq
 800234a:	2301      	moveq	r3, #1
 800234c:	2300      	movne	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x50>)
 8002356:	f44f 721c 	mov.w	r2, #624	; 0x270
 800235a:	490a      	ldr	r1, [pc, #40]	; (8002384 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x54>)
 800235c:	480a      	ldr	r0, [pc, #40]	; (8002388 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x58>)
 800235e:	f7fe fd57 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a09      	ldr	r2, [pc, #36]	; (800238c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x5c>)
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800236e:	2100      	movs	r1, #0
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f006 fa9d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002376:	bf00      	nop
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	0800c8e4 	.word	0x0800c8e4
 8002384:	0800c240 	.word	0x0800c240
 8002388:	0800c884 	.word	0x0800c884
 800238c:	08001705 	.word	0x08001705

08002390 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv>:

            void impl_3_2_MinBatteryVolt()
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002398:	f000 fd84 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800239c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f006 fa94 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x50>)
 80023b6:	f240 227b 	movw	r2, #635	; 0x27b
 80023ba:	490a      	ldr	r1, [pc, #40]	; (80023e4 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x54>)
 80023bc:	480a      	ldr	r0, [pc, #40]	; (80023e8 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x58>)
 80023be:	f7fe fd27 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a09      	ldr	r2, [pc, #36]	; (80023ec <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x5c>)
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80023ce:	2100      	movs	r1, #0
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f006 fa6d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	0800c8fc 	.word	0x0800c8fc
 80023e4:	0800c240 	.word	0x0800c240
 80023e8:	0800c884 	.word	0x0800c884
 80023ec:	08001705 	.word	0x08001705

080023f0 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv>:

            void impl_3_2_ChargingCurrent()
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80023f8:	f000 fd54 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80023fc:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f006 fa64 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002404:	4603      	mov	r3, r0
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf0c      	ite	eq
 800240a:	2301      	moveq	r3, #1
 800240c:	2300      	movne	r3, #0
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00c      	beq.n	800242e <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x50>)
 8002416:	f240 2286 	movw	r2, #646	; 0x286
 800241a:	490a      	ldr	r1, [pc, #40]	; (8002444 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x54>)
 800241c:	480a      	ldr	r0, [pc, #40]	; (8002448 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x58>)
 800241e:	f7fe fcf7 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a09      	ldr	r2, [pc, #36]	; (800244c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x5c>)
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800242e:	2100      	movs	r1, #0
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f006 fa3d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	0800c914 	.word	0x0800c914
 8002444:	0800c240 	.word	0x0800c240
 8002448:	0800c884 	.word	0x0800c884
 800244c:	08001705 	.word	0x08001705

08002450 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv>:

            void impl_3_2_CoolingFan()
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002458:	f000 fd24 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800245c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f006 fa34 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002464:	4603      	mov	r3, r0
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00c      	beq.n	800248e <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x50>)
 8002476:	f240 2291 	movw	r2, #657	; 0x291
 800247a:	490a      	ldr	r1, [pc, #40]	; (80024a4 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x54>)
 800247c:	480a      	ldr	r0, [pc, #40]	; (80024a8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x58>)
 800247e:	f7fe fcc7 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a09      	ldr	r2, [pc, #36]	; (80024ac <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x5c>)
 8002486:	605a      	str	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800248e:	2100      	movs	r1, #0
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f006 fa0d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	0800c930 	.word	0x0800c930
 80024a4:	0800c240 	.word	0x0800c240
 80024a8:	0800c884 	.word	0x0800c884
 80024ac:	08001705 	.word	0x08001705

080024b0 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv>:

            void impl_3_2_FanTriggerTemp()
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80024b8:	f000 fcf4 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80024bc:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f006 fa04 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00c      	beq.n	80024ee <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x50>)
 80024d6:	f44f 7227 	mov.w	r2, #668	; 0x29c
 80024da:	490a      	ldr	r1, [pc, #40]	; (8002504 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x54>)
 80024dc:	480a      	ldr	r0, [pc, #40]	; (8002508 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x58>)
 80024de:	f7fe fc97 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a09      	ldr	r2, [pc, #36]	; (800250c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x5c>)
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80024ee:	2100      	movs	r1, #0
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f006 f9dd 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	0800c944 	.word	0x0800c944
 8002504:	0800c240 	.word	0x0800c240
 8002508:	0800c884 	.word	0x0800c884
 800250c:	08001705 	.word	0x08001705

08002510 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv>:

            void impl_3_2_ShutdownTemp()
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002518:	f000 fcc4 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800251c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f006 f9d4 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002524:	4603      	mov	r3, r0
 8002526:	2b04      	cmp	r3, #4
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00c      	beq.n	800254e <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x50>)
 8002536:	f240 22a7 	movw	r2, #679	; 0x2a7
 800253a:	490a      	ldr	r1, [pc, #40]	; (8002564 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x54>)
 800253c:	480a      	ldr	r0, [pc, #40]	; (8002568 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x58>)
 800253e:	f7fe fc67 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a09      	ldr	r2, [pc, #36]	; (800256c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x5c>)
 8002546:	605a      	str	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800254e:	2100      	movs	r1, #0
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f006 f9ad 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	0800c95c 	.word	0x0800c95c
 8002564:	0800c240 	.word	0x0800c240
 8002568:	0800c884 	.word	0x0800c884
 800256c:	08001705 	.word	0x08001705

08002570 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv>:

            void impl_3_2_AutoloadCfg()
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002578:	f000 fc94 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800257c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f006 f9a4 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002584:	4603      	mov	r3, r0
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00c      	beq.n	80025ae <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x50>)
 8002596:	f240 22b2 	movw	r2, #690	; 0x2b2
 800259a:	490a      	ldr	r1, [pc, #40]	; (80025c4 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x54>)
 800259c:	480a      	ldr	r0, [pc, #40]	; (80025c8 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x58>)
 800259e:	f7fe fc37 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a09      	ldr	r2, [pc, #36]	; (80025cc <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x5c>)
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80025ae:	2100      	movs	r1, #0
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f006 f97d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	0800c974 	.word	0x0800c974
 80025c4:	0800c240 	.word	0x0800c240
 80025c8:	0800c884 	.word	0x0800c884
 80025cc:	08001705 	.word	0x08001705

080025d0 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv>:

            void impl_3_2_Backlight()
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80025d8:	f000 fc64 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80025dc:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f006 f974 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00c      	beq.n	800260e <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 80025f4:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x50>)
 80025f6:	f240 22bd 	movw	r2, #701	; 0x2bd
 80025fa:	490a      	ldr	r1, [pc, #40]	; (8002624 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x54>)
 80025fc:	480a      	ldr	r0, [pc, #40]	; (8002628 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x58>)
 80025fe:	f7fe fc07 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a09      	ldr	r2, [pc, #36]	; (800262c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x5c>)
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800260e:	2100      	movs	r1, #0
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f006 f94d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	0800c98c 	.word	0x0800c98c
 8002624:	0800c240 	.word	0x0800c240
 8002628:	0800c884 	.word	0x0800c884
 800262c:	08001705 	.word	0x08001705

08002630 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv>:

            void impl_3_2_FactoryReset()
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002638:	f000 fc34 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800263c:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f006 f944 	bl	80088cc <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002644:	4603      	mov	r3, r0
 8002646:	2b04      	cmp	r3, #4
 8002648:	bf0c      	ite	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2300      	movne	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00c      	beq.n	800266e <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x50>)
 8002656:	f44f 7232 	mov.w	r2, #712	; 0x2c8
 800265a:	490a      	ldr	r1, [pc, #40]	; (8002684 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x54>)
 800265c:	480a      	ldr	r0, [pc, #40]	; (8002688 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x58>)
 800265e:	f7fe fbd7 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a09      	ldr	r2, [pc, #36]	; (800268c <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x5c>)
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800266e:	2100      	movs	r1, #0
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f006 f91d 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002676:	bf00      	nop
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	0800c9a0 	.word	0x0800c9a0
 8002684:	0800c240 	.word	0x0800c240
 8002688:	0800c884 	.word	0x0800c884
 800268c:	08001705 	.word	0x08001705

08002690 <HAL_GPIO_EXTI_Callback>:
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 2600000U;
 800269e:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_GPIO_EXTI_Callback+0x148>)
 80026a0:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	e002      	b.n	80026ae <HAL_GPIO_EXTI_Callback+0x1e>
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	3301      	adds	r3, #1
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	bf8c      	ite	hi
 80026b6:	2301      	movhi	r3, #1
 80026b8:	2300      	movls	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f3      	bne.n	80026a8 <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == BUT_UP_Pin)
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d10b      	bne.n	80026e2 <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Up pin");
 80026ca:	4b44      	ldr	r3, [pc, #272]	; (80027dc <HAL_GPIO_EXTI_Callback+0x14c>)
 80026cc:	2253      	movs	r2, #83	; 0x53
 80026ce:	4944      	ldr	r1, [pc, #272]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x150>)
 80026d0:	4844      	ldr	r0, [pc, #272]	; (80027e4 <HAL_GPIO_EXTI_Callback+0x154>)
 80026d2:	f7fe fb9d 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::UP;
 80026d6:	4b44      	ldr	r3, [pc, #272]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x158>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_UP_GPIO_Port;
 80026dc:	4b43      	ldr	r3, [pc, #268]	; (80027ec <HAL_GPIO_EXTI_Callback+0x15c>)
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	e032      	b.n	8002748 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_DOWN_Pin)
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d10b      	bne.n	8002700 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Down pin");
 80026e8:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <HAL_GPIO_EXTI_Callback+0x14c>)
 80026ea:	2259      	movs	r2, #89	; 0x59
 80026ec:	493c      	ldr	r1, [pc, #240]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x150>)
 80026ee:	4840      	ldr	r0, [pc, #256]	; (80027f0 <HAL_GPIO_EXTI_Callback+0x160>)
 80026f0:	f7fe fb8e 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::DOWN;
 80026f4:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x158>)
 80026f6:	2202      	movs	r2, #2
 80026f8:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_DOWN_GPIO_Port;
 80026fa:	4b3c      	ldr	r3, [pc, #240]	; (80027ec <HAL_GPIO_EXTI_Callback+0x15c>)
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e023      	b.n	8002748 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_BACK_Pin)
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	2b04      	cmp	r3, #4
 8002704:	d10b      	bne.n	800271e <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 8002706:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_GPIO_EXTI_Callback+0x14c>)
 8002708:	225f      	movs	r2, #95	; 0x5f
 800270a:	4935      	ldr	r1, [pc, #212]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x150>)
 800270c:	4839      	ldr	r0, [pc, #228]	; (80027f4 <HAL_GPIO_EXTI_Callback+0x164>)
 800270e:	f7fe fb7f 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 8002712:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x158>)
 8002714:	2204      	movs	r2, #4
 8002716:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_BACK_GPIO_Port;
 8002718:	4b34      	ldr	r3, [pc, #208]	; (80027ec <HAL_GPIO_EXTI_Callback+0x15c>)
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	e014      	b.n	8002748 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_SEL_Pin)
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2b08      	cmp	r3, #8
 8002722:	d10b      	bne.n	800273c <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 8002724:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <HAL_GPIO_EXTI_Callback+0x14c>)
 8002726:	2265      	movs	r2, #101	; 0x65
 8002728:	492d      	ldr	r1, [pc, #180]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x150>)
 800272a:	4833      	ldr	r0, [pc, #204]	; (80027f8 <HAL_GPIO_EXTI_Callback+0x168>)
 800272c:	f7fe fb70 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SEL;
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x158>)
 8002732:	2203      	movs	r2, #3
 8002734:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_SEL_GPIO_Port;
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <HAL_GPIO_EXTI_Callback+0x15c>)
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e005      	b.n	8002748 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_GPIO_EXTI_Callback+0x14c>)
 800273e:	226b      	movs	r2, #107	; 0x6b
 8002740:	4927      	ldr	r1, [pc, #156]	; (80027e0 <HAL_GPIO_EXTI_Callback+0x150>)
 8002742:	482e      	ldr	r0, [pc, #184]	; (80027fc <HAL_GPIO_EXTI_Callback+0x16c>)
 8002744:	f7fe fb64 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 8002748:	f000 fbac 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800274c:	4602      	mov	r2, r0
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_GPIO_EXTI_Callback+0x158>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f006 f8ab 	bl	80088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 800275a:	f000 fba3 	bl	8002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800275e:	4603      	mov	r3, r0
 8002760:	4618      	mov	r0, r3
 8002762:	f006 f8bf 	bl	80088e4 <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01e      	beq.n	80027aa <HAL_GPIO_EXTI_Callback+0x11a>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 800276c:	e002      	b.n	8002774 <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	4619      	mov	r1, r3
 8002778:	69f8      	ldr	r0, [r7, #28]
 800277a:	f002 fceb 	bl	8005154 <HAL_GPIO_ReadPin>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2da      	uxtb	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	69b9      	ldr	r1, [r7, #24]
 800278e:	4299      	cmp	r1, r3
 8002790:	bf8c      	ite	hi
 8002792:	2301      	movhi	r3, #1
 8002794:	2300      	movls	r3, #0
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4013      	ands	r3, r2
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e1      	bne.n	800276e <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e002      	b.n	80027b6 <HAL_GPIO_EXTI_Callback+0x126>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	bf8c      	ite	hi
 80027be:	2301      	movhi	r3, #1
 80027c0:	2300      	movls	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f3      	bne.n	80027b0 <HAL_GPIO_EXTI_Callback+0x120>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_GPIO_EXTI_Callback+0x170>)
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	6153      	str	r3, [r2, #20]
}
 80027ce:	bf00      	nop
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	0027ac40 	.word	0x0027ac40
 80027dc:	0800c9b8 	.word	0x0800c9b8
 80027e0:	0800c9d0 	.word	0x0800c9d0
 80027e4:	0800c9dc 	.word	0x0800c9dc
 80027e8:	200003c8 	.word	0x200003c8
 80027ec:	48000800 	.word	0x48000800
 80027f0:	0800c9f8 	.word	0x0800c9f8
 80027f4:	0800ca18 	.word	0x0800ca18
 80027f8:	0800ca38 	.word	0x0800ca38
 80027fc:	0800ca58 	.word	0x0800ca58
 8002800:	40010400 	.word	0x40010400

08002804 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
    blib::Analog::getInstance().sampling();
 800280c:	f7fe faea 	bl	8000de4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8002810:	4603      	mov	r3, r0
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fa20 	bl	8000c58 <_ZN4blib6Analog8samplingEv>
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002826:	f000 fe35 	bl	8003494 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800282a:	f000 f83d 	bl	80028a8 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800282e:	f000 fa47 	bl	8002cc0 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 8002832:	f000 fa27 	bl	8002c84 <_ZL11MX_DMA_Initv>
    MX_ADC1_Init();
 8002836:	f000 f8ab 	bl	8002990 <_ZL12MX_ADC1_Initv>
    MX_I2C1_Init();
 800283a:	f000 f939 	bl	8002ab0 <_ZL12MX_I2C1_Initv>
    MX_USART2_UART_Init();
 800283e:	f000 f9ed 	bl	8002c1c <_ZL19MX_USART2_UART_Initv>
    MX_TIM2_Init();
 8002842:	f000 f983 	bl	8002b4c <_ZL12MX_TIM2_Initv>
    /* USER CODE BEGIN 2 */
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <main+0x74>)
 8002848:	22aa      	movs	r2, #170	; 0xaa
 800284a:	4913      	ldr	r1, [pc, #76]	; (8002898 <main+0x78>)
 800284c:	4813      	ldr	r0, [pc, #76]	; (800289c <main+0x7c>)
 800284e:	f7fe fadf 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 8002852:	4b10      	ldr	r3, [pc, #64]	; (8002894 <main+0x74>)
 8002854:	22ab      	movs	r2, #171	; 0xab
 8002856:	4910      	ldr	r1, [pc, #64]	; (8002898 <main+0x78>)
 8002858:	4811      	ldr	r0, [pc, #68]	; (80028a0 <main+0x80>)
 800285a:	f7fe fad9 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 800285e:	4b0d      	ldr	r3, [pc, #52]	; (8002894 <main+0x74>)
 8002860:	22ac      	movs	r2, #172	; 0xac
 8002862:	490d      	ldr	r1, [pc, #52]	; (8002898 <main+0x78>)
 8002864:	480f      	ldr	r0, [pc, #60]	; (80028a4 <main+0x84>)
 8002866:	f7fe fad3 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

    auto &analog = blib::Analog::getInstance();
 800286a:	f7fe fabb 	bl	8000de4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 800286e:	60f8      	str	r0, [r7, #12]
    auto &monitor = blib::Monitor::getInstance();
 8002870:	f000 fb2e 	bl	8002ed0 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 8002874:	60b8      	str	r0, [r7, #8]
    auto &chargeCtrl = blib::ChargeControl::getInstance();
 8002876:	f000 fb41 	bl	8002efc <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 800287a:	6078      	str	r0, [r7, #4]
    auto &lcdSimulate = blib::LcdSimulate::getInstance();
 800287c:	f000 fafc 	bl	8002e78 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 8002880:	6038      	str	r0, [r7, #0]
        /* USER CODE BEGIN 3 */
//        analog.readAnalog();
//        chargeCtrl.run();
////        serialMnt.show();
//        monitor.showMenu();
        lcdSimulate.run();
 8002882:	6838      	ldr	r0, [r7, #0]
 8002884:	f7fe fc08 	bl	8001098 <_ZN4blib11LcdSimulate3runEv>
        HAL_Delay(1000);
 8002888:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800288c:	f000 fe68 	bl	8003560 <HAL_Delay>
        lcdSimulate.run();
 8002890:	e7f7      	b.n	8002882 <main+0x62>
 8002892:	bf00      	nop
 8002894:	0800ca7c 	.word	0x0800ca7c
 8002898:	0800c9d0 	.word	0x0800c9d0
 800289c:	0800ca84 	.word	0x0800ca84
 80028a0:	0800cab0 	.word	0x0800cab0
 80028a4:	0800cacc 	.word	0x0800cacc

080028a8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0a6      	sub	sp, #152	; 0x98
 80028ac:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80028ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028b2:	2228      	movs	r2, #40	; 0x28
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f007 f9a9 	bl	8009c0e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80028bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2258      	movs	r2, #88	; 0x58
 80028d0:	2100      	movs	r1, #0
 80028d2:	4618      	mov	r0, r3
 80028d4:	f007 f99b 	bl	8009c0e <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028d8:	2302      	movs	r3, #2
 80028da:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028dc:	2301      	movs	r3, #1
 80028de:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028e0:	2310      	movs	r3, #16
 80028e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028e6:	2302      	movs	r3, #2
 80028e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002902:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002906:	4618      	mov	r0, r3
 8002908:	f003 f898 	bl	8005a3c <HAL_RCC_OscConfig>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	bf14      	ite	ne
 8002912:	2301      	movne	r3, #1
 8002914:	2300      	moveq	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <_Z18SystemClock_Configv+0x78>
    {
        Error_Handler();
 800291c:	f000 fa76 	bl	8002e0c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8002920:	230f      	movs	r3, #15
 8002922:	65fb      	str	r3, [r7, #92]	; 0x5c
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002924:	2302      	movs	r3, #2
 8002926:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002928:	2300      	movs	r3, #0
 800292a:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800292c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002930:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002932:	2300      	movs	r3, #0
 8002934:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002936:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f004 f8d1 	bl	8006ae4 <HAL_RCC_ClockConfig>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <_Z18SystemClock_Configv+0xae>
    {
        Error_Handler();
 8002952:	f000 fa5b 	bl	8002e0c <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <_Z18SystemClock_Configv+0xe4>)
 8002958:	607b      	str	r3, [r7, #4]
            | RCC_PERIPHCLK_TIM2;
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002962:	2300      	movs	r3, #0
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f004 faf1 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf14      	ite	ne
 8002974:	2301      	movne	r3, #1
 8002976:	2300      	moveq	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <_Z18SystemClock_Configv+0xda>
    {
        Error_Handler();
 800297e:	f000 fa45 	bl	8002e0c <Error_Handler>
    }
}
 8002982:	bf00      	nop
 8002984:	3798      	adds	r7, #152	; 0x98
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	00100022 	.word	0x00100022

08002990 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = { 0 };
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 80029a2:	1d3b      	adds	r3, r7, #4
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
 80029b0:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80029b8:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029ba:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029c0:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029c2:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80029c8:	4b38      	ldr	r3, [pc, #224]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80029ce:	4b37      	ldr	r3, [pc, #220]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	765a      	strb	r2, [r3, #25]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029d4:	4b35      	ldr	r3, [pc, #212]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029dc:	4b33      	ldr	r3, [pc, #204]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029de:	2200      	movs	r2, #0
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029e8:	4b30      	ldr	r3, [pc, #192]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 2;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029f0:	2202      	movs	r2, #2
 80029f2:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 80029fe:	2208      	movs	r2, #8
 8002a00:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	761a      	strb	r2, [r3, #24]
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002a08:	4b28      	ldr	r3, [pc, #160]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a0e:	4827      	ldr	r0, [pc, #156]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 8002a10:	f000 fdde 	bl	80035d0 <HAL_ADC_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <_ZL12MX_ADC1_Initv+0x98>
    {
        Error_Handler();
 8002a24:	f000 f9f2 	bl	8002e0c <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a2c:	f107 031c 	add.w	r3, r7, #28
 8002a30:	4619      	mov	r1, r3
 8002a32:	481e      	ldr	r0, [pc, #120]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 8002a34:	f001 fc2e 	bl	8004294 <HAL_ADCEx_MultiModeConfigChannel>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <_ZL12MX_ADC1_Initv+0xbc>
    {
        Error_Handler();
 8002a48:	f000 f9e0 	bl	8002e0c <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a50:	2301      	movs	r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002a54:	2301      	movs	r3, #1
 8002a56:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8002a58:	2307      	movs	r3, #7
 8002a5a:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	4619      	mov	r1, r3
 8002a68:	4810      	ldr	r0, [pc, #64]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 8002a6a:	f001 f929 	bl	8003cc0 <HAL_ADC_ConfigChannel>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf14      	ite	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	2300      	moveq	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <_ZL12MX_ADC1_Initv+0xf2>
    {
        Error_Handler();
 8002a7e:	f000 f9c5 	bl	8002e0c <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a82:	2302      	movs	r3, #2
 8002a84:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4808      	ldr	r0, [pc, #32]	; (8002aac <_ZL12MX_ADC1_Initv+0x11c>)
 8002a8c:	f001 f918 	bl	8003cc0 <HAL_ADC_ConfigChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <_ZL12MX_ADC1_Initv+0x114>
    {
        Error_Handler();
 8002aa0:	f000 f9b4 	bl	8002e0c <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8002aa4:	bf00      	nop
 8002aa6:	3728      	adds	r7, #40	; 0x28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	2000020c 	.word	0x2000020c

08002ab0 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8002ab4:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002ab6:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <_ZL12MX_I2C1_Initv+0x94>)
 8002ab8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x2000090E;
 8002aba:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002abc:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <_ZL12MX_I2C1_Initv+0x98>)
 8002abe:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002acc:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ad8:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002aea:	4815      	ldr	r0, [pc, #84]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002aec:	f002 fb7a 	bl	80051e4 <HAL_I2C_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	bf14      	ite	ne
 8002af6:	2301      	movne	r3, #1
 8002af8:	2300      	moveq	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <_ZL12MX_I2C1_Initv+0x54>
    {
        Error_Handler();
 8002b00:	f000 f984 	bl	8002e0c <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b04:	2100      	movs	r1, #0
 8002b06:	480e      	ldr	r0, [pc, #56]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002b08:	f002 ff00 	bl	800590c <HAL_I2CEx_ConfigAnalogFilter>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf14      	ite	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	2300      	moveq	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <_ZL12MX_I2C1_Initv+0x70>
    {
        Error_Handler();
 8002b1c:	f000 f976 	bl	8002e0c <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b20:	2100      	movs	r1, #0
 8002b22:	4807      	ldr	r0, [pc, #28]	; (8002b40 <_ZL12MX_I2C1_Initv+0x90>)
 8002b24:	f002 ff3d 	bl	80059a2 <HAL_I2CEx_ConfigDigitalFilter>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	bf14      	ite	ne
 8002b2e:	2301      	movne	r3, #1
 8002b30:	2300      	moveq	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <_ZL12MX_I2C1_Initv+0x8c>
    {
        Error_Handler();
 8002b38:	f000 f968 	bl	8002e0c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	200002a0 	.word	0x200002a0
 8002b44:	40005400 	.word	0x40005400
 8002b48:	2000090e 	.word	0x2000090e

08002b4c <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b52:	f107 031c 	add.w	r3, r7, #28
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002b5e:	463b      	mov	r3, r7
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8002b70:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b76:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 71;
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002b7a:	2247      	movs	r2, #71	; 0x47
 8002b7c:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b7e:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 500 - 1;
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002b86:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002b8a:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b8c:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b98:	481f      	ldr	r0, [pc, #124]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002b9a:	f004 fbf7 	bl	800738c <HAL_TIM_PWM_Init>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bf14      	ite	ne
 8002ba4:	2301      	movne	r3, #1
 8002ba6:	2300      	moveq	r3, #0
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <_ZL12MX_TIM2_Initv+0x66>
    {
        Error_Handler();
 8002bae:	f000 f92d 	bl	8002e0c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bba:	f107 031c 	add.w	r3, r7, #28
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4815      	ldr	r0, [pc, #84]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002bc2:	f005 f8f3 	bl	8007dac <HAL_TIMEx_MasterConfigSynchronization>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	bf14      	ite	ne
 8002bcc:	2301      	movne	r3, #1
 8002bce:	2300      	moveq	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <_ZL12MX_TIM2_Initv+0x8e>
    {
        Error_Handler();
 8002bd6:	f000 f919 	bl	8002e0c <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bda:	2360      	movs	r3, #96	; 0x60
 8002bdc:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 250;
 8002bde:	23fa      	movs	r3, #250	; 0xfa
 8002be0:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bea:	463b      	mov	r3, r7
 8002bec:	2200      	movs	r2, #0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4809      	ldr	r0, [pc, #36]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002bf2:	f004 fc23 	bl	800743c <HAL_TIM_PWM_ConfigChannel>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <_ZL12MX_TIM2_Initv+0xbe>
    {
        Error_Handler();
 8002c06:	f000 f901 	bl	8002e0c <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8002c0a:	4803      	ldr	r0, [pc, #12]	; (8002c18 <_ZL12MX_TIM2_Initv+0xcc>)
 8002c0c:	f000 fa7a 	bl	8003104 <HAL_TIM_MspPostInit>

}
 8002c10:	bf00      	nop
 8002c12:	3728      	adds	r7, #40	; 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200002f4 	.word	0x200002f4

08002c1c <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <_ZL19MX_USART2_UART_Initv+0x64>)
 8002c24:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c2c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002c3a:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c42:	220c      	movs	r2, #12
 8002c44:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c5e:	4807      	ldr	r0, [pc, #28]	; (8002c7c <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c60:	f005 f930 	bl	8007ec4 <HAL_UART_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bf14      	ite	ne
 8002c6a:	2301      	movne	r3, #1
 8002c6c:	2300      	moveq	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <_ZL19MX_USART2_UART_Initv+0x5c>
    {
        Error_Handler();
 8002c74:	f000 f8ca 	bl	8002e0c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000340 	.word	0x20000340
 8002c80:	40004400 	.word	0x40004400

08002c84 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <_ZL11MX_DMA_Initv+0x38>)
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <_ZL11MX_DMA_Initv+0x38>)
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6153      	str	r3, [r2, #20]
 8002c96:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <_ZL11MX_DMA_Initv+0x38>)
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	200b      	movs	r0, #11
 8002ca8:	f001 fea7 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cac:	200b      	movs	r0, #11
 8002cae:	f001 fec0 	bl	8004a32 <HAL_NVIC_EnableIRQ>

}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000

08002cc0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b088      	sub	sp, #32
 8002cc4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cc6:	f107 030c 	add.w	r3, r7, #12
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]
 8002cd4:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ce0:	6153      	str	r3, [r2, #20]
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4a43      	ldr	r2, [pc, #268]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	6153      	str	r3, [r2, #20]
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4a3d      	ldr	r2, [pc, #244]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6153      	str	r3, [r2, #20]
 8002d12:	4b3b      	ldr	r3, [pc, #236]	; (8002e00 <_ZL12MX_GPIO_Initv+0x140>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_RED_Pin | LED_YEL_Pin | LED_GRE_Pin, GPIO_PIN_SET);
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2107      	movs	r1, #7
 8002d22:	4838      	ldr	r0, [pc, #224]	; (8002e04 <_ZL12MX_GPIO_Initv+0x144>)
 8002d24:	f002 fa2e 	bl	8005184 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | BUCK_EN_Pin, GPIO_PIN_SET);
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002d2e:	4836      	ldr	r0, [pc, #216]	; (8002e08 <_ZL12MX_GPIO_Initv+0x148>)
 8002d30:	f002 fa28 	bl	8005184 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, BFC_Pin | FAN_Pin, GPIO_PIN_SET);
 8002d34:	2201      	movs	r2, #1
 8002d36:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d3e:	f002 fa21 	bl	8005184 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUT_UP_Pin BUT_DOWN_Pin BUT_BACK_Pin BUT_SEL_Pin */
    GPIO_InitStruct.Pin = BUT_UP_Pin | BUT_DOWN_Pin | BUT_BACK_Pin | BUT_SEL_Pin;
 8002d42:	230f      	movs	r3, #15
 8002d44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d46:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	4619      	mov	r1, r3
 8002d56:	482c      	ldr	r0, [pc, #176]	; (8002e08 <_ZL12MX_GPIO_Initv+0x148>)
 8002d58:	f002 f872 	bl	8004e40 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_RED_Pin LED_YEL_Pin LED_GRE_Pin */
    GPIO_InitStruct.Pin = LED_RED_Pin | LED_YEL_Pin | LED_GRE_Pin;
 8002d5c:	2307      	movs	r3, #7
 8002d5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d60:	2301      	movs	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	4619      	mov	r1, r3
 8002d72:	4824      	ldr	r0, [pc, #144]	; (8002e04 <_ZL12MX_GPIO_Initv+0x144>)
 8002d74:	f002 f864 	bl	8004e40 <HAL_GPIO_Init>

    /*Configure GPIO pins : INVERTER_CTRL_Pin BUCK_EN_Pin */
    GPIO_InitStruct.Pin = INVERTER_CTRL_Pin | BUCK_EN_Pin;
 8002d78:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002d7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8a:	f107 030c 	add.w	r3, r7, #12
 8002d8e:	4619      	mov	r1, r3
 8002d90:	481d      	ldr	r0, [pc, #116]	; (8002e08 <_ZL12MX_GPIO_Initv+0x148>)
 8002d92:	f002 f855 	bl	8004e40 <HAL_GPIO_Init>

    /*Configure GPIO pins : BFC_Pin FAN_Pin */
    GPIO_InitStruct.Pin = BFC_Pin | FAN_Pin;
 8002d96:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002d9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	4619      	mov	r1, r3
 8002dae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002db2:	f002 f845 	bl	8004e40 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2006      	movs	r0, #6
 8002dbc:	f001 fe1d 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002dc0:	2006      	movs	r0, #6
 8002dc2:	f001 fe36 	bl	8004a32 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2007      	movs	r0, #7
 8002dcc:	f001 fe15 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002dd0:	2007      	movs	r0, #7
 8002dd2:	f001 fe2e 	bl	8004a32 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2008      	movs	r0, #8
 8002ddc:	f001 fe0d 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8002de0:	2008      	movs	r0, #8
 8002de2:	f001 fe26 	bl	8004a32 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	2009      	movs	r0, #9
 8002dec:	f001 fe05 	bl	80049fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002df0:	2009      	movs	r0, #9
 8002df2:	f001 fe1e 	bl	8004a32 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	48000400 	.word	0x48000400
 8002e08:	48000800 	.word	0x48000800

08002e0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e10:	b672      	cpsid	i
}
 8002e12:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002e14:	e7fe      	b.n	8002e14 <Error_Handler+0x8>
	...

08002e18 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev>:
                Singleton()
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
                {
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev+0x1c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
                }
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	0800cbdc 	.word	0x0800cbdc

08002e38 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>:
                virtual ~Singleton()
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
                }
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev+0x1c>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	0800cbdc 	.word	0x0800cbdc

08002e58 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED0Ev>:
                virtual ~Singleton()
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
                }
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffe9 	bl	8002e38 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>
 8002e66:	2104      	movs	r1, #4
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f006 f84f 	bl	8008f0c <_ZdlPvj>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>:
                static T& getInstance()
 8002e78:	b598      	push	{r3, r4, r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002e7c:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002e84:	2020      	movs	r0, #32
 8002e86:	f006 f843 	bl	8008f10 <_Znwj>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461c      	mov	r4, r3
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7fe f8b6 	bl	8001000 <_ZN4blib11LcdSimulateC1Ev>
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8002e96:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002e98:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
                }
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd98      	pop	{r3, r4, r7, pc}
 8002ea0:	200003d8 	.word	0x200003d8

08002ea4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 8002ea4:	b598      	push	{r3, r4, r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002eb0:	2008      	movs	r0, #8
 8002eb2:	f006 f82d 	bl	8008f10 <_Znwj>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461c      	mov	r4, r3
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f005 fcc4 	bl	8008848 <_ZN4blib6ButtonC1Ev>
 8002ec0:	4b02      	ldr	r3, [pc, #8]	; (8002ecc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002ec2:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002ec4:	4b01      	ldr	r3, [pc, #4]	; (8002ecc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
                }
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd98      	pop	{r3, r4, r7, pc}
 8002ecc:	200003d0 	.word	0x200003d0

08002ed0 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>:
                static T& getInstance()
 8002ed0:	b598      	push	{r3, r4, r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002edc:	2028      	movs	r0, #40	; 0x28
 8002ede:	f006 f817 	bl	8008f10 <_Znwj>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461c      	mov	r4, r3
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	f7fd ffb8 	bl	8000e5c <_ZN4blib7MonitorC1Ev>
 8002eec:	4b02      	ldr	r3, [pc, #8]	; (8002ef8 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8002eee:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002ef0:	4b01      	ldr	r3, [pc, #4]	; (8002ef8 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
                }
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd98      	pop	{r3, r4, r7, pc}
 8002ef8:	200003cc 	.word	0x200003cc

08002efc <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 8002efc:	b598      	push	{r3, r4, r7, lr}
 8002efe:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002f08:	201c      	movs	r0, #28
 8002f0a:	f006 f801 	bl	8008f10 <_Znwj>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461c      	mov	r4, r3
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7fd fef8 	bl	8000d08 <_ZN4blib13ChargeControlC1Ev>
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002f1a:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002f1c:	4b01      	ldr	r3, [pc, #4]	; (8002f24 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
                }
 8002f20:	4618      	mov	r0, r3
 8002f22:	bd98      	pop	{r3, r4, r7, pc}
 8002f24:	200003d4 	.word	0x200003d4

08002f28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_MspInit+0x44>)
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	4a0e      	ldr	r2, [pc, #56]	; (8002f6c <HAL_MspInit+0x44>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	6193      	str	r3, [r2, #24]
 8002f3a:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_MspInit+0x44>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_MspInit+0x44>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <HAL_MspInit+0x44>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f50:	61d3      	str	r3, [r2, #28]
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_MspInit+0x44>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	f107 0314 	add.w	r3, r7, #20
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f90:	d14c      	bne.n	800302c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f92:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_ADC_MspInit+0xc4>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4a27      	ldr	r2, [pc, #156]	; (8003034 <HAL_ADC_MspInit+0xc4>)
 8002f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9c:	6153      	str	r3, [r2, #20]
 8002f9e:	4b25      	ldr	r3, [pc, #148]	; (8003034 <HAL_ADC_MspInit+0xc4>)
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002faa:	4b22      	ldr	r3, [pc, #136]	; (8003034 <HAL_ADC_MspInit+0xc4>)
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	4a21      	ldr	r2, [pc, #132]	; (8003034 <HAL_ADC_MspInit+0xc4>)
 8002fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb4:	6153      	str	r3, [r2, #20]
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <HAL_ADC_MspInit+0xc4>)
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fd8:	f001 ff32 	bl	8004e40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fdc:	4b16      	ldr	r3, [pc, #88]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <HAL_ADC_MspInit+0xcc>)
 8002fe0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fee:	4b12      	ldr	r3, [pc, #72]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8002ff0:	2280      	movs	r2, #128	; 0x80
 8002ff2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8002ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ffc:	4b0e      	ldr	r3, [pc, #56]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8002ffe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003002:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8003006:	2220      	movs	r2, #32
 8003008:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 800300c:	2200      	movs	r2, #0
 800300e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003010:	4809      	ldr	r0, [pc, #36]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8003012:	f001 fd28 	bl	8004a66 <HAL_DMA_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800301c:	f7ff fef6 	bl	8002e0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8003024:	639a      	str	r2, [r3, #56]	; 0x38
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_ADC_MspInit+0xc8>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800302c:	bf00      	nop
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000
 8003038:	2000025c 	.word	0x2000025c
 800303c:	40020008 	.word	0x40020008

08003040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a17      	ldr	r2, [pc, #92]	; (80030bc <HAL_I2C_MspInit+0x7c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d127      	bne.n	80030b2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 8003068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306c:	6153      	str	r3, [r2, #20]
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800307a:	23c0      	movs	r3, #192	; 0xc0
 800307c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800307e:	2312      	movs	r3, #18
 8003080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003086:	2303      	movs	r3, #3
 8003088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800308a:	2304      	movs	r3, #4
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308e:	f107 0314 	add.w	r3, r7, #20
 8003092:	4619      	mov	r1, r3
 8003094:	480b      	ldr	r0, [pc, #44]	; (80030c4 <HAL_I2C_MspInit+0x84>)
 8003096:	f001 fed3 	bl	8004e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 80030a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030a4:	61d3      	str	r3, [r2, #28]
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_I2C_MspInit+0x80>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40005400 	.word	0x40005400
 80030c0:	40021000 	.word	0x40021000
 80030c4:	48000400 	.word	0x48000400

080030c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d8:	d10b      	bne.n	80030f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_TIM_PWM_MspInit+0x38>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_TIM_PWM_MspInit+0x38>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	61d3      	str	r3, [r2, #28]
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_TIM_PWM_MspInit+0x38>)
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000

08003104 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310c:	f107 030c 	add.w	r3, r7, #12
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003124:	d11c      	bne.n	8003160 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_TIM_MspPostInit+0x64>)
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_TIM_MspPostInit+0x64>)
 800312c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003130:	6153      	str	r3, [r2, #20]
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_TIM_MspPostInit+0x64>)
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800313e:	2320      	movs	r3, #32
 8003140:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003142:	2302      	movs	r3, #2
 8003144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800314e:	2301      	movs	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	4619      	mov	r1, r3
 8003158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800315c:	f001 fe70 	bl	8004e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003160:	bf00      	nop
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000

0800316c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_UART_MspInit+0x7c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d128      	bne.n	80031e0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800318e:	4b17      	ldr	r3, [pc, #92]	; (80031ec <HAL_UART_MspInit+0x80>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a16      	ldr	r2, [pc, #88]	; (80031ec <HAL_UART_MspInit+0x80>)
 8003194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003198:	61d3      	str	r3, [r2, #28]
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <HAL_UART_MspInit+0x80>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <HAL_UART_MspInit+0x80>)
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4a10      	ldr	r2, [pc, #64]	; (80031ec <HAL_UART_MspInit+0x80>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	6153      	str	r3, [r2, #20]
 80031b2:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <HAL_UART_MspInit+0x80>)
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031be:	230c      	movs	r3, #12
 80031c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ce:	2307      	movs	r3, #7
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	4619      	mov	r1, r3
 80031d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031dc:	f001 fe30 	bl	8004e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031e0:	bf00      	nop
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	40004400 	.word	0x40004400
 80031ec:	40021000 	.word	0x40021000

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <NMI_Handler+0x4>

080031f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fa:	e7fe      	b.n	80031fa <HardFault_Handler+0x4>

080031fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003200:	e7fe      	b.n	8003200 <MemManage_Handler+0x4>

08003202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003206:	e7fe      	b.n	8003206 <BusFault_Handler+0x4>

08003208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800320c:	e7fe      	b.n	800320c <UsageFault_Handler+0x4>

0800320e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800322a:	b480      	push	{r7}
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800323c:	f000 f970 	bl	8003520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}

08003244 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_UP_Pin);
 8003248:	2001      	movs	r0, #1
 800324a:	f001 ffb3 	bl	80051b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}

08003252 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_DOWN_Pin);
 8003256:	2002      	movs	r0, #2
 8003258:	f001 ffac 	bl	80051b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}

08003260 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BACK_Pin);
 8003264:	2004      	movs	r0, #4
 8003266:	f001 ffa5 	bl	80051b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800326a:	bf00      	nop
 800326c:	bd80      	pop	{r7, pc}

0800326e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SEL_Pin);
 8003272:	2008      	movs	r0, #8
 8003274:	f001 ff9e 	bl	80051b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}

0800327c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <DMA1_Channel1_IRQHandler+0x10>)
 8003282:	f001 fccf 	bl	8004c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000025c 	.word	0x2000025c

08003290 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return 1;
 8003294:	2301      	movs	r3, #1
}
 8003296:	4618      	mov	r0, r3
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_kill>:

int _kill(int pid, int sig)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032aa:	f006 fd57 	bl	8009d5c <__errno>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2216      	movs	r2, #22
 80032b2:	601a      	str	r2, [r3, #0]
  return -1;
 80032b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_exit>:

void _exit (int status)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032c8:	f04f 31ff 	mov.w	r1, #4294967295
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ffe7 	bl	80032a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032d2:	e7fe      	b.n	80032d2 <_exit+0x12>

080032d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e00a      	b.n	80032fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032e6:	f3af 8000 	nop.w
 80032ea:	4601      	mov	r1, r0
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	60ba      	str	r2, [r7, #8]
 80032f2:	b2ca      	uxtb	r2, r1
 80032f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	3301      	adds	r3, #1
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	429a      	cmp	r2, r3
 8003302:	dbf0      	blt.n	80032e6 <_read+0x12>
  }

  return len;
 8003304:	687b      	ldr	r3, [r7, #4]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b086      	sub	sp, #24
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e009      	b.n	8003334 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	60ba      	str	r2, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	3301      	adds	r3, #1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	dbf1      	blt.n	8003320 <_write+0x12>
  }
  return len;
 800333c:	687b      	ldr	r3, [r7, #4]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <_close>:

int _close(int file)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800334e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800336e:	605a      	str	r2, [r3, #4]
  return 0;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <_isatty>:

int _isatty(int file)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003386:	2301      	movs	r3, #1
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033b8:	4a14      	ldr	r2, [pc, #80]	; (800340c <_sbrk+0x5c>)
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <_sbrk+0x60>)
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <_sbrk+0x64>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033cc:	4b11      	ldr	r3, [pc, #68]	; (8003414 <_sbrk+0x64>)
 80033ce:	4a12      	ldr	r2, [pc, #72]	; (8003418 <_sbrk+0x68>)
 80033d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <_sbrk+0x64>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d207      	bcs.n	80033f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033e0:	f006 fcbc 	bl	8009d5c <__errno>
 80033e4:	4603      	mov	r3, r0
 80033e6:	220c      	movs	r2, #12
 80033e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ea:	f04f 33ff 	mov.w	r3, #4294967295
 80033ee:	e009      	b.n	8003404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033f0:	4b08      	ldr	r3, [pc, #32]	; (8003414 <_sbrk+0x64>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033f6:	4b07      	ldr	r3, [pc, #28]	; (8003414 <_sbrk+0x64>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4413      	add	r3, r2
 80033fe:	4a05      	ldr	r2, [pc, #20]	; (8003414 <_sbrk+0x64>)
 8003400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003402:	68fb      	ldr	r3, [r7, #12]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20010000 	.word	0x20010000
 8003410:	00000400 	.word	0x00000400
 8003414:	200003dc 	.word	0x200003dc
 8003418:	20000938 	.word	0x20000938

0800341c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800341c:	b480      	push	{r7}
 800341e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <SystemInit+0x20>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <SystemInit+0x20>)
 8003428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800342c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003478 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003444:	f7ff ffea 	bl	800341c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003448:	480c      	ldr	r0, [pc, #48]	; (800347c <LoopForever+0x6>)
  ldr r1, =_edata
 800344a:	490d      	ldr	r1, [pc, #52]	; (8003480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800344c:	4a0d      	ldr	r2, [pc, #52]	; (8003484 <LoopForever+0xe>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003450:	e002      	b.n	8003458 <LoopCopyDataInit>

08003452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003456:	3304      	adds	r3, #4

08003458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800345a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800345c:	d3f9      	bcc.n	8003452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003460:	4c0a      	ldr	r4, [pc, #40]	; (800348c <LoopForever+0x16>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003464:	e001      	b.n	800346a <LoopFillZerobss>

08003466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003468:	3204      	adds	r2, #4

0800346a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800346a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800346c:	d3fb      	bcc.n	8003466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800346e:	f006 fc7b 	bl	8009d68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003472:	f7ff f9d5 	bl	8002820 <main>

08003476 <LoopForever>:

LoopForever:
    b LoopForever
 8003476:	e7fe      	b.n	8003476 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003478:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800347c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003480:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003484:	0800cfc4 	.word	0x0800cfc4
  ldr r2, =_sbss
 8003488:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800348c:	20000934 	.word	0x20000934

08003490 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003490:	e7fe      	b.n	8003490 <ADC1_2_IRQHandler>
	...

08003494 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003498:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_Init+0x28>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a07      	ldr	r2, [pc, #28]	; (80034bc <HAL_Init+0x28>)
 800349e:	f043 0310 	orr.w	r3, r3, #16
 80034a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a4:	2003      	movs	r0, #3
 80034a6:	f001 fa9d 	bl	80049e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034aa:	200f      	movs	r0, #15
 80034ac:	f000 f808 	bl	80034c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b0:	f7ff fd3a 	bl	8002f28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	40022000 	.word	0x40022000

080034c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034c8:	4b12      	ldr	r3, [pc, #72]	; (8003514 <HAL_InitTick+0x54>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_InitTick+0x58>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fab5 	bl	8004a4e <HAL_SYSTICK_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e00e      	b.n	800350c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b0f      	cmp	r3, #15
 80034f2:	d80a      	bhi.n	800350a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f4:	2200      	movs	r2, #0
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	f04f 30ff 	mov.w	r0, #4294967295
 80034fc:	f001 fa7d 	bl	80049fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003500:	4a06      	ldr	r2, [pc, #24]	; (800351c <HAL_InitTick+0x5c>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000008 	.word	0x20000008
 8003518:	20000010 	.word	0x20000010
 800351c:	2000000c 	.word	0x2000000c

08003520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_IncTick+0x20>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	461a      	mov	r2, r3
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_IncTick+0x24>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4413      	add	r3, r2
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_IncTick+0x24>)
 8003532:	6013      	str	r3, [r2, #0]
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000010 	.word	0x20000010
 8003544:	200003e0 	.word	0x200003e0

08003548 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return uwTick;  
 800354c:	4b03      	ldr	r3, [pc, #12]	; (800355c <HAL_GetTick+0x14>)
 800354e:	681b      	ldr	r3, [r3, #0]
}
 8003550:	4618      	mov	r0, r3
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	200003e0 	.word	0x200003e0

08003560 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff ffee 	bl	8003548 <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d005      	beq.n	8003586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <HAL_Delay+0x44>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003586:	bf00      	nop
 8003588:	f7ff ffde 	bl	8003548 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	429a      	cmp	r2, r3
 8003596:	d8f7      	bhi.n	8003588 <HAL_Delay+0x28>
  {
  }
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000010 	.word	0x20000010

080035a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b09a      	sub	sp, #104	; 0x68
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e1e3      	b.n	80039b8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d176      	bne.n	80036f0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d152      	bne.n	80036b0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7ff fca3 	bl	8002f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d13b      	bne.n	80036b0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 ffe7 	bl	800460c <ADC_Disable>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d12f      	bne.n	80036b0 <HAL_ADC_Init+0xe0>
 8003650:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003654:	2b00      	cmp	r3, #0
 8003656:	d12b      	bne.n	80036b0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003660:	f023 0302 	bic.w	r3, r3, #2
 8003664:	f043 0202 	orr.w	r2, r3, #2
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800367a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800368a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800368c:	4b92      	ldr	r3, [pc, #584]	; (80038d8 <HAL_ADC_Init+0x308>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a92      	ldr	r2, [pc, #584]	; (80038dc <HAL_ADC_Init+0x30c>)
 8003692:	fba2 2303 	umull	r2, r3, r2, r3
 8003696:	0c9a      	lsrs	r2, r3, #18
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036a2:	e002      	b.n	80036aa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1f9      	bne.n	80036a4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80036c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036cc:	d110      	bne.n	80036f0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f023 0312 	bic.w	r3, r3, #18
 80036d6:	f043 0210 	orr.w	r2, r3, #16
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	f043 0201 	orr.w	r2, r3, #1
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f040 8150 	bne.w	800399e <HAL_ADC_Init+0x3ce>
 80036fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003702:	2b00      	cmp	r3, #0
 8003704:	f040 814b 	bne.w	800399e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003712:	2b00      	cmp	r3, #0
 8003714:	f040 8143 	bne.w	800399e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003720:	f043 0202 	orr.w	r2, r3, #2
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003730:	d004      	beq.n	800373c <HAL_ADC_Init+0x16c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6a      	ldr	r2, [pc, #424]	; (80038e0 <HAL_ADC_Init+0x310>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_ADC_Init+0x170>
 800373c:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <HAL_ADC_Init+0x314>)
 800373e:	e000      	b.n	8003742 <HAL_ADC_Init+0x172>
 8003740:	4b69      	ldr	r3, [pc, #420]	; (80038e8 <HAL_ADC_Init+0x318>)
 8003742:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800374c:	d102      	bne.n	8003754 <HAL_ADC_Init+0x184>
 800374e:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <HAL_ADC_Init+0x310>)
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	e01a      	b.n	800378a <HAL_ADC_Init+0x1ba>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a61      	ldr	r2, [pc, #388]	; (80038e0 <HAL_ADC_Init+0x310>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d103      	bne.n	8003766 <HAL_ADC_Init+0x196>
 800375e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e011      	b.n	800378a <HAL_ADC_Init+0x1ba>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a60      	ldr	r2, [pc, #384]	; (80038ec <HAL_ADC_Init+0x31c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d102      	bne.n	8003776 <HAL_ADC_Init+0x1a6>
 8003770:	4b5f      	ldr	r3, [pc, #380]	; (80038f0 <HAL_ADC_Init+0x320>)
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e009      	b.n	800378a <HAL_ADC_Init+0x1ba>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a5d      	ldr	r2, [pc, #372]	; (80038f0 <HAL_ADC_Init+0x320>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d102      	bne.n	8003786 <HAL_ADC_Init+0x1b6>
 8003780:	4b5a      	ldr	r3, [pc, #360]	; (80038ec <HAL_ADC_Init+0x31c>)
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e001      	b.n	800378a <HAL_ADC_Init+0x1ba>
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d108      	bne.n	80037aa <HAL_ADC_Init+0x1da>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_ADC_Init+0x1da>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_ADC_Init+0x1dc>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d11c      	bne.n	80037ea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d010      	beq.n	80037d8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d107      	bne.n	80037d2 <HAL_ADC_Init+0x202>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_ADC_Init+0x202>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_ADC_Init+0x204>
 80037d2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d108      	bne.n	80037ea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80037d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7e5b      	ldrb	r3, [r3, #25]
 80037ee:	035b      	lsls	r3, r3, #13
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f4:	2a01      	cmp	r2, #1
 80037f6:	d002      	beq.n	80037fe <HAL_ADC_Init+0x22e>
 80037f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037fc:	e000      	b.n	8003800 <HAL_ADC_Init+0x230>
 80037fe:	2200      	movs	r2, #0
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003810:	4313      	orrs	r3, r2
 8003812:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d11b      	bne.n	8003856 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7e5b      	ldrb	r3, [r3, #25]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	3b01      	subs	r3, #1
 800382c:	045a      	lsls	r2, r3, #17
 800382e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003830:	4313      	orrs	r3, r2
 8003832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003836:	663b      	str	r3, [r7, #96]	; 0x60
 8003838:	e00d      	b.n	8003856 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f043 0201 	orr.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	2b01      	cmp	r3, #1
 800385c:	d054      	beq.n	8003908 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_ADC_Init+0x31c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_ADC_Init+0x2a2>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a20      	ldr	r2, [pc, #128]	; (80038f0 <HAL_ADC_Init+0x320>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d140      	bne.n	80038f4 <HAL_ADC_Init+0x324>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800387a:	d02a      	beq.n	80038d2 <HAL_ADC_Init+0x302>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003884:	d022      	beq.n	80038cc <HAL_ADC_Init+0x2fc>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800388e:	d01a      	beq.n	80038c6 <HAL_ADC_Init+0x2f6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8003898:	d012      	beq.n	80038c0 <HAL_ADC_Init+0x2f0>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80038a2:	d00a      	beq.n	80038ba <HAL_ADC_Init+0x2ea>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a8:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80038ac:	d002      	beq.n	80038b4 <HAL_ADC_Init+0x2e4>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	e023      	b.n	80038fc <HAL_ADC_Init+0x32c>
 80038b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038b8:	e020      	b.n	80038fc <HAL_ADC_Init+0x32c>
 80038ba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80038be:	e01d      	b.n	80038fc <HAL_ADC_Init+0x32c>
 80038c0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80038c4:	e01a      	b.n	80038fc <HAL_ADC_Init+0x32c>
 80038c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ca:	e017      	b.n	80038fc <HAL_ADC_Init+0x32c>
 80038cc:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80038d0:	e014      	b.n	80038fc <HAL_ADC_Init+0x32c>
 80038d2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80038d6:	e011      	b.n	80038fc <HAL_ADC_Init+0x32c>
 80038d8:	20000008 	.word	0x20000008
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	50000100 	.word	0x50000100
 80038e4:	50000300 	.word	0x50000300
 80038e8:	50000700 	.word	0x50000700
 80038ec:	50000400 	.word	0x50000400
 80038f0:	50000500 	.word	0x50000500
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003900:	4313      	orrs	r3, r2
 8003902:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003904:	4313      	orrs	r3, r2
 8003906:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b00      	cmp	r3, #0
 8003914:	d114      	bne.n	8003940 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003924:	f023 0302 	bic.w	r3, r3, #2
 8003928:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	7e1b      	ldrb	r3, [r3, #24]
 800392e:	039a      	lsls	r2, r3, #14
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4313      	orrs	r3, r2
 800393a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800393c:	4313      	orrs	r3, r2
 800393e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <HAL_ADC_Init+0x3f0>)
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003950:	430b      	orrs	r3, r1
 8003952:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d10c      	bne.n	8003976 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f023 010f 	bic.w	r1, r3, #15
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
 8003974:	e007      	b.n	8003986 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 020f 	bic.w	r2, r2, #15
 8003984:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f023 0303 	bic.w	r3, r3, #3
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
 800399c:	e00a      	b.n	80039b4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f023 0312 	bic.w	r3, r3, #18
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80039ae:	2301      	movs	r3, #1
 80039b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80039b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3768      	adds	r7, #104	; 0x68
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	fff0c007 	.word	0xfff0c007

080039c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 80f7 	bne.w	8003bd2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d101      	bne.n	80039f2 <HAL_ADC_Start_DMA+0x2e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e0f2      	b.n	8003bd8 <HAL_ADC_Start_DMA+0x214>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a02:	d004      	beq.n	8003a0e <HAL_ADC_Start_DMA+0x4a>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a75      	ldr	r2, [pc, #468]	; (8003be0 <HAL_ADC_Start_DMA+0x21c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d109      	bne.n	8003a22 <HAL_ADC_Start_DMA+0x5e>
 8003a0e:	4b75      	ldr	r3, [pc, #468]	; (8003be4 <HAL_ADC_Start_DMA+0x220>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	bf0c      	ite	eq
 8003a1a:	2301      	moveq	r3, #1
 8003a1c:	2300      	movne	r3, #0
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	e008      	b.n	8003a34 <HAL_ADC_Start_DMA+0x70>
 8003a22:	4b71      	ldr	r3, [pc, #452]	; (8003be8 <HAL_ADC_Start_DMA+0x224>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 031f 	and.w	r3, r3, #31
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80c5 	beq.w	8003bc4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fd82 	bl	8004544 <ADC_Enable>
 8003a40:	4603      	mov	r3, r0
 8003a42:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 80b7 	bne.w	8003bba <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a54:	f023 0301 	bic.w	r3, r3, #1
 8003a58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a68:	d004      	beq.n	8003a74 <HAL_ADC_Start_DMA+0xb0>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5c      	ldr	r2, [pc, #368]	; (8003be0 <HAL_ADC_Start_DMA+0x21c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d106      	bne.n	8003a82 <HAL_ADC_Start_DMA+0xbe>
 8003a74:	4b5b      	ldr	r3, [pc, #364]	; (8003be4 <HAL_ADC_Start_DMA+0x220>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d010      	beq.n	8003aa2 <HAL_ADC_Start_DMA+0xde>
 8003a80:	e005      	b.n	8003a8e <HAL_ADC_Start_DMA+0xca>
 8003a82:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_ADC_Start_DMA+0x224>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d009      	beq.n	8003aa2 <HAL_ADC_Start_DMA+0xde>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a96:	d004      	beq.n	8003aa2 <HAL_ADC_Start_DMA+0xde>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a53      	ldr	r2, [pc, #332]	; (8003bec <HAL_ADC_Start_DMA+0x228>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d115      	bne.n	8003ace <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d036      	beq.n	8003b2a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ac4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003acc:	e02d      	b.n	8003b2a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae2:	d004      	beq.n	8003aee <HAL_ADC_Start_DMA+0x12a>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3d      	ldr	r2, [pc, #244]	; (8003be0 <HAL_ADC_Start_DMA+0x21c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10a      	bne.n	8003b04 <HAL_ADC_Start_DMA+0x140>
 8003aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	e008      	b.n	8003b16 <HAL_ADC_Start_DMA+0x152>
 8003b04:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_ADC_Start_DMA+0x228>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	bf14      	ite	ne
 8003b10:	2301      	movne	r3, #1
 8003b12:	2300      	moveq	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d106      	bne.n	8003b46 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3c:	f023 0206 	bic.w	r2, r3, #6
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	645a      	str	r2, [r3, #68]	; 0x44
 8003b44:	e002      	b.n	8003b4c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	4a25      	ldr	r2, [pc, #148]	; (8003bf0 <HAL_ADC_Start_DMA+0x22c>)
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	4a24      	ldr	r2, [pc, #144]	; (8003bf4 <HAL_ADC_Start_DMA+0x230>)
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	4a23      	ldr	r2, [pc, #140]	; (8003bf8 <HAL_ADC_Start_DMA+0x234>)
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	221c      	movs	r2, #28
 8003b72:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0210 	orr.w	r2, r2, #16
 8003b82:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3340      	adds	r3, #64	; 0x40
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f000 ffa6 	bl	8004af4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0204 	orr.w	r2, r2, #4
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e00d      	b.n	8003bd6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bc2:	e008      	b.n	8003bd6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bd0:	e001      	b.n	8003bd6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	50000100 	.word	0x50000100
 8003be4:	50000300 	.word	0x50000300
 8003be8:	50000700 	.word	0x50000700
 8003bec:	50000400 	.word	0x50000400
 8003bf0:	08004479 	.word	0x08004479
 8003bf4:	080044f3 	.word	0x080044f3
 8003bf8:	0800450f 	.word	0x0800450f

08003bfc <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c04:	2300      	movs	r3, #0
 8003c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d101      	bne.n	8003c16 <HAL_ADC_Stop_DMA+0x1a>
 8003c12:	2302      	movs	r3, #2
 8003c14:	e050      	b.n	8003cb8 <HAL_ADC_Stop_DMA+0xbc>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003c1e:	216c      	movs	r1, #108	; 0x6c
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fd59 	bl	80046d8 <ADC_ConversionStop>
 8003c26:	4603      	mov	r3, r0
 8003c28:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d13e      	bne.n	8003cae <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0201 	bic.w	r2, r2, #1
 8003c3e:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d10f      	bne.n	8003c6c <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 ffae 	bl	8004bb2 <HAL_DMA_Abort>
 8003c56:	4603      	mov	r3, r0
 8003c58:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0210 	bic.w	r2, r2, #16
 8003c7a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d105      	bne.n	8003c8e <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fcc2 	bl	800460c <ADC_Disable>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]
 8003c8c:	e002      	b.n	8003c94 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fcbc 	bl	800460c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b09b      	sub	sp, #108	; 0x6c
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x22>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e2c8      	b.n	8004274 <HAL_ADC_ConfigChannel+0x5b4>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f040 82ac 	bne.w	8004252 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d81c      	bhi.n	8003d3c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	461a      	mov	r2, r3
 8003d16:	231f      	movs	r3, #31
 8003d18:	4093      	lsls	r3, r2
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	4019      	ands	r1, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
 8003d3a:	e063      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	d81e      	bhi.n	8003d82 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	3b1e      	subs	r3, #30
 8003d58:	221f      	movs	r2, #31
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43db      	mvns	r3, r3
 8003d60:	4019      	ands	r1, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	3b1e      	subs	r3, #30
 8003d74:	fa00 f203 	lsl.w	r2, r0, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	635a      	str	r2, [r3, #52]	; 0x34
 8003d80:	e040      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b0e      	cmp	r3, #14
 8003d88:	d81e      	bhi.n	8003dc8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	4413      	add	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	3b3c      	subs	r3, #60	; 0x3c
 8003d9e:	221f      	movs	r2, #31
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	4019      	ands	r1, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	3b3c      	subs	r3, #60	; 0x3c
 8003dba:	fa00 f203 	lsl.w	r2, r0, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
 8003dc6:	e01d      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	3b5a      	subs	r3, #90	; 0x5a
 8003ddc:	221f      	movs	r2, #31
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	4019      	ands	r1, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	3b5a      	subs	r3, #90	; 0x5a
 8003df8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80e5 	bne.w	8003fde <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b09      	cmp	r3, #9
 8003e1a:	d91c      	bls.n	8003e56 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6999      	ldr	r1, [r3, #24]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3b1e      	subs	r3, #30
 8003e2e:	2207      	movs	r2, #7
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	4019      	ands	r1, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6898      	ldr	r0, [r3, #8]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	4413      	add	r3, r2
 8003e46:	3b1e      	subs	r3, #30
 8003e48:	fa00 f203 	lsl.w	r2, r0, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	619a      	str	r2, [r3, #24]
 8003e54:	e019      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6959      	ldr	r1, [r3, #20]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	2207      	movs	r2, #7
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	4019      	ands	r1, r3
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6898      	ldr	r0, [r3, #8]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	fa00 f203 	lsl.w	r2, r0, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	08db      	lsrs	r3, r3, #3
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d84f      	bhi.n	8003f4c <HAL_ADC_ConfigChannel+0x28c>
 8003eac:	a201      	add	r2, pc, #4	; (adr r2, 8003eb4 <HAL_ADC_ConfigChannel+0x1f4>)
 8003eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb2:	bf00      	nop
 8003eb4:	08003ec5 	.word	0x08003ec5
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003f09 	.word	0x08003f09
 8003ec0:	08003f2b 	.word	0x08003f2b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eca:	4b99      	ldr	r3, [pc, #612]	; (8004130 <HAL_ADC_ConfigChannel+0x470>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	0691      	lsls	r1, r2, #26
 8003ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ee4:	e07b      	b.n	8003fde <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003eec:	4b90      	ldr	r3, [pc, #576]	; (8004130 <HAL_ADC_ConfigChannel+0x470>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	0691      	lsls	r1, r2, #26
 8003ef6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f04:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f06:	e06a      	b.n	8003fde <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_ADC_ConfigChannel+0x470>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	0691      	lsls	r1, r2, #26
 8003f18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f26:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f28:	e059      	b.n	8003fde <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f30:	4b7f      	ldr	r3, [pc, #508]	; (8004130 <HAL_ADC_ConfigChannel+0x470>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	0691      	lsls	r1, r2, #26
 8003f3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f48:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f4a:	e048      	b.n	8003fde <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	069b      	lsls	r3, r3, #26
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d107      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f6e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f76:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	069b      	lsls	r3, r3, #26
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d107      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f92:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	069b      	lsls	r3, r3, #26
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d107      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fb6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	069b      	lsls	r3, r3, #26
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d107      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fda:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003fdc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d108      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x33e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x33e>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <HAL_ADC_ConfigChannel+0x340>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	f040 8131 	bne.w	8004268 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d00f      	beq.n	800402e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43da      	mvns	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	400a      	ands	r2, r1
 8004028:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800402c:	e049      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2201      	movs	r2, #1
 800403c:	409a      	lsls	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b09      	cmp	r3, #9
 800404e:	d91c      	bls.n	800408a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6999      	ldr	r1, [r3, #24]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	3b1b      	subs	r3, #27
 8004062:	2207      	movs	r2, #7
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	4019      	ands	r1, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6898      	ldr	r0, [r3, #8]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	3b1b      	subs	r3, #27
 800407c:	fa00 f203 	lsl.w	r2, r0, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	619a      	str	r2, [r3, #24]
 8004088:	e01b      	b.n	80040c2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6959      	ldr	r1, [r3, #20]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	2207      	movs	r2, #7
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	4019      	ands	r1, r3
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6898      	ldr	r0, [r3, #8]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	4613      	mov	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ca:	d004      	beq.n	80040d6 <HAL_ADC_ConfigChannel+0x416>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_ADC_ConfigChannel+0x474>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d101      	bne.n	80040da <HAL_ADC_ConfigChannel+0x41a>
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <HAL_ADC_ConfigChannel+0x478>)
 80040d8:	e000      	b.n	80040dc <HAL_ADC_ConfigChannel+0x41c>
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_ADC_ConfigChannel+0x47c>)
 80040dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d105      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80040e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d015      	beq.n	800411e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80040f6:	2b11      	cmp	r3, #17
 80040f8:	d105      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80040fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00b      	beq.n	800411e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800410a:	2b12      	cmp	r3, #18
 800410c:	f040 80ac 	bne.w	8004268 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004118:	2b00      	cmp	r3, #0
 800411a:	f040 80a5 	bne.w	8004268 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004126:	d10b      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x480>
 8004128:	4b02      	ldr	r3, [pc, #8]	; (8004134 <HAL_ADC_ConfigChannel+0x474>)
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e023      	b.n	8004176 <HAL_ADC_ConfigChannel+0x4b6>
 800412e:	bf00      	nop
 8004130:	83fff000 	.word	0x83fff000
 8004134:	50000100 	.word	0x50000100
 8004138:	50000300 	.word	0x50000300
 800413c:	50000700 	.word	0x50000700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a4e      	ldr	r2, [pc, #312]	; (8004280 <HAL_ADC_ConfigChannel+0x5c0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d103      	bne.n	8004152 <HAL_ADC_ConfigChannel+0x492>
 800414a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	e011      	b.n	8004176 <HAL_ADC_ConfigChannel+0x4b6>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a4b      	ldr	r2, [pc, #300]	; (8004284 <HAL_ADC_ConfigChannel+0x5c4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d102      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x4a2>
 800415c:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <HAL_ADC_ConfigChannel+0x5c8>)
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e009      	b.n	8004176 <HAL_ADC_ConfigChannel+0x4b6>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a48      	ldr	r2, [pc, #288]	; (8004288 <HAL_ADC_ConfigChannel+0x5c8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d102      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x4b2>
 800416c:	4b45      	ldr	r3, [pc, #276]	; (8004284 <HAL_ADC_ConfigChannel+0x5c4>)
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e001      	b.n	8004176 <HAL_ADC_ConfigChannel+0x4b6>
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d108      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x4d6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x4d6>
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HAL_ADC_ConfigChannel+0x4d8>
 8004196:	2300      	movs	r3, #0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d150      	bne.n	800423e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800419c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d010      	beq.n	80041c4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d107      	bne.n	80041be <HAL_ADC_ConfigChannel+0x4fe>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_ADC_ConfigChannel+0x4fe>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x500>
 80041be:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d13c      	bne.n	800423e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d11d      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x548>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d4:	d118      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80041d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041e2:	4b2a      	ldr	r3, [pc, #168]	; (800428c <HAL_ADC_ConfigChannel+0x5cc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2a      	ldr	r2, [pc, #168]	; (8004290 <HAL_ADC_ConfigChannel+0x5d0>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	0c9a      	lsrs	r2, r3, #18
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041f8:	e002      	b.n	8004200 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f9      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004206:	e02e      	b.n	8004266 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b11      	cmp	r3, #17
 800420e:	d10b      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x568>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004218:	d106      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800421a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004224:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004226:	e01e      	b.n	8004266 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b12      	cmp	r3, #18
 800422e:	d11a      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800423a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800423c:	e013      	b.n	8004266 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f043 0220 	orr.w	r2, r3, #32
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004250:	e00a      	b.n	8004268 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	f043 0220 	orr.w	r2, r3, #32
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004264:	e000      	b.n	8004268 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004266:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004270:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004274:	4618      	mov	r0, r3
 8004276:	376c      	adds	r7, #108	; 0x6c
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	50000100 	.word	0x50000100
 8004284:	50000400 	.word	0x50000400
 8004288:	50000500 	.word	0x50000500
 800428c:	20000008 	.word	0x20000008
 8004290:	431bde83 	.word	0x431bde83

08004294 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004294:	b480      	push	{r7}
 8004296:	b099      	sub	sp, #100	; 0x64
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ac:	d102      	bne.n	80042b4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80042ae:	4b6d      	ldr	r3, [pc, #436]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	e01a      	b.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a6a      	ldr	r2, [pc, #424]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d103      	bne.n	80042c6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80042be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	e011      	b.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a67      	ldr	r2, [pc, #412]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d102      	bne.n	80042d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80042d0:	4b66      	ldr	r3, [pc, #408]	; (800446c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	e009      	b.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a64      	ldr	r2, [pc, #400]	; (800446c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d102      	bne.n	80042e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042e0:	4b61      	ldr	r3, [pc, #388]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	e001      	b.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042e6:	2300      	movs	r3, #0
 80042e8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0b0      	b.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80042fe:	2302      	movs	r3, #2
 8004300:	e0a9      	b.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 808d 	bne.w	8004434 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 0304 	and.w	r3, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	f040 8086 	bne.w	8004434 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004330:	d004      	beq.n	800433c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4b      	ldr	r2, [pc, #300]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800433c:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800433e:	e000      	b.n	8004342 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004340:	4b4c      	ldr	r3, [pc, #304]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004342:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d040      	beq.n	80043ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800434c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800435e:	035b      	lsls	r3, r3, #13
 8004360:	430b      	orrs	r3, r1
 8004362:	431a      	orrs	r2, r3
 8004364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004366:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b01      	cmp	r3, #1
 8004374:	d108      	bne.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004388:	2300      	movs	r3, #0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d15c      	bne.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80043aa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d14b      	bne.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80043b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043b8:	f023 030f 	bic.w	r3, r3, #15
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	6811      	ldr	r1, [r2, #0]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	6892      	ldr	r2, [r2, #8]
 80043c4:	430a      	orrs	r2, r1
 80043c6:	431a      	orrs	r2, r3
 80043c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ca:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80043cc:	e03c      	b.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d108      	bne.n	80043fa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80043f6:	2301      	movs	r3, #1
 80043f8:	e000      	b.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80043fa:	2300      	movs	r3, #0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d123      	bne.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 0303 	and.w	r3, r3, #3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d107      	bne.n	800441c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800441c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800441e:	2b00      	cmp	r3, #0
 8004420:	d112      	bne.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800442a:	f023 030f 	bic.w	r3, r3, #15
 800442e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004430:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004432:	e009      	b.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f043 0220 	orr.w	r2, r3, #32
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004446:	e000      	b.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004448:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004456:	4618      	mov	r0, r3
 8004458:	3764      	adds	r7, #100	; 0x64
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	50000100 	.word	0x50000100
 8004468:	50000400 	.word	0x50000400
 800446c:	50000500 	.word	0x50000500
 8004470:	50000300 	.word	0x50000300
 8004474:	50000700 	.word	0x50000700

08004478 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800448e:	2b00      	cmp	r3, #0
 8004490:	d126      	bne.n	80044e0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d115      	bne.n	80044d8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d111      	bne.n	80044d8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f043 0201 	orr.w	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7fe f993 	bl	8002804 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80044de:	e004      	b.n	80044ea <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
}
 80044ea:	bf00      	nop
 80044ec:	3710      	adds	r7, #16
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff f851 	bl	80035a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	f043 0204 	orr.w	r2, r3, #4
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff f841 	bl	80035bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453a:	bf00      	nop
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d108      	bne.n	8004570 <ADC_Enable+0x2c>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <ADC_Enable+0x2c>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <ADC_Enable+0x2e>
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d143      	bne.n	80045fe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	4b22      	ldr	r3, [pc, #136]	; (8004608 <ADC_Enable+0xc4>)
 800457e:	4013      	ands	r3, r2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00d      	beq.n	80045a0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004588:	f043 0210 	orr.w	r2, r3, #16
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e02f      	b.n	8004600 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80045b0:	f7fe ffca 	bl	8003548 <HAL_GetTick>
 80045b4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045b6:	e01b      	b.n	80045f0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045b8:	f7fe ffc6 	bl	8003548 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d914      	bls.n	80045f0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d00d      	beq.n	80045f0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f043 0210 	orr.w	r2, r3, #16
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	f043 0201 	orr.w	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d1dc      	bne.n	80045b8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	8000003f 	.word	0x8000003f

0800460c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d108      	bne.n	8004638 <ADC_Disable+0x2c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <ADC_Disable+0x2c>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <ADC_Disable+0x2e>
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d047      	beq.n	80046ce <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 030d 	and.w	r3, r3, #13
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10f      	bne.n	800466c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0202 	orr.w	r2, r2, #2
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2203      	movs	r2, #3
 8004662:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004664:	f7fe ff70 	bl	8003548 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800466a:	e029      	b.n	80046c0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0210 	orr.w	r2, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	f043 0201 	orr.w	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e023      	b.n	80046d0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004688:	f7fe ff5e 	bl	8003548 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d914      	bls.n	80046c0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d10d      	bne.n	80046c0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	f043 0210 	orr.w	r2, r3, #16
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	f043 0201 	orr.w	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e007      	b.n	80046d0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d0dc      	beq.n	8004688 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 809b 	beq.w	8004834 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800470c:	d12a      	bne.n	8004764 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004712:	2b01      	cmp	r3, #1
 8004714:	d126      	bne.n	8004764 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800471a:	2b01      	cmp	r3, #1
 800471c:	d122      	bne.n	8004764 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800471e:	230c      	movs	r3, #12
 8004720:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004722:	e014      	b.n	800474e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4a46      	ldr	r2, [pc, #280]	; (8004840 <ADC_ConversionStop+0x168>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d90d      	bls.n	8004748 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0210 	orr.w	r2, r3, #16
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e076      	b.n	8004836 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	3301      	adds	r3, #1
 800474c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d1e3      	bne.n	8004724 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2240      	movs	r2, #64	; 0x40
 8004762:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2b60      	cmp	r3, #96	; 0x60
 8004768:	d015      	beq.n	8004796 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b04      	cmp	r3, #4
 8004776:	d10e      	bne.n	8004796 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004782:	2b00      	cmp	r3, #0
 8004784:	d107      	bne.n	8004796 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0210 	orr.w	r2, r2, #16
 8004794:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b0c      	cmp	r3, #12
 800479a:	d015      	beq.n	80047c8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d10e      	bne.n	80047c8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d107      	bne.n	80047c8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f042 0220 	orr.w	r2, r2, #32
 80047c6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b60      	cmp	r3, #96	; 0x60
 80047cc:	d005      	beq.n	80047da <ADC_ConversionStop+0x102>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b6c      	cmp	r3, #108	; 0x6c
 80047d2:	d105      	bne.n	80047e0 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80047d4:	230c      	movs	r3, #12
 80047d6:	617b      	str	r3, [r7, #20]
        break;
 80047d8:	e005      	b.n	80047e6 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80047da:	2308      	movs	r3, #8
 80047dc:	617b      	str	r3, [r7, #20]
        break;
 80047de:	e002      	b.n	80047e6 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80047e0:	2304      	movs	r3, #4
 80047e2:	617b      	str	r3, [r7, #20]
        break;
 80047e4:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80047e6:	f7fe feaf 	bl	8003548 <HAL_GetTick>
 80047ea:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80047ec:	e01b      	b.n	8004826 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047ee:	f7fe feab 	bl	8003548 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b0b      	cmp	r3, #11
 80047fa:	d914      	bls.n	8004826 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0210 	orr.w	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f043 0201 	orr.w	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1dc      	bne.n	80047ee <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	000993ff 	.word	0x000993ff

08004844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004854:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004860:	4013      	ands	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800486c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004876:	4a04      	ldr	r2, [pc, #16]	; (8004888 <__NVIC_SetPriorityGrouping+0x44>)
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	60d3      	str	r3, [r2, #12]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 0307 	and.w	r3, r3, #7
}
 800489a:	4618      	mov	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	e000ed00 	.word	0xe000ed00

080048a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4603      	mov	r3, r0
 80048b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	db0b      	blt.n	80048d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	f003 021f 	and.w	r2, r3, #31
 80048c0:	4907      	ldr	r1, [pc, #28]	; (80048e0 <__NVIC_EnableIRQ+0x38>)
 80048c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	2001      	movs	r0, #1
 80048ca:	fa00 f202 	lsl.w	r2, r0, r2
 80048ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	e000e100 	.word	0xe000e100

080048e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	6039      	str	r1, [r7, #0]
 80048ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	db0a      	blt.n	800490e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	490c      	ldr	r1, [pc, #48]	; (8004930 <__NVIC_SetPriority+0x4c>)
 80048fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004902:	0112      	lsls	r2, r2, #4
 8004904:	b2d2      	uxtb	r2, r2
 8004906:	440b      	add	r3, r1
 8004908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800490c:	e00a      	b.n	8004924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	b2da      	uxtb	r2, r3
 8004912:	4908      	ldr	r1, [pc, #32]	; (8004934 <__NVIC_SetPriority+0x50>)
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	3b04      	subs	r3, #4
 800491c:	0112      	lsls	r2, r2, #4
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	440b      	add	r3, r1
 8004922:	761a      	strb	r2, [r3, #24]
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	e000e100 	.word	0xe000e100
 8004934:	e000ed00 	.word	0xe000ed00

08004938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	; 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f1c3 0307 	rsb	r3, r3, #7
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf28      	it	cs
 8004956:	2304      	movcs	r3, #4
 8004958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3304      	adds	r3, #4
 800495e:	2b06      	cmp	r3, #6
 8004960:	d902      	bls.n	8004968 <NVIC_EncodePriority+0x30>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	3b03      	subs	r3, #3
 8004966:	e000      	b.n	800496a <NVIC_EncodePriority+0x32>
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800496c:	f04f 32ff 	mov.w	r2, #4294967295
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43da      	mvns	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	401a      	ands	r2, r3
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004980:	f04f 31ff 	mov.w	r1, #4294967295
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	43d9      	mvns	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004990:	4313      	orrs	r3, r2
         );
}
 8004992:	4618      	mov	r0, r3
 8004994:	3724      	adds	r7, #36	; 0x24
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b0:	d301      	bcc.n	80049b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049b2:	2301      	movs	r3, #1
 80049b4:	e00f      	b.n	80049d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049b6:	4a0a      	ldr	r2, [pc, #40]	; (80049e0 <SysTick_Config+0x40>)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049be:	210f      	movs	r1, #15
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	f7ff ff8e 	bl	80048e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c8:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <SysTick_Config+0x40>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <SysTick_Config+0x40>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	e000e010 	.word	0xe000e010

080049e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff ff29 	bl	8004844 <__NVIC_SetPriorityGrouping>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	4603      	mov	r3, r0
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a0c:	f7ff ff3e 	bl	800488c <__NVIC_GetPriorityGrouping>
 8004a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68b9      	ldr	r1, [r7, #8]
 8004a16:	6978      	ldr	r0, [r7, #20]
 8004a18:	f7ff ff8e 	bl	8004938 <NVIC_EncodePriority>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff5d 	bl	80048e4 <__NVIC_SetPriority>
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	4603      	mov	r3, r0
 8004a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff ff31 	bl	80048a8 <__NVIC_EnableIRQ>
}
 8004a46:	bf00      	nop
 8004a48:	3708      	adds	r7, #8
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ffa2 	bl	80049a0 <SysTick_Config>
 8004a5c:	4603      	mov	r3, r0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e037      	b.n	8004aec <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f97a 	bl	8004dc8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}  
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	60f8      	str	r0, [r7, #12]
 8004afc:	60b9      	str	r1, [r7, #8]
 8004afe:	607a      	str	r2, [r7, #4]
 8004b00:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_DMA_Start_IT+0x20>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e04a      	b.n	8004baa <HAL_DMA_Start_IT+0xb6>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d13a      	bne.n	8004b9c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f90d 	bl	8004d6a <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f042 020e 	orr.w	r2, r2, #14
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	e00f      	b.n	8004b8a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 020a 	orr.w	r2, r2, #10
 8004b78:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0204 	bic.w	r2, r2, #4
 8004b88:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	e005      	b.n	8004ba8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d008      	beq.n	8004bd6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e020      	b.n	8004c18 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 020e 	bic.w	r2, r2, #14
 8004be4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bfe:	2101      	movs	r1, #1
 8004c00:	fa01 f202 	lsl.w	r2, r1, r2
 8004c04:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	2204      	movs	r2, #4
 8004c42:	409a      	lsls	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4013      	ands	r3, r2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d024      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x72>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01f      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0204 	bic.w	r2, r2, #4
 8004c72:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c82:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d06a      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004c94:	e065      	b.n	8004d62 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d02c      	beq.n	8004d00 <HAL_DMA_IRQHandler+0xdc>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d027      	beq.n	8004d00 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0320 	and.w	r3, r3, #32
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 020a 	bic.w	r2, r2, #10
 8004ccc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	2102      	movs	r1, #2
 8004ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d035      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004cfe:	e030      	b.n	8004d62 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	2208      	movs	r2, #8
 8004d06:	409a      	lsls	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d028      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x13e>
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d023      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 020e 	bic.w	r2, r2, #14
 8004d28:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	2101      	movs	r1, #1
 8004d34:	fa01 f202 	lsl.w	r2, r1, r2
 8004d38:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	4798      	blx	r3
    }
  }
}  
 8004d60:	e7ff      	b.n	8004d62 <HAL_DMA_IRQHandler+0x13e>
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d80:	2101      	movs	r1, #1
 8004d82:	fa01 f202 	lsl.w	r2, r1, r2
 8004d86:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b10      	cmp	r3, #16
 8004d96:	d108      	bne.n	8004daa <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004da8:	e007      	b.n	8004dba <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	60da      	str	r2, [r3, #12]
}
 8004dba:	bf00      	nop
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <DMA_CalcBaseAndBitshift+0x60>)
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d80f      	bhi.n	8004dfc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <DMA_CalcBaseAndBitshift+0x64>)
 8004de4:	4413      	add	r3, r2
 8004de6:	4a12      	ldr	r2, [pc, #72]	; (8004e30 <DMA_CalcBaseAndBitshift+0x68>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	009a      	lsls	r2, r3, #2
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <DMA_CalcBaseAndBitshift+0x6c>)
 8004df8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004dfa:	e00e      	b.n	8004e1a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <DMA_CalcBaseAndBitshift+0x70>)
 8004e04:	4413      	add	r3, r2
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <DMA_CalcBaseAndBitshift+0x68>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	091b      	lsrs	r3, r3, #4
 8004e0e:	009a      	lsls	r2, r3, #2
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <DMA_CalcBaseAndBitshift+0x74>)
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40020407 	.word	0x40020407
 8004e2c:	bffdfff8 	.word	0xbffdfff8
 8004e30:	cccccccd 	.word	0xcccccccd
 8004e34:	40020000 	.word	0x40020000
 8004e38:	bffdfbf8 	.word	0xbffdfbf8
 8004e3c:	40020400 	.word	0x40020400

08004e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e4e:	e160      	b.n	8005112 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	2101      	movs	r1, #1
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8152 	beq.w	800510c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d005      	beq.n	8004e80 <HAL_GPIO_Init+0x40>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d130      	bne.n	8004ee2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4013      	ands	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	f003 0201 	and.w	r2, r3, #1
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d017      	beq.n	8004f1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2203      	movs	r2, #3
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4013      	ands	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f003 0303 	and.w	r3, r3, #3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d123      	bne.n	8004f72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	08da      	lsrs	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	3208      	adds	r2, #8
 8004f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	220f      	movs	r2, #15
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691a      	ldr	r2, [r3, #16]
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	08da      	lsrs	r2, r3, #3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3208      	adds	r2, #8
 8004f6c:	6939      	ldr	r1, [r7, #16]
 8004f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	43db      	mvns	r3, r3
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4013      	ands	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 0203 	and.w	r2, r3, #3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	005b      	lsls	r3, r3, #1
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 80ac 	beq.w	800510c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb4:	4b5e      	ldr	r3, [pc, #376]	; (8005130 <HAL_GPIO_Init+0x2f0>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	4a5d      	ldr	r2, [pc, #372]	; (8005130 <HAL_GPIO_Init+0x2f0>)
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	6193      	str	r3, [r2, #24]
 8004fc0:	4b5b      	ldr	r3, [pc, #364]	; (8005130 <HAL_GPIO_Init+0x2f0>)
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fcc:	4a59      	ldr	r2, [pc, #356]	; (8005134 <HAL_GPIO_Init+0x2f4>)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	089b      	lsrs	r3, r3, #2
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	220f      	movs	r2, #15
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4013      	ands	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ff6:	d025      	beq.n	8005044 <HAL_GPIO_Init+0x204>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a4f      	ldr	r2, [pc, #316]	; (8005138 <HAL_GPIO_Init+0x2f8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d01f      	beq.n	8005040 <HAL_GPIO_Init+0x200>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a4e      	ldr	r2, [pc, #312]	; (800513c <HAL_GPIO_Init+0x2fc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d019      	beq.n	800503c <HAL_GPIO_Init+0x1fc>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a4d      	ldr	r2, [pc, #308]	; (8005140 <HAL_GPIO_Init+0x300>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <HAL_GPIO_Init+0x1f8>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a4c      	ldr	r2, [pc, #304]	; (8005144 <HAL_GPIO_Init+0x304>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00d      	beq.n	8005034 <HAL_GPIO_Init+0x1f4>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a4b      	ldr	r2, [pc, #300]	; (8005148 <HAL_GPIO_Init+0x308>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d007      	beq.n	8005030 <HAL_GPIO_Init+0x1f0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a4a      	ldr	r2, [pc, #296]	; (800514c <HAL_GPIO_Init+0x30c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <HAL_GPIO_Init+0x1ec>
 8005028:	2306      	movs	r3, #6
 800502a:	e00c      	b.n	8005046 <HAL_GPIO_Init+0x206>
 800502c:	2307      	movs	r3, #7
 800502e:	e00a      	b.n	8005046 <HAL_GPIO_Init+0x206>
 8005030:	2305      	movs	r3, #5
 8005032:	e008      	b.n	8005046 <HAL_GPIO_Init+0x206>
 8005034:	2304      	movs	r3, #4
 8005036:	e006      	b.n	8005046 <HAL_GPIO_Init+0x206>
 8005038:	2303      	movs	r3, #3
 800503a:	e004      	b.n	8005046 <HAL_GPIO_Init+0x206>
 800503c:	2302      	movs	r3, #2
 800503e:	e002      	b.n	8005046 <HAL_GPIO_Init+0x206>
 8005040:	2301      	movs	r3, #1
 8005042:	e000      	b.n	8005046 <HAL_GPIO_Init+0x206>
 8005044:	2300      	movs	r3, #0
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	f002 0203 	and.w	r2, r2, #3
 800504c:	0092      	lsls	r2, r2, #2
 800504e:	4093      	lsls	r3, r2
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005056:	4937      	ldr	r1, [pc, #220]	; (8005134 <HAL_GPIO_Init+0x2f4>)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	3302      	adds	r3, #2
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005064:	4b3a      	ldr	r3, [pc, #232]	; (8005150 <HAL_GPIO_Init+0x310>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	43db      	mvns	r3, r3
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	4013      	ands	r3, r2
 8005072:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005088:	4a31      	ldr	r2, [pc, #196]	; (8005150 <HAL_GPIO_Init+0x310>)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800508e:	4b30      	ldr	r3, [pc, #192]	; (8005150 <HAL_GPIO_Init+0x310>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	43db      	mvns	r3, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4013      	ands	r3, r2
 800509c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80050b2:	4a27      	ldr	r2, [pc, #156]	; (8005150 <HAL_GPIO_Init+0x310>)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050b8:	4b25      	ldr	r3, [pc, #148]	; (8005150 <HAL_GPIO_Init+0x310>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050dc:	4a1c      	ldr	r2, [pc, #112]	; (8005150 <HAL_GPIO_Init+0x310>)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050e2:	4b1b      	ldr	r3, [pc, #108]	; (8005150 <HAL_GPIO_Init+0x310>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4013      	ands	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005106:	4a12      	ldr	r2, [pc, #72]	; (8005150 <HAL_GPIO_Init+0x310>)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	3301      	adds	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	f47f ae97 	bne.w	8004e50 <HAL_GPIO_Init+0x10>
  }
}
 8005122:	bf00      	nop
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	40021000 	.word	0x40021000
 8005134:	40010000 	.word	0x40010000
 8005138:	48000400 	.word	0x48000400
 800513c:	48000800 	.word	0x48000800
 8005140:	48000c00 	.word	0x48000c00
 8005144:	48001000 	.word	0x48001000
 8005148:	48001400 	.word	0x48001400
 800514c:	48001800 	.word	0x48001800
 8005150:	40010400 	.word	0x40010400

08005154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	887b      	ldrh	r3, [r7, #2]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800516c:	2301      	movs	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
 8005170:	e001      	b.n	8005176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005172:	2300      	movs	r3, #0
 8005174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005176:	7bfb      	ldrb	r3, [r7, #15]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	807b      	strh	r3, [r7, #2]
 8005190:	4613      	mov	r3, r2
 8005192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005194:	787b      	ldrb	r3, [r7, #1]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800519a:	887a      	ldrh	r2, [r7, #2]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051a0:	e002      	b.n	80051a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051a2:	887a      	ldrh	r2, [r7, #2]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d006      	beq.n	80051d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051ca:	4a05      	ldr	r2, [pc, #20]	; (80051e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fd fa5c 	bl	8002690 <HAL_GPIO_EXTI_Callback>
  }
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40010400 	.word	0x40010400

080051e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e081      	b.n	80052fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d106      	bne.n	8005210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fd ff18 	bl	8003040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2224      	movs	r2, #36	; 0x24
 8005214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f022 0201 	bic.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800525a:	609a      	str	r2, [r3, #8]
 800525c:	e006      	b.n	800526c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800526a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d104      	bne.n	800527e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800527c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6812      	ldr	r2, [r2, #0]
 8005288:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800528c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005290:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	691a      	ldr	r2, [r3, #16]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69d9      	ldr	r1, [r3, #28]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	461a      	mov	r2, r3
 8005310:	460b      	mov	r3, r1
 8005312:	817b      	strh	r3, [r7, #10]
 8005314:	4613      	mov	r3, r2
 8005316:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b20      	cmp	r3, #32
 8005322:	f040 80da 	bne.w	80054da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_I2C_Master_Transmit+0x30>
 8005330:	2302      	movs	r3, #2
 8005332:	e0d3      	b.n	80054dc <HAL_I2C_Master_Transmit+0x1d8>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800533c:	f7fe f904 	bl	8003548 <HAL_GetTick>
 8005340:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	2319      	movs	r3, #25
 8005348:	2201      	movs	r2, #1
 800534a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8f0 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e0be      	b.n	80054dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2221      	movs	r2, #33	; 0x21
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2210      	movs	r2, #16
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	893a      	ldrh	r2, [r7, #8]
 800537e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2bff      	cmp	r3, #255	; 0xff
 800538e:	d90e      	bls.n	80053ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	22ff      	movs	r2, #255	; 0xff
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539a:	b2da      	uxtb	r2, r3
 800539c:	8979      	ldrh	r1, [r7, #10]
 800539e:	4b51      	ldr	r3, [pc, #324]	; (80054e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fa7e 	bl	80058a8 <I2C_TransferConfig>
 80053ac:	e06c      	b.n	8005488 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	8979      	ldrh	r1, [r7, #10]
 80053c0:	4b48      	ldr	r3, [pc, #288]	; (80054e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fa6d 	bl	80058a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80053ce:	e05b      	b.n	8005488 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	6a39      	ldr	r1, [r7, #32]
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 f8fc 	bl	80055d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e07b      	b.n	80054dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	781a      	ldrb	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d034      	beq.n	8005488 <HAL_I2C_Master_Transmit+0x184>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005422:	2b00      	cmp	r3, #0
 8005424:	d130      	bne.n	8005488 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	2200      	movs	r2, #0
 800542e:	2180      	movs	r1, #128	; 0x80
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f000 f87f 	bl	8005534 <I2C_WaitOnFlagUntilTimeout>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e04d      	b.n	80054dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2bff      	cmp	r3, #255	; 0xff
 8005448:	d90e      	bls.n	8005468 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005454:	b2da      	uxtb	r2, r3
 8005456:	8979      	ldrh	r1, [r7, #10]
 8005458:	2300      	movs	r3, #0
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fa21 	bl	80058a8 <I2C_TransferConfig>
 8005466:	e00f      	b.n	8005488 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005476:	b2da      	uxtb	r2, r3
 8005478:	8979      	ldrh	r1, [r7, #10]
 800547a:	2300      	movs	r3, #0
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fa10 	bl	80058a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d19e      	bne.n	80053d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	6a39      	ldr	r1, [r7, #32]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f8e2 	bl	8005660 <I2C_WaitOnSTOPFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e01a      	b.n	80054dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2220      	movs	r2, #32
 80054ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80054ba:	400b      	ands	r3, r1
 80054bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e000      	b.n	80054dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
  }
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	80002000 	.word	0x80002000
 80054e8:	fe00e800 	.word	0xfe00e800

080054ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d103      	bne.n	800550a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d007      	beq.n	8005528 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	619a      	str	r2, [r3, #24]
  }
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005544:	e031      	b.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554c:	d02d      	beq.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554e:	f7fd fffb 	bl	8003548 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d122      	bne.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	429a      	cmp	r2, r3
 8005580:	d113      	bne.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e00f      	b.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699a      	ldr	r2, [r3, #24]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4013      	ands	r3, r2
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	bf0c      	ite	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	2300      	movne	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	461a      	mov	r2, r3
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d0be      	beq.n	8005546 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055de:	e033      	b.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68b9      	ldr	r1, [r7, #8]
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f87f 	bl	80056e8 <I2C_IsErrorOccurred>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e031      	b.n	8005658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d025      	beq.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fc:	f7fd ffa4 	bl	8003548 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	429a      	cmp	r2, r3
 800560a:	d302      	bcc.n	8005612 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d11a      	bne.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b02      	cmp	r3, #2
 800561e:	d013      	beq.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005624:	f043 0220 	orr.w	r2, r3, #32
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e007      	b.n	8005658 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b02      	cmp	r3, #2
 8005654:	d1c4      	bne.n	80055e0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800566c:	e02f      	b.n	80056ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f838 	bl	80056e8 <I2C_IsErrorOccurred>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e02d      	b.n	80056de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005682:	f7fd ff61 	bl	8003548 <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	d302      	bcc.n	8005698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d11a      	bne.n	80056ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b20      	cmp	r3, #32
 80056a4:	d013      	beq.n	80056ce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056aa:	f043 0220 	orr.w	r2, r3, #32
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e007      	b.n	80056de <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	f003 0320 	and.w	r3, r3, #32
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d1c8      	bne.n	800566e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
	...

080056e8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d068      	beq.n	80057e6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2210      	movs	r2, #16
 800571a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800571c:	e049      	b.n	80057b2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005724:	d045      	beq.n	80057b2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005726:	f7fd ff0f 	bl	8003548 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <I2C_IsErrorOccurred+0x54>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d13a      	bne.n	80057b2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005746:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800574e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800575a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575e:	d121      	bne.n	80057a4 <I2C_IsErrorOccurred+0xbc>
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005766:	d01d      	beq.n	80057a4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005768:	7cfb      	ldrb	r3, [r7, #19]
 800576a:	2b20      	cmp	r3, #32
 800576c:	d01a      	beq.n	80057a4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800577c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800577e:	f7fd fee3 	bl	8003548 <HAL_GetTick>
 8005782:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005784:	e00e      	b.n	80057a4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005786:	f7fd fedf 	bl	8003548 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b19      	cmp	r3, #25
 8005792:	d907      	bls.n	80057a4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	f043 0320 	orr.w	r3, r3, #32
 800579a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80057a2:	e006      	b.n	80057b2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b20      	cmp	r3, #32
 80057b0:	d1e9      	bne.n	8005786 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d003      	beq.n	80057c8 <I2C_IsErrorOccurred+0xe0>
 80057c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0aa      	beq.n	800571e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2220      	movs	r2, #32
 80057d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	f043 0304 	orr.w	r3, r3, #4
 80057de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00b      	beq.n	8005832 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f043 0308 	orr.w	r3, r3, #8
 8005820:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800582a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	f043 0302 	orr.w	r3, r3, #2
 8005842:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01c      	beq.n	8005896 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7ff fe45 	bl	80054ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6859      	ldr	r1, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <I2C_IsErrorOccurred+0x1bc>)
 800586e:	400b      	ands	r3, r1
 8005870:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800589a:	4618      	mov	r0, r3
 800589c:	3728      	adds	r7, #40	; 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	fe00e800 	.word	0xfe00e800

080058a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	460b      	mov	r3, r1
 80058b4:	817b      	strh	r3, [r7, #10]
 80058b6:	4613      	mov	r3, r2
 80058b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ba:	897b      	ldrh	r3, [r7, #10]
 80058bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058c0:	7a7b      	ldrb	r3, [r7, #9]
 80058c2:	041b      	lsls	r3, r3, #16
 80058c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058c8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058d6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	0d5b      	lsrs	r3, r3, #21
 80058e2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80058e6:	4b08      	ldr	r3, [pc, #32]	; (8005908 <I2C_TransferConfig+0x60>)
 80058e8:	430b      	orrs	r3, r1
 80058ea:	43db      	mvns	r3, r3
 80058ec:	ea02 0103 	and.w	r1, r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	03ff63ff 	.word	0x03ff63ff

0800590c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b20      	cmp	r3, #32
 8005920:	d138      	bne.n	8005994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800592c:	2302      	movs	r3, #2
 800592e:	e032      	b.n	8005996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2224      	movs	r2, #36	; 0x24
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0201 	bic.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800595e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6819      	ldr	r1, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b085      	sub	sp, #20
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d139      	bne.n	8005a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e033      	b.n	8005a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2224      	movs	r2, #36	; 0x24
 80059d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e000      	b.n	8005a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a2c:	2302      	movs	r3, #2
  }
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a4c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f001 b83a 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a66:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 816f 	beq.w	8005d56 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a78:	4bb5      	ldr	r3, [pc, #724]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d00c      	beq.n	8005a9e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a84:	4bb2      	ldr	r3, [pc, #712]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 030c 	and.w	r3, r3, #12
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d15c      	bne.n	8005b4a <HAL_RCC_OscConfig+0x10e>
 8005a90:	4baf      	ldr	r3, [pc, #700]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9c:	d155      	bne.n	8005b4a <HAL_RCC_OscConfig+0x10e>
 8005a9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aa2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005aaa:	fa93 f3a3 	rbit	r3, r3
 8005aae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ab2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab6:	fab3 f383 	clz	r3, r3
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d102      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x94>
 8005aca:	4ba1      	ldr	r3, [pc, #644]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	e015      	b.n	8005afc <HAL_RCC_OscConfig+0xc0>
 8005ad0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ad4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005adc:	fa93 f3a3 	rbit	r3, r3
 8005ae0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005ae4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ae8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005aec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005af0:	fa93 f3a3 	rbit	r3, r3
 8005af4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005af8:	4b95      	ldr	r3, [pc, #596]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b00:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005b04:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005b08:	fa92 f2a2 	rbit	r2, r2
 8005b0c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005b10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005b14:	fab2 f282 	clz	r2, r2
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	f042 0220 	orr.w	r2, r2, #32
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	f002 021f 	and.w	r2, r2, #31
 8005b24:	2101      	movs	r1, #1
 8005b26:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 8111 	beq.w	8005d54 <HAL_RCC_OscConfig+0x318>
 8005b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b36:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 8108 	bne.w	8005d54 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f000 bfc6 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b4e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5a:	d106      	bne.n	8005b6a <HAL_RCC_OscConfig+0x12e>
 8005b5c:	4b7c      	ldr	r3, [pc, #496]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a7b      	ldr	r2, [pc, #492]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e036      	b.n	8005bd8 <HAL_RCC_OscConfig+0x19c>
 8005b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b6e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x158>
 8005b7a:	4b75      	ldr	r3, [pc, #468]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a74      	ldr	r2, [pc, #464]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b72      	ldr	r3, [pc, #456]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a71      	ldr	r2, [pc, #452]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e021      	b.n	8005bd8 <HAL_RCC_OscConfig+0x19c>
 8005b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ba4:	d10c      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x184>
 8005ba6:	4b6a      	ldr	r3, [pc, #424]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a69      	ldr	r2, [pc, #420]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb0:	6013      	str	r3, [r2, #0]
 8005bb2:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a66      	ldr	r2, [pc, #408]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bbc:	6013      	str	r3, [r2, #0]
 8005bbe:	e00b      	b.n	8005bd8 <HAL_RCC_OscConfig+0x19c>
 8005bc0:	4b63      	ldr	r3, [pc, #396]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a62      	ldr	r2, [pc, #392]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	4b60      	ldr	r3, [pc, #384]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a5f      	ldr	r2, [pc, #380]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bd6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bdc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d059      	beq.n	8005c9c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be8:	f7fd fcae 	bl	8003548 <HAL_GetTick>
 8005bec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf0:	e00a      	b.n	8005c08 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf2:	f7fd fca9 	bl	8003548 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b64      	cmp	r3, #100	; 0x64
 8005c00:	d902      	bls.n	8005c08 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	f000 bf67 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>
 8005c08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c0c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c10:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005c14:	fa93 f3a3 	rbit	r3, r3
 8005c18:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005c1c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c20:	fab3 f383 	clz	r3, r3
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d102      	bne.n	8005c3a <HAL_RCC_OscConfig+0x1fe>
 8005c34:	4b46      	ldr	r3, [pc, #280]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	e015      	b.n	8005c66 <HAL_RCC_OscConfig+0x22a>
 8005c3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c3e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c42:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005c46:	fa93 f3a3 	rbit	r3, r3
 8005c4a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005c4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c52:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005c56:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005c5a:	fa93 f3a3 	rbit	r3, r3
 8005c5e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005c62:	4b3b      	ldr	r3, [pc, #236]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c6a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005c6e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005c72:	fa92 f2a2 	rbit	r2, r2
 8005c76:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8005c7a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005c7e:	fab2 f282 	clz	r2, r2
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	f042 0220 	orr.w	r2, r2, #32
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	f002 021f 	and.w	r2, r2, #31
 8005c8e:	2101      	movs	r1, #1
 8005c90:	fa01 f202 	lsl.w	r2, r1, r2
 8005c94:	4013      	ands	r3, r2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ab      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x1b6>
 8005c9a:	e05c      	b.n	8005d56 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fd fc54 	bl	8003548 <HAL_GetTick>
 8005ca0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca4:	e00a      	b.n	8005cbc <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ca6:	f7fd fc4f 	bl	8003548 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	; 0x64
 8005cb4:	d902      	bls.n	8005cbc <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	f000 bf0d 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>
 8005cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cc0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005cc8:	fa93 f3a3 	rbit	r3, r3
 8005ccc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005cd0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd4:	fab3 f383 	clz	r3, r3
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	095b      	lsrs	r3, r3, #5
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	f043 0301 	orr.w	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <HAL_RCC_OscConfig+0x2b2>
 8005ce8:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	e015      	b.n	8005d1a <HAL_RCC_OscConfig+0x2de>
 8005cee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cf2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cf6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005cfa:	fa93 f3a3 	rbit	r3, r3
 8005cfe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005d02:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d06:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005d0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d0e:	fa93 f3a3 	rbit	r3, r3
 8005d12:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005d16:	4b0e      	ldr	r3, [pc, #56]	; (8005d50 <HAL_RCC_OscConfig+0x314>)
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d1e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005d22:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005d26:	fa92 f2a2 	rbit	r2, r2
 8005d2a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8005d2e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005d32:	fab2 f282 	clz	r2, r2
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	f042 0220 	orr.w	r2, r2, #32
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	f002 021f 	and.w	r2, r2, #31
 8005d42:	2101      	movs	r1, #1
 8005d44:	fa01 f202 	lsl.w	r2, r1, r2
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1ab      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x26a>
 8005d4e:	e002      	b.n	8005d56 <HAL_RCC_OscConfig+0x31a>
 8005d50:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 817f 	beq.w	800606a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005d6c:	4ba7      	ldr	r3, [pc, #668]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 030c 	and.w	r3, r3, #12
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00c      	beq.n	8005d92 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005d78:	4ba4      	ldr	r3, [pc, #656]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f003 030c 	and.w	r3, r3, #12
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d173      	bne.n	8005e6c <HAL_RCC_OscConfig+0x430>
 8005d84:	4ba1      	ldr	r3, [pc, #644]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d90:	d16c      	bne.n	8005e6c <HAL_RCC_OscConfig+0x430>
 8005d92:	2302      	movs	r3, #2
 8005d94:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d98:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005d9c:	fa93 f3a3 	rbit	r3, r3
 8005da0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005da4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005da8:	fab3 f383 	clz	r3, r3
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d102      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x386>
 8005dbc:	4b93      	ldr	r3, [pc, #588]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	e013      	b.n	8005dea <HAL_RCC_OscConfig+0x3ae>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005dcc:	fa93 f3a3 	rbit	r3, r3
 8005dd0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005dda:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005dde:	fa93 f3a3 	rbit	r3, r3
 8005de2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005de6:	4b89      	ldr	r3, [pc, #548]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	2202      	movs	r2, #2
 8005dec:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005df0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005df4:	fa92 f2a2 	rbit	r2, r2
 8005df8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005dfc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005e00:	fab2 f282 	clz	r2, r2
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	f042 0220 	orr.w	r2, r2, #32
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	f002 021f 	and.w	r2, r2, #31
 8005e10:	2101      	movs	r1, #1
 8005e12:	fa01 f202 	lsl.w	r2, r1, r2
 8005e16:	4013      	ands	r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00a      	beq.n	8005e32 <HAL_RCC_OscConfig+0x3f6>
 8005e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d002      	beq.n	8005e32 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	f000 be52 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e32:	4b76      	ldr	r3, [pc, #472]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	21f8      	movs	r1, #248	; 0xf8
 8005e48:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005e50:	fa91 f1a1 	rbit	r1, r1
 8005e54:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005e58:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005e5c:	fab1 f181 	clz	r1, r1
 8005e60:	b2c9      	uxtb	r1, r1
 8005e62:	408b      	lsls	r3, r1
 8005e64:	4969      	ldr	r1, [pc, #420]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6a:	e0fe      	b.n	800606a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8088 	beq.w	8005f8e <HAL_RCC_OscConfig+0x552>
 8005e7e:	2301      	movs	r3, #1
 8005e80:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e84:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e88:	fa93 f3a3 	rbit	r3, r3
 8005e8c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005e90:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e94:	fab3 f383 	clz	r3, r3
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eaa:	f7fd fb4d 	bl	8003548 <HAL_GetTick>
 8005eae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb2:	e00a      	b.n	8005eca <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb4:	f7fd fb48 	bl	8003548 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d902      	bls.n	8005eca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	f000 be06 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005ed4:	fa93 f3a3 	rbit	r3, r3
 8005ed8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005edc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee0:	fab3 f383 	clz	r3, r3
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	095b      	lsrs	r3, r3, #5
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f043 0301 	orr.w	r3, r3, #1
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d102      	bne.n	8005efa <HAL_RCC_OscConfig+0x4be>
 8005ef4:	4b45      	ldr	r3, [pc, #276]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	e013      	b.n	8005f22 <HAL_RCC_OscConfig+0x4e6>
 8005efa:	2302      	movs	r3, #2
 8005efc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f00:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005f04:	fa93 f3a3 	rbit	r3, r3
 8005f08:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005f12:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005f16:	fa93 f3a3 	rbit	r3, r3
 8005f1a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005f1e:	4b3b      	ldr	r3, [pc, #236]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	2202      	movs	r2, #2
 8005f24:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005f28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005f2c:	fa92 f2a2 	rbit	r2, r2
 8005f30:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005f34:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005f38:	fab2 f282 	clz	r2, r2
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	f042 0220 	orr.w	r2, r2, #32
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	f002 021f 	and.w	r2, r2, #31
 8005f48:	2101      	movs	r1, #1
 8005f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d0af      	beq.n	8005eb4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f54:	4b2d      	ldr	r3, [pc, #180]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f60:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	21f8      	movs	r1, #248	; 0xf8
 8005f6a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005f72:	fa91 f1a1 	rbit	r1, r1
 8005f76:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005f7a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005f7e:	fab1 f181 	clz	r1, r1
 8005f82:	b2c9      	uxtb	r1, r1
 8005f84:	408b      	lsls	r3, r1
 8005f86:	4921      	ldr	r1, [pc, #132]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	600b      	str	r3, [r1, #0]
 8005f8c:	e06d      	b.n	800606a <HAL_RCC_OscConfig+0x62e>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005f98:	fa93 f3a3 	rbit	r3, r3
 8005f9c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005fa0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa4:	fab3 f383 	clz	r3, r3
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fba:	f7fd fac5 	bl	8003548 <HAL_GetTick>
 8005fbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7fd fac0 	bl	8003548 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d902      	bls.n	8005fda <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	f000 bd7e 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fe4:	fa93 f3a3 	rbit	r3, r3
 8005fe8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005fec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff0:	fab3 f383 	clz	r3, r3
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d105      	bne.n	8006010 <HAL_RCC_OscConfig+0x5d4>
 8006004:	4b01      	ldr	r3, [pc, #4]	; (800600c <HAL_RCC_OscConfig+0x5d0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	e016      	b.n	8006038 <HAL_RCC_OscConfig+0x5fc>
 800600a:	bf00      	nop
 800600c:	40021000 	.word	0x40021000
 8006010:	2302      	movs	r3, #2
 8006012:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601a:	fa93 f3a3 	rbit	r3, r3
 800601e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006022:	2302      	movs	r3, #2
 8006024:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006028:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800602c:	fa93 f3a3 	rbit	r3, r3
 8006030:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006034:	4bbf      	ldr	r3, [pc, #764]	; (8006334 <HAL_RCC_OscConfig+0x8f8>)
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	2202      	movs	r2, #2
 800603a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800603e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006042:	fa92 f2a2 	rbit	r2, r2
 8006046:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800604a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800604e:	fab2 f282 	clz	r2, r2
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	f042 0220 	orr.w	r2, r2, #32
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	f002 021f 	and.w	r2, r2, #31
 800605e:	2101      	movs	r1, #1
 8006060:	fa01 f202 	lsl.w	r2, r1, r2
 8006064:	4013      	ands	r3, r2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1ac      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800606a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800606e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 8113 	beq.w	80062a6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006084:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d07c      	beq.n	800618a <HAL_RCC_OscConfig+0x74e>
 8006090:	2301      	movs	r3, #1
 8006092:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609a:	fa93 f3a3 	rbit	r3, r3
 800609e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80060a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060a6:	fab3 f383 	clz	r3, r3
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	4ba2      	ldr	r3, [pc, #648]	; (8006338 <HAL_RCC_OscConfig+0x8fc>)
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	461a      	mov	r2, r3
 80060b6:	2301      	movs	r3, #1
 80060b8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ba:	f7fd fa45 	bl	8003548 <HAL_GetTick>
 80060be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c2:	e00a      	b.n	80060da <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c4:	f7fd fa40 	bl	8003548 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d902      	bls.n	80060da <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	f000 bcfe 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>
 80060da:	2302      	movs	r3, #2
 80060dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e4:	fa93 f2a3 	rbit	r2, r3
 80060e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80060f0:	601a      	str	r2, [r3, #0]
 80060f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fa:	2202      	movs	r2, #2
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	fa93 f2a3 	rbit	r2, r3
 800610c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800611a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800611e:	2202      	movs	r2, #2
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006126:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	fa93 f2a3 	rbit	r2, r3
 8006130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006134:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006138:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613a:	4b7e      	ldr	r3, [pc, #504]	; (8006334 <HAL_RCC_OscConfig+0x8f8>)
 800613c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800613e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006142:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006146:	2102      	movs	r1, #2
 8006148:	6019      	str	r1, [r3, #0]
 800614a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800614e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	fa93 f1a3 	rbit	r1, r3
 8006158:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800615c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006160:	6019      	str	r1, [r3, #0]
  return result;
 8006162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006166:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	fab3 f383 	clz	r3, r3
 8006170:	b2db      	uxtb	r3, r3
 8006172:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006176:	b2db      	uxtb	r3, r3
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2101      	movs	r1, #1
 800617e:	fa01 f303 	lsl.w	r3, r1, r3
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d09d      	beq.n	80060c4 <HAL_RCC_OscConfig+0x688>
 8006188:	e08d      	b.n	80062a6 <HAL_RCC_OscConfig+0x86a>
 800618a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800618e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006192:	2201      	movs	r2, #1
 8006194:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800619a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	fa93 f2a3 	rbit	r2, r3
 80061a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80061ac:	601a      	str	r2, [r3, #0]
  return result;
 80061ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80061b6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b8:	fab3 f383 	clz	r3, r3
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	4b5d      	ldr	r3, [pc, #372]	; (8006338 <HAL_RCC_OscConfig+0x8fc>)
 80061c2:	4413      	add	r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	461a      	mov	r2, r3
 80061c8:	2300      	movs	r3, #0
 80061ca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061cc:	f7fd f9bc 	bl	8003548 <HAL_GetTick>
 80061d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d4:	e00a      	b.n	80061ec <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d6:	f7fd f9b7 	bl	8003548 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d902      	bls.n	80061ec <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	f000 bc75 	b.w	8006ad6 <HAL_RCC_OscConfig+0x109a>
 80061ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80061f4:	2202      	movs	r2, #2
 80061f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061fc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	fa93 f2a3 	rbit	r2, r3
 8006206:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800620a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006218:	2202      	movs	r2, #2
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	fa93 f2a3 	rbit	r2, r3
 800622a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800622e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006238:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800623c:	2202      	movs	r2, #2
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006244:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	fa93 f2a3 	rbit	r2, r3
 800624e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006252:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006256:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006258:	4b36      	ldr	r3, [pc, #216]	; (8006334 <HAL_RCC_OscConfig+0x8f8>)
 800625a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800625c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006260:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006264:	2102      	movs	r1, #2
 8006266:	6019      	str	r1, [r3, #0]
 8006268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800626c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	fa93 f1a3 	rbit	r1, r3
 8006276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800627a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800627e:	6019      	str	r1, [r3, #0]
  return result;
 8006280:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006284:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	fab3 f383 	clz	r3, r3
 800628e:	b2db      	uxtb	r3, r3
 8006290:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2101      	movs	r1, #1
 800629c:	fa01 f303 	lsl.w	r3, r1, r3
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d197      	bne.n	80061d6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0304 	and.w	r3, r3, #4
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 81a5 	beq.w	8006606 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062bc:	2300      	movs	r3, #0
 80062be:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062c2:	4b1c      	ldr	r3, [pc, #112]	; (8006334 <HAL_RCC_OscConfig+0x8f8>)
 80062c4:	69db      	ldr	r3, [r3, #28]
 80062c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d116      	bne.n	80062fc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ce:	4b19      	ldr	r3, [pc, #100]	; (8006334 <HAL_RCC_OscConfig+0x8f8>)
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	4a18      	ldr	r2, [pc, #96]	; (8006334 <HAL_RCC_OscConfig+0x8f8>)
 80062d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d8:	61d3      	str	r3, [r2, #28]
 80062da:	4b16      	ldr	r3, [pc, #88]	; (8006334 <HAL_RCC_OscConfig+0x8f8>)
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80062e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <HAL_RCC_OscConfig+0x900>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006304:	2b00      	cmp	r3, #0
 8006306:	d121      	bne.n	800634c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006308:	4b0c      	ldr	r3, [pc, #48]	; (800633c <HAL_RCC_OscConfig+0x900>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a0b      	ldr	r2, [pc, #44]	; (800633c <HAL_RCC_OscConfig+0x900>)
 800630e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006312:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006314:	f7fd f918 	bl	8003548 <HAL_GetTick>
 8006318:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800631c:	e010      	b.n	8006340 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800631e:	f7fd f913 	bl	8003548 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b64      	cmp	r3, #100	; 0x64
 800632c:	d908      	bls.n	8006340 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e3d1      	b.n	8006ad6 <HAL_RCC_OscConfig+0x109a>
 8006332:	bf00      	nop
 8006334:	40021000 	.word	0x40021000
 8006338:	10908120 	.word	0x10908120
 800633c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006340:	4b8d      	ldr	r3, [pc, #564]	; (8006578 <HAL_RCC_OscConfig+0xb3c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0e8      	beq.n	800631e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800634c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006350:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d106      	bne.n	800636a <HAL_RCC_OscConfig+0x92e>
 800635c:	4b87      	ldr	r3, [pc, #540]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	4a86      	ldr	r2, [pc, #536]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 8006362:	f043 0301 	orr.w	r3, r3, #1
 8006366:	6213      	str	r3, [r2, #32]
 8006368:	e035      	b.n	80063d6 <HAL_RCC_OscConfig+0x99a>
 800636a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800636e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10c      	bne.n	8006394 <HAL_RCC_OscConfig+0x958>
 800637a:	4b80      	ldr	r3, [pc, #512]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	4a7f      	ldr	r2, [pc, #508]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	6213      	str	r3, [r2, #32]
 8006386:	4b7d      	ldr	r3, [pc, #500]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	4a7c      	ldr	r2, [pc, #496]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 800638c:	f023 0304 	bic.w	r3, r3, #4
 8006390:	6213      	str	r3, [r2, #32]
 8006392:	e020      	b.n	80063d6 <HAL_RCC_OscConfig+0x99a>
 8006394:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006398:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b05      	cmp	r3, #5
 80063a2:	d10c      	bne.n	80063be <HAL_RCC_OscConfig+0x982>
 80063a4:	4b75      	ldr	r3, [pc, #468]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	4a74      	ldr	r2, [pc, #464]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 80063aa:	f043 0304 	orr.w	r3, r3, #4
 80063ae:	6213      	str	r3, [r2, #32]
 80063b0:	4b72      	ldr	r3, [pc, #456]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	4a71      	ldr	r2, [pc, #452]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	6213      	str	r3, [r2, #32]
 80063bc:	e00b      	b.n	80063d6 <HAL_RCC_OscConfig+0x99a>
 80063be:	4b6f      	ldr	r3, [pc, #444]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	4a6e      	ldr	r2, [pc, #440]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 80063c4:	f023 0301 	bic.w	r3, r3, #1
 80063c8:	6213      	str	r3, [r2, #32]
 80063ca:	4b6c      	ldr	r3, [pc, #432]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	4a6b      	ldr	r2, [pc, #428]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 80063d0:	f023 0304 	bic.w	r3, r3, #4
 80063d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 8081 	beq.w	80064ea <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e8:	f7fd f8ae 	bl	8003548 <HAL_GetTick>
 80063ec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f0:	e00b      	b.n	800640a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063f2:	f7fd f8a9 	bl	8003548 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006402:	4293      	cmp	r3, r2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e365      	b.n	8006ad6 <HAL_RCC_OscConfig+0x109a>
 800640a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800640e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006412:	2202      	movs	r2, #2
 8006414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800641a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	fa93 f2a3 	rbit	r2, r3
 8006424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006428:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006432:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006436:	2202      	movs	r2, #2
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800643e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	fa93 f2a3 	rbit	r2, r3
 8006448:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800644c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006450:	601a      	str	r2, [r3, #0]
  return result;
 8006452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006456:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800645a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645c:	fab3 f383 	clz	r3, r3
 8006460:	b2db      	uxtb	r3, r3
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f043 0302 	orr.w	r3, r3, #2
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d102      	bne.n	8006476 <HAL_RCC_OscConfig+0xa3a>
 8006470:	4b42      	ldr	r3, [pc, #264]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	e013      	b.n	800649e <HAL_RCC_OscConfig+0xa62>
 8006476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800647a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800647e:	2202      	movs	r2, #2
 8006480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006486:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	fa93 f2a3 	rbit	r2, r3
 8006490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006494:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	4b38      	ldr	r3, [pc, #224]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80064a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80064a6:	2102      	movs	r1, #2
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80064ae:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80064b2:	6812      	ldr	r2, [r2, #0]
 80064b4:	fa92 f1a2 	rbit	r1, r2
 80064b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80064bc:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80064c0:	6011      	str	r1, [r2, #0]
  return result;
 80064c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80064c6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80064ca:	6812      	ldr	r2, [r2, #0]
 80064cc:	fab2 f282 	clz	r2, r2
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	f002 021f 	and.w	r2, r2, #31
 80064dc:	2101      	movs	r1, #1
 80064de:	fa01 f202 	lsl.w	r2, r1, r2
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d084      	beq.n	80063f2 <HAL_RCC_OscConfig+0x9b6>
 80064e8:	e083      	b.n	80065f2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ea:	f7fd f82d 	bl	8003548 <HAL_GetTick>
 80064ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f2:	e00b      	b.n	800650c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f4:	f7fd f828 	bl	8003548 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	f241 3288 	movw	r2, #5000	; 0x1388
 8006504:	4293      	cmp	r3, r2
 8006506:	d901      	bls.n	800650c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e2e4      	b.n	8006ad6 <HAL_RCC_OscConfig+0x109a>
 800650c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006510:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006514:	2202      	movs	r2, #2
 8006516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800651c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	fa93 f2a3 	rbit	r2, r3
 8006526:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800652a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006534:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006538:	2202      	movs	r2, #2
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006540:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	fa93 f2a3 	rbit	r2, r3
 800654a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800654e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006552:	601a      	str	r2, [r3, #0]
  return result;
 8006554:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006558:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800655c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655e:	fab3 f383 	clz	r3, r3
 8006562:	b2db      	uxtb	r3, r3
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f043 0302 	orr.w	r3, r3, #2
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d106      	bne.n	8006580 <HAL_RCC_OscConfig+0xb44>
 8006572:	4b02      	ldr	r3, [pc, #8]	; (800657c <HAL_RCC_OscConfig+0xb40>)
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	e017      	b.n	80065a8 <HAL_RCC_OscConfig+0xb6c>
 8006578:	40007000 	.word	0x40007000
 800657c:	40021000 	.word	0x40021000
 8006580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006584:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006588:	2202      	movs	r2, #2
 800658a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800658c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006590:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	fa93 f2a3 	rbit	r2, r3
 800659a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800659e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	4bb3      	ldr	r3, [pc, #716]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80065b0:	2102      	movs	r1, #2
 80065b2:	6011      	str	r1, [r2, #0]
 80065b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065b8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	fa92 f1a2 	rbit	r1, r2
 80065c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065c6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80065ca:	6011      	str	r1, [r2, #0]
  return result;
 80065cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065d0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	fab2 f282 	clz	r2, r2
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	f002 021f 	and.w	r2, r2, #31
 80065e6:	2101      	movs	r1, #1
 80065e8:	fa01 f202 	lsl.w	r2, r1, r2
 80065ec:	4013      	ands	r3, r2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d180      	bne.n	80064f4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065f2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d105      	bne.n	8006606 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fa:	4b9e      	ldr	r3, [pc, #632]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	4a9d      	ldr	r2, [pc, #628]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 8006600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006604:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800660a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 825e 	beq.w	8006ad4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006618:	4b96      	ldr	r3, [pc, #600]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f003 030c 	and.w	r3, r3, #12
 8006620:	2b08      	cmp	r3, #8
 8006622:	f000 821f 	beq.w	8006a64 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800662a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	2b02      	cmp	r3, #2
 8006634:	f040 8170 	bne.w	8006918 <HAL_RCC_OscConfig+0xedc>
 8006638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800663c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006644:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006646:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800664a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	fa93 f2a3 	rbit	r2, r3
 8006654:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006658:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800665c:	601a      	str	r2, [r3, #0]
  return result;
 800665e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006662:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006666:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006668:	fab3 f383 	clz	r3, r3
 800666c:	b2db      	uxtb	r3, r3
 800666e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006672:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	461a      	mov	r2, r3
 800667a:	2300      	movs	r3, #0
 800667c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667e:	f7fc ff63 	bl	8003548 <HAL_GetTick>
 8006682:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006686:	e009      	b.n	800669c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006688:	f7fc ff5e 	bl	8003548 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e21c      	b.n	8006ad6 <HAL_RCC_OscConfig+0x109a>
 800669c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066a0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	fa93 f2a3 	rbit	r2, r3
 80066b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066bc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80066c0:	601a      	str	r2, [r3, #0]
  return result;
 80066c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80066ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066cc:	fab3 f383 	clz	r3, r3
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f043 0301 	orr.w	r3, r3, #1
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d102      	bne.n	80066e6 <HAL_RCC_OscConfig+0xcaa>
 80066e0:	4b64      	ldr	r3, [pc, #400]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	e027      	b.n	8006736 <HAL_RCC_OscConfig+0xcfa>
 80066e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066ea:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80066ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066f8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	fa93 f2a3 	rbit	r2, r3
 8006702:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006706:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006710:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006718:	601a      	str	r2, [r3, #0]
 800671a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800671e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	fa93 f2a3 	rbit	r2, r3
 8006728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800672c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	4b50      	ldr	r3, [pc, #320]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800673a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800673e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006742:	6011      	str	r1, [r2, #0]
 8006744:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006748:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	fa92 f1a2 	rbit	r1, r2
 8006752:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006756:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800675a:	6011      	str	r1, [r2, #0]
  return result;
 800675c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006760:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	fab2 f282 	clz	r2, r2
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	f042 0220 	orr.w	r2, r2, #32
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	f002 021f 	and.w	r2, r2, #31
 8006776:	2101      	movs	r1, #1
 8006778:	fa01 f202 	lsl.w	r2, r1, r2
 800677c:	4013      	ands	r3, r2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d182      	bne.n	8006688 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006782:	4b3c      	ldr	r3, [pc, #240]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 8006784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006786:	f023 020f 	bic.w	r2, r3, #15
 800678a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800678e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	4937      	ldr	r1, [pc, #220]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 8006798:	4313      	orrs	r3, r2
 800679a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800679c:	4b35      	ldr	r3, [pc, #212]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80067a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6a19      	ldr	r1, [r3, #32]
 80067b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	430b      	orrs	r3, r1
 80067be:	492d      	ldr	r1, [pc, #180]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	604b      	str	r3, [r1, #4]
 80067c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067c8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80067cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067d6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	fa93 f2a3 	rbit	r2, r3
 80067e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067e4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80067e8:	601a      	str	r2, [r3, #0]
  return result;
 80067ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067ee:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80067f2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067f4:	fab3 f383 	clz	r3, r3
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80067fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	461a      	mov	r2, r3
 8006806:	2301      	movs	r3, #1
 8006808:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680a:	f7fc fe9d 	bl	8003548 <HAL_GetTick>
 800680e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006812:	e009      	b.n	8006828 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006814:	f7fc fe98 	bl	8003548 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e156      	b.n	8006ad6 <HAL_RCC_OscConfig+0x109a>
 8006828:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800682c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006830:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	fa93 f2a3 	rbit	r2, r3
 8006844:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006848:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800684c:	601a      	str	r2, [r3, #0]
  return result;
 800684e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006852:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006856:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006858:	fab3 f383 	clz	r3, r3
 800685c:	b2db      	uxtb	r3, r3
 800685e:	095b      	lsrs	r3, r3, #5
 8006860:	b2db      	uxtb	r3, r3
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b01      	cmp	r3, #1
 800686a:	d105      	bne.n	8006878 <HAL_RCC_OscConfig+0xe3c>
 800686c:	4b01      	ldr	r3, [pc, #4]	; (8006874 <HAL_RCC_OscConfig+0xe38>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	e02a      	b.n	80068c8 <HAL_RCC_OscConfig+0xe8c>
 8006872:	bf00      	nop
 8006874:	40021000 	.word	0x40021000
 8006878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800687c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006880:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006884:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800688a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	fa93 f2a3 	rbit	r2, r3
 8006894:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006898:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800689c:	601a      	str	r2, [r3, #0]
 800689e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068a2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80068a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068b0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	fa93 f2a3 	rbit	r2, r3
 80068ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068be:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	4b86      	ldr	r3, [pc, #536]	; (8006ae0 <HAL_RCC_OscConfig+0x10a4>)
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068cc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80068d0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80068d4:	6011      	str	r1, [r2, #0]
 80068d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068da:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	fa92 f1a2 	rbit	r1, r2
 80068e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068e8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80068ec:	6011      	str	r1, [r2, #0]
  return result;
 80068ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068f2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80068f6:	6812      	ldr	r2, [r2, #0]
 80068f8:	fab2 f282 	clz	r2, r2
 80068fc:	b2d2      	uxtb	r2, r2
 80068fe:	f042 0220 	orr.w	r2, r2, #32
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	f002 021f 	and.w	r2, r2, #31
 8006908:	2101      	movs	r1, #1
 800690a:	fa01 f202 	lsl.w	r2, r1, r2
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f43f af7f 	beq.w	8006814 <HAL_RCC_OscConfig+0xdd8>
 8006916:	e0dd      	b.n	8006ad4 <HAL_RCC_OscConfig+0x1098>
 8006918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800691c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800692a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	fa93 f2a3 	rbit	r2, r3
 8006934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006938:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800693c:	601a      	str	r2, [r3, #0]
  return result;
 800693e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006942:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006946:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006948:	fab3 f383 	clz	r3, r3
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006952:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	461a      	mov	r2, r3
 800695a:	2300      	movs	r3, #0
 800695c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695e:	f7fc fdf3 	bl	8003548 <HAL_GetTick>
 8006962:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006966:	e009      	b.n	800697c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006968:	f7fc fdee 	bl	8003548 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e0ac      	b.n	8006ad6 <HAL_RCC_OscConfig+0x109a>
 800697c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006980:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006984:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800698a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800698e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	fa93 f2a3 	rbit	r2, r3
 8006998:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800699c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80069a0:	601a      	str	r2, [r3, #0]
  return result;
 80069a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069a6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80069aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069ac:	fab3 f383 	clz	r3, r3
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d102      	bne.n	80069c6 <HAL_RCC_OscConfig+0xf8a>
 80069c0:	4b47      	ldr	r3, [pc, #284]	; (8006ae0 <HAL_RCC_OscConfig+0x10a4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	e027      	b.n	8006a16 <HAL_RCC_OscConfig+0xfda>
 80069c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069ca:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80069ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069d8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	fa93 f2a3 	rbit	r2, r3
 80069e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069e6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069f0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80069f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069fe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	fa93 f2a3 	rbit	r2, r3
 8006a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a0c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006a10:	601a      	str	r2, [r3, #0]
 8006a12:	4b33      	ldr	r3, [pc, #204]	; (8006ae0 <HAL_RCC_OscConfig+0x10a4>)
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a1a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006a1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006a22:	6011      	str	r1, [r2, #0]
 8006a24:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a28:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006a2c:	6812      	ldr	r2, [r2, #0]
 8006a2e:	fa92 f1a2 	rbit	r1, r2
 8006a32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a36:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006a3a:	6011      	str	r1, [r2, #0]
  return result;
 8006a3c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a40:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	fab2 f282 	clz	r2, r2
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	f042 0220 	orr.w	r2, r2, #32
 8006a50:	b2d2      	uxtb	r2, r2
 8006a52:	f002 021f 	and.w	r2, r2, #31
 8006a56:	2101      	movs	r1, #1
 8006a58:	fa01 f202 	lsl.w	r2, r1, r2
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d182      	bne.n	8006968 <HAL_RCC_OscConfig+0xf2c>
 8006a62:	e037      	b.n	8006ad4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e02e      	b.n	8006ad6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a78:	4b19      	ldr	r3, [pc, #100]	; (8006ae0 <HAL_RCC_OscConfig+0x10a4>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006a80:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <HAL_RCC_OscConfig+0x10a4>)
 8006a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a84:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006a88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a8c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006a90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d117      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006aa0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006aa4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006aac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d10b      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006ab8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006abc:	f003 020f 	and.w	r2, r3, #15
 8006ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ac4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d001      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40021000 	.word	0x40021000

08006ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b09e      	sub	sp, #120	; 0x78
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e162      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006afc:	4b90      	ldr	r3, [pc, #576]	; (8006d40 <HAL_RCC_ClockConfig+0x25c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0307 	and.w	r3, r3, #7
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d910      	bls.n	8006b2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0a:	4b8d      	ldr	r3, [pc, #564]	; (8006d40 <HAL_RCC_ClockConfig+0x25c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f023 0207 	bic.w	r2, r3, #7
 8006b12:	498b      	ldr	r1, [pc, #556]	; (8006d40 <HAL_RCC_ClockConfig+0x25c>)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1a:	4b89      	ldr	r3, [pc, #548]	; (8006d40 <HAL_RCC_ClockConfig+0x25c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e14a      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d008      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b38:	4b82      	ldr	r3, [pc, #520]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	497f      	ldr	r1, [pc, #508]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 80dc 	beq.w	8006d10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d13c      	bne.n	8006bda <HAL_RCC_ClockConfig+0xf6>
 8006b60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b68:	fa93 f3a3 	rbit	r3, r3
 8006b6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b70:	fab3 f383 	clz	r3, r3
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d102      	bne.n	8006b8a <HAL_RCC_ClockConfig+0xa6>
 8006b84:	4b6f      	ldr	r3, [pc, #444]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	e00f      	b.n	8006baa <HAL_RCC_ClockConfig+0xc6>
 8006b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b92:	fa93 f3a3 	rbit	r3, r3
 8006b96:	667b      	str	r3, [r7, #100]	; 0x64
 8006b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8006b9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ba0:	fa93 f3a3 	rbit	r3, r3
 8006ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ba6:	4b67      	ldr	r3, [pc, #412]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bae:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bb2:	fa92 f2a2 	rbit	r2, r2
 8006bb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006bb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bba:	fab2 f282 	clz	r2, r2
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	f042 0220 	orr.w	r2, r2, #32
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	f002 021f 	and.w	r2, r2, #31
 8006bca:	2101      	movs	r1, #1
 8006bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d17b      	bne.n	8006cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e0f3      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d13c      	bne.n	8006c5c <HAL_RCC_ClockConfig+0x178>
 8006be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006be6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bea:	fa93 f3a3 	rbit	r3, r3
 8006bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf2:	fab3 f383 	clz	r3, r3
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d102      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x128>
 8006c06:	4b4f      	ldr	r3, [pc, #316]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	e00f      	b.n	8006c2c <HAL_RCC_ClockConfig+0x148>
 8006c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c14:	fa93 f3a3 	rbit	r3, r3
 8006c18:	647b      	str	r3, [r7, #68]	; 0x44
 8006c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c22:	fa93 f3a3 	rbit	r3, r3
 8006c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c28:	4b46      	ldr	r3, [pc, #280]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c30:	63ba      	str	r2, [r7, #56]	; 0x38
 8006c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c34:	fa92 f2a2 	rbit	r2, r2
 8006c38:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c3c:	fab2 f282 	clz	r2, r2
 8006c40:	b2d2      	uxtb	r2, r2
 8006c42:	f042 0220 	orr.w	r2, r2, #32
 8006c46:	b2d2      	uxtb	r2, r2
 8006c48:	f002 021f 	and.w	r2, r2, #31
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8006c52:	4013      	ands	r3, r2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d13a      	bne.n	8006cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e0b2      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x2de>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	fa93 f3a3 	rbit	r3, r3
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6a:	fab3 f383 	clz	r3, r3
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	095b      	lsrs	r3, r3, #5
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	f043 0301 	orr.w	r3, r3, #1
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d102      	bne.n	8006c84 <HAL_RCC_ClockConfig+0x1a0>
 8006c7e:	4b31      	ldr	r3, [pc, #196]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	e00d      	b.n	8006ca0 <HAL_RCC_ClockConfig+0x1bc>
 8006c84:	2302      	movs	r3, #2
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8a:	fa93 f3a3 	rbit	r3, r3
 8006c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c90:	2302      	movs	r3, #2
 8006c92:	623b      	str	r3, [r7, #32]
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	fa93 f3a3 	rbit	r3, r3
 8006c9a:	61fb      	str	r3, [r7, #28]
 8006c9c:	4b29      	ldr	r3, [pc, #164]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	61ba      	str	r2, [r7, #24]
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	fa92 f2a2 	rbit	r2, r2
 8006caa:	617a      	str	r2, [r7, #20]
  return result;
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	fab2 f282 	clz	r2, r2
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	f042 0220 	orr.w	r2, r2, #32
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	f002 021f 	and.w	r2, r2, #31
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d101      	bne.n	8006cce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e079      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cce:	4b1d      	ldr	r3, [pc, #116]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f023 0203 	bic.w	r2, r3, #3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	491a      	ldr	r1, [pc, #104]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ce0:	f7fc fc32 	bl	8003548 <HAL_GetTick>
 8006ce4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ce6:	e00a      	b.n	8006cfe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ce8:	f7fc fc2e 	bl	8003548 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d901      	bls.n	8006cfe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e061      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cfe:	4b11      	ldr	r3, [pc, #68]	; (8006d44 <HAL_RCC_ClockConfig+0x260>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f003 020c 	and.w	r2, r3, #12
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d1eb      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d10:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <HAL_RCC_ClockConfig+0x25c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	683a      	ldr	r2, [r7, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d214      	bcs.n	8006d48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d1e:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <HAL_RCC_ClockConfig+0x25c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f023 0207 	bic.w	r2, r3, #7
 8006d26:	4906      	ldr	r1, [pc, #24]	; (8006d40 <HAL_RCC_ClockConfig+0x25c>)
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <HAL_RCC_ClockConfig+0x25c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d005      	beq.n	8006d48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e040      	b.n	8006dc2 <HAL_RCC_ClockConfig+0x2de>
 8006d40:	40022000 	.word	0x40022000
 8006d44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d54:	4b1d      	ldr	r3, [pc, #116]	; (8006dcc <HAL_RCC_ClockConfig+0x2e8>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	491a      	ldr	r1, [pc, #104]	; (8006dcc <HAL_RCC_ClockConfig+0x2e8>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d72:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <HAL_RCC_ClockConfig+0x2e8>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	4912      	ldr	r1, [pc, #72]	; (8006dcc <HAL_RCC_ClockConfig+0x2e8>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006d86:	f000 f829 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 8006d8a:	4601      	mov	r1, r0
 8006d8c:	4b0f      	ldr	r3, [pc, #60]	; (8006dcc <HAL_RCC_ClockConfig+0x2e8>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d94:	22f0      	movs	r2, #240	; 0xf0
 8006d96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	fa92 f2a2 	rbit	r2, r2
 8006d9e:	60fa      	str	r2, [r7, #12]
  return result;
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	fab2 f282 	clz	r2, r2
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	40d3      	lsrs	r3, r2
 8006daa:	4a09      	ldr	r2, [pc, #36]	; (8006dd0 <HAL_RCC_ClockConfig+0x2ec>)
 8006dac:	5cd3      	ldrb	r3, [r2, r3]
 8006dae:	fa21 f303 	lsr.w	r3, r1, r3
 8006db2:	4a08      	ldr	r2, [pc, #32]	; (8006dd4 <HAL_RCC_ClockConfig+0x2f0>)
 8006db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006db6:	4b08      	ldr	r3, [pc, #32]	; (8006dd8 <HAL_RCC_ClockConfig+0x2f4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fc fb80 	bl	80034c0 <HAL_InitTick>
  
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3778      	adds	r7, #120	; 0x78
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	0800cbe4 	.word	0x0800cbe4
 8006dd4:	20000008 	.word	0x20000008
 8006dd8:	2000000c 	.word	0x2000000c

08006ddc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b08b      	sub	sp, #44	; 0x2c
 8006de0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	2300      	movs	r3, #0
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006df6:	4b2a      	ldr	r3, [pc, #168]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f003 030c 	and.w	r3, r3, #12
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d002      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0x30>
 8006e06:	2b08      	cmp	r3, #8
 8006e08:	d003      	beq.n	8006e12 <HAL_RCC_GetSysClockFreq+0x36>
 8006e0a:	e03f      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e0c:	4b25      	ldr	r3, [pc, #148]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e0e:	623b      	str	r3, [r7, #32]
      break;
 8006e10:	e03f      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006e18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006e1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	fa92 f2a2 	rbit	r2, r2
 8006e24:	607a      	str	r2, [r7, #4]
  return result;
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	fab2 f282 	clz	r2, r2
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	40d3      	lsrs	r3, r2
 8006e30:	4a1d      	ldr	r2, [pc, #116]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e32:	5cd3      	ldrb	r3, [r2, r3]
 8006e34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006e36:	4b1a      	ldr	r3, [pc, #104]	; (8006ea0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	220f      	movs	r2, #15
 8006e40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	fa92 f2a2 	rbit	r2, r2
 8006e48:	60fa      	str	r2, [r7, #12]
  return result;
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	fab2 f282 	clz	r2, r2
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	40d3      	lsrs	r3, r2
 8006e54:	4a15      	ldr	r2, [pc, #84]	; (8006eac <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e56:	5cd3      	ldrb	r3, [r2, r3]
 8006e58:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006e64:	4a0f      	ldr	r2, [pc, #60]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
 8006e74:	e007      	b.n	8006e86 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006e76:	4a0b      	ldr	r2, [pc, #44]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	fb02 f303 	mul.w	r3, r2, r3
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	623b      	str	r3, [r7, #32]
      break;
 8006e8a:	e002      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e8e:	623b      	str	r3, [r7, #32]
      break;
 8006e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e92:	6a3b      	ldr	r3, [r7, #32]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	372c      	adds	r7, #44	; 0x2c
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	007a1200 	.word	0x007a1200
 8006ea8:	0800cbfc 	.word	0x0800cbfc
 8006eac:	0800cc0c 	.word	0x0800cc0c

08006eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb4:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000008 	.word	0x20000008

08006ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006ece:	f7ff ffef 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006edc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006ee0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	fa92 f2a2 	rbit	r2, r2
 8006ee8:	603a      	str	r2, [r7, #0]
  return result;
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	fab2 f282 	clz	r2, r2
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	40d3      	lsrs	r3, r2
 8006ef4:	4a04      	ldr	r2, [pc, #16]	; (8006f08 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006ef6:	5cd3      	ldrb	r3, [r2, r3]
 8006ef8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	40021000 	.word	0x40021000
 8006f08:	0800cbf4 	.word	0x0800cbf4

08006f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006f12:	f7ff ffcd 	bl	8006eb0 <HAL_RCC_GetHCLKFreq>
 8006f16:	4601      	mov	r1, r0
 8006f18:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006f20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006f24:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	fa92 f2a2 	rbit	r2, r2
 8006f2c:	603a      	str	r2, [r7, #0]
  return result;
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	fab2 f282 	clz	r2, r2
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	40d3      	lsrs	r3, r2
 8006f38:	4a04      	ldr	r2, [pc, #16]	; (8006f4c <HAL_RCC_GetPCLK2Freq+0x40>)
 8006f3a:	5cd3      	ldrb	r3, [r2, r3]
 8006f3c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006f40:	4618      	mov	r0, r3
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	0800cbf4 	.word	0x0800cbf4

08006f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b092      	sub	sp, #72	; 0x48
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006f60:	2300      	movs	r3, #0
 8006f62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 80d4 	beq.w	800711c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f74:	4b4e      	ldr	r3, [pc, #312]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10e      	bne.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f80:	4b4b      	ldr	r3, [pc, #300]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	4a4a      	ldr	r2, [pc, #296]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8a:	61d3      	str	r3, [r2, #28]
 8006f8c:	4b48      	ldr	r3, [pc, #288]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f94:	60bb      	str	r3, [r7, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f9e:	4b45      	ldr	r3, [pc, #276]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d118      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006faa:	4b42      	ldr	r3, [pc, #264]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a41      	ldr	r2, [pc, #260]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fb6:	f7fc fac7 	bl	8003548 <HAL_GetTick>
 8006fba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fbc:	e008      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fbe:	f7fc fac3 	bl	8003548 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b64      	cmp	r3, #100	; 0x64
 8006fca:	d901      	bls.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e1d6      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd0:	4b38      	ldr	r3, [pc, #224]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0f0      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fdc:	4b34      	ldr	r3, [pc, #208]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 8084 	beq.w	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d07c      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ffc:	4b2c      	ldr	r3, [pc, #176]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007006:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800700a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	fa93 f3a3 	rbit	r3, r3
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007016:	fab3 f383 	clz	r3, r3
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	4b26      	ldr	r3, [pc, #152]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	461a      	mov	r2, r3
 8007026:	2301      	movs	r3, #1
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800702e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007032:	fa93 f3a3 	rbit	r3, r3
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800703a:	fab3 f383 	clz	r3, r3
 800703e:	b2db      	uxtb	r3, r3
 8007040:	461a      	mov	r2, r3
 8007042:	4b1d      	ldr	r3, [pc, #116]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	461a      	mov	r2, r3
 800704a:	2300      	movs	r3, #0
 800704c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007052:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d04b      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705e:	f7fc fa73 	bl	8003548 <HAL_GetTick>
 8007062:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007064:	e00a      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007066:	f7fc fa6f 	bl	8003548 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	f241 3288 	movw	r2, #5000	; 0x1388
 8007074:	4293      	cmp	r3, r2
 8007076:	d901      	bls.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e180      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800707c:	2302      	movs	r3, #2
 800707e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	fa93 f3a3 	rbit	r3, r3
 8007086:	627b      	str	r3, [r7, #36]	; 0x24
 8007088:	2302      	movs	r3, #2
 800708a:	623b      	str	r3, [r7, #32]
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	fa93 f3a3 	rbit	r3, r3
 8007092:	61fb      	str	r3, [r7, #28]
  return result;
 8007094:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007096:	fab3 f383 	clz	r3, r3
 800709a:	b2db      	uxtb	r3, r3
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d108      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80070aa:	4b01      	ldr	r3, [pc, #4]	; (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	e00d      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80070b0:	40021000 	.word	0x40021000
 80070b4:	40007000 	.word	0x40007000
 80070b8:	10908100 	.word	0x10908100
 80070bc:	2302      	movs	r3, #2
 80070be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	fa93 f3a3 	rbit	r3, r3
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	4b9a      	ldr	r3, [pc, #616]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	2202      	movs	r2, #2
 80070ce:	613a      	str	r2, [r7, #16]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	fa92 f2a2 	rbit	r2, r2
 80070d6:	60fa      	str	r2, [r7, #12]
  return result;
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	fab2 f282 	clz	r2, r2
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	f002 021f 	and.w	r2, r2, #31
 80070ea:	2101      	movs	r1, #1
 80070ec:	fa01 f202 	lsl.w	r2, r1, r2
 80070f0:	4013      	ands	r3, r2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d0b7      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80070f6:	4b8f      	ldr	r3, [pc, #572]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	498c      	ldr	r1, [pc, #560]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007104:	4313      	orrs	r3, r2
 8007106:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007108:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800710c:	2b01      	cmp	r3, #1
 800710e:	d105      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007110:	4b88      	ldr	r3, [pc, #544]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	4a87      	ldr	r2, [pc, #540]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800711a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007128:	4b82      	ldr	r3, [pc, #520]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	f023 0203 	bic.w	r2, r3, #3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	497f      	ldr	r1, [pc, #508]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007136:	4313      	orrs	r3, r2
 8007138:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d008      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007146:	4b7b      	ldr	r3, [pc, #492]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	4978      	ldr	r1, [pc, #480]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007154:	4313      	orrs	r3, r2
 8007156:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007164:	4b73      	ldr	r3, [pc, #460]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007168:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	4970      	ldr	r1, [pc, #448]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007172:	4313      	orrs	r3, r2
 8007174:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0320 	and.w	r3, r3, #32
 800717e:	2b00      	cmp	r3, #0
 8007180:	d008      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007182:	4b6c      	ldr	r3, [pc, #432]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	f023 0210 	bic.w	r2, r3, #16
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4969      	ldr	r1, [pc, #420]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007190:	4313      	orrs	r3, r2
 8007192:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d008      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80071a0:	4b64      	ldr	r3, [pc, #400]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ac:	4961      	ldr	r1, [pc, #388]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071be:	4b5d      	ldr	r3, [pc, #372]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c2:	f023 0220 	bic.w	r2, r3, #32
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	495a      	ldr	r1, [pc, #360]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071dc:	4b55      	ldr	r3, [pc, #340]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	4952      	ldr	r1, [pc, #328]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f003 0308 	and.w	r3, r3, #8
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d008      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071fa:	4b4e      	ldr	r3, [pc, #312]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	494b      	ldr	r1, [pc, #300]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007208:	4313      	orrs	r3, r2
 800720a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007218:	4b46      	ldr	r3, [pc, #280]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	4943      	ldr	r1, [pc, #268]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007226:	4313      	orrs	r3, r2
 8007228:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007232:	2b00      	cmp	r3, #0
 8007234:	d008      	beq.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007236:	4b3f      	ldr	r3, [pc, #252]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007242:	493c      	ldr	r1, [pc, #240]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007244:	4313      	orrs	r3, r2
 8007246:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007254:	4b37      	ldr	r3, [pc, #220]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007258:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007260:	4934      	ldr	r1, [pc, #208]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007262:	4313      	orrs	r3, r2
 8007264:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800726e:	2b00      	cmp	r3, #0
 8007270:	d008      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007272:	4b30      	ldr	r3, [pc, #192]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007276:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	492d      	ldr	r1, [pc, #180]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007280:	4313      	orrs	r3, r2
 8007282:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d008      	beq.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729c:	4925      	ldr	r1, [pc, #148]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d008      	beq.n	80072c0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80072ae:	4b21      	ldr	r3, [pc, #132]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	491e      	ldr	r1, [pc, #120]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d008      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80072cc:	4b19      	ldr	r3, [pc, #100]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	4916      	ldr	r1, [pc, #88]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	490f      	ldr	r1, [pc, #60]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d008      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007308:	4b0a      	ldr	r3, [pc, #40]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007314:	4907      	ldr	r1, [pc, #28]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007316:	4313      	orrs	r3, r2
 8007318:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00c      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8007326:	4b03      	ldr	r3, [pc, #12]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	e002      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007332:	bf00      	nop
 8007334:	40021000 	.word	0x40021000
 8007338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733a:	4913      	ldr	r1, [pc, #76]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800733c:	4313      	orrs	r3, r2
 800733e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800734c:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800734e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007350:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007358:	490b      	ldr	r1, [pc, #44]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800735a:	4313      	orrs	r3, r2
 800735c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800736a:	4b07      	ldr	r3, [pc, #28]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800736c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007376:	4904      	ldr	r1, [pc, #16]	; (8007388 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007378:	4313      	orrs	r3, r2
 800737a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3748      	adds	r7, #72	; 0x48
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	40021000 	.word	0x40021000

0800738c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d101      	bne.n	800739e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e049      	b.n	8007432 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f7fb fe88 	bl	80030c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f000 f94a 	bl	8007664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007448:	2300      	movs	r3, #0
 800744a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007456:	2302      	movs	r3, #2
 8007458:	e0ff      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b14      	cmp	r3, #20
 8007466:	f200 80f0 	bhi.w	800764a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074c5 	.word	0x080074c5
 8007474:	0800764b 	.word	0x0800764b
 8007478:	0800764b 	.word	0x0800764b
 800747c:	0800764b 	.word	0x0800764b
 8007480:	08007505 	.word	0x08007505
 8007484:	0800764b 	.word	0x0800764b
 8007488:	0800764b 	.word	0x0800764b
 800748c:	0800764b 	.word	0x0800764b
 8007490:	08007547 	.word	0x08007547
 8007494:	0800764b 	.word	0x0800764b
 8007498:	0800764b 	.word	0x0800764b
 800749c:	0800764b 	.word	0x0800764b
 80074a0:	08007587 	.word	0x08007587
 80074a4:	0800764b 	.word	0x0800764b
 80074a8:	0800764b 	.word	0x0800764b
 80074ac:	0800764b 	.word	0x0800764b
 80074b0:	080075c9 	.word	0x080075c9
 80074b4:	0800764b 	.word	0x0800764b
 80074b8:	0800764b 	.word	0x0800764b
 80074bc:	0800764b 	.word	0x0800764b
 80074c0:	08007609 	.word	0x08007609
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68b9      	ldr	r1, [r7, #8]
 80074ca:	4618      	mov	r0, r3
 80074cc:	f000 f968 	bl	80077a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699a      	ldr	r2, [r3, #24]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0208 	orr.w	r2, r2, #8
 80074de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	699a      	ldr	r2, [r3, #24]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0204 	bic.w	r2, r2, #4
 80074ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6999      	ldr	r1, [r3, #24]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	691a      	ldr	r2, [r3, #16]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	619a      	str	r2, [r3, #24]
      break;
 8007502:	e0a5      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f9e2 	bl	80078d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	699a      	ldr	r2, [r3, #24]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800751e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800752e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6999      	ldr	r1, [r3, #24]
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	021a      	lsls	r2, r3, #8
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	619a      	str	r2, [r3, #24]
      break;
 8007544:	e084      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	4618      	mov	r0, r3
 800754e:	f000 fa55 	bl	80079fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	69da      	ldr	r2, [r3, #28]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f042 0208 	orr.w	r2, r2, #8
 8007560:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0204 	bic.w	r2, r2, #4
 8007570:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	69d9      	ldr	r1, [r3, #28]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	61da      	str	r2, [r3, #28]
      break;
 8007584:	e064      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68b9      	ldr	r1, [r7, #8]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fac7 	bl	8007b20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	69da      	ldr	r2, [r3, #28]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69d9      	ldr	r1, [r3, #28]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	021a      	lsls	r2, r3, #8
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	61da      	str	r2, [r3, #28]
      break;
 80075c6:	e043      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fb16 	bl	8007c00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f042 0208 	orr.w	r2, r2, #8
 80075e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	691a      	ldr	r2, [r3, #16]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007606:	e023      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68b9      	ldr	r1, [r7, #8]
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fb60 	bl	8007cd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007622:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007632:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	021a      	lsls	r2, r3, #8
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007648:	e002      	b.n	8007650 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	75fb      	strb	r3, [r7, #23]
      break;
 800764e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop

08007664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a42      	ldr	r2, [pc, #264]	; (8007780 <TIM_Base_SetConfig+0x11c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d013      	beq.n	80076a4 <TIM_Base_SetConfig+0x40>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007682:	d00f      	beq.n	80076a4 <TIM_Base_SetConfig+0x40>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a3f      	ldr	r2, [pc, #252]	; (8007784 <TIM_Base_SetConfig+0x120>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d00b      	beq.n	80076a4 <TIM_Base_SetConfig+0x40>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a3e      	ldr	r2, [pc, #248]	; (8007788 <TIM_Base_SetConfig+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d007      	beq.n	80076a4 <TIM_Base_SetConfig+0x40>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a3d      	ldr	r2, [pc, #244]	; (800778c <TIM_Base_SetConfig+0x128>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_Base_SetConfig+0x40>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a3c      	ldr	r2, [pc, #240]	; (8007790 <TIM_Base_SetConfig+0x12c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d108      	bne.n	80076b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a31      	ldr	r2, [pc, #196]	; (8007780 <TIM_Base_SetConfig+0x11c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d01f      	beq.n	80076fe <TIM_Base_SetConfig+0x9a>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d01b      	beq.n	80076fe <TIM_Base_SetConfig+0x9a>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a2e      	ldr	r2, [pc, #184]	; (8007784 <TIM_Base_SetConfig+0x120>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d017      	beq.n	80076fe <TIM_Base_SetConfig+0x9a>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a2d      	ldr	r2, [pc, #180]	; (8007788 <TIM_Base_SetConfig+0x124>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d013      	beq.n	80076fe <TIM_Base_SetConfig+0x9a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a2c      	ldr	r2, [pc, #176]	; (800778c <TIM_Base_SetConfig+0x128>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d00f      	beq.n	80076fe <TIM_Base_SetConfig+0x9a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a2c      	ldr	r2, [pc, #176]	; (8007794 <TIM_Base_SetConfig+0x130>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00b      	beq.n	80076fe <TIM_Base_SetConfig+0x9a>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a2b      	ldr	r2, [pc, #172]	; (8007798 <TIM_Base_SetConfig+0x134>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d007      	beq.n	80076fe <TIM_Base_SetConfig+0x9a>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a2a      	ldr	r2, [pc, #168]	; (800779c <TIM_Base_SetConfig+0x138>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d003      	beq.n	80076fe <TIM_Base_SetConfig+0x9a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a25      	ldr	r2, [pc, #148]	; (8007790 <TIM_Base_SetConfig+0x12c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d108      	bne.n	8007710 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a12      	ldr	r2, [pc, #72]	; (8007780 <TIM_Base_SetConfig+0x11c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <TIM_Base_SetConfig+0x100>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a13      	ldr	r2, [pc, #76]	; (800778c <TIM_Base_SetConfig+0x128>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d00f      	beq.n	8007764 <TIM_Base_SetConfig+0x100>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a13      	ldr	r2, [pc, #76]	; (8007794 <TIM_Base_SetConfig+0x130>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00b      	beq.n	8007764 <TIM_Base_SetConfig+0x100>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a12      	ldr	r2, [pc, #72]	; (8007798 <TIM_Base_SetConfig+0x134>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d007      	beq.n	8007764 <TIM_Base_SetConfig+0x100>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a11      	ldr	r2, [pc, #68]	; (800779c <TIM_Base_SetConfig+0x138>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_Base_SetConfig+0x100>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a0c      	ldr	r2, [pc, #48]	; (8007790 <TIM_Base_SetConfig+0x12c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d103      	bne.n	800776c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	615a      	str	r2, [r3, #20]
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40012c00 	.word	0x40012c00
 8007784:	40000400 	.word	0x40000400
 8007788:	40000800 	.word	0x40000800
 800778c:	40013400 	.word	0x40013400
 8007790:	40015000 	.word	0x40015000
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800

080077a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f023 0201 	bic.w	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68fa      	ldr	r2, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f023 0302 	bic.w	r3, r3, #2
 80077ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a30      	ldr	r2, [pc, #192]	; (80078bc <TIM_OC1_SetConfig+0x11c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d013      	beq.n	8007828 <TIM_OC1_SetConfig+0x88>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a2f      	ldr	r2, [pc, #188]	; (80078c0 <TIM_OC1_SetConfig+0x120>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d00f      	beq.n	8007828 <TIM_OC1_SetConfig+0x88>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a2e      	ldr	r2, [pc, #184]	; (80078c4 <TIM_OC1_SetConfig+0x124>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d00b      	beq.n	8007828 <TIM_OC1_SetConfig+0x88>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a2d      	ldr	r2, [pc, #180]	; (80078c8 <TIM_OC1_SetConfig+0x128>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d007      	beq.n	8007828 <TIM_OC1_SetConfig+0x88>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a2c      	ldr	r2, [pc, #176]	; (80078cc <TIM_OC1_SetConfig+0x12c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d003      	beq.n	8007828 <TIM_OC1_SetConfig+0x88>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a2b      	ldr	r2, [pc, #172]	; (80078d0 <TIM_OC1_SetConfig+0x130>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d10c      	bne.n	8007842 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	f023 0308 	bic.w	r3, r3, #8
 800782e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	697a      	ldr	r2, [r7, #20]
 8007836:	4313      	orrs	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f023 0304 	bic.w	r3, r3, #4
 8007840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a1d      	ldr	r2, [pc, #116]	; (80078bc <TIM_OC1_SetConfig+0x11c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d013      	beq.n	8007872 <TIM_OC1_SetConfig+0xd2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a1c      	ldr	r2, [pc, #112]	; (80078c0 <TIM_OC1_SetConfig+0x120>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00f      	beq.n	8007872 <TIM_OC1_SetConfig+0xd2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	4a1b      	ldr	r2, [pc, #108]	; (80078c4 <TIM_OC1_SetConfig+0x124>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00b      	beq.n	8007872 <TIM_OC1_SetConfig+0xd2>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	4a1a      	ldr	r2, [pc, #104]	; (80078c8 <TIM_OC1_SetConfig+0x128>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d007      	beq.n	8007872 <TIM_OC1_SetConfig+0xd2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a19      	ldr	r2, [pc, #100]	; (80078cc <TIM_OC1_SetConfig+0x12c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d003      	beq.n	8007872 <TIM_OC1_SetConfig+0xd2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a18      	ldr	r2, [pc, #96]	; (80078d0 <TIM_OC1_SetConfig+0x130>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d111      	bne.n	8007896 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	685a      	ldr	r2, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	621a      	str	r2, [r3, #32]
}
 80078b0:	bf00      	nop
 80078b2:	371c      	adds	r7, #28
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	40012c00 	.word	0x40012c00
 80078c0:	40013400 	.word	0x40013400
 80078c4:	40014000 	.word	0x40014000
 80078c8:	40014400 	.word	0x40014400
 80078cc:	40014800 	.word	0x40014800
 80078d0:	40015000 	.word	0x40015000

080078d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	f023 0210 	bic.w	r2, r3, #16
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a1b      	ldr	r3, [r3, #32]
 80078ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800790e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4313      	orrs	r3, r2
 800791a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f023 0320 	bic.w	r3, r3, #32
 8007922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	011b      	lsls	r3, r3, #4
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	4313      	orrs	r3, r2
 800792e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	4a2c      	ldr	r2, [pc, #176]	; (80079e4 <TIM_OC2_SetConfig+0x110>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d007      	beq.n	8007948 <TIM_OC2_SetConfig+0x74>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a2b      	ldr	r2, [pc, #172]	; (80079e8 <TIM_OC2_SetConfig+0x114>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d003      	beq.n	8007948 <TIM_OC2_SetConfig+0x74>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a2a      	ldr	r2, [pc, #168]	; (80079ec <TIM_OC2_SetConfig+0x118>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d10d      	bne.n	8007964 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800794e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	4313      	orrs	r3, r2
 800795a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a1f      	ldr	r2, [pc, #124]	; (80079e4 <TIM_OC2_SetConfig+0x110>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d013      	beq.n	8007994 <TIM_OC2_SetConfig+0xc0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <TIM_OC2_SetConfig+0x114>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d00f      	beq.n	8007994 <TIM_OC2_SetConfig+0xc0>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a1e      	ldr	r2, [pc, #120]	; (80079f0 <TIM_OC2_SetConfig+0x11c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d00b      	beq.n	8007994 <TIM_OC2_SetConfig+0xc0>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4a1d      	ldr	r2, [pc, #116]	; (80079f4 <TIM_OC2_SetConfig+0x120>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d007      	beq.n	8007994 <TIM_OC2_SetConfig+0xc0>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <TIM_OC2_SetConfig+0x124>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d003      	beq.n	8007994 <TIM_OC2_SetConfig+0xc0>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a17      	ldr	r2, [pc, #92]	; (80079ec <TIM_OC2_SetConfig+0x118>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d113      	bne.n	80079bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800799a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	693a      	ldr	r2, [r7, #16]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	693a      	ldr	r2, [r7, #16]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	621a      	str	r2, [r3, #32]
}
 80079d6:	bf00      	nop
 80079d8:	371c      	adds	r7, #28
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
 80079e2:	bf00      	nop
 80079e4:	40012c00 	.word	0x40012c00
 80079e8:	40013400 	.word	0x40013400
 80079ec:	40015000 	.word	0x40015000
 80079f0:	40014000 	.word	0x40014000
 80079f4:	40014400 	.word	0x40014400
 80079f8:	40014800 	.word	0x40014800

080079fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f023 0303 	bic.w	r3, r3, #3
 8007a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	021b      	lsls	r3, r3, #8
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	4313      	orrs	r3, r2
 8007a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a2b      	ldr	r2, [pc, #172]	; (8007b08 <TIM_OC3_SetConfig+0x10c>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d007      	beq.n	8007a6e <TIM_OC3_SetConfig+0x72>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a2a      	ldr	r2, [pc, #168]	; (8007b0c <TIM_OC3_SetConfig+0x110>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d003      	beq.n	8007a6e <TIM_OC3_SetConfig+0x72>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a29      	ldr	r2, [pc, #164]	; (8007b10 <TIM_OC3_SetConfig+0x114>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d10d      	bne.n	8007a8a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	021b      	lsls	r3, r3, #8
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a88:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a1e      	ldr	r2, [pc, #120]	; (8007b08 <TIM_OC3_SetConfig+0x10c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d013      	beq.n	8007aba <TIM_OC3_SetConfig+0xbe>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a1d      	ldr	r2, [pc, #116]	; (8007b0c <TIM_OC3_SetConfig+0x110>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d00f      	beq.n	8007aba <TIM_OC3_SetConfig+0xbe>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <TIM_OC3_SetConfig+0x118>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00b      	beq.n	8007aba <TIM_OC3_SetConfig+0xbe>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <TIM_OC3_SetConfig+0x11c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d007      	beq.n	8007aba <TIM_OC3_SetConfig+0xbe>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <TIM_OC3_SetConfig+0x120>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d003      	beq.n	8007aba <TIM_OC3_SetConfig+0xbe>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_OC3_SetConfig+0x114>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d113      	bne.n	8007ae2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	011b      	lsls	r3, r3, #4
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685a      	ldr	r2, [r3, #4]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	697a      	ldr	r2, [r7, #20]
 8007afa:	621a      	str	r2, [r3, #32]
}
 8007afc:	bf00      	nop
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40013400 	.word	0x40013400
 8007b10:	40015000 	.word	0x40015000
 8007b14:	40014000 	.word	0x40014000
 8007b18:	40014400 	.word	0x40014400
 8007b1c:	40014800 	.word	0x40014800

08007b20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	69db      	ldr	r3, [r3, #28]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	021b      	lsls	r3, r3, #8
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	031b      	lsls	r3, r3, #12
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a1a      	ldr	r2, [pc, #104]	; (8007be8 <TIM_OC4_SetConfig+0xc8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d013      	beq.n	8007bac <TIM_OC4_SetConfig+0x8c>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a19      	ldr	r2, [pc, #100]	; (8007bec <TIM_OC4_SetConfig+0xcc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00f      	beq.n	8007bac <TIM_OC4_SetConfig+0x8c>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <TIM_OC4_SetConfig+0xd0>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00b      	beq.n	8007bac <TIM_OC4_SetConfig+0x8c>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a17      	ldr	r2, [pc, #92]	; (8007bf4 <TIM_OC4_SetConfig+0xd4>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d007      	beq.n	8007bac <TIM_OC4_SetConfig+0x8c>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a16      	ldr	r2, [pc, #88]	; (8007bf8 <TIM_OC4_SetConfig+0xd8>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d003      	beq.n	8007bac <TIM_OC4_SetConfig+0x8c>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a15      	ldr	r2, [pc, #84]	; (8007bfc <TIM_OC4_SetConfig+0xdc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d109      	bne.n	8007bc0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	019b      	lsls	r3, r3, #6
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	621a      	str	r2, [r3, #32]
}
 8007bda:	bf00      	nop
 8007bdc:	371c      	adds	r7, #28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	40012c00 	.word	0x40012c00
 8007bec:	40013400 	.word	0x40013400
 8007bf0:	40014000 	.word	0x40014000
 8007bf4:	40014400 	.word	0x40014400
 8007bf8:	40014800 	.word	0x40014800
 8007bfc:	40015000 	.word	0x40015000

08007c00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a19      	ldr	r2, [pc, #100]	; (8007cbc <TIM_OC5_SetConfig+0xbc>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d013      	beq.n	8007c82 <TIM_OC5_SetConfig+0x82>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a18      	ldr	r2, [pc, #96]	; (8007cc0 <TIM_OC5_SetConfig+0xc0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d00f      	beq.n	8007c82 <TIM_OC5_SetConfig+0x82>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a17      	ldr	r2, [pc, #92]	; (8007cc4 <TIM_OC5_SetConfig+0xc4>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00b      	beq.n	8007c82 <TIM_OC5_SetConfig+0x82>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a16      	ldr	r2, [pc, #88]	; (8007cc8 <TIM_OC5_SetConfig+0xc8>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d007      	beq.n	8007c82 <TIM_OC5_SetConfig+0x82>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a15      	ldr	r2, [pc, #84]	; (8007ccc <TIM_OC5_SetConfig+0xcc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d003      	beq.n	8007c82 <TIM_OC5_SetConfig+0x82>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a14      	ldr	r2, [pc, #80]	; (8007cd0 <TIM_OC5_SetConfig+0xd0>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d109      	bne.n	8007c96 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	621a      	str	r2, [r3, #32]
}
 8007cb0:	bf00      	nop
 8007cb2:	371c      	adds	r7, #28
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40013400 	.word	0x40013400
 8007cc4:	40014000 	.word	0x40014000
 8007cc8:	40014400 	.word	0x40014400
 8007ccc:	40014800 	.word	0x40014800
 8007cd0:	40015000 	.word	0x40015000

08007cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	021b      	lsls	r3, r3, #8
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	051b      	lsls	r3, r3, #20
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <TIM_OC6_SetConfig+0xc0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d013      	beq.n	8007d58 <TIM_OC6_SetConfig+0x84>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a19      	ldr	r2, [pc, #100]	; (8007d98 <TIM_OC6_SetConfig+0xc4>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00f      	beq.n	8007d58 <TIM_OC6_SetConfig+0x84>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <TIM_OC6_SetConfig+0xc8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00b      	beq.n	8007d58 <TIM_OC6_SetConfig+0x84>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a17      	ldr	r2, [pc, #92]	; (8007da0 <TIM_OC6_SetConfig+0xcc>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d007      	beq.n	8007d58 <TIM_OC6_SetConfig+0x84>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a16      	ldr	r2, [pc, #88]	; (8007da4 <TIM_OC6_SetConfig+0xd0>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_OC6_SetConfig+0x84>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <TIM_OC6_SetConfig+0xd4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d109      	bne.n	8007d6c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	029b      	lsls	r3, r3, #10
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	621a      	str	r2, [r3, #32]
}
 8007d86:	bf00      	nop
 8007d88:	371c      	adds	r7, #28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	40012c00 	.word	0x40012c00
 8007d98:	40013400 	.word	0x40013400
 8007d9c:	40014000 	.word	0x40014000
 8007da0:	40014400 	.word	0x40014400
 8007da4:	40014800 	.word	0x40014800
 8007da8:	40015000 	.word	0x40015000

08007dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e06d      	b.n	8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a30      	ldr	r2, [pc, #192]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d009      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a2f      	ldr	r2, [pc, #188]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a2d      	ldr	r2, [pc, #180]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d108      	bne.n	8007e14 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a1e      	ldr	r2, [pc, #120]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d01d      	beq.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e40:	d018      	beq.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d013      	beq.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a1a      	ldr	r2, [pc, #104]	; (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d00e      	beq.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d009      	beq.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a16      	ldr	r2, [pc, #88]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d004      	beq.n	8007e74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a11      	ldr	r2, [pc, #68]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d10c      	bne.n	8007e8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40013400 	.word	0x40013400
 8007eb4:	40015000 	.word	0x40015000
 8007eb8:	40000400 	.word	0x40000400
 8007ebc:	40000800 	.word	0x40000800
 8007ec0:	40014000 	.word	0x40014000

08007ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e040      	b.n	8007f58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d106      	bne.n	8007eec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7fb f940 	bl	800316c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2224      	movs	r2, #36	; 0x24
 8007ef0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 0201 	bic.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f8b6 	bl	8008074 <UART_SetConfig>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e022      	b.n	8007f58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fa7e 	bl	800841c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689a      	ldr	r2, [r3, #8]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0201 	orr.w	r2, r2, #1
 8007f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fb05 	bl	8008560 <UART_CheckIdleState>
 8007f56:	4603      	mov	r3, r0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b08a      	sub	sp, #40	; 0x28
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d178      	bne.n	800806a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <HAL_UART_Transmit+0x24>
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e071      	b.n	800806c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2221      	movs	r2, #33	; 0x21
 8007f94:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f96:	f7fb fad7 	bl	8003548 <HAL_GetTick>
 8007f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	88fa      	ldrh	r2, [r7, #6]
 8007fa0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb4:	d108      	bne.n	8007fc8 <HAL_UART_Transmit+0x68>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d104      	bne.n	8007fc8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	61bb      	str	r3, [r7, #24]
 8007fc6:	e003      	b.n	8007fd0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fd0:	e030      	b.n	8008034 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2180      	movs	r1, #128	; 0x80
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 fb67 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2220      	movs	r2, #32
 8007fec:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	e03c      	b.n	800806c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10b      	bne.n	8008010 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	881a      	ldrh	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008004:	b292      	uxth	r2, r2
 8008006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	3302      	adds	r3, #2
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	e008      	b.n	8008022 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	781a      	ldrb	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	b292      	uxth	r2, r2
 800801a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	3301      	adds	r3, #1
 8008020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008028:	b29b      	uxth	r3, r3
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800803a:	b29b      	uxth	r3, r3
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1c8      	bne.n	8007fd2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	9300      	str	r3, [sp, #0]
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	2200      	movs	r2, #0
 8008048:	2140      	movs	r1, #64	; 0x40
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 fb30 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d004      	beq.n	8008060 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e005      	b.n	800806c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2220      	movs	r2, #32
 8008064:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008066:	2300      	movs	r3, #0
 8008068:	e000      	b.n	800806c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800806a:	2302      	movs	r3, #2
  }
}
 800806c:	4618      	mov	r0, r3
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689a      	ldr	r2, [r3, #8]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	431a      	orrs	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	4313      	orrs	r3, r2
 8008096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	4b92      	ldr	r3, [pc, #584]	; (80082e8 <UART_SetConfig+0x274>)
 80080a0:	4013      	ands	r3, r2
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6812      	ldr	r2, [r2, #0]
 80080a6:	6979      	ldr	r1, [r7, #20]
 80080a8:	430b      	orrs	r3, r1
 80080aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68da      	ldr	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	430a      	orrs	r2, r1
 80080c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a80      	ldr	r2, [pc, #512]	; (80082ec <UART_SetConfig+0x278>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d120      	bne.n	8008132 <UART_SetConfig+0xbe>
 80080f0:	4b7f      	ldr	r3, [pc, #508]	; (80082f0 <UART_SetConfig+0x27c>)
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	f003 0303 	and.w	r3, r3, #3
 80080f8:	2b03      	cmp	r3, #3
 80080fa:	d817      	bhi.n	800812c <UART_SetConfig+0xb8>
 80080fc:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <UART_SetConfig+0x90>)
 80080fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008102:	bf00      	nop
 8008104:	08008115 	.word	0x08008115
 8008108:	08008121 	.word	0x08008121
 800810c:	08008127 	.word	0x08008127
 8008110:	0800811b 	.word	0x0800811b
 8008114:	2301      	movs	r3, #1
 8008116:	77fb      	strb	r3, [r7, #31]
 8008118:	e0b5      	b.n	8008286 <UART_SetConfig+0x212>
 800811a:	2302      	movs	r3, #2
 800811c:	77fb      	strb	r3, [r7, #31]
 800811e:	e0b2      	b.n	8008286 <UART_SetConfig+0x212>
 8008120:	2304      	movs	r3, #4
 8008122:	77fb      	strb	r3, [r7, #31]
 8008124:	e0af      	b.n	8008286 <UART_SetConfig+0x212>
 8008126:	2308      	movs	r3, #8
 8008128:	77fb      	strb	r3, [r7, #31]
 800812a:	e0ac      	b.n	8008286 <UART_SetConfig+0x212>
 800812c:	2310      	movs	r3, #16
 800812e:	77fb      	strb	r3, [r7, #31]
 8008130:	e0a9      	b.n	8008286 <UART_SetConfig+0x212>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a6f      	ldr	r2, [pc, #444]	; (80082f4 <UART_SetConfig+0x280>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d124      	bne.n	8008186 <UART_SetConfig+0x112>
 800813c:	4b6c      	ldr	r3, [pc, #432]	; (80082f0 <UART_SetConfig+0x27c>)
 800813e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008148:	d011      	beq.n	800816e <UART_SetConfig+0xfa>
 800814a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800814e:	d817      	bhi.n	8008180 <UART_SetConfig+0x10c>
 8008150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008154:	d011      	beq.n	800817a <UART_SetConfig+0x106>
 8008156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800815a:	d811      	bhi.n	8008180 <UART_SetConfig+0x10c>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <UART_SetConfig+0xf4>
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d006      	beq.n	8008174 <UART_SetConfig+0x100>
 8008166:	e00b      	b.n	8008180 <UART_SetConfig+0x10c>
 8008168:	2300      	movs	r3, #0
 800816a:	77fb      	strb	r3, [r7, #31]
 800816c:	e08b      	b.n	8008286 <UART_SetConfig+0x212>
 800816e:	2302      	movs	r3, #2
 8008170:	77fb      	strb	r3, [r7, #31]
 8008172:	e088      	b.n	8008286 <UART_SetConfig+0x212>
 8008174:	2304      	movs	r3, #4
 8008176:	77fb      	strb	r3, [r7, #31]
 8008178:	e085      	b.n	8008286 <UART_SetConfig+0x212>
 800817a:	2308      	movs	r3, #8
 800817c:	77fb      	strb	r3, [r7, #31]
 800817e:	e082      	b.n	8008286 <UART_SetConfig+0x212>
 8008180:	2310      	movs	r3, #16
 8008182:	77fb      	strb	r3, [r7, #31]
 8008184:	e07f      	b.n	8008286 <UART_SetConfig+0x212>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a5b      	ldr	r2, [pc, #364]	; (80082f8 <UART_SetConfig+0x284>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d124      	bne.n	80081da <UART_SetConfig+0x166>
 8008190:	4b57      	ldr	r3, [pc, #348]	; (80082f0 <UART_SetConfig+0x27c>)
 8008192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008194:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008198:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800819c:	d011      	beq.n	80081c2 <UART_SetConfig+0x14e>
 800819e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80081a2:	d817      	bhi.n	80081d4 <UART_SetConfig+0x160>
 80081a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081a8:	d011      	beq.n	80081ce <UART_SetConfig+0x15a>
 80081aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081ae:	d811      	bhi.n	80081d4 <UART_SetConfig+0x160>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <UART_SetConfig+0x148>
 80081b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081b8:	d006      	beq.n	80081c8 <UART_SetConfig+0x154>
 80081ba:	e00b      	b.n	80081d4 <UART_SetConfig+0x160>
 80081bc:	2300      	movs	r3, #0
 80081be:	77fb      	strb	r3, [r7, #31]
 80081c0:	e061      	b.n	8008286 <UART_SetConfig+0x212>
 80081c2:	2302      	movs	r3, #2
 80081c4:	77fb      	strb	r3, [r7, #31]
 80081c6:	e05e      	b.n	8008286 <UART_SetConfig+0x212>
 80081c8:	2304      	movs	r3, #4
 80081ca:	77fb      	strb	r3, [r7, #31]
 80081cc:	e05b      	b.n	8008286 <UART_SetConfig+0x212>
 80081ce:	2308      	movs	r3, #8
 80081d0:	77fb      	strb	r3, [r7, #31]
 80081d2:	e058      	b.n	8008286 <UART_SetConfig+0x212>
 80081d4:	2310      	movs	r3, #16
 80081d6:	77fb      	strb	r3, [r7, #31]
 80081d8:	e055      	b.n	8008286 <UART_SetConfig+0x212>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a47      	ldr	r2, [pc, #284]	; (80082fc <UART_SetConfig+0x288>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d124      	bne.n	800822e <UART_SetConfig+0x1ba>
 80081e4:	4b42      	ldr	r3, [pc, #264]	; (80082f0 <UART_SetConfig+0x27c>)
 80081e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80081ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081f0:	d011      	beq.n	8008216 <UART_SetConfig+0x1a2>
 80081f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081f6:	d817      	bhi.n	8008228 <UART_SetConfig+0x1b4>
 80081f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081fc:	d011      	beq.n	8008222 <UART_SetConfig+0x1ae>
 80081fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008202:	d811      	bhi.n	8008228 <UART_SetConfig+0x1b4>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <UART_SetConfig+0x19c>
 8008208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800820c:	d006      	beq.n	800821c <UART_SetConfig+0x1a8>
 800820e:	e00b      	b.n	8008228 <UART_SetConfig+0x1b4>
 8008210:	2300      	movs	r3, #0
 8008212:	77fb      	strb	r3, [r7, #31]
 8008214:	e037      	b.n	8008286 <UART_SetConfig+0x212>
 8008216:	2302      	movs	r3, #2
 8008218:	77fb      	strb	r3, [r7, #31]
 800821a:	e034      	b.n	8008286 <UART_SetConfig+0x212>
 800821c:	2304      	movs	r3, #4
 800821e:	77fb      	strb	r3, [r7, #31]
 8008220:	e031      	b.n	8008286 <UART_SetConfig+0x212>
 8008222:	2308      	movs	r3, #8
 8008224:	77fb      	strb	r3, [r7, #31]
 8008226:	e02e      	b.n	8008286 <UART_SetConfig+0x212>
 8008228:	2310      	movs	r3, #16
 800822a:	77fb      	strb	r3, [r7, #31]
 800822c:	e02b      	b.n	8008286 <UART_SetConfig+0x212>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a33      	ldr	r2, [pc, #204]	; (8008300 <UART_SetConfig+0x28c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d124      	bne.n	8008282 <UART_SetConfig+0x20e>
 8008238:	4b2d      	ldr	r3, [pc, #180]	; (80082f0 <UART_SetConfig+0x27c>)
 800823a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008240:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008244:	d011      	beq.n	800826a <UART_SetConfig+0x1f6>
 8008246:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800824a:	d817      	bhi.n	800827c <UART_SetConfig+0x208>
 800824c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008250:	d011      	beq.n	8008276 <UART_SetConfig+0x202>
 8008252:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008256:	d811      	bhi.n	800827c <UART_SetConfig+0x208>
 8008258:	2b00      	cmp	r3, #0
 800825a:	d003      	beq.n	8008264 <UART_SetConfig+0x1f0>
 800825c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008260:	d006      	beq.n	8008270 <UART_SetConfig+0x1fc>
 8008262:	e00b      	b.n	800827c <UART_SetConfig+0x208>
 8008264:	2300      	movs	r3, #0
 8008266:	77fb      	strb	r3, [r7, #31]
 8008268:	e00d      	b.n	8008286 <UART_SetConfig+0x212>
 800826a:	2302      	movs	r3, #2
 800826c:	77fb      	strb	r3, [r7, #31]
 800826e:	e00a      	b.n	8008286 <UART_SetConfig+0x212>
 8008270:	2304      	movs	r3, #4
 8008272:	77fb      	strb	r3, [r7, #31]
 8008274:	e007      	b.n	8008286 <UART_SetConfig+0x212>
 8008276:	2308      	movs	r3, #8
 8008278:	77fb      	strb	r3, [r7, #31]
 800827a:	e004      	b.n	8008286 <UART_SetConfig+0x212>
 800827c:	2310      	movs	r3, #16
 800827e:	77fb      	strb	r3, [r7, #31]
 8008280:	e001      	b.n	8008286 <UART_SetConfig+0x212>
 8008282:	2310      	movs	r3, #16
 8008284:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800828e:	d16b      	bne.n	8008368 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008290:	7ffb      	ldrb	r3, [r7, #31]
 8008292:	2b08      	cmp	r3, #8
 8008294:	d838      	bhi.n	8008308 <UART_SetConfig+0x294>
 8008296:	a201      	add	r2, pc, #4	; (adr r2, 800829c <UART_SetConfig+0x228>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	080082c1 	.word	0x080082c1
 80082a0:	080082c9 	.word	0x080082c9
 80082a4:	080082d1 	.word	0x080082d1
 80082a8:	08008309 	.word	0x08008309
 80082ac:	080082d7 	.word	0x080082d7
 80082b0:	08008309 	.word	0x08008309
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008309 	.word	0x08008309
 80082bc:	080082df 	.word	0x080082df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082c0:	f7fe fe02 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 80082c4:	61b8      	str	r0, [r7, #24]
        break;
 80082c6:	e024      	b.n	8008312 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c8:	f7fe fe20 	bl	8006f0c <HAL_RCC_GetPCLK2Freq>
 80082cc:	61b8      	str	r0, [r7, #24]
        break;
 80082ce:	e020      	b.n	8008312 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082d0:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <UART_SetConfig+0x290>)
 80082d2:	61bb      	str	r3, [r7, #24]
        break;
 80082d4:	e01d      	b.n	8008312 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082d6:	f7fe fd81 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 80082da:	61b8      	str	r0, [r7, #24]
        break;
 80082dc:	e019      	b.n	8008312 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082e2:	61bb      	str	r3, [r7, #24]
        break;
 80082e4:	e015      	b.n	8008312 <UART_SetConfig+0x29e>
 80082e6:	bf00      	nop
 80082e8:	efff69f3 	.word	0xefff69f3
 80082ec:	40013800 	.word	0x40013800
 80082f0:	40021000 	.word	0x40021000
 80082f4:	40004400 	.word	0x40004400
 80082f8:	40004800 	.word	0x40004800
 80082fc:	40004c00 	.word	0x40004c00
 8008300:	40005000 	.word	0x40005000
 8008304:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	77bb      	strb	r3, [r7, #30]
        break;
 8008310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d073      	beq.n	8008400 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	005a      	lsls	r2, r3, #1
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	085b      	lsrs	r3, r3, #1
 8008322:	441a      	add	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	fbb2 f3f3 	udiv	r3, r2, r3
 800832c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	2b0f      	cmp	r3, #15
 8008332:	d916      	bls.n	8008362 <UART_SetConfig+0x2ee>
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833a:	d212      	bcs.n	8008362 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	b29b      	uxth	r3, r3
 8008340:	f023 030f 	bic.w	r3, r3, #15
 8008344:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	085b      	lsrs	r3, r3, #1
 800834a:	b29b      	uxth	r3, r3
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	b29a      	uxth	r2, r3
 8008352:	89fb      	ldrh	r3, [r7, #14]
 8008354:	4313      	orrs	r3, r2
 8008356:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	89fa      	ldrh	r2, [r7, #14]
 800835e:	60da      	str	r2, [r3, #12]
 8008360:	e04e      	b.n	8008400 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	77bb      	strb	r3, [r7, #30]
 8008366:	e04b      	b.n	8008400 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008368:	7ffb      	ldrb	r3, [r7, #31]
 800836a:	2b08      	cmp	r3, #8
 800836c:	d827      	bhi.n	80083be <UART_SetConfig+0x34a>
 800836e:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <UART_SetConfig+0x300>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	08008399 	.word	0x08008399
 8008378:	080083a1 	.word	0x080083a1
 800837c:	080083a9 	.word	0x080083a9
 8008380:	080083bf 	.word	0x080083bf
 8008384:	080083af 	.word	0x080083af
 8008388:	080083bf 	.word	0x080083bf
 800838c:	080083bf 	.word	0x080083bf
 8008390:	080083bf 	.word	0x080083bf
 8008394:	080083b7 	.word	0x080083b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008398:	f7fe fd96 	bl	8006ec8 <HAL_RCC_GetPCLK1Freq>
 800839c:	61b8      	str	r0, [r7, #24]
        break;
 800839e:	e013      	b.n	80083c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a0:	f7fe fdb4 	bl	8006f0c <HAL_RCC_GetPCLK2Freq>
 80083a4:	61b8      	str	r0, [r7, #24]
        break;
 80083a6:	e00f      	b.n	80083c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083a8:	4b1b      	ldr	r3, [pc, #108]	; (8008418 <UART_SetConfig+0x3a4>)
 80083aa:	61bb      	str	r3, [r7, #24]
        break;
 80083ac:	e00c      	b.n	80083c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ae:	f7fe fd15 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 80083b2:	61b8      	str	r0, [r7, #24]
        break;
 80083b4:	e008      	b.n	80083c8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083ba:	61bb      	str	r3, [r7, #24]
        break;
 80083bc:	e004      	b.n	80083c8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80083be:	2300      	movs	r3, #0
 80083c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	77bb      	strb	r3, [r7, #30]
        break;
 80083c6:	bf00      	nop
    }

    if (pclk != 0U)
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d018      	beq.n	8008400 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	085a      	lsrs	r2, r3, #1
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	441a      	add	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	2b0f      	cmp	r3, #15
 80083e6:	d909      	bls.n	80083fc <UART_SetConfig+0x388>
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ee:	d205      	bcs.n	80083fc <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	60da      	str	r2, [r3, #12]
 80083fa:	e001      	b.n	8008400 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800840c:	7fbb      	ldrb	r3, [r7, #30]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3720      	adds	r7, #32
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	007a1200 	.word	0x007a1200

0800841c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	f003 0301 	and.w	r3, r3, #1
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00a      	beq.n	8008446 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00a      	beq.n	8008468 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	f003 0310 	and.w	r3, r3, #16
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01a      	beq.n	8008532 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800851a:	d10a      	bne.n	8008532 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	605a      	str	r2, [r3, #4]
  }
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b098      	sub	sp, #96	; 0x60
 8008564:	af02      	add	r7, sp, #8
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008570:	f7fa ffea 	bl	8003548 <HAL_GetTick>
 8008574:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b08      	cmp	r3, #8
 8008582:	d12e      	bne.n	80085e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008584:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008588:	9300      	str	r3, [sp, #0]
 800858a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800858c:	2200      	movs	r2, #0
 800858e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f88c 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d021      	beq.n	80085e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	e853 3f00 	ldrex	r3, [r3]
 80085aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085b2:	653b      	str	r3, [r7, #80]	; 0x50
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	461a      	mov	r2, r3
 80085ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085bc:	647b      	str	r3, [r7, #68]	; 0x44
 80085be:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c4:	e841 2300 	strex	r3, r2, [r1]
 80085c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e6      	bne.n	800859e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2220      	movs	r2, #32
 80085d4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e062      	b.n	80086a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d149      	bne.n	8008684 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085f8:	2200      	movs	r2, #0
 80085fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f856 	bl	80086b0 <UART_WaitOnFlagUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d03c      	beq.n	8008684 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	e853 3f00 	ldrex	r3, [r3]
 8008616:	623b      	str	r3, [r7, #32]
   return(result);
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800861e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008628:	633b      	str	r3, [r7, #48]	; 0x30
 800862a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800862e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008630:	e841 2300 	strex	r3, r2, [r1]
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1e6      	bne.n	800860a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3308      	adds	r3, #8
 8008642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	60fb      	str	r3, [r7, #12]
   return(result);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	64bb      	str	r3, [r7, #72]	; 0x48
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3308      	adds	r3, #8
 800865a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800865c:	61fa      	str	r2, [r7, #28]
 800865e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	69b9      	ldr	r1, [r7, #24]
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	617b      	str	r3, [r7, #20]
   return(result);
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2220      	movs	r2, #32
 8008674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e011      	b.n	80086a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3758      	adds	r7, #88	; 0x58
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c0:	e049      	b.n	8008756 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d045      	beq.n	8008756 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ca:	f7fa ff3d 	bl	8003548 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d302      	bcc.n	80086e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e048      	b.n	8008776 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d031      	beq.n	8008756 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	f003 0308 	and.w	r3, r3, #8
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d110      	bne.n	8008722 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2208      	movs	r2, #8
 8008706:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f838 	bl	800877e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2208      	movs	r2, #8
 8008712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e029      	b.n	8008776 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800872c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008730:	d111      	bne.n	8008756 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800873a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800873c:	68f8      	ldr	r0, [r7, #12]
 800873e:	f000 f81e 	bl	800877e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2220      	movs	r2, #32
 8008746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e00f      	b.n	8008776 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	69da      	ldr	r2, [r3, #28]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4013      	ands	r3, r2
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	429a      	cmp	r2, r3
 8008764:	bf0c      	ite	eq
 8008766:	2301      	moveq	r3, #1
 8008768:	2300      	movne	r3, #0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	429a      	cmp	r2, r3
 8008772:	d0a6      	beq.n	80086c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800877e:	b480      	push	{r7}
 8008780:	b095      	sub	sp, #84	; 0x54
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878e:	e853 3f00 	ldrex	r3, [r3]
 8008792:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800879a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a4:	643b      	str	r3, [r7, #64]	; 0x40
 80087a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087ac:	e841 2300 	strex	r3, r2, [r1]
 80087b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1e6      	bne.n	8008786 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3308      	adds	r3, #8
 80087be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f023 0301 	bic.w	r3, r3, #1
 80087ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087e0:	e841 2300 	strex	r3, r2, [r1]
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e5      	bne.n	80087b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d118      	bne.n	8008826 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	60bb      	str	r3, [r7, #8]
   return(result);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f023 0310 	bic.w	r3, r3, #16
 8008808:	647b      	str	r3, [r7, #68]	; 0x44
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008812:	61bb      	str	r3, [r7, #24]
 8008814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6979      	ldr	r1, [r7, #20]
 8008818:	69ba      	ldr	r2, [r7, #24]
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	613b      	str	r3, [r7, #16]
   return(result);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e6      	bne.n	80087f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	669a      	str	r2, [r3, #104]	; 0x68
}
 800883a:	bf00      	nop
 800883c:	3754      	adds	r7, #84	; 0x54
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
	...

08008848 <_ZN4blib6ButtonC1Ev>:
#include "Button.h"
#include "Monitor.h"

namespace blib
{
    Button::Button()
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4618      	mov	r0, r3
 8008854:	f000 f850 	bl	80088f8 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 8008858:	4a03      	ldr	r2, [pc, #12]	; (8008868 <_ZN4blib6ButtonC1Ev+0x20>)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
    {

    }
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}
 8008868:	0800cc24 	.word	0x0800cc24

0800886c <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	4a05      	ldr	r2, [pc, #20]	; (800888c <_ZN4blib6ButtonD1Ev+0x20>)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4618      	mov	r0, r3
 800887e:	f000 f84b 	bl	8008918 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
    {

    }
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4618      	mov	r0, r3
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	0800cc24 	.word	0x0800cc24

08008890 <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
    }
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff ffe7 	bl	800886c <_ZN4blib6ButtonD1Ev>
 800889e:	2108      	movs	r1, #8
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fb33 	bl	8008f0c <_ZdlPvj>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	605a      	str	r2, [r3, #4]
    }
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
        return mLatestPressedButton;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
    }
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
    }
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
                {
 8008900:	4a04      	ldr	r2, [pc, #16]	; (8008914 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	601a      	str	r2, [r3, #0]
                }
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4618      	mov	r0, r3
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	0800cc34 	.word	0x0800cc34

08008918 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
                }
 8008920:	4a04      	ldr	r2, [pc, #16]	; (8008934 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4618      	mov	r0, r3
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr
 8008934:	0800cc34 	.word	0x0800cc34

08008938 <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
                }
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff ffe9 	bl	8008918 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 8008946:	2104      	movs	r1, #4
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 fadf 	bl	8008f0c <_ZdlPvj>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>:
#include "Lcd.h"

namespace blib
{

    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	70fb      	strb	r3, [r7, #3]
            address)
 8008966:	4a0a      	ldr	r2, [pc, #40]	; (8008990 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh+0x38>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	601a      	str	r2, [r3, #0]
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	605a      	str	r2, [r3, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	609a      	str	r2, [r3, #8]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	731a      	strb	r2, [r3, #12]
    {
        init();
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 f9e0 	bl	8008d44 <_ZN4blib3Lcd4initEv>
    }
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	0800cc44 	.word	0x0800cc44

08008994 <_ZN4blib3LcdD1Ev>:
    Lcd::~Lcd()
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	4a04      	ldr	r2, [pc, #16]	; (80089b0 <_ZN4blib3LcdD1Ev+0x1c>)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	601a      	str	r2, [r3, #0]
    {

    }
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	0800cc44 	.word	0x0800cc44

080089b4 <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
    }
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff ffe9 	bl	8008994 <_ZN4blib3LcdD1Ev>
 80089c2:	2114      	movs	r1, #20
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 faa1 	bl	8008f0c <_ZdlPvj>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4618      	mov	r0, r3
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af02      	add	r7, sp, #8
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	2300      	movs	r3, #0
 80089e6:	73bb      	strb	r3, [r7, #14]
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 80089e8:	78fb      	ldrb	r3, [r7, #3]
 80089ea:	f023 030f 	bic.w	r3, r3, #15
 80089ee:	73fb      	strb	r3, [r7, #15]
        dataLow = ((command << 4) & 0xF0);
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	73bb      	strb	r3, [r7, #14]
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	f043 030c 	orr.w	r3, r3, #12
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	723b      	strb	r3, [r7, #8]
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 8008a00:	7bfb      	ldrb	r3, [r7, #15]
 8008a02:	f043 0308 	orr.w	r3, r3, #8
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	727b      	strb	r3, [r7, #9]
        data[2] = dataLow | 0x0C;
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	f043 030c 	orr.w	r3, r3, #12
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	72bb      	strb	r3, [r7, #10]
        data[3] = dataLow | 0x08;
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
 8008a16:	f043 0308 	orr.w	r3, r3, #8
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6898      	ldr	r0, [r3, #8]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	7b1b      	ldrb	r3, [r3, #12]
 8008a26:	b299      	uxth	r1, r3
 8008a28:	f107 0208 	add.w	r2, r7, #8
 8008a2c:	2364      	movs	r3, #100	; 0x64
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	2304      	movs	r3, #4
 8008a32:	f7fc fc67 	bl	8005304 <HAL_I2C_Master_Transmit>
    }
 8008a36:	bf00      	nop
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b086      	sub	sp, #24
 8008a42:	af02      	add	r7, sp, #8
 8008a44:	6078      	str	r0, [r7, #4]
 8008a46:	460b      	mov	r3, r1
 8008a48:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73bb      	strb	r3, [r7, #14]
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 8008a52:	78fb      	ldrb	r3, [r7, #3]
 8008a54:	f023 030f 	bic.w	r3, r3, #15
 8008a58:	73fb      	strb	r3, [r7, #15]
        dataLow = ((data << 4) & 0xF0);
 8008a5a:	78fb      	ldrb	r3, [r7, #3]
 8008a5c:	011b      	lsls	r3, r3, #4
 8008a5e:	73bb      	strb	r3, [r7, #14]
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	f043 030d 	orr.w	r3, r3, #13
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	723b      	strb	r3, [r7, #8]
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	f043 0309 	orr.w	r3, r3, #9
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	727b      	strb	r3, [r7, #9]
        dataBuf[2] = dataLow | 0x0D;
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	f043 030d 	orr.w	r3, r3, #13
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	72bb      	strb	r3, [r7, #10]
        dataBuf[3] = dataLow | 0x09;
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
 8008a80:	f043 0309 	orr.w	r3, r3, #9
 8008a84:	b2db      	uxtb	r3, r3
 8008a86:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6898      	ldr	r0, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	7b1b      	ldrb	r3, [r3, #12]
 8008a90:	b299      	uxth	r1, r3
 8008a92:	f107 0208 	add.w	r2, r7, #8
 8008a96:	2364      	movs	r3, #100	; 0x64
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	2304      	movs	r3, #4
 8008a9c:	f7fc fc32 	bl	8005304 <HAL_I2C_Master_Transmit>
    }
 8008aa0:	bf00      	nop
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <_ZN4blib6ischarEPKc>:
    {

    }

    char ischar(const char *string)
    {
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
        return (string != nullptr) ? *(string) : ' ';
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <_ZN4blib6ischarEPKc+0x14>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	e000      	b.n	8008abe <_ZN4blib6ischarEPKc+0x16>
 8008abc:	2320      	movs	r3, #32
    }
 8008abe:	4618      	mov	r0, r3
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
	...

08008acc <_ZN4blib3Lcd11displayLineEhhPKc>:
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 8008acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ace:	b0ab      	sub	sp, #172	; 0xac
 8008ad0:	af14      	add	r7, sp, #80	; 0x50
 8008ad2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8008adc:	4613      	mov	r3, r2
 8008ade:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        LOGI("|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|", ischar(string),
 8008ae2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008ae4:	f7ff ffe0 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	643b      	str	r3, [r7, #64]	; 0x40
 8008aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aee:	3301      	adds	r3, #1
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7ff ffd9 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008af6:	4603      	mov	r3, r0
 8008af8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008afc:	3302      	adds	r3, #2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff ffd2 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b04:	4603      	mov	r3, r0
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b0a:	3303      	adds	r3, #3
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff ffcb 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b12:	4603      	mov	r3, r0
 8008b14:	637b      	str	r3, [r7, #52]	; 0x34
 8008b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b18:	3304      	adds	r3, #4
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff ffc4 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b20:	4603      	mov	r3, r0
 8008b22:	633b      	str	r3, [r7, #48]	; 0x30
 8008b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b26:	3305      	adds	r3, #5
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff ffbd 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b34:	3306      	adds	r3, #6
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff ffb6 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b42:	3307      	adds	r3, #7
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff ffaf 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b50:	3308      	adds	r3, #8
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff ffa8 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	623b      	str	r3, [r7, #32]
 8008b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b5e:	3309      	adds	r3, #9
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff ffa1 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b66:	4603      	mov	r3, r0
 8008b68:	61fb      	str	r3, [r7, #28]
 8008b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b6c:	330a      	adds	r3, #10
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7ff ff9a 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b74:	4603      	mov	r3, r0
 8008b76:	61bb      	str	r3, [r7, #24]
 8008b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b7a:	330b      	adds	r3, #11
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff ff93 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b82:	4603      	mov	r3, r0
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b88:	330c      	adds	r3, #12
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7ff ff8c 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b90:	4603      	mov	r3, r0
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b96:	330d      	adds	r3, #13
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff ff85 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba4:	330e      	adds	r3, #14
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7ff ff7e 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008bac:	4603      	mov	r3, r0
 8008bae:	60bb      	str	r3, [r7, #8]
 8008bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb2:	330f      	adds	r3, #15
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff ff77 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	607b      	str	r3, [r7, #4]
 8008bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc0:	3310      	adds	r3, #16
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff ff70 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461e      	mov	r6, r3
 8008bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bce:	3311      	adds	r3, #17
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff ff69 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	461d      	mov	r5, r3
 8008bda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bdc:	3312      	adds	r3, #18
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff ff62 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461c      	mov	r4, r3
 8008be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bea:	3313      	adds	r3, #19
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff ff5b 	bl	8008aa8 <_ZN4blib6ischarEPKc>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bf6:	9412      	str	r4, [sp, #72]	; 0x48
 8008bf8:	9511      	str	r5, [sp, #68]	; 0x44
 8008bfa:	9610      	str	r6, [sp, #64]	; 0x40
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	920e      	str	r2, [sp, #56]	; 0x38
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	920d      	str	r2, [sp, #52]	; 0x34
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	920c      	str	r2, [sp, #48]	; 0x30
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c10:	69ba      	ldr	r2, [r7, #24]
 8008c12:	920a      	str	r2, [sp, #40]	; 0x28
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	9209      	str	r2, [sp, #36]	; 0x24
 8008c18:	6a3a      	ldr	r2, [r7, #32]
 8008c1a:	9208      	str	r2, [sp, #32]
 8008c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1e:	9207      	str	r2, [sp, #28]
 8008c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c22:	9206      	str	r2, [sp, #24]
 8008c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c26:	9205      	str	r2, [sp, #20]
 8008c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2a:	9204      	str	r2, [sp, #16]
 8008c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c2e:	9203      	str	r2, [sp, #12]
 8008c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c32:	9202      	str	r2, [sp, #8]
 8008c34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c36:	9201      	str	r2, [sp, #4]
 8008c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	4b31      	ldr	r3, [pc, #196]	; (8008d04 <_ZN4blib3Lcd11displayLineEhhPKc+0x238>)
 8008c3e:	225d      	movs	r2, #93	; 0x5d
 8008c40:	4931      	ldr	r1, [pc, #196]	; (8008d08 <_ZN4blib3Lcd11displayLineEhhPKc+0x23c>)
 8008c42:	4832      	ldr	r0, [pc, #200]	; (8008d0c <_ZN4blib3Lcd11displayLineEhhPKc+0x240>)
 8008c44:	f000 f8e0 	bl	8008e08 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_>
                ischar(string + 5), ischar(string + 6), ischar(string + 7), ischar(string + 8),
                ischar(string + 9), ischar(string + 10), ischar(string + 11), ischar(string + 12),
                ischar(string + 13), ischar(string + 14), ischar(string + 15), ischar(string + 16),
                ischar(string + 17), ischar(string + 18), ischar(string + 19));

        uint8_t command = 0;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        switch (mLcdType)
 8008c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d03c      	beq.n	8008cd0 <_ZN4blib3Lcd11displayLineEhhPKc+0x204>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d000      	beq.n	8008c5c <_ZN4blib3Lcd11displayLineEhhPKc+0x190>
                    default:
                        break;
                }
                break;
            default:
                break;
 8008c5a:	e03a      	b.n	8008cd2 <_ZN4blib3Lcd11displayLineEhhPKc+0x206>
                switch (row)
 8008c5c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008c60:	2b03      	cmp	r3, #3
 8008c62:	d833      	bhi.n	8008ccc <_ZN4blib3Lcd11displayLineEhhPKc+0x200>
 8008c64:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <_ZN4blib3Lcd11displayLineEhhPKc+0x1a0>)
 8008c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6a:	bf00      	nop
 8008c6c:	08008c7d 	.word	0x08008c7d
 8008c70:	08008c8b 	.word	0x08008c8b
 8008c74:	08008ca1 	.word	0x08008ca1
 8008c78:	08008cb7 	.word	0x08008cb7
                        command = 0x80 | (col + 0x00);
 8008c7c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008c88:	e021      	b.n	8008cce <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x40);
 8008c8a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c8e:	3340      	adds	r3, #64	; 0x40
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	b25b      	sxtb	r3, r3
 8008c94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c98:	b25b      	sxtb	r3, r3
 8008c9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008c9e:	e016      	b.n	8008cce <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x14);
 8008ca0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008ca4:	3314      	adds	r3, #20
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	b25b      	sxtb	r3, r3
 8008caa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cae:	b25b      	sxtb	r3, r3
 8008cb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008cb4:	e00b      	b.n	8008cce <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x54);
 8008cb6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008cba:	3354      	adds	r3, #84	; 0x54
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	b25b      	sxtb	r3, r3
 8008cc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cc4:	b25b      	sxtb	r3, r3
 8008cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008cca:	e000      	b.n	8008cce <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        break;
 8008ccc:	bf00      	nop
                break;
 8008cce:	e000      	b.n	8008cd2 <_ZN4blib3Lcd11displayLineEhhPKc+0x206>
                break;
 8008cd0:	bf00      	nop
        }

        sendCmd(command);
 8008cd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008cda:	f7ff fe7b 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 8008cde:	e008      	b.n	8008cf2 <_ZN4blib3Lcd11displayLineEhhPKc+0x226>
        {
            sendData(*string);
 8008ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008ce8:	f7ff fea9 	bl	8008a3e <_ZN4blib3Lcd8sendDataEh>
            string++;
 8008cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cee:	3301      	adds	r3, #1
 8008cf0:	647b      	str	r3, [r7, #68]	; 0x44
        while (*string)
 8008cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1f2      	bne.n	8008ce0 <_ZN4blib3Lcd11displayLineEhhPKc+0x214>
        }
    }
 8008cfa:	bf00      	nop
 8008cfc:	bf00      	nop
 8008cfe:	375c      	adds	r7, #92	; 0x5c
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d04:	0800caf8 	.word	0x0800caf8
 8008d08:	0800cb04 	.word	0x0800cb04
 8008d0c:	0800cb0c 	.word	0x0800cb0c

08008d10 <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
        sendCmd(0x00);
 8008d18:	2100      	movs	r1, #0
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff fe5a 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        for (uint8_t i = 0; i < 100; i++)
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
 8008d24:	e006      	b.n	8008d34 <_ZN4blib3Lcd12clearDisplayEv+0x24>
        {
            sendData(' ');
 8008d26:	2120      	movs	r1, #32
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff fe88 	bl	8008a3e <_ZN4blib3Lcd8sendDataEh>
        for (uint8_t i = 0; i < 100; i++)
 8008d2e:	7bfb      	ldrb	r3, [r7, #15]
 8008d30:	3301      	adds	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b63      	cmp	r3, #99	; 0x63
 8008d38:	d9f5      	bls.n	8008d26 <_ZN4blib3Lcd12clearDisplayEv+0x16>
        }
    }
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <_ZN4blib3Lcd4initEv>:
    void Lcd::init()
    {
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2206      	movs	r2, #6
 8008d50:	735a      	strb	r2, [r3, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2228      	movs	r2, #40	; 0x28
 8008d56:	73da      	strb	r2, [r3, #15]
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2208      	movs	r2, #8
 8008d5c:	739a      	strb	r2, [r3, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_BLACKLIGHT;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2208      	movs	r2, #8
 8008d62:	741a      	strb	r2, [r3, #16]

        HAL_Delay(50);
 8008d64:	2032      	movs	r0, #50	; 0x32
 8008d66:	f7fa fbfb 	bl	8003560 <HAL_Delay>
        sendCmd(0x30);
 8008d6a:	2130      	movs	r1, #48	; 0x30
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff fe31 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 8008d72:	2005      	movs	r0, #5
 8008d74:	f7fa fbf4 	bl	8003560 <HAL_Delay>
        sendCmd(0x30);
 8008d78:	2130      	movs	r1, #48	; 0x30
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff fe2a 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008d80:	2001      	movs	r0, #1
 8008d82:	f7fa fbed 	bl	8003560 <HAL_Delay>
        sendCmd(0x30);
 8008d86:	2130      	movs	r1, #48	; 0x30
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff fe23 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8008d8e:	200a      	movs	r0, #10
 8008d90:	f7fa fbe6 	bl	8003560 <HAL_Delay>
        sendCmd(0x20);
 8008d94:	2120      	movs	r1, #32
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fe1c 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8008d9c:	200a      	movs	r0, #10
 8008d9e:	f7fa fbdf 	bl	8003560 <HAL_Delay>

        sendCmd(mFunctionSet);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	7bdb      	ldrb	r3, [r3, #15]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff fe13 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008dae:	2001      	movs	r0, #1
 8008db0:	f7fa fbd6 	bl	8003560 <HAL_Delay>
        sendCmd(mDisplayControl);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	7b9b      	ldrb	r3, [r3, #14]
 8008db8:	4619      	mov	r1, r3
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fe0a 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f7fa fbcd 	bl	8003560 <HAL_Delay>
        sendCmd(0x01);    //clear display
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff fe03 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 8008dce:	2002      	movs	r0, #2
 8008dd0:	f7fa fbc6 	bl	8003560 <HAL_Delay>
        sendCmd(mEntryMode);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	7b5b      	ldrb	r3, [r3, #13]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7ff fdfa 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008de0:	2001      	movs	r0, #1
 8008de2:	f7fa fbbd 	bl	8003560 <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7b9b      	ldrb	r3, [r3, #14]
 8008dea:	f043 0304 	orr.w	r3, r3, #4
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fdee 	bl	80089d4 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008df8:	2001      	movs	r0, #1
 8008dfa:	f7fa fbb1 	bl	8003560 <HAL_Delay>
    }
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8008e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e0a:	b0a9      	sub	sp, #164	; 0xa4
 8008e0c:	af16      	add	r7, sp, #88	; 0x58
 8008e0e:	6478      	str	r0, [r7, #68]	; 0x44
 8008e10:	6439      	str	r1, [r7, #64]	; 0x40
 8008e12:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e14:	63bb      	str	r3, [r7, #56]	; 0x38
                print("[>]  ");
 8008e16:	483a      	ldr	r0, [pc, #232]	; (8008f00 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xf8>)
 8008e18:	f7f7 ff5e 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8008e1c:	f897 6060 	ldrb.w	r6, [r7, #96]	; 0x60
 8008e20:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
 8008e26:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8008e2a:	633a      	str	r2, [r7, #48]	; 0x30
 8008e2c:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8008e30:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008e32:	f897 0070 	ldrb.w	r0, [r7, #112]	; 0x70
 8008e36:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e38:	f897 4074 	ldrb.w	r4, [r7, #116]	; 0x74
 8008e3c:	627c      	str	r4, [r7, #36]	; 0x24
 8008e3e:	f897 5078 	ldrb.w	r5, [r7, #120]	; 0x78
 8008e42:	623d      	str	r5, [r7, #32]
 8008e44:	f897 c07c 	ldrb.w	ip, [r7, #124]	; 0x7c
 8008e48:	4663      	mov	r3, ip
 8008e4a:	61fb      	str	r3, [r7, #28]
 8008e4c:	f897 c080 	ldrb.w	ip, [r7, #128]	; 0x80
 8008e50:	4662      	mov	r2, ip
 8008e52:	61ba      	str	r2, [r7, #24]
 8008e54:	f897 c084 	ldrb.w	ip, [r7, #132]	; 0x84
 8008e58:	4661      	mov	r1, ip
 8008e5a:	6179      	str	r1, [r7, #20]
 8008e5c:	f897 c088 	ldrb.w	ip, [r7, #136]	; 0x88
 8008e60:	4660      	mov	r0, ip
 8008e62:	6138      	str	r0, [r7, #16]
 8008e64:	f897 c08c 	ldrb.w	ip, [r7, #140]	; 0x8c
 8008e68:	4664      	mov	r4, ip
 8008e6a:	60fc      	str	r4, [r7, #12]
 8008e6c:	f897 c090 	ldrb.w	ip, [r7, #144]	; 0x90
 8008e70:	4665      	mov	r5, ip
 8008e72:	60bd      	str	r5, [r7, #8]
 8008e74:	f897 c094 	ldrb.w	ip, [r7, #148]	; 0x94
 8008e78:	4663      	mov	r3, ip
 8008e7a:	607b      	str	r3, [r7, #4]
 8008e7c:	f897 5098 	ldrb.w	r5, [r7, #152]	; 0x98
 8008e80:	f897 409c 	ldrb.w	r4, [r7, #156]	; 0x9c
 8008e84:	f897 00a0 	ldrb.w	r0, [r7, #160]	; 0xa0
 8008e88:	f897 10a4 	ldrb.w	r1, [r7, #164]	; 0xa4
 8008e8c:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8008e90:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8008e94:	9315      	str	r3, [sp, #84]	; 0x54
 8008e96:	9214      	str	r2, [sp, #80]	; 0x50
 8008e98:	9113      	str	r1, [sp, #76]	; 0x4c
 8008e9a:	9012      	str	r0, [sp, #72]	; 0x48
 8008e9c:	9411      	str	r4, [sp, #68]	; 0x44
 8008e9e:	9510      	str	r5, [sp, #64]	; 0x40
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ea4:	68bd      	ldr	r5, [r7, #8]
 8008ea6:	950e      	str	r5, [sp, #56]	; 0x38
 8008ea8:	68fc      	ldr	r4, [r7, #12]
 8008eaa:	940d      	str	r4, [sp, #52]	; 0x34
 8008eac:	6938      	ldr	r0, [r7, #16]
 8008eae:	900c      	str	r0, [sp, #48]	; 0x30
 8008eb0:	6979      	ldr	r1, [r7, #20]
 8008eb2:	910b      	str	r1, [sp, #44]	; 0x2c
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	920a      	str	r2, [sp, #40]	; 0x28
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	9309      	str	r3, [sp, #36]	; 0x24
 8008ebc:	6a3d      	ldr	r5, [r7, #32]
 8008ebe:	9508      	str	r5, [sp, #32]
 8008ec0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008ec2:	9407      	str	r4, [sp, #28]
 8008ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ec6:	9006      	str	r0, [sp, #24]
 8008ec8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eca:	9105      	str	r1, [sp, #20]
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ece:	9204      	str	r2, [sp, #16]
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed2:	9303      	str	r3, [sp, #12]
 8008ed4:	9602      	str	r6, [sp, #8]
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	9301      	str	r3, [sp, #4]
 8008eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ee2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ee6:	4807      	ldr	r0, [pc, #28]	; (8008f04 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xfc>)
 8008ee8:	f000 fe1a 	bl	8009b20 <sniprintf>
                print(mBuffer);
 8008eec:	4805      	ldr	r0, [pc, #20]	; (8008f04 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xfc>)
 8008eee:	f7f7 fef3 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8008ef2:	4805      	ldr	r0, [pc, #20]	; (8008f08 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0x100>)
 8008ef4:	f7f7 fef0 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
            }
 8008ef8:	bf00      	nop
 8008efa:	374c      	adds	r7, #76	; 0x4c
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f00:	0800cb58 	.word	0x0800cb58
 8008f04:	200003e4 	.word	0x200003e4
 8008f08:	0800cb60 	.word	0x0800cb60

08008f0c <_ZdlPvj>:
 8008f0c:	f000 b811 	b.w	8008f32 <_ZdlPv>

08008f10 <_Znwj>:
 8008f10:	2801      	cmp	r0, #1
 8008f12:	bf38      	it	cc
 8008f14:	2001      	movcc	r0, #1
 8008f16:	b510      	push	{r4, lr}
 8008f18:	4604      	mov	r4, r0
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 f81c 	bl	8008f58 <malloc>
 8008f20:	b100      	cbz	r0, 8008f24 <_Znwj+0x14>
 8008f22:	bd10      	pop	{r4, pc}
 8008f24:	f000 f808 	bl	8008f38 <_ZSt15get_new_handlerv>
 8008f28:	b908      	cbnz	r0, 8008f2e <_Znwj+0x1e>
 8008f2a:	f000 f80d 	bl	8008f48 <abort>
 8008f2e:	4780      	blx	r0
 8008f30:	e7f3      	b.n	8008f1a <_Znwj+0xa>

08008f32 <_ZdlPv>:
 8008f32:	f000 b819 	b.w	8008f68 <free>
	...

08008f38 <_ZSt15get_new_handlerv>:
 8008f38:	4b02      	ldr	r3, [pc, #8]	; (8008f44 <_ZSt15get_new_handlerv+0xc>)
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	f3bf 8f5b 	dmb	ish
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	200007e4 	.word	0x200007e4

08008f48 <abort>:
 8008f48:	b508      	push	{r3, lr}
 8008f4a:	2006      	movs	r0, #6
 8008f4c:	f000 fe90 	bl	8009c70 <raise>
 8008f50:	2001      	movs	r0, #1
 8008f52:	f7fa f9b5 	bl	80032c0 <_exit>
	...

08008f58 <malloc>:
 8008f58:	4b02      	ldr	r3, [pc, #8]	; (8008f64 <malloc+0xc>)
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	6818      	ldr	r0, [r3, #0]
 8008f5e:	f000 b82b 	b.w	8008fb8 <_malloc_r>
 8008f62:	bf00      	nop
 8008f64:	20000070 	.word	0x20000070

08008f68 <free>:
 8008f68:	4b02      	ldr	r3, [pc, #8]	; (8008f74 <free+0xc>)
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	f001 bdad 	b.w	800aacc <_free_r>
 8008f72:	bf00      	nop
 8008f74:	20000070 	.word	0x20000070

08008f78 <sbrk_aligned>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	4e0e      	ldr	r6, [pc, #56]	; (8008fb4 <sbrk_aligned+0x3c>)
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	6831      	ldr	r1, [r6, #0]
 8008f80:	4605      	mov	r5, r0
 8008f82:	b911      	cbnz	r1, 8008f8a <sbrk_aligned+0x12>
 8008f84:	f000 fec8 	bl	8009d18 <_sbrk_r>
 8008f88:	6030      	str	r0, [r6, #0]
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f000 fec3 	bl	8009d18 <_sbrk_r>
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	d00a      	beq.n	8008fac <sbrk_aligned+0x34>
 8008f96:	1cc4      	adds	r4, r0, #3
 8008f98:	f024 0403 	bic.w	r4, r4, #3
 8008f9c:	42a0      	cmp	r0, r4
 8008f9e:	d007      	beq.n	8008fb0 <sbrk_aligned+0x38>
 8008fa0:	1a21      	subs	r1, r4, r0
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 feb8 	bl	8009d18 <_sbrk_r>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d101      	bne.n	8008fb0 <sbrk_aligned+0x38>
 8008fac:	f04f 34ff 	mov.w	r4, #4294967295
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	bd70      	pop	{r4, r5, r6, pc}
 8008fb4:	200007ec 	.word	0x200007ec

08008fb8 <_malloc_r>:
 8008fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fbc:	1ccd      	adds	r5, r1, #3
 8008fbe:	f025 0503 	bic.w	r5, r5, #3
 8008fc2:	3508      	adds	r5, #8
 8008fc4:	2d0c      	cmp	r5, #12
 8008fc6:	bf38      	it	cc
 8008fc8:	250c      	movcc	r5, #12
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	4607      	mov	r7, r0
 8008fce:	db01      	blt.n	8008fd4 <_malloc_r+0x1c>
 8008fd0:	42a9      	cmp	r1, r5
 8008fd2:	d905      	bls.n	8008fe0 <_malloc_r+0x28>
 8008fd4:	230c      	movs	r3, #12
 8008fd6:	603b      	str	r3, [r7, #0]
 8008fd8:	2600      	movs	r6, #0
 8008fda:	4630      	mov	r0, r6
 8008fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fe0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090b4 <_malloc_r+0xfc>
 8008fe4:	f000 f868 	bl	80090b8 <__malloc_lock>
 8008fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fec:	461c      	mov	r4, r3
 8008fee:	bb5c      	cbnz	r4, 8009048 <_malloc_r+0x90>
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	f7ff ffc0 	bl	8008f78 <sbrk_aligned>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	d155      	bne.n	80090aa <_malloc_r+0xf2>
 8008ffe:	f8d8 4000 	ldr.w	r4, [r8]
 8009002:	4626      	mov	r6, r4
 8009004:	2e00      	cmp	r6, #0
 8009006:	d145      	bne.n	8009094 <_malloc_r+0xdc>
 8009008:	2c00      	cmp	r4, #0
 800900a:	d048      	beq.n	800909e <_malloc_r+0xe6>
 800900c:	6823      	ldr	r3, [r4, #0]
 800900e:	4631      	mov	r1, r6
 8009010:	4638      	mov	r0, r7
 8009012:	eb04 0903 	add.w	r9, r4, r3
 8009016:	f000 fe7f 	bl	8009d18 <_sbrk_r>
 800901a:	4581      	cmp	r9, r0
 800901c:	d13f      	bne.n	800909e <_malloc_r+0xe6>
 800901e:	6821      	ldr	r1, [r4, #0]
 8009020:	1a6d      	subs	r5, r5, r1
 8009022:	4629      	mov	r1, r5
 8009024:	4638      	mov	r0, r7
 8009026:	f7ff ffa7 	bl	8008f78 <sbrk_aligned>
 800902a:	3001      	adds	r0, #1
 800902c:	d037      	beq.n	800909e <_malloc_r+0xe6>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	442b      	add	r3, r5
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	f8d8 3000 	ldr.w	r3, [r8]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d038      	beq.n	80090ae <_malloc_r+0xf6>
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	42a2      	cmp	r2, r4
 8009040:	d12b      	bne.n	800909a <_malloc_r+0xe2>
 8009042:	2200      	movs	r2, #0
 8009044:	605a      	str	r2, [r3, #4]
 8009046:	e00f      	b.n	8009068 <_malloc_r+0xb0>
 8009048:	6822      	ldr	r2, [r4, #0]
 800904a:	1b52      	subs	r2, r2, r5
 800904c:	d41f      	bmi.n	800908e <_malloc_r+0xd6>
 800904e:	2a0b      	cmp	r2, #11
 8009050:	d917      	bls.n	8009082 <_malloc_r+0xca>
 8009052:	1961      	adds	r1, r4, r5
 8009054:	42a3      	cmp	r3, r4
 8009056:	6025      	str	r5, [r4, #0]
 8009058:	bf18      	it	ne
 800905a:	6059      	strne	r1, [r3, #4]
 800905c:	6863      	ldr	r3, [r4, #4]
 800905e:	bf08      	it	eq
 8009060:	f8c8 1000 	streq.w	r1, [r8]
 8009064:	5162      	str	r2, [r4, r5]
 8009066:	604b      	str	r3, [r1, #4]
 8009068:	4638      	mov	r0, r7
 800906a:	f104 060b 	add.w	r6, r4, #11
 800906e:	f000 f829 	bl	80090c4 <__malloc_unlock>
 8009072:	f026 0607 	bic.w	r6, r6, #7
 8009076:	1d23      	adds	r3, r4, #4
 8009078:	1af2      	subs	r2, r6, r3
 800907a:	d0ae      	beq.n	8008fda <_malloc_r+0x22>
 800907c:	1b9b      	subs	r3, r3, r6
 800907e:	50a3      	str	r3, [r4, r2]
 8009080:	e7ab      	b.n	8008fda <_malloc_r+0x22>
 8009082:	42a3      	cmp	r3, r4
 8009084:	6862      	ldr	r2, [r4, #4]
 8009086:	d1dd      	bne.n	8009044 <_malloc_r+0x8c>
 8009088:	f8c8 2000 	str.w	r2, [r8]
 800908c:	e7ec      	b.n	8009068 <_malloc_r+0xb0>
 800908e:	4623      	mov	r3, r4
 8009090:	6864      	ldr	r4, [r4, #4]
 8009092:	e7ac      	b.n	8008fee <_malloc_r+0x36>
 8009094:	4634      	mov	r4, r6
 8009096:	6876      	ldr	r6, [r6, #4]
 8009098:	e7b4      	b.n	8009004 <_malloc_r+0x4c>
 800909a:	4613      	mov	r3, r2
 800909c:	e7cc      	b.n	8009038 <_malloc_r+0x80>
 800909e:	230c      	movs	r3, #12
 80090a0:	603b      	str	r3, [r7, #0]
 80090a2:	4638      	mov	r0, r7
 80090a4:	f000 f80e 	bl	80090c4 <__malloc_unlock>
 80090a8:	e797      	b.n	8008fda <_malloc_r+0x22>
 80090aa:	6025      	str	r5, [r4, #0]
 80090ac:	e7dc      	b.n	8009068 <_malloc_r+0xb0>
 80090ae:	605b      	str	r3, [r3, #4]
 80090b0:	deff      	udf	#255	; 0xff
 80090b2:	bf00      	nop
 80090b4:	200007e8 	.word	0x200007e8

080090b8 <__malloc_lock>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__malloc_lock+0x8>)
 80090ba:	f000 be7a 	b.w	8009db2 <__retarget_lock_acquire_recursive>
 80090be:	bf00      	nop
 80090c0:	20000930 	.word	0x20000930

080090c4 <__malloc_unlock>:
 80090c4:	4801      	ldr	r0, [pc, #4]	; (80090cc <__malloc_unlock+0x8>)
 80090c6:	f000 be75 	b.w	8009db4 <__retarget_lock_release_recursive>
 80090ca:	bf00      	nop
 80090cc:	20000930 	.word	0x20000930

080090d0 <__cvt>:
 80090d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d4:	ec55 4b10 	vmov	r4, r5, d0
 80090d8:	2d00      	cmp	r5, #0
 80090da:	460e      	mov	r6, r1
 80090dc:	4619      	mov	r1, r3
 80090de:	462b      	mov	r3, r5
 80090e0:	bfbb      	ittet	lt
 80090e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090e6:	461d      	movlt	r5, r3
 80090e8:	2300      	movge	r3, #0
 80090ea:	232d      	movlt	r3, #45	; 0x2d
 80090ec:	700b      	strb	r3, [r1, #0]
 80090ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090f4:	4691      	mov	r9, r2
 80090f6:	f023 0820 	bic.w	r8, r3, #32
 80090fa:	bfbc      	itt	lt
 80090fc:	4622      	movlt	r2, r4
 80090fe:	4614      	movlt	r4, r2
 8009100:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009104:	d005      	beq.n	8009112 <__cvt+0x42>
 8009106:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800910a:	d100      	bne.n	800910e <__cvt+0x3e>
 800910c:	3601      	adds	r6, #1
 800910e:	2102      	movs	r1, #2
 8009110:	e000      	b.n	8009114 <__cvt+0x44>
 8009112:	2103      	movs	r1, #3
 8009114:	ab03      	add	r3, sp, #12
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	ab02      	add	r3, sp, #8
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	ec45 4b10 	vmov	d0, r4, r5
 8009120:	4653      	mov	r3, sl
 8009122:	4632      	mov	r2, r6
 8009124:	f000 fee0 	bl	8009ee8 <_dtoa_r>
 8009128:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800912c:	4607      	mov	r7, r0
 800912e:	d102      	bne.n	8009136 <__cvt+0x66>
 8009130:	f019 0f01 	tst.w	r9, #1
 8009134:	d022      	beq.n	800917c <__cvt+0xac>
 8009136:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800913a:	eb07 0906 	add.w	r9, r7, r6
 800913e:	d110      	bne.n	8009162 <__cvt+0x92>
 8009140:	783b      	ldrb	r3, [r7, #0]
 8009142:	2b30      	cmp	r3, #48	; 0x30
 8009144:	d10a      	bne.n	800915c <__cvt+0x8c>
 8009146:	2200      	movs	r2, #0
 8009148:	2300      	movs	r3, #0
 800914a:	4620      	mov	r0, r4
 800914c:	4629      	mov	r1, r5
 800914e:	f7f7 fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009152:	b918      	cbnz	r0, 800915c <__cvt+0x8c>
 8009154:	f1c6 0601 	rsb	r6, r6, #1
 8009158:	f8ca 6000 	str.w	r6, [sl]
 800915c:	f8da 3000 	ldr.w	r3, [sl]
 8009160:	4499      	add	r9, r3
 8009162:	2200      	movs	r2, #0
 8009164:	2300      	movs	r3, #0
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fcb5 	bl	8000ad8 <__aeabi_dcmpeq>
 800916e:	b108      	cbz	r0, 8009174 <__cvt+0xa4>
 8009170:	f8cd 900c 	str.w	r9, [sp, #12]
 8009174:	2230      	movs	r2, #48	; 0x30
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	454b      	cmp	r3, r9
 800917a:	d307      	bcc.n	800918c <__cvt+0xbc>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009180:	1bdb      	subs	r3, r3, r7
 8009182:	4638      	mov	r0, r7
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	b004      	add	sp, #16
 8009188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800918c:	1c59      	adds	r1, r3, #1
 800918e:	9103      	str	r1, [sp, #12]
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	e7f0      	b.n	8009176 <__cvt+0xa6>

08009194 <__exponent>:
 8009194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009196:	4603      	mov	r3, r0
 8009198:	2900      	cmp	r1, #0
 800919a:	bfb8      	it	lt
 800919c:	4249      	neglt	r1, r1
 800919e:	f803 2b02 	strb.w	r2, [r3], #2
 80091a2:	bfb4      	ite	lt
 80091a4:	222d      	movlt	r2, #45	; 0x2d
 80091a6:	222b      	movge	r2, #43	; 0x2b
 80091a8:	2909      	cmp	r1, #9
 80091aa:	7042      	strb	r2, [r0, #1]
 80091ac:	dd2a      	ble.n	8009204 <__exponent+0x70>
 80091ae:	f10d 0207 	add.w	r2, sp, #7
 80091b2:	4617      	mov	r7, r2
 80091b4:	260a      	movs	r6, #10
 80091b6:	4694      	mov	ip, r2
 80091b8:	fb91 f5f6 	sdiv	r5, r1, r6
 80091bc:	fb06 1415 	mls	r4, r6, r5, r1
 80091c0:	3430      	adds	r4, #48	; 0x30
 80091c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80091c6:	460c      	mov	r4, r1
 80091c8:	2c63      	cmp	r4, #99	; 0x63
 80091ca:	f102 32ff 	add.w	r2, r2, #4294967295
 80091ce:	4629      	mov	r1, r5
 80091d0:	dcf1      	bgt.n	80091b6 <__exponent+0x22>
 80091d2:	3130      	adds	r1, #48	; 0x30
 80091d4:	f1ac 0402 	sub.w	r4, ip, #2
 80091d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80091dc:	1c41      	adds	r1, r0, #1
 80091de:	4622      	mov	r2, r4
 80091e0:	42ba      	cmp	r2, r7
 80091e2:	d30a      	bcc.n	80091fa <__exponent+0x66>
 80091e4:	f10d 0209 	add.w	r2, sp, #9
 80091e8:	eba2 020c 	sub.w	r2, r2, ip
 80091ec:	42bc      	cmp	r4, r7
 80091ee:	bf88      	it	hi
 80091f0:	2200      	movhi	r2, #0
 80091f2:	4413      	add	r3, r2
 80091f4:	1a18      	subs	r0, r3, r0
 80091f6:	b003      	add	sp, #12
 80091f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80091fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009202:	e7ed      	b.n	80091e0 <__exponent+0x4c>
 8009204:	2330      	movs	r3, #48	; 0x30
 8009206:	3130      	adds	r1, #48	; 0x30
 8009208:	7083      	strb	r3, [r0, #2]
 800920a:	70c1      	strb	r1, [r0, #3]
 800920c:	1d03      	adds	r3, r0, #4
 800920e:	e7f1      	b.n	80091f4 <__exponent+0x60>

08009210 <_printf_float>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	ed2d 8b02 	vpush	{d8}
 8009218:	b08d      	sub	sp, #52	; 0x34
 800921a:	460c      	mov	r4, r1
 800921c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009220:	4616      	mov	r6, r2
 8009222:	461f      	mov	r7, r3
 8009224:	4605      	mov	r5, r0
 8009226:	f000 fd2b 	bl	8009c80 <_localeconv_r>
 800922a:	f8d0 a000 	ldr.w	sl, [r0]
 800922e:	4650      	mov	r0, sl
 8009230:	f7f7 f826 	bl	8000280 <strlen>
 8009234:	2300      	movs	r3, #0
 8009236:	930a      	str	r3, [sp, #40]	; 0x28
 8009238:	6823      	ldr	r3, [r4, #0]
 800923a:	9305      	str	r3, [sp, #20]
 800923c:	f8d8 3000 	ldr.w	r3, [r8]
 8009240:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009244:	3307      	adds	r3, #7
 8009246:	f023 0307 	bic.w	r3, r3, #7
 800924a:	f103 0208 	add.w	r2, r3, #8
 800924e:	f8c8 2000 	str.w	r2, [r8]
 8009252:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009256:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800925a:	9307      	str	r3, [sp, #28]
 800925c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009260:	ee08 0a10 	vmov	s16, r0
 8009264:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800926c:	4b9e      	ldr	r3, [pc, #632]	; (80094e8 <_printf_float+0x2d8>)
 800926e:	f04f 32ff 	mov.w	r2, #4294967295
 8009272:	f7f7 fc63 	bl	8000b3c <__aeabi_dcmpun>
 8009276:	bb88      	cbnz	r0, 80092dc <_printf_float+0xcc>
 8009278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800927c:	4b9a      	ldr	r3, [pc, #616]	; (80094e8 <_printf_float+0x2d8>)
 800927e:	f04f 32ff 	mov.w	r2, #4294967295
 8009282:	f7f7 fc3d 	bl	8000b00 <__aeabi_dcmple>
 8009286:	bb48      	cbnz	r0, 80092dc <_printf_float+0xcc>
 8009288:	2200      	movs	r2, #0
 800928a:	2300      	movs	r3, #0
 800928c:	4640      	mov	r0, r8
 800928e:	4649      	mov	r1, r9
 8009290:	f7f7 fc2c 	bl	8000aec <__aeabi_dcmplt>
 8009294:	b110      	cbz	r0, 800929c <_printf_float+0x8c>
 8009296:	232d      	movs	r3, #45	; 0x2d
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929c:	4a93      	ldr	r2, [pc, #588]	; (80094ec <_printf_float+0x2dc>)
 800929e:	4b94      	ldr	r3, [pc, #592]	; (80094f0 <_printf_float+0x2e0>)
 80092a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092a4:	bf94      	ite	ls
 80092a6:	4690      	movls	r8, r2
 80092a8:	4698      	movhi	r8, r3
 80092aa:	2303      	movs	r3, #3
 80092ac:	6123      	str	r3, [r4, #16]
 80092ae:	9b05      	ldr	r3, [sp, #20]
 80092b0:	f023 0304 	bic.w	r3, r3, #4
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	f04f 0900 	mov.w	r9, #0
 80092ba:	9700      	str	r7, [sp, #0]
 80092bc:	4633      	mov	r3, r6
 80092be:	aa0b      	add	r2, sp, #44	; 0x2c
 80092c0:	4621      	mov	r1, r4
 80092c2:	4628      	mov	r0, r5
 80092c4:	f000 f9da 	bl	800967c <_printf_common>
 80092c8:	3001      	adds	r0, #1
 80092ca:	f040 8090 	bne.w	80093ee <_printf_float+0x1de>
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	b00d      	add	sp, #52	; 0x34
 80092d4:	ecbd 8b02 	vpop	{d8}
 80092d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092dc:	4642      	mov	r2, r8
 80092de:	464b      	mov	r3, r9
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	f7f7 fc2a 	bl	8000b3c <__aeabi_dcmpun>
 80092e8:	b140      	cbz	r0, 80092fc <_printf_float+0xec>
 80092ea:	464b      	mov	r3, r9
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bfbc      	itt	lt
 80092f0:	232d      	movlt	r3, #45	; 0x2d
 80092f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092f6:	4a7f      	ldr	r2, [pc, #508]	; (80094f4 <_printf_float+0x2e4>)
 80092f8:	4b7f      	ldr	r3, [pc, #508]	; (80094f8 <_printf_float+0x2e8>)
 80092fa:	e7d1      	b.n	80092a0 <_printf_float+0x90>
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009302:	9206      	str	r2, [sp, #24]
 8009304:	1c5a      	adds	r2, r3, #1
 8009306:	d13f      	bne.n	8009388 <_printf_float+0x178>
 8009308:	2306      	movs	r3, #6
 800930a:	6063      	str	r3, [r4, #4]
 800930c:	9b05      	ldr	r3, [sp, #20]
 800930e:	6861      	ldr	r1, [r4, #4]
 8009310:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009314:	2300      	movs	r3, #0
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	ab0a      	add	r3, sp, #40	; 0x28
 800931a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800931e:	ab09      	add	r3, sp, #36	; 0x24
 8009320:	ec49 8b10 	vmov	d0, r8, r9
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	6022      	str	r2, [r4, #0]
 8009328:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800932c:	4628      	mov	r0, r5
 800932e:	f7ff fecf 	bl	80090d0 <__cvt>
 8009332:	9b06      	ldr	r3, [sp, #24]
 8009334:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009336:	2b47      	cmp	r3, #71	; 0x47
 8009338:	4680      	mov	r8, r0
 800933a:	d108      	bne.n	800934e <_printf_float+0x13e>
 800933c:	1cc8      	adds	r0, r1, #3
 800933e:	db02      	blt.n	8009346 <_printf_float+0x136>
 8009340:	6863      	ldr	r3, [r4, #4]
 8009342:	4299      	cmp	r1, r3
 8009344:	dd41      	ble.n	80093ca <_printf_float+0x1ba>
 8009346:	f1ab 0302 	sub.w	r3, fp, #2
 800934a:	fa5f fb83 	uxtb.w	fp, r3
 800934e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009352:	d820      	bhi.n	8009396 <_printf_float+0x186>
 8009354:	3901      	subs	r1, #1
 8009356:	465a      	mov	r2, fp
 8009358:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800935c:	9109      	str	r1, [sp, #36]	; 0x24
 800935e:	f7ff ff19 	bl	8009194 <__exponent>
 8009362:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009364:	1813      	adds	r3, r2, r0
 8009366:	2a01      	cmp	r2, #1
 8009368:	4681      	mov	r9, r0
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	dc02      	bgt.n	8009374 <_printf_float+0x164>
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	07d2      	lsls	r2, r2, #31
 8009372:	d501      	bpl.n	8009378 <_printf_float+0x168>
 8009374:	3301      	adds	r3, #1
 8009376:	6123      	str	r3, [r4, #16]
 8009378:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800937c:	2b00      	cmp	r3, #0
 800937e:	d09c      	beq.n	80092ba <_printf_float+0xaa>
 8009380:	232d      	movs	r3, #45	; 0x2d
 8009382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009386:	e798      	b.n	80092ba <_printf_float+0xaa>
 8009388:	9a06      	ldr	r2, [sp, #24]
 800938a:	2a47      	cmp	r2, #71	; 0x47
 800938c:	d1be      	bne.n	800930c <_printf_float+0xfc>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d1bc      	bne.n	800930c <_printf_float+0xfc>
 8009392:	2301      	movs	r3, #1
 8009394:	e7b9      	b.n	800930a <_printf_float+0xfa>
 8009396:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800939a:	d118      	bne.n	80093ce <_printf_float+0x1be>
 800939c:	2900      	cmp	r1, #0
 800939e:	6863      	ldr	r3, [r4, #4]
 80093a0:	dd0b      	ble.n	80093ba <_printf_float+0x1aa>
 80093a2:	6121      	str	r1, [r4, #16]
 80093a4:	b913      	cbnz	r3, 80093ac <_printf_float+0x19c>
 80093a6:	6822      	ldr	r2, [r4, #0]
 80093a8:	07d0      	lsls	r0, r2, #31
 80093aa:	d502      	bpl.n	80093b2 <_printf_float+0x1a2>
 80093ac:	3301      	adds	r3, #1
 80093ae:	440b      	add	r3, r1
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80093b4:	f04f 0900 	mov.w	r9, #0
 80093b8:	e7de      	b.n	8009378 <_printf_float+0x168>
 80093ba:	b913      	cbnz	r3, 80093c2 <_printf_float+0x1b2>
 80093bc:	6822      	ldr	r2, [r4, #0]
 80093be:	07d2      	lsls	r2, r2, #31
 80093c0:	d501      	bpl.n	80093c6 <_printf_float+0x1b6>
 80093c2:	3302      	adds	r3, #2
 80093c4:	e7f4      	b.n	80093b0 <_printf_float+0x1a0>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e7f2      	b.n	80093b0 <_printf_float+0x1a0>
 80093ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d0:	4299      	cmp	r1, r3
 80093d2:	db05      	blt.n	80093e0 <_printf_float+0x1d0>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	6121      	str	r1, [r4, #16]
 80093d8:	07d8      	lsls	r0, r3, #31
 80093da:	d5ea      	bpl.n	80093b2 <_printf_float+0x1a2>
 80093dc:	1c4b      	adds	r3, r1, #1
 80093de:	e7e7      	b.n	80093b0 <_printf_float+0x1a0>
 80093e0:	2900      	cmp	r1, #0
 80093e2:	bfd4      	ite	le
 80093e4:	f1c1 0202 	rsble	r2, r1, #2
 80093e8:	2201      	movgt	r2, #1
 80093ea:	4413      	add	r3, r2
 80093ec:	e7e0      	b.n	80093b0 <_printf_float+0x1a0>
 80093ee:	6823      	ldr	r3, [r4, #0]
 80093f0:	055a      	lsls	r2, r3, #21
 80093f2:	d407      	bmi.n	8009404 <_printf_float+0x1f4>
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	4642      	mov	r2, r8
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	47b8      	blx	r7
 80093fe:	3001      	adds	r0, #1
 8009400:	d12c      	bne.n	800945c <_printf_float+0x24c>
 8009402:	e764      	b.n	80092ce <_printf_float+0xbe>
 8009404:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009408:	f240 80e0 	bls.w	80095cc <_printf_float+0x3bc>
 800940c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009410:	2200      	movs	r2, #0
 8009412:	2300      	movs	r3, #0
 8009414:	f7f7 fb60 	bl	8000ad8 <__aeabi_dcmpeq>
 8009418:	2800      	cmp	r0, #0
 800941a:	d034      	beq.n	8009486 <_printf_float+0x276>
 800941c:	4a37      	ldr	r2, [pc, #220]	; (80094fc <_printf_float+0x2ec>)
 800941e:	2301      	movs	r3, #1
 8009420:	4631      	mov	r1, r6
 8009422:	4628      	mov	r0, r5
 8009424:	47b8      	blx	r7
 8009426:	3001      	adds	r0, #1
 8009428:	f43f af51 	beq.w	80092ce <_printf_float+0xbe>
 800942c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009430:	429a      	cmp	r2, r3
 8009432:	db02      	blt.n	800943a <_printf_float+0x22a>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	07d8      	lsls	r0, r3, #31
 8009438:	d510      	bpl.n	800945c <_printf_float+0x24c>
 800943a:	ee18 3a10 	vmov	r3, s16
 800943e:	4652      	mov	r2, sl
 8009440:	4631      	mov	r1, r6
 8009442:	4628      	mov	r0, r5
 8009444:	47b8      	blx	r7
 8009446:	3001      	adds	r0, #1
 8009448:	f43f af41 	beq.w	80092ce <_printf_float+0xbe>
 800944c:	f04f 0800 	mov.w	r8, #0
 8009450:	f104 091a 	add.w	r9, r4, #26
 8009454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009456:	3b01      	subs	r3, #1
 8009458:	4543      	cmp	r3, r8
 800945a:	dc09      	bgt.n	8009470 <_printf_float+0x260>
 800945c:	6823      	ldr	r3, [r4, #0]
 800945e:	079b      	lsls	r3, r3, #30
 8009460:	f100 8107 	bmi.w	8009672 <_printf_float+0x462>
 8009464:	68e0      	ldr	r0, [r4, #12]
 8009466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009468:	4298      	cmp	r0, r3
 800946a:	bfb8      	it	lt
 800946c:	4618      	movlt	r0, r3
 800946e:	e730      	b.n	80092d2 <_printf_float+0xc2>
 8009470:	2301      	movs	r3, #1
 8009472:	464a      	mov	r2, r9
 8009474:	4631      	mov	r1, r6
 8009476:	4628      	mov	r0, r5
 8009478:	47b8      	blx	r7
 800947a:	3001      	adds	r0, #1
 800947c:	f43f af27 	beq.w	80092ce <_printf_float+0xbe>
 8009480:	f108 0801 	add.w	r8, r8, #1
 8009484:	e7e6      	b.n	8009454 <_printf_float+0x244>
 8009486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	dc39      	bgt.n	8009500 <_printf_float+0x2f0>
 800948c:	4a1b      	ldr	r2, [pc, #108]	; (80094fc <_printf_float+0x2ec>)
 800948e:	2301      	movs	r3, #1
 8009490:	4631      	mov	r1, r6
 8009492:	4628      	mov	r0, r5
 8009494:	47b8      	blx	r7
 8009496:	3001      	adds	r0, #1
 8009498:	f43f af19 	beq.w	80092ce <_printf_float+0xbe>
 800949c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094a0:	4313      	orrs	r3, r2
 80094a2:	d102      	bne.n	80094aa <_printf_float+0x29a>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	07d9      	lsls	r1, r3, #31
 80094a8:	d5d8      	bpl.n	800945c <_printf_float+0x24c>
 80094aa:	ee18 3a10 	vmov	r3, s16
 80094ae:	4652      	mov	r2, sl
 80094b0:	4631      	mov	r1, r6
 80094b2:	4628      	mov	r0, r5
 80094b4:	47b8      	blx	r7
 80094b6:	3001      	adds	r0, #1
 80094b8:	f43f af09 	beq.w	80092ce <_printf_float+0xbe>
 80094bc:	f04f 0900 	mov.w	r9, #0
 80094c0:	f104 0a1a 	add.w	sl, r4, #26
 80094c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c6:	425b      	negs	r3, r3
 80094c8:	454b      	cmp	r3, r9
 80094ca:	dc01      	bgt.n	80094d0 <_printf_float+0x2c0>
 80094cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ce:	e792      	b.n	80093f6 <_printf_float+0x1e6>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4652      	mov	r2, sl
 80094d4:	4631      	mov	r1, r6
 80094d6:	4628      	mov	r0, r5
 80094d8:	47b8      	blx	r7
 80094da:	3001      	adds	r0, #1
 80094dc:	f43f aef7 	beq.w	80092ce <_printf_float+0xbe>
 80094e0:	f109 0901 	add.w	r9, r9, #1
 80094e4:	e7ee      	b.n	80094c4 <_printf_float+0x2b4>
 80094e6:	bf00      	nop
 80094e8:	7fefffff 	.word	0x7fefffff
 80094ec:	0800cc4c 	.word	0x0800cc4c
 80094f0:	0800cc50 	.word	0x0800cc50
 80094f4:	0800cc54 	.word	0x0800cc54
 80094f8:	0800cc58 	.word	0x0800cc58
 80094fc:	0800cc5c 	.word	0x0800cc5c
 8009500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009504:	429a      	cmp	r2, r3
 8009506:	bfa8      	it	ge
 8009508:	461a      	movge	r2, r3
 800950a:	2a00      	cmp	r2, #0
 800950c:	4691      	mov	r9, r2
 800950e:	dc37      	bgt.n	8009580 <_printf_float+0x370>
 8009510:	f04f 0b00 	mov.w	fp, #0
 8009514:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009518:	f104 021a 	add.w	r2, r4, #26
 800951c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800951e:	9305      	str	r3, [sp, #20]
 8009520:	eba3 0309 	sub.w	r3, r3, r9
 8009524:	455b      	cmp	r3, fp
 8009526:	dc33      	bgt.n	8009590 <_printf_float+0x380>
 8009528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800952c:	429a      	cmp	r2, r3
 800952e:	db3b      	blt.n	80095a8 <_printf_float+0x398>
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	07da      	lsls	r2, r3, #31
 8009534:	d438      	bmi.n	80095a8 <_printf_float+0x398>
 8009536:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800953a:	eba2 0903 	sub.w	r9, r2, r3
 800953e:	9b05      	ldr	r3, [sp, #20]
 8009540:	1ad2      	subs	r2, r2, r3
 8009542:	4591      	cmp	r9, r2
 8009544:	bfa8      	it	ge
 8009546:	4691      	movge	r9, r2
 8009548:	f1b9 0f00 	cmp.w	r9, #0
 800954c:	dc35      	bgt.n	80095ba <_printf_float+0x3aa>
 800954e:	f04f 0800 	mov.w	r8, #0
 8009552:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009556:	f104 0a1a 	add.w	sl, r4, #26
 800955a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	eba3 0309 	sub.w	r3, r3, r9
 8009564:	4543      	cmp	r3, r8
 8009566:	f77f af79 	ble.w	800945c <_printf_float+0x24c>
 800956a:	2301      	movs	r3, #1
 800956c:	4652      	mov	r2, sl
 800956e:	4631      	mov	r1, r6
 8009570:	4628      	mov	r0, r5
 8009572:	47b8      	blx	r7
 8009574:	3001      	adds	r0, #1
 8009576:	f43f aeaa 	beq.w	80092ce <_printf_float+0xbe>
 800957a:	f108 0801 	add.w	r8, r8, #1
 800957e:	e7ec      	b.n	800955a <_printf_float+0x34a>
 8009580:	4613      	mov	r3, r2
 8009582:	4631      	mov	r1, r6
 8009584:	4642      	mov	r2, r8
 8009586:	4628      	mov	r0, r5
 8009588:	47b8      	blx	r7
 800958a:	3001      	adds	r0, #1
 800958c:	d1c0      	bne.n	8009510 <_printf_float+0x300>
 800958e:	e69e      	b.n	80092ce <_printf_float+0xbe>
 8009590:	2301      	movs	r3, #1
 8009592:	4631      	mov	r1, r6
 8009594:	4628      	mov	r0, r5
 8009596:	9205      	str	r2, [sp, #20]
 8009598:	47b8      	blx	r7
 800959a:	3001      	adds	r0, #1
 800959c:	f43f ae97 	beq.w	80092ce <_printf_float+0xbe>
 80095a0:	9a05      	ldr	r2, [sp, #20]
 80095a2:	f10b 0b01 	add.w	fp, fp, #1
 80095a6:	e7b9      	b.n	800951c <_printf_float+0x30c>
 80095a8:	ee18 3a10 	vmov	r3, s16
 80095ac:	4652      	mov	r2, sl
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	d1be      	bne.n	8009536 <_printf_float+0x326>
 80095b8:	e689      	b.n	80092ce <_printf_float+0xbe>
 80095ba:	9a05      	ldr	r2, [sp, #20]
 80095bc:	464b      	mov	r3, r9
 80095be:	4442      	add	r2, r8
 80095c0:	4631      	mov	r1, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	47b8      	blx	r7
 80095c6:	3001      	adds	r0, #1
 80095c8:	d1c1      	bne.n	800954e <_printf_float+0x33e>
 80095ca:	e680      	b.n	80092ce <_printf_float+0xbe>
 80095cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095ce:	2a01      	cmp	r2, #1
 80095d0:	dc01      	bgt.n	80095d6 <_printf_float+0x3c6>
 80095d2:	07db      	lsls	r3, r3, #31
 80095d4:	d53a      	bpl.n	800964c <_printf_float+0x43c>
 80095d6:	2301      	movs	r3, #1
 80095d8:	4642      	mov	r2, r8
 80095da:	4631      	mov	r1, r6
 80095dc:	4628      	mov	r0, r5
 80095de:	47b8      	blx	r7
 80095e0:	3001      	adds	r0, #1
 80095e2:	f43f ae74 	beq.w	80092ce <_printf_float+0xbe>
 80095e6:	ee18 3a10 	vmov	r3, s16
 80095ea:	4652      	mov	r2, sl
 80095ec:	4631      	mov	r1, r6
 80095ee:	4628      	mov	r0, r5
 80095f0:	47b8      	blx	r7
 80095f2:	3001      	adds	r0, #1
 80095f4:	f43f ae6b 	beq.w	80092ce <_printf_float+0xbe>
 80095f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095fc:	2200      	movs	r2, #0
 80095fe:	2300      	movs	r3, #0
 8009600:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009604:	f7f7 fa68 	bl	8000ad8 <__aeabi_dcmpeq>
 8009608:	b9d8      	cbnz	r0, 8009642 <_printf_float+0x432>
 800960a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800960e:	f108 0201 	add.w	r2, r8, #1
 8009612:	4631      	mov	r1, r6
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	d10e      	bne.n	800963a <_printf_float+0x42a>
 800961c:	e657      	b.n	80092ce <_printf_float+0xbe>
 800961e:	2301      	movs	r3, #1
 8009620:	4652      	mov	r2, sl
 8009622:	4631      	mov	r1, r6
 8009624:	4628      	mov	r0, r5
 8009626:	47b8      	blx	r7
 8009628:	3001      	adds	r0, #1
 800962a:	f43f ae50 	beq.w	80092ce <_printf_float+0xbe>
 800962e:	f108 0801 	add.w	r8, r8, #1
 8009632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009634:	3b01      	subs	r3, #1
 8009636:	4543      	cmp	r3, r8
 8009638:	dcf1      	bgt.n	800961e <_printf_float+0x40e>
 800963a:	464b      	mov	r3, r9
 800963c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009640:	e6da      	b.n	80093f8 <_printf_float+0x1e8>
 8009642:	f04f 0800 	mov.w	r8, #0
 8009646:	f104 0a1a 	add.w	sl, r4, #26
 800964a:	e7f2      	b.n	8009632 <_printf_float+0x422>
 800964c:	2301      	movs	r3, #1
 800964e:	4642      	mov	r2, r8
 8009650:	e7df      	b.n	8009612 <_printf_float+0x402>
 8009652:	2301      	movs	r3, #1
 8009654:	464a      	mov	r2, r9
 8009656:	4631      	mov	r1, r6
 8009658:	4628      	mov	r0, r5
 800965a:	47b8      	blx	r7
 800965c:	3001      	adds	r0, #1
 800965e:	f43f ae36 	beq.w	80092ce <_printf_float+0xbe>
 8009662:	f108 0801 	add.w	r8, r8, #1
 8009666:	68e3      	ldr	r3, [r4, #12]
 8009668:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800966a:	1a5b      	subs	r3, r3, r1
 800966c:	4543      	cmp	r3, r8
 800966e:	dcf0      	bgt.n	8009652 <_printf_float+0x442>
 8009670:	e6f8      	b.n	8009464 <_printf_float+0x254>
 8009672:	f04f 0800 	mov.w	r8, #0
 8009676:	f104 0919 	add.w	r9, r4, #25
 800967a:	e7f4      	b.n	8009666 <_printf_float+0x456>

0800967c <_printf_common>:
 800967c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009680:	4616      	mov	r6, r2
 8009682:	4699      	mov	r9, r3
 8009684:	688a      	ldr	r2, [r1, #8]
 8009686:	690b      	ldr	r3, [r1, #16]
 8009688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800968c:	4293      	cmp	r3, r2
 800968e:	bfb8      	it	lt
 8009690:	4613      	movlt	r3, r2
 8009692:	6033      	str	r3, [r6, #0]
 8009694:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009698:	4607      	mov	r7, r0
 800969a:	460c      	mov	r4, r1
 800969c:	b10a      	cbz	r2, 80096a2 <_printf_common+0x26>
 800969e:	3301      	adds	r3, #1
 80096a0:	6033      	str	r3, [r6, #0]
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	0699      	lsls	r1, r3, #26
 80096a6:	bf42      	ittt	mi
 80096a8:	6833      	ldrmi	r3, [r6, #0]
 80096aa:	3302      	addmi	r3, #2
 80096ac:	6033      	strmi	r3, [r6, #0]
 80096ae:	6825      	ldr	r5, [r4, #0]
 80096b0:	f015 0506 	ands.w	r5, r5, #6
 80096b4:	d106      	bne.n	80096c4 <_printf_common+0x48>
 80096b6:	f104 0a19 	add.w	sl, r4, #25
 80096ba:	68e3      	ldr	r3, [r4, #12]
 80096bc:	6832      	ldr	r2, [r6, #0]
 80096be:	1a9b      	subs	r3, r3, r2
 80096c0:	42ab      	cmp	r3, r5
 80096c2:	dc26      	bgt.n	8009712 <_printf_common+0x96>
 80096c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096c8:	1e13      	subs	r3, r2, #0
 80096ca:	6822      	ldr	r2, [r4, #0]
 80096cc:	bf18      	it	ne
 80096ce:	2301      	movne	r3, #1
 80096d0:	0692      	lsls	r2, r2, #26
 80096d2:	d42b      	bmi.n	800972c <_printf_common+0xb0>
 80096d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096d8:	4649      	mov	r1, r9
 80096da:	4638      	mov	r0, r7
 80096dc:	47c0      	blx	r8
 80096de:	3001      	adds	r0, #1
 80096e0:	d01e      	beq.n	8009720 <_printf_common+0xa4>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	6922      	ldr	r2, [r4, #16]
 80096e6:	f003 0306 	and.w	r3, r3, #6
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	bf02      	ittt	eq
 80096ee:	68e5      	ldreq	r5, [r4, #12]
 80096f0:	6833      	ldreq	r3, [r6, #0]
 80096f2:	1aed      	subeq	r5, r5, r3
 80096f4:	68a3      	ldr	r3, [r4, #8]
 80096f6:	bf0c      	ite	eq
 80096f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80096fc:	2500      	movne	r5, #0
 80096fe:	4293      	cmp	r3, r2
 8009700:	bfc4      	itt	gt
 8009702:	1a9b      	subgt	r3, r3, r2
 8009704:	18ed      	addgt	r5, r5, r3
 8009706:	2600      	movs	r6, #0
 8009708:	341a      	adds	r4, #26
 800970a:	42b5      	cmp	r5, r6
 800970c:	d11a      	bne.n	8009744 <_printf_common+0xc8>
 800970e:	2000      	movs	r0, #0
 8009710:	e008      	b.n	8009724 <_printf_common+0xa8>
 8009712:	2301      	movs	r3, #1
 8009714:	4652      	mov	r2, sl
 8009716:	4649      	mov	r1, r9
 8009718:	4638      	mov	r0, r7
 800971a:	47c0      	blx	r8
 800971c:	3001      	adds	r0, #1
 800971e:	d103      	bne.n	8009728 <_printf_common+0xac>
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009728:	3501      	adds	r5, #1
 800972a:	e7c6      	b.n	80096ba <_printf_common+0x3e>
 800972c:	18e1      	adds	r1, r4, r3
 800972e:	1c5a      	adds	r2, r3, #1
 8009730:	2030      	movs	r0, #48	; 0x30
 8009732:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009736:	4422      	add	r2, r4
 8009738:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800973c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009740:	3302      	adds	r3, #2
 8009742:	e7c7      	b.n	80096d4 <_printf_common+0x58>
 8009744:	2301      	movs	r3, #1
 8009746:	4622      	mov	r2, r4
 8009748:	4649      	mov	r1, r9
 800974a:	4638      	mov	r0, r7
 800974c:	47c0      	blx	r8
 800974e:	3001      	adds	r0, #1
 8009750:	d0e6      	beq.n	8009720 <_printf_common+0xa4>
 8009752:	3601      	adds	r6, #1
 8009754:	e7d9      	b.n	800970a <_printf_common+0x8e>
	...

08009758 <_printf_i>:
 8009758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800975c:	7e0f      	ldrb	r7, [r1, #24]
 800975e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009760:	2f78      	cmp	r7, #120	; 0x78
 8009762:	4691      	mov	r9, r2
 8009764:	4680      	mov	r8, r0
 8009766:	460c      	mov	r4, r1
 8009768:	469a      	mov	sl, r3
 800976a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800976e:	d807      	bhi.n	8009780 <_printf_i+0x28>
 8009770:	2f62      	cmp	r7, #98	; 0x62
 8009772:	d80a      	bhi.n	800978a <_printf_i+0x32>
 8009774:	2f00      	cmp	r7, #0
 8009776:	f000 80d4 	beq.w	8009922 <_printf_i+0x1ca>
 800977a:	2f58      	cmp	r7, #88	; 0x58
 800977c:	f000 80c0 	beq.w	8009900 <_printf_i+0x1a8>
 8009780:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009784:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009788:	e03a      	b.n	8009800 <_printf_i+0xa8>
 800978a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800978e:	2b15      	cmp	r3, #21
 8009790:	d8f6      	bhi.n	8009780 <_printf_i+0x28>
 8009792:	a101      	add	r1, pc, #4	; (adr r1, 8009798 <_printf_i+0x40>)
 8009794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009798:	080097f1 	.word	0x080097f1
 800979c:	08009805 	.word	0x08009805
 80097a0:	08009781 	.word	0x08009781
 80097a4:	08009781 	.word	0x08009781
 80097a8:	08009781 	.word	0x08009781
 80097ac:	08009781 	.word	0x08009781
 80097b0:	08009805 	.word	0x08009805
 80097b4:	08009781 	.word	0x08009781
 80097b8:	08009781 	.word	0x08009781
 80097bc:	08009781 	.word	0x08009781
 80097c0:	08009781 	.word	0x08009781
 80097c4:	08009909 	.word	0x08009909
 80097c8:	08009831 	.word	0x08009831
 80097cc:	080098c3 	.word	0x080098c3
 80097d0:	08009781 	.word	0x08009781
 80097d4:	08009781 	.word	0x08009781
 80097d8:	0800992b 	.word	0x0800992b
 80097dc:	08009781 	.word	0x08009781
 80097e0:	08009831 	.word	0x08009831
 80097e4:	08009781 	.word	0x08009781
 80097e8:	08009781 	.word	0x08009781
 80097ec:	080098cb 	.word	0x080098cb
 80097f0:	682b      	ldr	r3, [r5, #0]
 80097f2:	1d1a      	adds	r2, r3, #4
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	602a      	str	r2, [r5, #0]
 80097f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009800:	2301      	movs	r3, #1
 8009802:	e09f      	b.n	8009944 <_printf_i+0x1ec>
 8009804:	6820      	ldr	r0, [r4, #0]
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	0607      	lsls	r7, r0, #24
 800980a:	f103 0104 	add.w	r1, r3, #4
 800980e:	6029      	str	r1, [r5, #0]
 8009810:	d501      	bpl.n	8009816 <_printf_i+0xbe>
 8009812:	681e      	ldr	r6, [r3, #0]
 8009814:	e003      	b.n	800981e <_printf_i+0xc6>
 8009816:	0646      	lsls	r6, r0, #25
 8009818:	d5fb      	bpl.n	8009812 <_printf_i+0xba>
 800981a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800981e:	2e00      	cmp	r6, #0
 8009820:	da03      	bge.n	800982a <_printf_i+0xd2>
 8009822:	232d      	movs	r3, #45	; 0x2d
 8009824:	4276      	negs	r6, r6
 8009826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800982a:	485a      	ldr	r0, [pc, #360]	; (8009994 <_printf_i+0x23c>)
 800982c:	230a      	movs	r3, #10
 800982e:	e012      	b.n	8009856 <_printf_i+0xfe>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	6820      	ldr	r0, [r4, #0]
 8009834:	1d19      	adds	r1, r3, #4
 8009836:	6029      	str	r1, [r5, #0]
 8009838:	0605      	lsls	r5, r0, #24
 800983a:	d501      	bpl.n	8009840 <_printf_i+0xe8>
 800983c:	681e      	ldr	r6, [r3, #0]
 800983e:	e002      	b.n	8009846 <_printf_i+0xee>
 8009840:	0641      	lsls	r1, r0, #25
 8009842:	d5fb      	bpl.n	800983c <_printf_i+0xe4>
 8009844:	881e      	ldrh	r6, [r3, #0]
 8009846:	4853      	ldr	r0, [pc, #332]	; (8009994 <_printf_i+0x23c>)
 8009848:	2f6f      	cmp	r7, #111	; 0x6f
 800984a:	bf0c      	ite	eq
 800984c:	2308      	moveq	r3, #8
 800984e:	230a      	movne	r3, #10
 8009850:	2100      	movs	r1, #0
 8009852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009856:	6865      	ldr	r5, [r4, #4]
 8009858:	60a5      	str	r5, [r4, #8]
 800985a:	2d00      	cmp	r5, #0
 800985c:	bfa2      	ittt	ge
 800985e:	6821      	ldrge	r1, [r4, #0]
 8009860:	f021 0104 	bicge.w	r1, r1, #4
 8009864:	6021      	strge	r1, [r4, #0]
 8009866:	b90e      	cbnz	r6, 800986c <_printf_i+0x114>
 8009868:	2d00      	cmp	r5, #0
 800986a:	d04b      	beq.n	8009904 <_printf_i+0x1ac>
 800986c:	4615      	mov	r5, r2
 800986e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009872:	fb03 6711 	mls	r7, r3, r1, r6
 8009876:	5dc7      	ldrb	r7, [r0, r7]
 8009878:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800987c:	4637      	mov	r7, r6
 800987e:	42bb      	cmp	r3, r7
 8009880:	460e      	mov	r6, r1
 8009882:	d9f4      	bls.n	800986e <_printf_i+0x116>
 8009884:	2b08      	cmp	r3, #8
 8009886:	d10b      	bne.n	80098a0 <_printf_i+0x148>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	07de      	lsls	r6, r3, #31
 800988c:	d508      	bpl.n	80098a0 <_printf_i+0x148>
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	6861      	ldr	r1, [r4, #4]
 8009892:	4299      	cmp	r1, r3
 8009894:	bfde      	ittt	le
 8009896:	2330      	movle	r3, #48	; 0x30
 8009898:	f805 3c01 	strble.w	r3, [r5, #-1]
 800989c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098a0:	1b52      	subs	r2, r2, r5
 80098a2:	6122      	str	r2, [r4, #16]
 80098a4:	f8cd a000 	str.w	sl, [sp]
 80098a8:	464b      	mov	r3, r9
 80098aa:	aa03      	add	r2, sp, #12
 80098ac:	4621      	mov	r1, r4
 80098ae:	4640      	mov	r0, r8
 80098b0:	f7ff fee4 	bl	800967c <_printf_common>
 80098b4:	3001      	adds	r0, #1
 80098b6:	d14a      	bne.n	800994e <_printf_i+0x1f6>
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	b004      	add	sp, #16
 80098be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c2:	6823      	ldr	r3, [r4, #0]
 80098c4:	f043 0320 	orr.w	r3, r3, #32
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	4833      	ldr	r0, [pc, #204]	; (8009998 <_printf_i+0x240>)
 80098cc:	2778      	movs	r7, #120	; 0x78
 80098ce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	6829      	ldr	r1, [r5, #0]
 80098d6:	061f      	lsls	r7, r3, #24
 80098d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80098dc:	d402      	bmi.n	80098e4 <_printf_i+0x18c>
 80098de:	065f      	lsls	r7, r3, #25
 80098e0:	bf48      	it	mi
 80098e2:	b2b6      	uxthmi	r6, r6
 80098e4:	07df      	lsls	r7, r3, #31
 80098e6:	bf48      	it	mi
 80098e8:	f043 0320 	orrmi.w	r3, r3, #32
 80098ec:	6029      	str	r1, [r5, #0]
 80098ee:	bf48      	it	mi
 80098f0:	6023      	strmi	r3, [r4, #0]
 80098f2:	b91e      	cbnz	r6, 80098fc <_printf_i+0x1a4>
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	f023 0320 	bic.w	r3, r3, #32
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	2310      	movs	r3, #16
 80098fe:	e7a7      	b.n	8009850 <_printf_i+0xf8>
 8009900:	4824      	ldr	r0, [pc, #144]	; (8009994 <_printf_i+0x23c>)
 8009902:	e7e4      	b.n	80098ce <_printf_i+0x176>
 8009904:	4615      	mov	r5, r2
 8009906:	e7bd      	b.n	8009884 <_printf_i+0x12c>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	6826      	ldr	r6, [r4, #0]
 800990c:	6961      	ldr	r1, [r4, #20]
 800990e:	1d18      	adds	r0, r3, #4
 8009910:	6028      	str	r0, [r5, #0]
 8009912:	0635      	lsls	r5, r6, #24
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	d501      	bpl.n	800991c <_printf_i+0x1c4>
 8009918:	6019      	str	r1, [r3, #0]
 800991a:	e002      	b.n	8009922 <_printf_i+0x1ca>
 800991c:	0670      	lsls	r0, r6, #25
 800991e:	d5fb      	bpl.n	8009918 <_printf_i+0x1c0>
 8009920:	8019      	strh	r1, [r3, #0]
 8009922:	2300      	movs	r3, #0
 8009924:	6123      	str	r3, [r4, #16]
 8009926:	4615      	mov	r5, r2
 8009928:	e7bc      	b.n	80098a4 <_printf_i+0x14c>
 800992a:	682b      	ldr	r3, [r5, #0]
 800992c:	1d1a      	adds	r2, r3, #4
 800992e:	602a      	str	r2, [r5, #0]
 8009930:	681d      	ldr	r5, [r3, #0]
 8009932:	6862      	ldr	r2, [r4, #4]
 8009934:	2100      	movs	r1, #0
 8009936:	4628      	mov	r0, r5
 8009938:	f7f6 fc52 	bl	80001e0 <memchr>
 800993c:	b108      	cbz	r0, 8009942 <_printf_i+0x1ea>
 800993e:	1b40      	subs	r0, r0, r5
 8009940:	6060      	str	r0, [r4, #4]
 8009942:	6863      	ldr	r3, [r4, #4]
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	2300      	movs	r3, #0
 8009948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800994c:	e7aa      	b.n	80098a4 <_printf_i+0x14c>
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	462a      	mov	r2, r5
 8009952:	4649      	mov	r1, r9
 8009954:	4640      	mov	r0, r8
 8009956:	47d0      	blx	sl
 8009958:	3001      	adds	r0, #1
 800995a:	d0ad      	beq.n	80098b8 <_printf_i+0x160>
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	079b      	lsls	r3, r3, #30
 8009960:	d413      	bmi.n	800998a <_printf_i+0x232>
 8009962:	68e0      	ldr	r0, [r4, #12]
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	4298      	cmp	r0, r3
 8009968:	bfb8      	it	lt
 800996a:	4618      	movlt	r0, r3
 800996c:	e7a6      	b.n	80098bc <_printf_i+0x164>
 800996e:	2301      	movs	r3, #1
 8009970:	4632      	mov	r2, r6
 8009972:	4649      	mov	r1, r9
 8009974:	4640      	mov	r0, r8
 8009976:	47d0      	blx	sl
 8009978:	3001      	adds	r0, #1
 800997a:	d09d      	beq.n	80098b8 <_printf_i+0x160>
 800997c:	3501      	adds	r5, #1
 800997e:	68e3      	ldr	r3, [r4, #12]
 8009980:	9903      	ldr	r1, [sp, #12]
 8009982:	1a5b      	subs	r3, r3, r1
 8009984:	42ab      	cmp	r3, r5
 8009986:	dcf2      	bgt.n	800996e <_printf_i+0x216>
 8009988:	e7eb      	b.n	8009962 <_printf_i+0x20a>
 800998a:	2500      	movs	r5, #0
 800998c:	f104 0619 	add.w	r6, r4, #25
 8009990:	e7f5      	b.n	800997e <_printf_i+0x226>
 8009992:	bf00      	nop
 8009994:	0800cc5e 	.word	0x0800cc5e
 8009998:	0800cc6f 	.word	0x0800cc6f

0800999c <std>:
 800999c:	2300      	movs	r3, #0
 800999e:	b510      	push	{r4, lr}
 80099a0:	4604      	mov	r4, r0
 80099a2:	e9c0 3300 	strd	r3, r3, [r0]
 80099a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099aa:	6083      	str	r3, [r0, #8]
 80099ac:	8181      	strh	r1, [r0, #12]
 80099ae:	6643      	str	r3, [r0, #100]	; 0x64
 80099b0:	81c2      	strh	r2, [r0, #14]
 80099b2:	6183      	str	r3, [r0, #24]
 80099b4:	4619      	mov	r1, r3
 80099b6:	2208      	movs	r2, #8
 80099b8:	305c      	adds	r0, #92	; 0x5c
 80099ba:	f000 f928 	bl	8009c0e <memset>
 80099be:	4b0d      	ldr	r3, [pc, #52]	; (80099f4 <std+0x58>)
 80099c0:	6263      	str	r3, [r4, #36]	; 0x24
 80099c2:	4b0d      	ldr	r3, [pc, #52]	; (80099f8 <std+0x5c>)
 80099c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80099c6:	4b0d      	ldr	r3, [pc, #52]	; (80099fc <std+0x60>)
 80099c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099ca:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <std+0x64>)
 80099cc:	6323      	str	r3, [r4, #48]	; 0x30
 80099ce:	4b0d      	ldr	r3, [pc, #52]	; (8009a04 <std+0x68>)
 80099d0:	6224      	str	r4, [r4, #32]
 80099d2:	429c      	cmp	r4, r3
 80099d4:	d006      	beq.n	80099e4 <std+0x48>
 80099d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80099da:	4294      	cmp	r4, r2
 80099dc:	d002      	beq.n	80099e4 <std+0x48>
 80099de:	33d0      	adds	r3, #208	; 0xd0
 80099e0:	429c      	cmp	r4, r3
 80099e2:	d105      	bne.n	80099f0 <std+0x54>
 80099e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80099e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099ec:	f000 b9e0 	b.w	8009db0 <__retarget_lock_init_recursive>
 80099f0:	bd10      	pop	{r4, pc}
 80099f2:	bf00      	nop
 80099f4:	08009b89 	.word	0x08009b89
 80099f8:	08009bab 	.word	0x08009bab
 80099fc:	08009be3 	.word	0x08009be3
 8009a00:	08009c07 	.word	0x08009c07
 8009a04:	200007f0 	.word	0x200007f0

08009a08 <stdio_exit_handler>:
 8009a08:	4a02      	ldr	r2, [pc, #8]	; (8009a14 <stdio_exit_handler+0xc>)
 8009a0a:	4903      	ldr	r1, [pc, #12]	; (8009a18 <stdio_exit_handler+0x10>)
 8009a0c:	4803      	ldr	r0, [pc, #12]	; (8009a1c <stdio_exit_handler+0x14>)
 8009a0e:	f000 b869 	b.w	8009ae4 <_fwalk_sglue>
 8009a12:	bf00      	nop
 8009a14:	20000018 	.word	0x20000018
 8009a18:	0800b619 	.word	0x0800b619
 8009a1c:	20000024 	.word	0x20000024

08009a20 <cleanup_stdio>:
 8009a20:	6841      	ldr	r1, [r0, #4]
 8009a22:	4b0c      	ldr	r3, [pc, #48]	; (8009a54 <cleanup_stdio+0x34>)
 8009a24:	4299      	cmp	r1, r3
 8009a26:	b510      	push	{r4, lr}
 8009a28:	4604      	mov	r4, r0
 8009a2a:	d001      	beq.n	8009a30 <cleanup_stdio+0x10>
 8009a2c:	f001 fdf4 	bl	800b618 <_fflush_r>
 8009a30:	68a1      	ldr	r1, [r4, #8]
 8009a32:	4b09      	ldr	r3, [pc, #36]	; (8009a58 <cleanup_stdio+0x38>)
 8009a34:	4299      	cmp	r1, r3
 8009a36:	d002      	beq.n	8009a3e <cleanup_stdio+0x1e>
 8009a38:	4620      	mov	r0, r4
 8009a3a:	f001 fded 	bl	800b618 <_fflush_r>
 8009a3e:	68e1      	ldr	r1, [r4, #12]
 8009a40:	4b06      	ldr	r3, [pc, #24]	; (8009a5c <cleanup_stdio+0x3c>)
 8009a42:	4299      	cmp	r1, r3
 8009a44:	d004      	beq.n	8009a50 <cleanup_stdio+0x30>
 8009a46:	4620      	mov	r0, r4
 8009a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a4c:	f001 bde4 	b.w	800b618 <_fflush_r>
 8009a50:	bd10      	pop	{r4, pc}
 8009a52:	bf00      	nop
 8009a54:	200007f0 	.word	0x200007f0
 8009a58:	20000858 	.word	0x20000858
 8009a5c:	200008c0 	.word	0x200008c0

08009a60 <global_stdio_init.part.0>:
 8009a60:	b510      	push	{r4, lr}
 8009a62:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <global_stdio_init.part.0+0x30>)
 8009a64:	4c0b      	ldr	r4, [pc, #44]	; (8009a94 <global_stdio_init.part.0+0x34>)
 8009a66:	4a0c      	ldr	r2, [pc, #48]	; (8009a98 <global_stdio_init.part.0+0x38>)
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2104      	movs	r1, #4
 8009a70:	f7ff ff94 	bl	800999c <std>
 8009a74:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a78:	2201      	movs	r2, #1
 8009a7a:	2109      	movs	r1, #9
 8009a7c:	f7ff ff8e 	bl	800999c <std>
 8009a80:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a84:	2202      	movs	r2, #2
 8009a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a8a:	2112      	movs	r1, #18
 8009a8c:	f7ff bf86 	b.w	800999c <std>
 8009a90:	20000928 	.word	0x20000928
 8009a94:	200007f0 	.word	0x200007f0
 8009a98:	08009a09 	.word	0x08009a09

08009a9c <__sfp_lock_acquire>:
 8009a9c:	4801      	ldr	r0, [pc, #4]	; (8009aa4 <__sfp_lock_acquire+0x8>)
 8009a9e:	f000 b988 	b.w	8009db2 <__retarget_lock_acquire_recursive>
 8009aa2:	bf00      	nop
 8009aa4:	20000931 	.word	0x20000931

08009aa8 <__sfp_lock_release>:
 8009aa8:	4801      	ldr	r0, [pc, #4]	; (8009ab0 <__sfp_lock_release+0x8>)
 8009aaa:	f000 b983 	b.w	8009db4 <__retarget_lock_release_recursive>
 8009aae:	bf00      	nop
 8009ab0:	20000931 	.word	0x20000931

08009ab4 <__sinit>:
 8009ab4:	b510      	push	{r4, lr}
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	f7ff fff0 	bl	8009a9c <__sfp_lock_acquire>
 8009abc:	6a23      	ldr	r3, [r4, #32]
 8009abe:	b11b      	cbz	r3, 8009ac8 <__sinit+0x14>
 8009ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac4:	f7ff bff0 	b.w	8009aa8 <__sfp_lock_release>
 8009ac8:	4b04      	ldr	r3, [pc, #16]	; (8009adc <__sinit+0x28>)
 8009aca:	6223      	str	r3, [r4, #32]
 8009acc:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <__sinit+0x2c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1f5      	bne.n	8009ac0 <__sinit+0xc>
 8009ad4:	f7ff ffc4 	bl	8009a60 <global_stdio_init.part.0>
 8009ad8:	e7f2      	b.n	8009ac0 <__sinit+0xc>
 8009ada:	bf00      	nop
 8009adc:	08009a21 	.word	0x08009a21
 8009ae0:	20000928 	.word	0x20000928

08009ae4 <_fwalk_sglue>:
 8009ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae8:	4607      	mov	r7, r0
 8009aea:	4688      	mov	r8, r1
 8009aec:	4614      	mov	r4, r2
 8009aee:	2600      	movs	r6, #0
 8009af0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009af4:	f1b9 0901 	subs.w	r9, r9, #1
 8009af8:	d505      	bpl.n	8009b06 <_fwalk_sglue+0x22>
 8009afa:	6824      	ldr	r4, [r4, #0]
 8009afc:	2c00      	cmp	r4, #0
 8009afe:	d1f7      	bne.n	8009af0 <_fwalk_sglue+0xc>
 8009b00:	4630      	mov	r0, r6
 8009b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b06:	89ab      	ldrh	r3, [r5, #12]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d907      	bls.n	8009b1c <_fwalk_sglue+0x38>
 8009b0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b10:	3301      	adds	r3, #1
 8009b12:	d003      	beq.n	8009b1c <_fwalk_sglue+0x38>
 8009b14:	4629      	mov	r1, r5
 8009b16:	4638      	mov	r0, r7
 8009b18:	47c0      	blx	r8
 8009b1a:	4306      	orrs	r6, r0
 8009b1c:	3568      	adds	r5, #104	; 0x68
 8009b1e:	e7e9      	b.n	8009af4 <_fwalk_sglue+0x10>

08009b20 <sniprintf>:
 8009b20:	b40c      	push	{r2, r3}
 8009b22:	b530      	push	{r4, r5, lr}
 8009b24:	4b17      	ldr	r3, [pc, #92]	; (8009b84 <sniprintf+0x64>)
 8009b26:	1e0c      	subs	r4, r1, #0
 8009b28:	681d      	ldr	r5, [r3, #0]
 8009b2a:	b09d      	sub	sp, #116	; 0x74
 8009b2c:	da08      	bge.n	8009b40 <sniprintf+0x20>
 8009b2e:	238b      	movs	r3, #139	; 0x8b
 8009b30:	602b      	str	r3, [r5, #0]
 8009b32:	f04f 30ff 	mov.w	r0, #4294967295
 8009b36:	b01d      	add	sp, #116	; 0x74
 8009b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b3c:	b002      	add	sp, #8
 8009b3e:	4770      	bx	lr
 8009b40:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b44:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b48:	bf14      	ite	ne
 8009b4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b4e:	4623      	moveq	r3, r4
 8009b50:	9304      	str	r3, [sp, #16]
 8009b52:	9307      	str	r3, [sp, #28]
 8009b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b58:	9002      	str	r0, [sp, #8]
 8009b5a:	9006      	str	r0, [sp, #24]
 8009b5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b62:	ab21      	add	r3, sp, #132	; 0x84
 8009b64:	a902      	add	r1, sp, #8
 8009b66:	4628      	mov	r0, r5
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	f001 fbd1 	bl	800b310 <_svfiprintf_r>
 8009b6e:	1c43      	adds	r3, r0, #1
 8009b70:	bfbc      	itt	lt
 8009b72:	238b      	movlt	r3, #139	; 0x8b
 8009b74:	602b      	strlt	r3, [r5, #0]
 8009b76:	2c00      	cmp	r4, #0
 8009b78:	d0dd      	beq.n	8009b36 <sniprintf+0x16>
 8009b7a:	9b02      	ldr	r3, [sp, #8]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
 8009b80:	e7d9      	b.n	8009b36 <sniprintf+0x16>
 8009b82:	bf00      	nop
 8009b84:	20000070 	.word	0x20000070

08009b88 <__sread>:
 8009b88:	b510      	push	{r4, lr}
 8009b8a:	460c      	mov	r4, r1
 8009b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b90:	f000 f89c 	bl	8009ccc <_read_r>
 8009b94:	2800      	cmp	r0, #0
 8009b96:	bfab      	itete	ge
 8009b98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b9c:	181b      	addge	r3, r3, r0
 8009b9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ba2:	bfac      	ite	ge
 8009ba4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ba6:	81a3      	strhlt	r3, [r4, #12]
 8009ba8:	bd10      	pop	{r4, pc}

08009baa <__swrite>:
 8009baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bae:	461f      	mov	r7, r3
 8009bb0:	898b      	ldrh	r3, [r1, #12]
 8009bb2:	05db      	lsls	r3, r3, #23
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	4616      	mov	r6, r2
 8009bba:	d505      	bpl.n	8009bc8 <__swrite+0x1e>
 8009bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f000 f870 	bl	8009ca8 <_lseek_r>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bd2:	81a3      	strh	r3, [r4, #12]
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	4628      	mov	r0, r5
 8009bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bde:	f000 b8ab 	b.w	8009d38 <_write_r>

08009be2 <__sseek>:
 8009be2:	b510      	push	{r4, lr}
 8009be4:	460c      	mov	r4, r1
 8009be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bea:	f000 f85d 	bl	8009ca8 <_lseek_r>
 8009bee:	1c43      	adds	r3, r0, #1
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	bf15      	itete	ne
 8009bf4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009bfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009bfe:	81a3      	strheq	r3, [r4, #12]
 8009c00:	bf18      	it	ne
 8009c02:	81a3      	strhne	r3, [r4, #12]
 8009c04:	bd10      	pop	{r4, pc}

08009c06 <__sclose>:
 8009c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c0a:	f000 b83d 	b.w	8009c88 <_close_r>

08009c0e <memset>:
 8009c0e:	4402      	add	r2, r0
 8009c10:	4603      	mov	r3, r0
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d100      	bne.n	8009c18 <memset+0xa>
 8009c16:	4770      	bx	lr
 8009c18:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1c:	e7f9      	b.n	8009c12 <memset+0x4>

08009c1e <_raise_r>:
 8009c1e:	291f      	cmp	r1, #31
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4604      	mov	r4, r0
 8009c24:	460d      	mov	r5, r1
 8009c26:	d904      	bls.n	8009c32 <_raise_r+0x14>
 8009c28:	2316      	movs	r3, #22
 8009c2a:	6003      	str	r3, [r0, #0]
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	bd38      	pop	{r3, r4, r5, pc}
 8009c32:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009c34:	b112      	cbz	r2, 8009c3c <_raise_r+0x1e>
 8009c36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c3a:	b94b      	cbnz	r3, 8009c50 <_raise_r+0x32>
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f000 f869 	bl	8009d14 <_getpid_r>
 8009c42:	462a      	mov	r2, r5
 8009c44:	4601      	mov	r1, r0
 8009c46:	4620      	mov	r0, r4
 8009c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c4c:	f000 b850 	b.w	8009cf0 <_kill_r>
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d00a      	beq.n	8009c6a <_raise_r+0x4c>
 8009c54:	1c59      	adds	r1, r3, #1
 8009c56:	d103      	bne.n	8009c60 <_raise_r+0x42>
 8009c58:	2316      	movs	r3, #22
 8009c5a:	6003      	str	r3, [r0, #0]
 8009c5c:	2001      	movs	r0, #1
 8009c5e:	e7e7      	b.n	8009c30 <_raise_r+0x12>
 8009c60:	2400      	movs	r4, #0
 8009c62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c66:	4628      	mov	r0, r5
 8009c68:	4798      	blx	r3
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e7e0      	b.n	8009c30 <_raise_r+0x12>
	...

08009c70 <raise>:
 8009c70:	4b02      	ldr	r3, [pc, #8]	; (8009c7c <raise+0xc>)
 8009c72:	4601      	mov	r1, r0
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	f7ff bfd2 	b.w	8009c1e <_raise_r>
 8009c7a:	bf00      	nop
 8009c7c:	20000070 	.word	0x20000070

08009c80 <_localeconv_r>:
 8009c80:	4800      	ldr	r0, [pc, #0]	; (8009c84 <_localeconv_r+0x4>)
 8009c82:	4770      	bx	lr
 8009c84:	20000164 	.word	0x20000164

08009c88 <_close_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4d06      	ldr	r5, [pc, #24]	; (8009ca4 <_close_r+0x1c>)
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	4604      	mov	r4, r0
 8009c90:	4608      	mov	r0, r1
 8009c92:	602b      	str	r3, [r5, #0]
 8009c94:	f7f9 fb57 	bl	8003346 <_close>
 8009c98:	1c43      	adds	r3, r0, #1
 8009c9a:	d102      	bne.n	8009ca2 <_close_r+0x1a>
 8009c9c:	682b      	ldr	r3, [r5, #0]
 8009c9e:	b103      	cbz	r3, 8009ca2 <_close_r+0x1a>
 8009ca0:	6023      	str	r3, [r4, #0]
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
 8009ca4:	2000092c 	.word	0x2000092c

08009ca8 <_lseek_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d07      	ldr	r5, [pc, #28]	; (8009cc8 <_lseek_r+0x20>)
 8009cac:	4604      	mov	r4, r0
 8009cae:	4608      	mov	r0, r1
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	602a      	str	r2, [r5, #0]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f7f9 fb6c 	bl	8003394 <_lseek>
 8009cbc:	1c43      	adds	r3, r0, #1
 8009cbe:	d102      	bne.n	8009cc6 <_lseek_r+0x1e>
 8009cc0:	682b      	ldr	r3, [r5, #0]
 8009cc2:	b103      	cbz	r3, 8009cc6 <_lseek_r+0x1e>
 8009cc4:	6023      	str	r3, [r4, #0]
 8009cc6:	bd38      	pop	{r3, r4, r5, pc}
 8009cc8:	2000092c 	.word	0x2000092c

08009ccc <_read_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4d07      	ldr	r5, [pc, #28]	; (8009cec <_read_r+0x20>)
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	4608      	mov	r0, r1
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	602a      	str	r2, [r5, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f7f9 fafa 	bl	80032d4 <_read>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_read_r+0x1e>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_read_r+0x1e>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	2000092c 	.word	0x2000092c

08009cf0 <_kill_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	; (8009d10 <_kill_r+0x20>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	f7f9 facf 	bl	80032a0 <_kill>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d102      	bne.n	8009d0c <_kill_r+0x1c>
 8009d06:	682b      	ldr	r3, [r5, #0]
 8009d08:	b103      	cbz	r3, 8009d0c <_kill_r+0x1c>
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop
 8009d10:	2000092c 	.word	0x2000092c

08009d14 <_getpid_r>:
 8009d14:	f7f9 babc 	b.w	8003290 <_getpid>

08009d18 <_sbrk_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d06      	ldr	r5, [pc, #24]	; (8009d34 <_sbrk_r+0x1c>)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	602b      	str	r3, [r5, #0]
 8009d24:	f7f9 fb44 	bl	80033b0 <_sbrk>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_sbrk_r+0x1a>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_sbrk_r+0x1a>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	2000092c 	.word	0x2000092c

08009d38 <_write_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d07      	ldr	r5, [pc, #28]	; (8009d58 <_write_r+0x20>)
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	4608      	mov	r0, r1
 8009d40:	4611      	mov	r1, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	602a      	str	r2, [r5, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f7f9 fae1 	bl	800330e <_write>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_write_r+0x1e>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_write_r+0x1e>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	2000092c 	.word	0x2000092c

08009d5c <__errno>:
 8009d5c:	4b01      	ldr	r3, [pc, #4]	; (8009d64 <__errno+0x8>)
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20000070 	.word	0x20000070

08009d68 <__libc_init_array>:
 8009d68:	b570      	push	{r4, r5, r6, lr}
 8009d6a:	4d0d      	ldr	r5, [pc, #52]	; (8009da0 <__libc_init_array+0x38>)
 8009d6c:	4c0d      	ldr	r4, [pc, #52]	; (8009da4 <__libc_init_array+0x3c>)
 8009d6e:	1b64      	subs	r4, r4, r5
 8009d70:	10a4      	asrs	r4, r4, #2
 8009d72:	2600      	movs	r6, #0
 8009d74:	42a6      	cmp	r6, r4
 8009d76:	d109      	bne.n	8009d8c <__libc_init_array+0x24>
 8009d78:	4d0b      	ldr	r5, [pc, #44]	; (8009da8 <__libc_init_array+0x40>)
 8009d7a:	4c0c      	ldr	r4, [pc, #48]	; (8009dac <__libc_init_array+0x44>)
 8009d7c:	f001 ff88 	bl	800bc90 <_init>
 8009d80:	1b64      	subs	r4, r4, r5
 8009d82:	10a4      	asrs	r4, r4, #2
 8009d84:	2600      	movs	r6, #0
 8009d86:	42a6      	cmp	r6, r4
 8009d88:	d105      	bne.n	8009d96 <__libc_init_array+0x2e>
 8009d8a:	bd70      	pop	{r4, r5, r6, pc}
 8009d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d90:	4798      	blx	r3
 8009d92:	3601      	adds	r6, #1
 8009d94:	e7ee      	b.n	8009d74 <__libc_init_array+0xc>
 8009d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d9a:	4798      	blx	r3
 8009d9c:	3601      	adds	r6, #1
 8009d9e:	e7f2      	b.n	8009d86 <__libc_init_array+0x1e>
 8009da0:	0800cfbc 	.word	0x0800cfbc
 8009da4:	0800cfbc 	.word	0x0800cfbc
 8009da8:	0800cfbc 	.word	0x0800cfbc
 8009dac:	0800cfc0 	.word	0x0800cfc0

08009db0 <__retarget_lock_init_recursive>:
 8009db0:	4770      	bx	lr

08009db2 <__retarget_lock_acquire_recursive>:
 8009db2:	4770      	bx	lr

08009db4 <__retarget_lock_release_recursive>:
 8009db4:	4770      	bx	lr

08009db6 <memcpy>:
 8009db6:	440a      	add	r2, r1
 8009db8:	4291      	cmp	r1, r2
 8009dba:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dbe:	d100      	bne.n	8009dc2 <memcpy+0xc>
 8009dc0:	4770      	bx	lr
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dcc:	4291      	cmp	r1, r2
 8009dce:	d1f9      	bne.n	8009dc4 <memcpy+0xe>
 8009dd0:	bd10      	pop	{r4, pc}

08009dd2 <quorem>:
 8009dd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd6:	6903      	ldr	r3, [r0, #16]
 8009dd8:	690c      	ldr	r4, [r1, #16]
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	4607      	mov	r7, r0
 8009dde:	db7e      	blt.n	8009ede <quorem+0x10c>
 8009de0:	3c01      	subs	r4, #1
 8009de2:	f101 0814 	add.w	r8, r1, #20
 8009de6:	f100 0514 	add.w	r5, r0, #20
 8009dea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009df4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e04:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e08:	d331      	bcc.n	8009e6e <quorem+0x9c>
 8009e0a:	f04f 0e00 	mov.w	lr, #0
 8009e0e:	4640      	mov	r0, r8
 8009e10:	46ac      	mov	ip, r5
 8009e12:	46f2      	mov	sl, lr
 8009e14:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e18:	b293      	uxth	r3, r2
 8009e1a:	fb06 e303 	mla	r3, r6, r3, lr
 8009e1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e22:	0c1a      	lsrs	r2, r3, #16
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	ebaa 0303 	sub.w	r3, sl, r3
 8009e2a:	f8dc a000 	ldr.w	sl, [ip]
 8009e2e:	fa13 f38a 	uxtah	r3, r3, sl
 8009e32:	fb06 220e 	mla	r2, r6, lr, r2
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e3e:	b292      	uxth	r2, r2
 8009e40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e48:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e4c:	4581      	cmp	r9, r0
 8009e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e52:	f84c 3b04 	str.w	r3, [ip], #4
 8009e56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e5a:	d2db      	bcs.n	8009e14 <quorem+0x42>
 8009e5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e60:	b92b      	cbnz	r3, 8009e6e <quorem+0x9c>
 8009e62:	9b01      	ldr	r3, [sp, #4]
 8009e64:	3b04      	subs	r3, #4
 8009e66:	429d      	cmp	r5, r3
 8009e68:	461a      	mov	r2, r3
 8009e6a:	d32c      	bcc.n	8009ec6 <quorem+0xf4>
 8009e6c:	613c      	str	r4, [r7, #16]
 8009e6e:	4638      	mov	r0, r7
 8009e70:	f001 f8f4 	bl	800b05c <__mcmp>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	db22      	blt.n	8009ebe <quorem+0xec>
 8009e78:	3601      	adds	r6, #1
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e82:	f8d1 c000 	ldr.w	ip, [r1]
 8009e86:	b293      	uxth	r3, r2
 8009e88:	1ac3      	subs	r3, r0, r3
 8009e8a:	0c12      	lsrs	r2, r2, #16
 8009e8c:	fa13 f38c 	uxtah	r3, r3, ip
 8009e90:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009e94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e9e:	45c1      	cmp	r9, r8
 8009ea0:	f841 3b04 	str.w	r3, [r1], #4
 8009ea4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ea8:	d2e9      	bcs.n	8009e7e <quorem+0xac>
 8009eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eb2:	b922      	cbnz	r2, 8009ebe <quorem+0xec>
 8009eb4:	3b04      	subs	r3, #4
 8009eb6:	429d      	cmp	r5, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	d30a      	bcc.n	8009ed2 <quorem+0x100>
 8009ebc:	613c      	str	r4, [r7, #16]
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	b003      	add	sp, #12
 8009ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	3b04      	subs	r3, #4
 8009eca:	2a00      	cmp	r2, #0
 8009ecc:	d1ce      	bne.n	8009e6c <quorem+0x9a>
 8009ece:	3c01      	subs	r4, #1
 8009ed0:	e7c9      	b.n	8009e66 <quorem+0x94>
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	3b04      	subs	r3, #4
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	d1f0      	bne.n	8009ebc <quorem+0xea>
 8009eda:	3c01      	subs	r4, #1
 8009edc:	e7eb      	b.n	8009eb6 <quorem+0xe4>
 8009ede:	2000      	movs	r0, #0
 8009ee0:	e7ee      	b.n	8009ec0 <quorem+0xee>
 8009ee2:	0000      	movs	r0, r0
 8009ee4:	0000      	movs	r0, r0
	...

08009ee8 <_dtoa_r>:
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	ed2d 8b04 	vpush	{d8-d9}
 8009ef0:	69c5      	ldr	r5, [r0, #28]
 8009ef2:	b093      	sub	sp, #76	; 0x4c
 8009ef4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009ef8:	ec57 6b10 	vmov	r6, r7, d0
 8009efc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f00:	9107      	str	r1, [sp, #28]
 8009f02:	4604      	mov	r4, r0
 8009f04:	920a      	str	r2, [sp, #40]	; 0x28
 8009f06:	930d      	str	r3, [sp, #52]	; 0x34
 8009f08:	b975      	cbnz	r5, 8009f28 <_dtoa_r+0x40>
 8009f0a:	2010      	movs	r0, #16
 8009f0c:	f7ff f824 	bl	8008f58 <malloc>
 8009f10:	4602      	mov	r2, r0
 8009f12:	61e0      	str	r0, [r4, #28]
 8009f14:	b920      	cbnz	r0, 8009f20 <_dtoa_r+0x38>
 8009f16:	4bae      	ldr	r3, [pc, #696]	; (800a1d0 <_dtoa_r+0x2e8>)
 8009f18:	21ef      	movs	r1, #239	; 0xef
 8009f1a:	48ae      	ldr	r0, [pc, #696]	; (800a1d4 <_dtoa_r+0x2ec>)
 8009f1c:	f001 fbbe 	bl	800b69c <__assert_func>
 8009f20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f24:	6005      	str	r5, [r0, #0]
 8009f26:	60c5      	str	r5, [r0, #12]
 8009f28:	69e3      	ldr	r3, [r4, #28]
 8009f2a:	6819      	ldr	r1, [r3, #0]
 8009f2c:	b151      	cbz	r1, 8009f44 <_dtoa_r+0x5c>
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	604a      	str	r2, [r1, #4]
 8009f32:	2301      	movs	r3, #1
 8009f34:	4093      	lsls	r3, r2
 8009f36:	608b      	str	r3, [r1, #8]
 8009f38:	4620      	mov	r0, r4
 8009f3a:	f000 fe53 	bl	800abe4 <_Bfree>
 8009f3e:	69e3      	ldr	r3, [r4, #28]
 8009f40:	2200      	movs	r2, #0
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	1e3b      	subs	r3, r7, #0
 8009f46:	bfbb      	ittet	lt
 8009f48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f4c:	9303      	strlt	r3, [sp, #12]
 8009f4e:	2300      	movge	r3, #0
 8009f50:	2201      	movlt	r2, #1
 8009f52:	bfac      	ite	ge
 8009f54:	f8c8 3000 	strge.w	r3, [r8]
 8009f58:	f8c8 2000 	strlt.w	r2, [r8]
 8009f5c:	4b9e      	ldr	r3, [pc, #632]	; (800a1d8 <_dtoa_r+0x2f0>)
 8009f5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f62:	ea33 0308 	bics.w	r3, r3, r8
 8009f66:	d11b      	bne.n	8009fa0 <_dtoa_r+0xb8>
 8009f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f6e:	6013      	str	r3, [r2, #0]
 8009f70:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f74:	4333      	orrs	r3, r6
 8009f76:	f000 8593 	beq.w	800aaa0 <_dtoa_r+0xbb8>
 8009f7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f7c:	b963      	cbnz	r3, 8009f98 <_dtoa_r+0xb0>
 8009f7e:	4b97      	ldr	r3, [pc, #604]	; (800a1dc <_dtoa_r+0x2f4>)
 8009f80:	e027      	b.n	8009fd2 <_dtoa_r+0xea>
 8009f82:	4b97      	ldr	r3, [pc, #604]	; (800a1e0 <_dtoa_r+0x2f8>)
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	3308      	adds	r3, #8
 8009f88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f8a:	6013      	str	r3, [r2, #0]
 8009f8c:	9800      	ldr	r0, [sp, #0]
 8009f8e:	b013      	add	sp, #76	; 0x4c
 8009f90:	ecbd 8b04 	vpop	{d8-d9}
 8009f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f98:	4b90      	ldr	r3, [pc, #576]	; (800a1dc <_dtoa_r+0x2f4>)
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	3303      	adds	r3, #3
 8009f9e:	e7f3      	b.n	8009f88 <_dtoa_r+0xa0>
 8009fa0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	ec51 0b17 	vmov	r0, r1, d7
 8009faa:	eeb0 8a47 	vmov.f32	s16, s14
 8009fae:	eef0 8a67 	vmov.f32	s17, s15
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f7f6 fd90 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fb8:	4681      	mov	r9, r0
 8009fba:	b160      	cbz	r0, 8009fd6 <_dtoa_r+0xee>
 8009fbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 8568 	beq.w	800aa9a <_dtoa_r+0xbb2>
 8009fca:	4b86      	ldr	r3, [pc, #536]	; (800a1e4 <_dtoa_r+0x2fc>)
 8009fcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	e7da      	b.n	8009f8c <_dtoa_r+0xa4>
 8009fd6:	aa10      	add	r2, sp, #64	; 0x40
 8009fd8:	a911      	add	r1, sp, #68	; 0x44
 8009fda:	4620      	mov	r0, r4
 8009fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8009fe0:	eef0 0a68 	vmov.f32	s1, s17
 8009fe4:	f001 f8e0 	bl	800b1a8 <__d2b>
 8009fe8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009fec:	4682      	mov	sl, r0
 8009fee:	2d00      	cmp	r5, #0
 8009ff0:	d07f      	beq.n	800a0f2 <_dtoa_r+0x20a>
 8009ff2:	ee18 3a90 	vmov	r3, s17
 8009ff6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ffa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009ffe:	ec51 0b18 	vmov	r0, r1, d8
 800a002:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a00a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a00e:	4619      	mov	r1, r3
 800a010:	2200      	movs	r2, #0
 800a012:	4b75      	ldr	r3, [pc, #468]	; (800a1e8 <_dtoa_r+0x300>)
 800a014:	f7f6 f940 	bl	8000298 <__aeabi_dsub>
 800a018:	a367      	add	r3, pc, #412	; (adr r3, 800a1b8 <_dtoa_r+0x2d0>)
 800a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01e:	f7f6 faf3 	bl	8000608 <__aeabi_dmul>
 800a022:	a367      	add	r3, pc, #412	; (adr r3, 800a1c0 <_dtoa_r+0x2d8>)
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	f7f6 f938 	bl	800029c <__adddf3>
 800a02c:	4606      	mov	r6, r0
 800a02e:	4628      	mov	r0, r5
 800a030:	460f      	mov	r7, r1
 800a032:	f7f6 fa7f 	bl	8000534 <__aeabi_i2d>
 800a036:	a364      	add	r3, pc, #400	; (adr r3, 800a1c8 <_dtoa_r+0x2e0>)
 800a038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03c:	f7f6 fae4 	bl	8000608 <__aeabi_dmul>
 800a040:	4602      	mov	r2, r0
 800a042:	460b      	mov	r3, r1
 800a044:	4630      	mov	r0, r6
 800a046:	4639      	mov	r1, r7
 800a048:	f7f6 f928 	bl	800029c <__adddf3>
 800a04c:	4606      	mov	r6, r0
 800a04e:	460f      	mov	r7, r1
 800a050:	f7f6 fd8a 	bl	8000b68 <__aeabi_d2iz>
 800a054:	2200      	movs	r2, #0
 800a056:	4683      	mov	fp, r0
 800a058:	2300      	movs	r3, #0
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 fd45 	bl	8000aec <__aeabi_dcmplt>
 800a062:	b148      	cbz	r0, 800a078 <_dtoa_r+0x190>
 800a064:	4658      	mov	r0, fp
 800a066:	f7f6 fa65 	bl	8000534 <__aeabi_i2d>
 800a06a:	4632      	mov	r2, r6
 800a06c:	463b      	mov	r3, r7
 800a06e:	f7f6 fd33 	bl	8000ad8 <__aeabi_dcmpeq>
 800a072:	b908      	cbnz	r0, 800a078 <_dtoa_r+0x190>
 800a074:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a078:	f1bb 0f16 	cmp.w	fp, #22
 800a07c:	d857      	bhi.n	800a12e <_dtoa_r+0x246>
 800a07e:	4b5b      	ldr	r3, [pc, #364]	; (800a1ec <_dtoa_r+0x304>)
 800a080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a088:	ec51 0b18 	vmov	r0, r1, d8
 800a08c:	f7f6 fd2e 	bl	8000aec <__aeabi_dcmplt>
 800a090:	2800      	cmp	r0, #0
 800a092:	d04e      	beq.n	800a132 <_dtoa_r+0x24a>
 800a094:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a098:	2300      	movs	r3, #0
 800a09a:	930c      	str	r3, [sp, #48]	; 0x30
 800a09c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a09e:	1b5b      	subs	r3, r3, r5
 800a0a0:	1e5a      	subs	r2, r3, #1
 800a0a2:	bf45      	ittet	mi
 800a0a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a0a8:	9305      	strmi	r3, [sp, #20]
 800a0aa:	2300      	movpl	r3, #0
 800a0ac:	2300      	movmi	r3, #0
 800a0ae:	9206      	str	r2, [sp, #24]
 800a0b0:	bf54      	ite	pl
 800a0b2:	9305      	strpl	r3, [sp, #20]
 800a0b4:	9306      	strmi	r3, [sp, #24]
 800a0b6:	f1bb 0f00 	cmp.w	fp, #0
 800a0ba:	db3c      	blt.n	800a136 <_dtoa_r+0x24e>
 800a0bc:	9b06      	ldr	r3, [sp, #24]
 800a0be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a0c2:	445b      	add	r3, fp
 800a0c4:	9306      	str	r3, [sp, #24]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9308      	str	r3, [sp, #32]
 800a0ca:	9b07      	ldr	r3, [sp, #28]
 800a0cc:	2b09      	cmp	r3, #9
 800a0ce:	d868      	bhi.n	800a1a2 <_dtoa_r+0x2ba>
 800a0d0:	2b05      	cmp	r3, #5
 800a0d2:	bfc4      	itt	gt
 800a0d4:	3b04      	subgt	r3, #4
 800a0d6:	9307      	strgt	r3, [sp, #28]
 800a0d8:	9b07      	ldr	r3, [sp, #28]
 800a0da:	f1a3 0302 	sub.w	r3, r3, #2
 800a0de:	bfcc      	ite	gt
 800a0e0:	2500      	movgt	r5, #0
 800a0e2:	2501      	movle	r5, #1
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	f200 8085 	bhi.w	800a1f4 <_dtoa_r+0x30c>
 800a0ea:	e8df f003 	tbb	[pc, r3]
 800a0ee:	3b2e      	.short	0x3b2e
 800a0f0:	5839      	.short	0x5839
 800a0f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a0f6:	441d      	add	r5, r3
 800a0f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	bfc1      	itttt	gt
 800a100:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a104:	fa08 f803 	lslgt.w	r8, r8, r3
 800a108:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a10c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a110:	bfd6      	itet	le
 800a112:	f1c3 0320 	rsble	r3, r3, #32
 800a116:	ea48 0003 	orrgt.w	r0, r8, r3
 800a11a:	fa06 f003 	lslle.w	r0, r6, r3
 800a11e:	f7f6 f9f9 	bl	8000514 <__aeabi_ui2d>
 800a122:	2201      	movs	r2, #1
 800a124:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a128:	3d01      	subs	r5, #1
 800a12a:	920e      	str	r2, [sp, #56]	; 0x38
 800a12c:	e76f      	b.n	800a00e <_dtoa_r+0x126>
 800a12e:	2301      	movs	r3, #1
 800a130:	e7b3      	b.n	800a09a <_dtoa_r+0x1b2>
 800a132:	900c      	str	r0, [sp, #48]	; 0x30
 800a134:	e7b2      	b.n	800a09c <_dtoa_r+0x1b4>
 800a136:	9b05      	ldr	r3, [sp, #20]
 800a138:	eba3 030b 	sub.w	r3, r3, fp
 800a13c:	9305      	str	r3, [sp, #20]
 800a13e:	f1cb 0300 	rsb	r3, fp, #0
 800a142:	9308      	str	r3, [sp, #32]
 800a144:	2300      	movs	r3, #0
 800a146:	930b      	str	r3, [sp, #44]	; 0x2c
 800a148:	e7bf      	b.n	800a0ca <_dtoa_r+0x1e2>
 800a14a:	2300      	movs	r3, #0
 800a14c:	9309      	str	r3, [sp, #36]	; 0x24
 800a14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a150:	2b00      	cmp	r3, #0
 800a152:	dc52      	bgt.n	800a1fa <_dtoa_r+0x312>
 800a154:	2301      	movs	r3, #1
 800a156:	9301      	str	r3, [sp, #4]
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	461a      	mov	r2, r3
 800a15c:	920a      	str	r2, [sp, #40]	; 0x28
 800a15e:	e00b      	b.n	800a178 <_dtoa_r+0x290>
 800a160:	2301      	movs	r3, #1
 800a162:	e7f3      	b.n	800a14c <_dtoa_r+0x264>
 800a164:	2300      	movs	r3, #0
 800a166:	9309      	str	r3, [sp, #36]	; 0x24
 800a168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16a:	445b      	add	r3, fp
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	3301      	adds	r3, #1
 800a170:	2b01      	cmp	r3, #1
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	bfb8      	it	lt
 800a176:	2301      	movlt	r3, #1
 800a178:	69e0      	ldr	r0, [r4, #28]
 800a17a:	2100      	movs	r1, #0
 800a17c:	2204      	movs	r2, #4
 800a17e:	f102 0614 	add.w	r6, r2, #20
 800a182:	429e      	cmp	r6, r3
 800a184:	d93d      	bls.n	800a202 <_dtoa_r+0x31a>
 800a186:	6041      	str	r1, [r0, #4]
 800a188:	4620      	mov	r0, r4
 800a18a:	f000 fceb 	bl	800ab64 <_Balloc>
 800a18e:	9000      	str	r0, [sp, #0]
 800a190:	2800      	cmp	r0, #0
 800a192:	d139      	bne.n	800a208 <_dtoa_r+0x320>
 800a194:	4b16      	ldr	r3, [pc, #88]	; (800a1f0 <_dtoa_r+0x308>)
 800a196:	4602      	mov	r2, r0
 800a198:	f240 11af 	movw	r1, #431	; 0x1af
 800a19c:	e6bd      	b.n	8009f1a <_dtoa_r+0x32>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7e1      	b.n	800a166 <_dtoa_r+0x27e>
 800a1a2:	2501      	movs	r5, #1
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9307      	str	r3, [sp, #28]
 800a1a8:	9509      	str	r5, [sp, #36]	; 0x24
 800a1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ae:	9301      	str	r3, [sp, #4]
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2312      	movs	r3, #18
 800a1b6:	e7d1      	b.n	800a15c <_dtoa_r+0x274>
 800a1b8:	636f4361 	.word	0x636f4361
 800a1bc:	3fd287a7 	.word	0x3fd287a7
 800a1c0:	8b60c8b3 	.word	0x8b60c8b3
 800a1c4:	3fc68a28 	.word	0x3fc68a28
 800a1c8:	509f79fb 	.word	0x509f79fb
 800a1cc:	3fd34413 	.word	0x3fd34413
 800a1d0:	0800cc8d 	.word	0x0800cc8d
 800a1d4:	0800cca4 	.word	0x0800cca4
 800a1d8:	7ff00000 	.word	0x7ff00000
 800a1dc:	0800cc89 	.word	0x0800cc89
 800a1e0:	0800cc80 	.word	0x0800cc80
 800a1e4:	0800cc5d 	.word	0x0800cc5d
 800a1e8:	3ff80000 	.word	0x3ff80000
 800a1ec:	0800cd90 	.word	0x0800cd90
 800a1f0:	0800ccfc 	.word	0x0800ccfc
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f8:	e7d7      	b.n	800a1aa <_dtoa_r+0x2c2>
 800a1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	9304      	str	r3, [sp, #16]
 800a200:	e7ba      	b.n	800a178 <_dtoa_r+0x290>
 800a202:	3101      	adds	r1, #1
 800a204:	0052      	lsls	r2, r2, #1
 800a206:	e7ba      	b.n	800a17e <_dtoa_r+0x296>
 800a208:	69e3      	ldr	r3, [r4, #28]
 800a20a:	9a00      	ldr	r2, [sp, #0]
 800a20c:	601a      	str	r2, [r3, #0]
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	2b0e      	cmp	r3, #14
 800a212:	f200 80a8 	bhi.w	800a366 <_dtoa_r+0x47e>
 800a216:	2d00      	cmp	r5, #0
 800a218:	f000 80a5 	beq.w	800a366 <_dtoa_r+0x47e>
 800a21c:	f1bb 0f00 	cmp.w	fp, #0
 800a220:	dd38      	ble.n	800a294 <_dtoa_r+0x3ac>
 800a222:	4bc0      	ldr	r3, [pc, #768]	; (800a524 <_dtoa_r+0x63c>)
 800a224:	f00b 020f 	and.w	r2, fp, #15
 800a228:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a22c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a230:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a234:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a238:	d019      	beq.n	800a26e <_dtoa_r+0x386>
 800a23a:	4bbb      	ldr	r3, [pc, #748]	; (800a528 <_dtoa_r+0x640>)
 800a23c:	ec51 0b18 	vmov	r0, r1, d8
 800a240:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a244:	f7f6 fb0a 	bl	800085c <__aeabi_ddiv>
 800a248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a24c:	f008 080f 	and.w	r8, r8, #15
 800a250:	2503      	movs	r5, #3
 800a252:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a528 <_dtoa_r+0x640>
 800a256:	f1b8 0f00 	cmp.w	r8, #0
 800a25a:	d10a      	bne.n	800a272 <_dtoa_r+0x38a>
 800a25c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a260:	4632      	mov	r2, r6
 800a262:	463b      	mov	r3, r7
 800a264:	f7f6 fafa 	bl	800085c <__aeabi_ddiv>
 800a268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a26c:	e02b      	b.n	800a2c6 <_dtoa_r+0x3de>
 800a26e:	2502      	movs	r5, #2
 800a270:	e7ef      	b.n	800a252 <_dtoa_r+0x36a>
 800a272:	f018 0f01 	tst.w	r8, #1
 800a276:	d008      	beq.n	800a28a <_dtoa_r+0x3a2>
 800a278:	4630      	mov	r0, r6
 800a27a:	4639      	mov	r1, r7
 800a27c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a280:	f7f6 f9c2 	bl	8000608 <__aeabi_dmul>
 800a284:	3501      	adds	r5, #1
 800a286:	4606      	mov	r6, r0
 800a288:	460f      	mov	r7, r1
 800a28a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a28e:	f109 0908 	add.w	r9, r9, #8
 800a292:	e7e0      	b.n	800a256 <_dtoa_r+0x36e>
 800a294:	f000 809f 	beq.w	800a3d6 <_dtoa_r+0x4ee>
 800a298:	f1cb 0600 	rsb	r6, fp, #0
 800a29c:	4ba1      	ldr	r3, [pc, #644]	; (800a524 <_dtoa_r+0x63c>)
 800a29e:	4fa2      	ldr	r7, [pc, #648]	; (800a528 <_dtoa_r+0x640>)
 800a2a0:	f006 020f 	and.w	r2, r6, #15
 800a2a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ac:	ec51 0b18 	vmov	r0, r1, d8
 800a2b0:	f7f6 f9aa 	bl	8000608 <__aeabi_dmul>
 800a2b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b8:	1136      	asrs	r6, r6, #4
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2502      	movs	r5, #2
 800a2be:	2e00      	cmp	r6, #0
 800a2c0:	d17e      	bne.n	800a3c0 <_dtoa_r+0x4d8>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1d0      	bne.n	800a268 <_dtoa_r+0x380>
 800a2c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 8084 	beq.w	800a3da <_dtoa_r+0x4f2>
 800a2d2:	4b96      	ldr	r3, [pc, #600]	; (800a52c <_dtoa_r+0x644>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	4640      	mov	r0, r8
 800a2d8:	4649      	mov	r1, r9
 800a2da:	f7f6 fc07 	bl	8000aec <__aeabi_dcmplt>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d07b      	beq.n	800a3da <_dtoa_r+0x4f2>
 800a2e2:	9b04      	ldr	r3, [sp, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d078      	beq.n	800a3da <_dtoa_r+0x4f2>
 800a2e8:	9b01      	ldr	r3, [sp, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	dd39      	ble.n	800a362 <_dtoa_r+0x47a>
 800a2ee:	4b90      	ldr	r3, [pc, #576]	; (800a530 <_dtoa_r+0x648>)
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	f7f6 f987 	bl	8000608 <__aeabi_dmul>
 800a2fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2fe:	9e01      	ldr	r6, [sp, #4]
 800a300:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a304:	3501      	adds	r5, #1
 800a306:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a30a:	4628      	mov	r0, r5
 800a30c:	f7f6 f912 	bl	8000534 <__aeabi_i2d>
 800a310:	4642      	mov	r2, r8
 800a312:	464b      	mov	r3, r9
 800a314:	f7f6 f978 	bl	8000608 <__aeabi_dmul>
 800a318:	4b86      	ldr	r3, [pc, #536]	; (800a534 <_dtoa_r+0x64c>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	f7f5 ffbe 	bl	800029c <__adddf3>
 800a320:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a328:	9303      	str	r3, [sp, #12]
 800a32a:	2e00      	cmp	r6, #0
 800a32c:	d158      	bne.n	800a3e0 <_dtoa_r+0x4f8>
 800a32e:	4b82      	ldr	r3, [pc, #520]	; (800a538 <_dtoa_r+0x650>)
 800a330:	2200      	movs	r2, #0
 800a332:	4640      	mov	r0, r8
 800a334:	4649      	mov	r1, r9
 800a336:	f7f5 ffaf 	bl	8000298 <__aeabi_dsub>
 800a33a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a33e:	4680      	mov	r8, r0
 800a340:	4689      	mov	r9, r1
 800a342:	f7f6 fbf1 	bl	8000b28 <__aeabi_dcmpgt>
 800a346:	2800      	cmp	r0, #0
 800a348:	f040 8296 	bne.w	800a878 <_dtoa_r+0x990>
 800a34c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a350:	4640      	mov	r0, r8
 800a352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a356:	4649      	mov	r1, r9
 800a358:	f7f6 fbc8 	bl	8000aec <__aeabi_dcmplt>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	f040 8289 	bne.w	800a874 <_dtoa_r+0x98c>
 800a362:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a366:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a368:	2b00      	cmp	r3, #0
 800a36a:	f2c0 814e 	blt.w	800a60a <_dtoa_r+0x722>
 800a36e:	f1bb 0f0e 	cmp.w	fp, #14
 800a372:	f300 814a 	bgt.w	800a60a <_dtoa_r+0x722>
 800a376:	4b6b      	ldr	r3, [pc, #428]	; (800a524 <_dtoa_r+0x63c>)
 800a378:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a37c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a382:	2b00      	cmp	r3, #0
 800a384:	f280 80dc 	bge.w	800a540 <_dtoa_r+0x658>
 800a388:	9b04      	ldr	r3, [sp, #16]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f300 80d8 	bgt.w	800a540 <_dtoa_r+0x658>
 800a390:	f040 826f 	bne.w	800a872 <_dtoa_r+0x98a>
 800a394:	4b68      	ldr	r3, [pc, #416]	; (800a538 <_dtoa_r+0x650>)
 800a396:	2200      	movs	r2, #0
 800a398:	4640      	mov	r0, r8
 800a39a:	4649      	mov	r1, r9
 800a39c:	f7f6 f934 	bl	8000608 <__aeabi_dmul>
 800a3a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3a4:	f7f6 fbb6 	bl	8000b14 <__aeabi_dcmpge>
 800a3a8:	9e04      	ldr	r6, [sp, #16]
 800a3aa:	4637      	mov	r7, r6
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f040 8245 	bne.w	800a83c <_dtoa_r+0x954>
 800a3b2:	9d00      	ldr	r5, [sp, #0]
 800a3b4:	2331      	movs	r3, #49	; 0x31
 800a3b6:	f805 3b01 	strb.w	r3, [r5], #1
 800a3ba:	f10b 0b01 	add.w	fp, fp, #1
 800a3be:	e241      	b.n	800a844 <_dtoa_r+0x95c>
 800a3c0:	07f2      	lsls	r2, r6, #31
 800a3c2:	d505      	bpl.n	800a3d0 <_dtoa_r+0x4e8>
 800a3c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3c8:	f7f6 f91e 	bl	8000608 <__aeabi_dmul>
 800a3cc:	3501      	adds	r5, #1
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	1076      	asrs	r6, r6, #1
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	e773      	b.n	800a2be <_dtoa_r+0x3d6>
 800a3d6:	2502      	movs	r5, #2
 800a3d8:	e775      	b.n	800a2c6 <_dtoa_r+0x3de>
 800a3da:	9e04      	ldr	r6, [sp, #16]
 800a3dc:	465f      	mov	r7, fp
 800a3de:	e792      	b.n	800a306 <_dtoa_r+0x41e>
 800a3e0:	9900      	ldr	r1, [sp, #0]
 800a3e2:	4b50      	ldr	r3, [pc, #320]	; (800a524 <_dtoa_r+0x63c>)
 800a3e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a3e8:	4431      	add	r1, r6
 800a3ea:	9102      	str	r1, [sp, #8]
 800a3ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3ee:	eeb0 9a47 	vmov.f32	s18, s14
 800a3f2:	eef0 9a67 	vmov.f32	s19, s15
 800a3f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a3fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3fe:	2900      	cmp	r1, #0
 800a400:	d044      	beq.n	800a48c <_dtoa_r+0x5a4>
 800a402:	494e      	ldr	r1, [pc, #312]	; (800a53c <_dtoa_r+0x654>)
 800a404:	2000      	movs	r0, #0
 800a406:	f7f6 fa29 	bl	800085c <__aeabi_ddiv>
 800a40a:	ec53 2b19 	vmov	r2, r3, d9
 800a40e:	f7f5 ff43 	bl	8000298 <__aeabi_dsub>
 800a412:	9d00      	ldr	r5, [sp, #0]
 800a414:	ec41 0b19 	vmov	d9, r0, r1
 800a418:	4649      	mov	r1, r9
 800a41a:	4640      	mov	r0, r8
 800a41c:	f7f6 fba4 	bl	8000b68 <__aeabi_d2iz>
 800a420:	4606      	mov	r6, r0
 800a422:	f7f6 f887 	bl	8000534 <__aeabi_i2d>
 800a426:	4602      	mov	r2, r0
 800a428:	460b      	mov	r3, r1
 800a42a:	4640      	mov	r0, r8
 800a42c:	4649      	mov	r1, r9
 800a42e:	f7f5 ff33 	bl	8000298 <__aeabi_dsub>
 800a432:	3630      	adds	r6, #48	; 0x30
 800a434:	f805 6b01 	strb.w	r6, [r5], #1
 800a438:	ec53 2b19 	vmov	r2, r3, d9
 800a43c:	4680      	mov	r8, r0
 800a43e:	4689      	mov	r9, r1
 800a440:	f7f6 fb54 	bl	8000aec <__aeabi_dcmplt>
 800a444:	2800      	cmp	r0, #0
 800a446:	d164      	bne.n	800a512 <_dtoa_r+0x62a>
 800a448:	4642      	mov	r2, r8
 800a44a:	464b      	mov	r3, r9
 800a44c:	4937      	ldr	r1, [pc, #220]	; (800a52c <_dtoa_r+0x644>)
 800a44e:	2000      	movs	r0, #0
 800a450:	f7f5 ff22 	bl	8000298 <__aeabi_dsub>
 800a454:	ec53 2b19 	vmov	r2, r3, d9
 800a458:	f7f6 fb48 	bl	8000aec <__aeabi_dcmplt>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	f040 80b6 	bne.w	800a5ce <_dtoa_r+0x6e6>
 800a462:	9b02      	ldr	r3, [sp, #8]
 800a464:	429d      	cmp	r5, r3
 800a466:	f43f af7c 	beq.w	800a362 <_dtoa_r+0x47a>
 800a46a:	4b31      	ldr	r3, [pc, #196]	; (800a530 <_dtoa_r+0x648>)
 800a46c:	ec51 0b19 	vmov	r0, r1, d9
 800a470:	2200      	movs	r2, #0
 800a472:	f7f6 f8c9 	bl	8000608 <__aeabi_dmul>
 800a476:	4b2e      	ldr	r3, [pc, #184]	; (800a530 <_dtoa_r+0x648>)
 800a478:	ec41 0b19 	vmov	d9, r0, r1
 800a47c:	2200      	movs	r2, #0
 800a47e:	4640      	mov	r0, r8
 800a480:	4649      	mov	r1, r9
 800a482:	f7f6 f8c1 	bl	8000608 <__aeabi_dmul>
 800a486:	4680      	mov	r8, r0
 800a488:	4689      	mov	r9, r1
 800a48a:	e7c5      	b.n	800a418 <_dtoa_r+0x530>
 800a48c:	ec51 0b17 	vmov	r0, r1, d7
 800a490:	f7f6 f8ba 	bl	8000608 <__aeabi_dmul>
 800a494:	9b02      	ldr	r3, [sp, #8]
 800a496:	9d00      	ldr	r5, [sp, #0]
 800a498:	930f      	str	r3, [sp, #60]	; 0x3c
 800a49a:	ec41 0b19 	vmov	d9, r0, r1
 800a49e:	4649      	mov	r1, r9
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	f7f6 fb61 	bl	8000b68 <__aeabi_d2iz>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	f7f6 f844 	bl	8000534 <__aeabi_i2d>
 800a4ac:	3630      	adds	r6, #48	; 0x30
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4640      	mov	r0, r8
 800a4b4:	4649      	mov	r1, r9
 800a4b6:	f7f5 feef 	bl	8000298 <__aeabi_dsub>
 800a4ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a4be:	9b02      	ldr	r3, [sp, #8]
 800a4c0:	429d      	cmp	r5, r3
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	4689      	mov	r9, r1
 800a4c6:	f04f 0200 	mov.w	r2, #0
 800a4ca:	d124      	bne.n	800a516 <_dtoa_r+0x62e>
 800a4cc:	4b1b      	ldr	r3, [pc, #108]	; (800a53c <_dtoa_r+0x654>)
 800a4ce:	ec51 0b19 	vmov	r0, r1, d9
 800a4d2:	f7f5 fee3 	bl	800029c <__adddf3>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	460b      	mov	r3, r1
 800a4da:	4640      	mov	r0, r8
 800a4dc:	4649      	mov	r1, r9
 800a4de:	f7f6 fb23 	bl	8000b28 <__aeabi_dcmpgt>
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d173      	bne.n	800a5ce <_dtoa_r+0x6e6>
 800a4e6:	ec53 2b19 	vmov	r2, r3, d9
 800a4ea:	4914      	ldr	r1, [pc, #80]	; (800a53c <_dtoa_r+0x654>)
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f7f5 fed3 	bl	8000298 <__aeabi_dsub>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	460b      	mov	r3, r1
 800a4f6:	4640      	mov	r0, r8
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	f7f6 faf7 	bl	8000aec <__aeabi_dcmplt>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	f43f af2f 	beq.w	800a362 <_dtoa_r+0x47a>
 800a504:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a506:	1e6b      	subs	r3, r5, #1
 800a508:	930f      	str	r3, [sp, #60]	; 0x3c
 800a50a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a50e:	2b30      	cmp	r3, #48	; 0x30
 800a510:	d0f8      	beq.n	800a504 <_dtoa_r+0x61c>
 800a512:	46bb      	mov	fp, r7
 800a514:	e04a      	b.n	800a5ac <_dtoa_r+0x6c4>
 800a516:	4b06      	ldr	r3, [pc, #24]	; (800a530 <_dtoa_r+0x648>)
 800a518:	f7f6 f876 	bl	8000608 <__aeabi_dmul>
 800a51c:	4680      	mov	r8, r0
 800a51e:	4689      	mov	r9, r1
 800a520:	e7bd      	b.n	800a49e <_dtoa_r+0x5b6>
 800a522:	bf00      	nop
 800a524:	0800cd90 	.word	0x0800cd90
 800a528:	0800cd68 	.word	0x0800cd68
 800a52c:	3ff00000 	.word	0x3ff00000
 800a530:	40240000 	.word	0x40240000
 800a534:	401c0000 	.word	0x401c0000
 800a538:	40140000 	.word	0x40140000
 800a53c:	3fe00000 	.word	0x3fe00000
 800a540:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a544:	9d00      	ldr	r5, [sp, #0]
 800a546:	4642      	mov	r2, r8
 800a548:	464b      	mov	r3, r9
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f6 f985 	bl	800085c <__aeabi_ddiv>
 800a552:	f7f6 fb09 	bl	8000b68 <__aeabi_d2iz>
 800a556:	9001      	str	r0, [sp, #4]
 800a558:	f7f5 ffec 	bl	8000534 <__aeabi_i2d>
 800a55c:	4642      	mov	r2, r8
 800a55e:	464b      	mov	r3, r9
 800a560:	f7f6 f852 	bl	8000608 <__aeabi_dmul>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4630      	mov	r0, r6
 800a56a:	4639      	mov	r1, r7
 800a56c:	f7f5 fe94 	bl	8000298 <__aeabi_dsub>
 800a570:	9e01      	ldr	r6, [sp, #4]
 800a572:	9f04      	ldr	r7, [sp, #16]
 800a574:	3630      	adds	r6, #48	; 0x30
 800a576:	f805 6b01 	strb.w	r6, [r5], #1
 800a57a:	9e00      	ldr	r6, [sp, #0]
 800a57c:	1bae      	subs	r6, r5, r6
 800a57e:	42b7      	cmp	r7, r6
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	d134      	bne.n	800a5f0 <_dtoa_r+0x708>
 800a586:	f7f5 fe89 	bl	800029c <__adddf3>
 800a58a:	4642      	mov	r2, r8
 800a58c:	464b      	mov	r3, r9
 800a58e:	4606      	mov	r6, r0
 800a590:	460f      	mov	r7, r1
 800a592:	f7f6 fac9 	bl	8000b28 <__aeabi_dcmpgt>
 800a596:	b9c8      	cbnz	r0, 800a5cc <_dtoa_r+0x6e4>
 800a598:	4642      	mov	r2, r8
 800a59a:	464b      	mov	r3, r9
 800a59c:	4630      	mov	r0, r6
 800a59e:	4639      	mov	r1, r7
 800a5a0:	f7f6 fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5a4:	b110      	cbz	r0, 800a5ac <_dtoa_r+0x6c4>
 800a5a6:	9b01      	ldr	r3, [sp, #4]
 800a5a8:	07db      	lsls	r3, r3, #31
 800a5aa:	d40f      	bmi.n	800a5cc <_dtoa_r+0x6e4>
 800a5ac:	4651      	mov	r1, sl
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	f000 fb18 	bl	800abe4 <_Bfree>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5b8:	702b      	strb	r3, [r5, #0]
 800a5ba:	f10b 0301 	add.w	r3, fp, #1
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f43f ace2 	beq.w	8009f8c <_dtoa_r+0xa4>
 800a5c8:	601d      	str	r5, [r3, #0]
 800a5ca:	e4df      	b.n	8009f8c <_dtoa_r+0xa4>
 800a5cc:	465f      	mov	r7, fp
 800a5ce:	462b      	mov	r3, r5
 800a5d0:	461d      	mov	r5, r3
 800a5d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5d6:	2a39      	cmp	r2, #57	; 0x39
 800a5d8:	d106      	bne.n	800a5e8 <_dtoa_r+0x700>
 800a5da:	9a00      	ldr	r2, [sp, #0]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d1f7      	bne.n	800a5d0 <_dtoa_r+0x6e8>
 800a5e0:	9900      	ldr	r1, [sp, #0]
 800a5e2:	2230      	movs	r2, #48	; 0x30
 800a5e4:	3701      	adds	r7, #1
 800a5e6:	700a      	strb	r2, [r1, #0]
 800a5e8:	781a      	ldrb	r2, [r3, #0]
 800a5ea:	3201      	adds	r2, #1
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	e790      	b.n	800a512 <_dtoa_r+0x62a>
 800a5f0:	4ba3      	ldr	r3, [pc, #652]	; (800a880 <_dtoa_r+0x998>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f7f6 f808 	bl	8000608 <__aeabi_dmul>
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	460f      	mov	r7, r1
 800a600:	f7f6 fa6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a604:	2800      	cmp	r0, #0
 800a606:	d09e      	beq.n	800a546 <_dtoa_r+0x65e>
 800a608:	e7d0      	b.n	800a5ac <_dtoa_r+0x6c4>
 800a60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a60c:	2a00      	cmp	r2, #0
 800a60e:	f000 80ca 	beq.w	800a7a6 <_dtoa_r+0x8be>
 800a612:	9a07      	ldr	r2, [sp, #28]
 800a614:	2a01      	cmp	r2, #1
 800a616:	f300 80ad 	bgt.w	800a774 <_dtoa_r+0x88c>
 800a61a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a61c:	2a00      	cmp	r2, #0
 800a61e:	f000 80a5 	beq.w	800a76c <_dtoa_r+0x884>
 800a622:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a626:	9e08      	ldr	r6, [sp, #32]
 800a628:	9d05      	ldr	r5, [sp, #20]
 800a62a:	9a05      	ldr	r2, [sp, #20]
 800a62c:	441a      	add	r2, r3
 800a62e:	9205      	str	r2, [sp, #20]
 800a630:	9a06      	ldr	r2, [sp, #24]
 800a632:	2101      	movs	r1, #1
 800a634:	441a      	add	r2, r3
 800a636:	4620      	mov	r0, r4
 800a638:	9206      	str	r2, [sp, #24]
 800a63a:	f000 fb89 	bl	800ad50 <__i2b>
 800a63e:	4607      	mov	r7, r0
 800a640:	b165      	cbz	r5, 800a65c <_dtoa_r+0x774>
 800a642:	9b06      	ldr	r3, [sp, #24]
 800a644:	2b00      	cmp	r3, #0
 800a646:	dd09      	ble.n	800a65c <_dtoa_r+0x774>
 800a648:	42ab      	cmp	r3, r5
 800a64a:	9a05      	ldr	r2, [sp, #20]
 800a64c:	bfa8      	it	ge
 800a64e:	462b      	movge	r3, r5
 800a650:	1ad2      	subs	r2, r2, r3
 800a652:	9205      	str	r2, [sp, #20]
 800a654:	9a06      	ldr	r2, [sp, #24]
 800a656:	1aed      	subs	r5, r5, r3
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	9306      	str	r3, [sp, #24]
 800a65c:	9b08      	ldr	r3, [sp, #32]
 800a65e:	b1f3      	cbz	r3, 800a69e <_dtoa_r+0x7b6>
 800a660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a662:	2b00      	cmp	r3, #0
 800a664:	f000 80a3 	beq.w	800a7ae <_dtoa_r+0x8c6>
 800a668:	2e00      	cmp	r6, #0
 800a66a:	dd10      	ble.n	800a68e <_dtoa_r+0x7a6>
 800a66c:	4639      	mov	r1, r7
 800a66e:	4632      	mov	r2, r6
 800a670:	4620      	mov	r0, r4
 800a672:	f000 fc2d 	bl	800aed0 <__pow5mult>
 800a676:	4652      	mov	r2, sl
 800a678:	4601      	mov	r1, r0
 800a67a:	4607      	mov	r7, r0
 800a67c:	4620      	mov	r0, r4
 800a67e:	f000 fb7d 	bl	800ad7c <__multiply>
 800a682:	4651      	mov	r1, sl
 800a684:	4680      	mov	r8, r0
 800a686:	4620      	mov	r0, r4
 800a688:	f000 faac 	bl	800abe4 <_Bfree>
 800a68c:	46c2      	mov	sl, r8
 800a68e:	9b08      	ldr	r3, [sp, #32]
 800a690:	1b9a      	subs	r2, r3, r6
 800a692:	d004      	beq.n	800a69e <_dtoa_r+0x7b6>
 800a694:	4651      	mov	r1, sl
 800a696:	4620      	mov	r0, r4
 800a698:	f000 fc1a 	bl	800aed0 <__pow5mult>
 800a69c:	4682      	mov	sl, r0
 800a69e:	2101      	movs	r1, #1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fb55 	bl	800ad50 <__i2b>
 800a6a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	f340 8081 	ble.w	800a7b2 <_dtoa_r+0x8ca>
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4601      	mov	r1, r0
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f000 fc0b 	bl	800aed0 <__pow5mult>
 800a6ba:	9b07      	ldr	r3, [sp, #28]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	4606      	mov	r6, r0
 800a6c0:	dd7a      	ble.n	800a7b8 <_dtoa_r+0x8d0>
 800a6c2:	f04f 0800 	mov.w	r8, #0
 800a6c6:	6933      	ldr	r3, [r6, #16]
 800a6c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6cc:	6918      	ldr	r0, [r3, #16]
 800a6ce:	f000 faf1 	bl	800acb4 <__hi0bits>
 800a6d2:	f1c0 0020 	rsb	r0, r0, #32
 800a6d6:	9b06      	ldr	r3, [sp, #24]
 800a6d8:	4418      	add	r0, r3
 800a6da:	f010 001f 	ands.w	r0, r0, #31
 800a6de:	f000 8094 	beq.w	800a80a <_dtoa_r+0x922>
 800a6e2:	f1c0 0320 	rsb	r3, r0, #32
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	f340 8085 	ble.w	800a7f6 <_dtoa_r+0x90e>
 800a6ec:	9b05      	ldr	r3, [sp, #20]
 800a6ee:	f1c0 001c 	rsb	r0, r0, #28
 800a6f2:	4403      	add	r3, r0
 800a6f4:	9305      	str	r3, [sp, #20]
 800a6f6:	9b06      	ldr	r3, [sp, #24]
 800a6f8:	4403      	add	r3, r0
 800a6fa:	4405      	add	r5, r0
 800a6fc:	9306      	str	r3, [sp, #24]
 800a6fe:	9b05      	ldr	r3, [sp, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	dd05      	ble.n	800a710 <_dtoa_r+0x828>
 800a704:	4651      	mov	r1, sl
 800a706:	461a      	mov	r2, r3
 800a708:	4620      	mov	r0, r4
 800a70a:	f000 fc3b 	bl	800af84 <__lshift>
 800a70e:	4682      	mov	sl, r0
 800a710:	9b06      	ldr	r3, [sp, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	dd05      	ble.n	800a722 <_dtoa_r+0x83a>
 800a716:	4631      	mov	r1, r6
 800a718:	461a      	mov	r2, r3
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 fc32 	bl	800af84 <__lshift>
 800a720:	4606      	mov	r6, r0
 800a722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a724:	2b00      	cmp	r3, #0
 800a726:	d072      	beq.n	800a80e <_dtoa_r+0x926>
 800a728:	4631      	mov	r1, r6
 800a72a:	4650      	mov	r0, sl
 800a72c:	f000 fc96 	bl	800b05c <__mcmp>
 800a730:	2800      	cmp	r0, #0
 800a732:	da6c      	bge.n	800a80e <_dtoa_r+0x926>
 800a734:	2300      	movs	r3, #0
 800a736:	4651      	mov	r1, sl
 800a738:	220a      	movs	r2, #10
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 fa74 	bl	800ac28 <__multadd>
 800a740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a742:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a746:	4682      	mov	sl, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f000 81b0 	beq.w	800aaae <_dtoa_r+0xbc6>
 800a74e:	2300      	movs	r3, #0
 800a750:	4639      	mov	r1, r7
 800a752:	220a      	movs	r2, #10
 800a754:	4620      	mov	r0, r4
 800a756:	f000 fa67 	bl	800ac28 <__multadd>
 800a75a:	9b01      	ldr	r3, [sp, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	4607      	mov	r7, r0
 800a760:	f300 8096 	bgt.w	800a890 <_dtoa_r+0x9a8>
 800a764:	9b07      	ldr	r3, [sp, #28]
 800a766:	2b02      	cmp	r3, #2
 800a768:	dc59      	bgt.n	800a81e <_dtoa_r+0x936>
 800a76a:	e091      	b.n	800a890 <_dtoa_r+0x9a8>
 800a76c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a76e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a772:	e758      	b.n	800a626 <_dtoa_r+0x73e>
 800a774:	9b04      	ldr	r3, [sp, #16]
 800a776:	1e5e      	subs	r6, r3, #1
 800a778:	9b08      	ldr	r3, [sp, #32]
 800a77a:	42b3      	cmp	r3, r6
 800a77c:	bfbf      	itttt	lt
 800a77e:	9b08      	ldrlt	r3, [sp, #32]
 800a780:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a782:	9608      	strlt	r6, [sp, #32]
 800a784:	1af3      	sublt	r3, r6, r3
 800a786:	bfb4      	ite	lt
 800a788:	18d2      	addlt	r2, r2, r3
 800a78a:	1b9e      	subge	r6, r3, r6
 800a78c:	9b04      	ldr	r3, [sp, #16]
 800a78e:	bfbc      	itt	lt
 800a790:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a792:	2600      	movlt	r6, #0
 800a794:	2b00      	cmp	r3, #0
 800a796:	bfb7      	itett	lt
 800a798:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a79c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a7a0:	1a9d      	sublt	r5, r3, r2
 800a7a2:	2300      	movlt	r3, #0
 800a7a4:	e741      	b.n	800a62a <_dtoa_r+0x742>
 800a7a6:	9e08      	ldr	r6, [sp, #32]
 800a7a8:	9d05      	ldr	r5, [sp, #20]
 800a7aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a7ac:	e748      	b.n	800a640 <_dtoa_r+0x758>
 800a7ae:	9a08      	ldr	r2, [sp, #32]
 800a7b0:	e770      	b.n	800a694 <_dtoa_r+0x7ac>
 800a7b2:	9b07      	ldr	r3, [sp, #28]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	dc19      	bgt.n	800a7ec <_dtoa_r+0x904>
 800a7b8:	9b02      	ldr	r3, [sp, #8]
 800a7ba:	b9bb      	cbnz	r3, 800a7ec <_dtoa_r+0x904>
 800a7bc:	9b03      	ldr	r3, [sp, #12]
 800a7be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7c2:	b99b      	cbnz	r3, 800a7ec <_dtoa_r+0x904>
 800a7c4:	9b03      	ldr	r3, [sp, #12]
 800a7c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7ca:	0d1b      	lsrs	r3, r3, #20
 800a7cc:	051b      	lsls	r3, r3, #20
 800a7ce:	b183      	cbz	r3, 800a7f2 <_dtoa_r+0x90a>
 800a7d0:	9b05      	ldr	r3, [sp, #20]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	9305      	str	r3, [sp, #20]
 800a7d6:	9b06      	ldr	r3, [sp, #24]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	9306      	str	r3, [sp, #24]
 800a7dc:	f04f 0801 	mov.w	r8, #1
 800a7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f47f af6f 	bne.w	800a6c6 <_dtoa_r+0x7de>
 800a7e8:	2001      	movs	r0, #1
 800a7ea:	e774      	b.n	800a6d6 <_dtoa_r+0x7ee>
 800a7ec:	f04f 0800 	mov.w	r8, #0
 800a7f0:	e7f6      	b.n	800a7e0 <_dtoa_r+0x8f8>
 800a7f2:	4698      	mov	r8, r3
 800a7f4:	e7f4      	b.n	800a7e0 <_dtoa_r+0x8f8>
 800a7f6:	d082      	beq.n	800a6fe <_dtoa_r+0x816>
 800a7f8:	9a05      	ldr	r2, [sp, #20]
 800a7fa:	331c      	adds	r3, #28
 800a7fc:	441a      	add	r2, r3
 800a7fe:	9205      	str	r2, [sp, #20]
 800a800:	9a06      	ldr	r2, [sp, #24]
 800a802:	441a      	add	r2, r3
 800a804:	441d      	add	r5, r3
 800a806:	9206      	str	r2, [sp, #24]
 800a808:	e779      	b.n	800a6fe <_dtoa_r+0x816>
 800a80a:	4603      	mov	r3, r0
 800a80c:	e7f4      	b.n	800a7f8 <_dtoa_r+0x910>
 800a80e:	9b04      	ldr	r3, [sp, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	dc37      	bgt.n	800a884 <_dtoa_r+0x99c>
 800a814:	9b07      	ldr	r3, [sp, #28]
 800a816:	2b02      	cmp	r3, #2
 800a818:	dd34      	ble.n	800a884 <_dtoa_r+0x99c>
 800a81a:	9b04      	ldr	r3, [sp, #16]
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	9b01      	ldr	r3, [sp, #4]
 800a820:	b963      	cbnz	r3, 800a83c <_dtoa_r+0x954>
 800a822:	4631      	mov	r1, r6
 800a824:	2205      	movs	r2, #5
 800a826:	4620      	mov	r0, r4
 800a828:	f000 f9fe 	bl	800ac28 <__multadd>
 800a82c:	4601      	mov	r1, r0
 800a82e:	4606      	mov	r6, r0
 800a830:	4650      	mov	r0, sl
 800a832:	f000 fc13 	bl	800b05c <__mcmp>
 800a836:	2800      	cmp	r0, #0
 800a838:	f73f adbb 	bgt.w	800a3b2 <_dtoa_r+0x4ca>
 800a83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a83e:	9d00      	ldr	r5, [sp, #0]
 800a840:	ea6f 0b03 	mvn.w	fp, r3
 800a844:	f04f 0800 	mov.w	r8, #0
 800a848:	4631      	mov	r1, r6
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 f9ca 	bl	800abe4 <_Bfree>
 800a850:	2f00      	cmp	r7, #0
 800a852:	f43f aeab 	beq.w	800a5ac <_dtoa_r+0x6c4>
 800a856:	f1b8 0f00 	cmp.w	r8, #0
 800a85a:	d005      	beq.n	800a868 <_dtoa_r+0x980>
 800a85c:	45b8      	cmp	r8, r7
 800a85e:	d003      	beq.n	800a868 <_dtoa_r+0x980>
 800a860:	4641      	mov	r1, r8
 800a862:	4620      	mov	r0, r4
 800a864:	f000 f9be 	bl	800abe4 <_Bfree>
 800a868:	4639      	mov	r1, r7
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 f9ba 	bl	800abe4 <_Bfree>
 800a870:	e69c      	b.n	800a5ac <_dtoa_r+0x6c4>
 800a872:	2600      	movs	r6, #0
 800a874:	4637      	mov	r7, r6
 800a876:	e7e1      	b.n	800a83c <_dtoa_r+0x954>
 800a878:	46bb      	mov	fp, r7
 800a87a:	4637      	mov	r7, r6
 800a87c:	e599      	b.n	800a3b2 <_dtoa_r+0x4ca>
 800a87e:	bf00      	nop
 800a880:	40240000 	.word	0x40240000
 800a884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 80c8 	beq.w	800aa1c <_dtoa_r+0xb34>
 800a88c:	9b04      	ldr	r3, [sp, #16]
 800a88e:	9301      	str	r3, [sp, #4]
 800a890:	2d00      	cmp	r5, #0
 800a892:	dd05      	ble.n	800a8a0 <_dtoa_r+0x9b8>
 800a894:	4639      	mov	r1, r7
 800a896:	462a      	mov	r2, r5
 800a898:	4620      	mov	r0, r4
 800a89a:	f000 fb73 	bl	800af84 <__lshift>
 800a89e:	4607      	mov	r7, r0
 800a8a0:	f1b8 0f00 	cmp.w	r8, #0
 800a8a4:	d05b      	beq.n	800a95e <_dtoa_r+0xa76>
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 f95b 	bl	800ab64 <_Balloc>
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	b928      	cbnz	r0, 800a8be <_dtoa_r+0x9d6>
 800a8b2:	4b83      	ldr	r3, [pc, #524]	; (800aac0 <_dtoa_r+0xbd8>)
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a8ba:	f7ff bb2e 	b.w	8009f1a <_dtoa_r+0x32>
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	3202      	adds	r2, #2
 800a8c2:	0092      	lsls	r2, r2, #2
 800a8c4:	f107 010c 	add.w	r1, r7, #12
 800a8c8:	300c      	adds	r0, #12
 800a8ca:	f7ff fa74 	bl	8009db6 <memcpy>
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f000 fb56 	bl	800af84 <__lshift>
 800a8d8:	9b00      	ldr	r3, [sp, #0]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	9304      	str	r3, [sp, #16]
 800a8de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	9308      	str	r3, [sp, #32]
 800a8e6:	9b02      	ldr	r3, [sp, #8]
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	46b8      	mov	r8, r7
 800a8ee:	9306      	str	r3, [sp, #24]
 800a8f0:	4607      	mov	r7, r0
 800a8f2:	9b04      	ldr	r3, [sp, #16]
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	9301      	str	r3, [sp, #4]
 800a8fc:	f7ff fa69 	bl	8009dd2 <quorem>
 800a900:	4641      	mov	r1, r8
 800a902:	9002      	str	r0, [sp, #8]
 800a904:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a908:	4650      	mov	r0, sl
 800a90a:	f000 fba7 	bl	800b05c <__mcmp>
 800a90e:	463a      	mov	r2, r7
 800a910:	9005      	str	r0, [sp, #20]
 800a912:	4631      	mov	r1, r6
 800a914:	4620      	mov	r0, r4
 800a916:	f000 fbbd 	bl	800b094 <__mdiff>
 800a91a:	68c2      	ldr	r2, [r0, #12]
 800a91c:	4605      	mov	r5, r0
 800a91e:	bb02      	cbnz	r2, 800a962 <_dtoa_r+0xa7a>
 800a920:	4601      	mov	r1, r0
 800a922:	4650      	mov	r0, sl
 800a924:	f000 fb9a 	bl	800b05c <__mcmp>
 800a928:	4602      	mov	r2, r0
 800a92a:	4629      	mov	r1, r5
 800a92c:	4620      	mov	r0, r4
 800a92e:	9209      	str	r2, [sp, #36]	; 0x24
 800a930:	f000 f958 	bl	800abe4 <_Bfree>
 800a934:	9b07      	ldr	r3, [sp, #28]
 800a936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a938:	9d04      	ldr	r5, [sp, #16]
 800a93a:	ea43 0102 	orr.w	r1, r3, r2
 800a93e:	9b06      	ldr	r3, [sp, #24]
 800a940:	4319      	orrs	r1, r3
 800a942:	d110      	bne.n	800a966 <_dtoa_r+0xa7e>
 800a944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a948:	d029      	beq.n	800a99e <_dtoa_r+0xab6>
 800a94a:	9b05      	ldr	r3, [sp, #20]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	dd02      	ble.n	800a956 <_dtoa_r+0xa6e>
 800a950:	9b02      	ldr	r3, [sp, #8]
 800a952:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a956:	9b01      	ldr	r3, [sp, #4]
 800a958:	f883 9000 	strb.w	r9, [r3]
 800a95c:	e774      	b.n	800a848 <_dtoa_r+0x960>
 800a95e:	4638      	mov	r0, r7
 800a960:	e7ba      	b.n	800a8d8 <_dtoa_r+0x9f0>
 800a962:	2201      	movs	r2, #1
 800a964:	e7e1      	b.n	800a92a <_dtoa_r+0xa42>
 800a966:	9b05      	ldr	r3, [sp, #20]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	db04      	blt.n	800a976 <_dtoa_r+0xa8e>
 800a96c:	9907      	ldr	r1, [sp, #28]
 800a96e:	430b      	orrs	r3, r1
 800a970:	9906      	ldr	r1, [sp, #24]
 800a972:	430b      	orrs	r3, r1
 800a974:	d120      	bne.n	800a9b8 <_dtoa_r+0xad0>
 800a976:	2a00      	cmp	r2, #0
 800a978:	dded      	ble.n	800a956 <_dtoa_r+0xa6e>
 800a97a:	4651      	mov	r1, sl
 800a97c:	2201      	movs	r2, #1
 800a97e:	4620      	mov	r0, r4
 800a980:	f000 fb00 	bl	800af84 <__lshift>
 800a984:	4631      	mov	r1, r6
 800a986:	4682      	mov	sl, r0
 800a988:	f000 fb68 	bl	800b05c <__mcmp>
 800a98c:	2800      	cmp	r0, #0
 800a98e:	dc03      	bgt.n	800a998 <_dtoa_r+0xab0>
 800a990:	d1e1      	bne.n	800a956 <_dtoa_r+0xa6e>
 800a992:	f019 0f01 	tst.w	r9, #1
 800a996:	d0de      	beq.n	800a956 <_dtoa_r+0xa6e>
 800a998:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a99c:	d1d8      	bne.n	800a950 <_dtoa_r+0xa68>
 800a99e:	9a01      	ldr	r2, [sp, #4]
 800a9a0:	2339      	movs	r3, #57	; 0x39
 800a9a2:	7013      	strb	r3, [r2, #0]
 800a9a4:	462b      	mov	r3, r5
 800a9a6:	461d      	mov	r5, r3
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9ae:	2a39      	cmp	r2, #57	; 0x39
 800a9b0:	d06c      	beq.n	800aa8c <_dtoa_r+0xba4>
 800a9b2:	3201      	adds	r2, #1
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	e747      	b.n	800a848 <_dtoa_r+0x960>
 800a9b8:	2a00      	cmp	r2, #0
 800a9ba:	dd07      	ble.n	800a9cc <_dtoa_r+0xae4>
 800a9bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9c0:	d0ed      	beq.n	800a99e <_dtoa_r+0xab6>
 800a9c2:	9a01      	ldr	r2, [sp, #4]
 800a9c4:	f109 0301 	add.w	r3, r9, #1
 800a9c8:	7013      	strb	r3, [r2, #0]
 800a9ca:	e73d      	b.n	800a848 <_dtoa_r+0x960>
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	9a08      	ldr	r2, [sp, #32]
 800a9d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d043      	beq.n	800aa60 <_dtoa_r+0xb78>
 800a9d8:	4651      	mov	r1, sl
 800a9da:	2300      	movs	r3, #0
 800a9dc:	220a      	movs	r2, #10
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f000 f922 	bl	800ac28 <__multadd>
 800a9e4:	45b8      	cmp	r8, r7
 800a9e6:	4682      	mov	sl, r0
 800a9e8:	f04f 0300 	mov.w	r3, #0
 800a9ec:	f04f 020a 	mov.w	r2, #10
 800a9f0:	4641      	mov	r1, r8
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	d107      	bne.n	800aa06 <_dtoa_r+0xb1e>
 800a9f6:	f000 f917 	bl	800ac28 <__multadd>
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	4607      	mov	r7, r0
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	3301      	adds	r3, #1
 800aa02:	9304      	str	r3, [sp, #16]
 800aa04:	e775      	b.n	800a8f2 <_dtoa_r+0xa0a>
 800aa06:	f000 f90f 	bl	800ac28 <__multadd>
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	4680      	mov	r8, r0
 800aa0e:	2300      	movs	r3, #0
 800aa10:	220a      	movs	r2, #10
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 f908 	bl	800ac28 <__multadd>
 800aa18:	4607      	mov	r7, r0
 800aa1a:	e7f0      	b.n	800a9fe <_dtoa_r+0xb16>
 800aa1c:	9b04      	ldr	r3, [sp, #16]
 800aa1e:	9301      	str	r3, [sp, #4]
 800aa20:	9d00      	ldr	r5, [sp, #0]
 800aa22:	4631      	mov	r1, r6
 800aa24:	4650      	mov	r0, sl
 800aa26:	f7ff f9d4 	bl	8009dd2 <quorem>
 800aa2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa2e:	9b00      	ldr	r3, [sp, #0]
 800aa30:	f805 9b01 	strb.w	r9, [r5], #1
 800aa34:	1aea      	subs	r2, r5, r3
 800aa36:	9b01      	ldr	r3, [sp, #4]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	dd07      	ble.n	800aa4c <_dtoa_r+0xb64>
 800aa3c:	4651      	mov	r1, sl
 800aa3e:	2300      	movs	r3, #0
 800aa40:	220a      	movs	r2, #10
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 f8f0 	bl	800ac28 <__multadd>
 800aa48:	4682      	mov	sl, r0
 800aa4a:	e7ea      	b.n	800aa22 <_dtoa_r+0xb3a>
 800aa4c:	9b01      	ldr	r3, [sp, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	bfc8      	it	gt
 800aa52:	461d      	movgt	r5, r3
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	bfd8      	it	le
 800aa58:	2501      	movle	r5, #1
 800aa5a:	441d      	add	r5, r3
 800aa5c:	f04f 0800 	mov.w	r8, #0
 800aa60:	4651      	mov	r1, sl
 800aa62:	2201      	movs	r2, #1
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 fa8d 	bl	800af84 <__lshift>
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	f000 faf5 	bl	800b05c <__mcmp>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	dc96      	bgt.n	800a9a4 <_dtoa_r+0xabc>
 800aa76:	d102      	bne.n	800aa7e <_dtoa_r+0xb96>
 800aa78:	f019 0f01 	tst.w	r9, #1
 800aa7c:	d192      	bne.n	800a9a4 <_dtoa_r+0xabc>
 800aa7e:	462b      	mov	r3, r5
 800aa80:	461d      	mov	r5, r3
 800aa82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa86:	2a30      	cmp	r2, #48	; 0x30
 800aa88:	d0fa      	beq.n	800aa80 <_dtoa_r+0xb98>
 800aa8a:	e6dd      	b.n	800a848 <_dtoa_r+0x960>
 800aa8c:	9a00      	ldr	r2, [sp, #0]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d189      	bne.n	800a9a6 <_dtoa_r+0xabe>
 800aa92:	f10b 0b01 	add.w	fp, fp, #1
 800aa96:	2331      	movs	r3, #49	; 0x31
 800aa98:	e796      	b.n	800a9c8 <_dtoa_r+0xae0>
 800aa9a:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <_dtoa_r+0xbdc>)
 800aa9c:	f7ff ba99 	b.w	8009fd2 <_dtoa_r+0xea>
 800aaa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f47f aa6d 	bne.w	8009f82 <_dtoa_r+0x9a>
 800aaa8:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <_dtoa_r+0xbe0>)
 800aaaa:	f7ff ba92 	b.w	8009fd2 <_dtoa_r+0xea>
 800aaae:	9b01      	ldr	r3, [sp, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dcb5      	bgt.n	800aa20 <_dtoa_r+0xb38>
 800aab4:	9b07      	ldr	r3, [sp, #28]
 800aab6:	2b02      	cmp	r3, #2
 800aab8:	f73f aeb1 	bgt.w	800a81e <_dtoa_r+0x936>
 800aabc:	e7b0      	b.n	800aa20 <_dtoa_r+0xb38>
 800aabe:	bf00      	nop
 800aac0:	0800ccfc 	.word	0x0800ccfc
 800aac4:	0800cc5c 	.word	0x0800cc5c
 800aac8:	0800cc80 	.word	0x0800cc80

0800aacc <_free_r>:
 800aacc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aace:	2900      	cmp	r1, #0
 800aad0:	d044      	beq.n	800ab5c <_free_r+0x90>
 800aad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad6:	9001      	str	r0, [sp, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f1a1 0404 	sub.w	r4, r1, #4
 800aade:	bfb8      	it	lt
 800aae0:	18e4      	addlt	r4, r4, r3
 800aae2:	f7fe fae9 	bl	80090b8 <__malloc_lock>
 800aae6:	4a1e      	ldr	r2, [pc, #120]	; (800ab60 <_free_r+0x94>)
 800aae8:	9801      	ldr	r0, [sp, #4]
 800aaea:	6813      	ldr	r3, [r2, #0]
 800aaec:	b933      	cbnz	r3, 800aafc <_free_r+0x30>
 800aaee:	6063      	str	r3, [r4, #4]
 800aaf0:	6014      	str	r4, [r2, #0]
 800aaf2:	b003      	add	sp, #12
 800aaf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaf8:	f7fe bae4 	b.w	80090c4 <__malloc_unlock>
 800aafc:	42a3      	cmp	r3, r4
 800aafe:	d908      	bls.n	800ab12 <_free_r+0x46>
 800ab00:	6825      	ldr	r5, [r4, #0]
 800ab02:	1961      	adds	r1, r4, r5
 800ab04:	428b      	cmp	r3, r1
 800ab06:	bf01      	itttt	eq
 800ab08:	6819      	ldreq	r1, [r3, #0]
 800ab0a:	685b      	ldreq	r3, [r3, #4]
 800ab0c:	1949      	addeq	r1, r1, r5
 800ab0e:	6021      	streq	r1, [r4, #0]
 800ab10:	e7ed      	b.n	800aaee <_free_r+0x22>
 800ab12:	461a      	mov	r2, r3
 800ab14:	685b      	ldr	r3, [r3, #4]
 800ab16:	b10b      	cbz	r3, 800ab1c <_free_r+0x50>
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	d9fa      	bls.n	800ab12 <_free_r+0x46>
 800ab1c:	6811      	ldr	r1, [r2, #0]
 800ab1e:	1855      	adds	r5, r2, r1
 800ab20:	42a5      	cmp	r5, r4
 800ab22:	d10b      	bne.n	800ab3c <_free_r+0x70>
 800ab24:	6824      	ldr	r4, [r4, #0]
 800ab26:	4421      	add	r1, r4
 800ab28:	1854      	adds	r4, r2, r1
 800ab2a:	42a3      	cmp	r3, r4
 800ab2c:	6011      	str	r1, [r2, #0]
 800ab2e:	d1e0      	bne.n	800aaf2 <_free_r+0x26>
 800ab30:	681c      	ldr	r4, [r3, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	6053      	str	r3, [r2, #4]
 800ab36:	440c      	add	r4, r1
 800ab38:	6014      	str	r4, [r2, #0]
 800ab3a:	e7da      	b.n	800aaf2 <_free_r+0x26>
 800ab3c:	d902      	bls.n	800ab44 <_free_r+0x78>
 800ab3e:	230c      	movs	r3, #12
 800ab40:	6003      	str	r3, [r0, #0]
 800ab42:	e7d6      	b.n	800aaf2 <_free_r+0x26>
 800ab44:	6825      	ldr	r5, [r4, #0]
 800ab46:	1961      	adds	r1, r4, r5
 800ab48:	428b      	cmp	r3, r1
 800ab4a:	bf04      	itt	eq
 800ab4c:	6819      	ldreq	r1, [r3, #0]
 800ab4e:	685b      	ldreq	r3, [r3, #4]
 800ab50:	6063      	str	r3, [r4, #4]
 800ab52:	bf04      	itt	eq
 800ab54:	1949      	addeq	r1, r1, r5
 800ab56:	6021      	streq	r1, [r4, #0]
 800ab58:	6054      	str	r4, [r2, #4]
 800ab5a:	e7ca      	b.n	800aaf2 <_free_r+0x26>
 800ab5c:	b003      	add	sp, #12
 800ab5e:	bd30      	pop	{r4, r5, pc}
 800ab60:	200007e8 	.word	0x200007e8

0800ab64 <_Balloc>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	69c6      	ldr	r6, [r0, #28]
 800ab68:	4604      	mov	r4, r0
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	b976      	cbnz	r6, 800ab8c <_Balloc+0x28>
 800ab6e:	2010      	movs	r0, #16
 800ab70:	f7fe f9f2 	bl	8008f58 <malloc>
 800ab74:	4602      	mov	r2, r0
 800ab76:	61e0      	str	r0, [r4, #28]
 800ab78:	b920      	cbnz	r0, 800ab84 <_Balloc+0x20>
 800ab7a:	4b18      	ldr	r3, [pc, #96]	; (800abdc <_Balloc+0x78>)
 800ab7c:	4818      	ldr	r0, [pc, #96]	; (800abe0 <_Balloc+0x7c>)
 800ab7e:	216b      	movs	r1, #107	; 0x6b
 800ab80:	f000 fd8c 	bl	800b69c <__assert_func>
 800ab84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab88:	6006      	str	r6, [r0, #0]
 800ab8a:	60c6      	str	r6, [r0, #12]
 800ab8c:	69e6      	ldr	r6, [r4, #28]
 800ab8e:	68f3      	ldr	r3, [r6, #12]
 800ab90:	b183      	cbz	r3, 800abb4 <_Balloc+0x50>
 800ab92:	69e3      	ldr	r3, [r4, #28]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab9a:	b9b8      	cbnz	r0, 800abcc <_Balloc+0x68>
 800ab9c:	2101      	movs	r1, #1
 800ab9e:	fa01 f605 	lsl.w	r6, r1, r5
 800aba2:	1d72      	adds	r2, r6, #5
 800aba4:	0092      	lsls	r2, r2, #2
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 fd96 	bl	800b6d8 <_calloc_r>
 800abac:	b160      	cbz	r0, 800abc8 <_Balloc+0x64>
 800abae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abb2:	e00e      	b.n	800abd2 <_Balloc+0x6e>
 800abb4:	2221      	movs	r2, #33	; 0x21
 800abb6:	2104      	movs	r1, #4
 800abb8:	4620      	mov	r0, r4
 800abba:	f000 fd8d 	bl	800b6d8 <_calloc_r>
 800abbe:	69e3      	ldr	r3, [r4, #28]
 800abc0:	60f0      	str	r0, [r6, #12]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e4      	bne.n	800ab92 <_Balloc+0x2e>
 800abc8:	2000      	movs	r0, #0
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	6802      	ldr	r2, [r0, #0]
 800abce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abd2:	2300      	movs	r3, #0
 800abd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abd8:	e7f7      	b.n	800abca <_Balloc+0x66>
 800abda:	bf00      	nop
 800abdc:	0800cc8d 	.word	0x0800cc8d
 800abe0:	0800cd0d 	.word	0x0800cd0d

0800abe4 <_Bfree>:
 800abe4:	b570      	push	{r4, r5, r6, lr}
 800abe6:	69c6      	ldr	r6, [r0, #28]
 800abe8:	4605      	mov	r5, r0
 800abea:	460c      	mov	r4, r1
 800abec:	b976      	cbnz	r6, 800ac0c <_Bfree+0x28>
 800abee:	2010      	movs	r0, #16
 800abf0:	f7fe f9b2 	bl	8008f58 <malloc>
 800abf4:	4602      	mov	r2, r0
 800abf6:	61e8      	str	r0, [r5, #28]
 800abf8:	b920      	cbnz	r0, 800ac04 <_Bfree+0x20>
 800abfa:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <_Bfree+0x3c>)
 800abfc:	4809      	ldr	r0, [pc, #36]	; (800ac24 <_Bfree+0x40>)
 800abfe:	218f      	movs	r1, #143	; 0x8f
 800ac00:	f000 fd4c 	bl	800b69c <__assert_func>
 800ac04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac08:	6006      	str	r6, [r0, #0]
 800ac0a:	60c6      	str	r6, [r0, #12]
 800ac0c:	b13c      	cbz	r4, 800ac1e <_Bfree+0x3a>
 800ac0e:	69eb      	ldr	r3, [r5, #28]
 800ac10:	6862      	ldr	r2, [r4, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac18:	6021      	str	r1, [r4, #0]
 800ac1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac1e:	bd70      	pop	{r4, r5, r6, pc}
 800ac20:	0800cc8d 	.word	0x0800cc8d
 800ac24:	0800cd0d 	.word	0x0800cd0d

0800ac28 <__multadd>:
 800ac28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2c:	690d      	ldr	r5, [r1, #16]
 800ac2e:	4607      	mov	r7, r0
 800ac30:	460c      	mov	r4, r1
 800ac32:	461e      	mov	r6, r3
 800ac34:	f101 0c14 	add.w	ip, r1, #20
 800ac38:	2000      	movs	r0, #0
 800ac3a:	f8dc 3000 	ldr.w	r3, [ip]
 800ac3e:	b299      	uxth	r1, r3
 800ac40:	fb02 6101 	mla	r1, r2, r1, r6
 800ac44:	0c1e      	lsrs	r6, r3, #16
 800ac46:	0c0b      	lsrs	r3, r1, #16
 800ac48:	fb02 3306 	mla	r3, r2, r6, r3
 800ac4c:	b289      	uxth	r1, r1
 800ac4e:	3001      	adds	r0, #1
 800ac50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac54:	4285      	cmp	r5, r0
 800ac56:	f84c 1b04 	str.w	r1, [ip], #4
 800ac5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac5e:	dcec      	bgt.n	800ac3a <__multadd+0x12>
 800ac60:	b30e      	cbz	r6, 800aca6 <__multadd+0x7e>
 800ac62:	68a3      	ldr	r3, [r4, #8]
 800ac64:	42ab      	cmp	r3, r5
 800ac66:	dc19      	bgt.n	800ac9c <__multadd+0x74>
 800ac68:	6861      	ldr	r1, [r4, #4]
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	3101      	adds	r1, #1
 800ac6e:	f7ff ff79 	bl	800ab64 <_Balloc>
 800ac72:	4680      	mov	r8, r0
 800ac74:	b928      	cbnz	r0, 800ac82 <__multadd+0x5a>
 800ac76:	4602      	mov	r2, r0
 800ac78:	4b0c      	ldr	r3, [pc, #48]	; (800acac <__multadd+0x84>)
 800ac7a:	480d      	ldr	r0, [pc, #52]	; (800acb0 <__multadd+0x88>)
 800ac7c:	21ba      	movs	r1, #186	; 0xba
 800ac7e:	f000 fd0d 	bl	800b69c <__assert_func>
 800ac82:	6922      	ldr	r2, [r4, #16]
 800ac84:	3202      	adds	r2, #2
 800ac86:	f104 010c 	add.w	r1, r4, #12
 800ac8a:	0092      	lsls	r2, r2, #2
 800ac8c:	300c      	adds	r0, #12
 800ac8e:	f7ff f892 	bl	8009db6 <memcpy>
 800ac92:	4621      	mov	r1, r4
 800ac94:	4638      	mov	r0, r7
 800ac96:	f7ff ffa5 	bl	800abe4 <_Bfree>
 800ac9a:	4644      	mov	r4, r8
 800ac9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aca0:	3501      	adds	r5, #1
 800aca2:	615e      	str	r6, [r3, #20]
 800aca4:	6125      	str	r5, [r4, #16]
 800aca6:	4620      	mov	r0, r4
 800aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acac:	0800ccfc 	.word	0x0800ccfc
 800acb0:	0800cd0d 	.word	0x0800cd0d

0800acb4 <__hi0bits>:
 800acb4:	0c03      	lsrs	r3, r0, #16
 800acb6:	041b      	lsls	r3, r3, #16
 800acb8:	b9d3      	cbnz	r3, 800acf0 <__hi0bits+0x3c>
 800acba:	0400      	lsls	r0, r0, #16
 800acbc:	2310      	movs	r3, #16
 800acbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acc2:	bf04      	itt	eq
 800acc4:	0200      	lsleq	r0, r0, #8
 800acc6:	3308      	addeq	r3, #8
 800acc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800accc:	bf04      	itt	eq
 800acce:	0100      	lsleq	r0, r0, #4
 800acd0:	3304      	addeq	r3, #4
 800acd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acd6:	bf04      	itt	eq
 800acd8:	0080      	lsleq	r0, r0, #2
 800acda:	3302      	addeq	r3, #2
 800acdc:	2800      	cmp	r0, #0
 800acde:	db05      	blt.n	800acec <__hi0bits+0x38>
 800ace0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ace4:	f103 0301 	add.w	r3, r3, #1
 800ace8:	bf08      	it	eq
 800acea:	2320      	moveq	r3, #32
 800acec:	4618      	mov	r0, r3
 800acee:	4770      	bx	lr
 800acf0:	2300      	movs	r3, #0
 800acf2:	e7e4      	b.n	800acbe <__hi0bits+0xa>

0800acf4 <__lo0bits>:
 800acf4:	6803      	ldr	r3, [r0, #0]
 800acf6:	f013 0207 	ands.w	r2, r3, #7
 800acfa:	d00c      	beq.n	800ad16 <__lo0bits+0x22>
 800acfc:	07d9      	lsls	r1, r3, #31
 800acfe:	d422      	bmi.n	800ad46 <__lo0bits+0x52>
 800ad00:	079a      	lsls	r2, r3, #30
 800ad02:	bf49      	itett	mi
 800ad04:	085b      	lsrmi	r3, r3, #1
 800ad06:	089b      	lsrpl	r3, r3, #2
 800ad08:	6003      	strmi	r3, [r0, #0]
 800ad0a:	2201      	movmi	r2, #1
 800ad0c:	bf5c      	itt	pl
 800ad0e:	6003      	strpl	r3, [r0, #0]
 800ad10:	2202      	movpl	r2, #2
 800ad12:	4610      	mov	r0, r2
 800ad14:	4770      	bx	lr
 800ad16:	b299      	uxth	r1, r3
 800ad18:	b909      	cbnz	r1, 800ad1e <__lo0bits+0x2a>
 800ad1a:	0c1b      	lsrs	r3, r3, #16
 800ad1c:	2210      	movs	r2, #16
 800ad1e:	b2d9      	uxtb	r1, r3
 800ad20:	b909      	cbnz	r1, 800ad26 <__lo0bits+0x32>
 800ad22:	3208      	adds	r2, #8
 800ad24:	0a1b      	lsrs	r3, r3, #8
 800ad26:	0719      	lsls	r1, r3, #28
 800ad28:	bf04      	itt	eq
 800ad2a:	091b      	lsreq	r3, r3, #4
 800ad2c:	3204      	addeq	r2, #4
 800ad2e:	0799      	lsls	r1, r3, #30
 800ad30:	bf04      	itt	eq
 800ad32:	089b      	lsreq	r3, r3, #2
 800ad34:	3202      	addeq	r2, #2
 800ad36:	07d9      	lsls	r1, r3, #31
 800ad38:	d403      	bmi.n	800ad42 <__lo0bits+0x4e>
 800ad3a:	085b      	lsrs	r3, r3, #1
 800ad3c:	f102 0201 	add.w	r2, r2, #1
 800ad40:	d003      	beq.n	800ad4a <__lo0bits+0x56>
 800ad42:	6003      	str	r3, [r0, #0]
 800ad44:	e7e5      	b.n	800ad12 <__lo0bits+0x1e>
 800ad46:	2200      	movs	r2, #0
 800ad48:	e7e3      	b.n	800ad12 <__lo0bits+0x1e>
 800ad4a:	2220      	movs	r2, #32
 800ad4c:	e7e1      	b.n	800ad12 <__lo0bits+0x1e>
	...

0800ad50 <__i2b>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	460c      	mov	r4, r1
 800ad54:	2101      	movs	r1, #1
 800ad56:	f7ff ff05 	bl	800ab64 <_Balloc>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	b928      	cbnz	r0, 800ad6a <__i2b+0x1a>
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <__i2b+0x24>)
 800ad60:	4805      	ldr	r0, [pc, #20]	; (800ad78 <__i2b+0x28>)
 800ad62:	f240 1145 	movw	r1, #325	; 0x145
 800ad66:	f000 fc99 	bl	800b69c <__assert_func>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	6144      	str	r4, [r0, #20]
 800ad6e:	6103      	str	r3, [r0, #16]
 800ad70:	bd10      	pop	{r4, pc}
 800ad72:	bf00      	nop
 800ad74:	0800ccfc 	.word	0x0800ccfc
 800ad78:	0800cd0d 	.word	0x0800cd0d

0800ad7c <__multiply>:
 800ad7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad80:	4691      	mov	r9, r2
 800ad82:	690a      	ldr	r2, [r1, #16]
 800ad84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	bfb8      	it	lt
 800ad8c:	460b      	movlt	r3, r1
 800ad8e:	460c      	mov	r4, r1
 800ad90:	bfbc      	itt	lt
 800ad92:	464c      	movlt	r4, r9
 800ad94:	4699      	movlt	r9, r3
 800ad96:	6927      	ldr	r7, [r4, #16]
 800ad98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ad9c:	68a3      	ldr	r3, [r4, #8]
 800ad9e:	6861      	ldr	r1, [r4, #4]
 800ada0:	eb07 060a 	add.w	r6, r7, sl
 800ada4:	42b3      	cmp	r3, r6
 800ada6:	b085      	sub	sp, #20
 800ada8:	bfb8      	it	lt
 800adaa:	3101      	addlt	r1, #1
 800adac:	f7ff feda 	bl	800ab64 <_Balloc>
 800adb0:	b930      	cbnz	r0, 800adc0 <__multiply+0x44>
 800adb2:	4602      	mov	r2, r0
 800adb4:	4b44      	ldr	r3, [pc, #272]	; (800aec8 <__multiply+0x14c>)
 800adb6:	4845      	ldr	r0, [pc, #276]	; (800aecc <__multiply+0x150>)
 800adb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800adbc:	f000 fc6e 	bl	800b69c <__assert_func>
 800adc0:	f100 0514 	add.w	r5, r0, #20
 800adc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adc8:	462b      	mov	r3, r5
 800adca:	2200      	movs	r2, #0
 800adcc:	4543      	cmp	r3, r8
 800adce:	d321      	bcc.n	800ae14 <__multiply+0x98>
 800add0:	f104 0314 	add.w	r3, r4, #20
 800add4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800add8:	f109 0314 	add.w	r3, r9, #20
 800addc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ade0:	9202      	str	r2, [sp, #8]
 800ade2:	1b3a      	subs	r2, r7, r4
 800ade4:	3a15      	subs	r2, #21
 800ade6:	f022 0203 	bic.w	r2, r2, #3
 800adea:	3204      	adds	r2, #4
 800adec:	f104 0115 	add.w	r1, r4, #21
 800adf0:	428f      	cmp	r7, r1
 800adf2:	bf38      	it	cc
 800adf4:	2204      	movcc	r2, #4
 800adf6:	9201      	str	r2, [sp, #4]
 800adf8:	9a02      	ldr	r2, [sp, #8]
 800adfa:	9303      	str	r3, [sp, #12]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d80c      	bhi.n	800ae1a <__multiply+0x9e>
 800ae00:	2e00      	cmp	r6, #0
 800ae02:	dd03      	ble.n	800ae0c <__multiply+0x90>
 800ae04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d05b      	beq.n	800aec4 <__multiply+0x148>
 800ae0c:	6106      	str	r6, [r0, #16]
 800ae0e:	b005      	add	sp, #20
 800ae10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae14:	f843 2b04 	str.w	r2, [r3], #4
 800ae18:	e7d8      	b.n	800adcc <__multiply+0x50>
 800ae1a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae1e:	f1ba 0f00 	cmp.w	sl, #0
 800ae22:	d024      	beq.n	800ae6e <__multiply+0xf2>
 800ae24:	f104 0e14 	add.w	lr, r4, #20
 800ae28:	46a9      	mov	r9, r5
 800ae2a:	f04f 0c00 	mov.w	ip, #0
 800ae2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae32:	f8d9 1000 	ldr.w	r1, [r9]
 800ae36:	fa1f fb82 	uxth.w	fp, r2
 800ae3a:	b289      	uxth	r1, r1
 800ae3c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae44:	f8d9 2000 	ldr.w	r2, [r9]
 800ae48:	4461      	add	r1, ip
 800ae4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae4e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae56:	b289      	uxth	r1, r1
 800ae58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae5c:	4577      	cmp	r7, lr
 800ae5e:	f849 1b04 	str.w	r1, [r9], #4
 800ae62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae66:	d8e2      	bhi.n	800ae2e <__multiply+0xb2>
 800ae68:	9a01      	ldr	r2, [sp, #4]
 800ae6a:	f845 c002 	str.w	ip, [r5, r2]
 800ae6e:	9a03      	ldr	r2, [sp, #12]
 800ae70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae74:	3304      	adds	r3, #4
 800ae76:	f1b9 0f00 	cmp.w	r9, #0
 800ae7a:	d021      	beq.n	800aec0 <__multiply+0x144>
 800ae7c:	6829      	ldr	r1, [r5, #0]
 800ae7e:	f104 0c14 	add.w	ip, r4, #20
 800ae82:	46ae      	mov	lr, r5
 800ae84:	f04f 0a00 	mov.w	sl, #0
 800ae88:	f8bc b000 	ldrh.w	fp, [ip]
 800ae8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ae90:	fb09 220b 	mla	r2, r9, fp, r2
 800ae94:	4452      	add	r2, sl
 800ae96:	b289      	uxth	r1, r1
 800ae98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae9c:	f84e 1b04 	str.w	r1, [lr], #4
 800aea0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aea4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aea8:	f8be 1000 	ldrh.w	r1, [lr]
 800aeac:	fb09 110a 	mla	r1, r9, sl, r1
 800aeb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aeb4:	4567      	cmp	r7, ip
 800aeb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aeba:	d8e5      	bhi.n	800ae88 <__multiply+0x10c>
 800aebc:	9a01      	ldr	r2, [sp, #4]
 800aebe:	50a9      	str	r1, [r5, r2]
 800aec0:	3504      	adds	r5, #4
 800aec2:	e799      	b.n	800adf8 <__multiply+0x7c>
 800aec4:	3e01      	subs	r6, #1
 800aec6:	e79b      	b.n	800ae00 <__multiply+0x84>
 800aec8:	0800ccfc 	.word	0x0800ccfc
 800aecc:	0800cd0d 	.word	0x0800cd0d

0800aed0 <__pow5mult>:
 800aed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed4:	4615      	mov	r5, r2
 800aed6:	f012 0203 	ands.w	r2, r2, #3
 800aeda:	4606      	mov	r6, r0
 800aedc:	460f      	mov	r7, r1
 800aede:	d007      	beq.n	800aef0 <__pow5mult+0x20>
 800aee0:	4c25      	ldr	r4, [pc, #148]	; (800af78 <__pow5mult+0xa8>)
 800aee2:	3a01      	subs	r2, #1
 800aee4:	2300      	movs	r3, #0
 800aee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aeea:	f7ff fe9d 	bl	800ac28 <__multadd>
 800aeee:	4607      	mov	r7, r0
 800aef0:	10ad      	asrs	r5, r5, #2
 800aef2:	d03d      	beq.n	800af70 <__pow5mult+0xa0>
 800aef4:	69f4      	ldr	r4, [r6, #28]
 800aef6:	b97c      	cbnz	r4, 800af18 <__pow5mult+0x48>
 800aef8:	2010      	movs	r0, #16
 800aefa:	f7fe f82d 	bl	8008f58 <malloc>
 800aefe:	4602      	mov	r2, r0
 800af00:	61f0      	str	r0, [r6, #28]
 800af02:	b928      	cbnz	r0, 800af10 <__pow5mult+0x40>
 800af04:	4b1d      	ldr	r3, [pc, #116]	; (800af7c <__pow5mult+0xac>)
 800af06:	481e      	ldr	r0, [pc, #120]	; (800af80 <__pow5mult+0xb0>)
 800af08:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af0c:	f000 fbc6 	bl	800b69c <__assert_func>
 800af10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af14:	6004      	str	r4, [r0, #0]
 800af16:	60c4      	str	r4, [r0, #12]
 800af18:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800af1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af20:	b94c      	cbnz	r4, 800af36 <__pow5mult+0x66>
 800af22:	f240 2171 	movw	r1, #625	; 0x271
 800af26:	4630      	mov	r0, r6
 800af28:	f7ff ff12 	bl	800ad50 <__i2b>
 800af2c:	2300      	movs	r3, #0
 800af2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800af32:	4604      	mov	r4, r0
 800af34:	6003      	str	r3, [r0, #0]
 800af36:	f04f 0900 	mov.w	r9, #0
 800af3a:	07eb      	lsls	r3, r5, #31
 800af3c:	d50a      	bpl.n	800af54 <__pow5mult+0x84>
 800af3e:	4639      	mov	r1, r7
 800af40:	4622      	mov	r2, r4
 800af42:	4630      	mov	r0, r6
 800af44:	f7ff ff1a 	bl	800ad7c <__multiply>
 800af48:	4639      	mov	r1, r7
 800af4a:	4680      	mov	r8, r0
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff fe49 	bl	800abe4 <_Bfree>
 800af52:	4647      	mov	r7, r8
 800af54:	106d      	asrs	r5, r5, #1
 800af56:	d00b      	beq.n	800af70 <__pow5mult+0xa0>
 800af58:	6820      	ldr	r0, [r4, #0]
 800af5a:	b938      	cbnz	r0, 800af6c <__pow5mult+0x9c>
 800af5c:	4622      	mov	r2, r4
 800af5e:	4621      	mov	r1, r4
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff ff0b 	bl	800ad7c <__multiply>
 800af66:	6020      	str	r0, [r4, #0]
 800af68:	f8c0 9000 	str.w	r9, [r0]
 800af6c:	4604      	mov	r4, r0
 800af6e:	e7e4      	b.n	800af3a <__pow5mult+0x6a>
 800af70:	4638      	mov	r0, r7
 800af72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af76:	bf00      	nop
 800af78:	0800ce58 	.word	0x0800ce58
 800af7c:	0800cc8d 	.word	0x0800cc8d
 800af80:	0800cd0d 	.word	0x0800cd0d

0800af84 <__lshift>:
 800af84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af88:	460c      	mov	r4, r1
 800af8a:	6849      	ldr	r1, [r1, #4]
 800af8c:	6923      	ldr	r3, [r4, #16]
 800af8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af92:	68a3      	ldr	r3, [r4, #8]
 800af94:	4607      	mov	r7, r0
 800af96:	4691      	mov	r9, r2
 800af98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af9c:	f108 0601 	add.w	r6, r8, #1
 800afa0:	42b3      	cmp	r3, r6
 800afa2:	db0b      	blt.n	800afbc <__lshift+0x38>
 800afa4:	4638      	mov	r0, r7
 800afa6:	f7ff fddd 	bl	800ab64 <_Balloc>
 800afaa:	4605      	mov	r5, r0
 800afac:	b948      	cbnz	r0, 800afc2 <__lshift+0x3e>
 800afae:	4602      	mov	r2, r0
 800afb0:	4b28      	ldr	r3, [pc, #160]	; (800b054 <__lshift+0xd0>)
 800afb2:	4829      	ldr	r0, [pc, #164]	; (800b058 <__lshift+0xd4>)
 800afb4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800afb8:	f000 fb70 	bl	800b69c <__assert_func>
 800afbc:	3101      	adds	r1, #1
 800afbe:	005b      	lsls	r3, r3, #1
 800afc0:	e7ee      	b.n	800afa0 <__lshift+0x1c>
 800afc2:	2300      	movs	r3, #0
 800afc4:	f100 0114 	add.w	r1, r0, #20
 800afc8:	f100 0210 	add.w	r2, r0, #16
 800afcc:	4618      	mov	r0, r3
 800afce:	4553      	cmp	r3, sl
 800afd0:	db33      	blt.n	800b03a <__lshift+0xb6>
 800afd2:	6920      	ldr	r0, [r4, #16]
 800afd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afd8:	f104 0314 	add.w	r3, r4, #20
 800afdc:	f019 091f 	ands.w	r9, r9, #31
 800afe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afe8:	d02b      	beq.n	800b042 <__lshift+0xbe>
 800afea:	f1c9 0e20 	rsb	lr, r9, #32
 800afee:	468a      	mov	sl, r1
 800aff0:	2200      	movs	r2, #0
 800aff2:	6818      	ldr	r0, [r3, #0]
 800aff4:	fa00 f009 	lsl.w	r0, r0, r9
 800aff8:	4310      	orrs	r0, r2
 800affa:	f84a 0b04 	str.w	r0, [sl], #4
 800affe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b002:	459c      	cmp	ip, r3
 800b004:	fa22 f20e 	lsr.w	r2, r2, lr
 800b008:	d8f3      	bhi.n	800aff2 <__lshift+0x6e>
 800b00a:	ebac 0304 	sub.w	r3, ip, r4
 800b00e:	3b15      	subs	r3, #21
 800b010:	f023 0303 	bic.w	r3, r3, #3
 800b014:	3304      	adds	r3, #4
 800b016:	f104 0015 	add.w	r0, r4, #21
 800b01a:	4584      	cmp	ip, r0
 800b01c:	bf38      	it	cc
 800b01e:	2304      	movcc	r3, #4
 800b020:	50ca      	str	r2, [r1, r3]
 800b022:	b10a      	cbz	r2, 800b028 <__lshift+0xa4>
 800b024:	f108 0602 	add.w	r6, r8, #2
 800b028:	3e01      	subs	r6, #1
 800b02a:	4638      	mov	r0, r7
 800b02c:	612e      	str	r6, [r5, #16]
 800b02e:	4621      	mov	r1, r4
 800b030:	f7ff fdd8 	bl	800abe4 <_Bfree>
 800b034:	4628      	mov	r0, r5
 800b036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b03a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b03e:	3301      	adds	r3, #1
 800b040:	e7c5      	b.n	800afce <__lshift+0x4a>
 800b042:	3904      	subs	r1, #4
 800b044:	f853 2b04 	ldr.w	r2, [r3], #4
 800b048:	f841 2f04 	str.w	r2, [r1, #4]!
 800b04c:	459c      	cmp	ip, r3
 800b04e:	d8f9      	bhi.n	800b044 <__lshift+0xc0>
 800b050:	e7ea      	b.n	800b028 <__lshift+0xa4>
 800b052:	bf00      	nop
 800b054:	0800ccfc 	.word	0x0800ccfc
 800b058:	0800cd0d 	.word	0x0800cd0d

0800b05c <__mcmp>:
 800b05c:	b530      	push	{r4, r5, lr}
 800b05e:	6902      	ldr	r2, [r0, #16]
 800b060:	690c      	ldr	r4, [r1, #16]
 800b062:	1b12      	subs	r2, r2, r4
 800b064:	d10e      	bne.n	800b084 <__mcmp+0x28>
 800b066:	f100 0314 	add.w	r3, r0, #20
 800b06a:	3114      	adds	r1, #20
 800b06c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b070:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b074:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b078:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b07c:	42a5      	cmp	r5, r4
 800b07e:	d003      	beq.n	800b088 <__mcmp+0x2c>
 800b080:	d305      	bcc.n	800b08e <__mcmp+0x32>
 800b082:	2201      	movs	r2, #1
 800b084:	4610      	mov	r0, r2
 800b086:	bd30      	pop	{r4, r5, pc}
 800b088:	4283      	cmp	r3, r0
 800b08a:	d3f3      	bcc.n	800b074 <__mcmp+0x18>
 800b08c:	e7fa      	b.n	800b084 <__mcmp+0x28>
 800b08e:	f04f 32ff 	mov.w	r2, #4294967295
 800b092:	e7f7      	b.n	800b084 <__mcmp+0x28>

0800b094 <__mdiff>:
 800b094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	460c      	mov	r4, r1
 800b09a:	4606      	mov	r6, r0
 800b09c:	4611      	mov	r1, r2
 800b09e:	4620      	mov	r0, r4
 800b0a0:	4690      	mov	r8, r2
 800b0a2:	f7ff ffdb 	bl	800b05c <__mcmp>
 800b0a6:	1e05      	subs	r5, r0, #0
 800b0a8:	d110      	bne.n	800b0cc <__mdiff+0x38>
 800b0aa:	4629      	mov	r1, r5
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f7ff fd59 	bl	800ab64 <_Balloc>
 800b0b2:	b930      	cbnz	r0, 800b0c2 <__mdiff+0x2e>
 800b0b4:	4b3a      	ldr	r3, [pc, #232]	; (800b1a0 <__mdiff+0x10c>)
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	f240 2137 	movw	r1, #567	; 0x237
 800b0bc:	4839      	ldr	r0, [pc, #228]	; (800b1a4 <__mdiff+0x110>)
 800b0be:	f000 faed 	bl	800b69c <__assert_func>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	bfa4      	itt	ge
 800b0ce:	4643      	movge	r3, r8
 800b0d0:	46a0      	movge	r8, r4
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0d8:	bfa6      	itte	ge
 800b0da:	461c      	movge	r4, r3
 800b0dc:	2500      	movge	r5, #0
 800b0de:	2501      	movlt	r5, #1
 800b0e0:	f7ff fd40 	bl	800ab64 <_Balloc>
 800b0e4:	b920      	cbnz	r0, 800b0f0 <__mdiff+0x5c>
 800b0e6:	4b2e      	ldr	r3, [pc, #184]	; (800b1a0 <__mdiff+0x10c>)
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	f240 2145 	movw	r1, #581	; 0x245
 800b0ee:	e7e5      	b.n	800b0bc <__mdiff+0x28>
 800b0f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b0f4:	6926      	ldr	r6, [r4, #16]
 800b0f6:	60c5      	str	r5, [r0, #12]
 800b0f8:	f104 0914 	add.w	r9, r4, #20
 800b0fc:	f108 0514 	add.w	r5, r8, #20
 800b100:	f100 0e14 	add.w	lr, r0, #20
 800b104:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b108:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b10c:	f108 0210 	add.w	r2, r8, #16
 800b110:	46f2      	mov	sl, lr
 800b112:	2100      	movs	r1, #0
 800b114:	f859 3b04 	ldr.w	r3, [r9], #4
 800b118:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b11c:	fa11 f88b 	uxtah	r8, r1, fp
 800b120:	b299      	uxth	r1, r3
 800b122:	0c1b      	lsrs	r3, r3, #16
 800b124:	eba8 0801 	sub.w	r8, r8, r1
 800b128:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b12c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b130:	fa1f f888 	uxth.w	r8, r8
 800b134:	1419      	asrs	r1, r3, #16
 800b136:	454e      	cmp	r6, r9
 800b138:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b13c:	f84a 3b04 	str.w	r3, [sl], #4
 800b140:	d8e8      	bhi.n	800b114 <__mdiff+0x80>
 800b142:	1b33      	subs	r3, r6, r4
 800b144:	3b15      	subs	r3, #21
 800b146:	f023 0303 	bic.w	r3, r3, #3
 800b14a:	3304      	adds	r3, #4
 800b14c:	3415      	adds	r4, #21
 800b14e:	42a6      	cmp	r6, r4
 800b150:	bf38      	it	cc
 800b152:	2304      	movcc	r3, #4
 800b154:	441d      	add	r5, r3
 800b156:	4473      	add	r3, lr
 800b158:	469e      	mov	lr, r3
 800b15a:	462e      	mov	r6, r5
 800b15c:	4566      	cmp	r6, ip
 800b15e:	d30e      	bcc.n	800b17e <__mdiff+0xea>
 800b160:	f10c 0203 	add.w	r2, ip, #3
 800b164:	1b52      	subs	r2, r2, r5
 800b166:	f022 0203 	bic.w	r2, r2, #3
 800b16a:	3d03      	subs	r5, #3
 800b16c:	45ac      	cmp	ip, r5
 800b16e:	bf38      	it	cc
 800b170:	2200      	movcc	r2, #0
 800b172:	4413      	add	r3, r2
 800b174:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b178:	b17a      	cbz	r2, 800b19a <__mdiff+0x106>
 800b17a:	6107      	str	r7, [r0, #16]
 800b17c:	e7a4      	b.n	800b0c8 <__mdiff+0x34>
 800b17e:	f856 8b04 	ldr.w	r8, [r6], #4
 800b182:	fa11 f288 	uxtah	r2, r1, r8
 800b186:	1414      	asrs	r4, r2, #16
 800b188:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b18c:	b292      	uxth	r2, r2
 800b18e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b192:	f84e 2b04 	str.w	r2, [lr], #4
 800b196:	1421      	asrs	r1, r4, #16
 800b198:	e7e0      	b.n	800b15c <__mdiff+0xc8>
 800b19a:	3f01      	subs	r7, #1
 800b19c:	e7ea      	b.n	800b174 <__mdiff+0xe0>
 800b19e:	bf00      	nop
 800b1a0:	0800ccfc 	.word	0x0800ccfc
 800b1a4:	0800cd0d 	.word	0x0800cd0d

0800b1a8 <__d2b>:
 800b1a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1ac:	460f      	mov	r7, r1
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	ec59 8b10 	vmov	r8, r9, d0
 800b1b4:	4616      	mov	r6, r2
 800b1b6:	f7ff fcd5 	bl	800ab64 <_Balloc>
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	b930      	cbnz	r0, 800b1cc <__d2b+0x24>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	4b24      	ldr	r3, [pc, #144]	; (800b254 <__d2b+0xac>)
 800b1c2:	4825      	ldr	r0, [pc, #148]	; (800b258 <__d2b+0xb0>)
 800b1c4:	f240 310f 	movw	r1, #783	; 0x30f
 800b1c8:	f000 fa68 	bl	800b69c <__assert_func>
 800b1cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1d4:	bb2d      	cbnz	r5, 800b222 <__d2b+0x7a>
 800b1d6:	9301      	str	r3, [sp, #4]
 800b1d8:	f1b8 0300 	subs.w	r3, r8, #0
 800b1dc:	d026      	beq.n	800b22c <__d2b+0x84>
 800b1de:	4668      	mov	r0, sp
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	f7ff fd87 	bl	800acf4 <__lo0bits>
 800b1e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b1ea:	b1e8      	cbz	r0, 800b228 <__d2b+0x80>
 800b1ec:	f1c0 0320 	rsb	r3, r0, #32
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	430b      	orrs	r3, r1
 800b1f6:	40c2      	lsrs	r2, r0
 800b1f8:	6163      	str	r3, [r4, #20]
 800b1fa:	9201      	str	r2, [sp, #4]
 800b1fc:	9b01      	ldr	r3, [sp, #4]
 800b1fe:	61a3      	str	r3, [r4, #24]
 800b200:	2b00      	cmp	r3, #0
 800b202:	bf14      	ite	ne
 800b204:	2202      	movne	r2, #2
 800b206:	2201      	moveq	r2, #1
 800b208:	6122      	str	r2, [r4, #16]
 800b20a:	b1bd      	cbz	r5, 800b23c <__d2b+0x94>
 800b20c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b210:	4405      	add	r5, r0
 800b212:	603d      	str	r5, [r7, #0]
 800b214:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b218:	6030      	str	r0, [r6, #0]
 800b21a:	4620      	mov	r0, r4
 800b21c:	b003      	add	sp, #12
 800b21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b226:	e7d6      	b.n	800b1d6 <__d2b+0x2e>
 800b228:	6161      	str	r1, [r4, #20]
 800b22a:	e7e7      	b.n	800b1fc <__d2b+0x54>
 800b22c:	a801      	add	r0, sp, #4
 800b22e:	f7ff fd61 	bl	800acf4 <__lo0bits>
 800b232:	9b01      	ldr	r3, [sp, #4]
 800b234:	6163      	str	r3, [r4, #20]
 800b236:	3020      	adds	r0, #32
 800b238:	2201      	movs	r2, #1
 800b23a:	e7e5      	b.n	800b208 <__d2b+0x60>
 800b23c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b240:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b244:	6038      	str	r0, [r7, #0]
 800b246:	6918      	ldr	r0, [r3, #16]
 800b248:	f7ff fd34 	bl	800acb4 <__hi0bits>
 800b24c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b250:	e7e2      	b.n	800b218 <__d2b+0x70>
 800b252:	bf00      	nop
 800b254:	0800ccfc 	.word	0x0800ccfc
 800b258:	0800cd0d 	.word	0x0800cd0d

0800b25c <__ssputs_r>:
 800b25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b260:	688e      	ldr	r6, [r1, #8]
 800b262:	461f      	mov	r7, r3
 800b264:	42be      	cmp	r6, r7
 800b266:	680b      	ldr	r3, [r1, #0]
 800b268:	4682      	mov	sl, r0
 800b26a:	460c      	mov	r4, r1
 800b26c:	4690      	mov	r8, r2
 800b26e:	d82c      	bhi.n	800b2ca <__ssputs_r+0x6e>
 800b270:	898a      	ldrh	r2, [r1, #12]
 800b272:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b276:	d026      	beq.n	800b2c6 <__ssputs_r+0x6a>
 800b278:	6965      	ldr	r5, [r4, #20]
 800b27a:	6909      	ldr	r1, [r1, #16]
 800b27c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b280:	eba3 0901 	sub.w	r9, r3, r1
 800b284:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b288:	1c7b      	adds	r3, r7, #1
 800b28a:	444b      	add	r3, r9
 800b28c:	106d      	asrs	r5, r5, #1
 800b28e:	429d      	cmp	r5, r3
 800b290:	bf38      	it	cc
 800b292:	461d      	movcc	r5, r3
 800b294:	0553      	lsls	r3, r2, #21
 800b296:	d527      	bpl.n	800b2e8 <__ssputs_r+0x8c>
 800b298:	4629      	mov	r1, r5
 800b29a:	f7fd fe8d 	bl	8008fb8 <_malloc_r>
 800b29e:	4606      	mov	r6, r0
 800b2a0:	b360      	cbz	r0, 800b2fc <__ssputs_r+0xa0>
 800b2a2:	6921      	ldr	r1, [r4, #16]
 800b2a4:	464a      	mov	r2, r9
 800b2a6:	f7fe fd86 	bl	8009db6 <memcpy>
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b4:	81a3      	strh	r3, [r4, #12]
 800b2b6:	6126      	str	r6, [r4, #16]
 800b2b8:	6165      	str	r5, [r4, #20]
 800b2ba:	444e      	add	r6, r9
 800b2bc:	eba5 0509 	sub.w	r5, r5, r9
 800b2c0:	6026      	str	r6, [r4, #0]
 800b2c2:	60a5      	str	r5, [r4, #8]
 800b2c4:	463e      	mov	r6, r7
 800b2c6:	42be      	cmp	r6, r7
 800b2c8:	d900      	bls.n	800b2cc <__ssputs_r+0x70>
 800b2ca:	463e      	mov	r6, r7
 800b2cc:	6820      	ldr	r0, [r4, #0]
 800b2ce:	4632      	mov	r2, r6
 800b2d0:	4641      	mov	r1, r8
 800b2d2:	f000 f9c9 	bl	800b668 <memmove>
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	1b9b      	subs	r3, r3, r6
 800b2da:	60a3      	str	r3, [r4, #8]
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	4433      	add	r3, r6
 800b2e0:	6023      	str	r3, [r4, #0]
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e8:	462a      	mov	r2, r5
 800b2ea:	f000 fa1d 	bl	800b728 <_realloc_r>
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	2800      	cmp	r0, #0
 800b2f2:	d1e0      	bne.n	800b2b6 <__ssputs_r+0x5a>
 800b2f4:	6921      	ldr	r1, [r4, #16]
 800b2f6:	4650      	mov	r0, sl
 800b2f8:	f7ff fbe8 	bl	800aacc <_free_r>
 800b2fc:	230c      	movs	r3, #12
 800b2fe:	f8ca 3000 	str.w	r3, [sl]
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b308:	81a3      	strh	r3, [r4, #12]
 800b30a:	f04f 30ff 	mov.w	r0, #4294967295
 800b30e:	e7e9      	b.n	800b2e4 <__ssputs_r+0x88>

0800b310 <_svfiprintf_r>:
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	4698      	mov	r8, r3
 800b316:	898b      	ldrh	r3, [r1, #12]
 800b318:	061b      	lsls	r3, r3, #24
 800b31a:	b09d      	sub	sp, #116	; 0x74
 800b31c:	4607      	mov	r7, r0
 800b31e:	460d      	mov	r5, r1
 800b320:	4614      	mov	r4, r2
 800b322:	d50e      	bpl.n	800b342 <_svfiprintf_r+0x32>
 800b324:	690b      	ldr	r3, [r1, #16]
 800b326:	b963      	cbnz	r3, 800b342 <_svfiprintf_r+0x32>
 800b328:	2140      	movs	r1, #64	; 0x40
 800b32a:	f7fd fe45 	bl	8008fb8 <_malloc_r>
 800b32e:	6028      	str	r0, [r5, #0]
 800b330:	6128      	str	r0, [r5, #16]
 800b332:	b920      	cbnz	r0, 800b33e <_svfiprintf_r+0x2e>
 800b334:	230c      	movs	r3, #12
 800b336:	603b      	str	r3, [r7, #0]
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	e0d0      	b.n	800b4e0 <_svfiprintf_r+0x1d0>
 800b33e:	2340      	movs	r3, #64	; 0x40
 800b340:	616b      	str	r3, [r5, #20]
 800b342:	2300      	movs	r3, #0
 800b344:	9309      	str	r3, [sp, #36]	; 0x24
 800b346:	2320      	movs	r3, #32
 800b348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b34c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b350:	2330      	movs	r3, #48	; 0x30
 800b352:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b4f8 <_svfiprintf_r+0x1e8>
 800b356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b35a:	f04f 0901 	mov.w	r9, #1
 800b35e:	4623      	mov	r3, r4
 800b360:	469a      	mov	sl, r3
 800b362:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b366:	b10a      	cbz	r2, 800b36c <_svfiprintf_r+0x5c>
 800b368:	2a25      	cmp	r2, #37	; 0x25
 800b36a:	d1f9      	bne.n	800b360 <_svfiprintf_r+0x50>
 800b36c:	ebba 0b04 	subs.w	fp, sl, r4
 800b370:	d00b      	beq.n	800b38a <_svfiprintf_r+0x7a>
 800b372:	465b      	mov	r3, fp
 800b374:	4622      	mov	r2, r4
 800b376:	4629      	mov	r1, r5
 800b378:	4638      	mov	r0, r7
 800b37a:	f7ff ff6f 	bl	800b25c <__ssputs_r>
 800b37e:	3001      	adds	r0, #1
 800b380:	f000 80a9 	beq.w	800b4d6 <_svfiprintf_r+0x1c6>
 800b384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b386:	445a      	add	r2, fp
 800b388:	9209      	str	r2, [sp, #36]	; 0x24
 800b38a:	f89a 3000 	ldrb.w	r3, [sl]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f000 80a1 	beq.w	800b4d6 <_svfiprintf_r+0x1c6>
 800b394:	2300      	movs	r3, #0
 800b396:	f04f 32ff 	mov.w	r2, #4294967295
 800b39a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b39e:	f10a 0a01 	add.w	sl, sl, #1
 800b3a2:	9304      	str	r3, [sp, #16]
 800b3a4:	9307      	str	r3, [sp, #28]
 800b3a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3aa:	931a      	str	r3, [sp, #104]	; 0x68
 800b3ac:	4654      	mov	r4, sl
 800b3ae:	2205      	movs	r2, #5
 800b3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b4:	4850      	ldr	r0, [pc, #320]	; (800b4f8 <_svfiprintf_r+0x1e8>)
 800b3b6:	f7f4 ff13 	bl	80001e0 <memchr>
 800b3ba:	9a04      	ldr	r2, [sp, #16]
 800b3bc:	b9d8      	cbnz	r0, 800b3f6 <_svfiprintf_r+0xe6>
 800b3be:	06d0      	lsls	r0, r2, #27
 800b3c0:	bf44      	itt	mi
 800b3c2:	2320      	movmi	r3, #32
 800b3c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3c8:	0711      	lsls	r1, r2, #28
 800b3ca:	bf44      	itt	mi
 800b3cc:	232b      	movmi	r3, #43	; 0x2b
 800b3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d8:	d015      	beq.n	800b406 <_svfiprintf_r+0xf6>
 800b3da:	9a07      	ldr	r2, [sp, #28]
 800b3dc:	4654      	mov	r4, sl
 800b3de:	2000      	movs	r0, #0
 800b3e0:	f04f 0c0a 	mov.w	ip, #10
 800b3e4:	4621      	mov	r1, r4
 800b3e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3ea:	3b30      	subs	r3, #48	; 0x30
 800b3ec:	2b09      	cmp	r3, #9
 800b3ee:	d94d      	bls.n	800b48c <_svfiprintf_r+0x17c>
 800b3f0:	b1b0      	cbz	r0, 800b420 <_svfiprintf_r+0x110>
 800b3f2:	9207      	str	r2, [sp, #28]
 800b3f4:	e014      	b.n	800b420 <_svfiprintf_r+0x110>
 800b3f6:	eba0 0308 	sub.w	r3, r0, r8
 800b3fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b3fe:	4313      	orrs	r3, r2
 800b400:	9304      	str	r3, [sp, #16]
 800b402:	46a2      	mov	sl, r4
 800b404:	e7d2      	b.n	800b3ac <_svfiprintf_r+0x9c>
 800b406:	9b03      	ldr	r3, [sp, #12]
 800b408:	1d19      	adds	r1, r3, #4
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	9103      	str	r1, [sp, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	bfbb      	ittet	lt
 800b412:	425b      	neglt	r3, r3
 800b414:	f042 0202 	orrlt.w	r2, r2, #2
 800b418:	9307      	strge	r3, [sp, #28]
 800b41a:	9307      	strlt	r3, [sp, #28]
 800b41c:	bfb8      	it	lt
 800b41e:	9204      	strlt	r2, [sp, #16]
 800b420:	7823      	ldrb	r3, [r4, #0]
 800b422:	2b2e      	cmp	r3, #46	; 0x2e
 800b424:	d10c      	bne.n	800b440 <_svfiprintf_r+0x130>
 800b426:	7863      	ldrb	r3, [r4, #1]
 800b428:	2b2a      	cmp	r3, #42	; 0x2a
 800b42a:	d134      	bne.n	800b496 <_svfiprintf_r+0x186>
 800b42c:	9b03      	ldr	r3, [sp, #12]
 800b42e:	1d1a      	adds	r2, r3, #4
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	9203      	str	r2, [sp, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	bfb8      	it	lt
 800b438:	f04f 33ff 	movlt.w	r3, #4294967295
 800b43c:	3402      	adds	r4, #2
 800b43e:	9305      	str	r3, [sp, #20]
 800b440:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b508 <_svfiprintf_r+0x1f8>
 800b444:	7821      	ldrb	r1, [r4, #0]
 800b446:	2203      	movs	r2, #3
 800b448:	4650      	mov	r0, sl
 800b44a:	f7f4 fec9 	bl	80001e0 <memchr>
 800b44e:	b138      	cbz	r0, 800b460 <_svfiprintf_r+0x150>
 800b450:	9b04      	ldr	r3, [sp, #16]
 800b452:	eba0 000a 	sub.w	r0, r0, sl
 800b456:	2240      	movs	r2, #64	; 0x40
 800b458:	4082      	lsls	r2, r0
 800b45a:	4313      	orrs	r3, r2
 800b45c:	3401      	adds	r4, #1
 800b45e:	9304      	str	r3, [sp, #16]
 800b460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b464:	4825      	ldr	r0, [pc, #148]	; (800b4fc <_svfiprintf_r+0x1ec>)
 800b466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b46a:	2206      	movs	r2, #6
 800b46c:	f7f4 feb8 	bl	80001e0 <memchr>
 800b470:	2800      	cmp	r0, #0
 800b472:	d038      	beq.n	800b4e6 <_svfiprintf_r+0x1d6>
 800b474:	4b22      	ldr	r3, [pc, #136]	; (800b500 <_svfiprintf_r+0x1f0>)
 800b476:	bb1b      	cbnz	r3, 800b4c0 <_svfiprintf_r+0x1b0>
 800b478:	9b03      	ldr	r3, [sp, #12]
 800b47a:	3307      	adds	r3, #7
 800b47c:	f023 0307 	bic.w	r3, r3, #7
 800b480:	3308      	adds	r3, #8
 800b482:	9303      	str	r3, [sp, #12]
 800b484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b486:	4433      	add	r3, r6
 800b488:	9309      	str	r3, [sp, #36]	; 0x24
 800b48a:	e768      	b.n	800b35e <_svfiprintf_r+0x4e>
 800b48c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b490:	460c      	mov	r4, r1
 800b492:	2001      	movs	r0, #1
 800b494:	e7a6      	b.n	800b3e4 <_svfiprintf_r+0xd4>
 800b496:	2300      	movs	r3, #0
 800b498:	3401      	adds	r4, #1
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	4619      	mov	r1, r3
 800b49e:	f04f 0c0a 	mov.w	ip, #10
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a8:	3a30      	subs	r2, #48	; 0x30
 800b4aa:	2a09      	cmp	r2, #9
 800b4ac:	d903      	bls.n	800b4b6 <_svfiprintf_r+0x1a6>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0c6      	beq.n	800b440 <_svfiprintf_r+0x130>
 800b4b2:	9105      	str	r1, [sp, #20]
 800b4b4:	e7c4      	b.n	800b440 <_svfiprintf_r+0x130>
 800b4b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e7f0      	b.n	800b4a2 <_svfiprintf_r+0x192>
 800b4c0:	ab03      	add	r3, sp, #12
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	462a      	mov	r2, r5
 800b4c6:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <_svfiprintf_r+0x1f4>)
 800b4c8:	a904      	add	r1, sp, #16
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	f7fd fea0 	bl	8009210 <_printf_float>
 800b4d0:	1c42      	adds	r2, r0, #1
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	d1d6      	bne.n	800b484 <_svfiprintf_r+0x174>
 800b4d6:	89ab      	ldrh	r3, [r5, #12]
 800b4d8:	065b      	lsls	r3, r3, #25
 800b4da:	f53f af2d 	bmi.w	800b338 <_svfiprintf_r+0x28>
 800b4de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4e0:	b01d      	add	sp, #116	; 0x74
 800b4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e6:	ab03      	add	r3, sp, #12
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4b05      	ldr	r3, [pc, #20]	; (800b504 <_svfiprintf_r+0x1f4>)
 800b4ee:	a904      	add	r1, sp, #16
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f7fe f931 	bl	8009758 <_printf_i>
 800b4f6:	e7eb      	b.n	800b4d0 <_svfiprintf_r+0x1c0>
 800b4f8:	0800ce64 	.word	0x0800ce64
 800b4fc:	0800ce6e 	.word	0x0800ce6e
 800b500:	08009211 	.word	0x08009211
 800b504:	0800b25d 	.word	0x0800b25d
 800b508:	0800ce6a 	.word	0x0800ce6a

0800b50c <__sflush_r>:
 800b50c:	898a      	ldrh	r2, [r1, #12]
 800b50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b512:	4605      	mov	r5, r0
 800b514:	0710      	lsls	r0, r2, #28
 800b516:	460c      	mov	r4, r1
 800b518:	d458      	bmi.n	800b5cc <__sflush_r+0xc0>
 800b51a:	684b      	ldr	r3, [r1, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	dc05      	bgt.n	800b52c <__sflush_r+0x20>
 800b520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b522:	2b00      	cmp	r3, #0
 800b524:	dc02      	bgt.n	800b52c <__sflush_r+0x20>
 800b526:	2000      	movs	r0, #0
 800b528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b52e:	2e00      	cmp	r6, #0
 800b530:	d0f9      	beq.n	800b526 <__sflush_r+0x1a>
 800b532:	2300      	movs	r3, #0
 800b534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b538:	682f      	ldr	r7, [r5, #0]
 800b53a:	6a21      	ldr	r1, [r4, #32]
 800b53c:	602b      	str	r3, [r5, #0]
 800b53e:	d032      	beq.n	800b5a6 <__sflush_r+0x9a>
 800b540:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b542:	89a3      	ldrh	r3, [r4, #12]
 800b544:	075a      	lsls	r2, r3, #29
 800b546:	d505      	bpl.n	800b554 <__sflush_r+0x48>
 800b548:	6863      	ldr	r3, [r4, #4]
 800b54a:	1ac0      	subs	r0, r0, r3
 800b54c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b54e:	b10b      	cbz	r3, 800b554 <__sflush_r+0x48>
 800b550:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b552:	1ac0      	subs	r0, r0, r3
 800b554:	2300      	movs	r3, #0
 800b556:	4602      	mov	r2, r0
 800b558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b55a:	6a21      	ldr	r1, [r4, #32]
 800b55c:	4628      	mov	r0, r5
 800b55e:	47b0      	blx	r6
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	89a3      	ldrh	r3, [r4, #12]
 800b564:	d106      	bne.n	800b574 <__sflush_r+0x68>
 800b566:	6829      	ldr	r1, [r5, #0]
 800b568:	291d      	cmp	r1, #29
 800b56a:	d82b      	bhi.n	800b5c4 <__sflush_r+0xb8>
 800b56c:	4a29      	ldr	r2, [pc, #164]	; (800b614 <__sflush_r+0x108>)
 800b56e:	410a      	asrs	r2, r1
 800b570:	07d6      	lsls	r6, r2, #31
 800b572:	d427      	bmi.n	800b5c4 <__sflush_r+0xb8>
 800b574:	2200      	movs	r2, #0
 800b576:	6062      	str	r2, [r4, #4]
 800b578:	04d9      	lsls	r1, r3, #19
 800b57a:	6922      	ldr	r2, [r4, #16]
 800b57c:	6022      	str	r2, [r4, #0]
 800b57e:	d504      	bpl.n	800b58a <__sflush_r+0x7e>
 800b580:	1c42      	adds	r2, r0, #1
 800b582:	d101      	bne.n	800b588 <__sflush_r+0x7c>
 800b584:	682b      	ldr	r3, [r5, #0]
 800b586:	b903      	cbnz	r3, 800b58a <__sflush_r+0x7e>
 800b588:	6560      	str	r0, [r4, #84]	; 0x54
 800b58a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b58c:	602f      	str	r7, [r5, #0]
 800b58e:	2900      	cmp	r1, #0
 800b590:	d0c9      	beq.n	800b526 <__sflush_r+0x1a>
 800b592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b596:	4299      	cmp	r1, r3
 800b598:	d002      	beq.n	800b5a0 <__sflush_r+0x94>
 800b59a:	4628      	mov	r0, r5
 800b59c:	f7ff fa96 	bl	800aacc <_free_r>
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	6360      	str	r0, [r4, #52]	; 0x34
 800b5a4:	e7c0      	b.n	800b528 <__sflush_r+0x1c>
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	47b0      	blx	r6
 800b5ac:	1c41      	adds	r1, r0, #1
 800b5ae:	d1c8      	bne.n	800b542 <__sflush_r+0x36>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0c5      	beq.n	800b542 <__sflush_r+0x36>
 800b5b6:	2b1d      	cmp	r3, #29
 800b5b8:	d001      	beq.n	800b5be <__sflush_r+0xb2>
 800b5ba:	2b16      	cmp	r3, #22
 800b5bc:	d101      	bne.n	800b5c2 <__sflush_r+0xb6>
 800b5be:	602f      	str	r7, [r5, #0]
 800b5c0:	e7b1      	b.n	800b526 <__sflush_r+0x1a>
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c8:	81a3      	strh	r3, [r4, #12]
 800b5ca:	e7ad      	b.n	800b528 <__sflush_r+0x1c>
 800b5cc:	690f      	ldr	r7, [r1, #16]
 800b5ce:	2f00      	cmp	r7, #0
 800b5d0:	d0a9      	beq.n	800b526 <__sflush_r+0x1a>
 800b5d2:	0793      	lsls	r3, r2, #30
 800b5d4:	680e      	ldr	r6, [r1, #0]
 800b5d6:	bf08      	it	eq
 800b5d8:	694b      	ldreq	r3, [r1, #20]
 800b5da:	600f      	str	r7, [r1, #0]
 800b5dc:	bf18      	it	ne
 800b5de:	2300      	movne	r3, #0
 800b5e0:	eba6 0807 	sub.w	r8, r6, r7
 800b5e4:	608b      	str	r3, [r1, #8]
 800b5e6:	f1b8 0f00 	cmp.w	r8, #0
 800b5ea:	dd9c      	ble.n	800b526 <__sflush_r+0x1a>
 800b5ec:	6a21      	ldr	r1, [r4, #32]
 800b5ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5f0:	4643      	mov	r3, r8
 800b5f2:	463a      	mov	r2, r7
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	47b0      	blx	r6
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	dc06      	bgt.n	800b60a <__sflush_r+0xfe>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	f04f 30ff 	mov.w	r0, #4294967295
 800b608:	e78e      	b.n	800b528 <__sflush_r+0x1c>
 800b60a:	4407      	add	r7, r0
 800b60c:	eba8 0800 	sub.w	r8, r8, r0
 800b610:	e7e9      	b.n	800b5e6 <__sflush_r+0xda>
 800b612:	bf00      	nop
 800b614:	dfbffffe 	.word	0xdfbffffe

0800b618 <_fflush_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	690b      	ldr	r3, [r1, #16]
 800b61c:	4605      	mov	r5, r0
 800b61e:	460c      	mov	r4, r1
 800b620:	b913      	cbnz	r3, 800b628 <_fflush_r+0x10>
 800b622:	2500      	movs	r5, #0
 800b624:	4628      	mov	r0, r5
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	b118      	cbz	r0, 800b632 <_fflush_r+0x1a>
 800b62a:	6a03      	ldr	r3, [r0, #32]
 800b62c:	b90b      	cbnz	r3, 800b632 <_fflush_r+0x1a>
 800b62e:	f7fe fa41 	bl	8009ab4 <__sinit>
 800b632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d0f3      	beq.n	800b622 <_fflush_r+0xa>
 800b63a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b63c:	07d0      	lsls	r0, r2, #31
 800b63e:	d404      	bmi.n	800b64a <_fflush_r+0x32>
 800b640:	0599      	lsls	r1, r3, #22
 800b642:	d402      	bmi.n	800b64a <_fflush_r+0x32>
 800b644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b646:	f7fe fbb4 	bl	8009db2 <__retarget_lock_acquire_recursive>
 800b64a:	4628      	mov	r0, r5
 800b64c:	4621      	mov	r1, r4
 800b64e:	f7ff ff5d 	bl	800b50c <__sflush_r>
 800b652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b654:	07da      	lsls	r2, r3, #31
 800b656:	4605      	mov	r5, r0
 800b658:	d4e4      	bmi.n	800b624 <_fflush_r+0xc>
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	059b      	lsls	r3, r3, #22
 800b65e:	d4e1      	bmi.n	800b624 <_fflush_r+0xc>
 800b660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b662:	f7fe fba7 	bl	8009db4 <__retarget_lock_release_recursive>
 800b666:	e7dd      	b.n	800b624 <_fflush_r+0xc>

0800b668 <memmove>:
 800b668:	4288      	cmp	r0, r1
 800b66a:	b510      	push	{r4, lr}
 800b66c:	eb01 0402 	add.w	r4, r1, r2
 800b670:	d902      	bls.n	800b678 <memmove+0x10>
 800b672:	4284      	cmp	r4, r0
 800b674:	4623      	mov	r3, r4
 800b676:	d807      	bhi.n	800b688 <memmove+0x20>
 800b678:	1e43      	subs	r3, r0, #1
 800b67a:	42a1      	cmp	r1, r4
 800b67c:	d008      	beq.n	800b690 <memmove+0x28>
 800b67e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b682:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b686:	e7f8      	b.n	800b67a <memmove+0x12>
 800b688:	4402      	add	r2, r0
 800b68a:	4601      	mov	r1, r0
 800b68c:	428a      	cmp	r2, r1
 800b68e:	d100      	bne.n	800b692 <memmove+0x2a>
 800b690:	bd10      	pop	{r4, pc}
 800b692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b69a:	e7f7      	b.n	800b68c <memmove+0x24>

0800b69c <__assert_func>:
 800b69c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b69e:	4614      	mov	r4, r2
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	4b09      	ldr	r3, [pc, #36]	; (800b6c8 <__assert_func+0x2c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	68d8      	ldr	r0, [r3, #12]
 800b6aa:	b14c      	cbz	r4, 800b6c0 <__assert_func+0x24>
 800b6ac:	4b07      	ldr	r3, [pc, #28]	; (800b6cc <__assert_func+0x30>)
 800b6ae:	9100      	str	r1, [sp, #0]
 800b6b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6b4:	4906      	ldr	r1, [pc, #24]	; (800b6d0 <__assert_func+0x34>)
 800b6b6:	462b      	mov	r3, r5
 800b6b8:	f000 f872 	bl	800b7a0 <fiprintf>
 800b6bc:	f7fd fc44 	bl	8008f48 <abort>
 800b6c0:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <__assert_func+0x38>)
 800b6c2:	461c      	mov	r4, r3
 800b6c4:	e7f3      	b.n	800b6ae <__assert_func+0x12>
 800b6c6:	bf00      	nop
 800b6c8:	20000070 	.word	0x20000070
 800b6cc:	0800ce7f 	.word	0x0800ce7f
 800b6d0:	0800ce8c 	.word	0x0800ce8c
 800b6d4:	0800ceba 	.word	0x0800ceba

0800b6d8 <_calloc_r>:
 800b6d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6da:	fba1 2402 	umull	r2, r4, r1, r2
 800b6de:	b94c      	cbnz	r4, 800b6f4 <_calloc_r+0x1c>
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	9201      	str	r2, [sp, #4]
 800b6e4:	f7fd fc68 	bl	8008fb8 <_malloc_r>
 800b6e8:	9a01      	ldr	r2, [sp, #4]
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	b930      	cbnz	r0, 800b6fc <_calloc_r+0x24>
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	b003      	add	sp, #12
 800b6f2:	bd30      	pop	{r4, r5, pc}
 800b6f4:	220c      	movs	r2, #12
 800b6f6:	6002      	str	r2, [r0, #0]
 800b6f8:	2500      	movs	r5, #0
 800b6fa:	e7f8      	b.n	800b6ee <_calloc_r+0x16>
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f7fe fa86 	bl	8009c0e <memset>
 800b702:	e7f4      	b.n	800b6ee <_calloc_r+0x16>

0800b704 <__ascii_mbtowc>:
 800b704:	b082      	sub	sp, #8
 800b706:	b901      	cbnz	r1, 800b70a <__ascii_mbtowc+0x6>
 800b708:	a901      	add	r1, sp, #4
 800b70a:	b142      	cbz	r2, 800b71e <__ascii_mbtowc+0x1a>
 800b70c:	b14b      	cbz	r3, 800b722 <__ascii_mbtowc+0x1e>
 800b70e:	7813      	ldrb	r3, [r2, #0]
 800b710:	600b      	str	r3, [r1, #0]
 800b712:	7812      	ldrb	r2, [r2, #0]
 800b714:	1e10      	subs	r0, r2, #0
 800b716:	bf18      	it	ne
 800b718:	2001      	movne	r0, #1
 800b71a:	b002      	add	sp, #8
 800b71c:	4770      	bx	lr
 800b71e:	4610      	mov	r0, r2
 800b720:	e7fb      	b.n	800b71a <__ascii_mbtowc+0x16>
 800b722:	f06f 0001 	mvn.w	r0, #1
 800b726:	e7f8      	b.n	800b71a <__ascii_mbtowc+0x16>

0800b728 <_realloc_r>:
 800b728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b72c:	4680      	mov	r8, r0
 800b72e:	4614      	mov	r4, r2
 800b730:	460e      	mov	r6, r1
 800b732:	b921      	cbnz	r1, 800b73e <_realloc_r+0x16>
 800b734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b738:	4611      	mov	r1, r2
 800b73a:	f7fd bc3d 	b.w	8008fb8 <_malloc_r>
 800b73e:	b92a      	cbnz	r2, 800b74c <_realloc_r+0x24>
 800b740:	f7ff f9c4 	bl	800aacc <_free_r>
 800b744:	4625      	mov	r5, r4
 800b746:	4628      	mov	r0, r5
 800b748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b74c:	f000 f83a 	bl	800b7c4 <_malloc_usable_size_r>
 800b750:	4284      	cmp	r4, r0
 800b752:	4607      	mov	r7, r0
 800b754:	d802      	bhi.n	800b75c <_realloc_r+0x34>
 800b756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b75a:	d812      	bhi.n	800b782 <_realloc_r+0x5a>
 800b75c:	4621      	mov	r1, r4
 800b75e:	4640      	mov	r0, r8
 800b760:	f7fd fc2a 	bl	8008fb8 <_malloc_r>
 800b764:	4605      	mov	r5, r0
 800b766:	2800      	cmp	r0, #0
 800b768:	d0ed      	beq.n	800b746 <_realloc_r+0x1e>
 800b76a:	42bc      	cmp	r4, r7
 800b76c:	4622      	mov	r2, r4
 800b76e:	4631      	mov	r1, r6
 800b770:	bf28      	it	cs
 800b772:	463a      	movcs	r2, r7
 800b774:	f7fe fb1f 	bl	8009db6 <memcpy>
 800b778:	4631      	mov	r1, r6
 800b77a:	4640      	mov	r0, r8
 800b77c:	f7ff f9a6 	bl	800aacc <_free_r>
 800b780:	e7e1      	b.n	800b746 <_realloc_r+0x1e>
 800b782:	4635      	mov	r5, r6
 800b784:	e7df      	b.n	800b746 <_realloc_r+0x1e>

0800b786 <__ascii_wctomb>:
 800b786:	b149      	cbz	r1, 800b79c <__ascii_wctomb+0x16>
 800b788:	2aff      	cmp	r2, #255	; 0xff
 800b78a:	bf85      	ittet	hi
 800b78c:	238a      	movhi	r3, #138	; 0x8a
 800b78e:	6003      	strhi	r3, [r0, #0]
 800b790:	700a      	strbls	r2, [r1, #0]
 800b792:	f04f 30ff 	movhi.w	r0, #4294967295
 800b796:	bf98      	it	ls
 800b798:	2001      	movls	r0, #1
 800b79a:	4770      	bx	lr
 800b79c:	4608      	mov	r0, r1
 800b79e:	4770      	bx	lr

0800b7a0 <fiprintf>:
 800b7a0:	b40e      	push	{r1, r2, r3}
 800b7a2:	b503      	push	{r0, r1, lr}
 800b7a4:	4601      	mov	r1, r0
 800b7a6:	ab03      	add	r3, sp, #12
 800b7a8:	4805      	ldr	r0, [pc, #20]	; (800b7c0 <fiprintf+0x20>)
 800b7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ae:	6800      	ldr	r0, [r0, #0]
 800b7b0:	9301      	str	r3, [sp, #4]
 800b7b2:	f000 f839 	bl	800b828 <_vfiprintf_r>
 800b7b6:	b002      	add	sp, #8
 800b7b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7bc:	b003      	add	sp, #12
 800b7be:	4770      	bx	lr
 800b7c0:	20000070 	.word	0x20000070

0800b7c4 <_malloc_usable_size_r>:
 800b7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7c8:	1f18      	subs	r0, r3, #4
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bfbc      	itt	lt
 800b7ce:	580b      	ldrlt	r3, [r1, r0]
 800b7d0:	18c0      	addlt	r0, r0, r3
 800b7d2:	4770      	bx	lr

0800b7d4 <__sfputc_r>:
 800b7d4:	6893      	ldr	r3, [r2, #8]
 800b7d6:	3b01      	subs	r3, #1
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	b410      	push	{r4}
 800b7dc:	6093      	str	r3, [r2, #8]
 800b7de:	da08      	bge.n	800b7f2 <__sfputc_r+0x1e>
 800b7e0:	6994      	ldr	r4, [r2, #24]
 800b7e2:	42a3      	cmp	r3, r4
 800b7e4:	db01      	blt.n	800b7ea <__sfputc_r+0x16>
 800b7e6:	290a      	cmp	r1, #10
 800b7e8:	d103      	bne.n	800b7f2 <__sfputc_r+0x1e>
 800b7ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ee:	f000 b935 	b.w	800ba5c <__swbuf_r>
 800b7f2:	6813      	ldr	r3, [r2, #0]
 800b7f4:	1c58      	adds	r0, r3, #1
 800b7f6:	6010      	str	r0, [r2, #0]
 800b7f8:	7019      	strb	r1, [r3, #0]
 800b7fa:	4608      	mov	r0, r1
 800b7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <__sfputs_r>:
 800b802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b804:	4606      	mov	r6, r0
 800b806:	460f      	mov	r7, r1
 800b808:	4614      	mov	r4, r2
 800b80a:	18d5      	adds	r5, r2, r3
 800b80c:	42ac      	cmp	r4, r5
 800b80e:	d101      	bne.n	800b814 <__sfputs_r+0x12>
 800b810:	2000      	movs	r0, #0
 800b812:	e007      	b.n	800b824 <__sfputs_r+0x22>
 800b814:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b818:	463a      	mov	r2, r7
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7ff ffda 	bl	800b7d4 <__sfputc_r>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d1f3      	bne.n	800b80c <__sfputs_r+0xa>
 800b824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b828 <_vfiprintf_r>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	460d      	mov	r5, r1
 800b82e:	b09d      	sub	sp, #116	; 0x74
 800b830:	4614      	mov	r4, r2
 800b832:	4698      	mov	r8, r3
 800b834:	4606      	mov	r6, r0
 800b836:	b118      	cbz	r0, 800b840 <_vfiprintf_r+0x18>
 800b838:	6a03      	ldr	r3, [r0, #32]
 800b83a:	b90b      	cbnz	r3, 800b840 <_vfiprintf_r+0x18>
 800b83c:	f7fe f93a 	bl	8009ab4 <__sinit>
 800b840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b842:	07d9      	lsls	r1, r3, #31
 800b844:	d405      	bmi.n	800b852 <_vfiprintf_r+0x2a>
 800b846:	89ab      	ldrh	r3, [r5, #12]
 800b848:	059a      	lsls	r2, r3, #22
 800b84a:	d402      	bmi.n	800b852 <_vfiprintf_r+0x2a>
 800b84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b84e:	f7fe fab0 	bl	8009db2 <__retarget_lock_acquire_recursive>
 800b852:	89ab      	ldrh	r3, [r5, #12]
 800b854:	071b      	lsls	r3, r3, #28
 800b856:	d501      	bpl.n	800b85c <_vfiprintf_r+0x34>
 800b858:	692b      	ldr	r3, [r5, #16]
 800b85a:	b99b      	cbnz	r3, 800b884 <_vfiprintf_r+0x5c>
 800b85c:	4629      	mov	r1, r5
 800b85e:	4630      	mov	r0, r6
 800b860:	f000 f93a 	bl	800bad8 <__swsetup_r>
 800b864:	b170      	cbz	r0, 800b884 <_vfiprintf_r+0x5c>
 800b866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b868:	07dc      	lsls	r4, r3, #31
 800b86a:	d504      	bpl.n	800b876 <_vfiprintf_r+0x4e>
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	b01d      	add	sp, #116	; 0x74
 800b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b876:	89ab      	ldrh	r3, [r5, #12]
 800b878:	0598      	lsls	r0, r3, #22
 800b87a:	d4f7      	bmi.n	800b86c <_vfiprintf_r+0x44>
 800b87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b87e:	f7fe fa99 	bl	8009db4 <__retarget_lock_release_recursive>
 800b882:	e7f3      	b.n	800b86c <_vfiprintf_r+0x44>
 800b884:	2300      	movs	r3, #0
 800b886:	9309      	str	r3, [sp, #36]	; 0x24
 800b888:	2320      	movs	r3, #32
 800b88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b88e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b892:	2330      	movs	r3, #48	; 0x30
 800b894:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ba48 <_vfiprintf_r+0x220>
 800b898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b89c:	f04f 0901 	mov.w	r9, #1
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	469a      	mov	sl, r3
 800b8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a8:	b10a      	cbz	r2, 800b8ae <_vfiprintf_r+0x86>
 800b8aa:	2a25      	cmp	r2, #37	; 0x25
 800b8ac:	d1f9      	bne.n	800b8a2 <_vfiprintf_r+0x7a>
 800b8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b8b2:	d00b      	beq.n	800b8cc <_vfiprintf_r+0xa4>
 800b8b4:	465b      	mov	r3, fp
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f7ff ffa1 	bl	800b802 <__sfputs_r>
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	f000 80a9 	beq.w	800ba18 <_vfiprintf_r+0x1f0>
 800b8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8c8:	445a      	add	r2, fp
 800b8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 80a1 	beq.w	800ba18 <_vfiprintf_r+0x1f0>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8e0:	f10a 0a01 	add.w	sl, sl, #1
 800b8e4:	9304      	str	r3, [sp, #16]
 800b8e6:	9307      	str	r3, [sp, #28]
 800b8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b8ee:	4654      	mov	r4, sl
 800b8f0:	2205      	movs	r2, #5
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	4854      	ldr	r0, [pc, #336]	; (800ba48 <_vfiprintf_r+0x220>)
 800b8f8:	f7f4 fc72 	bl	80001e0 <memchr>
 800b8fc:	9a04      	ldr	r2, [sp, #16]
 800b8fe:	b9d8      	cbnz	r0, 800b938 <_vfiprintf_r+0x110>
 800b900:	06d1      	lsls	r1, r2, #27
 800b902:	bf44      	itt	mi
 800b904:	2320      	movmi	r3, #32
 800b906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b90a:	0713      	lsls	r3, r2, #28
 800b90c:	bf44      	itt	mi
 800b90e:	232b      	movmi	r3, #43	; 0x2b
 800b910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b914:	f89a 3000 	ldrb.w	r3, [sl]
 800b918:	2b2a      	cmp	r3, #42	; 0x2a
 800b91a:	d015      	beq.n	800b948 <_vfiprintf_r+0x120>
 800b91c:	9a07      	ldr	r2, [sp, #28]
 800b91e:	4654      	mov	r4, sl
 800b920:	2000      	movs	r0, #0
 800b922:	f04f 0c0a 	mov.w	ip, #10
 800b926:	4621      	mov	r1, r4
 800b928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b92c:	3b30      	subs	r3, #48	; 0x30
 800b92e:	2b09      	cmp	r3, #9
 800b930:	d94d      	bls.n	800b9ce <_vfiprintf_r+0x1a6>
 800b932:	b1b0      	cbz	r0, 800b962 <_vfiprintf_r+0x13a>
 800b934:	9207      	str	r2, [sp, #28]
 800b936:	e014      	b.n	800b962 <_vfiprintf_r+0x13a>
 800b938:	eba0 0308 	sub.w	r3, r0, r8
 800b93c:	fa09 f303 	lsl.w	r3, r9, r3
 800b940:	4313      	orrs	r3, r2
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	46a2      	mov	sl, r4
 800b946:	e7d2      	b.n	800b8ee <_vfiprintf_r+0xc6>
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	1d19      	adds	r1, r3, #4
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	9103      	str	r1, [sp, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	bfbb      	ittet	lt
 800b954:	425b      	neglt	r3, r3
 800b956:	f042 0202 	orrlt.w	r2, r2, #2
 800b95a:	9307      	strge	r3, [sp, #28]
 800b95c:	9307      	strlt	r3, [sp, #28]
 800b95e:	bfb8      	it	lt
 800b960:	9204      	strlt	r2, [sp, #16]
 800b962:	7823      	ldrb	r3, [r4, #0]
 800b964:	2b2e      	cmp	r3, #46	; 0x2e
 800b966:	d10c      	bne.n	800b982 <_vfiprintf_r+0x15a>
 800b968:	7863      	ldrb	r3, [r4, #1]
 800b96a:	2b2a      	cmp	r3, #42	; 0x2a
 800b96c:	d134      	bne.n	800b9d8 <_vfiprintf_r+0x1b0>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	1d1a      	adds	r2, r3, #4
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	9203      	str	r2, [sp, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	bfb8      	it	lt
 800b97a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b97e:	3402      	adds	r4, #2
 800b980:	9305      	str	r3, [sp, #20]
 800b982:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ba58 <_vfiprintf_r+0x230>
 800b986:	7821      	ldrb	r1, [r4, #0]
 800b988:	2203      	movs	r2, #3
 800b98a:	4650      	mov	r0, sl
 800b98c:	f7f4 fc28 	bl	80001e0 <memchr>
 800b990:	b138      	cbz	r0, 800b9a2 <_vfiprintf_r+0x17a>
 800b992:	9b04      	ldr	r3, [sp, #16]
 800b994:	eba0 000a 	sub.w	r0, r0, sl
 800b998:	2240      	movs	r2, #64	; 0x40
 800b99a:	4082      	lsls	r2, r0
 800b99c:	4313      	orrs	r3, r2
 800b99e:	3401      	adds	r4, #1
 800b9a0:	9304      	str	r3, [sp, #16]
 800b9a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a6:	4829      	ldr	r0, [pc, #164]	; (800ba4c <_vfiprintf_r+0x224>)
 800b9a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ac:	2206      	movs	r2, #6
 800b9ae:	f7f4 fc17 	bl	80001e0 <memchr>
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d03f      	beq.n	800ba36 <_vfiprintf_r+0x20e>
 800b9b6:	4b26      	ldr	r3, [pc, #152]	; (800ba50 <_vfiprintf_r+0x228>)
 800b9b8:	bb1b      	cbnz	r3, 800ba02 <_vfiprintf_r+0x1da>
 800b9ba:	9b03      	ldr	r3, [sp, #12]
 800b9bc:	3307      	adds	r3, #7
 800b9be:	f023 0307 	bic.w	r3, r3, #7
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	9303      	str	r3, [sp, #12]
 800b9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9c8:	443b      	add	r3, r7
 800b9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b9cc:	e768      	b.n	800b8a0 <_vfiprintf_r+0x78>
 800b9ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9d2:	460c      	mov	r4, r1
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	e7a6      	b.n	800b926 <_vfiprintf_r+0xfe>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	3401      	adds	r4, #1
 800b9dc:	9305      	str	r3, [sp, #20]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	f04f 0c0a 	mov.w	ip, #10
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9ea:	3a30      	subs	r2, #48	; 0x30
 800b9ec:	2a09      	cmp	r2, #9
 800b9ee:	d903      	bls.n	800b9f8 <_vfiprintf_r+0x1d0>
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d0c6      	beq.n	800b982 <_vfiprintf_r+0x15a>
 800b9f4:	9105      	str	r1, [sp, #20]
 800b9f6:	e7c4      	b.n	800b982 <_vfiprintf_r+0x15a>
 800b9f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e7f0      	b.n	800b9e4 <_vfiprintf_r+0x1bc>
 800ba02:	ab03      	add	r3, sp, #12
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	462a      	mov	r2, r5
 800ba08:	4b12      	ldr	r3, [pc, #72]	; (800ba54 <_vfiprintf_r+0x22c>)
 800ba0a:	a904      	add	r1, sp, #16
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7fd fbff 	bl	8009210 <_printf_float>
 800ba12:	4607      	mov	r7, r0
 800ba14:	1c78      	adds	r0, r7, #1
 800ba16:	d1d6      	bne.n	800b9c6 <_vfiprintf_r+0x19e>
 800ba18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba1a:	07d9      	lsls	r1, r3, #31
 800ba1c:	d405      	bmi.n	800ba2a <_vfiprintf_r+0x202>
 800ba1e:	89ab      	ldrh	r3, [r5, #12]
 800ba20:	059a      	lsls	r2, r3, #22
 800ba22:	d402      	bmi.n	800ba2a <_vfiprintf_r+0x202>
 800ba24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba26:	f7fe f9c5 	bl	8009db4 <__retarget_lock_release_recursive>
 800ba2a:	89ab      	ldrh	r3, [r5, #12]
 800ba2c:	065b      	lsls	r3, r3, #25
 800ba2e:	f53f af1d 	bmi.w	800b86c <_vfiprintf_r+0x44>
 800ba32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba34:	e71c      	b.n	800b870 <_vfiprintf_r+0x48>
 800ba36:	ab03      	add	r3, sp, #12
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	462a      	mov	r2, r5
 800ba3c:	4b05      	ldr	r3, [pc, #20]	; (800ba54 <_vfiprintf_r+0x22c>)
 800ba3e:	a904      	add	r1, sp, #16
 800ba40:	4630      	mov	r0, r6
 800ba42:	f7fd fe89 	bl	8009758 <_printf_i>
 800ba46:	e7e4      	b.n	800ba12 <_vfiprintf_r+0x1ea>
 800ba48:	0800ce64 	.word	0x0800ce64
 800ba4c:	0800ce6e 	.word	0x0800ce6e
 800ba50:	08009211 	.word	0x08009211
 800ba54:	0800b803 	.word	0x0800b803
 800ba58:	0800ce6a 	.word	0x0800ce6a

0800ba5c <__swbuf_r>:
 800ba5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5e:	460e      	mov	r6, r1
 800ba60:	4614      	mov	r4, r2
 800ba62:	4605      	mov	r5, r0
 800ba64:	b118      	cbz	r0, 800ba6e <__swbuf_r+0x12>
 800ba66:	6a03      	ldr	r3, [r0, #32]
 800ba68:	b90b      	cbnz	r3, 800ba6e <__swbuf_r+0x12>
 800ba6a:	f7fe f823 	bl	8009ab4 <__sinit>
 800ba6e:	69a3      	ldr	r3, [r4, #24]
 800ba70:	60a3      	str	r3, [r4, #8]
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	071a      	lsls	r2, r3, #28
 800ba76:	d525      	bpl.n	800bac4 <__swbuf_r+0x68>
 800ba78:	6923      	ldr	r3, [r4, #16]
 800ba7a:	b31b      	cbz	r3, 800bac4 <__swbuf_r+0x68>
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	6922      	ldr	r2, [r4, #16]
 800ba80:	1a98      	subs	r0, r3, r2
 800ba82:	6963      	ldr	r3, [r4, #20]
 800ba84:	b2f6      	uxtb	r6, r6
 800ba86:	4283      	cmp	r3, r0
 800ba88:	4637      	mov	r7, r6
 800ba8a:	dc04      	bgt.n	800ba96 <__swbuf_r+0x3a>
 800ba8c:	4621      	mov	r1, r4
 800ba8e:	4628      	mov	r0, r5
 800ba90:	f7ff fdc2 	bl	800b618 <_fflush_r>
 800ba94:	b9e0      	cbnz	r0, 800bad0 <__swbuf_r+0x74>
 800ba96:	68a3      	ldr	r3, [r4, #8]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	60a3      	str	r3, [r4, #8]
 800ba9c:	6823      	ldr	r3, [r4, #0]
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	6022      	str	r2, [r4, #0]
 800baa2:	701e      	strb	r6, [r3, #0]
 800baa4:	6962      	ldr	r2, [r4, #20]
 800baa6:	1c43      	adds	r3, r0, #1
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d004      	beq.n	800bab6 <__swbuf_r+0x5a>
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	07db      	lsls	r3, r3, #31
 800bab0:	d506      	bpl.n	800bac0 <__swbuf_r+0x64>
 800bab2:	2e0a      	cmp	r6, #10
 800bab4:	d104      	bne.n	800bac0 <__swbuf_r+0x64>
 800bab6:	4621      	mov	r1, r4
 800bab8:	4628      	mov	r0, r5
 800baba:	f7ff fdad 	bl	800b618 <_fflush_r>
 800babe:	b938      	cbnz	r0, 800bad0 <__swbuf_r+0x74>
 800bac0:	4638      	mov	r0, r7
 800bac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bac4:	4621      	mov	r1, r4
 800bac6:	4628      	mov	r0, r5
 800bac8:	f000 f806 	bl	800bad8 <__swsetup_r>
 800bacc:	2800      	cmp	r0, #0
 800bace:	d0d5      	beq.n	800ba7c <__swbuf_r+0x20>
 800bad0:	f04f 37ff 	mov.w	r7, #4294967295
 800bad4:	e7f4      	b.n	800bac0 <__swbuf_r+0x64>
	...

0800bad8 <__swsetup_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4b2a      	ldr	r3, [pc, #168]	; (800bb84 <__swsetup_r+0xac>)
 800badc:	4605      	mov	r5, r0
 800bade:	6818      	ldr	r0, [r3, #0]
 800bae0:	460c      	mov	r4, r1
 800bae2:	b118      	cbz	r0, 800baec <__swsetup_r+0x14>
 800bae4:	6a03      	ldr	r3, [r0, #32]
 800bae6:	b90b      	cbnz	r3, 800baec <__swsetup_r+0x14>
 800bae8:	f7fd ffe4 	bl	8009ab4 <__sinit>
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baf2:	0718      	lsls	r0, r3, #28
 800baf4:	d422      	bmi.n	800bb3c <__swsetup_r+0x64>
 800baf6:	06d9      	lsls	r1, r3, #27
 800baf8:	d407      	bmi.n	800bb0a <__swsetup_r+0x32>
 800bafa:	2309      	movs	r3, #9
 800bafc:	602b      	str	r3, [r5, #0]
 800bafe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb02:	81a3      	strh	r3, [r4, #12]
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	e034      	b.n	800bb74 <__swsetup_r+0x9c>
 800bb0a:	0758      	lsls	r0, r3, #29
 800bb0c:	d512      	bpl.n	800bb34 <__swsetup_r+0x5c>
 800bb0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb10:	b141      	cbz	r1, 800bb24 <__swsetup_r+0x4c>
 800bb12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb16:	4299      	cmp	r1, r3
 800bb18:	d002      	beq.n	800bb20 <__swsetup_r+0x48>
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f7fe ffd6 	bl	800aacc <_free_r>
 800bb20:	2300      	movs	r3, #0
 800bb22:	6363      	str	r3, [r4, #52]	; 0x34
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	6063      	str	r3, [r4, #4]
 800bb30:	6923      	ldr	r3, [r4, #16]
 800bb32:	6023      	str	r3, [r4, #0]
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	f043 0308 	orr.w	r3, r3, #8
 800bb3a:	81a3      	strh	r3, [r4, #12]
 800bb3c:	6923      	ldr	r3, [r4, #16]
 800bb3e:	b94b      	cbnz	r3, 800bb54 <__swsetup_r+0x7c>
 800bb40:	89a3      	ldrh	r3, [r4, #12]
 800bb42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb4a:	d003      	beq.n	800bb54 <__swsetup_r+0x7c>
 800bb4c:	4621      	mov	r1, r4
 800bb4e:	4628      	mov	r0, r5
 800bb50:	f000 f840 	bl	800bbd4 <__smakebuf_r>
 800bb54:	89a0      	ldrh	r0, [r4, #12]
 800bb56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb5a:	f010 0301 	ands.w	r3, r0, #1
 800bb5e:	d00a      	beq.n	800bb76 <__swsetup_r+0x9e>
 800bb60:	2300      	movs	r3, #0
 800bb62:	60a3      	str	r3, [r4, #8]
 800bb64:	6963      	ldr	r3, [r4, #20]
 800bb66:	425b      	negs	r3, r3
 800bb68:	61a3      	str	r3, [r4, #24]
 800bb6a:	6923      	ldr	r3, [r4, #16]
 800bb6c:	b943      	cbnz	r3, 800bb80 <__swsetup_r+0xa8>
 800bb6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb72:	d1c4      	bne.n	800bafe <__swsetup_r+0x26>
 800bb74:	bd38      	pop	{r3, r4, r5, pc}
 800bb76:	0781      	lsls	r1, r0, #30
 800bb78:	bf58      	it	pl
 800bb7a:	6963      	ldrpl	r3, [r4, #20]
 800bb7c:	60a3      	str	r3, [r4, #8]
 800bb7e:	e7f4      	b.n	800bb6a <__swsetup_r+0x92>
 800bb80:	2000      	movs	r0, #0
 800bb82:	e7f7      	b.n	800bb74 <__swsetup_r+0x9c>
 800bb84:	20000070 	.word	0x20000070

0800bb88 <__swhatbuf_r>:
 800bb88:	b570      	push	{r4, r5, r6, lr}
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb90:	2900      	cmp	r1, #0
 800bb92:	b096      	sub	sp, #88	; 0x58
 800bb94:	4615      	mov	r5, r2
 800bb96:	461e      	mov	r6, r3
 800bb98:	da0d      	bge.n	800bbb6 <__swhatbuf_r+0x2e>
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bba0:	f04f 0100 	mov.w	r1, #0
 800bba4:	bf0c      	ite	eq
 800bba6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bbaa:	2340      	movne	r3, #64	; 0x40
 800bbac:	2000      	movs	r0, #0
 800bbae:	6031      	str	r1, [r6, #0]
 800bbb0:	602b      	str	r3, [r5, #0]
 800bbb2:	b016      	add	sp, #88	; 0x58
 800bbb4:	bd70      	pop	{r4, r5, r6, pc}
 800bbb6:	466a      	mov	r2, sp
 800bbb8:	f000 f848 	bl	800bc4c <_fstat_r>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	dbec      	blt.n	800bb9a <__swhatbuf_r+0x12>
 800bbc0:	9901      	ldr	r1, [sp, #4]
 800bbc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bbc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bbca:	4259      	negs	r1, r3
 800bbcc:	4159      	adcs	r1, r3
 800bbce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbd2:	e7eb      	b.n	800bbac <__swhatbuf_r+0x24>

0800bbd4 <__smakebuf_r>:
 800bbd4:	898b      	ldrh	r3, [r1, #12]
 800bbd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbd8:	079d      	lsls	r5, r3, #30
 800bbda:	4606      	mov	r6, r0
 800bbdc:	460c      	mov	r4, r1
 800bbde:	d507      	bpl.n	800bbf0 <__smakebuf_r+0x1c>
 800bbe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbe4:	6023      	str	r3, [r4, #0]
 800bbe6:	6123      	str	r3, [r4, #16]
 800bbe8:	2301      	movs	r3, #1
 800bbea:	6163      	str	r3, [r4, #20]
 800bbec:	b002      	add	sp, #8
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	ab01      	add	r3, sp, #4
 800bbf2:	466a      	mov	r2, sp
 800bbf4:	f7ff ffc8 	bl	800bb88 <__swhatbuf_r>
 800bbf8:	9900      	ldr	r1, [sp, #0]
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f7fd f9db 	bl	8008fb8 <_malloc_r>
 800bc02:	b948      	cbnz	r0, 800bc18 <__smakebuf_r+0x44>
 800bc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc08:	059a      	lsls	r2, r3, #22
 800bc0a:	d4ef      	bmi.n	800bbec <__smakebuf_r+0x18>
 800bc0c:	f023 0303 	bic.w	r3, r3, #3
 800bc10:	f043 0302 	orr.w	r3, r3, #2
 800bc14:	81a3      	strh	r3, [r4, #12]
 800bc16:	e7e3      	b.n	800bbe0 <__smakebuf_r+0xc>
 800bc18:	89a3      	ldrh	r3, [r4, #12]
 800bc1a:	6020      	str	r0, [r4, #0]
 800bc1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	9b00      	ldr	r3, [sp, #0]
 800bc24:	6163      	str	r3, [r4, #20]
 800bc26:	9b01      	ldr	r3, [sp, #4]
 800bc28:	6120      	str	r0, [r4, #16]
 800bc2a:	b15b      	cbz	r3, 800bc44 <__smakebuf_r+0x70>
 800bc2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc30:	4630      	mov	r0, r6
 800bc32:	f000 f81d 	bl	800bc70 <_isatty_r>
 800bc36:	b128      	cbz	r0, 800bc44 <__smakebuf_r+0x70>
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	f023 0303 	bic.w	r3, r3, #3
 800bc3e:	f043 0301 	orr.w	r3, r3, #1
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	431d      	orrs	r5, r3
 800bc48:	81a5      	strh	r5, [r4, #12]
 800bc4a:	e7cf      	b.n	800bbec <__smakebuf_r+0x18>

0800bc4c <_fstat_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4d07      	ldr	r5, [pc, #28]	; (800bc6c <_fstat_r+0x20>)
 800bc50:	2300      	movs	r3, #0
 800bc52:	4604      	mov	r4, r0
 800bc54:	4608      	mov	r0, r1
 800bc56:	4611      	mov	r1, r2
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	f7f7 fb80 	bl	800335e <_fstat>
 800bc5e:	1c43      	adds	r3, r0, #1
 800bc60:	d102      	bne.n	800bc68 <_fstat_r+0x1c>
 800bc62:	682b      	ldr	r3, [r5, #0]
 800bc64:	b103      	cbz	r3, 800bc68 <_fstat_r+0x1c>
 800bc66:	6023      	str	r3, [r4, #0]
 800bc68:	bd38      	pop	{r3, r4, r5, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2000092c 	.word	0x2000092c

0800bc70 <_isatty_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_isatty_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f7 fb7f 	bl	800337e <_isatty>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_isatty_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_isatty_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	2000092c 	.word	0x2000092c

0800bc90 <_init>:
 800bc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc92:	bf00      	nop
 800bc94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc96:	bc08      	pop	{r3}
 800bc98:	469e      	mov	lr, r3
 800bc9a:	4770      	bx	lr

0800bc9c <_fini>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	bf00      	nop
 800bca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bca2:	bc08      	pop	{r3}
 800bca4:	469e      	mov	lr, r3
 800bca6:	4770      	bx	lr
