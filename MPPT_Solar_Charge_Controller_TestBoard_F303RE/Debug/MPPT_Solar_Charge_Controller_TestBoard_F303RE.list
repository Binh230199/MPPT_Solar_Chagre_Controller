
MPPT_Solar_Charge_Controller_TestBoard_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a24  0800a550  0800a550  0001a550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af74  0800af74  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800af74  0800af74  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af74  0800af74  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af74  0800af74  0001af74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800af7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000006fc  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008d4  200008d4  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025ee4  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d9f  00000000  00000000  0004612f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011c0  00000000  00000000  0004aed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d83  00000000  00000000  0004c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027e9c  00000000  00000000  0004ce13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ca26  00000000  00000000  00074caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7ba7  00000000  00000000  000916d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b6c  00000000  00000000  0016927c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  0016ede8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a534 	.word	0x0800a534

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800a534 	.word	0x0800a534

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <_ZN4blib6AnalogC1Ev>:

#include "Analog.h"

namespace blib
{
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fa0e 	bl	8001084 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>
 8000c68:	4a0c      	ldr	r2, [pc, #48]	; (8000c9c <_ZN4blib6AnalogC1Ev+0x44>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <_ZN4blib6AnalogC1Ev+0x48>)
 8000c82:	619a      	str	r2, [r3, #24]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <_ZN4blib6AnalogC1Ev+0x4c>)
 8000c88:	61da      	str	r2, [r3, #28]
    {
        sampling();
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f834 	bl	8000cf8 <_ZN4blib6Analog8samplingEv>
    }
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	0800ab20 	.word	0x0800ab20
 8000ca0:	200001f8 	.word	0x200001f8
 8000ca4:	20000248 	.word	0x20000248

08000ca8 <_ZN4blib6AnalogD1Ev>:

    Analog::~Analog()
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <_ZN4blib6AnalogD1Ev+0x2c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	601a      	str	r2, [r3, #0]
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 ffd0 	bl	8002c60 <HAL_ADC_Stop_DMA>
    Analog::~Analog()
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f9ee 	bl	80010a4 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
    }
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	0800ab20 	.word	0x0800ab20

08000cd8 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    }
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ffe1 	bl	8000ca8 <_ZN4blib6AnalogD1Ev>
 8000ce6:	2134      	movs	r1, #52	; 0x34
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f006 fd62 	bl	80077b2 <_ZdlPvj>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6998      	ldr	r0, [r3, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3304      	adds	r3, #4
 8000d08:	2205      	movs	r2, #5
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f001 fe8c 	bl	8002a28 <HAL_ADC_Start_DMA>
    }
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZNK4blib6Analog6getVinEv>:

    float Analog::getVin() const
    {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
        return mVin;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	ee07 3a90 	vmov	s15, r3
    }
 8000d28:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <_ZNK4blib6Analog6getIinEv>:
    float Analog::getIin() const
    {
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
        return mIin;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	ee07 3a90 	vmov	s15, r3
    }
 8000d46:	eeb0 0a67 	vmov.f32	s0, s15
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_ZNK4blib6Analog7getVoutEv>:
    float Analog::getVout() const
    {
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
        return mVout;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	ee07 3a90 	vmov	s15, r3
    }
 8000d64:	eeb0 0a67 	vmov.f32	s0, s15
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_ZNK4blib6Analog7getIoutEv>:
    float Analog::getIout() const
    {
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
        return mIout;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	ee07 3a90 	vmov	s15, r3
    }
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_ZN4blib6Analog10readAnalogEv>:
    {
        return mTemp;
    }

    void Analog::readAnalog()
    {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
        mVin = convertAdcChannel1(mAdcValues[0]);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f836 	bl	8000e10 <_ZN4blib6Analog18convertAdcChannel1Em>
 8000da4:	eef0 7a40 	vmov.f32	s15, s0
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	edc3 7a08 	vstr	s15, [r3, #32]
        mIin = convertAdcChannel2(mAdcValues[1]);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	4619      	mov	r1, r3
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 f85f 	bl	8000e78 <_ZN4blib6Analog18convertAdcChannel2Em>
 8000dba:	eef0 7a40 	vmov.f32	s15, s0
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        mVout = convertAdcChannel3(mAdcValues[2]);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f8a4 	bl	8000f18 <_ZN4blib6Analog18convertAdcChannel3Em>
 8000dd0:	eef0 7a40 	vmov.f32	s15, s0
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        mIout = convertAdcChannel4(mAdcValues[3]);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	4619      	mov	r1, r3
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f000 f8cd 	bl	8000f80 <_ZN4blib6Analog18convertAdcChannel4Em>
 8000de6:	eef0 7a40 	vmov.f32	s15, s0
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        mTemp = convertAdcChannel5(mAdcValues[4]);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	4619      	mov	r1, r3
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f912 	bl	8001020 <_ZN4blib6Analog18convertAdcChannel5Em>
 8000dfc:	eef0 7a40 	vmov.f32	s15, s0
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
//        LOGI("mVin : [%.2f] V", mVin);
//        LOGI("mIin : [%.2f] A", mIin);
//        LOGI("mVout : [%.2f] V", mVout);
//        LOGI("mIout : [%.2f] A", mIout);
//        LOGI("mTemp : [%.2f] C", mTemp);
    }
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <_ZN4blib6Analog18convertAdcChannel1Em>:

    float Analog::convertAdcChannel1(uint32_t adcValue)    // Convert adcValue -> Vin
    {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
        return CHANNEL_1_RATIO * ((float) adcValue / 4095) * 3.3;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e24:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000e70 <_ZN4blib6Analog18convertAdcChannel1Em+0x60>
 8000e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e34:	ee17 0a90 	vmov	r0, s15
 8000e38:	f7ff fb8e 	bl	8000558 <__aeabi_f2d>
 8000e3c:	a30a      	add	r3, pc, #40	; (adr r3, 8000e68 <_ZN4blib6Analog18convertAdcChannel1Em+0x58>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f7ff fbe1 	bl	8000608 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff feb3 	bl	8000bb8 <__aeabi_d2f>
 8000e52:	4603      	mov	r3, r0
 8000e54:	ee07 3a90 	vmov	s15, r3
    }
 8000e58:	eeb0 0a67 	vmov.f32	s0, s15
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	f3af 8000 	nop.w
 8000e68:	66666666 	.word	0x66666666
 8000e6c:	400a6666 	.word	0x400a6666
 8000e70:	457ff000 	.word	0x457ff000
 8000e74:	00000000 	.word	0x00000000

08000e78 <_ZN4blib6Analog18convertAdcChannel2Em>:

    float Analog::convertAdcChannel2(uint32_t adcValue)    // Convert adcValue -> Iin
    {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
        float voltage = CHANNEL_2_RATIO * ((float) adcValue / 4095) * 3.3;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e8c:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000f10 <_ZN4blib6Analog18convertAdcChannel2Em+0x98>
 8000e90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e94:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e9c:	ee17 0a90 	vmov	r0, s15
 8000ea0:	f7ff fb5a 	bl	8000558 <__aeabi_f2d>
 8000ea4:	a316      	add	r3, pc, #88	; (adr r3, 8000f00 <_ZN4blib6Analog18convertAdcChannel2Em+0x88>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fbad 	bl	8000608 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fe7f 	bl	8000bb8 <__aeabi_d2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff fb4a 	bl	8000558 <__aeabi_f2d>
 8000ec4:	f04f 0200 	mov.w	r2, #0
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <_ZN4blib6Analog18convertAdcChannel2Em+0x9c>)
 8000eca:	f7ff f9e5 	bl	8000298 <__aeabi_dsub>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	a30c      	add	r3, pc, #48	; (adr r3, 8000f08 <_ZN4blib6Analog18convertAdcChannel2Em+0x90>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fcbe 	bl	800085c <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fe66 	bl	8000bb8 <__aeabi_d2f>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60bb      	str	r3, [r7, #8]

        return current;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	ee07 3a90 	vmov	s15, r3
    }
 8000ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	66666666 	.word	0x66666666
 8000f04:	400a6666 	.word	0x400a6666
 8000f08:	a0000000 	.word	0xa0000000
 8000f0c:	3fb99999 	.word	0x3fb99999
 8000f10:	457ff000 	.word	0x457ff000
 8000f14:	40040000 	.word	0x40040000

08000f18 <_ZN4blib6Analog18convertAdcChannel3Em>:
    float Analog::convertAdcChannel3(uint32_t adcValue)    // Convert adcValue -> Vout
    {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
        return CHANNEL_3_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	ee07 3a90 	vmov	s15, r3
 8000f28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f2c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000f78 <_ZN4blib6Analog18convertAdcChannel3Em+0x60>
 8000f30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f34:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3c:	ee17 0a90 	vmov	r0, s15
 8000f40:	f7ff fb0a 	bl	8000558 <__aeabi_f2d>
 8000f44:	a30a      	add	r3, pc, #40	; (adr r3, 8000f70 <_ZN4blib6Analog18convertAdcChannel3Em+0x58>)
 8000f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4a:	f7ff fb5d 	bl	8000608 <__aeabi_dmul>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4610      	mov	r0, r2
 8000f54:	4619      	mov	r1, r3
 8000f56:	f7ff fe2f 	bl	8000bb8 <__aeabi_d2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	ee07 3a90 	vmov	s15, r3
    }
 8000f60:	eeb0 0a67 	vmov.f32	s0, s15
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	f3af 8000 	nop.w
 8000f70:	66666666 	.word	0x66666666
 8000f74:	400a6666 	.word	0x400a6666
 8000f78:	457ff000 	.word	0x457ff000
 8000f7c:	00000000 	.word	0x00000000

08000f80 <_ZN4blib6Analog18convertAdcChannel4Em>:
    float Analog::convertAdcChannel4(uint32_t adcValue)    // Convert adcValue -> Iout
    {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
        float voltage = CHANNEL_4_RATIO * ((float) adcValue / 4095) * 3.3;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f94:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001018 <_ZN4blib6Analog18convertAdcChannel4Em+0x98>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	ee17 0a90 	vmov	r0, s15
 8000fa8:	f7ff fad6 	bl	8000558 <__aeabi_f2d>
 8000fac:	a316      	add	r3, pc, #88	; (adr r3, 8001008 <_ZN4blib6Analog18convertAdcChannel4Em+0x88>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fb29 	bl	8000608 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fdfb 	bl	8000bb8 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff fac6 	bl	8000558 <__aeabi_f2d>
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <_ZN4blib6Analog18convertAdcChannel4Em+0x9c>)
 8000fd2:	f7ff f961 	bl	8000298 <__aeabi_dsub>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	a30c      	add	r3, pc, #48	; (adr r3, 8001010 <_ZN4blib6Analog18convertAdcChannel4Em+0x90>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff fc3a 	bl	800085c <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fde2 	bl	8000bb8 <__aeabi_d2f>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60bb      	str	r3, [r7, #8]

        return current;
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	ee07 3a90 	vmov	s15, r3
    }
 8000ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	66666666 	.word	0x66666666
 800100c:	400a6666 	.word	0x400a6666
 8001010:	a0000000 	.word	0xa0000000
 8001014:	3fb99999 	.word	0x3fb99999
 8001018:	457ff000 	.word	0x457ff000
 800101c:	40040000 	.word	0x40040000

08001020 <_ZN4blib6Analog18convertAdcChannel5Em>:
    float Analog::convertAdcChannel5(uint32_t adcValue)    // Convert adcValue -> Temperature NTC 10k
    {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
        return CHANNEL_5_RATIO * ((float) adcValue / 4095) * 3.3;
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001034:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001080 <_ZN4blib6Analog18convertAdcChannel5Em+0x60>
 8001038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001044:	ee17 0a90 	vmov	r0, s15
 8001048:	f7ff fa86 	bl	8000558 <__aeabi_f2d>
 800104c:	a30a      	add	r3, pc, #40	; (adr r3, 8001078 <_ZN4blib6Analog18convertAdcChannel5Em+0x58>)
 800104e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001052:	f7ff fad9 	bl	8000608 <__aeabi_dmul>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fdab 	bl	8000bb8 <__aeabi_d2f>
 8001062:	4603      	mov	r3, r0
 8001064:	ee07 3a90 	vmov	s15, r3
    }
 8001068:	eeb0 0a67 	vmov.f32	s0, s15
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	66666666 	.word	0x66666666
 800107c:	400a6666 	.word	0x400a6666
 8001080:	457ff000 	.word	0x457ff000

08001084 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
                {
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev+0x1c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	601a      	str	r2, [r3, #0]
                }
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	0800ab30 	.word	0x0800ab30

080010a4 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>:
                virtual ~Singleton()
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
                {
                }
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev+0x1c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	0800ab30 	.word	0x0800ab30

080010c4 <_ZN4blib2dp9SingletonINS_6AnalogEED0Ev>:
                virtual ~Singleton()
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
                }
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffe9 	bl	80010a4 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 80010d2:	2104      	movs	r1, #4
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f006 fb6c 	bl	80077b2 <_ZdlPvj>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <_ZN4blib6Logger5printEPKc+0x2c>)
 80010ee:	681c      	ldr	r4, [r3, #0]
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f8c5 	bl	8000280 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4620      	mov	r0, r4
 8001102:	f005 fcd1 	bl	8006aa8 <HAL_UART_Transmit>
            }
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	bf00      	nop
 8001110:	2000000c 	.word	0x2000000c

08001114 <_ZN4blib13ChargeControlC1Ev>:
#include "ChargeControl.h"

namespace blib
{

    ChargeControl::ChargeControl()
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f83c 	bl	800119c <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <_ZN4blib13ChargeControlC1Ev+0x2c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	711a      	strb	r2, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	715a      	strb	r2, [r3, #5]
    {

    }
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	0800ab40 	.word	0x0800ab40

08001144 <_ZN4blib13ChargeControlD1Ev>:
    ChargeControl::~ChargeControl()
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_ZN4blib13ChargeControlD1Ev+0x20>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 f831 	bl	80011bc <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
    {

    }
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800ab40 	.word	0x0800ab40

08001168 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
    }
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ffe7 	bl	8001144 <_ZN4blib13ChargeControlD1Ev>
 8001176:	210c      	movs	r1, #12
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f006 fb1a 	bl	80077b2 <_ZdlPvj>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4618      	mov	r0, r3
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <_ZN4blib13ChargeControl3runEv>:
    void ChargeControl::run()
    {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

    }
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>:
                Singleton()
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
                {
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev+0x1c>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
                }
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	0800ab50 	.word	0x0800ab50

080011bc <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>:
                virtual ~Singleton()
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
                }
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev+0x1c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4618      	mov	r0, r3
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	0800ab50 	.word	0x0800ab50

080011dc <_ZN4blib2dp9SingletonINS_13ChargeControlEED0Ev>:
                virtual ~Singleton()
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
                }
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ffe9 	bl	80011bc <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
 80011ea:	2104      	movs	r1, #4
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f006 fae0 	bl	80077b2 <_ZdlPvj>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 800120c:	f7ff ff6a 	bl	80010e4 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001220:	4807      	ldr	r0, [pc, #28]	; (8001240 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8001222:	f007 f8cf 	bl	80083c4 <sniprintf>
                print(mBuffer);
 8001226:	4806      	ldr	r0, [pc, #24]	; (8001240 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8001228:	f7ff ff5c 	bl	80010e4 <_ZN4blib6Logger5printEPKc>
                print("\n");
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 800122e:	f7ff ff59 	bl	80010e4 <_ZN4blib6Logger5printEPKc>
            }
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	0800a58c 	.word	0x0800a58c
 8001240:	20000384 	.word	0x20000384
 8001244:	0800a594 	.word	0x0800a594

08001248 <_ZN4blib7MonitorC1Ev>:
#include "Monitor.h"
#include "Button.h"
#include "Analog.h"
namespace blib
{
    Monitor::Monitor() : mLcdDisplay(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 fa00 	bl	8001658 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>
 8001258:	4a12      	ldr	r2, [pc, #72]	; (80012a4 <_ZN4blib7MonitorC1Ev+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	721a      	strb	r2, [r3, #8]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	725a      	strb	r2, [r3, #9]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f103 0014 	add.w	r0, r3, #20
 8001282:	234e      	movs	r3, #78	; 0x4e
 8001284:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <_ZN4blib7MonitorC1Ev+0x60>)
 8001286:	2101      	movs	r1, #1
 8001288:	f006 f914 	bl	80074b4 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>
    {
        showInit();
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f835 	bl	80012fc <_ZN4blib7Monitor8showInitEv>
        HAL_Delay(1500);
 8001292:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001296:	f001 f98b 	bl	80025b0 <HAL_Delay>

    }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	0800ab60 	.word	0x0800ab60
 80012a8:	2000028c 	.word	0x2000028c

080012ac <_ZN4blib7MonitorD1Ev>:
    Monitor::~Monitor()
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <_ZN4blib7MonitorD1Ev+0x2c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3314      	adds	r3, #20
 80012be:	4618      	mov	r0, r3
 80012c0:	f006 f916 	bl	80074f0 <_ZN4blib3LcdD1Ev>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 f9d6 	bl	8001678 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
    {

    }
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	0800ab60 	.word	0x0800ab60

080012dc <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
    }
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffe1 	bl	80012ac <_ZN4blib7MonitorD1Ev>
 80012ea:	2128      	movs	r1, #40	; 0x28
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f006 fa60 	bl	80077b2 <_ZdlPvj>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
        LOGI();
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <_ZN4blib7Monitor8showInitEv+0x68>)
 8001306:	221b      	movs	r2, #27
 8001308:	4917      	ldr	r1, [pc, #92]	; (8001368 <_ZN4blib7Monitor8showInitEv+0x6c>)
 800130a:	4818      	ldr	r0, [pc, #96]	; (800136c <_ZN4blib7Monitor8showInitEv+0x70>)
 800130c:	f7ff ff76 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        mLcdDisplay.clearDisplay();
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3314      	adds	r3, #20
 8001314:	4618      	mov	r0, r3
 8001316:	f006 f9d1 	bl	80076bc <_ZN4blib3Lcd12clearDisplayEv>
        mLcdDisplay.displayLine(0, 2, "DO AN TOT NGHIEP");
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f103 0014 	add.w	r0, r3, #20
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_ZN4blib7Monitor8showInitEv+0x74>)
 8001322:	2202      	movs	r2, #2
 8001324:	2100      	movs	r1, #0
 8001326:	f006 f96d 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(1, 2, "NAM HOC: 2023-2024");
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f103 0014 	add.w	r0, r3, #20
 8001330:	4b10      	ldr	r3, [pc, #64]	; (8001374 <_ZN4blib7Monitor8showInitEv+0x78>)
 8001332:	2202      	movs	r2, #2
 8001334:	2101      	movs	r1, #1
 8001336:	f006 f965 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(2, 2, "LOP: DTD61DH");
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f103 0014 	add.w	r0, r3, #20
 8001340:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <_ZN4blib7Monitor8showInitEv+0x7c>)
 8001342:	2202      	movs	r2, #2
 8001344:	2102      	movs	r1, #2
 8001346:	f006 f95d 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(3, 1, "DAI HOC HANG HAI VN");
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f103 0014 	add.w	r0, r3, #20
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <_ZN4blib7Monitor8showInitEv+0x80>)
 8001352:	2201      	movs	r2, #1
 8001354:	2103      	movs	r1, #3
 8001356:	f006 f955 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	0800a598 	.word	0x0800a598
 8001368:	0800a5a4 	.word	0x0800a5a4
 800136c:	0800a5b0 	.word	0x0800a5b0
 8001370:	0800a5c0 	.word	0x0800a5c0
 8001374:	0800a5d4 	.word	0x0800a5d4
 8001378:	0800a5e8 	.word	0x0800a5e8
 800137c:	0800a5f8 	.word	0x0800a5f8

08001380 <_ZN4blib7Monitor10homeScreenEv>:

    void Monitor::homeScreen()
    {
 8001380:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001384:	ed2d 8b02 	vpush	{d8}
 8001388:	b0a2      	sub	sp, #136	; 0x88
 800138a:	af06      	add	r7, sp, #24
 800138c:	6078      	str	r0, [r7, #4]
        LOGI();
 800138e:	4b68      	ldr	r3, [pc, #416]	; (8001530 <_ZN4blib7Monitor10homeScreenEv+0x1b0>)
 8001390:	2225      	movs	r2, #37	; 0x25
 8001392:	4968      	ldr	r1, [pc, #416]	; (8001534 <_ZN4blib7Monitor10homeScreenEv+0x1b4>)
 8001394:	4868      	ldr	r0, [pc, #416]	; (8001538 <_ZN4blib7Monitor10homeScreenEv+0x1b8>)
 8001396:	f7ff ff31 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

        const uint8_t COL = 21;
 800139a:	2315      	movs	r3, #21
 800139c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

        char line0[COL] = { 0 };
 80013a0:	2300      	movs	r3, #0
 80013a2:	653b      	str	r3, [r7, #80]	; 0x50
 80013a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	741a      	strb	r2, [r3, #16]
        char line1[COL] = { 0 };
 80013b4:	2300      	movs	r3, #0
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80013b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	741a      	strb	r2, [r3, #16]
        char line2[COL] = { 0 };
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	741a      	strb	r2, [r3, #16]
        char line3[COL] = "Press any button";
 80013dc:	4b57      	ldr	r3, [pc, #348]	; (800153c <_ZN4blib7Monitor10homeScreenEv+0x1bc>)
 80013de:	f107 0408 	add.w	r4, r7, #8
 80013e2:	461d      	mov	r5, r3
 80013e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	7023      	strb	r3, [r4, #0]
 80013ec:	f107 0319 	add.w	r3, r7, #25
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        auto &analog = Analog::getInstance();
 80013f4:	f000 f960 	bl	80016b8 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80013f8:	66b8      	str	r0, [r7, #104]	; 0x68

        snprintf(line0, COL, "%02.1fV %02.1fA %02.1fW", analog.getVin(), analog.getIin(),
 80013fa:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80013fc:	f7ff fc8c 	bl	8000d18 <_ZNK4blib6Analog6getVinEv>
 8001400:	ee10 3a10 	vmov	r3, s0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8a7 	bl	8000558 <__aeabi_f2d>
 800140a:	4604      	mov	r4, r0
 800140c:	460d      	mov	r5, r1
 800140e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001410:	f7ff fc91 	bl	8000d36 <_ZNK4blib6Analog6getIinEv>
 8001414:	ee10 3a10 	vmov	r3, s0
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f89d 	bl	8000558 <__aeabi_f2d>
 800141e:	4680      	mov	r8, r0
 8001420:	4689      	mov	r9, r1
                analog.getVin() * analog.getIin());
 8001422:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001424:	f7ff fc78 	bl	8000d18 <_ZNK4blib6Analog6getVinEv>
 8001428:	eeb0 8a40 	vmov.f32	s16, s0
 800142c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800142e:	f7ff fc82 	bl	8000d36 <_ZNK4blib6Analog6getIinEv>
 8001432:	eef0 7a40 	vmov.f32	s15, s0
 8001436:	ee68 7a27 	vmul.f32	s15, s16, s15
        snprintf(line0, COL, "%02.1fV %02.1fA %02.1fW", analog.getVin(), analog.getIin(),
 800143a:	ee17 0a90 	vmov	r0, s15
 800143e:	f7ff f88b 	bl	8000558 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800144a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800144e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001452:	e9cd 4500 	strd	r4, r5, [sp]
 8001456:	4a3a      	ldr	r2, [pc, #232]	; (8001540 <_ZN4blib7Monitor10homeScreenEv+0x1c0>)
 8001458:	2115      	movs	r1, #21
 800145a:	f006 ffb3 	bl	80083c4 <sniprintf>
        snprintf(line1, COL, "%02.1fV %02.1fA %02.1fW", analog.getVout(), analog.getIout(),
 800145e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001460:	f7ff fc78 	bl	8000d54 <_ZNK4blib6Analog7getVoutEv>
 8001464:	ee10 3a10 	vmov	r3, s0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f875 	bl	8000558 <__aeabi_f2d>
 800146e:	4604      	mov	r4, r0
 8001470:	460d      	mov	r5, r1
 8001472:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001474:	f7ff fc7d 	bl	8000d72 <_ZNK4blib6Analog7getIoutEv>
 8001478:	ee10 3a10 	vmov	r3, s0
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f86b 	bl	8000558 <__aeabi_f2d>
 8001482:	4680      	mov	r8, r0
 8001484:	4689      	mov	r9, r1
                analog.getVout() * analog.getIout());
 8001486:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001488:	f7ff fc64 	bl	8000d54 <_ZNK4blib6Analog7getVoutEv>
 800148c:	eeb0 8a40 	vmov.f32	s16, s0
 8001490:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001492:	f7ff fc6e 	bl	8000d72 <_ZNK4blib6Analog7getIoutEv>
 8001496:	eef0 7a40 	vmov.f32	s15, s0
 800149a:	ee68 7a27 	vmul.f32	s15, s16, s15
        snprintf(line1, COL, "%02.1fV %02.1fA %02.1fW", analog.getVout(), analog.getIout(),
 800149e:	ee17 0a90 	vmov	r0, s15
 80014a2:	f7ff f859 	bl	8000558 <__aeabi_f2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80014ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014b2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014b6:	e9cd 4500 	strd	r4, r5, [sp]
 80014ba:	4a21      	ldr	r2, [pc, #132]	; (8001540 <_ZN4blib7Monitor10homeScreenEv+0x1c0>)
 80014bc:	2115      	movs	r1, #21
 80014be:	f006 ff81 	bl	80083c4 <sniprintf>
        snprintf(line2, COL, "%d", 1);
 80014c2:	f107 0020 	add.w	r0, r7, #32
 80014c6:	2301      	movs	r3, #1
 80014c8:	4a1e      	ldr	r2, [pc, #120]	; (8001544 <_ZN4blib7Monitor10homeScreenEv+0x1c4>)
 80014ca:	2115      	movs	r1, #21
 80014cc:	f006 ff7a 	bl	80083c4 <sniprintf>

        mLcdDisplay.clearDisplay();
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3314      	adds	r3, #20
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 f8f1 	bl	80076bc <_ZN4blib3Lcd12clearDisplayEv>
        mLcdDisplay.displayLine(0, 2, line0);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f103 0014 	add.w	r0, r3, #20
 80014e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014e4:	2202      	movs	r2, #2
 80014e6:	2100      	movs	r1, #0
 80014e8:	f006 f88c 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(1, 2, line1);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f103 0014 	add.w	r0, r3, #20
 80014f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014f6:	2202      	movs	r2, #2
 80014f8:	2101      	movs	r1, #1
 80014fa:	f006 f883 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(2, 2, line2);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f103 0014 	add.w	r0, r3, #20
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	2202      	movs	r2, #2
 800150a:	2102      	movs	r1, #2
 800150c:	f006 f87a 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(3, 1, line3);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f103 0014 	add.w	r0, r3, #20
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	2201      	movs	r2, #1
 800151c:	2103      	movs	r1, #3
 800151e:	f006 f871 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 8001522:	bf00      	nop
 8001524:	3770      	adds	r7, #112	; 0x70
 8001526:	46bd      	mov	sp, r7
 8001528:	ecbd 8b02 	vpop	{d8}
 800152c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001530:	0800a60c 	.word	0x0800a60c
 8001534:	0800a5a4 	.word	0x0800a5a4
 8001538:	0800a5b0 	.word	0x0800a5b0
 800153c:	0800a634 	.word	0x0800a634
 8001540:	0800a618 	.word	0x0800a618
 8001544:	0800a630 	.word	0x0800a630

08001548 <_ZN4blib7Monitor10menuScreenEv>:

    void Monitor::menuScreen()
    {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
        mLcdDisplay.clearDisplay();
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3314      	adds	r3, #20
 8001554:	4618      	mov	r0, r3
 8001556:	f006 f8b1 	bl	80076bc <_ZN4blib3Lcd12clearDisplayEv>

        mLcdDisplay.displayLine(0, 1, "DISPLAY MODE");
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f103 0014 	add.w	r0, r3, #20
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_ZN4blib7Monitor10menuScreenEv+0x60>)
 8001562:	2201      	movs	r2, #1
 8001564:	2100      	movs	r1, #0
 8001566:	f006 f84d 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(1, 1, "SETTING MODE");
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f103 0014 	add.w	r0, r3, #20
 8001570:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <_ZN4blib7Monitor10menuScreenEv+0x64>)
 8001572:	2201      	movs	r2, #1
 8001574:	2101      	movs	r1, #1
 8001576:	f006 f845 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(2, 1, "ABOUT");
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f103 0014 	add.w	r0, r3, #20
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <_ZN4blib7Monitor10menuScreenEv+0x68>)
 8001582:	2201      	movs	r2, #1
 8001584:	2102      	movs	r1, #2
 8001586:	f006 f83d 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        mLcdDisplay.displayLine(3, 1, "1UP 2DOWN 3SEL 4BACK");
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f103 0014 	add.w	r0, r3, #20
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <_ZN4blib7Monitor10menuScreenEv+0x6c>)
 8001592:	2201      	movs	r2, #1
 8001594:	2103      	movs	r1, #3
 8001596:	f006 f835 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
        showArrow();
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f848 	bl	8001630 <_ZN4blib7Monitor9showArrowEv>
    }
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	0800a64c 	.word	0x0800a64c
 80015ac:	0800a65c 	.word	0x0800a65c
 80015b0:	0800a66c 	.word	0x0800a66c
 80015b4:	0800a674 	.word	0x0800a674

080015b8 <_ZN4blib7Monitor8showMenuEv>:
    // Show when button pressed
    void Monitor::showMenu()
    {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
        if (mScreenLevel == Monitor::ScreenLevel::HOME_SCREEN)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <_ZN4blib7Monitor8showMenuEv+0x22>
        {
            homeScreen();
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fed4 	bl	8001380 <_ZN4blib7Monitor10homeScreenEv>
        }
        else if (mScreenLevel == Monitor::ScreenLevel::NEXT_1)
        {
            menuScreen();
        }
    }
 80015d8:	e00b      	b.n	80015f2 <_ZN4blib7Monitor8showMenuEv+0x3a>
        else if (mScreenLevel == Monitor::ScreenLevel::NEXT_1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <_ZN4blib7Monitor8showMenuEv+0x3a>
            menuScreen();
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffab 	bl	8001548 <_ZN4blib7Monitor10menuScreenEv>
    }
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <_ZN4blib7Monitor14setScreenLevelENS0_11ScreenLevelE>:
    {
        return mSettingMode;
    }

    void Monitor::setScreenLevel(const ScreenLevel val)
    {
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
        mScreenLevel = val;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	605a      	str	r2, [r3, #4]
    }
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <_ZNK4blib7Monitor14getScreenLevelEv>:
    Monitor::ScreenLevel Monitor::getScreenLevel() const
    {
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
        return mScreenLevel;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
    }
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <_ZN4blib7Monitor9showArrowEv>:
    {
        return mDisplayLevel;
    }

    void Monitor::showArrow()
    {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
        mLcdDisplay.displayLine(mArrowLine, 0, ">");
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f103 0014 	add.w	r0, r3, #20
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7a5b      	ldrb	r3, [r3, #9]
 8001642:	b2d9      	uxtb	r1, r3
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <_ZN4blib7Monitor9showArrowEv+0x24>)
 8001646:	2200      	movs	r2, #0
 8001648:	f005 ffdc 	bl	8007604 <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	0800a68c 	.word	0x0800a68c

08001658 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>:
                Singleton()
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
                {
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev+0x1c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	601a      	str	r2, [r3, #0]
                }
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	0800ab70 	.word	0x0800ab70

08001678 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>:
                virtual ~Singleton()
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
                }
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev+0x1c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	0800ab70 	.word	0x0800ab70

08001698 <_ZN4blib2dp9SingletonINS_7MonitorEED0Ev>:
                virtual ~Singleton()
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
                }
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffe9 	bl	8001678 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
 80016a6:	2104      	movs	r1, #4
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f006 f882 	bl	80077b2 <_ZdlPvj>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 80016b8:	b598      	push	{r3, r4, r7, lr}
 80016ba:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x20>
                        mInstance = new T();
 80016c4:	2034      	movs	r0, #52	; 0x34
 80016c6:	f006 f876 	bl	80077b6 <_Znwj>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461c      	mov	r4, r3
 80016ce:	4620      	mov	r0, r4
 80016d0:	f7ff fac2 	bl	8000c58 <_ZN4blib6AnalogC1Ev>
 80016d4:	4b02      	ldr	r3, [pc, #8]	; (80016e0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80016d6:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80016d8:	4b01      	ldr	r3, [pc, #4]	; (80016e0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80016da:	681b      	ldr	r3, [r3, #0]
                }
 80016dc:	4618      	mov	r0, r3
 80016de:	bd98      	pop	{r3, r4, r7, pc}
 80016e0:	200001f4 	.word	0x200001f4

080016e4 <_ZN4blib13SerialMonitorC1Ev>:
#include "SerialMonitor.h"

namespace blib
{

    SerialMonitor::SerialMonitor()
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f8b8 	bl	8001864 <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev>
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <_ZN4blib13SerialMonitorC1Ev+0x30>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_1);    // TODO: test
 8001700:	2101      	movs	r1, #1
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f850 	bl	80017a8 <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>
    }
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	0800ab80 	.word	0x0800ab80

08001718 <_ZN4blib13SerialMonitorD1Ev>:
    SerialMonitor::~SerialMonitor()
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <_ZN4blib13SerialMonitorD1Ev+0x28>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
    {
        setSerialLevel(SerialLevel::SERIAL_LEVEL_0);
 8001726:	2100      	movs	r1, #0
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f83d 	bl	80017a8 <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>
    SerialMonitor::~SerialMonitor()
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f8a7 	bl	8001884 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>
    }
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	0800ab80 	.word	0x0800ab80

08001744 <_ZN4blib13SerialMonitorD0Ev>:
    SerialMonitor::~SerialMonitor()
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    }
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ffe3 	bl	8001718 <_ZN4blib13SerialMonitorD1Ev>
 8001752:	2108      	movs	r1, #8
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f006 f82c 	bl	80077b2 <_ZdlPvj>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <_ZN4blib13SerialMonitor4showEv>:
    void SerialMonitor::show()
    {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
        switch (getSerialLevel())
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f830 	bl	80017d2 <_ZNK4blib13SerialMonitor14getSerialLevelEv>
 8001772:	4603      	mov	r3, r0
 8001774:	2b03      	cmp	r3, #3
 8001776:	d00e      	beq.n	8001796 <_ZN4blib13SerialMonitor4showEv+0x32>
 8001778:	2b03      	cmp	r3, #3
 800177a:	dc10      	bgt.n	800179e <_ZN4blib13SerialMonitor4showEv+0x3a>
 800177c:	2b01      	cmp	r3, #1
 800177e:	d002      	beq.n	8001786 <_ZN4blib13SerialMonitor4showEv+0x22>
 8001780:	2b02      	cmp	r3, #2
 8001782:	d004      	beq.n	800178e <_ZN4blib13SerialMonitor4showEv+0x2a>
                serialLevel3();
                break;
            case SerialLevel::SERIAL_LEVEL_0:
            case SerialLevel::SERIAL_LEVEL_MAX:
            default:
                break;
 8001784:	e00b      	b.n	800179e <_ZN4blib13SerialMonitor4showEv+0x3a>
                serialLevel1();
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f830 	bl	80017ec <_ZN4blib13SerialMonitor12serialLevel1Ev>
                break;
 800178c:	e008      	b.n	80017a0 <_ZN4blib13SerialMonitor4showEv+0x3c>
                serialLevel2();
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f840 	bl	8001814 <_ZN4blib13SerialMonitor12serialLevel2Ev>
                break;
 8001794:	e004      	b.n	80017a0 <_ZN4blib13SerialMonitor4showEv+0x3c>
                serialLevel3();
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f850 	bl	800183c <_ZN4blib13SerialMonitor12serialLevel3Ev>
                break;
 800179c:	e000      	b.n	80017a0 <_ZN4blib13SerialMonitor4showEv+0x3c>
                break;
 800179e:	bf00      	nop
        }
    }
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE>:

    void SerialMonitor::setSerialLevel(const SerialLevel val)
    {
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
        uint8_t u8SerialLevel = (uint8_t) val;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	73fb      	strb	r3, [r7, #15]

        if (u8SerialLevel < 0)
        {
            u8SerialLevel = (uint8_t) SerialLevel::SERIAL_LEVEL_MAX - 1;    // Rotate
        }
        else if (u8SerialLevel >= (uint8_t) SerialLevel::SERIAL_LEVEL_MAX)
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d901      	bls.n	80017c0 <_ZN4blib13SerialMonitor14setSerialLevelENS0_11SerialLevelE+0x18>
        {
            u8SerialLevel = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
        }

        mSerialLevel = (SerialLevel) u8SerialLevel;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	605a      	str	r2, [r3, #4]
    }
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <_ZNK4blib13SerialMonitor14getSerialLevelEv>:
    SerialMonitor::SerialLevel SerialMonitor::getSerialLevel() const
    {
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
        return mSerialLevel;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    }
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_ZN4blib13SerialMonitor12serialLevel1Ev>:

    void SerialMonitor::serialLevel1()
    {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
        LOGI(
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x1c>)
 80017f6:	2242      	movs	r2, #66	; 0x42
 80017f8:	4904      	ldr	r1, [pc, #16]	; (800180c <_ZN4blib13SerialMonitor12serialLevel1Ev+0x20>)
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <_ZN4blib13SerialMonitor12serialLevel1Ev+0x24>)
 80017fc:	f7ff fcfe 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " ERR:" " FLV:" " BNC:" " IUV:" " IOC:" " OOV:" " OOC:" " OTE:" " REC:" " MPPTA:" " CM:"

                " " " BYP:" " EN:" " FAN:" " WiFi:" " " " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " " " CSMPV:" " CSV:" " VO%Dev:" " SOC:" " T:" " LoopT:");
    }
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	0800a878 	.word	0x0800a878
 800180c:	0800a888 	.word	0x0800a888
 8001810:	0800a89c 	.word	0x0800a89c

08001814 <_ZN4blib13SerialMonitor12serialLevel2Ev>:
    void SerialMonitor::serialLevel2()
    {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
        LOGI(
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x1c>)
 800181e:	2249      	movs	r2, #73	; 0x49
 8001820:	4904      	ldr	r1, [pc, #16]	; (8001834 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x20>)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <_ZN4blib13SerialMonitor12serialLevel2Ev+0x24>)
 8001824:	f7ff fcea 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                " PI:" " PWM:" " PPWM:" " VI:" " VO:" " CI:" " CO:" " Wh:" " Temp:" " EN:" " FAN:" " SOC:" " T:" " LoopT:" "");
    }
 8001828:	bf00      	nop
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	0800a948 	.word	0x0800a948
 8001834:	0800a888 	.word	0x0800a888
 8001838:	0800a958 	.word	0x0800a958

0800183c <_ZN4blib13SerialMonitor12serialLevel3Ev>:
    void SerialMonitor::serialLevel3()
    {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
        LOGI();
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x1c>)
 8001846:	224e      	movs	r2, #78	; 0x4e
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <_ZN4blib13SerialMonitor12serialLevel3Ev+0x20>)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <_ZN4blib13SerialMonitor12serialLevel3Ev+0x24>)
 800184c:	f7ff fcd6 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	0800a9a8 	.word	0x0800a9a8
 800185c:	0800a888 	.word	0x0800a888
 8001860:	0800a9b8 	.word	0x0800a9b8

08001864 <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev>:
                Singleton()
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
                {
 800186c:	4a04      	ldr	r2, [pc, #16]	; (8001880 <_ZN4blib2dp9SingletonINS_13SerialMonitorEEC1Ev+0x1c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
                }
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	0800ab90 	.word	0x0800ab90

08001884 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>:
                virtual ~Singleton()
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
                }
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev+0x1c>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	0800ab90 	.word	0x0800ab90

080018a4 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED0Ev>:
                virtual ~Singleton()
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
                }
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffe9 	bl	8001884 <_ZN4blib2dp9SingletonINS_13SerialMonitorEED1Ev>
 80018b2:	2104      	movs	r1, #4
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f005 ff7c 	bl	80077b2 <_ZdlPvj>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 160000U;
 80018d2:	4b4e      	ldr	r3, [pc, #312]	; (8001a0c <HAL_GPIO_EXTI_Callback+0x148>)
 80018d4:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_EXTI_Callback+0x1e>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	3301      	adds	r3, #1
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	bf8c      	ite	hi
 80018ea:	2301      	movhi	r3, #1
 80018ec:	2300      	movls	r3, #0
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f3      	bne.n	80018dc <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == BUT_LEFT_Pin)
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d10b      	bne.n	8001916 <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Left pin");
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001900:	224f      	movs	r2, #79	; 0x4f
 8001902:	4944      	ldr	r1, [pc, #272]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x150>)
 8001904:	4844      	ldr	r0, [pc, #272]	; (8001a18 <HAL_GPIO_EXTI_Callback+0x154>)
 8001906:	f7ff fc79 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::LEFT;
 800190a:	4b44      	ldr	r3, [pc, #272]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x158>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_LEFT_GPIO_Port;
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	e032      	b.n	800197c <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_RIGHT_Pin)
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d10b      	bne.n	8001934 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Right pin");
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x14c>)
 800191e:	2255      	movs	r2, #85	; 0x55
 8001920:	493c      	ldr	r1, [pc, #240]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x150>)
 8001922:	4840      	ldr	r0, [pc, #256]	; (8001a24 <HAL_GPIO_EXTI_Callback+0x160>)
 8001924:	f7ff fc6a 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::RIGHT;
 8001928:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x158>)
 800192a:	2202      	movs	r2, #2
 800192c:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_RIGHT_GPIO_Port;
 800192e:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x15c>)
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	e023      	b.n	800197c <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_BACK_Pin)
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d10b      	bne.n	8001952 <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 800193a:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x14c>)
 800193c:	225b      	movs	r2, #91	; 0x5b
 800193e:	4935      	ldr	r1, [pc, #212]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x150>)
 8001940:	4839      	ldr	r0, [pc, #228]	; (8001a28 <HAL_GPIO_EXTI_Callback+0x164>)
 8001942:	f7ff fc5b 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 8001946:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x158>)
 8001948:	2203      	movs	r2, #3
 800194a:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_BACK_GPIO_Port;
 800194c:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x15c>)
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	e014      	b.n	800197c <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_SELECT_Pin)
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	2b08      	cmp	r3, #8
 8001956:	d10b      	bne.n	8001970 <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x14c>)
 800195a:	2261      	movs	r2, #97	; 0x61
 800195c:	492d      	ldr	r1, [pc, #180]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x150>)
 800195e:	4833      	ldr	r0, [pc, #204]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x168>)
 8001960:	f7ff fc4c 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SELECT;
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x158>)
 8001966:	2204      	movs	r2, #4
 8001968:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_SELECT_GPIO_Port;
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x15c>)
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	e005      	b.n	800197c <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <HAL_GPIO_EXTI_Callback+0x14c>)
 8001972:	2267      	movs	r2, #103	; 0x67
 8001974:	4927      	ldr	r1, [pc, #156]	; (8001a14 <HAL_GPIO_EXTI_Callback+0x150>)
 8001976:	482e      	ldr	r0, [pc, #184]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001978:	f7ff fc40 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 800197c:	f000 facc 	bl	8001f18 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001980:	4602      	mov	r2, r0
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x158>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	4610      	mov	r0, r2
 800198a:	f005 fd35 	bl	80073f8 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 800198e:	f000 fac3 	bl	8001f18 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f005 fd3d 	bl	8007414 <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d01e      	beq.n	80019de <HAL_GPIO_EXTI_Callback+0x11a>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	4619      	mov	r1, r3
 80019ac:	69f8      	ldr	r0, [r7, #28]
 80019ae:	f002 ff11 	bl	80047d4 <HAL_GPIO_ReadPin>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf0c      	ite	eq
 80019b8:	2301      	moveq	r3, #1
 80019ba:	2300      	movne	r3, #0
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	69b9      	ldr	r1, [r7, #24]
 80019c2:	4299      	cmp	r1, r3
 80019c4:	bf8c      	ite	hi
 80019c6:	2301      	movhi	r3, #1
 80019c8:	2300      	movls	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	4013      	ands	r3, r2
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1e1      	bne.n	80019a2 <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	e002      	b.n	80019ea <HAL_GPIO_EXTI_Callback+0x126>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	bf8c      	ite	hi
 80019f2:	2301      	movhi	r3, #1
 80019f4:	2300      	movls	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f3      	bne.n	80019e4 <HAL_GPIO_EXTI_Callback+0x120>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 80019fc:	4a0d      	ldr	r2, [pc, #52]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x170>)
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	6153      	str	r3, [r2, #20]
}
 8001a02:	bf00      	nop
 8001a04:	3720      	adds	r7, #32
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	00027100 	.word	0x00027100
 8001a10:	0800a9d4 	.word	0x0800a9d4
 8001a14:	0800a9ec 	.word	0x0800a9ec
 8001a18:	0800a9f8 	.word	0x0800a9f8
 8001a1c:	20000368 	.word	0x20000368
 8001a20:	48000800 	.word	0x48000800
 8001a24:	0800aa18 	.word	0x0800aa18
 8001a28:	0800aa38 	.word	0x0800aa38
 8001a2c:	0800aa58 	.word	0x0800aa58
 8001a30:	0800aa78 	.word	0x0800aa78
 8001a34:	40010400 	.word	0x40010400

08001a38 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    blib::Analog::getInstance().sampling();
 8001a40:	f7ff fe3a 	bl	80016b8 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f956 	bl	8000cf8 <_ZN4blib6Analog8samplingEv>
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8001a5a:	f000 fd43 	bl	80024e4 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001a5e:	f000 f843 	bl	8001ae8 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001a62:	f000 f9e1 	bl	8001e28 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 8001a66:	f000 f9c1 	bl	8001dec <_ZL11MX_DMA_Initv>
    MX_ADC1_Init();
 8001a6a:	f000 f8ab 	bl	8001bc4 <_ZL12MX_ADC1_Initv>
    MX_I2C1_Init();
 8001a6e:	f000 f93b 	bl	8001ce8 <_ZL12MX_I2C1_Initv>
    MX_USART2_UART_Init();
 8001a72:	f000 f987 	bl	8001d84 <_ZL19MX_USART2_UART_Initv>
    /* USER CODE BEGIN 2 */
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <main+0x80>)
 8001a78:	22a5      	movs	r2, #165	; 0xa5
 8001a7a:	4917      	ldr	r1, [pc, #92]	; (8001ad8 <main+0x84>)
 8001a7c:	4817      	ldr	r0, [pc, #92]	; (8001adc <main+0x88>)
 8001a7e:	f7ff fbbd 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <main+0x80>)
 8001a84:	22a6      	movs	r2, #166	; 0xa6
 8001a86:	4914      	ldr	r1, [pc, #80]	; (8001ad8 <main+0x84>)
 8001a88:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <main+0x8c>)
 8001a8a:	f7ff fbb7 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <main+0x80>)
 8001a90:	22a7      	movs	r2, #167	; 0xa7
 8001a92:	4911      	ldr	r1, [pc, #68]	; (8001ad8 <main+0x84>)
 8001a94:	4813      	ldr	r0, [pc, #76]	; (8001ae4 <main+0x90>)
 8001a96:	f7ff fbb1 	bl	80011fc <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

    auto &analog = blib::Analog::getInstance();
 8001a9a:	f7ff fe0d 	bl	80016b8 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001a9e:	60f8      	str	r0, [r7, #12]
    auto &monitor = blib::Monitor::getInstance();
 8001aa0:	f000 fa50 	bl	8001f44 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 8001aa4:	60b8      	str	r0, [r7, #8]
    auto &chargeCtrl = blib::ChargeControl::getInstance();
 8001aa6:	f000 fa63 	bl	8001f70 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8001aaa:	6078      	str	r0, [r7, #4]
    auto &serialMnt = blib::SerialMonitor::getInstance();
 8001aac:	f000 fa76 	bl	8001f9c <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv>
 8001ab0:	6038      	str	r0, [r7, #0]
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        analog.readAnalog();
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f7ff f96c 	bl	8000d90 <_ZN4blib6Analog10readAnalogEv>
        chargeCtrl.run();
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fb65 	bl	8001188 <_ZN4blib13ChargeControl3runEv>
        serialMnt.show();
 8001abe:	6838      	ldr	r0, [r7, #0]
 8001ac0:	f7ff fe50 	bl	8001764 <_ZN4blib13SerialMonitor4showEv>
        monitor.showMenu();
 8001ac4:	68b8      	ldr	r0, [r7, #8]
 8001ac6:	f7ff fd77 	bl	80015b8 <_ZN4blib7Monitor8showMenuEv>
        HAL_Delay(1000);
 8001aca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ace:	f000 fd6f 	bl	80025b0 <HAL_Delay>
        analog.readAnalog();
 8001ad2:	e7ee      	b.n	8001ab2 <main+0x5e>
 8001ad4:	0800aa9c 	.word	0x0800aa9c
 8001ad8:	0800a9ec 	.word	0x0800a9ec
 8001adc:	0800aaa4 	.word	0x0800aaa4
 8001ae0:	0800aad0 	.word	0x0800aad0
 8001ae4:	0800aaec 	.word	0x0800aaec

08001ae8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b0a6      	sub	sp, #152	; 0x98
 8001aec:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001aee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001af2:	2228      	movs	r2, #40	; 0x28
 8001af4:	2100      	movs	r1, #0
 8001af6:	4618      	mov	r0, r3
 8001af8:	f006 fcdb 	bl	80084b2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001afc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	2258      	movs	r2, #88	; 0x58
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f006 fccd 	bl	80084b2 <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b20:	2310      	movs	r3, #16
 8001b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b44:	4618      	mov	r0, r3
 8001b46:	f003 fab9 	bl	80050bc <HAL_RCC_OscConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <_Z18SystemClock_Configv+0x76>
    {
        Error_Handler();
 8001b5a:	f000 f9d7 	bl	8001f0c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8001b5e:	230f      	movs	r3, #15
 8001b60:	65fb      	str	r3, [r7, #92]	; 0x5c
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b62:	2302      	movs	r3, #2
 8001b64:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b72:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f004 faf3 	bl	8006164 <HAL_RCC_ClockConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf14      	ite	ne
 8001b84:	2301      	movne	r3, #1
 8001b86:	2300      	moveq	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <_Z18SystemClock_Configv+0xaa>
    {
        Error_Handler();
 8001b8e:	f000 f9bd 	bl	8001f0c <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1;
 8001b92:	2322      	movs	r3, #34	; 0x22
 8001b94:	607b      	str	r3, [r7, #4]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 fd15 	bl	80065d0 <HAL_RCCEx_PeriphCLKConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <_Z18SystemClock_Configv+0xd2>
    {
        Error_Handler();
 8001bb6:	f000 f9a9 	bl	8001f0c <Error_Handler>
    }
}
 8001bba:	bf00      	nop
 8001bbc:	3798      	adds	r7, #152	; 0x98
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = { 0 };
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8001be6:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001be8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001bec:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bee:	4b3d      	ldr	r3, [pc, #244]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001bf0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bf4:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	765a      	strb	r2, [r3, #25]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c08:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c16:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c1c:	4b31      	ldr	r3, [pc, #196]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 2;
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c24:	2202      	movs	r2, #2
 8001c26:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c28:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c32:	2204      	movs	r2, #4
 8001c34:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	761a      	strb	r2, [r3, #24]
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c42:	4828      	ldr	r0, [pc, #160]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c44:	f000 fcf6 	bl	8002634 <HAL_ADC_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf14      	ite	ne
 8001c4e:	2301      	movne	r3, #1
 8001c50:	2300      	moveq	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <_ZL12MX_ADC1_Initv+0x98>
    {
        Error_Handler();
 8001c58:	f000 f958 	bl	8001f0c <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c60:	f107 031c 	add.w	r3, r7, #28
 8001c64:	4619      	mov	r1, r3
 8001c66:	481f      	ldr	r0, [pc, #124]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c68:	f001 fe54 	bl	8003914 <HAL_ADCEx_MultiModeConfigChannel>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	bf14      	ite	ne
 8001c72:	2301      	movne	r3, #1
 8001c74:	2300      	moveq	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <_ZL12MX_ADC1_Initv+0xbc>
    {
        Error_Handler();
 8001c7c:	f000 f946 	bl	8001f0c <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c84:	2301      	movs	r3, #1
 8001c86:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001c9e:	f001 fb4f 	bl	8003340 <HAL_ADC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <_ZL12MX_ADC1_Initv+0xf2>
    {
        Error_Handler();
 8001cb2:	f000 f92b 	bl	8001f0c <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_2;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4808      	ldr	r0, [pc, #32]	; (8001ce4 <_ZL12MX_ADC1_Initv+0x120>)
 8001cc4:	f001 fb3c 	bl	8003340 <HAL_ADC_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <_ZL12MX_ADC1_Initv+0x118>
    {
        Error_Handler();
 8001cd8:	f000 f918 	bl	8001f0c <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200001f8 	.word	0x200001f8

08001ce8 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001cec:	4b22      	ldr	r3, [pc, #136]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001cee:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <_ZL12MX_I2C1_Initv+0x94>)
 8001cf0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x2000090E;
 8001cf2:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001cf4:	4a22      	ldr	r2, [pc, #136]	; (8001d80 <_ZL12MX_I2C1_Initv+0x98>)
 8001cf6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d16:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d1c:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d22:	4815      	ldr	r0, [pc, #84]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d24:	f002 fd9e 	bl	8004864 <HAL_I2C_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <_ZL12MX_I2C1_Initv+0x54>
    {
        Error_Handler();
 8001d38:	f000 f8e8 	bl	8001f0c <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	480e      	ldr	r0, [pc, #56]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d40:	f003 f924 	bl	8004f8c <HAL_I2CEx_ConfigAnalogFilter>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	bf14      	ite	ne
 8001d4a:	2301      	movne	r3, #1
 8001d4c:	2300      	moveq	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <_ZL12MX_I2C1_Initv+0x70>
    {
        Error_Handler();
 8001d54:	f000 f8da 	bl	8001f0c <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4807      	ldr	r0, [pc, #28]	; (8001d78 <_ZL12MX_I2C1_Initv+0x90>)
 8001d5c:	f003 f961 	bl	8005022 <HAL_I2CEx_ConfigDigitalFilter>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf14      	ite	ne
 8001d66:	2301      	movne	r3, #1
 8001d68:	2300      	moveq	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <_ZL12MX_I2C1_Initv+0x8c>
    {
        Error_Handler();
 8001d70:	f000 f8cc 	bl	8001f0c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2000028c 	.word	0x2000028c
 8001d7c:	40005400 	.word	0x40005400
 8001d80:	2000090e 	.word	0x2000090e

08001d84 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001d8a:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <_ZL19MX_USART2_UART_Initv+0x64>)
 8001d8c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d94:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc6:	4807      	ldr	r0, [pc, #28]	; (8001de4 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001dc8:	f004 fe20 	bl	8006a0c <HAL_UART_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	bf14      	ite	ne
 8001dd2:	2301      	movne	r3, #1
 8001dd4:	2300      	moveq	r3, #0
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <_ZL19MX_USART2_UART_Initv+0x5c>
    {
        Error_Handler();
 8001ddc:	f000 f896 	bl	8001f0c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200002e0 	.word	0x200002e0
 8001de8:	40004400 	.word	0x40004400

08001dec <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <_ZL11MX_DMA_Initv+0x38>)
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <_ZL11MX_DMA_Initv+0x38>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6153      	str	r3, [r2, #20]
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <_ZL11MX_DMA_Initv+0x38>)
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	200b      	movs	r0, #11
 8001e10:	f002 f933 	bl	800407a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e14:	200b      	movs	r0, #11
 8001e16:	f002 f94c 	bl	80040b2 <HAL_NVIC_EnableIRQ>

}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000

08001e28 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4a30      	ldr	r2, [pc, #192]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e48:	6153      	str	r3, [r2, #20]
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	4b2b      	ldr	r3, [pc, #172]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4a2a      	ldr	r2, [pc, #168]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	6153      	str	r3, [r2, #20]
 8001e62:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e78:	6153      	str	r3, [r2, #20]
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <_ZL12MX_GPIO_Initv+0xdc>)
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_INDICATOR_GPIO_Port, LED_INDICATOR_Pin, GPIO_PIN_RESET);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2120      	movs	r1, #32
 8001e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e8e:	f002 fcb9 	bl	8004804 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_BACK_Pin BUT_SELECT_Pin */
    GPIO_InitStruct.Pin = BUT_LEFT_Pin | BUT_RIGHT_Pin | BUT_BACK_Pin | BUT_SELECT_Pin;
 8001e92:	230f      	movs	r3, #15
 8001e94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4818      	ldr	r0, [pc, #96]	; (8001f08 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ea8:	f002 fb0a 	bl	80044c0 <HAL_GPIO_Init>

    /*Configure GPIO pin : LED_INDICATOR_Pin */
    GPIO_InitStruct.Pin = LED_INDICATOR_Pin;
 8001eac:	2320      	movs	r3, #32
 8001eae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LED_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 030c 	add.w	r3, r7, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec6:	f002 fafb 	bl	80044c0 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2100      	movs	r1, #0
 8001ece:	2006      	movs	r0, #6
 8001ed0:	f002 f8d3 	bl	800407a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ed4:	2006      	movs	r0, #6
 8001ed6:	f002 f8ec 	bl	80040b2 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	2007      	movs	r0, #7
 8001ee0:	f002 f8cb 	bl	800407a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ee4:	2007      	movs	r0, #7
 8001ee6:	f002 f8e4 	bl	80040b2 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2009      	movs	r0, #9
 8001ef0:	f002 f8c3 	bl	800407a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ef4:	2009      	movs	r0, #9
 8001ef6:	f002 f8dc 	bl	80040b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	48000800 	.word	0x48000800

08001f0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f10:	b672      	cpsid	i
}
 8001f12:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001f14:	e7fe      	b.n	8001f14 <Error_Handler+0x8>
	...

08001f18 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 8001f18:	b598      	push	{r3, r4, r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d109      	bne.n	8001f38 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001f24:	2008      	movs	r0, #8
 8001f26:	f005 fc46 	bl	80077b6 <_Znwj>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f005 fa2e 	bl	8007390 <_ZN4blib6ButtonC1Ev>
 8001f34:	4b02      	ldr	r3, [pc, #8]	; (8001f40 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8001f36:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001f38:	4b01      	ldr	r3, [pc, #4]	; (8001f40 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
                }
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd98      	pop	{r3, r4, r7, pc}
 8001f40:	20000370 	.word	0x20000370

08001f44 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>:
                static T& getInstance()
 8001f44:	b598      	push	{r3, r4, r7, lr}
 8001f46:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001f50:	2028      	movs	r0, #40	; 0x28
 8001f52:	f005 fc30 	bl	80077b6 <_Znwj>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461c      	mov	r4, r3
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff f974 	bl	8001248 <_ZN4blib7MonitorC1Ev>
 8001f60:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8001f62:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001f64:	4b01      	ldr	r3, [pc, #4]	; (8001f6c <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8001f66:	681b      	ldr	r3, [r3, #0]
                }
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd98      	pop	{r3, r4, r7, pc}
 8001f6c:	2000036c 	.word	0x2000036c

08001f70 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 8001f70:	b598      	push	{r3, r4, r7, lr}
 8001f72:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001f7c:	200c      	movs	r0, #12
 8001f7e:	f005 fc1a 	bl	80077b6 <_Znwj>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461c      	mov	r4, r3
 8001f86:	4620      	mov	r0, r4
 8001f88:	f7ff f8c4 	bl	8001114 <_ZN4blib13ChargeControlC1Ev>
 8001f8c:	4b02      	ldr	r3, [pc, #8]	; (8001f98 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8001f8e:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8001f92:	681b      	ldr	r3, [r3, #0]
                }
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd98      	pop	{r3, r4, r7, pc}
 8001f98:	20000374 	.word	0x20000374

08001f9c <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv>:
                static T& getInstance()
 8001f9c:	b598      	push	{r3, r4, r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001fa8:	2008      	movs	r0, #8
 8001faa:	f005 fc04 	bl	80077b6 <_Znwj>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	461c      	mov	r4, r3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff fb96 	bl	80016e4 <_ZN4blib13SerialMonitorC1Ev>
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 8001fba:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001fbc:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <_ZN4blib2dp9SingletonINS_13SerialMonitorEE11getInstanceEv+0x28>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
                }
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	bd98      	pop	{r3, r4, r7, pc}
 8001fc4:	20000378 	.word	0x20000378

08001fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_MspInit+0x44>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	4a0e      	ldr	r2, [pc, #56]	; (800200c <HAL_MspInit+0x44>)
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	6193      	str	r3, [r2, #24]
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <HAL_MspInit+0x44>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_MspInit+0x44>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_MspInit+0x44>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	61d3      	str	r3, [r2, #28]
 8001ff2:	4b06      	ldr	r3, [pc, #24]	; (800200c <HAL_MspInit+0x44>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40021000 	.word	0x40021000

08002010 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002030:	d154      	bne.n	80020dc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <HAL_ADC_MspInit+0xd4>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <HAL_ADC_MspInit+0xd4>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6153      	str	r3, [r2, #20]
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_ADC_MspInit+0xd4>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_ADC_MspInit+0xd4>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <HAL_ADC_MspInit+0xd4>)
 8002050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002054:	6153      	str	r3, [r2, #20]
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_ADC_MspInit+0xd4>)
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002062:	2303      	movs	r3, #3
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002066:	2303      	movs	r3, #3
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002078:	f002 fa22 	bl	80044c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 800207e:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_ADC_MspInit+0xdc>)
 8002080:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002088:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 8002090:	2280      	movs	r2, #128	; 0x80
 8002092:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002094:	4b14      	ldr	r3, [pc, #80]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 8002096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800209a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 800209e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020a2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 80020a6:	2220      	movs	r2, #32
 80020a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020aa:	4b0f      	ldr	r3, [pc, #60]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 80020b2:	f002 f818 	bl	80040e6 <HAL_DMA_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80020bc:	f7ff ff26 	bl	8001f0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 80020c4:	639a      	str	r2, [r3, #56]	; 0x38
 80020c6:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <HAL_ADC_MspInit+0xd8>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2012      	movs	r0, #18
 80020d2:	f001 ffd2 	bl	800407a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80020d6:	2012      	movs	r0, #18
 80020d8:	f001 ffeb 	bl	80040b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	20000248 	.word	0x20000248
 80020ec:	40020008 	.word	0x40020008

080020f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a26      	ldr	r2, [pc, #152]	; (80021a8 <HAL_I2C_MspInit+0xb8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d145      	bne.n	800219e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4a25      	ldr	r2, [pc, #148]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 8002118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800211c:	6153      	str	r3, [r2, #20]
 800211e:	4b23      	ldr	r3, [pc, #140]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212a:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	4a1f      	ldr	r2, [pc, #124]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6153      	str	r3, [r2, #20]
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002148:	2312      	movs	r3, #18
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002154:	2304      	movs	r3, #4
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002162:	f002 f9ad 	bl	80044c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800216a:	2312      	movs	r3, #18
 800216c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002176:	2304      	movs	r3, #4
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217a:	f107 0314 	add.w	r3, r7, #20
 800217e:	4619      	mov	r1, r3
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <HAL_I2C_MspInit+0xc0>)
 8002182:	f002 f99d 	bl	80044c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	4a08      	ldr	r2, [pc, #32]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 800218c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002190:	61d3      	str	r3, [r2, #28]
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_I2C_MspInit+0xbc>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40005400 	.word	0x40005400
 80021ac:	40021000 	.word	0x40021000
 80021b0:	48000400 	.word	0x48000400

080021b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	; 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a17      	ldr	r2, [pc, #92]	; (8002230 <HAL_UART_MspInit+0x7c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d128      	bne.n	8002228 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_UART_MspInit+0x80>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_UART_MspInit+0x80>)
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e0:	61d3      	str	r3, [r2, #28]
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_UART_MspInit+0x80>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_UART_MspInit+0x80>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_UART_MspInit+0x80>)
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f8:	6153      	str	r3, [r2, #20]
 80021fa:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_UART_MspInit+0x80>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002206:	230c      	movs	r3, #12
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002216:	2307      	movs	r3, #7
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002224:	f002 f94c 	bl	80044c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002228:	bf00      	nop
 800222a:	3728      	adds	r7, #40	; 0x28
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40004400 	.word	0x40004400
 8002234:	40021000 	.word	0x40021000

08002238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800223c:	e7fe      	b.n	800223c <NMI_Handler+0x4>

0800223e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <HardFault_Handler+0x4>

08002244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <MemManage_Handler+0x4>

0800224a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800224e:	e7fe      	b.n	800224e <BusFault_Handler+0x4>

08002250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <UsageFault_Handler+0x4>

08002256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002284:	f000 f974 	bl	8002570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_LEFT_Pin);
 8002290:	2001      	movs	r0, #1
 8002292:	f002 facf 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}

0800229a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_RIGHT_Pin);
 800229e:	2002      	movs	r0, #2
 80022a0:	f002 fac8 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SELECT_Pin);
 80022ac:	2008      	movs	r0, #8
 80022ae:	f002 fac1 	bl	8004834 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <DMA1_Channel1_IRQHandler+0x10>)
 80022be:	f001 fff1 	bl	80042a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000248 	.word	0x20000248

080022cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <ADC1_2_IRQHandler+0x10>)
 80022d2:	f000 fd27 	bl	8002d24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200001f8 	.word	0x200001f8

080022e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return 1;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_kill>:

int _kill(int pid, int sig)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022fa:	f006 f981 	bl	8008600 <__errno>
 80022fe:	4603      	mov	r3, r0
 8002300:	2216      	movs	r2, #22
 8002302:	601a      	str	r2, [r3, #0]
  return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <_exit>:

void _exit (int status)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002318:	f04f 31ff 	mov.w	r1, #4294967295
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ffe7 	bl	80022f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002322:	e7fe      	b.n	8002322 <_exit+0x12>

08002324 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	e00a      	b.n	800234c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002336:	f3af 8000 	nop.w
 800233a:	4601      	mov	r1, r0
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60ba      	str	r2, [r7, #8]
 8002342:	b2ca      	uxtb	r2, r1
 8002344:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf0      	blt.n	8002336 <_read+0x12>
  }

  return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e009      	b.n	8002384 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	429a      	cmp	r2, r3
 800238a:	dbf1      	blt.n	8002370 <_write+0x12>
  }
  return len;
 800238c:	687b      	ldr	r3, [r7, #4]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <_close>:

int _close(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023be:	605a      	str	r2, [r3, #4]
  return 0;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_isatty>:

int _isatty(int file)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <_sbrk+0x5c>)
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <_sbrk+0x60>)
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002414:	4b13      	ldr	r3, [pc, #76]	; (8002464 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d102      	bne.n	8002422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800241c:	4b11      	ldr	r3, [pc, #68]	; (8002464 <_sbrk+0x64>)
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <_sbrk+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	429a      	cmp	r2, r3
 800242e:	d207      	bcs.n	8002440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002430:	f006 f8e6 	bl	8008600 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	220c      	movs	r2, #12
 8002438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	e009      	b.n	8002454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002440:	4b08      	ldr	r3, [pc, #32]	; (8002464 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <_sbrk+0x64>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	4a05      	ldr	r2, [pc, #20]	; (8002464 <_sbrk+0x64>)
 8002450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20010000 	.word	0x20010000
 8002460:	00000400 	.word	0x00000400
 8002464:	2000037c 	.word	0x2000037c
 8002468:	200008d8 	.word	0x200008d8

0800246c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <SystemInit+0x20>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <SystemInit+0x20>)
 8002478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800247c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002494:	f7ff ffea 	bl	800246c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002498:	480c      	ldr	r0, [pc, #48]	; (80024cc <LoopForever+0x6>)
  ldr r1, =_edata
 800249a:	490d      	ldr	r1, [pc, #52]	; (80024d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800249c:	4a0d      	ldr	r2, [pc, #52]	; (80024d4 <LoopForever+0xe>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024b0:	4c0a      	ldr	r4, [pc, #40]	; (80024dc <LoopForever+0x16>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024be:	f006 f8a5 	bl	800860c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024c2:	f7ff fac7 	bl	8001a54 <main>

080024c6 <LoopForever>:

LoopForever:
    b LoopForever
 80024c6:	e7fe      	b.n	80024c6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80024d4:	0800af7c 	.word	0x0800af7c
  ldr r2, =_sbss
 80024d8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80024dc:	200008d4 	.word	0x200008d4

080024e0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024e0:	e7fe      	b.n	80024e0 <ADC3_IRQHandler>
	...

080024e4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_Init+0x28>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_Init+0x28>)
 80024ee:	f043 0310 	orr.w	r3, r3, #16
 80024f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f4:	2003      	movs	r0, #3
 80024f6:	f001 fdb5 	bl	8004064 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fa:	200f      	movs	r0, #15
 80024fc:	f000 f808 	bl	8002510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002500:	f7ff fd62 	bl	8001fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000

08002510 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_InitTick+0x54>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_InitTick+0x58>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002526:	fbb3 f3f1 	udiv	r3, r3, r1
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fdcd 	bl	80040ce <HAL_SYSTICK_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e00e      	b.n	800255c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b0f      	cmp	r3, #15
 8002542:	d80a      	bhi.n	800255a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002544:	2200      	movs	r2, #0
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f001 fd95 	bl	800407a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002550:	4a06      	ldr	r2, [pc, #24]	; (800256c <HAL_InitTick+0x5c>)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e000      	b.n	800255c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000000 	.word	0x20000000
 8002568:	20000008 	.word	0x20000008
 800256c:	20000004 	.word	0x20000004

08002570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002574:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x20>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <HAL_IncTick+0x24>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4413      	add	r3, r2
 8002580:	4a04      	ldr	r2, [pc, #16]	; (8002594 <HAL_IncTick+0x24>)
 8002582:	6013      	str	r3, [r2, #0]
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000008 	.word	0x20000008
 8002594:	20000380 	.word	0x20000380

08002598 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return uwTick;  
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <HAL_GetTick+0x14>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	20000380 	.word	0x20000380

080025b0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff ffee 	bl	8002598 <HAL_GetTick>
 80025bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c8:	d005      	beq.n	80025d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_Delay+0x44>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4413      	add	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80025d6:	bf00      	nop
 80025d8:	f7ff ffde 	bl	8002598 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d8f7      	bhi.n	80025d8 <HAL_Delay+0x28>
  {
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000008 	.word	0x20000008

080025f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b09a      	sub	sp, #104	; 0x68
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e1e3      	b.n	8002a1c <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f003 0310 	and.w	r3, r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	d176      	bne.n	8002754 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b00      	cmp	r3, #0
 800266c:	d152      	bne.n	8002714 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff fcc1 	bl	8002010 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d13b      	bne.n	8002714 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f001 faf5 	bl	8003c8c <ADC_Disable>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d12f      	bne.n	8002714 <HAL_ADC_Init+0xe0>
 80026b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d12b      	bne.n	8002714 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026c4:	f023 0302 	bic.w	r3, r3, #2
 80026c8:	f043 0202 	orr.w	r2, r3, #2
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026de:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026f0:	4b92      	ldr	r3, [pc, #584]	; (800293c <HAL_ADC_Init+0x308>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a92      	ldr	r2, [pc, #584]	; (8002940 <HAL_ADC_Init+0x30c>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0c9a      	lsrs	r2, r3, #18
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002706:	e002      	b.n	800270e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	3b01      	subs	r3, #1
 800270c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f9      	bne.n	8002708 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800272c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002730:	d110      	bne.n	8002754 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f023 0312 	bic.w	r3, r3, #18
 800273a:	f043 0210 	orr.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002746:	f043 0201 	orr.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	f040 8150 	bne.w	8002a02 <HAL_ADC_Init+0x3ce>
 8002762:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002766:	2b00      	cmp	r3, #0
 8002768:	f040 814b 	bne.w	8002a02 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002776:	2b00      	cmp	r3, #0
 8002778:	f040 8143 	bne.w	8002a02 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002784:	f043 0202 	orr.w	r2, r3, #2
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_Init+0x16c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6a      	ldr	r2, [pc, #424]	; (8002944 <HAL_ADC_Init+0x310>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d101      	bne.n	80027a4 <HAL_ADC_Init+0x170>
 80027a0:	4b69      	ldr	r3, [pc, #420]	; (8002948 <HAL_ADC_Init+0x314>)
 80027a2:	e000      	b.n	80027a6 <HAL_ADC_Init+0x172>
 80027a4:	4b69      	ldr	r3, [pc, #420]	; (800294c <HAL_ADC_Init+0x318>)
 80027a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b0:	d102      	bne.n	80027b8 <HAL_ADC_Init+0x184>
 80027b2:	4b64      	ldr	r3, [pc, #400]	; (8002944 <HAL_ADC_Init+0x310>)
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	e01a      	b.n	80027ee <HAL_ADC_Init+0x1ba>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_ADC_Init+0x310>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d103      	bne.n	80027ca <HAL_ADC_Init+0x196>
 80027c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	e011      	b.n	80027ee <HAL_ADC_Init+0x1ba>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a60      	ldr	r2, [pc, #384]	; (8002950 <HAL_ADC_Init+0x31c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d102      	bne.n	80027da <HAL_ADC_Init+0x1a6>
 80027d4:	4b5f      	ldr	r3, [pc, #380]	; (8002954 <HAL_ADC_Init+0x320>)
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e009      	b.n	80027ee <HAL_ADC_Init+0x1ba>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_ADC_Init+0x320>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d102      	bne.n	80027ea <HAL_ADC_Init+0x1b6>
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_ADC_Init+0x31c>)
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e001      	b.n	80027ee <HAL_ADC_Init+0x1ba>
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d108      	bne.n	800280e <HAL_ADC_Init+0x1da>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x1da>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_ADC_Init+0x1dc>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11c      	bne.n	800284e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002814:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002816:	2b00      	cmp	r3, #0
 8002818:	d010      	beq.n	800283c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0303 	and.w	r3, r3, #3
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_ADC_Init+0x202>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_ADC_Init+0x202>
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_ADC_Init+0x204>
 8002836:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800283c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800284c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7e5b      	ldrb	r3, [r3, #25]
 8002852:	035b      	lsls	r3, r3, #13
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002858:	2a01      	cmp	r2, #1
 800285a:	d002      	beq.n	8002862 <HAL_ADC_Init+0x22e>
 800285c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002860:	e000      	b.n	8002864 <HAL_ADC_Init+0x230>
 8002862:	2200      	movs	r2, #0
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4313      	orrs	r3, r2
 8002872:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002874:	4313      	orrs	r3, r2
 8002876:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d11b      	bne.n	80028ba <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7e5b      	ldrb	r3, [r3, #25]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	045a      	lsls	r2, r3, #17
 8002892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002894:	4313      	orrs	r3, r2
 8002896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289a:	663b      	str	r3, [r7, #96]	; 0x60
 800289c:	e00d      	b.n	80028ba <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028a6:	f043 0220 	orr.w	r2, r3, #32
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	f043 0201 	orr.w	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d054      	beq.n	800296c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_ADC_Init+0x31c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d004      	beq.n	80028d6 <HAL_ADC_Init+0x2a2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <HAL_ADC_Init+0x320>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d140      	bne.n	8002958 <HAL_ADC_Init+0x324>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80028de:	d02a      	beq.n	8002936 <HAL_ADC_Init+0x302>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d022      	beq.n	8002930 <HAL_ADC_Init+0x2fc>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80028f2:	d01a      	beq.n	800292a <HAL_ADC_Init+0x2f6>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80028fc:	d012      	beq.n	8002924 <HAL_ADC_Init+0x2f0>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8002906:	d00a      	beq.n	800291e <HAL_ADC_Init+0x2ea>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8002910:	d002      	beq.n	8002918 <HAL_ADC_Init+0x2e4>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	e023      	b.n	8002960 <HAL_ADC_Init+0x32c>
 8002918:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800291c:	e020      	b.n	8002960 <HAL_ADC_Init+0x32c>
 800291e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002922:	e01d      	b.n	8002960 <HAL_ADC_Init+0x32c>
 8002924:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002928:	e01a      	b.n	8002960 <HAL_ADC_Init+0x32c>
 800292a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800292e:	e017      	b.n	8002960 <HAL_ADC_Init+0x32c>
 8002930:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002934:	e014      	b.n	8002960 <HAL_ADC_Init+0x32c>
 8002936:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800293a:	e011      	b.n	8002960 <HAL_ADC_Init+0x32c>
 800293c:	20000000 	.word	0x20000000
 8002940:	431bde83 	.word	0x431bde83
 8002944:	50000100 	.word	0x50000100
 8002948:	50000300 	.word	0x50000300
 800294c:	50000700 	.word	0x50000700
 8002950:	50000400 	.word	0x50000400
 8002954:	50000500 	.word	0x50000500
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002964:	4313      	orrs	r3, r2
 8002966:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002968:	4313      	orrs	r3, r2
 800296a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b00      	cmp	r3, #0
 8002978:	d114      	bne.n	80029a4 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002988:	f023 0302 	bic.w	r3, r3, #2
 800298c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	7e1b      	ldrb	r3, [r3, #24]
 8002992:	039a      	lsls	r2, r3, #14
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4313      	orrs	r3, r2
 800299e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80029a0:	4313      	orrs	r3, r2
 80029a2:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <HAL_ADC_Init+0x3f0>)
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80029b4:	430b      	orrs	r3, r1
 80029b6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d10c      	bne.n	80029da <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f023 010f 	bic.w	r1, r3, #15
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	1e5a      	subs	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
 80029d8:	e007      	b.n	80029ea <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 020f 	bic.w	r2, r2, #15
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40
 8002a00:	e00a      	b.n	8002a18 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f023 0312 	bic.w	r3, r3, #18
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002a18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3768      	adds	r7, #104	; 0x68
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	fff0c007 	.word	0xfff0c007

08002a28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 80f7 	bne.w	8002c36 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_Start_DMA+0x2e>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e0f2      	b.n	8002c3c <HAL_ADC_Start_DMA+0x214>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a66:	d004      	beq.n	8002a72 <HAL_ADC_Start_DMA+0x4a>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a75      	ldr	r2, [pc, #468]	; (8002c44 <HAL_ADC_Start_DMA+0x21c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d109      	bne.n	8002a86 <HAL_ADC_Start_DMA+0x5e>
 8002a72:	4b75      	ldr	r3, [pc, #468]	; (8002c48 <HAL_ADC_Start_DMA+0x220>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf0c      	ite	eq
 8002a7e:	2301      	moveq	r3, #1
 8002a80:	2300      	movne	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	e008      	b.n	8002a98 <HAL_ADC_Start_DMA+0x70>
 8002a86:	4b71      	ldr	r3, [pc, #452]	; (8002c4c <HAL_ADC_Start_DMA+0x224>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80c5 	beq.w	8002c28 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f001 f890 	bl	8003bc4 <ADC_Enable>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80b7 	bne.w	8002c1e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ab8:	f023 0301 	bic.w	r3, r3, #1
 8002abc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002acc:	d004      	beq.n	8002ad8 <HAL_ADC_Start_DMA+0xb0>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a5c      	ldr	r2, [pc, #368]	; (8002c44 <HAL_ADC_Start_DMA+0x21c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d106      	bne.n	8002ae6 <HAL_ADC_Start_DMA+0xbe>
 8002ad8:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <HAL_ADC_Start_DMA+0x220>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 031f 	and.w	r3, r3, #31
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d010      	beq.n	8002b06 <HAL_ADC_Start_DMA+0xde>
 8002ae4:	e005      	b.n	8002af2 <HAL_ADC_Start_DMA+0xca>
 8002ae6:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_ADC_Start_DMA+0x224>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_ADC_Start_DMA+0xde>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002afa:	d004      	beq.n	8002b06 <HAL_ADC_Start_DMA+0xde>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a53      	ldr	r2, [pc, #332]	; (8002c50 <HAL_ADC_Start_DMA+0x228>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d115      	bne.n	8002b32 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d036      	beq.n	8002b8e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002b30:	e02d      	b.n	8002b8e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b46:	d004      	beq.n	8002b52 <HAL_ADC_Start_DMA+0x12a>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a3d      	ldr	r2, [pc, #244]	; (8002c44 <HAL_ADC_Start_DMA+0x21c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10a      	bne.n	8002b68 <HAL_ADC_Start_DMA+0x140>
 8002b52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	bf14      	ite	ne
 8002b60:	2301      	movne	r3, #1
 8002b62:	2300      	moveq	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e008      	b.n	8002b7a <HAL_ADC_Start_DMA+0x152>
 8002b68:	4b39      	ldr	r3, [pc, #228]	; (8002c50 <HAL_ADC_Start_DMA+0x228>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d007      	beq.n	8002b8e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	d106      	bne.n	8002baa <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	f023 0206 	bic.w	r2, r3, #6
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	645a      	str	r2, [r3, #68]	; 0x44
 8002ba8:	e002      	b.n	8002bb0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <HAL_ADC_Start_DMA+0x22c>)
 8002bbe:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc4:	4a24      	ldr	r2, [pc, #144]	; (8002c58 <HAL_ADC_Start_DMA+0x230>)
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_ADC_Start_DMA+0x234>)
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	221c      	movs	r2, #28
 8002bd6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0210 	orr.w	r2, r2, #16
 8002be6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3340      	adds	r3, #64	; 0x40
 8002c02:	4619      	mov	r1, r3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f001 fab4 	bl	8004174 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0204 	orr.w	r2, r2, #4
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e00d      	b.n	8002c3a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c26:	e008      	b.n	8002c3a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c34:	e001      	b.n	8002c3a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
 8002c38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	50000100 	.word	0x50000100
 8002c48:	50000300 	.word	0x50000300
 8002c4c:	50000700 	.word	0x50000700
 8002c50:	50000400 	.word	0x50000400
 8002c54:	08003af9 	.word	0x08003af9
 8002c58:	08003b73 	.word	0x08003b73
 8002c5c:	08003b8f 	.word	0x08003b8f

08002c60 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Stop_DMA+0x1a>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e050      	b.n	8002d1c <HAL_ADC_Stop_DMA+0xbc>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c82:	216c      	movs	r1, #108	; 0x6c
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f001 f867 	bl	8003d58 <ADC_ConversionStop>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13e      	bne.n	8002d12 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d10f      	bne.n	8002cd0 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 fabc 	bl	8004232 <HAL_DMA_Abort>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0210 	bic.w	r2, r2, #16
 8002cde:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 ffd0 	bl	8003c8c <ADC_Disable>
 8002cec:	4603      	mov	r3, r0
 8002cee:	73fb      	strb	r3, [r7, #15]
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 ffca 	bl	8003c8c <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x38>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10b      	bne.n	8002d74 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 80bc 	beq.w	8002ee0 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 80b6 	beq.w	8002ee0 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d94:	d004      	beq.n	8002da0 <HAL_ADC_IRQHandler+0x7c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a90      	ldr	r2, [pc, #576]	; (8002fdc <HAL_ADC_IRQHandler+0x2b8>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d106      	bne.n	8002dae <HAL_ADC_IRQHandler+0x8a>
 8002da0:	4b8f      	ldr	r3, [pc, #572]	; (8002fe0 <HAL_ADC_IRQHandler+0x2bc>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d03e      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x106>
 8002dac:	e005      	b.n	8002dba <HAL_ADC_IRQHandler+0x96>
 8002dae:	4b8d      	ldr	r3, [pc, #564]	; (8002fe4 <HAL_ADC_IRQHandler+0x2c0>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d037      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x106>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc2:	d004      	beq.n	8002dce <HAL_ADC_IRQHandler+0xaa>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a84      	ldr	r2, [pc, #528]	; (8002fdc <HAL_ADC_IRQHandler+0x2b8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d106      	bne.n	8002ddc <HAL_ADC_IRQHandler+0xb8>
 8002dce:	4b84      	ldr	r3, [pc, #528]	; (8002fe0 <HAL_ADC_IRQHandler+0x2bc>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d027      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x106>
 8002dda:	e005      	b.n	8002de8 <HAL_ADC_IRQHandler+0xc4>
 8002ddc:	4b81      	ldr	r3, [pc, #516]	; (8002fe4 <HAL_ADC_IRQHandler+0x2c0>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d020      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x106>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df0:	d004      	beq.n	8002dfc <HAL_ADC_IRQHandler+0xd8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a79      	ldr	r2, [pc, #484]	; (8002fdc <HAL_ADC_IRQHandler+0x2b8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d106      	bne.n	8002e0a <HAL_ADC_IRQHandler+0xe6>
 8002dfc:	4b78      	ldr	r3, [pc, #480]	; (8002fe0 <HAL_ADC_IRQHandler+0x2bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	d010      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x106>
 8002e08:	e005      	b.n	8002e16 <HAL_ADC_IRQHandler+0xf2>
 8002e0a:	4b76      	ldr	r3, [pc, #472]	; (8002fe4 <HAL_ADC_IRQHandler+0x2c0>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	2b09      	cmp	r3, #9
 8002e14:	d009      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x106>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x106>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a70      	ldr	r2, [pc, #448]	; (8002fe8 <HAL_ADC_IRQHandler+0x2c4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d104      	bne.n	8002e34 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	e00f      	b.n	8002e54 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_IRQHandler+0x124>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a66      	ldr	r2, [pc, #408]	; (8002fdc <HAL_ADC_IRQHandler+0x2b8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d102      	bne.n	8002e4e <HAL_ADC_IRQHandler+0x12a>
 8002e48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e4c:	e000      	b.n	8002e50 <HAL_ADC_IRQHandler+0x12c>
 8002e4e:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_ADC_IRQHandler+0x2c4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d137      	bne.n	8002ed2 <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d132      	bne.n	8002ed2 <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d02d      	beq.n	8002ed2 <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d11a      	bne.n	8002eba <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 020c 	bic.w	r2, r2, #12
 8002e92:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d112      	bne.n	8002ed2 <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40
 8002eb8:	e00b      	b.n	8002ed2 <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f043 0210 	orr.w	r2, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eca:	f043 0201 	orr.w	r2, r3, #1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fe fdb0 	bl	8001a38 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	220c      	movs	r2, #12
 8002ede:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_ADC_IRQHandler+0x1d0>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f003 0320 	and.w	r3, r3, #32
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10b      	bne.n	8002f0c <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8138 	beq.w	8003170 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8132 	beq.w	8003170 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f20:	d004      	beq.n	8002f2c <HAL_ADC_IRQHandler+0x208>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a2d      	ldr	r2, [pc, #180]	; (8002fdc <HAL_ADC_IRQHandler+0x2b8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d106      	bne.n	8002f3a <HAL_ADC_IRQHandler+0x216>
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <HAL_ADC_IRQHandler+0x2bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d03e      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x292>
 8002f38:	e005      	b.n	8002f46 <HAL_ADC_IRQHandler+0x222>
 8002f3a:	4b2a      	ldr	r3, [pc, #168]	; (8002fe4 <HAL_ADC_IRQHandler+0x2c0>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 031f 	and.w	r3, r3, #31
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d037      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x292>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f4e:	d004      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x236>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <HAL_ADC_IRQHandler+0x2b8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d106      	bne.n	8002f68 <HAL_ADC_IRQHandler+0x244>
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <HAL_ADC_IRQHandler+0x2bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	2b05      	cmp	r3, #5
 8002f64:	d027      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x292>
 8002f66:	e005      	b.n	8002f74 <HAL_ADC_IRQHandler+0x250>
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_ADC_IRQHandler+0x2c0>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 031f 	and.w	r3, r3, #31
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d020      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x292>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADC_IRQHandler+0x264>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <HAL_ADC_IRQHandler+0x2b8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d106      	bne.n	8002f96 <HAL_ADC_IRQHandler+0x272>
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_ADC_IRQHandler+0x2bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	d010      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x292>
 8002f94:	e005      	b.n	8002fa2 <HAL_ADC_IRQHandler+0x27e>
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_ADC_IRQHandler+0x2c0>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	2b09      	cmp	r3, #9
 8002fa0:	d009      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x292>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002faa:	d004      	beq.n	8002fb6 <HAL_ADC_IRQHandler+0x292>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_ADC_IRQHandler+0x2c4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d104      	bne.n	8002fc0 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	61bb      	str	r3, [r7, #24]
 8002fbe:	e018      	b.n	8002ff2 <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_IRQHandler+0x2b0>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a03      	ldr	r2, [pc, #12]	; (8002fdc <HAL_ADC_IRQHandler+0x2b8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10b      	bne.n	8002fec <HAL_ADC_IRQHandler+0x2c8>
 8002fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002fd8:	e009      	b.n	8002fee <HAL_ADC_IRQHandler+0x2ca>
 8002fda:	bf00      	nop
 8002fdc:	50000100 	.word	0x50000100
 8002fe0:	50000300 	.word	0x50000300
 8002fe4:	50000700 	.word	0x50000700
 8002fe8:	50000400 	.word	0x50000400
 8002fec:	4b92      	ldr	r3, [pc, #584]	; (8003238 <HAL_ADC_IRQHandler+0x514>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 80b0 	bne.w	8003162 <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 80a3 	bne.w	8003162 <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 809d 	bne.w	8003162 <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8097 	beq.w	8003162 <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800303c:	d004      	beq.n	8003048 <HAL_ADC_IRQHandler+0x324>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a7e      	ldr	r2, [pc, #504]	; (800323c <HAL_ADC_IRQHandler+0x518>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d106      	bne.n	8003056 <HAL_ADC_IRQHandler+0x332>
 8003048:	4b7d      	ldr	r3, [pc, #500]	; (8003240 <HAL_ADC_IRQHandler+0x51c>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	2b00      	cmp	r3, #0
 8003052:	d03e      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x3ae>
 8003054:	e005      	b.n	8003062 <HAL_ADC_IRQHandler+0x33e>
 8003056:	4b7b      	ldr	r3, [pc, #492]	; (8003244 <HAL_ADC_IRQHandler+0x520>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2b00      	cmp	r3, #0
 8003060:	d037      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x3ae>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306a:	d004      	beq.n	8003076 <HAL_ADC_IRQHandler+0x352>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a72      	ldr	r2, [pc, #456]	; (800323c <HAL_ADC_IRQHandler+0x518>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d106      	bne.n	8003084 <HAL_ADC_IRQHandler+0x360>
 8003076:	4b72      	ldr	r3, [pc, #456]	; (8003240 <HAL_ADC_IRQHandler+0x51c>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 031f 	and.w	r3, r3, #31
 800307e:	2b06      	cmp	r3, #6
 8003080:	d027      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x3ae>
 8003082:	e005      	b.n	8003090 <HAL_ADC_IRQHandler+0x36c>
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <HAL_ADC_IRQHandler+0x520>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2b06      	cmp	r3, #6
 800308e:	d020      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x3ae>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003098:	d004      	beq.n	80030a4 <HAL_ADC_IRQHandler+0x380>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a67      	ldr	r2, [pc, #412]	; (800323c <HAL_ADC_IRQHandler+0x518>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d106      	bne.n	80030b2 <HAL_ADC_IRQHandler+0x38e>
 80030a4:	4b66      	ldr	r3, [pc, #408]	; (8003240 <HAL_ADC_IRQHandler+0x51c>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	d010      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x3ae>
 80030b0:	e005      	b.n	80030be <HAL_ADC_IRQHandler+0x39a>
 80030b2:	4b64      	ldr	r3, [pc, #400]	; (8003244 <HAL_ADC_IRQHandler+0x520>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	2b07      	cmp	r3, #7
 80030bc:	d009      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x3ae>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030c6:	d004      	beq.n	80030d2 <HAL_ADC_IRQHandler+0x3ae>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5a      	ldr	r2, [pc, #360]	; (8003238 <HAL_ADC_IRQHandler+0x514>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d104      	bne.n	80030dc <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e00f      	b.n	80030fc <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e4:	d004      	beq.n	80030f0 <HAL_ADC_IRQHandler+0x3cc>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a54      	ldr	r2, [pc, #336]	; (800323c <HAL_ADC_IRQHandler+0x518>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d102      	bne.n	80030f6 <HAL_ADC_IRQHandler+0x3d2>
 80030f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030f4:	e000      	b.n	80030f8 <HAL_ADC_IRQHandler+0x3d4>
 80030f6:	4b50      	ldr	r3, [pc, #320]	; (8003238 <HAL_ADC_IRQHandler+0x514>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d12d      	bne.n	8003162 <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d11a      	bne.n	800314a <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003122:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d112      	bne.n	8003162 <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
 8003148:	e00b      	b.n	8003162 <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0210 	orr.w	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8c4 	bl	80032f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2260      	movs	r2, #96	; 0x60
 800316e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003176:	2b00      	cmp	r3, #0
 8003178:	d011      	beq.n	800319e <HAL_ADC_IRQHandler+0x47a>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00c      	beq.n	800319e <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fa3b 	bl	800260c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d012      	beq.n	80031ce <HAL_ADC_IRQHandler+0x4aa>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8aa 	bl	8003318 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031cc:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d012      	beq.n	80031fe <HAL_ADC_IRQHandler+0x4da>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f89c 	bl	800332c <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031fc:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	d04f      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x584>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d04a      	beq.n	80032a8 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003216:	2b01      	cmp	r3, #1
 8003218:	d102      	bne.n	8003220 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 800321a:	2301      	movs	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	e02d      	b.n	800327c <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003228:	d004      	beq.n	8003234 <HAL_ADC_IRQHandler+0x510>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a03      	ldr	r2, [pc, #12]	; (800323c <HAL_ADC_IRQHandler+0x518>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d109      	bne.n	8003248 <HAL_ADC_IRQHandler+0x524>
 8003234:	4b02      	ldr	r3, [pc, #8]	; (8003240 <HAL_ADC_IRQHandler+0x51c>)
 8003236:	e008      	b.n	800324a <HAL_ADC_IRQHandler+0x526>
 8003238:	50000400 	.word	0x50000400
 800323c:	50000100 	.word	0x50000100
 8003240:	50000300 	.word	0x50000300
 8003244:	50000700 	.word	0x50000700
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_ADC_IRQHandler+0x5c8>)
 800324a:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10a      	bne.n	800327c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003266:	2301      	movs	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
 800326a:	e007      	b.n	800327c <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003278:	2301      	movs	r3, #1
 800327a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d10e      	bne.n	80032a0 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f043 0202 	orr.w	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff f9c0 	bl	8002620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2210      	movs	r2, #16
 80032a6:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d018      	beq.n	80032e4 <HAL_ADC_IRQHandler+0x5c0>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	f043 0208 	orr.w	r2, r3, #8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032dc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f810 	bl	8003304 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80032e4:	bf00      	nop
 80032e6:	3720      	adds	r7, #32
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	50000700 	.word	0x50000700

080032f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003340:	b480      	push	{r7}
 8003342:	b09b      	sub	sp, #108	; 0x6c
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335a:	2b01      	cmp	r3, #1
 800335c:	d101      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x22>
 800335e:	2302      	movs	r3, #2
 8003360:	e2c8      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x5b4>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f040 82ac 	bne.w	80038d2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b04      	cmp	r3, #4
 8003380:	d81c      	bhi.n	80033bc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	4413      	add	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	461a      	mov	r2, r3
 8003396:	231f      	movs	r3, #31
 8003398:	4093      	lsls	r3, r2
 800339a:	43db      	mvns	r3, r3
 800339c:	4019      	ands	r1, r3
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fa00 f203 	lsl.w	r2, r0, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
 80033ba:	e063      	b.n	8003484 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b09      	cmp	r3, #9
 80033c2:	d81e      	bhi.n	8003402 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	3b1e      	subs	r3, #30
 80033d8:	221f      	movs	r2, #31
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	4019      	ands	r1, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	3b1e      	subs	r3, #30
 80033f4:	fa00 f203 	lsl.w	r2, r0, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003400:	e040      	b.n	8003484 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b0e      	cmp	r3, #14
 8003408:	d81e      	bhi.n	8003448 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	3b3c      	subs	r3, #60	; 0x3c
 800341e:	221f      	movs	r2, #31
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	4019      	ands	r1, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	3b3c      	subs	r3, #60	; 0x3c
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
 8003446:	e01d      	b.n	8003484 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	3b5a      	subs	r3, #90	; 0x5a
 800345c:	221f      	movs	r2, #31
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	4019      	ands	r1, r3
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4413      	add	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	3b5a      	subs	r3, #90	; 0x5a
 8003478:	fa00 f203 	lsl.w	r2, r0, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 80e5 	bne.w	800365e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b09      	cmp	r3, #9
 800349a:	d91c      	bls.n	80034d6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6999      	ldr	r1, [r3, #24]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	3b1e      	subs	r3, #30
 80034ae:	2207      	movs	r2, #7
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	4019      	ands	r1, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6898      	ldr	r0, [r3, #8]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	3b1e      	subs	r3, #30
 80034c8:	fa00 f203 	lsl.w	r2, r0, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	619a      	str	r2, [r3, #24]
 80034d4:	e019      	b.n	800350a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6959      	ldr	r1, [r3, #20]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	2207      	movs	r2, #7
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	4019      	ands	r1, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6898      	ldr	r0, [r3, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	08db      	lsrs	r3, r3, #3
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	3b01      	subs	r3, #1
 8003528:	2b03      	cmp	r3, #3
 800352a:	d84f      	bhi.n	80035cc <HAL_ADC_ConfigChannel+0x28c>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <HAL_ADC_ConfigChannel+0x1f4>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003545 	.word	0x08003545
 8003538:	08003567 	.word	0x08003567
 800353c:	08003589 	.word	0x08003589
 8003540:	080035ab 	.word	0x080035ab
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800354a:	4b99      	ldr	r3, [pc, #612]	; (80037b0 <HAL_ADC_ConfigChannel+0x470>)
 800354c:	4013      	ands	r3, r2
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	0691      	lsls	r1, r2, #26
 8003554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003556:	430a      	orrs	r2, r1
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003562:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003564:	e07b      	b.n	800365e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800356c:	4b90      	ldr	r3, [pc, #576]	; (80037b0 <HAL_ADC_ConfigChannel+0x470>)
 800356e:	4013      	ands	r3, r2
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	6812      	ldr	r2, [r2, #0]
 8003574:	0691      	lsls	r1, r2, #26
 8003576:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003578:	430a      	orrs	r2, r1
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003584:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003586:	e06a      	b.n	800365e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800358e:	4b88      	ldr	r3, [pc, #544]	; (80037b0 <HAL_ADC_ConfigChannel+0x470>)
 8003590:	4013      	ands	r3, r2
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	0691      	lsls	r1, r2, #26
 8003598:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800359a:	430a      	orrs	r2, r1
 800359c:	431a      	orrs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035a6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035a8:	e059      	b.n	800365e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035b0:	4b7f      	ldr	r3, [pc, #508]	; (80037b0 <HAL_ADC_ConfigChannel+0x470>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	0691      	lsls	r1, r2, #26
 80035ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035bc:	430a      	orrs	r2, r1
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80035c8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80035ca:	e048      	b.n	800365e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	069b      	lsls	r3, r3, #26
 80035dc:	429a      	cmp	r2, r3
 80035de:	d107      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035ee:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	069b      	lsls	r3, r3, #26
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003612:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	069b      	lsls	r3, r3, #26
 8003624:	429a      	cmp	r2, r3
 8003626:	d107      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003636:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	069b      	lsls	r3, r3, #26
 8003648:	429a      	cmp	r2, r3
 800364a:	d107      	bne.n	800365c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800365a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800365c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b01      	cmp	r3, #1
 800366a:	d108      	bne.n	800367e <HAL_ADC_ConfigChannel+0x33e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_ADC_ConfigChannel+0x33e>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <HAL_ADC_ConfigChannel+0x340>
 800367e:	2300      	movs	r3, #0
 8003680:	2b00      	cmp	r3, #0
 8003682:	f040 8131 	bne.w	80038e8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d00f      	beq.n	80036ae <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43da      	mvns	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	400a      	ands	r2, r1
 80036a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80036ac:	e049      	b.n	8003742 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	409a      	lsls	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b09      	cmp	r3, #9
 80036ce:	d91c      	bls.n	800370a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6999      	ldr	r1, [r3, #24]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4613      	mov	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	4413      	add	r3, r2
 80036e0:	3b1b      	subs	r3, #27
 80036e2:	2207      	movs	r2, #7
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	4019      	ands	r1, r3
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	6898      	ldr	r0, [r3, #8]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	3b1b      	subs	r3, #27
 80036fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	430a      	orrs	r2, r1
 8003706:	619a      	str	r2, [r3, #24]
 8003708:	e01b      	b.n	8003742 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6959      	ldr	r1, [r3, #20]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	2207      	movs	r2, #7
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	4019      	ands	r1, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	6898      	ldr	r0, [r3, #8]
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	4613      	mov	r3, r2
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	4413      	add	r3, r2
 8003736:	fa00 f203 	lsl.w	r2, r0, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800374a:	d004      	beq.n	8003756 <HAL_ADC_ConfigChannel+0x416>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_ADC_ConfigChannel+0x474>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_ADC_ConfigChannel+0x41a>
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <HAL_ADC_ConfigChannel+0x478>)
 8003758:	e000      	b.n	800375c <HAL_ADC_ConfigChannel+0x41c>
 800375a:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_ADC_ConfigChannel+0x47c>)
 800375c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b10      	cmp	r3, #16
 8003764:	d105      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	d015      	beq.n	800379e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003776:	2b11      	cmp	r3, #17
 8003778:	d105      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800377a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800378a:	2b12      	cmp	r3, #18
 800378c:	f040 80ac 	bne.w	80038e8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003798:	2b00      	cmp	r3, #0
 800379a:	f040 80a5 	bne.w	80038e8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a6:	d10b      	bne.n	80037c0 <HAL_ADC_ConfigChannel+0x480>
 80037a8:	4b02      	ldr	r3, [pc, #8]	; (80037b4 <HAL_ADC_ConfigChannel+0x474>)
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e023      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x4b6>
 80037ae:	bf00      	nop
 80037b0:	83fff000 	.word	0x83fff000
 80037b4:	50000100 	.word	0x50000100
 80037b8:	50000300 	.word	0x50000300
 80037bc:	50000700 	.word	0x50000700
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a4e      	ldr	r2, [pc, #312]	; (8003900 <HAL_ADC_ConfigChannel+0x5c0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d103      	bne.n	80037d2 <HAL_ADC_ConfigChannel+0x492>
 80037ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	e011      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x4b6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <HAL_ADC_ConfigChannel+0x5c4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d102      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x4a2>
 80037dc:	4b4a      	ldr	r3, [pc, #296]	; (8003908 <HAL_ADC_ConfigChannel+0x5c8>)
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e009      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x4b6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a48      	ldr	r2, [pc, #288]	; (8003908 <HAL_ADC_ConfigChannel+0x5c8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d102      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x4b2>
 80037ec:	4b45      	ldr	r3, [pc, #276]	; (8003904 <HAL_ADC_ConfigChannel+0x5c4>)
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e001      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x4b6>
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d108      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x4d6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x4d6>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_ADC_ConfigChannel+0x4d8>
 8003816:	2300      	movs	r3, #0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d150      	bne.n	80038be <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800381c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800381e:	2b00      	cmp	r3, #0
 8003820:	d010      	beq.n	8003844 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_ADC_ConfigChannel+0x4fe>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_ADC_ConfigChannel+0x4fe>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_ADC_ConfigChannel+0x500>
 800383e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003840:	2b00      	cmp	r3, #0
 8003842:	d13c      	bne.n	80038be <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b10      	cmp	r3, #16
 800384a:	d11d      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x548>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003854:	d118      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003856:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800385e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003860:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003862:	4b2a      	ldr	r3, [pc, #168]	; (800390c <HAL_ADC_ConfigChannel+0x5cc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2a      	ldr	r2, [pc, #168]	; (8003910 <HAL_ADC_ConfigChannel+0x5d0>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	0c9a      	lsrs	r2, r3, #18
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003878:	e002      	b.n	8003880 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3b01      	subs	r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f9      	bne.n	800387a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003886:	e02e      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b11      	cmp	r3, #17
 800388e:	d10b      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x568>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003898:	d106      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800389a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80038a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038a6:	e01e      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b12      	cmp	r3, #18
 80038ae:	d11a      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80038b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ba:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038bc:	e013      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0220 	orr.w	r2, r3, #32
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80038d0:	e00a      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f043 0220 	orr.w	r2, r3, #32
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80038e4:	e000      	b.n	80038e8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80038e6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80038f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	376c      	adds	r7, #108	; 0x6c
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	50000100 	.word	0x50000100
 8003904:	50000400 	.word	0x50000400
 8003908:	50000500 	.word	0x50000500
 800390c:	20000000 	.word	0x20000000
 8003910:	431bde83 	.word	0x431bde83

08003914 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003914:	b480      	push	{r7}
 8003916:	b099      	sub	sp, #100	; 0x64
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800392c:	d102      	bne.n	8003934 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800392e:	4b6d      	ldr	r3, [pc, #436]	; (8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	e01a      	b.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6a      	ldr	r2, [pc, #424]	; (8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d103      	bne.n	8003946 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800393e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	e011      	b.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a67      	ldr	r2, [pc, #412]	; (8003ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d102      	bne.n	8003956 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003950:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	e009      	b.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a64      	ldr	r2, [pc, #400]	; (8003aec <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d102      	bne.n	8003966 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003960:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	e001      	b.n	800396a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e0b0      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800397e:	2302      	movs	r3, #2
 8003980:	e0a9      	b.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f040 808d 	bne.w	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0304 	and.w	r3, r3, #4
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 8086 	bne.w	8003ab4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b0:	d004      	beq.n	80039bc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a4b      	ldr	r2, [pc, #300]	; (8003ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80039bc:	4b4c      	ldr	r3, [pc, #304]	; (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80039be:	e000      	b.n	80039c2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80039c0:	4b4c      	ldr	r3, [pc, #304]	; (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80039c2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d040      	beq.n	8003a4e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80039cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039de:	035b      	lsls	r3, r3, #13
 80039e0:	430b      	orrs	r3, r1
 80039e2:	431a      	orrs	r2, r3
 80039e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039e6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d108      	bne.n	8003a08 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d15c      	bne.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d101      	bne.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8003a2a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d14b      	bne.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a38:	f023 030f 	bic.w	r3, r3, #15
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	6811      	ldr	r1, [r2, #0]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	6892      	ldr	r2, [r2, #8]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	431a      	orrs	r2, r3
 8003a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a4a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a4c:	e03c      	b.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a58:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0303 	and.w	r3, r3, #3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d108      	bne.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d123      	bne.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d107      	bne.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8003a9c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d112      	bne.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8003aa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003aaa:	f023 030f 	bic.w	r3, r3, #15
 8003aae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ab0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab2:	e009      	b.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	f043 0220 	orr.w	r2, r3, #32
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8003ac6:	e000      	b.n	8003aca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3764      	adds	r7, #100	; 0x64
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	50000100 	.word	0x50000100
 8003ae8:	50000400 	.word	0x50000400
 8003aec:	50000500 	.word	0x50000500
 8003af0:	50000300 	.word	0x50000300
 8003af4:	50000700 	.word	0x50000700

08003af8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d126      	bne.n	8003b60 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d115      	bne.n	8003b58 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d111      	bne.n	8003b58 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	f043 0201 	orr.w	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7fd ff6d 	bl	8001a38 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003b5e:	e004      	b.n	8003b6a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
}
 8003b6a:	bf00      	nop
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7fe fd39 	bl	80025f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	f043 0204 	orr.w	r2, r3, #4
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7fe fd33 	bl	8002620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d108      	bne.n	8003bf0 <ADC_Enable+0x2c>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <ADC_Enable+0x2c>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <ADC_Enable+0x2e>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d143      	bne.n	8003c7e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <ADC_Enable+0xc4>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00d      	beq.n	8003c20 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f043 0210 	orr.w	r2, r3, #16
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f043 0201 	orr.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e02f      	b.n	8003c80 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003c30:	f7fe fcb2 	bl	8002598 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c36:	e01b      	b.n	8003c70 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c38:	f7fe fcae 	bl	8002598 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d914      	bls.n	8003c70 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d00d      	beq.n	8003c70 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c58:	f043 0210 	orr.w	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	f043 0201 	orr.w	r2, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e007      	b.n	8003c80 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d1dc      	bne.n	8003c38 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	8000003f 	.word	0x8000003f

08003c8c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d108      	bne.n	8003cb8 <ADC_Disable+0x2c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <ADC_Disable+0x2c>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <ADC_Disable+0x2e>
 8003cb8:	2300      	movs	r3, #0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d047      	beq.n	8003d4e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f003 030d 	and.w	r3, r3, #13
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10f      	bne.n	8003cec <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0202 	orr.w	r2, r2, #2
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003ce4:	f7fe fc58 	bl	8002598 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003cea:	e029      	b.n	8003d40 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f043 0210 	orr.w	r2, r3, #16
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e023      	b.n	8003d50 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d08:	f7fe fc46 	bl	8002598 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d914      	bls.n	8003d40 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d10d      	bne.n	8003d40 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f043 0210 	orr.w	r2, r3, #16
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e007      	b.n	8003d50 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d0dc      	beq.n	8003d08 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 809b 	beq.w	8003eb4 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d8c:	d12a      	bne.n	8003de4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d126      	bne.n	8003de4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d122      	bne.n	8003de4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8003d9e:	230c      	movs	r3, #12
 8003da0:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003da2:	e014      	b.n	8003dce <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4a46      	ldr	r2, [pc, #280]	; (8003ec0 <ADC_ConversionStop+0x168>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d90d      	bls.n	8003dc8 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db0:	f043 0210 	orr.w	r2, r3, #16
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e076      	b.n	8003eb6 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b40      	cmp	r3, #64	; 0x40
 8003dda:	d1e3      	bne.n	8003da4 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2240      	movs	r2, #64	; 0x40
 8003de2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b60      	cmp	r3, #96	; 0x60
 8003de8:	d015      	beq.n	8003e16 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d10e      	bne.n	8003e16 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d107      	bne.n	8003e16 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0210 	orr.w	r2, r2, #16
 8003e14:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d015      	beq.n	8003e48 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d10e      	bne.n	8003e48 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0220 	orr.w	r2, r2, #32
 8003e46:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	2b60      	cmp	r3, #96	; 0x60
 8003e4c:	d005      	beq.n	8003e5a <ADC_ConversionStop+0x102>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b6c      	cmp	r3, #108	; 0x6c
 8003e52:	d105      	bne.n	8003e60 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003e54:	230c      	movs	r3, #12
 8003e56:	617b      	str	r3, [r7, #20]
        break;
 8003e58:	e005      	b.n	8003e66 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	617b      	str	r3, [r7, #20]
        break;
 8003e5e:	e002      	b.n	8003e66 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003e60:	2304      	movs	r3, #4
 8003e62:	617b      	str	r3, [r7, #20]
        break;
 8003e64:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003e66:	f7fe fb97 	bl	8002598 <HAL_GetTick>
 8003e6a:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003e6c:	e01b      	b.n	8003ea6 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003e6e:	f7fe fb93 	bl	8002598 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b0b      	cmp	r3, #11
 8003e7a:	d914      	bls.n	8003ea6 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4013      	ands	r3, r2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f043 0210 	orr.w	r2, r3, #16
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e007      	b.n	8003eb6 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1dc      	bne.n	8003e6e <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	000993ff 	.word	0x000993ff

08003ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ef6:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <__NVIC_SetPriorityGrouping+0x44>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	60d3      	str	r3, [r2, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00

08003f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <__NVIC_GetPriorityGrouping+0x18>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	0a1b      	lsrs	r3, r3, #8
 8003f16:	f003 0307 	and.w	r3, r3, #7
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	db0b      	blt.n	8003f52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	f003 021f 	and.w	r2, r3, #31
 8003f40:	4907      	ldr	r1, [pc, #28]	; (8003f60 <__NVIC_EnableIRQ+0x38>)
 8003f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2001      	movs	r0, #1
 8003f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	e000e100 	.word	0xe000e100

08003f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	db0a      	blt.n	8003f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	490c      	ldr	r1, [pc, #48]	; (8003fb0 <__NVIC_SetPriority+0x4c>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	440b      	add	r3, r1
 8003f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f8c:	e00a      	b.n	8003fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	4908      	ldr	r1, [pc, #32]	; (8003fb4 <__NVIC_SetPriority+0x50>)
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	3b04      	subs	r3, #4
 8003f9c:	0112      	lsls	r2, r2, #4
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	761a      	strb	r2, [r3, #24]
}
 8003fa4:	bf00      	nop
 8003fa6:	370c      	adds	r7, #12
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	e000e100 	.word	0xe000e100
 8003fb4:	e000ed00 	.word	0xe000ed00

08003fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b089      	sub	sp, #36	; 0x24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f1c3 0307 	rsb	r3, r3, #7
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	bf28      	it	cs
 8003fd6:	2304      	movcs	r3, #4
 8003fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	2b06      	cmp	r3, #6
 8003fe0:	d902      	bls.n	8003fe8 <NVIC_EncodePriority+0x30>
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3b03      	subs	r3, #3
 8003fe6:	e000      	b.n	8003fea <NVIC_EncodePriority+0x32>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43da      	mvns	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004000:	f04f 31ff 	mov.w	r1, #4294967295
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	43d9      	mvns	r1, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004010:	4313      	orrs	r3, r2
         );
}
 8004012:	4618      	mov	r0, r3
 8004014:	3724      	adds	r7, #36	; 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3b01      	subs	r3, #1
 800402c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004030:	d301      	bcc.n	8004036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004032:	2301      	movs	r3, #1
 8004034:	e00f      	b.n	8004056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004036:	4a0a      	ldr	r2, [pc, #40]	; (8004060 <SysTick_Config+0x40>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3b01      	subs	r3, #1
 800403c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800403e:	210f      	movs	r1, #15
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	f7ff ff8e 	bl	8003f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004048:	4b05      	ldr	r3, [pc, #20]	; (8004060 <SysTick_Config+0x40>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800404e:	4b04      	ldr	r3, [pc, #16]	; (8004060 <SysTick_Config+0x40>)
 8004050:	2207      	movs	r2, #7
 8004052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	e000e010 	.word	0xe000e010

08004064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ff29 	bl	8003ec4 <__NVIC_SetPriorityGrouping>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b086      	sub	sp, #24
 800407e:	af00      	add	r7, sp, #0
 8004080:	4603      	mov	r3, r0
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	607a      	str	r2, [r7, #4]
 8004086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800408c:	f7ff ff3e 	bl	8003f0c <__NVIC_GetPriorityGrouping>
 8004090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	6978      	ldr	r0, [r7, #20]
 8004098:	f7ff ff8e 	bl	8003fb8 <NVIC_EncodePriority>
 800409c:	4602      	mov	r2, r0
 800409e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff5d 	bl	8003f64 <__NVIC_SetPriority>
}
 80040aa:	bf00      	nop
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	4603      	mov	r3, r0
 80040ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff ff31 	bl	8003f28 <__NVIC_EnableIRQ>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ffa2 	bl	8004020 <SysTick_Config>
 80040dc:	4603      	mov	r3, r0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e037      	b.n	800416c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004112:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004116:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800412c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f97a 	bl	8004448 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}  
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_DMA_Start_IT+0x20>
 8004190:	2302      	movs	r3, #2
 8004192:	e04a      	b.n	800422a <HAL_DMA_Start_IT+0xb6>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d13a      	bne.n	800421c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68b9      	ldr	r1, [r7, #8]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f90d 	bl	80043ea <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 020e 	orr.w	r2, r2, #14
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e00f      	b.n	800420a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f042 020a 	orr.w	r2, r2, #10
 80041f8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0204 	bic.w	r2, r2, #4
 8004208:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e005      	b.n	8004228 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004224:	2302      	movs	r3, #2
 8004226:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004228:	7dfb      	ldrb	r3, [r7, #23]
} 
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004240:	2b02      	cmp	r3, #2
 8004242:	d008      	beq.n	8004256 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2204      	movs	r2, #4
 8004248:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e020      	b.n	8004298 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 020e 	bic.w	r2, r2, #14
 8004264:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	2101      	movs	r1, #1
 8004280:	fa01 f202 	lsl.w	r2, r1, r2
 8004284:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2204      	movs	r2, #4
 80042c2:	409a      	lsls	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d024      	beq.n	8004316 <HAL_DMA_IRQHandler+0x72>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01f      	beq.n	8004316 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d107      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0204 	bic.w	r2, r2, #4
 80042f2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fc:	2104      	movs	r1, #4
 80042fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004302:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	2b00      	cmp	r3, #0
 800430a:	d06a      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004314:	e065      	b.n	80043e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2202      	movs	r2, #2
 800431c:	409a      	lsls	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d02c      	beq.n	8004380 <HAL_DMA_IRQHandler+0xdc>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d027      	beq.n	8004380 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 020a 	bic.w	r2, r2, #10
 800434c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	2102      	movs	r1, #2
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	d035      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800437e:	e030      	b.n	80043e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	2208      	movs	r2, #8
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d028      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x13e>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d023      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 020e 	bic.w	r2, r2, #14
 80043a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	2101      	movs	r1, #1
 80043b4:	fa01 f202 	lsl.w	r2, r1, r2
 80043b8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
    }
  }
}  
 80043e0:	e7ff      	b.n	80043e2 <HAL_DMA_IRQHandler+0x13e>
 80043e2:	bf00      	nop
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004400:	2101      	movs	r1, #1
 8004402:	fa01 f202 	lsl.w	r2, r1, r2
 8004406:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	2b10      	cmp	r3, #16
 8004416:	d108      	bne.n	800442a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004428:	e007      	b.n	800443a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	60da      	str	r2, [r3, #12]
}
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <DMA_CalcBaseAndBitshift+0x60>)
 8004458:	429a      	cmp	r2, r3
 800445a:	d80f      	bhi.n	800447c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	461a      	mov	r2, r3
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <DMA_CalcBaseAndBitshift+0x64>)
 8004464:	4413      	add	r3, r2
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004468:	fba2 2303 	umull	r2, r3, r2, r3
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	009a      	lsls	r2, r3, #2
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a0f      	ldr	r2, [pc, #60]	; (80044b4 <DMA_CalcBaseAndBitshift+0x6c>)
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800447a:	e00e      	b.n	800449a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <DMA_CalcBaseAndBitshift+0x70>)
 8004484:	4413      	add	r3, r2
 8004486:	4a0a      	ldr	r2, [pc, #40]	; (80044b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004488:	fba2 2303 	umull	r2, r3, r2, r3
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <DMA_CalcBaseAndBitshift+0x74>)
 8004498:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40020407 	.word	0x40020407
 80044ac:	bffdfff8 	.word	0xbffdfff8
 80044b0:	cccccccd 	.word	0xcccccccd
 80044b4:	40020000 	.word	0x40020000
 80044b8:	bffdfbf8 	.word	0xbffdfbf8
 80044bc:	40020400 	.word	0x40020400

080044c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ce:	e160      	b.n	8004792 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2101      	movs	r1, #1
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	fa01 f303 	lsl.w	r3, r1, r3
 80044dc:	4013      	ands	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f000 8152 	beq.w	800478c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d005      	beq.n	8004500 <HAL_GPIO_Init+0x40>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d130      	bne.n	8004562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	2203      	movs	r2, #3
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4013      	ands	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004536:	2201      	movs	r2, #1
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	fa02 f303 	lsl.w	r3, r2, r3
 800453e:	43db      	mvns	r3, r3
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4013      	ands	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f003 0201 	and.w	r2, r3, #1
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	fa02 f303 	lsl.w	r3, r2, r3
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b03      	cmp	r3, #3
 800456c:	d017      	beq.n	800459e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	2203      	movs	r2, #3
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4013      	ands	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	fa02 f303 	lsl.w	r3, r2, r3
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	4313      	orrs	r3, r2
 8004596:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d123      	bne.n	80045f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	08da      	lsrs	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3208      	adds	r2, #8
 80045b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	220f      	movs	r2, #15
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	08da      	lsrs	r2, r3, #3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3208      	adds	r2, #8
 80045ec:	6939      	ldr	r1, [r7, #16]
 80045ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	2203      	movs	r2, #3
 80045fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004602:	43db      	mvns	r3, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4013      	ands	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 0203 	and.w	r2, r3, #3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 80ac 	beq.w	800478c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004634:	4b5e      	ldr	r3, [pc, #376]	; (80047b0 <HAL_GPIO_Init+0x2f0>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	4a5d      	ldr	r2, [pc, #372]	; (80047b0 <HAL_GPIO_Init+0x2f0>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6193      	str	r3, [r2, #24]
 8004640:	4b5b      	ldr	r3, [pc, #364]	; (80047b0 <HAL_GPIO_Init+0x2f0>)
 8004642:	699b      	ldr	r3, [r3, #24]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	60bb      	str	r3, [r7, #8]
 800464a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800464c:	4a59      	ldr	r2, [pc, #356]	; (80047b4 <HAL_GPIO_Init+0x2f4>)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	089b      	lsrs	r3, r3, #2
 8004652:	3302      	adds	r3, #2
 8004654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	220f      	movs	r2, #15
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	4013      	ands	r3, r2
 800466e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004676:	d025      	beq.n	80046c4 <HAL_GPIO_Init+0x204>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <HAL_GPIO_Init+0x2f8>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d01f      	beq.n	80046c0 <HAL_GPIO_Init+0x200>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <HAL_GPIO_Init+0x2fc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d019      	beq.n	80046bc <HAL_GPIO_Init+0x1fc>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_GPIO_Init+0x300>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d013      	beq.n	80046b8 <HAL_GPIO_Init+0x1f8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a4c      	ldr	r2, [pc, #304]	; (80047c4 <HAL_GPIO_Init+0x304>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00d      	beq.n	80046b4 <HAL_GPIO_Init+0x1f4>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <HAL_GPIO_Init+0x308>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <HAL_GPIO_Init+0x1f0>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <HAL_GPIO_Init+0x30c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_GPIO_Init+0x1ec>
 80046a8:	2306      	movs	r3, #6
 80046aa:	e00c      	b.n	80046c6 <HAL_GPIO_Init+0x206>
 80046ac:	2307      	movs	r3, #7
 80046ae:	e00a      	b.n	80046c6 <HAL_GPIO_Init+0x206>
 80046b0:	2305      	movs	r3, #5
 80046b2:	e008      	b.n	80046c6 <HAL_GPIO_Init+0x206>
 80046b4:	2304      	movs	r3, #4
 80046b6:	e006      	b.n	80046c6 <HAL_GPIO_Init+0x206>
 80046b8:	2303      	movs	r3, #3
 80046ba:	e004      	b.n	80046c6 <HAL_GPIO_Init+0x206>
 80046bc:	2302      	movs	r3, #2
 80046be:	e002      	b.n	80046c6 <HAL_GPIO_Init+0x206>
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <HAL_GPIO_Init+0x206>
 80046c4:	2300      	movs	r3, #0
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	f002 0203 	and.w	r2, r2, #3
 80046cc:	0092      	lsls	r2, r2, #2
 80046ce:	4093      	lsls	r3, r2
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046d6:	4937      	ldr	r1, [pc, #220]	; (80047b4 <HAL_GPIO_Init+0x2f4>)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	089b      	lsrs	r3, r3, #2
 80046dc:	3302      	adds	r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046e4:	4b3a      	ldr	r3, [pc, #232]	; (80047d0 <HAL_GPIO_Init+0x310>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004708:	4a31      	ldr	r2, [pc, #196]	; (80047d0 <HAL_GPIO_Init+0x310>)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800470e:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_GPIO_Init+0x310>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	43db      	mvns	r3, r3
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4013      	ands	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004732:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <HAL_GPIO_Init+0x310>)
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004738:	4b25      	ldr	r3, [pc, #148]	; (80047d0 <HAL_GPIO_Init+0x310>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	43db      	mvns	r3, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4013      	ands	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800475c:	4a1c      	ldr	r2, [pc, #112]	; (80047d0 <HAL_GPIO_Init+0x310>)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_GPIO_Init+0x310>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	43db      	mvns	r3, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004786:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <HAL_GPIO_Init+0x310>)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	3301      	adds	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	f47f ae97 	bne.w	80044d0 <HAL_GPIO_Init+0x10>
  }
}
 80047a2:	bf00      	nop
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40010000 	.word	0x40010000
 80047b8:	48000400 	.word	0x48000400
 80047bc:	48000800 	.word	0x48000800
 80047c0:	48000c00 	.word	0x48000c00
 80047c4:	48001000 	.word	0x48001000
 80047c8:	48001400 	.word	0x48001400
 80047cc:	48001800 	.word	0x48001800
 80047d0:	40010400 	.word	0x40010400

080047d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	887b      	ldrh	r3, [r7, #2]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]
 80047f0:	e001      	b.n	80047f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	460b      	mov	r3, r1
 800480e:	807b      	strh	r3, [r7, #2]
 8004810:	4613      	mov	r3, r2
 8004812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004814:	787b      	ldrb	r3, [r7, #1]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004820:	e002      	b.n	8004828 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	4603      	mov	r3, r0
 800483c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	4013      	ands	r3, r2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800484a:	4a05      	ldr	r2, [pc, #20]	; (8004860 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004850:	88fb      	ldrh	r3, [r7, #6]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fd f836 	bl	80018c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004858:	bf00      	nop
 800485a:	3708      	adds	r7, #8
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40010400 	.word	0x40010400

08004864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e081      	b.n	800497a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fd fc30 	bl	80020f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2224      	movs	r2, #36	; 0x24
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d107      	bne.n	80048de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	e006      	b.n	80048ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d104      	bne.n	80048fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6812      	ldr	r2, [r2, #0]
 8004908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800490c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004910:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004920:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	69d9      	ldr	r1, [r3, #28]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1a      	ldr	r2, [r3, #32]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2220      	movs	r2, #32
 8004966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	460b      	mov	r3, r1
 8004992:	817b      	strh	r3, [r7, #10]
 8004994:	4613      	mov	r3, r2
 8004996:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b20      	cmp	r3, #32
 80049a2:	f040 80da 	bne.w	8004b5a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_I2C_Master_Transmit+0x30>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e0d3      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1d8>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049bc:	f7fd fdec 	bl	8002598 <HAL_GetTick>
 80049c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2319      	movs	r3, #25
 80049c8:	2201      	movs	r2, #1
 80049ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f8f0 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0be      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2221      	movs	r2, #33	; 0x21
 80049e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2210      	movs	r2, #16
 80049ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	893a      	ldrh	r2, [r7, #8]
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2bff      	cmp	r3, #255	; 0xff
 8004a0e:	d90e      	bls.n	8004a2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	22ff      	movs	r2, #255	; 0xff
 8004a14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	8979      	ldrh	r1, [r7, #10]
 8004a1e:	4b51      	ldr	r3, [pc, #324]	; (8004b64 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fa7e 	bl	8004f28 <I2C_TransferConfig>
 8004a2c:	e06c      	b.n	8004b08 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	8979      	ldrh	r1, [r7, #10]
 8004a40:	4b48      	ldr	r3, [pc, #288]	; (8004b64 <HAL_I2C_Master_Transmit+0x1e0>)
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fa6d 	bl	8004f28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a4e:	e05b      	b.n	8004b08 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	6a39      	ldr	r1, [r7, #32]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f8fc 	bl	8004c52 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e07b      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d034      	beq.n	8004b08 <HAL_I2C_Master_Transmit+0x184>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d130      	bne.n	8004b08 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	2200      	movs	r2, #0
 8004aae:	2180      	movs	r1, #128	; 0x80
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f87f 	bl	8004bb4 <I2C_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e04d      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2bff      	cmp	r3, #255	; 0xff
 8004ac8:	d90e      	bls.n	8004ae8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	22ff      	movs	r2, #255	; 0xff
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	8979      	ldrh	r1, [r7, #10]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fa21 	bl	8004f28 <I2C_TransferConfig>
 8004ae6:	e00f      	b.n	8004b08 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	8979      	ldrh	r1, [r7, #10]
 8004afa:	2300      	movs	r3, #0
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fa10 	bl	8004f28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d19e      	bne.n	8004a50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	6a39      	ldr	r1, [r7, #32]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f8e2 	bl	8004ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e01a      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6859      	ldr	r1, [r3, #4]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_I2C_Master_Transmit+0x1e4>)
 8004b3a:	400b      	ands	r3, r1
 8004b3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	80002000 	.word	0x80002000
 8004b68:	fe00e800 	.word	0xfe00e800

08004b6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d103      	bne.n	8004b8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d007      	beq.n	8004ba8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699a      	ldr	r2, [r3, #24]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	619a      	str	r2, [r3, #24]
  }
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bc4:	e031      	b.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bcc:	d02d      	beq.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bce:	f7fd fce3 	bl	8002598 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d302      	bcc.n	8004be4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d122      	bne.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	4013      	ands	r3, r2
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	79fb      	ldrb	r3, [r7, #7]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d113      	bne.n	8004c2a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e00f      	b.n	8004c4a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699a      	ldr	r2, [r3, #24]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	4013      	ands	r3, r2
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d0be      	beq.n	8004bc6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c5e:	e033      	b.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 f87f 	bl	8004d68 <I2C_IsErrorOccurred>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e031      	b.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	d025      	beq.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7c:	f7fd fc8c 	bl	8002598 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d302      	bcc.n	8004c92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11a      	bne.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	699b      	ldr	r3, [r3, #24]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d013      	beq.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e007      	b.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d1c4      	bne.n	8004c60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cec:	e02f      	b.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 f838 	bl	8004d68 <I2C_IsErrorOccurred>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e02d      	b.n	8004d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d02:	f7fd fc49 	bl	8002598 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11a      	bne.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0320 	and.w	r3, r3, #32
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d013      	beq.n	8004d4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e007      	b.n	8004d5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d1c8      	bne.n	8004cee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	; 0x28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d068      	beq.n	8004e66 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2210      	movs	r2, #16
 8004d9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d9c:	e049      	b.n	8004e32 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d045      	beq.n	8004e32 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004da6:	f7fd fbf7 	bl	8002598 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d302      	bcc.n	8004dbc <I2C_IsErrorOccurred+0x54>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d13a      	bne.n	8004e32 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dde:	d121      	bne.n	8004e24 <I2C_IsErrorOccurred+0xbc>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004de6:	d01d      	beq.n	8004e24 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d01a      	beq.n	8004e24 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dfc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dfe:	f7fd fbcb 	bl	8002598 <HAL_GetTick>
 8004e02:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e04:	e00e      	b.n	8004e24 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004e06:	f7fd fbc7 	bl	8002598 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b19      	cmp	r3, #25
 8004e12:	d907      	bls.n	8004e24 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f043 0320 	orr.w	r3, r3, #32
 8004e1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e22:	e006      	b.n	8004e32 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b20      	cmp	r3, #32
 8004e30:	d1e9      	bne.n	8004e06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b20      	cmp	r3, #32
 8004e3e:	d003      	beq.n	8004e48 <I2C_IsErrorOccurred+0xe0>
 8004e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0aa      	beq.n	8004d9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d103      	bne.n	8004e58 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2220      	movs	r2, #32
 8004e56:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	f043 0301 	orr.w	r3, r3, #1
 8004e7e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e90:	69bb      	ldr	r3, [r7, #24]
 8004e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f043 0308 	orr.w	r3, r3, #8
 8004ea0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	f043 0302 	orr.w	r3, r3, #2
 8004ec2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01c      	beq.n	8004f16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f7ff fe45 	bl	8004b6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6859      	ldr	r1, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <I2C_IsErrorOccurred+0x1bc>)
 8004eee:	400b      	ands	r3, r1
 8004ef0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3728      	adds	r7, #40	; 0x28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	fe00e800 	.word	0xfe00e800

08004f28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	607b      	str	r3, [r7, #4]
 8004f32:	460b      	mov	r3, r1
 8004f34:	817b      	strh	r3, [r7, #10]
 8004f36:	4613      	mov	r3, r2
 8004f38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f3a:	897b      	ldrh	r3, [r7, #10]
 8004f3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f40:	7a7b      	ldrb	r3, [r7, #9]
 8004f42:	041b      	lsls	r3, r3, #16
 8004f44:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	0d5b      	lsrs	r3, r3, #21
 8004f62:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <I2C_TransferConfig+0x60>)
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	ea02 0103 	and.w	r1, r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	03ff63ff 	.word	0x03ff63ff

08004f8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	d138      	bne.n	8005014 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e032      	b.n	8005016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	e000      	b.n	8005016 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005014:	2302      	movs	r3, #2
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b20      	cmp	r3, #32
 8005036:	d139      	bne.n	80050ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005042:	2302      	movs	r3, #2
 8005044:	e033      	b.n	80050ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2224      	movs	r2, #36	; 0x24
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005074:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050a8:	2300      	movs	r3, #0
 80050aa:	e000      	b.n	80050ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80050ac:	2302      	movs	r3, #2
  }
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050cc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050d2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f001 b83a 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80050e6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 816f 	beq.w	80053d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80050f8:	4bb5      	ldr	r3, [pc, #724]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b04      	cmp	r3, #4
 8005102:	d00c      	beq.n	800511e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005104:	4bb2      	ldr	r3, [pc, #712]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b08      	cmp	r3, #8
 800510e:	d15c      	bne.n	80051ca <HAL_RCC_OscConfig+0x10e>
 8005110:	4baf      	ldr	r3, [pc, #700]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511c:	d155      	bne.n	80051ca <HAL_RCC_OscConfig+0x10e>
 800511e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005122:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005126:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800512a:	fa93 f3a3 	rbit	r3, r3
 800512e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005132:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005136:	fab3 f383 	clz	r3, r3
 800513a:	b2db      	uxtb	r3, r3
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	d102      	bne.n	8005150 <HAL_RCC_OscConfig+0x94>
 800514a:	4ba1      	ldr	r3, [pc, #644]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	e015      	b.n	800517c <HAL_RCC_OscConfig+0xc0>
 8005150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005154:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800515c:	fa93 f3a3 	rbit	r3, r3
 8005160:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005168:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800516c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005170:	fa93 f3a3 	rbit	r3, r3
 8005174:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005178:	4b95      	ldr	r3, [pc, #596]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005180:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005184:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005188:	fa92 f2a2 	rbit	r2, r2
 800518c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005190:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005194:	fab2 f282 	clz	r2, r2
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	f042 0220 	orr.w	r2, r2, #32
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	f002 021f 	and.w	r2, r2, #31
 80051a4:	2101      	movs	r1, #1
 80051a6:	fa01 f202 	lsl.w	r2, r1, r2
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8111 	beq.w	80053d4 <HAL_RCC_OscConfig+0x318>
 80051b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051b6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 8108 	bne.w	80053d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f000 bfc6 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051da:	d106      	bne.n	80051ea <HAL_RCC_OscConfig+0x12e>
 80051dc:	4b7c      	ldr	r3, [pc, #496]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a7b      	ldr	r2, [pc, #492]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 80051e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	e036      	b.n	8005258 <HAL_RCC_OscConfig+0x19c>
 80051ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10c      	bne.n	8005214 <HAL_RCC_OscConfig+0x158>
 80051fa:	4b75      	ldr	r3, [pc, #468]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a74      	ldr	r2, [pc, #464]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	4b72      	ldr	r3, [pc, #456]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a71      	ldr	r2, [pc, #452]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 800520c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005210:	6013      	str	r3, [r2, #0]
 8005212:	e021      	b.n	8005258 <HAL_RCC_OscConfig+0x19c>
 8005214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005218:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x184>
 8005226:	4b6a      	ldr	r3, [pc, #424]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a69      	ldr	r2, [pc, #420]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 800522c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b67      	ldr	r3, [pc, #412]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a66      	ldr	r2, [pc, #408]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0x19c>
 8005240:	4b63      	ldr	r3, [pc, #396]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a62      	ldr	r2, [pc, #392]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	4b60      	ldr	r3, [pc, #384]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5f      	ldr	r2, [pc, #380]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005256:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005258:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800525c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d059      	beq.n	800531c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005268:	f7fd f996 	bl	8002598 <HAL_GetTick>
 800526c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005270:	e00a      	b.n	8005288 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005272:	f7fd f991 	bl	8002598 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b64      	cmp	r3, #100	; 0x64
 8005280:	d902      	bls.n	8005288 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	f000 bf67 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>
 8005288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800528c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005290:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005294:	fa93 f3a3 	rbit	r3, r3
 8005298:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800529c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052a0:	fab3 f383 	clz	r3, r3
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f043 0301 	orr.w	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_OscConfig+0x1fe>
 80052b4:	4b46      	ldr	r3, [pc, #280]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	e015      	b.n	80052e6 <HAL_RCC_OscConfig+0x22a>
 80052ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80052ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80052d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80052da:	fa93 f3a3 	rbit	r3, r3
 80052de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80052e2:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 80052e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80052ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80052f2:	fa92 f2a2 	rbit	r2, r2
 80052f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80052fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80052fe:	fab2 f282 	clz	r2, r2
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	f042 0220 	orr.w	r2, r2, #32
 8005308:	b2d2      	uxtb	r2, r2
 800530a:	f002 021f 	and.w	r2, r2, #31
 800530e:	2101      	movs	r1, #1
 8005310:	fa01 f202 	lsl.w	r2, r1, r2
 8005314:	4013      	ands	r3, r2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0ab      	beq.n	8005272 <HAL_RCC_OscConfig+0x1b6>
 800531a:	e05c      	b.n	80053d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800531c:	f7fd f93c 	bl	8002598 <HAL_GetTick>
 8005320:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005324:	e00a      	b.n	800533c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005326:	f7fd f937 	bl	8002598 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	; 0x64
 8005334:	d902      	bls.n	800533c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	f000 bf0d 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>
 800533c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005340:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005344:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005348:	fa93 f3a3 	rbit	r3, r3
 800534c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005350:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005354:	fab3 f383 	clz	r3, r3
 8005358:	b2db      	uxtb	r3, r3
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d102      	bne.n	800536e <HAL_RCC_OscConfig+0x2b2>
 8005368:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	e015      	b.n	800539a <HAL_RCC_OscConfig+0x2de>
 800536e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005372:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005376:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800537a:	fa93 f3a3 	rbit	r3, r3
 800537e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005386:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800538a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800538e:	fa93 f3a3 	rbit	r3, r3
 8005392:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005396:	4b0e      	ldr	r3, [pc, #56]	; (80053d0 <HAL_RCC_OscConfig+0x314>)
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800539e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80053a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80053a6:	fa92 f2a2 	rbit	r2, r2
 80053aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80053ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80053b2:	fab2 f282 	clz	r2, r2
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	f042 0220 	orr.w	r2, r2, #32
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	f002 021f 	and.w	r2, r2, #31
 80053c2:	2101      	movs	r1, #1
 80053c4:	fa01 f202 	lsl.w	r2, r1, r2
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ab      	bne.n	8005326 <HAL_RCC_OscConfig+0x26a>
 80053ce:	e002      	b.n	80053d6 <HAL_RCC_OscConfig+0x31a>
 80053d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 817f 	beq.w	80056ea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80053ec:	4ba7      	ldr	r3, [pc, #668]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f003 030c 	and.w	r3, r3, #12
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80053f8:	4ba4      	ldr	r3, [pc, #656]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 030c 	and.w	r3, r3, #12
 8005400:	2b08      	cmp	r3, #8
 8005402:	d173      	bne.n	80054ec <HAL_RCC_OscConfig+0x430>
 8005404:	4ba1      	ldr	r3, [pc, #644]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800540c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005410:	d16c      	bne.n	80054ec <HAL_RCC_OscConfig+0x430>
 8005412:	2302      	movs	r3, #2
 8005414:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005418:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800541c:	fa93 f3a3 	rbit	r3, r3
 8005420:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005424:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005428:	fab3 f383 	clz	r3, r3
 800542c:	b2db      	uxtb	r3, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	b2db      	uxtb	r3, r3
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d102      	bne.n	8005442 <HAL_RCC_OscConfig+0x386>
 800543c:	4b93      	ldr	r3, [pc, #588]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	e013      	b.n	800546a <HAL_RCC_OscConfig+0x3ae>
 8005442:	2302      	movs	r3, #2
 8005444:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005448:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800544c:	fa93 f3a3 	rbit	r3, r3
 8005450:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005454:	2302      	movs	r3, #2
 8005456:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800545a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005466:	4b89      	ldr	r3, [pc, #548]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	2202      	movs	r2, #2
 800546c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005470:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005474:	fa92 f2a2 	rbit	r2, r2
 8005478:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800547c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005480:	fab2 f282 	clz	r2, r2
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	f042 0220 	orr.w	r2, r2, #32
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	f002 021f 	and.w	r2, r2, #31
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f202 	lsl.w	r2, r1, r2
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_RCC_OscConfig+0x3f6>
 800549c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d002      	beq.n	80054b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f000 be52 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b2:	4b76      	ldr	r3, [pc, #472]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	21f8      	movs	r1, #248	; 0xf8
 80054c8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80054d0:	fa91 f1a1 	rbit	r1, r1
 80054d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80054d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80054dc:	fab1 f181 	clz	r1, r1
 80054e0:	b2c9      	uxtb	r1, r1
 80054e2:	408b      	lsls	r3, r1
 80054e4:	4969      	ldr	r1, [pc, #420]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ea:	e0fe      	b.n	80056ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8088 	beq.w	800560e <HAL_RCC_OscConfig+0x552>
 80054fe:	2301      	movs	r3, #1
 8005500:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005504:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005508:	fa93 f3a3 	rbit	r3, r3
 800550c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005510:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005514:	fab3 f383 	clz	r3, r3
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800551e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	461a      	mov	r2, r3
 8005526:	2301      	movs	r3, #1
 8005528:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800552a:	f7fd f835 	bl	8002598 <HAL_GetTick>
 800552e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005532:	e00a      	b.n	800554a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005534:	f7fd f830 	bl	8002598 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d902      	bls.n	800554a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	f000 be06 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>
 800554a:	2302      	movs	r3, #2
 800554c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005550:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005554:	fa93 f3a3 	rbit	r3, r3
 8005558:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800555c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005560:	fab3 f383 	clz	r3, r3
 8005564:	b2db      	uxtb	r3, r3
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d102      	bne.n	800557a <HAL_RCC_OscConfig+0x4be>
 8005574:	4b45      	ldr	r3, [pc, #276]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	e013      	b.n	80055a2 <HAL_RCC_OscConfig+0x4e6>
 800557a:	2302      	movs	r3, #2
 800557c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005580:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005584:	fa93 f3a3 	rbit	r3, r3
 8005588:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800558c:	2302      	movs	r3, #2
 800558e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005592:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2202      	movs	r2, #2
 80055a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80055a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80055ac:	fa92 f2a2 	rbit	r2, r2
 80055b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80055b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80055b8:	fab2 f282 	clz	r2, r2
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	f042 0220 	orr.w	r2, r2, #32
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	f002 021f 	and.w	r2, r2, #31
 80055c8:	2101      	movs	r1, #1
 80055ca:	fa01 f202 	lsl.w	r2, r1, r2
 80055ce:	4013      	ands	r3, r2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0af      	beq.n	8005534 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055d4:	4b2d      	ldr	r3, [pc, #180]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	21f8      	movs	r1, #248	; 0xf8
 80055ea:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80055f2:	fa91 f1a1 	rbit	r1, r1
 80055f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80055fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80055fe:	fab1 f181 	clz	r1, r1
 8005602:	b2c9      	uxtb	r1, r1
 8005604:	408b      	lsls	r3, r1
 8005606:	4921      	ldr	r1, [pc, #132]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 8005608:	4313      	orrs	r3, r2
 800560a:	600b      	str	r3, [r1, #0]
 800560c:	e06d      	b.n	80056ea <HAL_RCC_OscConfig+0x62e>
 800560e:	2301      	movs	r3, #1
 8005610:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005614:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005620:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005624:	fab3 f383 	clz	r3, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800562e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	461a      	mov	r2, r3
 8005636:	2300      	movs	r3, #0
 8005638:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563a:	f7fc ffad 	bl	8002598 <HAL_GetTick>
 800563e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005642:	e00a      	b.n	800565a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005644:	f7fc ffa8 	bl	8002598 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d902      	bls.n	800565a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	f000 bd7e 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>
 800565a:	2302      	movs	r3, #2
 800565c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005660:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800566c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005670:	fab3 f383 	clz	r3, r3
 8005674:	b2db      	uxtb	r3, r3
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b01      	cmp	r3, #1
 8005682:	d105      	bne.n	8005690 <HAL_RCC_OscConfig+0x5d4>
 8005684:	4b01      	ldr	r3, [pc, #4]	; (800568c <HAL_RCC_OscConfig+0x5d0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	e016      	b.n	80056b8 <HAL_RCC_OscConfig+0x5fc>
 800568a:	bf00      	nop
 800568c:	40021000 	.word	0x40021000
 8005690:	2302      	movs	r3, #2
 8005692:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005696:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569a:	fa93 f3a3 	rbit	r3, r3
 800569e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056a2:	2302      	movs	r3, #2
 80056a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80056a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056ac:	fa93 f3a3 	rbit	r3, r3
 80056b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80056b4:	4bbf      	ldr	r3, [pc, #764]	; (80059b4 <HAL_RCC_OscConfig+0x8f8>)
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2202      	movs	r2, #2
 80056ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80056be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80056c2:	fa92 f2a2 	rbit	r2, r2
 80056c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80056ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80056ce:	fab2 f282 	clz	r2, r2
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	f042 0220 	orr.w	r2, r2, #32
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	f002 021f 	and.w	r2, r2, #31
 80056de:	2101      	movs	r1, #1
 80056e0:	fa01 f202 	lsl.w	r2, r1, r2
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1ac      	bne.n	8005644 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8113 	beq.w	8005926 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005700:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005704:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d07c      	beq.n	800580a <HAL_RCC_OscConfig+0x74e>
 8005710:	2301      	movs	r3, #1
 8005712:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800571a:	fa93 f3a3 	rbit	r3, r3
 800571e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005722:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005726:	fab3 f383 	clz	r3, r3
 800572a:	b2db      	uxtb	r3, r3
 800572c:	461a      	mov	r2, r3
 800572e:	4ba2      	ldr	r3, [pc, #648]	; (80059b8 <HAL_RCC_OscConfig+0x8fc>)
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	461a      	mov	r2, r3
 8005736:	2301      	movs	r3, #1
 8005738:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573a:	f7fc ff2d 	bl	8002598 <HAL_GetTick>
 800573e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005742:	e00a      	b.n	800575a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005744:	f7fc ff28 	bl	8002598 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d902      	bls.n	800575a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	f000 bcfe 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>
 800575a:	2302      	movs	r3, #2
 800575c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005764:	fa93 f2a3 	rbit	r2, r3
 8005768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800576c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800577a:	2202      	movs	r2, #2
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	fa93 f2a3 	rbit	r2, r3
 800578c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800579a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800579e:	2202      	movs	r2, #2
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	fa93 f2a3 	rbit	r2, r3
 80057b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80057b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <HAL_RCC_OscConfig+0x8f8>)
 80057bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057c6:	2102      	movs	r1, #2
 80057c8:	6019      	str	r1, [r3, #0]
 80057ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	fa93 f1a3 	rbit	r1, r3
 80057d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057e0:	6019      	str	r1, [r3, #0]
  return result;
 80057e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80057e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	fab3 f383 	clz	r3, r3
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	2101      	movs	r1, #1
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	4013      	ands	r3, r2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d09d      	beq.n	8005744 <HAL_RCC_OscConfig+0x688>
 8005808:	e08d      	b.n	8005926 <HAL_RCC_OscConfig+0x86a>
 800580a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800580e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800581a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	fa93 f2a3 	rbit	r2, r3
 8005824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005828:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800582c:	601a      	str	r2, [r3, #0]
  return result;
 800582e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005832:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005836:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005838:	fab3 f383 	clz	r3, r3
 800583c:	b2db      	uxtb	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	4b5d      	ldr	r3, [pc, #372]	; (80059b8 <HAL_RCC_OscConfig+0x8fc>)
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800584c:	f7fc fea4 	bl	8002598 <HAL_GetTick>
 8005850:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005854:	e00a      	b.n	800586c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005856:	f7fc fe9f 	bl	8002598 <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d902      	bls.n	800586c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	f000 bc75 	b.w	8006156 <HAL_RCC_OscConfig+0x109a>
 800586c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005870:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005874:	2202      	movs	r2, #2
 8005876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800587c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	fa93 f2a3 	rbit	r2, r3
 8005886:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800588a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800588e:	601a      	str	r2, [r3, #0]
 8005890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005898:	2202      	movs	r2, #2
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	fa93 f2a3 	rbit	r2, r3
 80058aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	601a      	str	r2, [r3, #0]
 80058b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80058bc:	2202      	movs	r2, #2
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	fa93 f2a3 	rbit	r2, r3
 80058ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80058d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d8:	4b36      	ldr	r3, [pc, #216]	; (80059b4 <HAL_RCC_OscConfig+0x8f8>)
 80058da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058e4:	2102      	movs	r1, #2
 80058e6:	6019      	str	r1, [r3, #0]
 80058e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	fa93 f1a3 	rbit	r1, r3
 80058f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80058fa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80058fe:	6019      	str	r1, [r3, #0]
  return result;
 8005900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005904:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	fab3 f383 	clz	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2101      	movs	r1, #1
 800591c:	fa01 f303 	lsl.w	r3, r1, r3
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d197      	bne.n	8005856 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005926:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800592a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0304 	and.w	r3, r3, #4
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 81a5 	beq.w	8005c86 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800593c:	2300      	movs	r3, #0
 800593e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <HAL_RCC_OscConfig+0x8f8>)
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d116      	bne.n	800597c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <HAL_RCC_OscConfig+0x8f8>)
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <HAL_RCC_OscConfig+0x8f8>)
 8005954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005958:	61d3      	str	r3, [r2, #28]
 800595a:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <HAL_RCC_OscConfig+0x8f8>)
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005962:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005966:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005970:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005974:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <HAL_RCC_OscConfig+0x900>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005984:	2b00      	cmp	r3, #0
 8005986:	d121      	bne.n	80059cc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RCC_OscConfig+0x900>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <HAL_RCC_OscConfig+0x900>)
 800598e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005992:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005994:	f7fc fe00 	bl	8002598 <HAL_GetTick>
 8005998:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800599c:	e010      	b.n	80059c0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800599e:	f7fc fdfb 	bl	8002598 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b64      	cmp	r3, #100	; 0x64
 80059ac:	d908      	bls.n	80059c0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e3d1      	b.n	8006156 <HAL_RCC_OscConfig+0x109a>
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000
 80059b8:	10908120 	.word	0x10908120
 80059bc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c0:	4b8d      	ldr	r3, [pc, #564]	; (8005bf8 <HAL_RCC_OscConfig+0xb3c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0e8      	beq.n	800599e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d106      	bne.n	80059ea <HAL_RCC_OscConfig+0x92e>
 80059dc:	4b87      	ldr	r3, [pc, #540]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	4a86      	ldr	r2, [pc, #536]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 80059e2:	f043 0301 	orr.w	r3, r3, #1
 80059e6:	6213      	str	r3, [r2, #32]
 80059e8:	e035      	b.n	8005a56 <HAL_RCC_OscConfig+0x99a>
 80059ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80059ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10c      	bne.n	8005a14 <HAL_RCC_OscConfig+0x958>
 80059fa:	4b80      	ldr	r3, [pc, #512]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	4a7f      	ldr	r2, [pc, #508]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a00:	f023 0301 	bic.w	r3, r3, #1
 8005a04:	6213      	str	r3, [r2, #32]
 8005a06:	4b7d      	ldr	r3, [pc, #500]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	4a7c      	ldr	r2, [pc, #496]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a0c:	f023 0304 	bic.w	r3, r3, #4
 8005a10:	6213      	str	r3, [r2, #32]
 8005a12:	e020      	b.n	8005a56 <HAL_RCC_OscConfig+0x99a>
 8005a14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b05      	cmp	r3, #5
 8005a22:	d10c      	bne.n	8005a3e <HAL_RCC_OscConfig+0x982>
 8005a24:	4b75      	ldr	r3, [pc, #468]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	4a74      	ldr	r2, [pc, #464]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	6213      	str	r3, [r2, #32]
 8005a30:	4b72      	ldr	r3, [pc, #456]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	4a71      	ldr	r2, [pc, #452]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a36:	f043 0301 	orr.w	r3, r3, #1
 8005a3a:	6213      	str	r3, [r2, #32]
 8005a3c:	e00b      	b.n	8005a56 <HAL_RCC_OscConfig+0x99a>
 8005a3e:	4b6f      	ldr	r3, [pc, #444]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4a6e      	ldr	r2, [pc, #440]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a44:	f023 0301 	bic.w	r3, r3, #1
 8005a48:	6213      	str	r3, [r2, #32]
 8005a4a:	4b6c      	ldr	r3, [pc, #432]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	4a6b      	ldr	r2, [pc, #428]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005a50:	f023 0304 	bic.w	r3, r3, #4
 8005a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8081 	beq.w	8005b6a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a68:	f7fc fd96 	bl	8002598 <HAL_GetTick>
 8005a6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a70:	e00b      	b.n	8005a8a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a72:	f7fc fd91 	bl	8002598 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e365      	b.n	8006156 <HAL_RCC_OscConfig+0x109a>
 8005a8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a8e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a92:	2202      	movs	r2, #2
 8005a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a9a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	fa93 f2a3 	rbit	r2, r3
 8005aa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005aa8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ab2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005abe:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	fa93 f2a3 	rbit	r2, r3
 8005ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005acc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005ad0:	601a      	str	r2, [r3, #0]
  return result;
 8005ad2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ad6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005ada:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005adc:	fab3 f383 	clz	r3, r3
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	f043 0302 	orr.w	r3, r3, #2
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d102      	bne.n	8005af6 <HAL_RCC_OscConfig+0xa3a>
 8005af0:	4b42      	ldr	r3, [pc, #264]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	e013      	b.n	8005b1e <HAL_RCC_OscConfig+0xa62>
 8005af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005afa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005afe:	2202      	movs	r2, #2
 8005b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b06:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	fa93 f2a3 	rbit	r2, r3
 8005b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b14:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	4b38      	ldr	r3, [pc, #224]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b22:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005b26:	2102      	movs	r1, #2
 8005b28:	6011      	str	r1, [r2, #0]
 8005b2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b2e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	fa92 f1a2 	rbit	r1, r2
 8005b38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b3c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005b40:	6011      	str	r1, [r2, #0]
  return result;
 8005b42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005b46:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8005b4a:	6812      	ldr	r2, [r2, #0]
 8005b4c:	fab2 f282 	clz	r2, r2
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	f002 021f 	and.w	r2, r2, #31
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b62:	4013      	ands	r3, r2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d084      	beq.n	8005a72 <HAL_RCC_OscConfig+0x9b6>
 8005b68:	e083      	b.n	8005c72 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b6a:	f7fc fd15 	bl	8002598 <HAL_GetTick>
 8005b6e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b72:	e00b      	b.n	8005b8c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b74:	f7fc fd10 	bl	8002598 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e2e4      	b.n	8006156 <HAL_RCC_OscConfig+0x109a>
 8005b8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b90:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005b94:	2202      	movs	r2, #2
 8005b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b9c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	fa93 f2a3 	rbit	r2, r3
 8005ba6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005baa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bb4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005bb8:	2202      	movs	r2, #2
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bc0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	fa93 f2a3 	rbit	r2, r3
 8005bca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005bd2:	601a      	str	r2, [r3, #0]
  return result;
 8005bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005bd8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005bdc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bde:	fab3 f383 	clz	r3, r3
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	095b      	lsrs	r3, r3, #5
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f043 0302 	orr.w	r3, r3, #2
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d106      	bne.n	8005c00 <HAL_RCC_OscConfig+0xb44>
 8005bf2:	4b02      	ldr	r3, [pc, #8]	; (8005bfc <HAL_RCC_OscConfig+0xb40>)
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	e017      	b.n	8005c28 <HAL_RCC_OscConfig+0xb6c>
 8005bf8:	40007000 	.word	0x40007000
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005c08:	2202      	movs	r2, #2
 8005c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c10:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	fa93 f2a3 	rbit	r2, r3
 8005c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c1e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	4bb3      	ldr	r3, [pc, #716]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c2c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005c30:	2102      	movs	r1, #2
 8005c32:	6011      	str	r1, [r2, #0]
 8005c34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c38:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8005c3c:	6812      	ldr	r2, [r2, #0]
 8005c3e:	fa92 f1a2 	rbit	r1, r2
 8005c42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c46:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005c4a:	6011      	str	r1, [r2, #0]
  return result;
 8005c4c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005c50:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	fab2 f282 	clz	r2, r2
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	f002 021f 	and.w	r2, r2, #31
 8005c66:	2101      	movs	r1, #1
 8005c68:	fa01 f202 	lsl.w	r2, r1, r2
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d180      	bne.n	8005b74 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c72:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d105      	bne.n	8005c86 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c7a:	4b9e      	ldr	r3, [pc, #632]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	4a9d      	ldr	r2, [pc, #628]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c84:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005c8a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f000 825e 	beq.w	8006154 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c98:	4b96      	ldr	r3, [pc, #600]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f003 030c 	and.w	r3, r3, #12
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	f000 821f 	beq.w	80060e4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005caa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	f040 8170 	bne.w	8005f98 <HAL_RCC_OscConfig+0xedc>
 8005cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cbc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	fa93 f2a3 	rbit	r2, r3
 8005cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005cd8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005cdc:	601a      	str	r2, [r3, #0]
  return result;
 8005cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ce2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005ce6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce8:	fab3 f383 	clz	r3, r3
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005cf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfe:	f7fc fc4b 	bl	8002598 <HAL_GetTick>
 8005d02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d06:	e009      	b.n	8005d1c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d08:	f7fc fc46 	bl	8002598 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e21c      	b.n	8006156 <HAL_RCC_OscConfig+0x109a>
 8005d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	fa93 f2a3 	rbit	r2, r3
 8005d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005d40:	601a      	str	r2, [r3, #0]
  return result;
 8005d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005d4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d4c:	fab3 f383 	clz	r3, r3
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d102      	bne.n	8005d66 <HAL_RCC_OscConfig+0xcaa>
 8005d60:	4b64      	ldr	r3, [pc, #400]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	e027      	b.n	8005db6 <HAL_RCC_OscConfig+0xcfa>
 8005d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005d6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d78:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	fa93 f2a3 	rbit	r2, r3
 8005d82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005d94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d9e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	fa93 f2a3 	rbit	r2, r3
 8005da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005dac:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	4b50      	ldr	r3, [pc, #320]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005dba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005dbe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005dc2:	6011      	str	r1, [r2, #0]
 8005dc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005dc8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	fa92 f1a2 	rbit	r1, r2
 8005dd2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005dd6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005dda:	6011      	str	r1, [r2, #0]
  return result;
 8005ddc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005de0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	fab2 f282 	clz	r2, r2
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	f042 0220 	orr.w	r2, r2, #32
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	f002 021f 	and.w	r2, r2, #31
 8005df6:	2101      	movs	r1, #1
 8005df8:	fa01 f202 	lsl.w	r2, r1, r2
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d182      	bne.n	8005d08 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e02:	4b3c      	ldr	r3, [pc, #240]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	f023 020f 	bic.w	r2, r3, #15
 8005e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	4937      	ldr	r1, [pc, #220]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005e1c:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a19      	ldr	r1, [r3, #32]
 8005e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	492d      	ldr	r1, [pc, #180]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	604b      	str	r3, [r1, #4]
 8005e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e48:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e56:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	fa93 f2a3 	rbit	r2, r3
 8005e60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e68:	601a      	str	r2, [r3, #0]
  return result;
 8005e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8005e72:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e74:	fab3 f383 	clz	r3, r3
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005e7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	461a      	mov	r2, r3
 8005e86:	2301      	movs	r3, #1
 8005e88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e8a:	f7fc fb85 	bl	8002598 <HAL_GetTick>
 8005e8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005e92:	e009      	b.n	8005ea8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e94:	f7fc fb80 	bl	8002598 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e156      	b.n	8006156 <HAL_RCC_OscConfig+0x109a>
 8005ea8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005eac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005eb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005eb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005eba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	fa93 f2a3 	rbit	r2, r3
 8005ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ec8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005ecc:	601a      	str	r2, [r3, #0]
  return result;
 8005ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005ed2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005ed6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ed8:	fab3 f383 	clz	r3, r3
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f043 0301 	orr.w	r3, r3, #1
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d105      	bne.n	8005ef8 <HAL_RCC_OscConfig+0xe3c>
 8005eec:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <HAL_RCC_OscConfig+0xe38>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	e02a      	b.n	8005f48 <HAL_RCC_OscConfig+0xe8c>
 8005ef2:	bf00      	nop
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005efc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005f00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f0a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	fa93 f2a3 	rbit	r2, r3
 8005f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f18:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f22:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005f26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f30:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	fa93 f2a3 	rbit	r2, r3
 8005f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f3e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	4b86      	ldr	r3, [pc, #536]	; (8006160 <HAL_RCC_OscConfig+0x10a4>)
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f4c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005f50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f5a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8005f5e:	6812      	ldr	r2, [r2, #0]
 8005f60:	fa92 f1a2 	rbit	r1, r2
 8005f64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f68:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005f6c:	6011      	str	r1, [r2, #0]
  return result;
 8005f6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005f72:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8005f76:	6812      	ldr	r2, [r2, #0]
 8005f78:	fab2 f282 	clz	r2, r2
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	f042 0220 	orr.w	r2, r2, #32
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	f002 021f 	and.w	r2, r2, #31
 8005f88:	2101      	movs	r1, #1
 8005f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8e:	4013      	ands	r3, r2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f43f af7f 	beq.w	8005e94 <HAL_RCC_OscConfig+0xdd8>
 8005f96:	e0dd      	b.n	8006154 <HAL_RCC_OscConfig+0x1098>
 8005f98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005faa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	fa93 f2a3 	rbit	r2, r3
 8005fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fb8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005fbc:	601a      	str	r2, [r3, #0]
  return result;
 8005fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005fc2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005fc6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fc8:	fab3 f383 	clz	r3, r3
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2300      	movs	r3, #0
 8005fdc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fde:	f7fc fadb 	bl	8002598 <HAL_GetTick>
 8005fe2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005fe6:	e009      	b.n	8005ffc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe8:	f7fc fad6 	bl	8002598 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e0ac      	b.n	8006156 <HAL_RCC_OscConfig+0x109a>
 8005ffc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006000:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006004:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800600e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	fa93 f2a3 	rbit	r2, r3
 8006018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800601c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006020:	601a      	str	r2, [r3, #0]
  return result;
 8006022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006026:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800602a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800602c:	fab3 f383 	clz	r3, r3
 8006030:	b2db      	uxtb	r3, r3
 8006032:	095b      	lsrs	r3, r3, #5
 8006034:	b2db      	uxtb	r3, r3
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	d102      	bne.n	8006046 <HAL_RCC_OscConfig+0xf8a>
 8006040:	4b47      	ldr	r3, [pc, #284]	; (8006160 <HAL_RCC_OscConfig+0x10a4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	e027      	b.n	8006096 <HAL_RCC_OscConfig+0xfda>
 8006046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800604a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800604e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006054:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006058:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	fa93 f2a3 	rbit	r2, r3
 8006062:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006066:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006070:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800607e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	fa93 f2a3 	rbit	r2, r3
 8006088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800608c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	4b33      	ldr	r3, [pc, #204]	; (8006160 <HAL_RCC_OscConfig+0x10a4>)
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800609a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800609e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80060a2:	6011      	str	r1, [r2, #0]
 80060a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80060a8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	fa92 f1a2 	rbit	r1, r2
 80060b2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80060b6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80060ba:	6011      	str	r1, [r2, #0]
  return result;
 80060bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80060c0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80060c4:	6812      	ldr	r2, [r2, #0]
 80060c6:	fab2 f282 	clz	r2, r2
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	f042 0220 	orr.w	r2, r2, #32
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	f002 021f 	and.w	r2, r2, #31
 80060d6:	2101      	movs	r1, #1
 80060d8:	fa01 f202 	lsl.w	r2, r1, r2
 80060dc:	4013      	ands	r3, r2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d182      	bne.n	8005fe8 <HAL_RCC_OscConfig+0xf2c>
 80060e2:	e037      	b.n	8006154 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e02e      	b.n	8006156 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060f8:	4b19      	ldr	r3, [pc, #100]	; (8006160 <HAL_RCC_OscConfig+0x10a4>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006100:	4b17      	ldr	r3, [pc, #92]	; (8006160 <HAL_RCC_OscConfig+0x10a4>)
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006108:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800610c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006114:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	429a      	cmp	r2, r3
 800611e:	d117      	bne.n	8006150 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006120:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006124:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006128:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800612c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006134:	429a      	cmp	r2, r3
 8006136:	d10b      	bne.n	8006150 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800613c:	f003 020f 	and.w	r2, r3, #15
 8006140:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006144:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800614c:	429a      	cmp	r2, r3
 800614e:	d001      	beq.n	8006154 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	40021000 	.word	0x40021000

08006164 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b09e      	sub	sp, #120	; 0x78
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e162      	b.n	8006442 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800617c:	4b90      	ldr	r3, [pc, #576]	; (80063c0 <HAL_RCC_ClockConfig+0x25c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	429a      	cmp	r2, r3
 8006188:	d910      	bls.n	80061ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618a:	4b8d      	ldr	r3, [pc, #564]	; (80063c0 <HAL_RCC_ClockConfig+0x25c>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f023 0207 	bic.w	r2, r3, #7
 8006192:	498b      	ldr	r1, [pc, #556]	; (80063c0 <HAL_RCC_ClockConfig+0x25c>)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	4313      	orrs	r3, r2
 8006198:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800619a:	4b89      	ldr	r3, [pc, #548]	; (80063c0 <HAL_RCC_ClockConfig+0x25c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d001      	beq.n	80061ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e14a      	b.n	8006442 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b8:	4b82      	ldr	r3, [pc, #520]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	497f      	ldr	r1, [pc, #508]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80dc 	beq.w	8006390 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d13c      	bne.n	800625a <HAL_RCC_ClockConfig+0xf6>
 80061e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80061e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061e8:	fa93 f3a3 	rbit	r3, r3
 80061ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80061ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061f0:	fab3 f383 	clz	r3, r3
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	095b      	lsrs	r3, r3, #5
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f043 0301 	orr.w	r3, r3, #1
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d102      	bne.n	800620a <HAL_RCC_ClockConfig+0xa6>
 8006204:	4b6f      	ldr	r3, [pc, #444]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	e00f      	b.n	800622a <HAL_RCC_ClockConfig+0xc6>
 800620a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800620e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	667b      	str	r3, [r7, #100]	; 0x64
 8006218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800621c:	663b      	str	r3, [r7, #96]	; 0x60
 800621e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006220:	fa93 f3a3 	rbit	r3, r3
 8006224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006226:	4b67      	ldr	r3, [pc, #412]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800622e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006232:	fa92 f2a2 	rbit	r2, r2
 8006236:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006238:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800623a:	fab2 f282 	clz	r2, r2
 800623e:	b2d2      	uxtb	r2, r2
 8006240:	f042 0220 	orr.w	r2, r2, #32
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	f002 021f 	and.w	r2, r2, #31
 800624a:	2101      	movs	r1, #1
 800624c:	fa01 f202 	lsl.w	r2, r1, r2
 8006250:	4013      	ands	r3, r2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d17b      	bne.n	800634e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e0f3      	b.n	8006442 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	2b02      	cmp	r3, #2
 8006260:	d13c      	bne.n	80062dc <HAL_RCC_ClockConfig+0x178>
 8006262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006266:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800626a:	fa93 f3a3 	rbit	r3, r3
 800626e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006272:	fab3 f383 	clz	r3, r3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	b2db      	uxtb	r3, r3
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	d102      	bne.n	800628c <HAL_RCC_ClockConfig+0x128>
 8006286:	4b4f      	ldr	r3, [pc, #316]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	e00f      	b.n	80062ac <HAL_RCC_ClockConfig+0x148>
 800628c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006290:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006294:	fa93 f3a3 	rbit	r3, r3
 8006298:	647b      	str	r3, [r7, #68]	; 0x44
 800629a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800629e:	643b      	str	r3, [r7, #64]	; 0x40
 80062a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a2:	fa93 f3a3 	rbit	r3, r3
 80062a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062a8:	4b46      	ldr	r3, [pc, #280]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80062b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062b4:	fa92 f2a2 	rbit	r2, r2
 80062b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80062ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062bc:	fab2 f282 	clz	r2, r2
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	f042 0220 	orr.w	r2, r2, #32
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	f002 021f 	and.w	r2, r2, #31
 80062cc:	2101      	movs	r1, #1
 80062ce:	fa01 f202 	lsl.w	r2, r1, r2
 80062d2:	4013      	ands	r3, r2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d13a      	bne.n	800634e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0b2      	b.n	8006442 <HAL_RCC_ClockConfig+0x2de>
 80062dc:	2302      	movs	r3, #2
 80062de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e2:	fa93 f3a3 	rbit	r3, r3
 80062e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80062e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ea:	fab3 f383 	clz	r3, r3
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	095b      	lsrs	r3, r3, #5
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	f043 0301 	orr.w	r3, r3, #1
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d102      	bne.n	8006304 <HAL_RCC_ClockConfig+0x1a0>
 80062fe:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	e00d      	b.n	8006320 <HAL_RCC_ClockConfig+0x1bc>
 8006304:	2302      	movs	r3, #2
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	fa93 f3a3 	rbit	r3, r3
 800630e:	627b      	str	r3, [r7, #36]	; 0x24
 8006310:	2302      	movs	r3, #2
 8006312:	623b      	str	r3, [r7, #32]
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	fa93 f3a3 	rbit	r3, r3
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2202      	movs	r2, #2
 8006322:	61ba      	str	r2, [r7, #24]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	fa92 f2a2 	rbit	r2, r2
 800632a:	617a      	str	r2, [r7, #20]
  return result;
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	fab2 f282 	clz	r2, r2
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	f042 0220 	orr.w	r2, r2, #32
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	f002 021f 	and.w	r2, r2, #31
 800633e:	2101      	movs	r1, #1
 8006340:	fa01 f202 	lsl.w	r2, r1, r2
 8006344:	4013      	ands	r3, r2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e079      	b.n	8006442 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800634e:	4b1d      	ldr	r3, [pc, #116]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f023 0203 	bic.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	491a      	ldr	r1, [pc, #104]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 800635c:	4313      	orrs	r3, r2
 800635e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006360:	f7fc f91a 	bl	8002598 <HAL_GetTick>
 8006364:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	e00a      	b.n	800637e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006368:	f7fc f916 	bl	8002598 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	; 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e061      	b.n	8006442 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637e:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <HAL_RCC_ClockConfig+0x260>)
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	f003 020c 	and.w	r2, r3, #12
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	429a      	cmp	r2, r3
 800638e:	d1eb      	bne.n	8006368 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <HAL_RCC_ClockConfig+0x25c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d214      	bcs.n	80063c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639e:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <HAL_RCC_ClockConfig+0x25c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f023 0207 	bic.w	r2, r3, #7
 80063a6:	4906      	ldr	r1, [pc, #24]	; (80063c0 <HAL_RCC_ClockConfig+0x25c>)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ae:	4b04      	ldr	r3, [pc, #16]	; (80063c0 <HAL_RCC_ClockConfig+0x25c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e040      	b.n	8006442 <HAL_RCC_ClockConfig+0x2de>
 80063c0:	40022000 	.word	0x40022000
 80063c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d008      	beq.n	80063e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d4:	4b1d      	ldr	r3, [pc, #116]	; (800644c <HAL_RCC_ClockConfig+0x2e8>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	491a      	ldr	r1, [pc, #104]	; (800644c <HAL_RCC_ClockConfig+0x2e8>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f2:	4b16      	ldr	r3, [pc, #88]	; (800644c <HAL_RCC_ClockConfig+0x2e8>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4912      	ldr	r1, [pc, #72]	; (800644c <HAL_RCC_ClockConfig+0x2e8>)
 8006402:	4313      	orrs	r3, r2
 8006404:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006406:	f000 f829 	bl	800645c <HAL_RCC_GetSysClockFreq>
 800640a:	4601      	mov	r1, r0
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <HAL_RCC_ClockConfig+0x2e8>)
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006414:	22f0      	movs	r2, #240	; 0xf0
 8006416:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	fa92 f2a2 	rbit	r2, r2
 800641e:	60fa      	str	r2, [r7, #12]
  return result;
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	fab2 f282 	clz	r2, r2
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	40d3      	lsrs	r3, r2
 800642a:	4a09      	ldr	r2, [pc, #36]	; (8006450 <HAL_RCC_ClockConfig+0x2ec>)
 800642c:	5cd3      	ldrb	r3, [r2, r3]
 800642e:	fa21 f303 	lsr.w	r3, r1, r3
 8006432:	4a08      	ldr	r2, [pc, #32]	; (8006454 <HAL_RCC_ClockConfig+0x2f0>)
 8006434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006436:	4b08      	ldr	r3, [pc, #32]	; (8006458 <HAL_RCC_ClockConfig+0x2f4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f7fc f868 	bl	8002510 <HAL_InitTick>
  
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3778      	adds	r7, #120	; 0x78
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	40021000 	.word	0x40021000
 8006450:	0800ab98 	.word	0x0800ab98
 8006454:	20000000 	.word	0x20000000
 8006458:	20000004 	.word	0x20000004

0800645c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800645c:	b480      	push	{r7}
 800645e:	b08b      	sub	sp, #44	; 0x2c
 8006460:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	61fb      	str	r3, [r7, #28]
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	; 0x24
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006476:	4b2a      	ldr	r3, [pc, #168]	; (8006520 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f003 030c 	and.w	r3, r3, #12
 8006482:	2b04      	cmp	r3, #4
 8006484:	d002      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x30>
 8006486:	2b08      	cmp	r3, #8
 8006488:	d003      	beq.n	8006492 <HAL_RCC_GetSysClockFreq+0x36>
 800648a:	e03f      	b.n	800650c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800648c:	4b25      	ldr	r3, [pc, #148]	; (8006524 <HAL_RCC_GetSysClockFreq+0xc8>)
 800648e:	623b      	str	r3, [r7, #32]
      break;
 8006490:	e03f      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006498:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800649c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	fa92 f2a2 	rbit	r2, r2
 80064a4:	607a      	str	r2, [r7, #4]
  return result;
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	fab2 f282 	clz	r2, r2
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	40d3      	lsrs	r3, r2
 80064b0:	4a1d      	ldr	r2, [pc, #116]	; (8006528 <HAL_RCC_GetSysClockFreq+0xcc>)
 80064b2:	5cd3      	ldrb	r3, [r2, r3]
 80064b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80064b6:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <HAL_RCC_GetSysClockFreq+0xc4>)
 80064b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	220f      	movs	r2, #15
 80064c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	fa92 f2a2 	rbit	r2, r2
 80064c8:	60fa      	str	r2, [r7, #12]
  return result;
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	fab2 f282 	clz	r2, r2
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	40d3      	lsrs	r3, r2
 80064d4:	4a15      	ldr	r2, [pc, #84]	; (800652c <HAL_RCC_GetSysClockFreq+0xd0>)
 80064d6:	5cd3      	ldrb	r3, [r2, r3]
 80064d8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064e4:	4a0f      	ldr	r2, [pc, #60]	; (8006524 <HAL_RCC_GetSysClockFreq+0xc8>)
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
 80064f4:	e007      	b.n	8006506 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80064f6:	4a0b      	ldr	r2, [pc, #44]	; (8006524 <HAL_RCC_GetSysClockFreq+0xc8>)
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	fb02 f303 	mul.w	r3, r2, r3
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	623b      	str	r3, [r7, #32]
      break;
 800650a:	e002      	b.n	8006512 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800650c:	4b05      	ldr	r3, [pc, #20]	; (8006524 <HAL_RCC_GetSysClockFreq+0xc8>)
 800650e:	623b      	str	r3, [r7, #32]
      break;
 8006510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006512:	6a3b      	ldr	r3, [r7, #32]
}
 8006514:	4618      	mov	r0, r3
 8006516:	372c      	adds	r7, #44	; 0x2c
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	40021000 	.word	0x40021000
 8006524:	007a1200 	.word	0x007a1200
 8006528:	0800abb0 	.word	0x0800abb0
 800652c:	0800abc0 	.word	0x0800abc0

08006530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006534:	4b03      	ldr	r3, [pc, #12]	; (8006544 <HAL_RCC_GetHCLKFreq+0x14>)
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20000000 	.word	0x20000000

08006548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800654e:	f7ff ffef 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006552:	4601      	mov	r1, r0
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800655c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006560:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	fa92 f2a2 	rbit	r2, r2
 8006568:	603a      	str	r2, [r7, #0]
  return result;
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	fab2 f282 	clz	r2, r2
 8006570:	b2d2      	uxtb	r2, r2
 8006572:	40d3      	lsrs	r3, r2
 8006574:	4a04      	ldr	r2, [pc, #16]	; (8006588 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006576:	5cd3      	ldrb	r3, [r2, r3]
 8006578:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800657c:	4618      	mov	r0, r3
 800657e:	3708      	adds	r7, #8
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40021000 	.word	0x40021000
 8006588:	0800aba8 	.word	0x0800aba8

0800658c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006592:	f7ff ffcd 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006596:	4601      	mov	r1, r0
 8006598:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80065a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80065a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	fa92 f2a2 	rbit	r2, r2
 80065ac:	603a      	str	r2, [r7, #0]
  return result;
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	fab2 f282 	clz	r2, r2
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	40d3      	lsrs	r3, r2
 80065b8:	4a04      	ldr	r2, [pc, #16]	; (80065cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80065ba:	5cd3      	ldrb	r3, [r2, r3]
 80065bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80065c0:	4618      	mov	r0, r3
 80065c2:	3708      	adds	r7, #8
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40021000 	.word	0x40021000
 80065cc:	0800aba8 	.word	0x0800aba8

080065d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b092      	sub	sp, #72	; 0x48
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80065e0:	2300      	movs	r3, #0
 80065e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 80d4 	beq.w	800679c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065f4:	4b4e      	ldr	r3, [pc, #312]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10e      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006600:	4b4b      	ldr	r3, [pc, #300]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	4a4a      	ldr	r2, [pc, #296]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800660a:	61d3      	str	r3, [r2, #28]
 800660c:	4b48      	ldr	r3, [pc, #288]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006618:	2301      	movs	r3, #1
 800661a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661e:	4b45      	ldr	r3, [pc, #276]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d118      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800662a:	4b42      	ldr	r3, [pc, #264]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a41      	ldr	r2, [pc, #260]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006634:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006636:	f7fb ffaf 	bl	8002598 <HAL_GetTick>
 800663a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	e008      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663e:	f7fb ffab 	bl	8002598 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b64      	cmp	r3, #100	; 0x64
 800664a:	d901      	bls.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e1d6      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006650:	4b38      	ldr	r3, [pc, #224]	; (8006734 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0f0      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800665c:	4b34      	ldr	r3, [pc, #208]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 8084 	beq.w	8006776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006676:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006678:	429a      	cmp	r2, r3
 800667a:	d07c      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800667c:	4b2c      	ldr	r3, [pc, #176]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800668a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	fa93 f3a3 	rbit	r3, r3
 8006692:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006696:	fab3 f383 	clz	r3, r3
 800669a:	b2db      	uxtb	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	4b26      	ldr	r3, [pc, #152]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066a0:	4413      	add	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	461a      	mov	r2, r3
 80066a6:	2301      	movs	r3, #1
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b2:	fa93 f3a3 	rbit	r3, r3
 80066b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066ba:	fab3 f383 	clz	r3, r3
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	461a      	mov	r2, r3
 80066c2:	4b1d      	ldr	r3, [pc, #116]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	461a      	mov	r2, r3
 80066ca:	2300      	movs	r3, #0
 80066cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066ce:	4a18      	ldr	r2, [pc, #96]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d04b      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066de:	f7fb ff5b 	bl	8002598 <HAL_GetTick>
 80066e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e4:	e00a      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e6:	f7fb ff57 	bl	8002598 <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d901      	bls.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e180      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066fc:	2302      	movs	r3, #2
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	fa93 f3a3 	rbit	r3, r3
 8006706:	627b      	str	r3, [r7, #36]	; 0x24
 8006708:	2302      	movs	r3, #2
 800670a:	623b      	str	r3, [r7, #32]
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	fa93 f3a3 	rbit	r3, r3
 8006712:	61fb      	str	r3, [r7, #28]
  return result;
 8006714:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006716:	fab3 f383 	clz	r3, r3
 800671a:	b2db      	uxtb	r3, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	b2db      	uxtb	r3, r3
 8006720:	f043 0302 	orr.w	r3, r3, #2
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d108      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800672a:	4b01      	ldr	r3, [pc, #4]	; (8006730 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	e00d      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006730:	40021000 	.word	0x40021000
 8006734:	40007000 	.word	0x40007000
 8006738:	10908100 	.word	0x10908100
 800673c:	2302      	movs	r3, #2
 800673e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	fa93 f3a3 	rbit	r3, r3
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	4b9a      	ldr	r3, [pc, #616]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800674a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674c:	2202      	movs	r2, #2
 800674e:	613a      	str	r2, [r7, #16]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	fa92 f2a2 	rbit	r2, r2
 8006756:	60fa      	str	r2, [r7, #12]
  return result;
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	fab2 f282 	clz	r2, r2
 800675e:	b2d2      	uxtb	r2, r2
 8006760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006764:	b2d2      	uxtb	r2, r2
 8006766:	f002 021f 	and.w	r2, r2, #31
 800676a:	2101      	movs	r1, #1
 800676c:	fa01 f202 	lsl.w	r2, r1, r2
 8006770:	4013      	ands	r3, r2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0b7      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006776:	4b8f      	ldr	r3, [pc, #572]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	498c      	ldr	r1, [pc, #560]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006784:	4313      	orrs	r3, r2
 8006786:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800678c:	2b01      	cmp	r3, #1
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006790:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	4a87      	ldr	r2, [pc, #540]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800679a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067a8:	4b82      	ldr	r3, [pc, #520]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	f023 0203 	bic.w	r2, r3, #3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	497f      	ldr	r1, [pc, #508]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d008      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067c6:	4b7b      	ldr	r3, [pc, #492]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	4978      	ldr	r1, [pc, #480]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067e4:	4b73      	ldr	r3, [pc, #460]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	4970      	ldr	r1, [pc, #448]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0320 	and.w	r3, r3, #32
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d008      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006802:	4b6c      	ldr	r3, [pc, #432]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	f023 0210 	bic.w	r2, r3, #16
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	4969      	ldr	r1, [pc, #420]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006810:	4313      	orrs	r3, r2
 8006812:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006820:	4b64      	ldr	r3, [pc, #400]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682c:	4961      	ldr	r1, [pc, #388]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800682e:	4313      	orrs	r3, r2
 8006830:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800683a:	2b00      	cmp	r3, #0
 800683c:	d008      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800683e:	4b5d      	ldr	r3, [pc, #372]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006842:	f023 0220 	bic.w	r2, r3, #32
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	495a      	ldr	r1, [pc, #360]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800684c:	4313      	orrs	r3, r2
 800684e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800685c:	4b55      	ldr	r3, [pc, #340]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	4952      	ldr	r1, [pc, #328]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800686a:	4313      	orrs	r3, r2
 800686c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0308 	and.w	r3, r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800687a:	4b4e      	ldr	r3, [pc, #312]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	494b      	ldr	r1, [pc, #300]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006888:	4313      	orrs	r3, r2
 800688a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006898:	4b46      	ldr	r3, [pc, #280]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800689a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	4943      	ldr	r1, [pc, #268]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d008      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80068b6:	4b3f      	ldr	r3, [pc, #252]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	493c      	ldr	r1, [pc, #240]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d008      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80068d4:	4b37      	ldr	r3, [pc, #220]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e0:	4934      	ldr	r1, [pc, #208]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d008      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80068f2:	4b30      	ldr	r3, [pc, #192]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fe:	492d      	ldr	r1, [pc, #180]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006900:	4313      	orrs	r3, r2
 8006902:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d008      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691c:	4925      	ldr	r1, [pc, #148]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800691e:	4313      	orrs	r3, r2
 8006920:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d008      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800692e:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006932:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	491e      	ldr	r1, [pc, #120]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800693c:	4313      	orrs	r3, r2
 800693e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800694c:	4b19      	ldr	r3, [pc, #100]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006958:	4916      	ldr	r1, [pc, #88]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800695a:	4313      	orrs	r3, r2
 800695c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d008      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	490f      	ldr	r1, [pc, #60]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006978:	4313      	orrs	r3, r2
 800697a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006994:	4907      	ldr	r1, [pc, #28]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006996:	4313      	orrs	r3, r2
 8006998:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00c      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80069a6:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	e002      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80069b2:	bf00      	nop
 80069b4:	40021000 	.word	0x40021000
 80069b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ba:	4913      	ldr	r1, [pc, #76]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d8:	490b      	ldr	r1, [pc, #44]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069f6:	4904      	ldr	r1, [pc, #16]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3748      	adds	r7, #72	; 0x48
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	40021000 	.word	0x40021000

08006a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e040      	b.n	8006aa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fb fbc0 	bl	80021b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2224      	movs	r2, #36	; 0x24
 8006a38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f8b6 	bl	8006bbc <UART_SetConfig>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e022      	b.n	8006aa0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fa7e 	bl	8006f64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fb05 	bl	80070a8 <UART_CheckIdleState>
 8006a9e:	4603      	mov	r3, r0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	; 0x28
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006abc:	2b20      	cmp	r3, #32
 8006abe:	d178      	bne.n	8006bb2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <HAL_UART_Transmit+0x24>
 8006ac6:	88fb      	ldrh	r3, [r7, #6]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e071      	b.n	8006bb4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2221      	movs	r2, #33	; 0x21
 8006adc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ade:	f7fb fd5b 	bl	8002598 <HAL_GetTick>
 8006ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	88fa      	ldrh	r2, [r7, #6]
 8006ae8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	88fa      	ldrh	r2, [r7, #6]
 8006af0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afc:	d108      	bne.n	8006b10 <HAL_UART_Transmit+0x68>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d104      	bne.n	8006b10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	e003      	b.n	8006b18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b18:	e030      	b.n	8006b7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	2200      	movs	r2, #0
 8006b22:	2180      	movs	r1, #128	; 0x80
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fb67 	bl	80071f8 <UART_WaitOnFlagUntilTimeout>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2220      	movs	r2, #32
 8006b34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006b36:	2303      	movs	r3, #3
 8006b38:	e03c      	b.n	8006bb4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10b      	bne.n	8006b58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	881a      	ldrh	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	3302      	adds	r3, #2
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	e008      	b.n	8006b6a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	781a      	ldrb	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	b292      	uxth	r2, r2
 8006b62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	3301      	adds	r3, #1
 8006b68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1c8      	bne.n	8006b1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2140      	movs	r1, #64	; 0x40
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 fb30 	bl	80071f8 <UART_WaitOnFlagUntilTimeout>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2220      	movs	r2, #32
 8006ba2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e005      	b.n	8006bb4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2220      	movs	r2, #32
 8006bac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e000      	b.n	8006bb4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006bb2:	2302      	movs	r3, #2
  }
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3720      	adds	r7, #32
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689a      	ldr	r2, [r3, #8]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	431a      	orrs	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	69db      	ldr	r3, [r3, #28]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	4b92      	ldr	r3, [pc, #584]	; (8006e30 <UART_SetConfig+0x274>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	6812      	ldr	r2, [r2, #0]
 8006bee:	6979      	ldr	r1, [r7, #20]
 8006bf0:	430b      	orrs	r3, r1
 8006bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a80      	ldr	r2, [pc, #512]	; (8006e34 <UART_SetConfig+0x278>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d120      	bne.n	8006c7a <UART_SetConfig+0xbe>
 8006c38:	4b7f      	ldr	r3, [pc, #508]	; (8006e38 <UART_SetConfig+0x27c>)
 8006c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d817      	bhi.n	8006c74 <UART_SetConfig+0xb8>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <UART_SetConfig+0x90>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	08006c69 	.word	0x08006c69
 8006c54:	08006c6f 	.word	0x08006c6f
 8006c58:	08006c63 	.word	0x08006c63
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e0b5      	b.n	8006dce <UART_SetConfig+0x212>
 8006c62:	2302      	movs	r3, #2
 8006c64:	77fb      	strb	r3, [r7, #31]
 8006c66:	e0b2      	b.n	8006dce <UART_SetConfig+0x212>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e0af      	b.n	8006dce <UART_SetConfig+0x212>
 8006c6e:	2308      	movs	r3, #8
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e0ac      	b.n	8006dce <UART_SetConfig+0x212>
 8006c74:	2310      	movs	r3, #16
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e0a9      	b.n	8006dce <UART_SetConfig+0x212>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a6f      	ldr	r2, [pc, #444]	; (8006e3c <UART_SetConfig+0x280>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d124      	bne.n	8006cce <UART_SetConfig+0x112>
 8006c84:	4b6c      	ldr	r3, [pc, #432]	; (8006e38 <UART_SetConfig+0x27c>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c90:	d011      	beq.n	8006cb6 <UART_SetConfig+0xfa>
 8006c92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c96:	d817      	bhi.n	8006cc8 <UART_SetConfig+0x10c>
 8006c98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c9c:	d011      	beq.n	8006cc2 <UART_SetConfig+0x106>
 8006c9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ca2:	d811      	bhi.n	8006cc8 <UART_SetConfig+0x10c>
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <UART_SetConfig+0xf4>
 8006ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cac:	d006      	beq.n	8006cbc <UART_SetConfig+0x100>
 8006cae:	e00b      	b.n	8006cc8 <UART_SetConfig+0x10c>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	77fb      	strb	r3, [r7, #31]
 8006cb4:	e08b      	b.n	8006dce <UART_SetConfig+0x212>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	77fb      	strb	r3, [r7, #31]
 8006cba:	e088      	b.n	8006dce <UART_SetConfig+0x212>
 8006cbc:	2304      	movs	r3, #4
 8006cbe:	77fb      	strb	r3, [r7, #31]
 8006cc0:	e085      	b.n	8006dce <UART_SetConfig+0x212>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	77fb      	strb	r3, [r7, #31]
 8006cc6:	e082      	b.n	8006dce <UART_SetConfig+0x212>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	77fb      	strb	r3, [r7, #31]
 8006ccc:	e07f      	b.n	8006dce <UART_SetConfig+0x212>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a5b      	ldr	r2, [pc, #364]	; (8006e40 <UART_SetConfig+0x284>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d124      	bne.n	8006d22 <UART_SetConfig+0x166>
 8006cd8:	4b57      	ldr	r3, [pc, #348]	; (8006e38 <UART_SetConfig+0x27c>)
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ce0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006ce4:	d011      	beq.n	8006d0a <UART_SetConfig+0x14e>
 8006ce6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006cea:	d817      	bhi.n	8006d1c <UART_SetConfig+0x160>
 8006cec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cf0:	d011      	beq.n	8006d16 <UART_SetConfig+0x15a>
 8006cf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cf6:	d811      	bhi.n	8006d1c <UART_SetConfig+0x160>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d003      	beq.n	8006d04 <UART_SetConfig+0x148>
 8006cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d00:	d006      	beq.n	8006d10 <UART_SetConfig+0x154>
 8006d02:	e00b      	b.n	8006d1c <UART_SetConfig+0x160>
 8006d04:	2300      	movs	r3, #0
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e061      	b.n	8006dce <UART_SetConfig+0x212>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	77fb      	strb	r3, [r7, #31]
 8006d0e:	e05e      	b.n	8006dce <UART_SetConfig+0x212>
 8006d10:	2304      	movs	r3, #4
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e05b      	b.n	8006dce <UART_SetConfig+0x212>
 8006d16:	2308      	movs	r3, #8
 8006d18:	77fb      	strb	r3, [r7, #31]
 8006d1a:	e058      	b.n	8006dce <UART_SetConfig+0x212>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	77fb      	strb	r3, [r7, #31]
 8006d20:	e055      	b.n	8006dce <UART_SetConfig+0x212>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a47      	ldr	r2, [pc, #284]	; (8006e44 <UART_SetConfig+0x288>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d124      	bne.n	8006d76 <UART_SetConfig+0x1ba>
 8006d2c:	4b42      	ldr	r3, [pc, #264]	; (8006e38 <UART_SetConfig+0x27c>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d38:	d011      	beq.n	8006d5e <UART_SetConfig+0x1a2>
 8006d3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d3e:	d817      	bhi.n	8006d70 <UART_SetConfig+0x1b4>
 8006d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d44:	d011      	beq.n	8006d6a <UART_SetConfig+0x1ae>
 8006d46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d4a:	d811      	bhi.n	8006d70 <UART_SetConfig+0x1b4>
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <UART_SetConfig+0x19c>
 8006d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d54:	d006      	beq.n	8006d64 <UART_SetConfig+0x1a8>
 8006d56:	e00b      	b.n	8006d70 <UART_SetConfig+0x1b4>
 8006d58:	2300      	movs	r3, #0
 8006d5a:	77fb      	strb	r3, [r7, #31]
 8006d5c:	e037      	b.n	8006dce <UART_SetConfig+0x212>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	77fb      	strb	r3, [r7, #31]
 8006d62:	e034      	b.n	8006dce <UART_SetConfig+0x212>
 8006d64:	2304      	movs	r3, #4
 8006d66:	77fb      	strb	r3, [r7, #31]
 8006d68:	e031      	b.n	8006dce <UART_SetConfig+0x212>
 8006d6a:	2308      	movs	r3, #8
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e02e      	b.n	8006dce <UART_SetConfig+0x212>
 8006d70:	2310      	movs	r3, #16
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e02b      	b.n	8006dce <UART_SetConfig+0x212>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a33      	ldr	r2, [pc, #204]	; (8006e48 <UART_SetConfig+0x28c>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d124      	bne.n	8006dca <UART_SetConfig+0x20e>
 8006d80:	4b2d      	ldr	r3, [pc, #180]	; (8006e38 <UART_SetConfig+0x27c>)
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006d88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d8c:	d011      	beq.n	8006db2 <UART_SetConfig+0x1f6>
 8006d8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006d92:	d817      	bhi.n	8006dc4 <UART_SetConfig+0x208>
 8006d94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d98:	d011      	beq.n	8006dbe <UART_SetConfig+0x202>
 8006d9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d9e:	d811      	bhi.n	8006dc4 <UART_SetConfig+0x208>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <UART_SetConfig+0x1f0>
 8006da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006da8:	d006      	beq.n	8006db8 <UART_SetConfig+0x1fc>
 8006daa:	e00b      	b.n	8006dc4 <UART_SetConfig+0x208>
 8006dac:	2300      	movs	r3, #0
 8006dae:	77fb      	strb	r3, [r7, #31]
 8006db0:	e00d      	b.n	8006dce <UART_SetConfig+0x212>
 8006db2:	2302      	movs	r3, #2
 8006db4:	77fb      	strb	r3, [r7, #31]
 8006db6:	e00a      	b.n	8006dce <UART_SetConfig+0x212>
 8006db8:	2304      	movs	r3, #4
 8006dba:	77fb      	strb	r3, [r7, #31]
 8006dbc:	e007      	b.n	8006dce <UART_SetConfig+0x212>
 8006dbe:	2308      	movs	r3, #8
 8006dc0:	77fb      	strb	r3, [r7, #31]
 8006dc2:	e004      	b.n	8006dce <UART_SetConfig+0x212>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	77fb      	strb	r3, [r7, #31]
 8006dc8:	e001      	b.n	8006dce <UART_SetConfig+0x212>
 8006dca:	2310      	movs	r3, #16
 8006dcc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d16b      	bne.n	8006eb0 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006dd8:	7ffb      	ldrb	r3, [r7, #31]
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d838      	bhi.n	8006e50 <UART_SetConfig+0x294>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <UART_SetConfig+0x228>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e09 	.word	0x08006e09
 8006de8:	08006e11 	.word	0x08006e11
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	08006e51 	.word	0x08006e51
 8006df4:	08006e1f 	.word	0x08006e1f
 8006df8:	08006e51 	.word	0x08006e51
 8006dfc:	08006e51 	.word	0x08006e51
 8006e00:	08006e51 	.word	0x08006e51
 8006e04:	08006e27 	.word	0x08006e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e08:	f7ff fb9e 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 8006e0c:	61b8      	str	r0, [r7, #24]
        break;
 8006e0e:	e024      	b.n	8006e5a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e10:	f7ff fbbc 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8006e14:	61b8      	str	r0, [r7, #24]
        break;
 8006e16:	e020      	b.n	8006e5a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <UART_SetConfig+0x290>)
 8006e1a:	61bb      	str	r3, [r7, #24]
        break;
 8006e1c:	e01d      	b.n	8006e5a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e1e:	f7ff fb1d 	bl	800645c <HAL_RCC_GetSysClockFreq>
 8006e22:	61b8      	str	r0, [r7, #24]
        break;
 8006e24:	e019      	b.n	8006e5a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e2a:	61bb      	str	r3, [r7, #24]
        break;
 8006e2c:	e015      	b.n	8006e5a <UART_SetConfig+0x29e>
 8006e2e:	bf00      	nop
 8006e30:	efff69f3 	.word	0xefff69f3
 8006e34:	40013800 	.word	0x40013800
 8006e38:	40021000 	.word	0x40021000
 8006e3c:	40004400 	.word	0x40004400
 8006e40:	40004800 	.word	0x40004800
 8006e44:	40004c00 	.word	0x40004c00
 8006e48:	40005000 	.word	0x40005000
 8006e4c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	77bb      	strb	r3, [r7, #30]
        break;
 8006e58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d073      	beq.n	8006f48 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	005a      	lsls	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	441a      	add	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b0f      	cmp	r3, #15
 8006e7a:	d916      	bls.n	8006eaa <UART_SetConfig+0x2ee>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e82:	d212      	bcs.n	8006eaa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	f023 030f 	bic.w	r3, r3, #15
 8006e8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	085b      	lsrs	r3, r3, #1
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	89fb      	ldrh	r3, [r7, #14]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	89fa      	ldrh	r2, [r7, #14]
 8006ea6:	60da      	str	r2, [r3, #12]
 8006ea8:	e04e      	b.n	8006f48 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	77bb      	strb	r3, [r7, #30]
 8006eae:	e04b      	b.n	8006f48 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eb0:	7ffb      	ldrb	r3, [r7, #31]
 8006eb2:	2b08      	cmp	r3, #8
 8006eb4:	d827      	bhi.n	8006f06 <UART_SetConfig+0x34a>
 8006eb6:	a201      	add	r2, pc, #4	; (adr r2, 8006ebc <UART_SetConfig+0x300>)
 8006eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebc:	08006ee1 	.word	0x08006ee1
 8006ec0:	08006ee9 	.word	0x08006ee9
 8006ec4:	08006ef1 	.word	0x08006ef1
 8006ec8:	08006f07 	.word	0x08006f07
 8006ecc:	08006ef7 	.word	0x08006ef7
 8006ed0:	08006f07 	.word	0x08006f07
 8006ed4:	08006f07 	.word	0x08006f07
 8006ed8:	08006f07 	.word	0x08006f07
 8006edc:	08006eff 	.word	0x08006eff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ee0:	f7ff fb32 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 8006ee4:	61b8      	str	r0, [r7, #24]
        break;
 8006ee6:	e013      	b.n	8006f10 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ee8:	f7ff fb50 	bl	800658c <HAL_RCC_GetPCLK2Freq>
 8006eec:	61b8      	str	r0, [r7, #24]
        break;
 8006eee:	e00f      	b.n	8006f10 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef0:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <UART_SetConfig+0x3a4>)
 8006ef2:	61bb      	str	r3, [r7, #24]
        break;
 8006ef4:	e00c      	b.n	8006f10 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ef6:	f7ff fab1 	bl	800645c <HAL_RCC_GetSysClockFreq>
 8006efa:	61b8      	str	r0, [r7, #24]
        break;
 8006efc:	e008      	b.n	8006f10 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f02:	61bb      	str	r3, [r7, #24]
        break;
 8006f04:	e004      	b.n	8006f10 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006f06:	2300      	movs	r3, #0
 8006f08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f0e:	bf00      	nop
    }

    if (pclk != 0U)
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d018      	beq.n	8006f48 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	085a      	lsrs	r2, r3, #1
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	441a      	add	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	2b0f      	cmp	r3, #15
 8006f2e:	d909      	bls.n	8006f44 <UART_SetConfig+0x388>
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f36:	d205      	bcs.n	8006f44 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60da      	str	r2, [r3, #12]
 8006f42:	e001      	b.n	8006f48 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006f54:	7fbb      	ldrb	r3, [r7, #30]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	007a1200 	.word	0x007a1200

08006f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd6:	f003 0308 	and.w	r3, r3, #8
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01a      	beq.n	800707a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007062:	d10a      	bne.n	800707a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	605a      	str	r2, [r3, #4]
  }
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b098      	sub	sp, #96	; 0x60
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b8:	f7fb fa6e 	bl	8002598 <HAL_GetTick>
 80070bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d12e      	bne.n	800712a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d4:	2200      	movs	r2, #0
 80070d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f88c 	bl	80071f8 <UART_WaitOnFlagUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d021      	beq.n	800712a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070fa:	653b      	str	r3, [r7, #80]	; 0x50
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007104:	647b      	str	r3, [r7, #68]	; 0x44
 8007106:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800710a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007126:	2303      	movs	r3, #3
 8007128:	e062      	b.n	80071f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b04      	cmp	r3, #4
 8007136:	d149      	bne.n	80071cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007138:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007140:	2200      	movs	r2, #0
 8007142:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f856 	bl	80071f8 <UART_WaitOnFlagUntilTimeout>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d03c      	beq.n	80071cc <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	623b      	str	r3, [r7, #32]
   return(result);
 8007160:	6a3b      	ldr	r3, [r7, #32]
 8007162:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007170:	633b      	str	r3, [r7, #48]	; 0x30
 8007172:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007178:	e841 2300 	strex	r3, r2, [r1]
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e6      	bne.n	8007152 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3308      	adds	r3, #8
 800718a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	60fb      	str	r3, [r7, #12]
   return(result);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0301 	bic.w	r3, r3, #1
 800719a:	64bb      	str	r3, [r7, #72]	; 0x48
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3308      	adds	r3, #8
 80071a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a4:	61fa      	str	r2, [r7, #28]
 80071a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	69b9      	ldr	r1, [r7, #24]
 80071aa:	69fa      	ldr	r2, [r7, #28]
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	617b      	str	r3, [r7, #20]
   return(result);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e5      	bne.n	8007184 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e011      	b.n	80071f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2220      	movs	r2, #32
 80071d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3758      	adds	r7, #88	; 0x58
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007208:	e049      	b.n	800729e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d045      	beq.n	800729e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007212:	f7fb f9c1 	bl	8002598 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	429a      	cmp	r2, r3
 8007220:	d302      	bcc.n	8007228 <UART_WaitOnFlagUntilTimeout+0x30>
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e048      	b.n	80072be <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	2b00      	cmp	r3, #0
 8007238:	d031      	beq.n	800729e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	f003 0308 	and.w	r3, r3, #8
 8007244:	2b08      	cmp	r3, #8
 8007246:	d110      	bne.n	800726a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2208      	movs	r2, #8
 800724e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f838 	bl	80072c6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2208      	movs	r2, #8
 800725a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e029      	b.n	80072be <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007278:	d111      	bne.n	800729e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f81e 	bl	80072c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2220      	movs	r2, #32
 800728e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e00f      	b.n	80072be <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4013      	ands	r3, r2
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	bf0c      	ite	eq
 80072ae:	2301      	moveq	r3, #1
 80072b0:	2300      	movne	r3, #0
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	461a      	mov	r2, r3
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d0a6      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b095      	sub	sp, #84	; 0x54
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ec:	643b      	str	r3, [r7, #64]	; 0x40
 80072ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3308      	adds	r3, #8
 8007306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f023 0301 	bic.w	r3, r3, #1
 8007316:	64bb      	str	r3, [r7, #72]	; 0x48
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3308      	adds	r3, #8
 800731e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007320:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007338:	2b01      	cmp	r3, #1
 800733a:	d118      	bne.n	800736e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	e853 3f00 	ldrex	r3, [r3]
 8007348:	60bb      	str	r3, [r7, #8]
   return(result);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f023 0310 	bic.w	r3, r3, #16
 8007350:	647b      	str	r3, [r7, #68]	; 0x44
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735a:	61bb      	str	r3, [r7, #24]
 800735c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735e:	6979      	ldr	r1, [r7, #20]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	e841 2300 	strex	r3, r2, [r1]
 8007366:	613b      	str	r3, [r7, #16]
   return(result);
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1e6      	bne.n	800733c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2220      	movs	r2, #32
 8007372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007382:	bf00      	nop
 8007384:	3754      	adds	r7, #84	; 0x54
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
	...

08007390 <_ZN4blib6ButtonC1Ev>:
#include "Button.h"
#include "Monitor.h"

namespace blib
{
    Button::Button()
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4618      	mov	r0, r3
 800739c:	f000 f85a 	bl	8007454 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 80073a0:	4a03      	ldr	r2, [pc, #12]	; (80073b0 <_ZN4blib6ButtonC1Ev+0x20>)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	601a      	str	r2, [r3, #0]
    {

    }
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	0800abd8 	.word	0x0800abd8

080073b4 <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	4a05      	ldr	r2, [pc, #20]	; (80073d4 <_ZN4blib6ButtonD1Ev+0x20>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f855 	bl	8007474 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
    {

    }
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	0800abd8 	.word	0x0800abd8

080073d8 <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
    }
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff ffe7 	bl	80073b4 <_ZN4blib6ButtonD1Ev>
 80073e6:	2108      	movs	r1, #8
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f9e2 	bl	80077b2 <_ZdlPvj>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	605a      	str	r2, [r3, #4]
    }
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <_ZN4blib6Button12handleSignalEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
        return mLatestPressedButton;
    }
    void Button::handleSignal()
    {
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
        auto &monitor = Monitor::getInstance();
 800741c:	f7fa fd92 	bl	8001f44 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 8007420:	60f8      	str	r0, [r7, #12]

        if (monitor.getScreenLevel() == Monitor::ScreenLevel::HOME_SCREEN)
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f7fa f8f7 	bl	8001616 <_ZNK4blib7Monitor14getScreenLevelEv>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	bf0c      	ite	eq
 800742e:	2301      	moveq	r3, #1
 8007430:	2300      	movne	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d004      	beq.n	8007442 <_ZN4blib6Button12handleSignalEv+0x2e>
        {
            monitor.setScreenLevel(Monitor::ScreenLevel::NEXT_1);
 8007438:	2101      	movs	r1, #1
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f7fa f8dd 	bl	80015fa <_ZN4blib7Monitor14setScreenLevelENS0_11ScreenLevelE>
        else if (monitor.getScreenLevel() == Monitor::ScreenLevel::NEXT_1)
        {
//            if ()
        }

    }
 8007440:	e004      	b.n	800744c <_ZN4blib6Button12handleSignalEv+0x38>
        else if (monitor.getScreenLevel() == Monitor::ScreenLevel::NEXT_1)
 8007442:	68f8      	ldr	r0, [r7, #12]
 8007444:	f7fa f8e7 	bl	8001616 <_ZNK4blib7Monitor14getScreenLevelEv>
 8007448:	4603      	mov	r3, r0
 800744a:	2b01      	cmp	r3, #1
    }
 800744c:	bf00      	nop
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
                {
 800745c:	4a04      	ldr	r2, [pc, #16]	; (8007470 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	601a      	str	r2, [r3, #0]
                }
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	0800abe8 	.word	0x0800abe8

08007474 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
                }
 800747c:	4a04      	ldr	r2, [pc, #16]	; (8007490 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	601a      	str	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	0800abe8 	.word	0x0800abe8

08007494 <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
                }
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff ffe9 	bl	8007474 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 80074a2:	2104      	movs	r1, #4
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f984 	bl	80077b2 <_ZdlPvj>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>:
#include "Lcd.h"

namespace blib
{

    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	70fb      	strb	r3, [r7, #3]
            address)
 80074c2:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh+0x38>)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	601a      	str	r2, [r3, #0]
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	609a      	str	r2, [r3, #8]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	78fa      	ldrb	r2, [r7, #3]
 80074d8:	731a      	strb	r2, [r3, #12]
    {
        init();
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 f908 	bl	80076f0 <_ZN4blib3Lcd4initEv>
    }
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	0800abf8 	.word	0x0800abf8

080074f0 <_ZN4blib3LcdD1Ev>:
    Lcd::~Lcd()
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	4a04      	ldr	r2, [pc, #16]	; (800750c <_ZN4blib3LcdD1Ev+0x1c>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	601a      	str	r2, [r3, #0]
    {

    }
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4618      	mov	r0, r3
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	0800abf8 	.word	0x0800abf8

08007510 <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
    }
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff ffe9 	bl	80074f0 <_ZN4blib3LcdD1Ev>
 800751e:	2114      	movs	r1, #20
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f946 	bl	80077b2 <_ZdlPvj>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af02      	add	r7, sp, #8
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
 8007540:	2300      	movs	r3, #0
 8007542:	73bb      	strb	r3, [r7, #14]
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 8007544:	78fb      	ldrb	r3, [r7, #3]
 8007546:	f023 030f 	bic.w	r3, r3, #15
 800754a:	73fb      	strb	r3, [r7, #15]
        dataLow = ((command << 4) & 0xF0);
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	011b      	lsls	r3, r3, #4
 8007550:	73bb      	strb	r3, [r7, #14]
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	f043 030c 	orr.w	r3, r3, #12
 8007558:	b2db      	uxtb	r3, r3
 800755a:	723b      	strb	r3, [r7, #8]
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	f043 0308 	orr.w	r3, r3, #8
 8007562:	b2db      	uxtb	r3, r3
 8007564:	727b      	strb	r3, [r7, #9]
        data[2] = dataLow | 0x0C;
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	f043 030c 	orr.w	r3, r3, #12
 800756c:	b2db      	uxtb	r3, r3
 800756e:	72bb      	strb	r3, [r7, #10]
        data[3] = dataLow | 0x08;
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	f043 0308 	orr.w	r3, r3, #8
 8007576:	b2db      	uxtb	r3, r3
 8007578:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6898      	ldr	r0, [r3, #8]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	7b1b      	ldrb	r3, [r3, #12]
 8007582:	b299      	uxth	r1, r3
 8007584:	f107 0208 	add.w	r2, r7, #8
 8007588:	2364      	movs	r3, #100	; 0x64
 800758a:	9300      	str	r3, [sp, #0]
 800758c:	2304      	movs	r3, #4
 800758e:	f7fd f9f9 	bl	8004984 <HAL_I2C_Master_Transmit>
    }
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 800759a:	b580      	push	{r7, lr}
 800759c:	b086      	sub	sp, #24
 800759e:	af02      	add	r7, sp, #8
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
 80075aa:	2300      	movs	r3, #0
 80075ac:	73bb      	strb	r3, [r7, #14]
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	f023 030f 	bic.w	r3, r3, #15
 80075b4:	73fb      	strb	r3, [r7, #15]
        dataLow = ((data << 4) & 0xF0);
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	011b      	lsls	r3, r3, #4
 80075ba:	73bb      	strb	r3, [r7, #14]
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	f043 030d 	orr.w	r3, r3, #13
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	723b      	strb	r3, [r7, #8]
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	f043 0309 	orr.w	r3, r3, #9
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	727b      	strb	r3, [r7, #9]
        dataBuf[2] = dataLow | 0x0D;
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	f043 030d 	orr.w	r3, r3, #13
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	72bb      	strb	r3, [r7, #10]
        dataBuf[3] = dataLow | 0x09;
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	f043 0309 	orr.w	r3, r3, #9
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6898      	ldr	r0, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7b1b      	ldrb	r3, [r3, #12]
 80075ec:	b299      	uxth	r1, r3
 80075ee:	f107 0208 	add.w	r2, r7, #8
 80075f2:	2364      	movs	r3, #100	; 0x64
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	2304      	movs	r3, #4
 80075f8:	f7fd f9c4 	bl	8004984 <HAL_I2C_Master_Transmit>
    }
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <_ZN4blib3Lcd11displayLineEhhPKc>:
    void Lcd::pushData()
    {

    }
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	607b      	str	r3, [r7, #4]
 800760e:	460b      	mov	r3, r1
 8007610:	72fb      	strb	r3, [r7, #11]
 8007612:	4613      	mov	r3, r2
 8007614:	72bb      	strb	r3, [r7, #10]
        uint8_t command = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	75fb      	strb	r3, [r7, #23]

        switch (mLcdType)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d032      	beq.n	8007688 <_ZN4blib3Lcd11displayLineEhhPKc+0x84>
 8007622:	2b01      	cmp	r3, #1
 8007624:	d000      	beq.n	8007628 <_ZN4blib3Lcd11displayLineEhhPKc+0x24>
                    default:
                        break;
                }
                break;
            default:
                break;
 8007626:	e030      	b.n	800768a <_ZN4blib3Lcd11displayLineEhhPKc+0x86>
                switch (row)
 8007628:	7afb      	ldrb	r3, [r7, #11]
 800762a:	2b03      	cmp	r3, #3
 800762c:	d82a      	bhi.n	8007684 <_ZN4blib3Lcd11displayLineEhhPKc+0x80>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <_ZN4blib3Lcd11displayLineEhhPKc+0x30>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007645 	.word	0x08007645
 8007638:	0800764f 	.word	0x0800764f
 800763c:	08007661 	.word	0x08007661
 8007640:	08007673 	.word	0x08007673
                        command = 0x80 | (col + 0x00);
 8007644:	7abb      	ldrb	r3, [r7, #10]
 8007646:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800764a:	75fb      	strb	r3, [r7, #23]
                        break;
 800764c:	e01b      	b.n	8007686 <_ZN4blib3Lcd11displayLineEhhPKc+0x82>
                        command = 0x80 | (col + 0x40);
 800764e:	7abb      	ldrb	r3, [r7, #10]
 8007650:	3340      	adds	r3, #64	; 0x40
 8007652:	b2db      	uxtb	r3, r3
 8007654:	b25b      	sxtb	r3, r3
 8007656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800765a:	b25b      	sxtb	r3, r3
 800765c:	75fb      	strb	r3, [r7, #23]
                        break;
 800765e:	e012      	b.n	8007686 <_ZN4blib3Lcd11displayLineEhhPKc+0x82>
                        command = 0x80 | (col + 0x14);
 8007660:	7abb      	ldrb	r3, [r7, #10]
 8007662:	3314      	adds	r3, #20
 8007664:	b2db      	uxtb	r3, r3
 8007666:	b25b      	sxtb	r3, r3
 8007668:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800766c:	b25b      	sxtb	r3, r3
 800766e:	75fb      	strb	r3, [r7, #23]
                        break;
 8007670:	e009      	b.n	8007686 <_ZN4blib3Lcd11displayLineEhhPKc+0x82>
                        command = 0x80 | (col + 0x54);
 8007672:	7abb      	ldrb	r3, [r7, #10]
 8007674:	3354      	adds	r3, #84	; 0x54
 8007676:	b2db      	uxtb	r3, r3
 8007678:	b25b      	sxtb	r3, r3
 800767a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800767e:	b25b      	sxtb	r3, r3
 8007680:	75fb      	strb	r3, [r7, #23]
                        break;
 8007682:	e000      	b.n	8007686 <_ZN4blib3Lcd11displayLineEhhPKc+0x82>
                        break;
 8007684:	bf00      	nop
                break;
 8007686:	e000      	b.n	800768a <_ZN4blib3Lcd11displayLineEhhPKc+0x86>
                break;
 8007688:	bf00      	nop
        }

        sendCmd(command);
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	4619      	mov	r1, r3
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f7ff ff4e 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 8007694:	e008      	b.n	80076a8 <_ZN4blib3Lcd11displayLineEhhPKc+0xa4>
        {
            sendData(*string);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	4619      	mov	r1, r3
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff ff7c 	bl	800759a <_ZN4blib3Lcd8sendDataEh>
            string++;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3301      	adds	r3, #1
 80076a6:	607b      	str	r3, [r7, #4]
        while (*string)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1f2      	bne.n	8007696 <_ZN4blib3Lcd11displayLineEhhPKc+0x92>
        }
    }
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	3718      	adds	r7, #24
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop

080076bc <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
        sendCmd(0x00);
 80076c4:	2100      	movs	r1, #0
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff ff32 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        for (uint8_t i = 0; i < 100; i++)
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
 80076d0:	e006      	b.n	80076e0 <_ZN4blib3Lcd12clearDisplayEv+0x24>
        {
            sendData(' ');
 80076d2:	2120      	movs	r1, #32
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff ff60 	bl	800759a <_ZN4blib3Lcd8sendDataEh>
        for (uint8_t i = 0; i < 100; i++)
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	3301      	adds	r3, #1
 80076de:	73fb      	strb	r3, [r7, #15]
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b63      	cmp	r3, #99	; 0x63
 80076e4:	d9f5      	bls.n	80076d2 <_ZN4blib3Lcd12clearDisplayEv+0x16>
        }
    }
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <_ZN4blib3Lcd4initEv>:
    void Lcd::init()
    {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2206      	movs	r2, #6
 80076fc:	735a      	strb	r2, [r3, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2228      	movs	r2, #40	; 0x28
 8007702:	73da      	strb	r2, [r3, #15]
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2208      	movs	r2, #8
 8007708:	739a      	strb	r2, [r3, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_BLACKLIGHT;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2208      	movs	r2, #8
 800770e:	741a      	strb	r2, [r3, #16]

        HAL_Delay(50);
 8007710:	2032      	movs	r0, #50	; 0x32
 8007712:	f7fa ff4d 	bl	80025b0 <HAL_Delay>
        sendCmd(0x30);
 8007716:	2130      	movs	r1, #48	; 0x30
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff ff09 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 800771e:	2005      	movs	r0, #5
 8007720:	f7fa ff46 	bl	80025b0 <HAL_Delay>
        sendCmd(0x30);
 8007724:	2130      	movs	r1, #48	; 0x30
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7ff ff02 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800772c:	2001      	movs	r0, #1
 800772e:	f7fa ff3f 	bl	80025b0 <HAL_Delay>
        sendCmd(0x30);
 8007732:	2130      	movs	r1, #48	; 0x30
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff fefb 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 800773a:	200a      	movs	r0, #10
 800773c:	f7fa ff38 	bl	80025b0 <HAL_Delay>
        sendCmd(0x20);
 8007740:	2120      	movs	r1, #32
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff fef4 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8007748:	200a      	movs	r0, #10
 800774a:	f7fa ff31 	bl	80025b0 <HAL_Delay>

        sendCmd(mFunctionSet);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7bdb      	ldrb	r3, [r3, #15]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff feeb 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800775a:	2001      	movs	r0, #1
 800775c:	f7fa ff28 	bl	80025b0 <HAL_Delay>
        sendCmd(mDisplayControl);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	7b9b      	ldrb	r3, [r3, #14]
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff fee2 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800776c:	2001      	movs	r0, #1
 800776e:	f7fa ff1f 	bl	80025b0 <HAL_Delay>
        sendCmd(0x01);    //clear display
 8007772:	2101      	movs	r1, #1
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff fedb 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 800777a:	2002      	movs	r0, #2
 800777c:	f7fa ff18 	bl	80025b0 <HAL_Delay>
        sendCmd(mEntryMode);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7b5b      	ldrb	r3, [r3, #13]
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7ff fed2 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800778c:	2001      	movs	r0, #1
 800778e:	f7fa ff0f 	bl	80025b0 <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	7b9b      	ldrb	r3, [r3, #14]
 8007796:	f043 0304 	orr.w	r3, r3, #4
 800779a:	b2db      	uxtb	r3, r3
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff fec6 	bl	8007530 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 80077a4:	2001      	movs	r0, #1
 80077a6:	f7fa ff03 	bl	80025b0 <HAL_Delay>
    }
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <_ZdlPvj>:
 80077b2:	f000 b811 	b.w	80077d8 <_ZdlPv>

080077b6 <_Znwj>:
 80077b6:	2801      	cmp	r0, #1
 80077b8:	bf38      	it	cc
 80077ba:	2001      	movcc	r0, #1
 80077bc:	b510      	push	{r4, lr}
 80077be:	4604      	mov	r4, r0
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 f81b 	bl	80077fc <malloc>
 80077c6:	b100      	cbz	r0, 80077ca <_Znwj+0x14>
 80077c8:	bd10      	pop	{r4, pc}
 80077ca:	f000 f807 	bl	80077dc <_ZSt15get_new_handlerv>
 80077ce:	b908      	cbnz	r0, 80077d4 <_Znwj+0x1e>
 80077d0:	f000 f80c 	bl	80077ec <abort>
 80077d4:	4780      	blx	r0
 80077d6:	e7f3      	b.n	80077c0 <_Znwj+0xa>

080077d8 <_ZdlPv>:
 80077d8:	f000 b818 	b.w	800780c <free>

080077dc <_ZSt15get_new_handlerv>:
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <_ZSt15get_new_handlerv+0xc>)
 80077de:	6818      	ldr	r0, [r3, #0]
 80077e0:	f3bf 8f5b 	dmb	ish
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	20000784 	.word	0x20000784

080077ec <abort>:
 80077ec:	b508      	push	{r3, lr}
 80077ee:	2006      	movs	r0, #6
 80077f0:	f000 fe90 	bl	8008514 <raise>
 80077f4:	2001      	movs	r0, #1
 80077f6:	f7fa fd8b 	bl	8002310 <_exit>
	...

080077fc <malloc>:
 80077fc:	4b02      	ldr	r3, [pc, #8]	; (8007808 <malloc+0xc>)
 80077fe:	4601      	mov	r1, r0
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	f000 b82b 	b.w	800785c <_malloc_r>
 8007806:	bf00      	nop
 8007808:	20000068 	.word	0x20000068

0800780c <free>:
 800780c:	4b02      	ldr	r3, [pc, #8]	; (8007818 <free+0xc>)
 800780e:	4601      	mov	r1, r0
 8007810:	6818      	ldr	r0, [r3, #0]
 8007812:	f001 bd9f 	b.w	8009354 <_free_r>
 8007816:	bf00      	nop
 8007818:	20000068 	.word	0x20000068

0800781c <sbrk_aligned>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4e0e      	ldr	r6, [pc, #56]	; (8007858 <sbrk_aligned+0x3c>)
 8007820:	460c      	mov	r4, r1
 8007822:	6831      	ldr	r1, [r6, #0]
 8007824:	4605      	mov	r5, r0
 8007826:	b911      	cbnz	r1, 800782e <sbrk_aligned+0x12>
 8007828:	f000 fec8 	bl	80085bc <_sbrk_r>
 800782c:	6030      	str	r0, [r6, #0]
 800782e:	4621      	mov	r1, r4
 8007830:	4628      	mov	r0, r5
 8007832:	f000 fec3 	bl	80085bc <_sbrk_r>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	d00a      	beq.n	8007850 <sbrk_aligned+0x34>
 800783a:	1cc4      	adds	r4, r0, #3
 800783c:	f024 0403 	bic.w	r4, r4, #3
 8007840:	42a0      	cmp	r0, r4
 8007842:	d007      	beq.n	8007854 <sbrk_aligned+0x38>
 8007844:	1a21      	subs	r1, r4, r0
 8007846:	4628      	mov	r0, r5
 8007848:	f000 feb8 	bl	80085bc <_sbrk_r>
 800784c:	3001      	adds	r0, #1
 800784e:	d101      	bne.n	8007854 <sbrk_aligned+0x38>
 8007850:	f04f 34ff 	mov.w	r4, #4294967295
 8007854:	4620      	mov	r0, r4
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	2000078c 	.word	0x2000078c

0800785c <_malloc_r>:
 800785c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007860:	1ccd      	adds	r5, r1, #3
 8007862:	f025 0503 	bic.w	r5, r5, #3
 8007866:	3508      	adds	r5, #8
 8007868:	2d0c      	cmp	r5, #12
 800786a:	bf38      	it	cc
 800786c:	250c      	movcc	r5, #12
 800786e:	2d00      	cmp	r5, #0
 8007870:	4607      	mov	r7, r0
 8007872:	db01      	blt.n	8007878 <_malloc_r+0x1c>
 8007874:	42a9      	cmp	r1, r5
 8007876:	d905      	bls.n	8007884 <_malloc_r+0x28>
 8007878:	230c      	movs	r3, #12
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	2600      	movs	r6, #0
 800787e:	4630      	mov	r0, r6
 8007880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007884:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007958 <_malloc_r+0xfc>
 8007888:	f000 f868 	bl	800795c <__malloc_lock>
 800788c:	f8d8 3000 	ldr.w	r3, [r8]
 8007890:	461c      	mov	r4, r3
 8007892:	bb5c      	cbnz	r4, 80078ec <_malloc_r+0x90>
 8007894:	4629      	mov	r1, r5
 8007896:	4638      	mov	r0, r7
 8007898:	f7ff ffc0 	bl	800781c <sbrk_aligned>
 800789c:	1c43      	adds	r3, r0, #1
 800789e:	4604      	mov	r4, r0
 80078a0:	d155      	bne.n	800794e <_malloc_r+0xf2>
 80078a2:	f8d8 4000 	ldr.w	r4, [r8]
 80078a6:	4626      	mov	r6, r4
 80078a8:	2e00      	cmp	r6, #0
 80078aa:	d145      	bne.n	8007938 <_malloc_r+0xdc>
 80078ac:	2c00      	cmp	r4, #0
 80078ae:	d048      	beq.n	8007942 <_malloc_r+0xe6>
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	4631      	mov	r1, r6
 80078b4:	4638      	mov	r0, r7
 80078b6:	eb04 0903 	add.w	r9, r4, r3
 80078ba:	f000 fe7f 	bl	80085bc <_sbrk_r>
 80078be:	4581      	cmp	r9, r0
 80078c0:	d13f      	bne.n	8007942 <_malloc_r+0xe6>
 80078c2:	6821      	ldr	r1, [r4, #0]
 80078c4:	1a6d      	subs	r5, r5, r1
 80078c6:	4629      	mov	r1, r5
 80078c8:	4638      	mov	r0, r7
 80078ca:	f7ff ffa7 	bl	800781c <sbrk_aligned>
 80078ce:	3001      	adds	r0, #1
 80078d0:	d037      	beq.n	8007942 <_malloc_r+0xe6>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	442b      	add	r3, r5
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	f8d8 3000 	ldr.w	r3, [r8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d038      	beq.n	8007952 <_malloc_r+0xf6>
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	42a2      	cmp	r2, r4
 80078e4:	d12b      	bne.n	800793e <_malloc_r+0xe2>
 80078e6:	2200      	movs	r2, #0
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	e00f      	b.n	800790c <_malloc_r+0xb0>
 80078ec:	6822      	ldr	r2, [r4, #0]
 80078ee:	1b52      	subs	r2, r2, r5
 80078f0:	d41f      	bmi.n	8007932 <_malloc_r+0xd6>
 80078f2:	2a0b      	cmp	r2, #11
 80078f4:	d917      	bls.n	8007926 <_malloc_r+0xca>
 80078f6:	1961      	adds	r1, r4, r5
 80078f8:	42a3      	cmp	r3, r4
 80078fa:	6025      	str	r5, [r4, #0]
 80078fc:	bf18      	it	ne
 80078fe:	6059      	strne	r1, [r3, #4]
 8007900:	6863      	ldr	r3, [r4, #4]
 8007902:	bf08      	it	eq
 8007904:	f8c8 1000 	streq.w	r1, [r8]
 8007908:	5162      	str	r2, [r4, r5]
 800790a:	604b      	str	r3, [r1, #4]
 800790c:	4638      	mov	r0, r7
 800790e:	f104 060b 	add.w	r6, r4, #11
 8007912:	f000 f829 	bl	8007968 <__malloc_unlock>
 8007916:	f026 0607 	bic.w	r6, r6, #7
 800791a:	1d23      	adds	r3, r4, #4
 800791c:	1af2      	subs	r2, r6, r3
 800791e:	d0ae      	beq.n	800787e <_malloc_r+0x22>
 8007920:	1b9b      	subs	r3, r3, r6
 8007922:	50a3      	str	r3, [r4, r2]
 8007924:	e7ab      	b.n	800787e <_malloc_r+0x22>
 8007926:	42a3      	cmp	r3, r4
 8007928:	6862      	ldr	r2, [r4, #4]
 800792a:	d1dd      	bne.n	80078e8 <_malloc_r+0x8c>
 800792c:	f8c8 2000 	str.w	r2, [r8]
 8007930:	e7ec      	b.n	800790c <_malloc_r+0xb0>
 8007932:	4623      	mov	r3, r4
 8007934:	6864      	ldr	r4, [r4, #4]
 8007936:	e7ac      	b.n	8007892 <_malloc_r+0x36>
 8007938:	4634      	mov	r4, r6
 800793a:	6876      	ldr	r6, [r6, #4]
 800793c:	e7b4      	b.n	80078a8 <_malloc_r+0x4c>
 800793e:	4613      	mov	r3, r2
 8007940:	e7cc      	b.n	80078dc <_malloc_r+0x80>
 8007942:	230c      	movs	r3, #12
 8007944:	603b      	str	r3, [r7, #0]
 8007946:	4638      	mov	r0, r7
 8007948:	f000 f80e 	bl	8007968 <__malloc_unlock>
 800794c:	e797      	b.n	800787e <_malloc_r+0x22>
 800794e:	6025      	str	r5, [r4, #0]
 8007950:	e7dc      	b.n	800790c <_malloc_r+0xb0>
 8007952:	605b      	str	r3, [r3, #4]
 8007954:	deff      	udf	#255	; 0xff
 8007956:	bf00      	nop
 8007958:	20000788 	.word	0x20000788

0800795c <__malloc_lock>:
 800795c:	4801      	ldr	r0, [pc, #4]	; (8007964 <__malloc_lock+0x8>)
 800795e:	f000 be7a 	b.w	8008656 <__retarget_lock_acquire_recursive>
 8007962:	bf00      	nop
 8007964:	200008d0 	.word	0x200008d0

08007968 <__malloc_unlock>:
 8007968:	4801      	ldr	r0, [pc, #4]	; (8007970 <__malloc_unlock+0x8>)
 800796a:	f000 be75 	b.w	8008658 <__retarget_lock_release_recursive>
 800796e:	bf00      	nop
 8007970:	200008d0 	.word	0x200008d0

08007974 <__cvt>:
 8007974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007978:	ec55 4b10 	vmov	r4, r5, d0
 800797c:	2d00      	cmp	r5, #0
 800797e:	460e      	mov	r6, r1
 8007980:	4619      	mov	r1, r3
 8007982:	462b      	mov	r3, r5
 8007984:	bfbb      	ittet	lt
 8007986:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800798a:	461d      	movlt	r5, r3
 800798c:	2300      	movge	r3, #0
 800798e:	232d      	movlt	r3, #45	; 0x2d
 8007990:	700b      	strb	r3, [r1, #0]
 8007992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007994:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007998:	4691      	mov	r9, r2
 800799a:	f023 0820 	bic.w	r8, r3, #32
 800799e:	bfbc      	itt	lt
 80079a0:	4622      	movlt	r2, r4
 80079a2:	4614      	movlt	r4, r2
 80079a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079a8:	d005      	beq.n	80079b6 <__cvt+0x42>
 80079aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079ae:	d100      	bne.n	80079b2 <__cvt+0x3e>
 80079b0:	3601      	adds	r6, #1
 80079b2:	2102      	movs	r1, #2
 80079b4:	e000      	b.n	80079b8 <__cvt+0x44>
 80079b6:	2103      	movs	r1, #3
 80079b8:	ab03      	add	r3, sp, #12
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	ab02      	add	r3, sp, #8
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	ec45 4b10 	vmov	d0, r4, r5
 80079c4:	4653      	mov	r3, sl
 80079c6:	4632      	mov	r2, r6
 80079c8:	f000 fed2 	bl	8008770 <_dtoa_r>
 80079cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80079d0:	4607      	mov	r7, r0
 80079d2:	d102      	bne.n	80079da <__cvt+0x66>
 80079d4:	f019 0f01 	tst.w	r9, #1
 80079d8:	d022      	beq.n	8007a20 <__cvt+0xac>
 80079da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079de:	eb07 0906 	add.w	r9, r7, r6
 80079e2:	d110      	bne.n	8007a06 <__cvt+0x92>
 80079e4:	783b      	ldrb	r3, [r7, #0]
 80079e6:	2b30      	cmp	r3, #48	; 0x30
 80079e8:	d10a      	bne.n	8007a00 <__cvt+0x8c>
 80079ea:	2200      	movs	r2, #0
 80079ec:	2300      	movs	r3, #0
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f9 f871 	bl	8000ad8 <__aeabi_dcmpeq>
 80079f6:	b918      	cbnz	r0, 8007a00 <__cvt+0x8c>
 80079f8:	f1c6 0601 	rsb	r6, r6, #1
 80079fc:	f8ca 6000 	str.w	r6, [sl]
 8007a00:	f8da 3000 	ldr.w	r3, [sl]
 8007a04:	4499      	add	r9, r3
 8007a06:	2200      	movs	r2, #0
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	f7f9 f863 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a12:	b108      	cbz	r0, 8007a18 <__cvt+0xa4>
 8007a14:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a18:	2230      	movs	r2, #48	; 0x30
 8007a1a:	9b03      	ldr	r3, [sp, #12]
 8007a1c:	454b      	cmp	r3, r9
 8007a1e:	d307      	bcc.n	8007a30 <__cvt+0xbc>
 8007a20:	9b03      	ldr	r3, [sp, #12]
 8007a22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a24:	1bdb      	subs	r3, r3, r7
 8007a26:	4638      	mov	r0, r7
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	b004      	add	sp, #16
 8007a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a30:	1c59      	adds	r1, r3, #1
 8007a32:	9103      	str	r1, [sp, #12]
 8007a34:	701a      	strb	r2, [r3, #0]
 8007a36:	e7f0      	b.n	8007a1a <__cvt+0xa6>

08007a38 <__exponent>:
 8007a38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2900      	cmp	r1, #0
 8007a3e:	bfb8      	it	lt
 8007a40:	4249      	neglt	r1, r1
 8007a42:	f803 2b02 	strb.w	r2, [r3], #2
 8007a46:	bfb4      	ite	lt
 8007a48:	222d      	movlt	r2, #45	; 0x2d
 8007a4a:	222b      	movge	r2, #43	; 0x2b
 8007a4c:	2909      	cmp	r1, #9
 8007a4e:	7042      	strb	r2, [r0, #1]
 8007a50:	dd2a      	ble.n	8007aa8 <__exponent+0x70>
 8007a52:	f10d 0207 	add.w	r2, sp, #7
 8007a56:	4617      	mov	r7, r2
 8007a58:	260a      	movs	r6, #10
 8007a5a:	4694      	mov	ip, r2
 8007a5c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a60:	fb06 1415 	mls	r4, r6, r5, r1
 8007a64:	3430      	adds	r4, #48	; 0x30
 8007a66:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	2c63      	cmp	r4, #99	; 0x63
 8007a6e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007a72:	4629      	mov	r1, r5
 8007a74:	dcf1      	bgt.n	8007a5a <__exponent+0x22>
 8007a76:	3130      	adds	r1, #48	; 0x30
 8007a78:	f1ac 0402 	sub.w	r4, ip, #2
 8007a7c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007a80:	1c41      	adds	r1, r0, #1
 8007a82:	4622      	mov	r2, r4
 8007a84:	42ba      	cmp	r2, r7
 8007a86:	d30a      	bcc.n	8007a9e <__exponent+0x66>
 8007a88:	f10d 0209 	add.w	r2, sp, #9
 8007a8c:	eba2 020c 	sub.w	r2, r2, ip
 8007a90:	42bc      	cmp	r4, r7
 8007a92:	bf88      	it	hi
 8007a94:	2200      	movhi	r2, #0
 8007a96:	4413      	add	r3, r2
 8007a98:	1a18      	subs	r0, r3, r0
 8007a9a:	b003      	add	sp, #12
 8007a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a9e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007aa2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007aa6:	e7ed      	b.n	8007a84 <__exponent+0x4c>
 8007aa8:	2330      	movs	r3, #48	; 0x30
 8007aaa:	3130      	adds	r1, #48	; 0x30
 8007aac:	7083      	strb	r3, [r0, #2]
 8007aae:	70c1      	strb	r1, [r0, #3]
 8007ab0:	1d03      	adds	r3, r0, #4
 8007ab2:	e7f1      	b.n	8007a98 <__exponent+0x60>

08007ab4 <_printf_float>:
 8007ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab8:	ed2d 8b02 	vpush	{d8}
 8007abc:	b08d      	sub	sp, #52	; 0x34
 8007abe:	460c      	mov	r4, r1
 8007ac0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007ac4:	4616      	mov	r6, r2
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	4605      	mov	r5, r0
 8007aca:	f000 fd2b 	bl	8008524 <_localeconv_r>
 8007ace:	f8d0 a000 	ldr.w	sl, [r0]
 8007ad2:	4650      	mov	r0, sl
 8007ad4:	f7f8 fbd4 	bl	8000280 <strlen>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	930a      	str	r3, [sp, #40]	; 0x28
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007ae8:	3307      	adds	r3, #7
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	f103 0208 	add.w	r2, r3, #8
 8007af2:	f8c8 2000 	str.w	r2, [r8]
 8007af6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007afa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b04:	ee08 0a10 	vmov	s16, r0
 8007b08:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007b0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b10:	4b9e      	ldr	r3, [pc, #632]	; (8007d8c <_printf_float+0x2d8>)
 8007b12:	f04f 32ff 	mov.w	r2, #4294967295
 8007b16:	f7f9 f811 	bl	8000b3c <__aeabi_dcmpun>
 8007b1a:	bb88      	cbnz	r0, 8007b80 <_printf_float+0xcc>
 8007b1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b20:	4b9a      	ldr	r3, [pc, #616]	; (8007d8c <_printf_float+0x2d8>)
 8007b22:	f04f 32ff 	mov.w	r2, #4294967295
 8007b26:	f7f8 ffeb 	bl	8000b00 <__aeabi_dcmple>
 8007b2a:	bb48      	cbnz	r0, 8007b80 <_printf_float+0xcc>
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	2300      	movs	r3, #0
 8007b30:	4640      	mov	r0, r8
 8007b32:	4649      	mov	r1, r9
 8007b34:	f7f8 ffda 	bl	8000aec <__aeabi_dcmplt>
 8007b38:	b110      	cbz	r0, 8007b40 <_printf_float+0x8c>
 8007b3a:	232d      	movs	r3, #45	; 0x2d
 8007b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b40:	4a93      	ldr	r2, [pc, #588]	; (8007d90 <_printf_float+0x2dc>)
 8007b42:	4b94      	ldr	r3, [pc, #592]	; (8007d94 <_printf_float+0x2e0>)
 8007b44:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b48:	bf94      	ite	ls
 8007b4a:	4690      	movls	r8, r2
 8007b4c:	4698      	movhi	r8, r3
 8007b4e:	2303      	movs	r3, #3
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	9b05      	ldr	r3, [sp, #20]
 8007b54:	f023 0304 	bic.w	r3, r3, #4
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	f04f 0900 	mov.w	r9, #0
 8007b5e:	9700      	str	r7, [sp, #0]
 8007b60:	4633      	mov	r3, r6
 8007b62:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b64:	4621      	mov	r1, r4
 8007b66:	4628      	mov	r0, r5
 8007b68:	f000 f9da 	bl	8007f20 <_printf_common>
 8007b6c:	3001      	adds	r0, #1
 8007b6e:	f040 8090 	bne.w	8007c92 <_printf_float+0x1de>
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295
 8007b76:	b00d      	add	sp, #52	; 0x34
 8007b78:	ecbd 8b02 	vpop	{d8}
 8007b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b80:	4642      	mov	r2, r8
 8007b82:	464b      	mov	r3, r9
 8007b84:	4640      	mov	r0, r8
 8007b86:	4649      	mov	r1, r9
 8007b88:	f7f8 ffd8 	bl	8000b3c <__aeabi_dcmpun>
 8007b8c:	b140      	cbz	r0, 8007ba0 <_printf_float+0xec>
 8007b8e:	464b      	mov	r3, r9
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	bfbc      	itt	lt
 8007b94:	232d      	movlt	r3, #45	; 0x2d
 8007b96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007b9a:	4a7f      	ldr	r2, [pc, #508]	; (8007d98 <_printf_float+0x2e4>)
 8007b9c:	4b7f      	ldr	r3, [pc, #508]	; (8007d9c <_printf_float+0x2e8>)
 8007b9e:	e7d1      	b.n	8007b44 <_printf_float+0x90>
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007ba6:	9206      	str	r2, [sp, #24]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	d13f      	bne.n	8007c2c <_printf_float+0x178>
 8007bac:	2306      	movs	r3, #6
 8007bae:	6063      	str	r3, [r4, #4]
 8007bb0:	9b05      	ldr	r3, [sp, #20]
 8007bb2:	6861      	ldr	r1, [r4, #4]
 8007bb4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bb8:	2300      	movs	r3, #0
 8007bba:	9303      	str	r3, [sp, #12]
 8007bbc:	ab0a      	add	r3, sp, #40	; 0x28
 8007bbe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007bc2:	ab09      	add	r3, sp, #36	; 0x24
 8007bc4:	ec49 8b10 	vmov	d0, r8, r9
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	6022      	str	r2, [r4, #0]
 8007bcc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f7ff fecf 	bl	8007974 <__cvt>
 8007bd6:	9b06      	ldr	r3, [sp, #24]
 8007bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bda:	2b47      	cmp	r3, #71	; 0x47
 8007bdc:	4680      	mov	r8, r0
 8007bde:	d108      	bne.n	8007bf2 <_printf_float+0x13e>
 8007be0:	1cc8      	adds	r0, r1, #3
 8007be2:	db02      	blt.n	8007bea <_printf_float+0x136>
 8007be4:	6863      	ldr	r3, [r4, #4]
 8007be6:	4299      	cmp	r1, r3
 8007be8:	dd41      	ble.n	8007c6e <_printf_float+0x1ba>
 8007bea:	f1ab 0302 	sub.w	r3, fp, #2
 8007bee:	fa5f fb83 	uxtb.w	fp, r3
 8007bf2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007bf6:	d820      	bhi.n	8007c3a <_printf_float+0x186>
 8007bf8:	3901      	subs	r1, #1
 8007bfa:	465a      	mov	r2, fp
 8007bfc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c00:	9109      	str	r1, [sp, #36]	; 0x24
 8007c02:	f7ff ff19 	bl	8007a38 <__exponent>
 8007c06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c08:	1813      	adds	r3, r2, r0
 8007c0a:	2a01      	cmp	r2, #1
 8007c0c:	4681      	mov	r9, r0
 8007c0e:	6123      	str	r3, [r4, #16]
 8007c10:	dc02      	bgt.n	8007c18 <_printf_float+0x164>
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	07d2      	lsls	r2, r2, #31
 8007c16:	d501      	bpl.n	8007c1c <_printf_float+0x168>
 8007c18:	3301      	adds	r3, #1
 8007c1a:	6123      	str	r3, [r4, #16]
 8007c1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d09c      	beq.n	8007b5e <_printf_float+0xaa>
 8007c24:	232d      	movs	r3, #45	; 0x2d
 8007c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c2a:	e798      	b.n	8007b5e <_printf_float+0xaa>
 8007c2c:	9a06      	ldr	r2, [sp, #24]
 8007c2e:	2a47      	cmp	r2, #71	; 0x47
 8007c30:	d1be      	bne.n	8007bb0 <_printf_float+0xfc>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1bc      	bne.n	8007bb0 <_printf_float+0xfc>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e7b9      	b.n	8007bae <_printf_float+0xfa>
 8007c3a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c3e:	d118      	bne.n	8007c72 <_printf_float+0x1be>
 8007c40:	2900      	cmp	r1, #0
 8007c42:	6863      	ldr	r3, [r4, #4]
 8007c44:	dd0b      	ble.n	8007c5e <_printf_float+0x1aa>
 8007c46:	6121      	str	r1, [r4, #16]
 8007c48:	b913      	cbnz	r3, 8007c50 <_printf_float+0x19c>
 8007c4a:	6822      	ldr	r2, [r4, #0]
 8007c4c:	07d0      	lsls	r0, r2, #31
 8007c4e:	d502      	bpl.n	8007c56 <_printf_float+0x1a2>
 8007c50:	3301      	adds	r3, #1
 8007c52:	440b      	add	r3, r1
 8007c54:	6123      	str	r3, [r4, #16]
 8007c56:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c58:	f04f 0900 	mov.w	r9, #0
 8007c5c:	e7de      	b.n	8007c1c <_printf_float+0x168>
 8007c5e:	b913      	cbnz	r3, 8007c66 <_printf_float+0x1b2>
 8007c60:	6822      	ldr	r2, [r4, #0]
 8007c62:	07d2      	lsls	r2, r2, #31
 8007c64:	d501      	bpl.n	8007c6a <_printf_float+0x1b6>
 8007c66:	3302      	adds	r3, #2
 8007c68:	e7f4      	b.n	8007c54 <_printf_float+0x1a0>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e7f2      	b.n	8007c54 <_printf_float+0x1a0>
 8007c6e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c74:	4299      	cmp	r1, r3
 8007c76:	db05      	blt.n	8007c84 <_printf_float+0x1d0>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	6121      	str	r1, [r4, #16]
 8007c7c:	07d8      	lsls	r0, r3, #31
 8007c7e:	d5ea      	bpl.n	8007c56 <_printf_float+0x1a2>
 8007c80:	1c4b      	adds	r3, r1, #1
 8007c82:	e7e7      	b.n	8007c54 <_printf_float+0x1a0>
 8007c84:	2900      	cmp	r1, #0
 8007c86:	bfd4      	ite	le
 8007c88:	f1c1 0202 	rsble	r2, r1, #2
 8007c8c:	2201      	movgt	r2, #1
 8007c8e:	4413      	add	r3, r2
 8007c90:	e7e0      	b.n	8007c54 <_printf_float+0x1a0>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	055a      	lsls	r2, r3, #21
 8007c96:	d407      	bmi.n	8007ca8 <_printf_float+0x1f4>
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	4642      	mov	r2, r8
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	47b8      	blx	r7
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d12c      	bne.n	8007d00 <_printf_float+0x24c>
 8007ca6:	e764      	b.n	8007b72 <_printf_float+0xbe>
 8007ca8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007cac:	f240 80e0 	bls.w	8007e70 <_printf_float+0x3bc>
 8007cb0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	f7f8 ff0e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	d034      	beq.n	8007d2a <_printf_float+0x276>
 8007cc0:	4a37      	ldr	r2, [pc, #220]	; (8007da0 <_printf_float+0x2ec>)
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	47b8      	blx	r7
 8007cca:	3001      	adds	r0, #1
 8007ccc:	f43f af51 	beq.w	8007b72 <_printf_float+0xbe>
 8007cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	db02      	blt.n	8007cde <_printf_float+0x22a>
 8007cd8:	6823      	ldr	r3, [r4, #0]
 8007cda:	07d8      	lsls	r0, r3, #31
 8007cdc:	d510      	bpl.n	8007d00 <_printf_float+0x24c>
 8007cde:	ee18 3a10 	vmov	r3, s16
 8007ce2:	4652      	mov	r2, sl
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	47b8      	blx	r7
 8007cea:	3001      	adds	r0, #1
 8007cec:	f43f af41 	beq.w	8007b72 <_printf_float+0xbe>
 8007cf0:	f04f 0800 	mov.w	r8, #0
 8007cf4:	f104 091a 	add.w	r9, r4, #26
 8007cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	4543      	cmp	r3, r8
 8007cfe:	dc09      	bgt.n	8007d14 <_printf_float+0x260>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	079b      	lsls	r3, r3, #30
 8007d04:	f100 8107 	bmi.w	8007f16 <_printf_float+0x462>
 8007d08:	68e0      	ldr	r0, [r4, #12]
 8007d0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d0c:	4298      	cmp	r0, r3
 8007d0e:	bfb8      	it	lt
 8007d10:	4618      	movlt	r0, r3
 8007d12:	e730      	b.n	8007b76 <_printf_float+0xc2>
 8007d14:	2301      	movs	r3, #1
 8007d16:	464a      	mov	r2, r9
 8007d18:	4631      	mov	r1, r6
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	47b8      	blx	r7
 8007d1e:	3001      	adds	r0, #1
 8007d20:	f43f af27 	beq.w	8007b72 <_printf_float+0xbe>
 8007d24:	f108 0801 	add.w	r8, r8, #1
 8007d28:	e7e6      	b.n	8007cf8 <_printf_float+0x244>
 8007d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dc39      	bgt.n	8007da4 <_printf_float+0x2f0>
 8007d30:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <_printf_float+0x2ec>)
 8007d32:	2301      	movs	r3, #1
 8007d34:	4631      	mov	r1, r6
 8007d36:	4628      	mov	r0, r5
 8007d38:	47b8      	blx	r7
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	f43f af19 	beq.w	8007b72 <_printf_float+0xbe>
 8007d40:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007d44:	4313      	orrs	r3, r2
 8007d46:	d102      	bne.n	8007d4e <_printf_float+0x29a>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	07d9      	lsls	r1, r3, #31
 8007d4c:	d5d8      	bpl.n	8007d00 <_printf_float+0x24c>
 8007d4e:	ee18 3a10 	vmov	r3, s16
 8007d52:	4652      	mov	r2, sl
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f af09 	beq.w	8007b72 <_printf_float+0xbe>
 8007d60:	f04f 0900 	mov.w	r9, #0
 8007d64:	f104 0a1a 	add.w	sl, r4, #26
 8007d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6a:	425b      	negs	r3, r3
 8007d6c:	454b      	cmp	r3, r9
 8007d6e:	dc01      	bgt.n	8007d74 <_printf_float+0x2c0>
 8007d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d72:	e792      	b.n	8007c9a <_printf_float+0x1e6>
 8007d74:	2301      	movs	r3, #1
 8007d76:	4652      	mov	r2, sl
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	47b8      	blx	r7
 8007d7e:	3001      	adds	r0, #1
 8007d80:	f43f aef7 	beq.w	8007b72 <_printf_float+0xbe>
 8007d84:	f109 0901 	add.w	r9, r9, #1
 8007d88:	e7ee      	b.n	8007d68 <_printf_float+0x2b4>
 8007d8a:	bf00      	nop
 8007d8c:	7fefffff 	.word	0x7fefffff
 8007d90:	0800ac00 	.word	0x0800ac00
 8007d94:	0800ac04 	.word	0x0800ac04
 8007d98:	0800ac08 	.word	0x0800ac08
 8007d9c:	0800ac0c 	.word	0x0800ac0c
 8007da0:	0800ac10 	.word	0x0800ac10
 8007da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007da6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007da8:	429a      	cmp	r2, r3
 8007daa:	bfa8      	it	ge
 8007dac:	461a      	movge	r2, r3
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	4691      	mov	r9, r2
 8007db2:	dc37      	bgt.n	8007e24 <_printf_float+0x370>
 8007db4:	f04f 0b00 	mov.w	fp, #0
 8007db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dbc:	f104 021a 	add.w	r2, r4, #26
 8007dc0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	eba3 0309 	sub.w	r3, r3, r9
 8007dc8:	455b      	cmp	r3, fp
 8007dca:	dc33      	bgt.n	8007e34 <_printf_float+0x380>
 8007dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	db3b      	blt.n	8007e4c <_printf_float+0x398>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	07da      	lsls	r2, r3, #31
 8007dd8:	d438      	bmi.n	8007e4c <_printf_float+0x398>
 8007dda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007dde:	eba2 0903 	sub.w	r9, r2, r3
 8007de2:	9b05      	ldr	r3, [sp, #20]
 8007de4:	1ad2      	subs	r2, r2, r3
 8007de6:	4591      	cmp	r9, r2
 8007de8:	bfa8      	it	ge
 8007dea:	4691      	movge	r9, r2
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	dc35      	bgt.n	8007e5e <_printf_float+0x3aa>
 8007df2:	f04f 0800 	mov.w	r8, #0
 8007df6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dfa:	f104 0a1a 	add.w	sl, r4, #26
 8007dfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e02:	1a9b      	subs	r3, r3, r2
 8007e04:	eba3 0309 	sub.w	r3, r3, r9
 8007e08:	4543      	cmp	r3, r8
 8007e0a:	f77f af79 	ble.w	8007d00 <_printf_float+0x24c>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	4652      	mov	r2, sl
 8007e12:	4631      	mov	r1, r6
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b8      	blx	r7
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f43f aeaa 	beq.w	8007b72 <_printf_float+0xbe>
 8007e1e:	f108 0801 	add.w	r8, r8, #1
 8007e22:	e7ec      	b.n	8007dfe <_printf_float+0x34a>
 8007e24:	4613      	mov	r3, r2
 8007e26:	4631      	mov	r1, r6
 8007e28:	4642      	mov	r2, r8
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	d1c0      	bne.n	8007db4 <_printf_float+0x300>
 8007e32:	e69e      	b.n	8007b72 <_printf_float+0xbe>
 8007e34:	2301      	movs	r3, #1
 8007e36:	4631      	mov	r1, r6
 8007e38:	4628      	mov	r0, r5
 8007e3a:	9205      	str	r2, [sp, #20]
 8007e3c:	47b8      	blx	r7
 8007e3e:	3001      	adds	r0, #1
 8007e40:	f43f ae97 	beq.w	8007b72 <_printf_float+0xbe>
 8007e44:	9a05      	ldr	r2, [sp, #20]
 8007e46:	f10b 0b01 	add.w	fp, fp, #1
 8007e4a:	e7b9      	b.n	8007dc0 <_printf_float+0x30c>
 8007e4c:	ee18 3a10 	vmov	r3, s16
 8007e50:	4652      	mov	r2, sl
 8007e52:	4631      	mov	r1, r6
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b8      	blx	r7
 8007e58:	3001      	adds	r0, #1
 8007e5a:	d1be      	bne.n	8007dda <_printf_float+0x326>
 8007e5c:	e689      	b.n	8007b72 <_printf_float+0xbe>
 8007e5e:	9a05      	ldr	r2, [sp, #20]
 8007e60:	464b      	mov	r3, r9
 8007e62:	4442      	add	r2, r8
 8007e64:	4631      	mov	r1, r6
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d1c1      	bne.n	8007df2 <_printf_float+0x33e>
 8007e6e:	e680      	b.n	8007b72 <_printf_float+0xbe>
 8007e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e72:	2a01      	cmp	r2, #1
 8007e74:	dc01      	bgt.n	8007e7a <_printf_float+0x3c6>
 8007e76:	07db      	lsls	r3, r3, #31
 8007e78:	d53a      	bpl.n	8007ef0 <_printf_float+0x43c>
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	f43f ae74 	beq.w	8007b72 <_printf_float+0xbe>
 8007e8a:	ee18 3a10 	vmov	r3, s16
 8007e8e:	4652      	mov	r2, sl
 8007e90:	4631      	mov	r1, r6
 8007e92:	4628      	mov	r0, r5
 8007e94:	47b8      	blx	r7
 8007e96:	3001      	adds	r0, #1
 8007e98:	f43f ae6b 	beq.w	8007b72 <_printf_float+0xbe>
 8007e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007ea8:	f7f8 fe16 	bl	8000ad8 <__aeabi_dcmpeq>
 8007eac:	b9d8      	cbnz	r0, 8007ee6 <_printf_float+0x432>
 8007eae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007eb2:	f108 0201 	add.w	r2, r8, #1
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	4628      	mov	r0, r5
 8007eba:	47b8      	blx	r7
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d10e      	bne.n	8007ede <_printf_float+0x42a>
 8007ec0:	e657      	b.n	8007b72 <_printf_float+0xbe>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4652      	mov	r2, sl
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b8      	blx	r7
 8007ecc:	3001      	adds	r0, #1
 8007ece:	f43f ae50 	beq.w	8007b72 <_printf_float+0xbe>
 8007ed2:	f108 0801 	add.w	r8, r8, #1
 8007ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ed8:	3b01      	subs	r3, #1
 8007eda:	4543      	cmp	r3, r8
 8007edc:	dcf1      	bgt.n	8007ec2 <_printf_float+0x40e>
 8007ede:	464b      	mov	r3, r9
 8007ee0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ee4:	e6da      	b.n	8007c9c <_printf_float+0x1e8>
 8007ee6:	f04f 0800 	mov.w	r8, #0
 8007eea:	f104 0a1a 	add.w	sl, r4, #26
 8007eee:	e7f2      	b.n	8007ed6 <_printf_float+0x422>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	4642      	mov	r2, r8
 8007ef4:	e7df      	b.n	8007eb6 <_printf_float+0x402>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	464a      	mov	r2, r9
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	f43f ae36 	beq.w	8007b72 <_printf_float+0xbe>
 8007f06:	f108 0801 	add.w	r8, r8, #1
 8007f0a:	68e3      	ldr	r3, [r4, #12]
 8007f0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f0e:	1a5b      	subs	r3, r3, r1
 8007f10:	4543      	cmp	r3, r8
 8007f12:	dcf0      	bgt.n	8007ef6 <_printf_float+0x442>
 8007f14:	e6f8      	b.n	8007d08 <_printf_float+0x254>
 8007f16:	f04f 0800 	mov.w	r8, #0
 8007f1a:	f104 0919 	add.w	r9, r4, #25
 8007f1e:	e7f4      	b.n	8007f0a <_printf_float+0x456>

08007f20 <_printf_common>:
 8007f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f24:	4616      	mov	r6, r2
 8007f26:	4699      	mov	r9, r3
 8007f28:	688a      	ldr	r2, [r1, #8]
 8007f2a:	690b      	ldr	r3, [r1, #16]
 8007f2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f30:	4293      	cmp	r3, r2
 8007f32:	bfb8      	it	lt
 8007f34:	4613      	movlt	r3, r2
 8007f36:	6033      	str	r3, [r6, #0]
 8007f38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	b10a      	cbz	r2, 8007f46 <_printf_common+0x26>
 8007f42:	3301      	adds	r3, #1
 8007f44:	6033      	str	r3, [r6, #0]
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	0699      	lsls	r1, r3, #26
 8007f4a:	bf42      	ittt	mi
 8007f4c:	6833      	ldrmi	r3, [r6, #0]
 8007f4e:	3302      	addmi	r3, #2
 8007f50:	6033      	strmi	r3, [r6, #0]
 8007f52:	6825      	ldr	r5, [r4, #0]
 8007f54:	f015 0506 	ands.w	r5, r5, #6
 8007f58:	d106      	bne.n	8007f68 <_printf_common+0x48>
 8007f5a:	f104 0a19 	add.w	sl, r4, #25
 8007f5e:	68e3      	ldr	r3, [r4, #12]
 8007f60:	6832      	ldr	r2, [r6, #0]
 8007f62:	1a9b      	subs	r3, r3, r2
 8007f64:	42ab      	cmp	r3, r5
 8007f66:	dc26      	bgt.n	8007fb6 <_printf_common+0x96>
 8007f68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f6c:	1e13      	subs	r3, r2, #0
 8007f6e:	6822      	ldr	r2, [r4, #0]
 8007f70:	bf18      	it	ne
 8007f72:	2301      	movne	r3, #1
 8007f74:	0692      	lsls	r2, r2, #26
 8007f76:	d42b      	bmi.n	8007fd0 <_printf_common+0xb0>
 8007f78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	4638      	mov	r0, r7
 8007f80:	47c0      	blx	r8
 8007f82:	3001      	adds	r0, #1
 8007f84:	d01e      	beq.n	8007fc4 <_printf_common+0xa4>
 8007f86:	6823      	ldr	r3, [r4, #0]
 8007f88:	6922      	ldr	r2, [r4, #16]
 8007f8a:	f003 0306 	and.w	r3, r3, #6
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	bf02      	ittt	eq
 8007f92:	68e5      	ldreq	r5, [r4, #12]
 8007f94:	6833      	ldreq	r3, [r6, #0]
 8007f96:	1aed      	subeq	r5, r5, r3
 8007f98:	68a3      	ldr	r3, [r4, #8]
 8007f9a:	bf0c      	ite	eq
 8007f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fa0:	2500      	movne	r5, #0
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	bfc4      	itt	gt
 8007fa6:	1a9b      	subgt	r3, r3, r2
 8007fa8:	18ed      	addgt	r5, r5, r3
 8007faa:	2600      	movs	r6, #0
 8007fac:	341a      	adds	r4, #26
 8007fae:	42b5      	cmp	r5, r6
 8007fb0:	d11a      	bne.n	8007fe8 <_printf_common+0xc8>
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	e008      	b.n	8007fc8 <_printf_common+0xa8>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4652      	mov	r2, sl
 8007fba:	4649      	mov	r1, r9
 8007fbc:	4638      	mov	r0, r7
 8007fbe:	47c0      	blx	r8
 8007fc0:	3001      	adds	r0, #1
 8007fc2:	d103      	bne.n	8007fcc <_printf_common+0xac>
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fcc:	3501      	adds	r5, #1
 8007fce:	e7c6      	b.n	8007f5e <_printf_common+0x3e>
 8007fd0:	18e1      	adds	r1, r4, r3
 8007fd2:	1c5a      	adds	r2, r3, #1
 8007fd4:	2030      	movs	r0, #48	; 0x30
 8007fd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fda:	4422      	add	r2, r4
 8007fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fe0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fe4:	3302      	adds	r3, #2
 8007fe6:	e7c7      	b.n	8007f78 <_printf_common+0x58>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	4622      	mov	r2, r4
 8007fec:	4649      	mov	r1, r9
 8007fee:	4638      	mov	r0, r7
 8007ff0:	47c0      	blx	r8
 8007ff2:	3001      	adds	r0, #1
 8007ff4:	d0e6      	beq.n	8007fc4 <_printf_common+0xa4>
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	e7d9      	b.n	8007fae <_printf_common+0x8e>
	...

08007ffc <_printf_i>:
 8007ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	7e0f      	ldrb	r7, [r1, #24]
 8008002:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008004:	2f78      	cmp	r7, #120	; 0x78
 8008006:	4691      	mov	r9, r2
 8008008:	4680      	mov	r8, r0
 800800a:	460c      	mov	r4, r1
 800800c:	469a      	mov	sl, r3
 800800e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008012:	d807      	bhi.n	8008024 <_printf_i+0x28>
 8008014:	2f62      	cmp	r7, #98	; 0x62
 8008016:	d80a      	bhi.n	800802e <_printf_i+0x32>
 8008018:	2f00      	cmp	r7, #0
 800801a:	f000 80d4 	beq.w	80081c6 <_printf_i+0x1ca>
 800801e:	2f58      	cmp	r7, #88	; 0x58
 8008020:	f000 80c0 	beq.w	80081a4 <_printf_i+0x1a8>
 8008024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008028:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800802c:	e03a      	b.n	80080a4 <_printf_i+0xa8>
 800802e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008032:	2b15      	cmp	r3, #21
 8008034:	d8f6      	bhi.n	8008024 <_printf_i+0x28>
 8008036:	a101      	add	r1, pc, #4	; (adr r1, 800803c <_printf_i+0x40>)
 8008038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800803c:	08008095 	.word	0x08008095
 8008040:	080080a9 	.word	0x080080a9
 8008044:	08008025 	.word	0x08008025
 8008048:	08008025 	.word	0x08008025
 800804c:	08008025 	.word	0x08008025
 8008050:	08008025 	.word	0x08008025
 8008054:	080080a9 	.word	0x080080a9
 8008058:	08008025 	.word	0x08008025
 800805c:	08008025 	.word	0x08008025
 8008060:	08008025 	.word	0x08008025
 8008064:	08008025 	.word	0x08008025
 8008068:	080081ad 	.word	0x080081ad
 800806c:	080080d5 	.word	0x080080d5
 8008070:	08008167 	.word	0x08008167
 8008074:	08008025 	.word	0x08008025
 8008078:	08008025 	.word	0x08008025
 800807c:	080081cf 	.word	0x080081cf
 8008080:	08008025 	.word	0x08008025
 8008084:	080080d5 	.word	0x080080d5
 8008088:	08008025 	.word	0x08008025
 800808c:	08008025 	.word	0x08008025
 8008090:	0800816f 	.word	0x0800816f
 8008094:	682b      	ldr	r3, [r5, #0]
 8008096:	1d1a      	adds	r2, r3, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	602a      	str	r2, [r5, #0]
 800809c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080a4:	2301      	movs	r3, #1
 80080a6:	e09f      	b.n	80081e8 <_printf_i+0x1ec>
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	0607      	lsls	r7, r0, #24
 80080ae:	f103 0104 	add.w	r1, r3, #4
 80080b2:	6029      	str	r1, [r5, #0]
 80080b4:	d501      	bpl.n	80080ba <_printf_i+0xbe>
 80080b6:	681e      	ldr	r6, [r3, #0]
 80080b8:	e003      	b.n	80080c2 <_printf_i+0xc6>
 80080ba:	0646      	lsls	r6, r0, #25
 80080bc:	d5fb      	bpl.n	80080b6 <_printf_i+0xba>
 80080be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80080c2:	2e00      	cmp	r6, #0
 80080c4:	da03      	bge.n	80080ce <_printf_i+0xd2>
 80080c6:	232d      	movs	r3, #45	; 0x2d
 80080c8:	4276      	negs	r6, r6
 80080ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ce:	485a      	ldr	r0, [pc, #360]	; (8008238 <_printf_i+0x23c>)
 80080d0:	230a      	movs	r3, #10
 80080d2:	e012      	b.n	80080fa <_printf_i+0xfe>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	6820      	ldr	r0, [r4, #0]
 80080d8:	1d19      	adds	r1, r3, #4
 80080da:	6029      	str	r1, [r5, #0]
 80080dc:	0605      	lsls	r5, r0, #24
 80080de:	d501      	bpl.n	80080e4 <_printf_i+0xe8>
 80080e0:	681e      	ldr	r6, [r3, #0]
 80080e2:	e002      	b.n	80080ea <_printf_i+0xee>
 80080e4:	0641      	lsls	r1, r0, #25
 80080e6:	d5fb      	bpl.n	80080e0 <_printf_i+0xe4>
 80080e8:	881e      	ldrh	r6, [r3, #0]
 80080ea:	4853      	ldr	r0, [pc, #332]	; (8008238 <_printf_i+0x23c>)
 80080ec:	2f6f      	cmp	r7, #111	; 0x6f
 80080ee:	bf0c      	ite	eq
 80080f0:	2308      	moveq	r3, #8
 80080f2:	230a      	movne	r3, #10
 80080f4:	2100      	movs	r1, #0
 80080f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080fa:	6865      	ldr	r5, [r4, #4]
 80080fc:	60a5      	str	r5, [r4, #8]
 80080fe:	2d00      	cmp	r5, #0
 8008100:	bfa2      	ittt	ge
 8008102:	6821      	ldrge	r1, [r4, #0]
 8008104:	f021 0104 	bicge.w	r1, r1, #4
 8008108:	6021      	strge	r1, [r4, #0]
 800810a:	b90e      	cbnz	r6, 8008110 <_printf_i+0x114>
 800810c:	2d00      	cmp	r5, #0
 800810e:	d04b      	beq.n	80081a8 <_printf_i+0x1ac>
 8008110:	4615      	mov	r5, r2
 8008112:	fbb6 f1f3 	udiv	r1, r6, r3
 8008116:	fb03 6711 	mls	r7, r3, r1, r6
 800811a:	5dc7      	ldrb	r7, [r0, r7]
 800811c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008120:	4637      	mov	r7, r6
 8008122:	42bb      	cmp	r3, r7
 8008124:	460e      	mov	r6, r1
 8008126:	d9f4      	bls.n	8008112 <_printf_i+0x116>
 8008128:	2b08      	cmp	r3, #8
 800812a:	d10b      	bne.n	8008144 <_printf_i+0x148>
 800812c:	6823      	ldr	r3, [r4, #0]
 800812e:	07de      	lsls	r6, r3, #31
 8008130:	d508      	bpl.n	8008144 <_printf_i+0x148>
 8008132:	6923      	ldr	r3, [r4, #16]
 8008134:	6861      	ldr	r1, [r4, #4]
 8008136:	4299      	cmp	r1, r3
 8008138:	bfde      	ittt	le
 800813a:	2330      	movle	r3, #48	; 0x30
 800813c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008140:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008144:	1b52      	subs	r2, r2, r5
 8008146:	6122      	str	r2, [r4, #16]
 8008148:	f8cd a000 	str.w	sl, [sp]
 800814c:	464b      	mov	r3, r9
 800814e:	aa03      	add	r2, sp, #12
 8008150:	4621      	mov	r1, r4
 8008152:	4640      	mov	r0, r8
 8008154:	f7ff fee4 	bl	8007f20 <_printf_common>
 8008158:	3001      	adds	r0, #1
 800815a:	d14a      	bne.n	80081f2 <_printf_i+0x1f6>
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	b004      	add	sp, #16
 8008162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	f043 0320 	orr.w	r3, r3, #32
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	4833      	ldr	r0, [pc, #204]	; (800823c <_printf_i+0x240>)
 8008170:	2778      	movs	r7, #120	; 0x78
 8008172:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	6829      	ldr	r1, [r5, #0]
 800817a:	061f      	lsls	r7, r3, #24
 800817c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008180:	d402      	bmi.n	8008188 <_printf_i+0x18c>
 8008182:	065f      	lsls	r7, r3, #25
 8008184:	bf48      	it	mi
 8008186:	b2b6      	uxthmi	r6, r6
 8008188:	07df      	lsls	r7, r3, #31
 800818a:	bf48      	it	mi
 800818c:	f043 0320 	orrmi.w	r3, r3, #32
 8008190:	6029      	str	r1, [r5, #0]
 8008192:	bf48      	it	mi
 8008194:	6023      	strmi	r3, [r4, #0]
 8008196:	b91e      	cbnz	r6, 80081a0 <_printf_i+0x1a4>
 8008198:	6823      	ldr	r3, [r4, #0]
 800819a:	f023 0320 	bic.w	r3, r3, #32
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	2310      	movs	r3, #16
 80081a2:	e7a7      	b.n	80080f4 <_printf_i+0xf8>
 80081a4:	4824      	ldr	r0, [pc, #144]	; (8008238 <_printf_i+0x23c>)
 80081a6:	e7e4      	b.n	8008172 <_printf_i+0x176>
 80081a8:	4615      	mov	r5, r2
 80081aa:	e7bd      	b.n	8008128 <_printf_i+0x12c>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	6826      	ldr	r6, [r4, #0]
 80081b0:	6961      	ldr	r1, [r4, #20]
 80081b2:	1d18      	adds	r0, r3, #4
 80081b4:	6028      	str	r0, [r5, #0]
 80081b6:	0635      	lsls	r5, r6, #24
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	d501      	bpl.n	80081c0 <_printf_i+0x1c4>
 80081bc:	6019      	str	r1, [r3, #0]
 80081be:	e002      	b.n	80081c6 <_printf_i+0x1ca>
 80081c0:	0670      	lsls	r0, r6, #25
 80081c2:	d5fb      	bpl.n	80081bc <_printf_i+0x1c0>
 80081c4:	8019      	strh	r1, [r3, #0]
 80081c6:	2300      	movs	r3, #0
 80081c8:	6123      	str	r3, [r4, #16]
 80081ca:	4615      	mov	r5, r2
 80081cc:	e7bc      	b.n	8008148 <_printf_i+0x14c>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	1d1a      	adds	r2, r3, #4
 80081d2:	602a      	str	r2, [r5, #0]
 80081d4:	681d      	ldr	r5, [r3, #0]
 80081d6:	6862      	ldr	r2, [r4, #4]
 80081d8:	2100      	movs	r1, #0
 80081da:	4628      	mov	r0, r5
 80081dc:	f7f8 f800 	bl	80001e0 <memchr>
 80081e0:	b108      	cbz	r0, 80081e6 <_printf_i+0x1ea>
 80081e2:	1b40      	subs	r0, r0, r5
 80081e4:	6060      	str	r0, [r4, #4]
 80081e6:	6863      	ldr	r3, [r4, #4]
 80081e8:	6123      	str	r3, [r4, #16]
 80081ea:	2300      	movs	r3, #0
 80081ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081f0:	e7aa      	b.n	8008148 <_printf_i+0x14c>
 80081f2:	6923      	ldr	r3, [r4, #16]
 80081f4:	462a      	mov	r2, r5
 80081f6:	4649      	mov	r1, r9
 80081f8:	4640      	mov	r0, r8
 80081fa:	47d0      	blx	sl
 80081fc:	3001      	adds	r0, #1
 80081fe:	d0ad      	beq.n	800815c <_printf_i+0x160>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	079b      	lsls	r3, r3, #30
 8008204:	d413      	bmi.n	800822e <_printf_i+0x232>
 8008206:	68e0      	ldr	r0, [r4, #12]
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	4298      	cmp	r0, r3
 800820c:	bfb8      	it	lt
 800820e:	4618      	movlt	r0, r3
 8008210:	e7a6      	b.n	8008160 <_printf_i+0x164>
 8008212:	2301      	movs	r3, #1
 8008214:	4632      	mov	r2, r6
 8008216:	4649      	mov	r1, r9
 8008218:	4640      	mov	r0, r8
 800821a:	47d0      	blx	sl
 800821c:	3001      	adds	r0, #1
 800821e:	d09d      	beq.n	800815c <_printf_i+0x160>
 8008220:	3501      	adds	r5, #1
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	9903      	ldr	r1, [sp, #12]
 8008226:	1a5b      	subs	r3, r3, r1
 8008228:	42ab      	cmp	r3, r5
 800822a:	dcf2      	bgt.n	8008212 <_printf_i+0x216>
 800822c:	e7eb      	b.n	8008206 <_printf_i+0x20a>
 800822e:	2500      	movs	r5, #0
 8008230:	f104 0619 	add.w	r6, r4, #25
 8008234:	e7f5      	b.n	8008222 <_printf_i+0x226>
 8008236:	bf00      	nop
 8008238:	0800ac12 	.word	0x0800ac12
 800823c:	0800ac23 	.word	0x0800ac23

08008240 <std>:
 8008240:	2300      	movs	r3, #0
 8008242:	b510      	push	{r4, lr}
 8008244:	4604      	mov	r4, r0
 8008246:	e9c0 3300 	strd	r3, r3, [r0]
 800824a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800824e:	6083      	str	r3, [r0, #8]
 8008250:	8181      	strh	r1, [r0, #12]
 8008252:	6643      	str	r3, [r0, #100]	; 0x64
 8008254:	81c2      	strh	r2, [r0, #14]
 8008256:	6183      	str	r3, [r0, #24]
 8008258:	4619      	mov	r1, r3
 800825a:	2208      	movs	r2, #8
 800825c:	305c      	adds	r0, #92	; 0x5c
 800825e:	f000 f928 	bl	80084b2 <memset>
 8008262:	4b0d      	ldr	r3, [pc, #52]	; (8008298 <std+0x58>)
 8008264:	6263      	str	r3, [r4, #36]	; 0x24
 8008266:	4b0d      	ldr	r3, [pc, #52]	; (800829c <std+0x5c>)
 8008268:	62a3      	str	r3, [r4, #40]	; 0x28
 800826a:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <std+0x60>)
 800826c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800826e:	4b0d      	ldr	r3, [pc, #52]	; (80082a4 <std+0x64>)
 8008270:	6323      	str	r3, [r4, #48]	; 0x30
 8008272:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <std+0x68>)
 8008274:	6224      	str	r4, [r4, #32]
 8008276:	429c      	cmp	r4, r3
 8008278:	d006      	beq.n	8008288 <std+0x48>
 800827a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800827e:	4294      	cmp	r4, r2
 8008280:	d002      	beq.n	8008288 <std+0x48>
 8008282:	33d0      	adds	r3, #208	; 0xd0
 8008284:	429c      	cmp	r4, r3
 8008286:	d105      	bne.n	8008294 <std+0x54>
 8008288:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008290:	f000 b9e0 	b.w	8008654 <__retarget_lock_init_recursive>
 8008294:	bd10      	pop	{r4, pc}
 8008296:	bf00      	nop
 8008298:	0800842d 	.word	0x0800842d
 800829c:	0800844f 	.word	0x0800844f
 80082a0:	08008487 	.word	0x08008487
 80082a4:	080084ab 	.word	0x080084ab
 80082a8:	20000790 	.word	0x20000790

080082ac <stdio_exit_handler>:
 80082ac:	4a02      	ldr	r2, [pc, #8]	; (80082b8 <stdio_exit_handler+0xc>)
 80082ae:	4903      	ldr	r1, [pc, #12]	; (80082bc <stdio_exit_handler+0x10>)
 80082b0:	4803      	ldr	r0, [pc, #12]	; (80082c0 <stdio_exit_handler+0x14>)
 80082b2:	f000 b869 	b.w	8008388 <_fwalk_sglue>
 80082b6:	bf00      	nop
 80082b8:	20000010 	.word	0x20000010
 80082bc:	08009ea1 	.word	0x08009ea1
 80082c0:	2000001c 	.word	0x2000001c

080082c4 <cleanup_stdio>:
 80082c4:	6841      	ldr	r1, [r0, #4]
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <cleanup_stdio+0x34>)
 80082c8:	4299      	cmp	r1, r3
 80082ca:	b510      	push	{r4, lr}
 80082cc:	4604      	mov	r4, r0
 80082ce:	d001      	beq.n	80082d4 <cleanup_stdio+0x10>
 80082d0:	f001 fde6 	bl	8009ea0 <_fflush_r>
 80082d4:	68a1      	ldr	r1, [r4, #8]
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <cleanup_stdio+0x38>)
 80082d8:	4299      	cmp	r1, r3
 80082da:	d002      	beq.n	80082e2 <cleanup_stdio+0x1e>
 80082dc:	4620      	mov	r0, r4
 80082de:	f001 fddf 	bl	8009ea0 <_fflush_r>
 80082e2:	68e1      	ldr	r1, [r4, #12]
 80082e4:	4b06      	ldr	r3, [pc, #24]	; (8008300 <cleanup_stdio+0x3c>)
 80082e6:	4299      	cmp	r1, r3
 80082e8:	d004      	beq.n	80082f4 <cleanup_stdio+0x30>
 80082ea:	4620      	mov	r0, r4
 80082ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f0:	f001 bdd6 	b.w	8009ea0 <_fflush_r>
 80082f4:	bd10      	pop	{r4, pc}
 80082f6:	bf00      	nop
 80082f8:	20000790 	.word	0x20000790
 80082fc:	200007f8 	.word	0x200007f8
 8008300:	20000860 	.word	0x20000860

08008304 <global_stdio_init.part.0>:
 8008304:	b510      	push	{r4, lr}
 8008306:	4b0b      	ldr	r3, [pc, #44]	; (8008334 <global_stdio_init.part.0+0x30>)
 8008308:	4c0b      	ldr	r4, [pc, #44]	; (8008338 <global_stdio_init.part.0+0x34>)
 800830a:	4a0c      	ldr	r2, [pc, #48]	; (800833c <global_stdio_init.part.0+0x38>)
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	4620      	mov	r0, r4
 8008310:	2200      	movs	r2, #0
 8008312:	2104      	movs	r1, #4
 8008314:	f7ff ff94 	bl	8008240 <std>
 8008318:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800831c:	2201      	movs	r2, #1
 800831e:	2109      	movs	r1, #9
 8008320:	f7ff ff8e 	bl	8008240 <std>
 8008324:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008328:	2202      	movs	r2, #2
 800832a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800832e:	2112      	movs	r1, #18
 8008330:	f7ff bf86 	b.w	8008240 <std>
 8008334:	200008c8 	.word	0x200008c8
 8008338:	20000790 	.word	0x20000790
 800833c:	080082ad 	.word	0x080082ad

08008340 <__sfp_lock_acquire>:
 8008340:	4801      	ldr	r0, [pc, #4]	; (8008348 <__sfp_lock_acquire+0x8>)
 8008342:	f000 b988 	b.w	8008656 <__retarget_lock_acquire_recursive>
 8008346:	bf00      	nop
 8008348:	200008d1 	.word	0x200008d1

0800834c <__sfp_lock_release>:
 800834c:	4801      	ldr	r0, [pc, #4]	; (8008354 <__sfp_lock_release+0x8>)
 800834e:	f000 b983 	b.w	8008658 <__retarget_lock_release_recursive>
 8008352:	bf00      	nop
 8008354:	200008d1 	.word	0x200008d1

08008358 <__sinit>:
 8008358:	b510      	push	{r4, lr}
 800835a:	4604      	mov	r4, r0
 800835c:	f7ff fff0 	bl	8008340 <__sfp_lock_acquire>
 8008360:	6a23      	ldr	r3, [r4, #32]
 8008362:	b11b      	cbz	r3, 800836c <__sinit+0x14>
 8008364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008368:	f7ff bff0 	b.w	800834c <__sfp_lock_release>
 800836c:	4b04      	ldr	r3, [pc, #16]	; (8008380 <__sinit+0x28>)
 800836e:	6223      	str	r3, [r4, #32]
 8008370:	4b04      	ldr	r3, [pc, #16]	; (8008384 <__sinit+0x2c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1f5      	bne.n	8008364 <__sinit+0xc>
 8008378:	f7ff ffc4 	bl	8008304 <global_stdio_init.part.0>
 800837c:	e7f2      	b.n	8008364 <__sinit+0xc>
 800837e:	bf00      	nop
 8008380:	080082c5 	.word	0x080082c5
 8008384:	200008c8 	.word	0x200008c8

08008388 <_fwalk_sglue>:
 8008388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800838c:	4607      	mov	r7, r0
 800838e:	4688      	mov	r8, r1
 8008390:	4614      	mov	r4, r2
 8008392:	2600      	movs	r6, #0
 8008394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008398:	f1b9 0901 	subs.w	r9, r9, #1
 800839c:	d505      	bpl.n	80083aa <_fwalk_sglue+0x22>
 800839e:	6824      	ldr	r4, [r4, #0]
 80083a0:	2c00      	cmp	r4, #0
 80083a2:	d1f7      	bne.n	8008394 <_fwalk_sglue+0xc>
 80083a4:	4630      	mov	r0, r6
 80083a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083aa:	89ab      	ldrh	r3, [r5, #12]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d907      	bls.n	80083c0 <_fwalk_sglue+0x38>
 80083b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083b4:	3301      	adds	r3, #1
 80083b6:	d003      	beq.n	80083c0 <_fwalk_sglue+0x38>
 80083b8:	4629      	mov	r1, r5
 80083ba:	4638      	mov	r0, r7
 80083bc:	47c0      	blx	r8
 80083be:	4306      	orrs	r6, r0
 80083c0:	3568      	adds	r5, #104	; 0x68
 80083c2:	e7e9      	b.n	8008398 <_fwalk_sglue+0x10>

080083c4 <sniprintf>:
 80083c4:	b40c      	push	{r2, r3}
 80083c6:	b530      	push	{r4, r5, lr}
 80083c8:	4b17      	ldr	r3, [pc, #92]	; (8008428 <sniprintf+0x64>)
 80083ca:	1e0c      	subs	r4, r1, #0
 80083cc:	681d      	ldr	r5, [r3, #0]
 80083ce:	b09d      	sub	sp, #116	; 0x74
 80083d0:	da08      	bge.n	80083e4 <sniprintf+0x20>
 80083d2:	238b      	movs	r3, #139	; 0x8b
 80083d4:	602b      	str	r3, [r5, #0]
 80083d6:	f04f 30ff 	mov.w	r0, #4294967295
 80083da:	b01d      	add	sp, #116	; 0x74
 80083dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e0:	b002      	add	sp, #8
 80083e2:	4770      	bx	lr
 80083e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80083e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80083ec:	bf14      	ite	ne
 80083ee:	f104 33ff 	addne.w	r3, r4, #4294967295
 80083f2:	4623      	moveq	r3, r4
 80083f4:	9304      	str	r3, [sp, #16]
 80083f6:	9307      	str	r3, [sp, #28]
 80083f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80083fc:	9002      	str	r0, [sp, #8]
 80083fe:	9006      	str	r0, [sp, #24]
 8008400:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008406:	ab21      	add	r3, sp, #132	; 0x84
 8008408:	a902      	add	r1, sp, #8
 800840a:	4628      	mov	r0, r5
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	f001 fbc3 	bl	8009b98 <_svfiprintf_r>
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	bfbc      	itt	lt
 8008416:	238b      	movlt	r3, #139	; 0x8b
 8008418:	602b      	strlt	r3, [r5, #0]
 800841a:	2c00      	cmp	r4, #0
 800841c:	d0dd      	beq.n	80083da <sniprintf+0x16>
 800841e:	9b02      	ldr	r3, [sp, #8]
 8008420:	2200      	movs	r2, #0
 8008422:	701a      	strb	r2, [r3, #0]
 8008424:	e7d9      	b.n	80083da <sniprintf+0x16>
 8008426:	bf00      	nop
 8008428:	20000068 	.word	0x20000068

0800842c <__sread>:
 800842c:	b510      	push	{r4, lr}
 800842e:	460c      	mov	r4, r1
 8008430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008434:	f000 f89c 	bl	8008570 <_read_r>
 8008438:	2800      	cmp	r0, #0
 800843a:	bfab      	itete	ge
 800843c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800843e:	89a3      	ldrhlt	r3, [r4, #12]
 8008440:	181b      	addge	r3, r3, r0
 8008442:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008446:	bfac      	ite	ge
 8008448:	6563      	strge	r3, [r4, #84]	; 0x54
 800844a:	81a3      	strhlt	r3, [r4, #12]
 800844c:	bd10      	pop	{r4, pc}

0800844e <__swrite>:
 800844e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008452:	461f      	mov	r7, r3
 8008454:	898b      	ldrh	r3, [r1, #12]
 8008456:	05db      	lsls	r3, r3, #23
 8008458:	4605      	mov	r5, r0
 800845a:	460c      	mov	r4, r1
 800845c:	4616      	mov	r6, r2
 800845e:	d505      	bpl.n	800846c <__swrite+0x1e>
 8008460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008464:	2302      	movs	r3, #2
 8008466:	2200      	movs	r2, #0
 8008468:	f000 f870 	bl	800854c <_lseek_r>
 800846c:	89a3      	ldrh	r3, [r4, #12]
 800846e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008476:	81a3      	strh	r3, [r4, #12]
 8008478:	4632      	mov	r2, r6
 800847a:	463b      	mov	r3, r7
 800847c:	4628      	mov	r0, r5
 800847e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008482:	f000 b8ab 	b.w	80085dc <_write_r>

08008486 <__sseek>:
 8008486:	b510      	push	{r4, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800848e:	f000 f85d 	bl	800854c <_lseek_r>
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	89a3      	ldrh	r3, [r4, #12]
 8008496:	bf15      	itete	ne
 8008498:	6560      	strne	r0, [r4, #84]	; 0x54
 800849a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800849e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80084a2:	81a3      	strheq	r3, [r4, #12]
 80084a4:	bf18      	it	ne
 80084a6:	81a3      	strhne	r3, [r4, #12]
 80084a8:	bd10      	pop	{r4, pc}

080084aa <__sclose>:
 80084aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084ae:	f000 b83d 	b.w	800852c <_close_r>

080084b2 <memset>:
 80084b2:	4402      	add	r2, r0
 80084b4:	4603      	mov	r3, r0
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d100      	bne.n	80084bc <memset+0xa>
 80084ba:	4770      	bx	lr
 80084bc:	f803 1b01 	strb.w	r1, [r3], #1
 80084c0:	e7f9      	b.n	80084b6 <memset+0x4>

080084c2 <_raise_r>:
 80084c2:	291f      	cmp	r1, #31
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4604      	mov	r4, r0
 80084c8:	460d      	mov	r5, r1
 80084ca:	d904      	bls.n	80084d6 <_raise_r+0x14>
 80084cc:	2316      	movs	r3, #22
 80084ce:	6003      	str	r3, [r0, #0]
 80084d0:	f04f 30ff 	mov.w	r0, #4294967295
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80084d8:	b112      	cbz	r2, 80084e0 <_raise_r+0x1e>
 80084da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084de:	b94b      	cbnz	r3, 80084f4 <_raise_r+0x32>
 80084e0:	4620      	mov	r0, r4
 80084e2:	f000 f869 	bl	80085b8 <_getpid_r>
 80084e6:	462a      	mov	r2, r5
 80084e8:	4601      	mov	r1, r0
 80084ea:	4620      	mov	r0, r4
 80084ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084f0:	f000 b850 	b.w	8008594 <_kill_r>
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d00a      	beq.n	800850e <_raise_r+0x4c>
 80084f8:	1c59      	adds	r1, r3, #1
 80084fa:	d103      	bne.n	8008504 <_raise_r+0x42>
 80084fc:	2316      	movs	r3, #22
 80084fe:	6003      	str	r3, [r0, #0]
 8008500:	2001      	movs	r0, #1
 8008502:	e7e7      	b.n	80084d4 <_raise_r+0x12>
 8008504:	2400      	movs	r4, #0
 8008506:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800850a:	4628      	mov	r0, r5
 800850c:	4798      	blx	r3
 800850e:	2000      	movs	r0, #0
 8008510:	e7e0      	b.n	80084d4 <_raise_r+0x12>
	...

08008514 <raise>:
 8008514:	4b02      	ldr	r3, [pc, #8]	; (8008520 <raise+0xc>)
 8008516:	4601      	mov	r1, r0
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	f7ff bfd2 	b.w	80084c2 <_raise_r>
 800851e:	bf00      	nop
 8008520:	20000068 	.word	0x20000068

08008524 <_localeconv_r>:
 8008524:	4800      	ldr	r0, [pc, #0]	; (8008528 <_localeconv_r+0x4>)
 8008526:	4770      	bx	lr
 8008528:	2000015c 	.word	0x2000015c

0800852c <_close_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d06      	ldr	r5, [pc, #24]	; (8008548 <_close_r+0x1c>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	f7f9 ff2d 	bl	8002396 <_close>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_close_r+0x1a>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_close_r+0x1a>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	200008cc 	.word	0x200008cc

0800854c <_lseek_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d07      	ldr	r5, [pc, #28]	; (800856c <_lseek_r+0x20>)
 8008550:	4604      	mov	r4, r0
 8008552:	4608      	mov	r0, r1
 8008554:	4611      	mov	r1, r2
 8008556:	2200      	movs	r2, #0
 8008558:	602a      	str	r2, [r5, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	f7f9 ff42 	bl	80023e4 <_lseek>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d102      	bne.n	800856a <_lseek_r+0x1e>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	b103      	cbz	r3, 800856a <_lseek_r+0x1e>
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	200008cc 	.word	0x200008cc

08008570 <_read_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d07      	ldr	r5, [pc, #28]	; (8008590 <_read_r+0x20>)
 8008574:	4604      	mov	r4, r0
 8008576:	4608      	mov	r0, r1
 8008578:	4611      	mov	r1, r2
 800857a:	2200      	movs	r2, #0
 800857c:	602a      	str	r2, [r5, #0]
 800857e:	461a      	mov	r2, r3
 8008580:	f7f9 fed0 	bl	8002324 <_read>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d102      	bne.n	800858e <_read_r+0x1e>
 8008588:	682b      	ldr	r3, [r5, #0]
 800858a:	b103      	cbz	r3, 800858e <_read_r+0x1e>
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	bd38      	pop	{r3, r4, r5, pc}
 8008590:	200008cc 	.word	0x200008cc

08008594 <_kill_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d07      	ldr	r5, [pc, #28]	; (80085b4 <_kill_r+0x20>)
 8008598:	2300      	movs	r3, #0
 800859a:	4604      	mov	r4, r0
 800859c:	4608      	mov	r0, r1
 800859e:	4611      	mov	r1, r2
 80085a0:	602b      	str	r3, [r5, #0]
 80085a2:	f7f9 fea5 	bl	80022f0 <_kill>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	d102      	bne.n	80085b0 <_kill_r+0x1c>
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	b103      	cbz	r3, 80085b0 <_kill_r+0x1c>
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	bd38      	pop	{r3, r4, r5, pc}
 80085b2:	bf00      	nop
 80085b4:	200008cc 	.word	0x200008cc

080085b8 <_getpid_r>:
 80085b8:	f7f9 be92 	b.w	80022e0 <_getpid>

080085bc <_sbrk_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d06      	ldr	r5, [pc, #24]	; (80085d8 <_sbrk_r+0x1c>)
 80085c0:	2300      	movs	r3, #0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f9 ff1a 	bl	8002400 <_sbrk>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_sbrk_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_sbrk_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	200008cc 	.word	0x200008cc

080085dc <_write_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d07      	ldr	r5, [pc, #28]	; (80085fc <_write_r+0x20>)
 80085e0:	4604      	mov	r4, r0
 80085e2:	4608      	mov	r0, r1
 80085e4:	4611      	mov	r1, r2
 80085e6:	2200      	movs	r2, #0
 80085e8:	602a      	str	r2, [r5, #0]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f7f9 feb7 	bl	800235e <_write>
 80085f0:	1c43      	adds	r3, r0, #1
 80085f2:	d102      	bne.n	80085fa <_write_r+0x1e>
 80085f4:	682b      	ldr	r3, [r5, #0]
 80085f6:	b103      	cbz	r3, 80085fa <_write_r+0x1e>
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	200008cc 	.word	0x200008cc

08008600 <__errno>:
 8008600:	4b01      	ldr	r3, [pc, #4]	; (8008608 <__errno+0x8>)
 8008602:	6818      	ldr	r0, [r3, #0]
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	20000068 	.word	0x20000068

0800860c <__libc_init_array>:
 800860c:	b570      	push	{r4, r5, r6, lr}
 800860e:	4d0d      	ldr	r5, [pc, #52]	; (8008644 <__libc_init_array+0x38>)
 8008610:	4c0d      	ldr	r4, [pc, #52]	; (8008648 <__libc_init_array+0x3c>)
 8008612:	1b64      	subs	r4, r4, r5
 8008614:	10a4      	asrs	r4, r4, #2
 8008616:	2600      	movs	r6, #0
 8008618:	42a6      	cmp	r6, r4
 800861a:	d109      	bne.n	8008630 <__libc_init_array+0x24>
 800861c:	4d0b      	ldr	r5, [pc, #44]	; (800864c <__libc_init_array+0x40>)
 800861e:	4c0c      	ldr	r4, [pc, #48]	; (8008650 <__libc_init_array+0x44>)
 8008620:	f001 ff88 	bl	800a534 <_init>
 8008624:	1b64      	subs	r4, r4, r5
 8008626:	10a4      	asrs	r4, r4, #2
 8008628:	2600      	movs	r6, #0
 800862a:	42a6      	cmp	r6, r4
 800862c:	d105      	bne.n	800863a <__libc_init_array+0x2e>
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	f855 3b04 	ldr.w	r3, [r5], #4
 8008634:	4798      	blx	r3
 8008636:	3601      	adds	r6, #1
 8008638:	e7ee      	b.n	8008618 <__libc_init_array+0xc>
 800863a:	f855 3b04 	ldr.w	r3, [r5], #4
 800863e:	4798      	blx	r3
 8008640:	3601      	adds	r6, #1
 8008642:	e7f2      	b.n	800862a <__libc_init_array+0x1e>
 8008644:	0800af74 	.word	0x0800af74
 8008648:	0800af74 	.word	0x0800af74
 800864c:	0800af74 	.word	0x0800af74
 8008650:	0800af78 	.word	0x0800af78

08008654 <__retarget_lock_init_recursive>:
 8008654:	4770      	bx	lr

08008656 <__retarget_lock_acquire_recursive>:
 8008656:	4770      	bx	lr

08008658 <__retarget_lock_release_recursive>:
 8008658:	4770      	bx	lr

0800865a <quorem>:
 800865a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865e:	6903      	ldr	r3, [r0, #16]
 8008660:	690c      	ldr	r4, [r1, #16]
 8008662:	42a3      	cmp	r3, r4
 8008664:	4607      	mov	r7, r0
 8008666:	db7e      	blt.n	8008766 <quorem+0x10c>
 8008668:	3c01      	subs	r4, #1
 800866a:	f101 0814 	add.w	r8, r1, #20
 800866e:	f100 0514 	add.w	r5, r0, #20
 8008672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800867c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008680:	3301      	adds	r3, #1
 8008682:	429a      	cmp	r2, r3
 8008684:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008688:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800868c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008690:	d331      	bcc.n	80086f6 <quorem+0x9c>
 8008692:	f04f 0e00 	mov.w	lr, #0
 8008696:	4640      	mov	r0, r8
 8008698:	46ac      	mov	ip, r5
 800869a:	46f2      	mov	sl, lr
 800869c:	f850 2b04 	ldr.w	r2, [r0], #4
 80086a0:	b293      	uxth	r3, r2
 80086a2:	fb06 e303 	mla	r3, r6, r3, lr
 80086a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086aa:	0c1a      	lsrs	r2, r3, #16
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	ebaa 0303 	sub.w	r3, sl, r3
 80086b2:	f8dc a000 	ldr.w	sl, [ip]
 80086b6:	fa13 f38a 	uxtah	r3, r3, sl
 80086ba:	fb06 220e 	mla	r2, r6, lr, r2
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	9b00      	ldr	r3, [sp, #0]
 80086c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086c6:	b292      	uxth	r2, r2
 80086c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80086cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80086d4:	4581      	cmp	r9, r0
 80086d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086da:	f84c 3b04 	str.w	r3, [ip], #4
 80086de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086e2:	d2db      	bcs.n	800869c <quorem+0x42>
 80086e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80086e8:	b92b      	cbnz	r3, 80086f6 <quorem+0x9c>
 80086ea:	9b01      	ldr	r3, [sp, #4]
 80086ec:	3b04      	subs	r3, #4
 80086ee:	429d      	cmp	r5, r3
 80086f0:	461a      	mov	r2, r3
 80086f2:	d32c      	bcc.n	800874e <quorem+0xf4>
 80086f4:	613c      	str	r4, [r7, #16]
 80086f6:	4638      	mov	r0, r7
 80086f8:	f001 f8f4 	bl	80098e4 <__mcmp>
 80086fc:	2800      	cmp	r0, #0
 80086fe:	db22      	blt.n	8008746 <quorem+0xec>
 8008700:	3601      	adds	r6, #1
 8008702:	4629      	mov	r1, r5
 8008704:	2000      	movs	r0, #0
 8008706:	f858 2b04 	ldr.w	r2, [r8], #4
 800870a:	f8d1 c000 	ldr.w	ip, [r1]
 800870e:	b293      	uxth	r3, r2
 8008710:	1ac3      	subs	r3, r0, r3
 8008712:	0c12      	lsrs	r2, r2, #16
 8008714:	fa13 f38c 	uxtah	r3, r3, ip
 8008718:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800871c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008720:	b29b      	uxth	r3, r3
 8008722:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008726:	45c1      	cmp	r9, r8
 8008728:	f841 3b04 	str.w	r3, [r1], #4
 800872c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008730:	d2e9      	bcs.n	8008706 <quorem+0xac>
 8008732:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008736:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800873a:	b922      	cbnz	r2, 8008746 <quorem+0xec>
 800873c:	3b04      	subs	r3, #4
 800873e:	429d      	cmp	r5, r3
 8008740:	461a      	mov	r2, r3
 8008742:	d30a      	bcc.n	800875a <quorem+0x100>
 8008744:	613c      	str	r4, [r7, #16]
 8008746:	4630      	mov	r0, r6
 8008748:	b003      	add	sp, #12
 800874a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	3b04      	subs	r3, #4
 8008752:	2a00      	cmp	r2, #0
 8008754:	d1ce      	bne.n	80086f4 <quorem+0x9a>
 8008756:	3c01      	subs	r4, #1
 8008758:	e7c9      	b.n	80086ee <quorem+0x94>
 800875a:	6812      	ldr	r2, [r2, #0]
 800875c:	3b04      	subs	r3, #4
 800875e:	2a00      	cmp	r2, #0
 8008760:	d1f0      	bne.n	8008744 <quorem+0xea>
 8008762:	3c01      	subs	r4, #1
 8008764:	e7eb      	b.n	800873e <quorem+0xe4>
 8008766:	2000      	movs	r0, #0
 8008768:	e7ee      	b.n	8008748 <quorem+0xee>
 800876a:	0000      	movs	r0, r0
 800876c:	0000      	movs	r0, r0
	...

08008770 <_dtoa_r>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	ed2d 8b04 	vpush	{d8-d9}
 8008778:	69c5      	ldr	r5, [r0, #28]
 800877a:	b093      	sub	sp, #76	; 0x4c
 800877c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008780:	ec57 6b10 	vmov	r6, r7, d0
 8008784:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008788:	9107      	str	r1, [sp, #28]
 800878a:	4604      	mov	r4, r0
 800878c:	920a      	str	r2, [sp, #40]	; 0x28
 800878e:	930d      	str	r3, [sp, #52]	; 0x34
 8008790:	b975      	cbnz	r5, 80087b0 <_dtoa_r+0x40>
 8008792:	2010      	movs	r0, #16
 8008794:	f7ff f832 	bl	80077fc <malloc>
 8008798:	4602      	mov	r2, r0
 800879a:	61e0      	str	r0, [r4, #28]
 800879c:	b920      	cbnz	r0, 80087a8 <_dtoa_r+0x38>
 800879e:	4bae      	ldr	r3, [pc, #696]	; (8008a58 <_dtoa_r+0x2e8>)
 80087a0:	21ef      	movs	r1, #239	; 0xef
 80087a2:	48ae      	ldr	r0, [pc, #696]	; (8008a5c <_dtoa_r+0x2ec>)
 80087a4:	f001 fbcc 	bl	8009f40 <__assert_func>
 80087a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80087ac:	6005      	str	r5, [r0, #0]
 80087ae:	60c5      	str	r5, [r0, #12]
 80087b0:	69e3      	ldr	r3, [r4, #28]
 80087b2:	6819      	ldr	r1, [r3, #0]
 80087b4:	b151      	cbz	r1, 80087cc <_dtoa_r+0x5c>
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	604a      	str	r2, [r1, #4]
 80087ba:	2301      	movs	r3, #1
 80087bc:	4093      	lsls	r3, r2
 80087be:	608b      	str	r3, [r1, #8]
 80087c0:	4620      	mov	r0, r4
 80087c2:	f000 fe53 	bl	800946c <_Bfree>
 80087c6:	69e3      	ldr	r3, [r4, #28]
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	1e3b      	subs	r3, r7, #0
 80087ce:	bfbb      	ittet	lt
 80087d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087d4:	9303      	strlt	r3, [sp, #12]
 80087d6:	2300      	movge	r3, #0
 80087d8:	2201      	movlt	r2, #1
 80087da:	bfac      	ite	ge
 80087dc:	f8c8 3000 	strge.w	r3, [r8]
 80087e0:	f8c8 2000 	strlt.w	r2, [r8]
 80087e4:	4b9e      	ldr	r3, [pc, #632]	; (8008a60 <_dtoa_r+0x2f0>)
 80087e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087ea:	ea33 0308 	bics.w	r3, r3, r8
 80087ee:	d11b      	bne.n	8008828 <_dtoa_r+0xb8>
 80087f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80087fc:	4333      	orrs	r3, r6
 80087fe:	f000 8593 	beq.w	8009328 <_dtoa_r+0xbb8>
 8008802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008804:	b963      	cbnz	r3, 8008820 <_dtoa_r+0xb0>
 8008806:	4b97      	ldr	r3, [pc, #604]	; (8008a64 <_dtoa_r+0x2f4>)
 8008808:	e027      	b.n	800885a <_dtoa_r+0xea>
 800880a:	4b97      	ldr	r3, [pc, #604]	; (8008a68 <_dtoa_r+0x2f8>)
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	3308      	adds	r3, #8
 8008810:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	9800      	ldr	r0, [sp, #0]
 8008816:	b013      	add	sp, #76	; 0x4c
 8008818:	ecbd 8b04 	vpop	{d8-d9}
 800881c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008820:	4b90      	ldr	r3, [pc, #576]	; (8008a64 <_dtoa_r+0x2f4>)
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	3303      	adds	r3, #3
 8008826:	e7f3      	b.n	8008810 <_dtoa_r+0xa0>
 8008828:	ed9d 7b02 	vldr	d7, [sp, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	ec51 0b17 	vmov	r0, r1, d7
 8008832:	eeb0 8a47 	vmov.f32	s16, s14
 8008836:	eef0 8a67 	vmov.f32	s17, s15
 800883a:	2300      	movs	r3, #0
 800883c:	f7f8 f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008840:	4681      	mov	r9, r0
 8008842:	b160      	cbz	r0, 800885e <_dtoa_r+0xee>
 8008844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008846:	2301      	movs	r3, #1
 8008848:	6013      	str	r3, [r2, #0]
 800884a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 8568 	beq.w	8009322 <_dtoa_r+0xbb2>
 8008852:	4b86      	ldr	r3, [pc, #536]	; (8008a6c <_dtoa_r+0x2fc>)
 8008854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008856:	6013      	str	r3, [r2, #0]
 8008858:	3b01      	subs	r3, #1
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	e7da      	b.n	8008814 <_dtoa_r+0xa4>
 800885e:	aa10      	add	r2, sp, #64	; 0x40
 8008860:	a911      	add	r1, sp, #68	; 0x44
 8008862:	4620      	mov	r0, r4
 8008864:	eeb0 0a48 	vmov.f32	s0, s16
 8008868:	eef0 0a68 	vmov.f32	s1, s17
 800886c:	f001 f8e0 	bl	8009a30 <__d2b>
 8008870:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008874:	4682      	mov	sl, r0
 8008876:	2d00      	cmp	r5, #0
 8008878:	d07f      	beq.n	800897a <_dtoa_r+0x20a>
 800887a:	ee18 3a90 	vmov	r3, s17
 800887e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008882:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008886:	ec51 0b18 	vmov	r0, r1, d8
 800888a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800888e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008892:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008896:	4619      	mov	r1, r3
 8008898:	2200      	movs	r2, #0
 800889a:	4b75      	ldr	r3, [pc, #468]	; (8008a70 <_dtoa_r+0x300>)
 800889c:	f7f7 fcfc 	bl	8000298 <__aeabi_dsub>
 80088a0:	a367      	add	r3, pc, #412	; (adr r3, 8008a40 <_dtoa_r+0x2d0>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	f7f7 feaf 	bl	8000608 <__aeabi_dmul>
 80088aa:	a367      	add	r3, pc, #412	; (adr r3, 8008a48 <_dtoa_r+0x2d8>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f7f7 fcf4 	bl	800029c <__adddf3>
 80088b4:	4606      	mov	r6, r0
 80088b6:	4628      	mov	r0, r5
 80088b8:	460f      	mov	r7, r1
 80088ba:	f7f7 fe3b 	bl	8000534 <__aeabi_i2d>
 80088be:	a364      	add	r3, pc, #400	; (adr r3, 8008a50 <_dtoa_r+0x2e0>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fea0 	bl	8000608 <__aeabi_dmul>
 80088c8:	4602      	mov	r2, r0
 80088ca:	460b      	mov	r3, r1
 80088cc:	4630      	mov	r0, r6
 80088ce:	4639      	mov	r1, r7
 80088d0:	f7f7 fce4 	bl	800029c <__adddf3>
 80088d4:	4606      	mov	r6, r0
 80088d6:	460f      	mov	r7, r1
 80088d8:	f7f8 f946 	bl	8000b68 <__aeabi_d2iz>
 80088dc:	2200      	movs	r2, #0
 80088de:	4683      	mov	fp, r0
 80088e0:	2300      	movs	r3, #0
 80088e2:	4630      	mov	r0, r6
 80088e4:	4639      	mov	r1, r7
 80088e6:	f7f8 f901 	bl	8000aec <__aeabi_dcmplt>
 80088ea:	b148      	cbz	r0, 8008900 <_dtoa_r+0x190>
 80088ec:	4658      	mov	r0, fp
 80088ee:	f7f7 fe21 	bl	8000534 <__aeabi_i2d>
 80088f2:	4632      	mov	r2, r6
 80088f4:	463b      	mov	r3, r7
 80088f6:	f7f8 f8ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80088fa:	b908      	cbnz	r0, 8008900 <_dtoa_r+0x190>
 80088fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008900:	f1bb 0f16 	cmp.w	fp, #22
 8008904:	d857      	bhi.n	80089b6 <_dtoa_r+0x246>
 8008906:	4b5b      	ldr	r3, [pc, #364]	; (8008a74 <_dtoa_r+0x304>)
 8008908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800890c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008910:	ec51 0b18 	vmov	r0, r1, d8
 8008914:	f7f8 f8ea 	bl	8000aec <__aeabi_dcmplt>
 8008918:	2800      	cmp	r0, #0
 800891a:	d04e      	beq.n	80089ba <_dtoa_r+0x24a>
 800891c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008920:	2300      	movs	r3, #0
 8008922:	930c      	str	r3, [sp, #48]	; 0x30
 8008924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008926:	1b5b      	subs	r3, r3, r5
 8008928:	1e5a      	subs	r2, r3, #1
 800892a:	bf45      	ittet	mi
 800892c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008930:	9305      	strmi	r3, [sp, #20]
 8008932:	2300      	movpl	r3, #0
 8008934:	2300      	movmi	r3, #0
 8008936:	9206      	str	r2, [sp, #24]
 8008938:	bf54      	ite	pl
 800893a:	9305      	strpl	r3, [sp, #20]
 800893c:	9306      	strmi	r3, [sp, #24]
 800893e:	f1bb 0f00 	cmp.w	fp, #0
 8008942:	db3c      	blt.n	80089be <_dtoa_r+0x24e>
 8008944:	9b06      	ldr	r3, [sp, #24]
 8008946:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800894a:	445b      	add	r3, fp
 800894c:	9306      	str	r3, [sp, #24]
 800894e:	2300      	movs	r3, #0
 8008950:	9308      	str	r3, [sp, #32]
 8008952:	9b07      	ldr	r3, [sp, #28]
 8008954:	2b09      	cmp	r3, #9
 8008956:	d868      	bhi.n	8008a2a <_dtoa_r+0x2ba>
 8008958:	2b05      	cmp	r3, #5
 800895a:	bfc4      	itt	gt
 800895c:	3b04      	subgt	r3, #4
 800895e:	9307      	strgt	r3, [sp, #28]
 8008960:	9b07      	ldr	r3, [sp, #28]
 8008962:	f1a3 0302 	sub.w	r3, r3, #2
 8008966:	bfcc      	ite	gt
 8008968:	2500      	movgt	r5, #0
 800896a:	2501      	movle	r5, #1
 800896c:	2b03      	cmp	r3, #3
 800896e:	f200 8085 	bhi.w	8008a7c <_dtoa_r+0x30c>
 8008972:	e8df f003 	tbb	[pc, r3]
 8008976:	3b2e      	.short	0x3b2e
 8008978:	5839      	.short	0x5839
 800897a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800897e:	441d      	add	r5, r3
 8008980:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008984:	2b20      	cmp	r3, #32
 8008986:	bfc1      	itttt	gt
 8008988:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800898c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008990:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008994:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008998:	bfd6      	itet	le
 800899a:	f1c3 0320 	rsble	r3, r3, #32
 800899e:	ea48 0003 	orrgt.w	r0, r8, r3
 80089a2:	fa06 f003 	lslle.w	r0, r6, r3
 80089a6:	f7f7 fdb5 	bl	8000514 <__aeabi_ui2d>
 80089aa:	2201      	movs	r2, #1
 80089ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80089b0:	3d01      	subs	r5, #1
 80089b2:	920e      	str	r2, [sp, #56]	; 0x38
 80089b4:	e76f      	b.n	8008896 <_dtoa_r+0x126>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e7b3      	b.n	8008922 <_dtoa_r+0x1b2>
 80089ba:	900c      	str	r0, [sp, #48]	; 0x30
 80089bc:	e7b2      	b.n	8008924 <_dtoa_r+0x1b4>
 80089be:	9b05      	ldr	r3, [sp, #20]
 80089c0:	eba3 030b 	sub.w	r3, r3, fp
 80089c4:	9305      	str	r3, [sp, #20]
 80089c6:	f1cb 0300 	rsb	r3, fp, #0
 80089ca:	9308      	str	r3, [sp, #32]
 80089cc:	2300      	movs	r3, #0
 80089ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80089d0:	e7bf      	b.n	8008952 <_dtoa_r+0x1e2>
 80089d2:	2300      	movs	r3, #0
 80089d4:	9309      	str	r3, [sp, #36]	; 0x24
 80089d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d8:	2b00      	cmp	r3, #0
 80089da:	dc52      	bgt.n	8008a82 <_dtoa_r+0x312>
 80089dc:	2301      	movs	r3, #1
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	9304      	str	r3, [sp, #16]
 80089e2:	461a      	mov	r2, r3
 80089e4:	920a      	str	r2, [sp, #40]	; 0x28
 80089e6:	e00b      	b.n	8008a00 <_dtoa_r+0x290>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e7f3      	b.n	80089d4 <_dtoa_r+0x264>
 80089ec:	2300      	movs	r3, #0
 80089ee:	9309      	str	r3, [sp, #36]	; 0x24
 80089f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f2:	445b      	add	r3, fp
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	3301      	adds	r3, #1
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	bfb8      	it	lt
 80089fe:	2301      	movlt	r3, #1
 8008a00:	69e0      	ldr	r0, [r4, #28]
 8008a02:	2100      	movs	r1, #0
 8008a04:	2204      	movs	r2, #4
 8008a06:	f102 0614 	add.w	r6, r2, #20
 8008a0a:	429e      	cmp	r6, r3
 8008a0c:	d93d      	bls.n	8008a8a <_dtoa_r+0x31a>
 8008a0e:	6041      	str	r1, [r0, #4]
 8008a10:	4620      	mov	r0, r4
 8008a12:	f000 fceb 	bl	80093ec <_Balloc>
 8008a16:	9000      	str	r0, [sp, #0]
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d139      	bne.n	8008a90 <_dtoa_r+0x320>
 8008a1c:	4b16      	ldr	r3, [pc, #88]	; (8008a78 <_dtoa_r+0x308>)
 8008a1e:	4602      	mov	r2, r0
 8008a20:	f240 11af 	movw	r1, #431	; 0x1af
 8008a24:	e6bd      	b.n	80087a2 <_dtoa_r+0x32>
 8008a26:	2301      	movs	r3, #1
 8008a28:	e7e1      	b.n	80089ee <_dtoa_r+0x27e>
 8008a2a:	2501      	movs	r5, #1
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9307      	str	r3, [sp, #28]
 8008a30:	9509      	str	r5, [sp, #36]	; 0x24
 8008a32:	f04f 33ff 	mov.w	r3, #4294967295
 8008a36:	9301      	str	r3, [sp, #4]
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2312      	movs	r3, #18
 8008a3e:	e7d1      	b.n	80089e4 <_dtoa_r+0x274>
 8008a40:	636f4361 	.word	0x636f4361
 8008a44:	3fd287a7 	.word	0x3fd287a7
 8008a48:	8b60c8b3 	.word	0x8b60c8b3
 8008a4c:	3fc68a28 	.word	0x3fc68a28
 8008a50:	509f79fb 	.word	0x509f79fb
 8008a54:	3fd34413 	.word	0x3fd34413
 8008a58:	0800ac41 	.word	0x0800ac41
 8008a5c:	0800ac58 	.word	0x0800ac58
 8008a60:	7ff00000 	.word	0x7ff00000
 8008a64:	0800ac3d 	.word	0x0800ac3d
 8008a68:	0800ac34 	.word	0x0800ac34
 8008a6c:	0800ac11 	.word	0x0800ac11
 8008a70:	3ff80000 	.word	0x3ff80000
 8008a74:	0800ad48 	.word	0x0800ad48
 8008a78:	0800acb0 	.word	0x0800acb0
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a80:	e7d7      	b.n	8008a32 <_dtoa_r+0x2c2>
 8008a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	9304      	str	r3, [sp, #16]
 8008a88:	e7ba      	b.n	8008a00 <_dtoa_r+0x290>
 8008a8a:	3101      	adds	r1, #1
 8008a8c:	0052      	lsls	r2, r2, #1
 8008a8e:	e7ba      	b.n	8008a06 <_dtoa_r+0x296>
 8008a90:	69e3      	ldr	r3, [r4, #28]
 8008a92:	9a00      	ldr	r2, [sp, #0]
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	2b0e      	cmp	r3, #14
 8008a9a:	f200 80a8 	bhi.w	8008bee <_dtoa_r+0x47e>
 8008a9e:	2d00      	cmp	r5, #0
 8008aa0:	f000 80a5 	beq.w	8008bee <_dtoa_r+0x47e>
 8008aa4:	f1bb 0f00 	cmp.w	fp, #0
 8008aa8:	dd38      	ble.n	8008b1c <_dtoa_r+0x3ac>
 8008aaa:	4bc0      	ldr	r3, [pc, #768]	; (8008dac <_dtoa_r+0x63c>)
 8008aac:	f00b 020f 	and.w	r2, fp, #15
 8008ab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ab4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ab8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008abc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008ac0:	d019      	beq.n	8008af6 <_dtoa_r+0x386>
 8008ac2:	4bbb      	ldr	r3, [pc, #748]	; (8008db0 <_dtoa_r+0x640>)
 8008ac4:	ec51 0b18 	vmov	r0, r1, d8
 8008ac8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008acc:	f7f7 fec6 	bl	800085c <__aeabi_ddiv>
 8008ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad4:	f008 080f 	and.w	r8, r8, #15
 8008ad8:	2503      	movs	r5, #3
 8008ada:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008db0 <_dtoa_r+0x640>
 8008ade:	f1b8 0f00 	cmp.w	r8, #0
 8008ae2:	d10a      	bne.n	8008afa <_dtoa_r+0x38a>
 8008ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ae8:	4632      	mov	r2, r6
 8008aea:	463b      	mov	r3, r7
 8008aec:	f7f7 feb6 	bl	800085c <__aeabi_ddiv>
 8008af0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008af4:	e02b      	b.n	8008b4e <_dtoa_r+0x3de>
 8008af6:	2502      	movs	r5, #2
 8008af8:	e7ef      	b.n	8008ada <_dtoa_r+0x36a>
 8008afa:	f018 0f01 	tst.w	r8, #1
 8008afe:	d008      	beq.n	8008b12 <_dtoa_r+0x3a2>
 8008b00:	4630      	mov	r0, r6
 8008b02:	4639      	mov	r1, r7
 8008b04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008b08:	f7f7 fd7e 	bl	8000608 <__aeabi_dmul>
 8008b0c:	3501      	adds	r5, #1
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460f      	mov	r7, r1
 8008b12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b16:	f109 0908 	add.w	r9, r9, #8
 8008b1a:	e7e0      	b.n	8008ade <_dtoa_r+0x36e>
 8008b1c:	f000 809f 	beq.w	8008c5e <_dtoa_r+0x4ee>
 8008b20:	f1cb 0600 	rsb	r6, fp, #0
 8008b24:	4ba1      	ldr	r3, [pc, #644]	; (8008dac <_dtoa_r+0x63c>)
 8008b26:	4fa2      	ldr	r7, [pc, #648]	; (8008db0 <_dtoa_r+0x640>)
 8008b28:	f006 020f 	and.w	r2, r6, #15
 8008b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	ec51 0b18 	vmov	r0, r1, d8
 8008b38:	f7f7 fd66 	bl	8000608 <__aeabi_dmul>
 8008b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b40:	1136      	asrs	r6, r6, #4
 8008b42:	2300      	movs	r3, #0
 8008b44:	2502      	movs	r5, #2
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	d17e      	bne.n	8008c48 <_dtoa_r+0x4d8>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d1d0      	bne.n	8008af0 <_dtoa_r+0x380>
 8008b4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8084 	beq.w	8008c62 <_dtoa_r+0x4f2>
 8008b5a:	4b96      	ldr	r3, [pc, #600]	; (8008db4 <_dtoa_r+0x644>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4640      	mov	r0, r8
 8008b60:	4649      	mov	r1, r9
 8008b62:	f7f7 ffc3 	bl	8000aec <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d07b      	beq.n	8008c62 <_dtoa_r+0x4f2>
 8008b6a:	9b04      	ldr	r3, [sp, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d078      	beq.n	8008c62 <_dtoa_r+0x4f2>
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dd39      	ble.n	8008bea <_dtoa_r+0x47a>
 8008b76:	4b90      	ldr	r3, [pc, #576]	; (8008db8 <_dtoa_r+0x648>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	4640      	mov	r0, r8
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	f7f7 fd43 	bl	8000608 <__aeabi_dmul>
 8008b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b86:	9e01      	ldr	r6, [sp, #4]
 8008b88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008b8c:	3501      	adds	r5, #1
 8008b8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b92:	4628      	mov	r0, r5
 8008b94:	f7f7 fcce 	bl	8000534 <__aeabi_i2d>
 8008b98:	4642      	mov	r2, r8
 8008b9a:	464b      	mov	r3, r9
 8008b9c:	f7f7 fd34 	bl	8000608 <__aeabi_dmul>
 8008ba0:	4b86      	ldr	r3, [pc, #536]	; (8008dbc <_dtoa_r+0x64c>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f7f7 fb7a 	bl	800029c <__adddf3>
 8008ba8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d158      	bne.n	8008c68 <_dtoa_r+0x4f8>
 8008bb6:	4b82      	ldr	r3, [pc, #520]	; (8008dc0 <_dtoa_r+0x650>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4640      	mov	r0, r8
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	f7f7 fb6b 	bl	8000298 <__aeabi_dsub>
 8008bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bc6:	4680      	mov	r8, r0
 8008bc8:	4689      	mov	r9, r1
 8008bca:	f7f7 ffad 	bl	8000b28 <__aeabi_dcmpgt>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	f040 8296 	bne.w	8009100 <_dtoa_r+0x990>
 8008bd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008bd8:	4640      	mov	r0, r8
 8008bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bde:	4649      	mov	r1, r9
 8008be0:	f7f7 ff84 	bl	8000aec <__aeabi_dcmplt>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	f040 8289 	bne.w	80090fc <_dtoa_r+0x98c>
 8008bea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f2c0 814e 	blt.w	8008e92 <_dtoa_r+0x722>
 8008bf6:	f1bb 0f0e 	cmp.w	fp, #14
 8008bfa:	f300 814a 	bgt.w	8008e92 <_dtoa_r+0x722>
 8008bfe:	4b6b      	ldr	r3, [pc, #428]	; (8008dac <_dtoa_r+0x63c>)
 8008c00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f280 80dc 	bge.w	8008dc8 <_dtoa_r+0x658>
 8008c10:	9b04      	ldr	r3, [sp, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f300 80d8 	bgt.w	8008dc8 <_dtoa_r+0x658>
 8008c18:	f040 826f 	bne.w	80090fa <_dtoa_r+0x98a>
 8008c1c:	4b68      	ldr	r3, [pc, #416]	; (8008dc0 <_dtoa_r+0x650>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4640      	mov	r0, r8
 8008c22:	4649      	mov	r1, r9
 8008c24:	f7f7 fcf0 	bl	8000608 <__aeabi_dmul>
 8008c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c2c:	f7f7 ff72 	bl	8000b14 <__aeabi_dcmpge>
 8008c30:	9e04      	ldr	r6, [sp, #16]
 8008c32:	4637      	mov	r7, r6
 8008c34:	2800      	cmp	r0, #0
 8008c36:	f040 8245 	bne.w	80090c4 <_dtoa_r+0x954>
 8008c3a:	9d00      	ldr	r5, [sp, #0]
 8008c3c:	2331      	movs	r3, #49	; 0x31
 8008c3e:	f805 3b01 	strb.w	r3, [r5], #1
 8008c42:	f10b 0b01 	add.w	fp, fp, #1
 8008c46:	e241      	b.n	80090cc <_dtoa_r+0x95c>
 8008c48:	07f2      	lsls	r2, r6, #31
 8008c4a:	d505      	bpl.n	8008c58 <_dtoa_r+0x4e8>
 8008c4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c50:	f7f7 fcda 	bl	8000608 <__aeabi_dmul>
 8008c54:	3501      	adds	r5, #1
 8008c56:	2301      	movs	r3, #1
 8008c58:	1076      	asrs	r6, r6, #1
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	e773      	b.n	8008b46 <_dtoa_r+0x3d6>
 8008c5e:	2502      	movs	r5, #2
 8008c60:	e775      	b.n	8008b4e <_dtoa_r+0x3de>
 8008c62:	9e04      	ldr	r6, [sp, #16]
 8008c64:	465f      	mov	r7, fp
 8008c66:	e792      	b.n	8008b8e <_dtoa_r+0x41e>
 8008c68:	9900      	ldr	r1, [sp, #0]
 8008c6a:	4b50      	ldr	r3, [pc, #320]	; (8008dac <_dtoa_r+0x63c>)
 8008c6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c70:	4431      	add	r1, r6
 8008c72:	9102      	str	r1, [sp, #8]
 8008c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c76:	eeb0 9a47 	vmov.f32	s18, s14
 8008c7a:	eef0 9a67 	vmov.f32	s19, s15
 8008c7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c86:	2900      	cmp	r1, #0
 8008c88:	d044      	beq.n	8008d14 <_dtoa_r+0x5a4>
 8008c8a:	494e      	ldr	r1, [pc, #312]	; (8008dc4 <_dtoa_r+0x654>)
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f7f7 fde5 	bl	800085c <__aeabi_ddiv>
 8008c92:	ec53 2b19 	vmov	r2, r3, d9
 8008c96:	f7f7 faff 	bl	8000298 <__aeabi_dsub>
 8008c9a:	9d00      	ldr	r5, [sp, #0]
 8008c9c:	ec41 0b19 	vmov	d9, r0, r1
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	f7f7 ff60 	bl	8000b68 <__aeabi_d2iz>
 8008ca8:	4606      	mov	r6, r0
 8008caa:	f7f7 fc43 	bl	8000534 <__aeabi_i2d>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	4640      	mov	r0, r8
 8008cb4:	4649      	mov	r1, r9
 8008cb6:	f7f7 faef 	bl	8000298 <__aeabi_dsub>
 8008cba:	3630      	adds	r6, #48	; 0x30
 8008cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8008cc0:	ec53 2b19 	vmov	r2, r3, d9
 8008cc4:	4680      	mov	r8, r0
 8008cc6:	4689      	mov	r9, r1
 8008cc8:	f7f7 ff10 	bl	8000aec <__aeabi_dcmplt>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d164      	bne.n	8008d9a <_dtoa_r+0x62a>
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	4937      	ldr	r1, [pc, #220]	; (8008db4 <_dtoa_r+0x644>)
 8008cd6:	2000      	movs	r0, #0
 8008cd8:	f7f7 fade 	bl	8000298 <__aeabi_dsub>
 8008cdc:	ec53 2b19 	vmov	r2, r3, d9
 8008ce0:	f7f7 ff04 	bl	8000aec <__aeabi_dcmplt>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	f040 80b6 	bne.w	8008e56 <_dtoa_r+0x6e6>
 8008cea:	9b02      	ldr	r3, [sp, #8]
 8008cec:	429d      	cmp	r5, r3
 8008cee:	f43f af7c 	beq.w	8008bea <_dtoa_r+0x47a>
 8008cf2:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <_dtoa_r+0x648>)
 8008cf4:	ec51 0b19 	vmov	r0, r1, d9
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f7f7 fc85 	bl	8000608 <__aeabi_dmul>
 8008cfe:	4b2e      	ldr	r3, [pc, #184]	; (8008db8 <_dtoa_r+0x648>)
 8008d00:	ec41 0b19 	vmov	d9, r0, r1
 8008d04:	2200      	movs	r2, #0
 8008d06:	4640      	mov	r0, r8
 8008d08:	4649      	mov	r1, r9
 8008d0a:	f7f7 fc7d 	bl	8000608 <__aeabi_dmul>
 8008d0e:	4680      	mov	r8, r0
 8008d10:	4689      	mov	r9, r1
 8008d12:	e7c5      	b.n	8008ca0 <_dtoa_r+0x530>
 8008d14:	ec51 0b17 	vmov	r0, r1, d7
 8008d18:	f7f7 fc76 	bl	8000608 <__aeabi_dmul>
 8008d1c:	9b02      	ldr	r3, [sp, #8]
 8008d1e:	9d00      	ldr	r5, [sp, #0]
 8008d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d22:	ec41 0b19 	vmov	d9, r0, r1
 8008d26:	4649      	mov	r1, r9
 8008d28:	4640      	mov	r0, r8
 8008d2a:	f7f7 ff1d 	bl	8000b68 <__aeabi_d2iz>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	f7f7 fc00 	bl	8000534 <__aeabi_i2d>
 8008d34:	3630      	adds	r6, #48	; 0x30
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	f7f7 faab 	bl	8000298 <__aeabi_dsub>
 8008d42:	f805 6b01 	strb.w	r6, [r5], #1
 8008d46:	9b02      	ldr	r3, [sp, #8]
 8008d48:	429d      	cmp	r5, r3
 8008d4a:	4680      	mov	r8, r0
 8008d4c:	4689      	mov	r9, r1
 8008d4e:	f04f 0200 	mov.w	r2, #0
 8008d52:	d124      	bne.n	8008d9e <_dtoa_r+0x62e>
 8008d54:	4b1b      	ldr	r3, [pc, #108]	; (8008dc4 <_dtoa_r+0x654>)
 8008d56:	ec51 0b19 	vmov	r0, r1, d9
 8008d5a:	f7f7 fa9f 	bl	800029c <__adddf3>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	4640      	mov	r0, r8
 8008d64:	4649      	mov	r1, r9
 8008d66:	f7f7 fedf 	bl	8000b28 <__aeabi_dcmpgt>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d173      	bne.n	8008e56 <_dtoa_r+0x6e6>
 8008d6e:	ec53 2b19 	vmov	r2, r3, d9
 8008d72:	4914      	ldr	r1, [pc, #80]	; (8008dc4 <_dtoa_r+0x654>)
 8008d74:	2000      	movs	r0, #0
 8008d76:	f7f7 fa8f 	bl	8000298 <__aeabi_dsub>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 feb3 	bl	8000aec <__aeabi_dcmplt>
 8008d86:	2800      	cmp	r0, #0
 8008d88:	f43f af2f 	beq.w	8008bea <_dtoa_r+0x47a>
 8008d8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d8e:	1e6b      	subs	r3, r5, #1
 8008d90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d96:	2b30      	cmp	r3, #48	; 0x30
 8008d98:	d0f8      	beq.n	8008d8c <_dtoa_r+0x61c>
 8008d9a:	46bb      	mov	fp, r7
 8008d9c:	e04a      	b.n	8008e34 <_dtoa_r+0x6c4>
 8008d9e:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <_dtoa_r+0x648>)
 8008da0:	f7f7 fc32 	bl	8000608 <__aeabi_dmul>
 8008da4:	4680      	mov	r8, r0
 8008da6:	4689      	mov	r9, r1
 8008da8:	e7bd      	b.n	8008d26 <_dtoa_r+0x5b6>
 8008daa:	bf00      	nop
 8008dac:	0800ad48 	.word	0x0800ad48
 8008db0:	0800ad20 	.word	0x0800ad20
 8008db4:	3ff00000 	.word	0x3ff00000
 8008db8:	40240000 	.word	0x40240000
 8008dbc:	401c0000 	.word	0x401c0000
 8008dc0:	40140000 	.word	0x40140000
 8008dc4:	3fe00000 	.word	0x3fe00000
 8008dc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008dcc:	9d00      	ldr	r5, [sp, #0]
 8008dce:	4642      	mov	r2, r8
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	f7f7 fd41 	bl	800085c <__aeabi_ddiv>
 8008dda:	f7f7 fec5 	bl	8000b68 <__aeabi_d2iz>
 8008dde:	9001      	str	r0, [sp, #4]
 8008de0:	f7f7 fba8 	bl	8000534 <__aeabi_i2d>
 8008de4:	4642      	mov	r2, r8
 8008de6:	464b      	mov	r3, r9
 8008de8:	f7f7 fc0e 	bl	8000608 <__aeabi_dmul>
 8008dec:	4602      	mov	r2, r0
 8008dee:	460b      	mov	r3, r1
 8008df0:	4630      	mov	r0, r6
 8008df2:	4639      	mov	r1, r7
 8008df4:	f7f7 fa50 	bl	8000298 <__aeabi_dsub>
 8008df8:	9e01      	ldr	r6, [sp, #4]
 8008dfa:	9f04      	ldr	r7, [sp, #16]
 8008dfc:	3630      	adds	r6, #48	; 0x30
 8008dfe:	f805 6b01 	strb.w	r6, [r5], #1
 8008e02:	9e00      	ldr	r6, [sp, #0]
 8008e04:	1bae      	subs	r6, r5, r6
 8008e06:	42b7      	cmp	r7, r6
 8008e08:	4602      	mov	r2, r0
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	d134      	bne.n	8008e78 <_dtoa_r+0x708>
 8008e0e:	f7f7 fa45 	bl	800029c <__adddf3>
 8008e12:	4642      	mov	r2, r8
 8008e14:	464b      	mov	r3, r9
 8008e16:	4606      	mov	r6, r0
 8008e18:	460f      	mov	r7, r1
 8008e1a:	f7f7 fe85 	bl	8000b28 <__aeabi_dcmpgt>
 8008e1e:	b9c8      	cbnz	r0, 8008e54 <_dtoa_r+0x6e4>
 8008e20:	4642      	mov	r2, r8
 8008e22:	464b      	mov	r3, r9
 8008e24:	4630      	mov	r0, r6
 8008e26:	4639      	mov	r1, r7
 8008e28:	f7f7 fe56 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e2c:	b110      	cbz	r0, 8008e34 <_dtoa_r+0x6c4>
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	07db      	lsls	r3, r3, #31
 8008e32:	d40f      	bmi.n	8008e54 <_dtoa_r+0x6e4>
 8008e34:	4651      	mov	r1, sl
 8008e36:	4620      	mov	r0, r4
 8008e38:	f000 fb18 	bl	800946c <_Bfree>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e40:	702b      	strb	r3, [r5, #0]
 8008e42:	f10b 0301 	add.w	r3, fp, #1
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f43f ace2 	beq.w	8008814 <_dtoa_r+0xa4>
 8008e50:	601d      	str	r5, [r3, #0]
 8008e52:	e4df      	b.n	8008814 <_dtoa_r+0xa4>
 8008e54:	465f      	mov	r7, fp
 8008e56:	462b      	mov	r3, r5
 8008e58:	461d      	mov	r5, r3
 8008e5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e5e:	2a39      	cmp	r2, #57	; 0x39
 8008e60:	d106      	bne.n	8008e70 <_dtoa_r+0x700>
 8008e62:	9a00      	ldr	r2, [sp, #0]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d1f7      	bne.n	8008e58 <_dtoa_r+0x6e8>
 8008e68:	9900      	ldr	r1, [sp, #0]
 8008e6a:	2230      	movs	r2, #48	; 0x30
 8008e6c:	3701      	adds	r7, #1
 8008e6e:	700a      	strb	r2, [r1, #0]
 8008e70:	781a      	ldrb	r2, [r3, #0]
 8008e72:	3201      	adds	r2, #1
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e790      	b.n	8008d9a <_dtoa_r+0x62a>
 8008e78:	4ba3      	ldr	r3, [pc, #652]	; (8009108 <_dtoa_r+0x998>)
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f7f7 fbc4 	bl	8000608 <__aeabi_dmul>
 8008e80:	2200      	movs	r2, #0
 8008e82:	2300      	movs	r3, #0
 8008e84:	4606      	mov	r6, r0
 8008e86:	460f      	mov	r7, r1
 8008e88:	f7f7 fe26 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d09e      	beq.n	8008dce <_dtoa_r+0x65e>
 8008e90:	e7d0      	b.n	8008e34 <_dtoa_r+0x6c4>
 8008e92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	f000 80ca 	beq.w	800902e <_dtoa_r+0x8be>
 8008e9a:	9a07      	ldr	r2, [sp, #28]
 8008e9c:	2a01      	cmp	r2, #1
 8008e9e:	f300 80ad 	bgt.w	8008ffc <_dtoa_r+0x88c>
 8008ea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ea4:	2a00      	cmp	r2, #0
 8008ea6:	f000 80a5 	beq.w	8008ff4 <_dtoa_r+0x884>
 8008eaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008eae:	9e08      	ldr	r6, [sp, #32]
 8008eb0:	9d05      	ldr	r5, [sp, #20]
 8008eb2:	9a05      	ldr	r2, [sp, #20]
 8008eb4:	441a      	add	r2, r3
 8008eb6:	9205      	str	r2, [sp, #20]
 8008eb8:	9a06      	ldr	r2, [sp, #24]
 8008eba:	2101      	movs	r1, #1
 8008ebc:	441a      	add	r2, r3
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	9206      	str	r2, [sp, #24]
 8008ec2:	f000 fb89 	bl	80095d8 <__i2b>
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	b165      	cbz	r5, 8008ee4 <_dtoa_r+0x774>
 8008eca:	9b06      	ldr	r3, [sp, #24]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dd09      	ble.n	8008ee4 <_dtoa_r+0x774>
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	9a05      	ldr	r2, [sp, #20]
 8008ed4:	bfa8      	it	ge
 8008ed6:	462b      	movge	r3, r5
 8008ed8:	1ad2      	subs	r2, r2, r3
 8008eda:	9205      	str	r2, [sp, #20]
 8008edc:	9a06      	ldr	r2, [sp, #24]
 8008ede:	1aed      	subs	r5, r5, r3
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	9306      	str	r3, [sp, #24]
 8008ee4:	9b08      	ldr	r3, [sp, #32]
 8008ee6:	b1f3      	cbz	r3, 8008f26 <_dtoa_r+0x7b6>
 8008ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 80a3 	beq.w	8009036 <_dtoa_r+0x8c6>
 8008ef0:	2e00      	cmp	r6, #0
 8008ef2:	dd10      	ble.n	8008f16 <_dtoa_r+0x7a6>
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4632      	mov	r2, r6
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 fc2d 	bl	8009758 <__pow5mult>
 8008efe:	4652      	mov	r2, sl
 8008f00:	4601      	mov	r1, r0
 8008f02:	4607      	mov	r7, r0
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 fb7d 	bl	8009604 <__multiply>
 8008f0a:	4651      	mov	r1, sl
 8008f0c:	4680      	mov	r8, r0
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f000 faac 	bl	800946c <_Bfree>
 8008f14:	46c2      	mov	sl, r8
 8008f16:	9b08      	ldr	r3, [sp, #32]
 8008f18:	1b9a      	subs	r2, r3, r6
 8008f1a:	d004      	beq.n	8008f26 <_dtoa_r+0x7b6>
 8008f1c:	4651      	mov	r1, sl
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fc1a 	bl	8009758 <__pow5mult>
 8008f24:	4682      	mov	sl, r0
 8008f26:	2101      	movs	r1, #1
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f000 fb55 	bl	80095d8 <__i2b>
 8008f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	4606      	mov	r6, r0
 8008f34:	f340 8081 	ble.w	800903a <_dtoa_r+0x8ca>
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fc0b 	bl	8009758 <__pow5mult>
 8008f42:	9b07      	ldr	r3, [sp, #28]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	4606      	mov	r6, r0
 8008f48:	dd7a      	ble.n	8009040 <_dtoa_r+0x8d0>
 8008f4a:	f04f 0800 	mov.w	r8, #0
 8008f4e:	6933      	ldr	r3, [r6, #16]
 8008f50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f54:	6918      	ldr	r0, [r3, #16]
 8008f56:	f000 faf1 	bl	800953c <__hi0bits>
 8008f5a:	f1c0 0020 	rsb	r0, r0, #32
 8008f5e:	9b06      	ldr	r3, [sp, #24]
 8008f60:	4418      	add	r0, r3
 8008f62:	f010 001f 	ands.w	r0, r0, #31
 8008f66:	f000 8094 	beq.w	8009092 <_dtoa_r+0x922>
 8008f6a:	f1c0 0320 	rsb	r3, r0, #32
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	f340 8085 	ble.w	800907e <_dtoa_r+0x90e>
 8008f74:	9b05      	ldr	r3, [sp, #20]
 8008f76:	f1c0 001c 	rsb	r0, r0, #28
 8008f7a:	4403      	add	r3, r0
 8008f7c:	9305      	str	r3, [sp, #20]
 8008f7e:	9b06      	ldr	r3, [sp, #24]
 8008f80:	4403      	add	r3, r0
 8008f82:	4405      	add	r5, r0
 8008f84:	9306      	str	r3, [sp, #24]
 8008f86:	9b05      	ldr	r3, [sp, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	dd05      	ble.n	8008f98 <_dtoa_r+0x828>
 8008f8c:	4651      	mov	r1, sl
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fc3b 	bl	800980c <__lshift>
 8008f96:	4682      	mov	sl, r0
 8008f98:	9b06      	ldr	r3, [sp, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	dd05      	ble.n	8008faa <_dtoa_r+0x83a>
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fc32 	bl	800980c <__lshift>
 8008fa8:	4606      	mov	r6, r0
 8008faa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d072      	beq.n	8009096 <_dtoa_r+0x926>
 8008fb0:	4631      	mov	r1, r6
 8008fb2:	4650      	mov	r0, sl
 8008fb4:	f000 fc96 	bl	80098e4 <__mcmp>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	da6c      	bge.n	8009096 <_dtoa_r+0x926>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	4651      	mov	r1, sl
 8008fc0:	220a      	movs	r2, #10
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f000 fa74 	bl	80094b0 <__multadd>
 8008fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fce:	4682      	mov	sl, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 81b0 	beq.w	8009336 <_dtoa_r+0xbc6>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	4639      	mov	r1, r7
 8008fda:	220a      	movs	r2, #10
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 fa67 	bl	80094b0 <__multadd>
 8008fe2:	9b01      	ldr	r3, [sp, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	4607      	mov	r7, r0
 8008fe8:	f300 8096 	bgt.w	8009118 <_dtoa_r+0x9a8>
 8008fec:	9b07      	ldr	r3, [sp, #28]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	dc59      	bgt.n	80090a6 <_dtoa_r+0x936>
 8008ff2:	e091      	b.n	8009118 <_dtoa_r+0x9a8>
 8008ff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ffa:	e758      	b.n	8008eae <_dtoa_r+0x73e>
 8008ffc:	9b04      	ldr	r3, [sp, #16]
 8008ffe:	1e5e      	subs	r6, r3, #1
 8009000:	9b08      	ldr	r3, [sp, #32]
 8009002:	42b3      	cmp	r3, r6
 8009004:	bfbf      	itttt	lt
 8009006:	9b08      	ldrlt	r3, [sp, #32]
 8009008:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800900a:	9608      	strlt	r6, [sp, #32]
 800900c:	1af3      	sublt	r3, r6, r3
 800900e:	bfb4      	ite	lt
 8009010:	18d2      	addlt	r2, r2, r3
 8009012:	1b9e      	subge	r6, r3, r6
 8009014:	9b04      	ldr	r3, [sp, #16]
 8009016:	bfbc      	itt	lt
 8009018:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800901a:	2600      	movlt	r6, #0
 800901c:	2b00      	cmp	r3, #0
 800901e:	bfb7      	itett	lt
 8009020:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009024:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009028:	1a9d      	sublt	r5, r3, r2
 800902a:	2300      	movlt	r3, #0
 800902c:	e741      	b.n	8008eb2 <_dtoa_r+0x742>
 800902e:	9e08      	ldr	r6, [sp, #32]
 8009030:	9d05      	ldr	r5, [sp, #20]
 8009032:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009034:	e748      	b.n	8008ec8 <_dtoa_r+0x758>
 8009036:	9a08      	ldr	r2, [sp, #32]
 8009038:	e770      	b.n	8008f1c <_dtoa_r+0x7ac>
 800903a:	9b07      	ldr	r3, [sp, #28]
 800903c:	2b01      	cmp	r3, #1
 800903e:	dc19      	bgt.n	8009074 <_dtoa_r+0x904>
 8009040:	9b02      	ldr	r3, [sp, #8]
 8009042:	b9bb      	cbnz	r3, 8009074 <_dtoa_r+0x904>
 8009044:	9b03      	ldr	r3, [sp, #12]
 8009046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800904a:	b99b      	cbnz	r3, 8009074 <_dtoa_r+0x904>
 800904c:	9b03      	ldr	r3, [sp, #12]
 800904e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009052:	0d1b      	lsrs	r3, r3, #20
 8009054:	051b      	lsls	r3, r3, #20
 8009056:	b183      	cbz	r3, 800907a <_dtoa_r+0x90a>
 8009058:	9b05      	ldr	r3, [sp, #20]
 800905a:	3301      	adds	r3, #1
 800905c:	9305      	str	r3, [sp, #20]
 800905e:	9b06      	ldr	r3, [sp, #24]
 8009060:	3301      	adds	r3, #1
 8009062:	9306      	str	r3, [sp, #24]
 8009064:	f04f 0801 	mov.w	r8, #1
 8009068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800906a:	2b00      	cmp	r3, #0
 800906c:	f47f af6f 	bne.w	8008f4e <_dtoa_r+0x7de>
 8009070:	2001      	movs	r0, #1
 8009072:	e774      	b.n	8008f5e <_dtoa_r+0x7ee>
 8009074:	f04f 0800 	mov.w	r8, #0
 8009078:	e7f6      	b.n	8009068 <_dtoa_r+0x8f8>
 800907a:	4698      	mov	r8, r3
 800907c:	e7f4      	b.n	8009068 <_dtoa_r+0x8f8>
 800907e:	d082      	beq.n	8008f86 <_dtoa_r+0x816>
 8009080:	9a05      	ldr	r2, [sp, #20]
 8009082:	331c      	adds	r3, #28
 8009084:	441a      	add	r2, r3
 8009086:	9205      	str	r2, [sp, #20]
 8009088:	9a06      	ldr	r2, [sp, #24]
 800908a:	441a      	add	r2, r3
 800908c:	441d      	add	r5, r3
 800908e:	9206      	str	r2, [sp, #24]
 8009090:	e779      	b.n	8008f86 <_dtoa_r+0x816>
 8009092:	4603      	mov	r3, r0
 8009094:	e7f4      	b.n	8009080 <_dtoa_r+0x910>
 8009096:	9b04      	ldr	r3, [sp, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	dc37      	bgt.n	800910c <_dtoa_r+0x99c>
 800909c:	9b07      	ldr	r3, [sp, #28]
 800909e:	2b02      	cmp	r3, #2
 80090a0:	dd34      	ble.n	800910c <_dtoa_r+0x99c>
 80090a2:	9b04      	ldr	r3, [sp, #16]
 80090a4:	9301      	str	r3, [sp, #4]
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	b963      	cbnz	r3, 80090c4 <_dtoa_r+0x954>
 80090aa:	4631      	mov	r1, r6
 80090ac:	2205      	movs	r2, #5
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 f9fe 	bl	80094b0 <__multadd>
 80090b4:	4601      	mov	r1, r0
 80090b6:	4606      	mov	r6, r0
 80090b8:	4650      	mov	r0, sl
 80090ba:	f000 fc13 	bl	80098e4 <__mcmp>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f73f adbb 	bgt.w	8008c3a <_dtoa_r+0x4ca>
 80090c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090c6:	9d00      	ldr	r5, [sp, #0]
 80090c8:	ea6f 0b03 	mvn.w	fp, r3
 80090cc:	f04f 0800 	mov.w	r8, #0
 80090d0:	4631      	mov	r1, r6
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 f9ca 	bl	800946c <_Bfree>
 80090d8:	2f00      	cmp	r7, #0
 80090da:	f43f aeab 	beq.w	8008e34 <_dtoa_r+0x6c4>
 80090de:	f1b8 0f00 	cmp.w	r8, #0
 80090e2:	d005      	beq.n	80090f0 <_dtoa_r+0x980>
 80090e4:	45b8      	cmp	r8, r7
 80090e6:	d003      	beq.n	80090f0 <_dtoa_r+0x980>
 80090e8:	4641      	mov	r1, r8
 80090ea:	4620      	mov	r0, r4
 80090ec:	f000 f9be 	bl	800946c <_Bfree>
 80090f0:	4639      	mov	r1, r7
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 f9ba 	bl	800946c <_Bfree>
 80090f8:	e69c      	b.n	8008e34 <_dtoa_r+0x6c4>
 80090fa:	2600      	movs	r6, #0
 80090fc:	4637      	mov	r7, r6
 80090fe:	e7e1      	b.n	80090c4 <_dtoa_r+0x954>
 8009100:	46bb      	mov	fp, r7
 8009102:	4637      	mov	r7, r6
 8009104:	e599      	b.n	8008c3a <_dtoa_r+0x4ca>
 8009106:	bf00      	nop
 8009108:	40240000 	.word	0x40240000
 800910c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 80c8 	beq.w	80092a4 <_dtoa_r+0xb34>
 8009114:	9b04      	ldr	r3, [sp, #16]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	2d00      	cmp	r5, #0
 800911a:	dd05      	ble.n	8009128 <_dtoa_r+0x9b8>
 800911c:	4639      	mov	r1, r7
 800911e:	462a      	mov	r2, r5
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fb73 	bl	800980c <__lshift>
 8009126:	4607      	mov	r7, r0
 8009128:	f1b8 0f00 	cmp.w	r8, #0
 800912c:	d05b      	beq.n	80091e6 <_dtoa_r+0xa76>
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4620      	mov	r0, r4
 8009132:	f000 f95b 	bl	80093ec <_Balloc>
 8009136:	4605      	mov	r5, r0
 8009138:	b928      	cbnz	r0, 8009146 <_dtoa_r+0x9d6>
 800913a:	4b83      	ldr	r3, [pc, #524]	; (8009348 <_dtoa_r+0xbd8>)
 800913c:	4602      	mov	r2, r0
 800913e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009142:	f7ff bb2e 	b.w	80087a2 <_dtoa_r+0x32>
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	3202      	adds	r2, #2
 800914a:	0092      	lsls	r2, r2, #2
 800914c:	f107 010c 	add.w	r1, r7, #12
 8009150:	300c      	adds	r0, #12
 8009152:	f000 fee7 	bl	8009f24 <memcpy>
 8009156:	2201      	movs	r2, #1
 8009158:	4629      	mov	r1, r5
 800915a:	4620      	mov	r0, r4
 800915c:	f000 fb56 	bl	800980c <__lshift>
 8009160:	9b00      	ldr	r3, [sp, #0]
 8009162:	3301      	adds	r3, #1
 8009164:	9304      	str	r3, [sp, #16]
 8009166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800916a:	4413      	add	r3, r2
 800916c:	9308      	str	r3, [sp, #32]
 800916e:	9b02      	ldr	r3, [sp, #8]
 8009170:	f003 0301 	and.w	r3, r3, #1
 8009174:	46b8      	mov	r8, r7
 8009176:	9306      	str	r3, [sp, #24]
 8009178:	4607      	mov	r7, r0
 800917a:	9b04      	ldr	r3, [sp, #16]
 800917c:	4631      	mov	r1, r6
 800917e:	3b01      	subs	r3, #1
 8009180:	4650      	mov	r0, sl
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	f7ff fa69 	bl	800865a <quorem>
 8009188:	4641      	mov	r1, r8
 800918a:	9002      	str	r0, [sp, #8]
 800918c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009190:	4650      	mov	r0, sl
 8009192:	f000 fba7 	bl	80098e4 <__mcmp>
 8009196:	463a      	mov	r2, r7
 8009198:	9005      	str	r0, [sp, #20]
 800919a:	4631      	mov	r1, r6
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fbbd 	bl	800991c <__mdiff>
 80091a2:	68c2      	ldr	r2, [r0, #12]
 80091a4:	4605      	mov	r5, r0
 80091a6:	bb02      	cbnz	r2, 80091ea <_dtoa_r+0xa7a>
 80091a8:	4601      	mov	r1, r0
 80091aa:	4650      	mov	r0, sl
 80091ac:	f000 fb9a 	bl	80098e4 <__mcmp>
 80091b0:	4602      	mov	r2, r0
 80091b2:	4629      	mov	r1, r5
 80091b4:	4620      	mov	r0, r4
 80091b6:	9209      	str	r2, [sp, #36]	; 0x24
 80091b8:	f000 f958 	bl	800946c <_Bfree>
 80091bc:	9b07      	ldr	r3, [sp, #28]
 80091be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091c0:	9d04      	ldr	r5, [sp, #16]
 80091c2:	ea43 0102 	orr.w	r1, r3, r2
 80091c6:	9b06      	ldr	r3, [sp, #24]
 80091c8:	4319      	orrs	r1, r3
 80091ca:	d110      	bne.n	80091ee <_dtoa_r+0xa7e>
 80091cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80091d0:	d029      	beq.n	8009226 <_dtoa_r+0xab6>
 80091d2:	9b05      	ldr	r3, [sp, #20]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	dd02      	ble.n	80091de <_dtoa_r+0xa6e>
 80091d8:	9b02      	ldr	r3, [sp, #8]
 80091da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80091de:	9b01      	ldr	r3, [sp, #4]
 80091e0:	f883 9000 	strb.w	r9, [r3]
 80091e4:	e774      	b.n	80090d0 <_dtoa_r+0x960>
 80091e6:	4638      	mov	r0, r7
 80091e8:	e7ba      	b.n	8009160 <_dtoa_r+0x9f0>
 80091ea:	2201      	movs	r2, #1
 80091ec:	e7e1      	b.n	80091b2 <_dtoa_r+0xa42>
 80091ee:	9b05      	ldr	r3, [sp, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	db04      	blt.n	80091fe <_dtoa_r+0xa8e>
 80091f4:	9907      	ldr	r1, [sp, #28]
 80091f6:	430b      	orrs	r3, r1
 80091f8:	9906      	ldr	r1, [sp, #24]
 80091fa:	430b      	orrs	r3, r1
 80091fc:	d120      	bne.n	8009240 <_dtoa_r+0xad0>
 80091fe:	2a00      	cmp	r2, #0
 8009200:	dded      	ble.n	80091de <_dtoa_r+0xa6e>
 8009202:	4651      	mov	r1, sl
 8009204:	2201      	movs	r2, #1
 8009206:	4620      	mov	r0, r4
 8009208:	f000 fb00 	bl	800980c <__lshift>
 800920c:	4631      	mov	r1, r6
 800920e:	4682      	mov	sl, r0
 8009210:	f000 fb68 	bl	80098e4 <__mcmp>
 8009214:	2800      	cmp	r0, #0
 8009216:	dc03      	bgt.n	8009220 <_dtoa_r+0xab0>
 8009218:	d1e1      	bne.n	80091de <_dtoa_r+0xa6e>
 800921a:	f019 0f01 	tst.w	r9, #1
 800921e:	d0de      	beq.n	80091de <_dtoa_r+0xa6e>
 8009220:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009224:	d1d8      	bne.n	80091d8 <_dtoa_r+0xa68>
 8009226:	9a01      	ldr	r2, [sp, #4]
 8009228:	2339      	movs	r3, #57	; 0x39
 800922a:	7013      	strb	r3, [r2, #0]
 800922c:	462b      	mov	r3, r5
 800922e:	461d      	mov	r5, r3
 8009230:	3b01      	subs	r3, #1
 8009232:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009236:	2a39      	cmp	r2, #57	; 0x39
 8009238:	d06c      	beq.n	8009314 <_dtoa_r+0xba4>
 800923a:	3201      	adds	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
 800923e:	e747      	b.n	80090d0 <_dtoa_r+0x960>
 8009240:	2a00      	cmp	r2, #0
 8009242:	dd07      	ble.n	8009254 <_dtoa_r+0xae4>
 8009244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009248:	d0ed      	beq.n	8009226 <_dtoa_r+0xab6>
 800924a:	9a01      	ldr	r2, [sp, #4]
 800924c:	f109 0301 	add.w	r3, r9, #1
 8009250:	7013      	strb	r3, [r2, #0]
 8009252:	e73d      	b.n	80090d0 <_dtoa_r+0x960>
 8009254:	9b04      	ldr	r3, [sp, #16]
 8009256:	9a08      	ldr	r2, [sp, #32]
 8009258:	f803 9c01 	strb.w	r9, [r3, #-1]
 800925c:	4293      	cmp	r3, r2
 800925e:	d043      	beq.n	80092e8 <_dtoa_r+0xb78>
 8009260:	4651      	mov	r1, sl
 8009262:	2300      	movs	r3, #0
 8009264:	220a      	movs	r2, #10
 8009266:	4620      	mov	r0, r4
 8009268:	f000 f922 	bl	80094b0 <__multadd>
 800926c:	45b8      	cmp	r8, r7
 800926e:	4682      	mov	sl, r0
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	f04f 020a 	mov.w	r2, #10
 8009278:	4641      	mov	r1, r8
 800927a:	4620      	mov	r0, r4
 800927c:	d107      	bne.n	800928e <_dtoa_r+0xb1e>
 800927e:	f000 f917 	bl	80094b0 <__multadd>
 8009282:	4680      	mov	r8, r0
 8009284:	4607      	mov	r7, r0
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	3301      	adds	r3, #1
 800928a:	9304      	str	r3, [sp, #16]
 800928c:	e775      	b.n	800917a <_dtoa_r+0xa0a>
 800928e:	f000 f90f 	bl	80094b0 <__multadd>
 8009292:	4639      	mov	r1, r7
 8009294:	4680      	mov	r8, r0
 8009296:	2300      	movs	r3, #0
 8009298:	220a      	movs	r2, #10
 800929a:	4620      	mov	r0, r4
 800929c:	f000 f908 	bl	80094b0 <__multadd>
 80092a0:	4607      	mov	r7, r0
 80092a2:	e7f0      	b.n	8009286 <_dtoa_r+0xb16>
 80092a4:	9b04      	ldr	r3, [sp, #16]
 80092a6:	9301      	str	r3, [sp, #4]
 80092a8:	9d00      	ldr	r5, [sp, #0]
 80092aa:	4631      	mov	r1, r6
 80092ac:	4650      	mov	r0, sl
 80092ae:	f7ff f9d4 	bl	800865a <quorem>
 80092b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	f805 9b01 	strb.w	r9, [r5], #1
 80092bc:	1aea      	subs	r2, r5, r3
 80092be:	9b01      	ldr	r3, [sp, #4]
 80092c0:	4293      	cmp	r3, r2
 80092c2:	dd07      	ble.n	80092d4 <_dtoa_r+0xb64>
 80092c4:	4651      	mov	r1, sl
 80092c6:	2300      	movs	r3, #0
 80092c8:	220a      	movs	r2, #10
 80092ca:	4620      	mov	r0, r4
 80092cc:	f000 f8f0 	bl	80094b0 <__multadd>
 80092d0:	4682      	mov	sl, r0
 80092d2:	e7ea      	b.n	80092aa <_dtoa_r+0xb3a>
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfc8      	it	gt
 80092da:	461d      	movgt	r5, r3
 80092dc:	9b00      	ldr	r3, [sp, #0]
 80092de:	bfd8      	it	le
 80092e0:	2501      	movle	r5, #1
 80092e2:	441d      	add	r5, r3
 80092e4:	f04f 0800 	mov.w	r8, #0
 80092e8:	4651      	mov	r1, sl
 80092ea:	2201      	movs	r2, #1
 80092ec:	4620      	mov	r0, r4
 80092ee:	f000 fa8d 	bl	800980c <__lshift>
 80092f2:	4631      	mov	r1, r6
 80092f4:	4682      	mov	sl, r0
 80092f6:	f000 faf5 	bl	80098e4 <__mcmp>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	dc96      	bgt.n	800922c <_dtoa_r+0xabc>
 80092fe:	d102      	bne.n	8009306 <_dtoa_r+0xb96>
 8009300:	f019 0f01 	tst.w	r9, #1
 8009304:	d192      	bne.n	800922c <_dtoa_r+0xabc>
 8009306:	462b      	mov	r3, r5
 8009308:	461d      	mov	r5, r3
 800930a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800930e:	2a30      	cmp	r2, #48	; 0x30
 8009310:	d0fa      	beq.n	8009308 <_dtoa_r+0xb98>
 8009312:	e6dd      	b.n	80090d0 <_dtoa_r+0x960>
 8009314:	9a00      	ldr	r2, [sp, #0]
 8009316:	429a      	cmp	r2, r3
 8009318:	d189      	bne.n	800922e <_dtoa_r+0xabe>
 800931a:	f10b 0b01 	add.w	fp, fp, #1
 800931e:	2331      	movs	r3, #49	; 0x31
 8009320:	e796      	b.n	8009250 <_dtoa_r+0xae0>
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <_dtoa_r+0xbdc>)
 8009324:	f7ff ba99 	b.w	800885a <_dtoa_r+0xea>
 8009328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800932a:	2b00      	cmp	r3, #0
 800932c:	f47f aa6d 	bne.w	800880a <_dtoa_r+0x9a>
 8009330:	4b07      	ldr	r3, [pc, #28]	; (8009350 <_dtoa_r+0xbe0>)
 8009332:	f7ff ba92 	b.w	800885a <_dtoa_r+0xea>
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	dcb5      	bgt.n	80092a8 <_dtoa_r+0xb38>
 800933c:	9b07      	ldr	r3, [sp, #28]
 800933e:	2b02      	cmp	r3, #2
 8009340:	f73f aeb1 	bgt.w	80090a6 <_dtoa_r+0x936>
 8009344:	e7b0      	b.n	80092a8 <_dtoa_r+0xb38>
 8009346:	bf00      	nop
 8009348:	0800acb0 	.word	0x0800acb0
 800934c:	0800ac10 	.word	0x0800ac10
 8009350:	0800ac34 	.word	0x0800ac34

08009354 <_free_r>:
 8009354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009356:	2900      	cmp	r1, #0
 8009358:	d044      	beq.n	80093e4 <_free_r+0x90>
 800935a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800935e:	9001      	str	r0, [sp, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f1a1 0404 	sub.w	r4, r1, #4
 8009366:	bfb8      	it	lt
 8009368:	18e4      	addlt	r4, r4, r3
 800936a:	f7fe faf7 	bl	800795c <__malloc_lock>
 800936e:	4a1e      	ldr	r2, [pc, #120]	; (80093e8 <_free_r+0x94>)
 8009370:	9801      	ldr	r0, [sp, #4]
 8009372:	6813      	ldr	r3, [r2, #0]
 8009374:	b933      	cbnz	r3, 8009384 <_free_r+0x30>
 8009376:	6063      	str	r3, [r4, #4]
 8009378:	6014      	str	r4, [r2, #0]
 800937a:	b003      	add	sp, #12
 800937c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009380:	f7fe baf2 	b.w	8007968 <__malloc_unlock>
 8009384:	42a3      	cmp	r3, r4
 8009386:	d908      	bls.n	800939a <_free_r+0x46>
 8009388:	6825      	ldr	r5, [r4, #0]
 800938a:	1961      	adds	r1, r4, r5
 800938c:	428b      	cmp	r3, r1
 800938e:	bf01      	itttt	eq
 8009390:	6819      	ldreq	r1, [r3, #0]
 8009392:	685b      	ldreq	r3, [r3, #4]
 8009394:	1949      	addeq	r1, r1, r5
 8009396:	6021      	streq	r1, [r4, #0]
 8009398:	e7ed      	b.n	8009376 <_free_r+0x22>
 800939a:	461a      	mov	r2, r3
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	b10b      	cbz	r3, 80093a4 <_free_r+0x50>
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	d9fa      	bls.n	800939a <_free_r+0x46>
 80093a4:	6811      	ldr	r1, [r2, #0]
 80093a6:	1855      	adds	r5, r2, r1
 80093a8:	42a5      	cmp	r5, r4
 80093aa:	d10b      	bne.n	80093c4 <_free_r+0x70>
 80093ac:	6824      	ldr	r4, [r4, #0]
 80093ae:	4421      	add	r1, r4
 80093b0:	1854      	adds	r4, r2, r1
 80093b2:	42a3      	cmp	r3, r4
 80093b4:	6011      	str	r1, [r2, #0]
 80093b6:	d1e0      	bne.n	800937a <_free_r+0x26>
 80093b8:	681c      	ldr	r4, [r3, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	6053      	str	r3, [r2, #4]
 80093be:	440c      	add	r4, r1
 80093c0:	6014      	str	r4, [r2, #0]
 80093c2:	e7da      	b.n	800937a <_free_r+0x26>
 80093c4:	d902      	bls.n	80093cc <_free_r+0x78>
 80093c6:	230c      	movs	r3, #12
 80093c8:	6003      	str	r3, [r0, #0]
 80093ca:	e7d6      	b.n	800937a <_free_r+0x26>
 80093cc:	6825      	ldr	r5, [r4, #0]
 80093ce:	1961      	adds	r1, r4, r5
 80093d0:	428b      	cmp	r3, r1
 80093d2:	bf04      	itt	eq
 80093d4:	6819      	ldreq	r1, [r3, #0]
 80093d6:	685b      	ldreq	r3, [r3, #4]
 80093d8:	6063      	str	r3, [r4, #4]
 80093da:	bf04      	itt	eq
 80093dc:	1949      	addeq	r1, r1, r5
 80093de:	6021      	streq	r1, [r4, #0]
 80093e0:	6054      	str	r4, [r2, #4]
 80093e2:	e7ca      	b.n	800937a <_free_r+0x26>
 80093e4:	b003      	add	sp, #12
 80093e6:	bd30      	pop	{r4, r5, pc}
 80093e8:	20000788 	.word	0x20000788

080093ec <_Balloc>:
 80093ec:	b570      	push	{r4, r5, r6, lr}
 80093ee:	69c6      	ldr	r6, [r0, #28]
 80093f0:	4604      	mov	r4, r0
 80093f2:	460d      	mov	r5, r1
 80093f4:	b976      	cbnz	r6, 8009414 <_Balloc+0x28>
 80093f6:	2010      	movs	r0, #16
 80093f8:	f7fe fa00 	bl	80077fc <malloc>
 80093fc:	4602      	mov	r2, r0
 80093fe:	61e0      	str	r0, [r4, #28]
 8009400:	b920      	cbnz	r0, 800940c <_Balloc+0x20>
 8009402:	4b18      	ldr	r3, [pc, #96]	; (8009464 <_Balloc+0x78>)
 8009404:	4818      	ldr	r0, [pc, #96]	; (8009468 <_Balloc+0x7c>)
 8009406:	216b      	movs	r1, #107	; 0x6b
 8009408:	f000 fd9a 	bl	8009f40 <__assert_func>
 800940c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009410:	6006      	str	r6, [r0, #0]
 8009412:	60c6      	str	r6, [r0, #12]
 8009414:	69e6      	ldr	r6, [r4, #28]
 8009416:	68f3      	ldr	r3, [r6, #12]
 8009418:	b183      	cbz	r3, 800943c <_Balloc+0x50>
 800941a:	69e3      	ldr	r3, [r4, #28]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009422:	b9b8      	cbnz	r0, 8009454 <_Balloc+0x68>
 8009424:	2101      	movs	r1, #1
 8009426:	fa01 f605 	lsl.w	r6, r1, r5
 800942a:	1d72      	adds	r2, r6, #5
 800942c:	0092      	lsls	r2, r2, #2
 800942e:	4620      	mov	r0, r4
 8009430:	f000 fda4 	bl	8009f7c <_calloc_r>
 8009434:	b160      	cbz	r0, 8009450 <_Balloc+0x64>
 8009436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800943a:	e00e      	b.n	800945a <_Balloc+0x6e>
 800943c:	2221      	movs	r2, #33	; 0x21
 800943e:	2104      	movs	r1, #4
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fd9b 	bl	8009f7c <_calloc_r>
 8009446:	69e3      	ldr	r3, [r4, #28]
 8009448:	60f0      	str	r0, [r6, #12]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e4      	bne.n	800941a <_Balloc+0x2e>
 8009450:	2000      	movs	r0, #0
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	6802      	ldr	r2, [r0, #0]
 8009456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800945a:	2300      	movs	r3, #0
 800945c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009460:	e7f7      	b.n	8009452 <_Balloc+0x66>
 8009462:	bf00      	nop
 8009464:	0800ac41 	.word	0x0800ac41
 8009468:	0800acc1 	.word	0x0800acc1

0800946c <_Bfree>:
 800946c:	b570      	push	{r4, r5, r6, lr}
 800946e:	69c6      	ldr	r6, [r0, #28]
 8009470:	4605      	mov	r5, r0
 8009472:	460c      	mov	r4, r1
 8009474:	b976      	cbnz	r6, 8009494 <_Bfree+0x28>
 8009476:	2010      	movs	r0, #16
 8009478:	f7fe f9c0 	bl	80077fc <malloc>
 800947c:	4602      	mov	r2, r0
 800947e:	61e8      	str	r0, [r5, #28]
 8009480:	b920      	cbnz	r0, 800948c <_Bfree+0x20>
 8009482:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <_Bfree+0x3c>)
 8009484:	4809      	ldr	r0, [pc, #36]	; (80094ac <_Bfree+0x40>)
 8009486:	218f      	movs	r1, #143	; 0x8f
 8009488:	f000 fd5a 	bl	8009f40 <__assert_func>
 800948c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009490:	6006      	str	r6, [r0, #0]
 8009492:	60c6      	str	r6, [r0, #12]
 8009494:	b13c      	cbz	r4, 80094a6 <_Bfree+0x3a>
 8009496:	69eb      	ldr	r3, [r5, #28]
 8009498:	6862      	ldr	r2, [r4, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094a0:	6021      	str	r1, [r4, #0]
 80094a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094a6:	bd70      	pop	{r4, r5, r6, pc}
 80094a8:	0800ac41 	.word	0x0800ac41
 80094ac:	0800acc1 	.word	0x0800acc1

080094b0 <__multadd>:
 80094b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b4:	690d      	ldr	r5, [r1, #16]
 80094b6:	4607      	mov	r7, r0
 80094b8:	460c      	mov	r4, r1
 80094ba:	461e      	mov	r6, r3
 80094bc:	f101 0c14 	add.w	ip, r1, #20
 80094c0:	2000      	movs	r0, #0
 80094c2:	f8dc 3000 	ldr.w	r3, [ip]
 80094c6:	b299      	uxth	r1, r3
 80094c8:	fb02 6101 	mla	r1, r2, r1, r6
 80094cc:	0c1e      	lsrs	r6, r3, #16
 80094ce:	0c0b      	lsrs	r3, r1, #16
 80094d0:	fb02 3306 	mla	r3, r2, r6, r3
 80094d4:	b289      	uxth	r1, r1
 80094d6:	3001      	adds	r0, #1
 80094d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094dc:	4285      	cmp	r5, r0
 80094de:	f84c 1b04 	str.w	r1, [ip], #4
 80094e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094e6:	dcec      	bgt.n	80094c2 <__multadd+0x12>
 80094e8:	b30e      	cbz	r6, 800952e <__multadd+0x7e>
 80094ea:	68a3      	ldr	r3, [r4, #8]
 80094ec:	42ab      	cmp	r3, r5
 80094ee:	dc19      	bgt.n	8009524 <__multadd+0x74>
 80094f0:	6861      	ldr	r1, [r4, #4]
 80094f2:	4638      	mov	r0, r7
 80094f4:	3101      	adds	r1, #1
 80094f6:	f7ff ff79 	bl	80093ec <_Balloc>
 80094fa:	4680      	mov	r8, r0
 80094fc:	b928      	cbnz	r0, 800950a <__multadd+0x5a>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <__multadd+0x84>)
 8009502:	480d      	ldr	r0, [pc, #52]	; (8009538 <__multadd+0x88>)
 8009504:	21ba      	movs	r1, #186	; 0xba
 8009506:	f000 fd1b 	bl	8009f40 <__assert_func>
 800950a:	6922      	ldr	r2, [r4, #16]
 800950c:	3202      	adds	r2, #2
 800950e:	f104 010c 	add.w	r1, r4, #12
 8009512:	0092      	lsls	r2, r2, #2
 8009514:	300c      	adds	r0, #12
 8009516:	f000 fd05 	bl	8009f24 <memcpy>
 800951a:	4621      	mov	r1, r4
 800951c:	4638      	mov	r0, r7
 800951e:	f7ff ffa5 	bl	800946c <_Bfree>
 8009522:	4644      	mov	r4, r8
 8009524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009528:	3501      	adds	r5, #1
 800952a:	615e      	str	r6, [r3, #20]
 800952c:	6125      	str	r5, [r4, #16]
 800952e:	4620      	mov	r0, r4
 8009530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009534:	0800acb0 	.word	0x0800acb0
 8009538:	0800acc1 	.word	0x0800acc1

0800953c <__hi0bits>:
 800953c:	0c03      	lsrs	r3, r0, #16
 800953e:	041b      	lsls	r3, r3, #16
 8009540:	b9d3      	cbnz	r3, 8009578 <__hi0bits+0x3c>
 8009542:	0400      	lsls	r0, r0, #16
 8009544:	2310      	movs	r3, #16
 8009546:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800954a:	bf04      	itt	eq
 800954c:	0200      	lsleq	r0, r0, #8
 800954e:	3308      	addeq	r3, #8
 8009550:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009554:	bf04      	itt	eq
 8009556:	0100      	lsleq	r0, r0, #4
 8009558:	3304      	addeq	r3, #4
 800955a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800955e:	bf04      	itt	eq
 8009560:	0080      	lsleq	r0, r0, #2
 8009562:	3302      	addeq	r3, #2
 8009564:	2800      	cmp	r0, #0
 8009566:	db05      	blt.n	8009574 <__hi0bits+0x38>
 8009568:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800956c:	f103 0301 	add.w	r3, r3, #1
 8009570:	bf08      	it	eq
 8009572:	2320      	moveq	r3, #32
 8009574:	4618      	mov	r0, r3
 8009576:	4770      	bx	lr
 8009578:	2300      	movs	r3, #0
 800957a:	e7e4      	b.n	8009546 <__hi0bits+0xa>

0800957c <__lo0bits>:
 800957c:	6803      	ldr	r3, [r0, #0]
 800957e:	f013 0207 	ands.w	r2, r3, #7
 8009582:	d00c      	beq.n	800959e <__lo0bits+0x22>
 8009584:	07d9      	lsls	r1, r3, #31
 8009586:	d422      	bmi.n	80095ce <__lo0bits+0x52>
 8009588:	079a      	lsls	r2, r3, #30
 800958a:	bf49      	itett	mi
 800958c:	085b      	lsrmi	r3, r3, #1
 800958e:	089b      	lsrpl	r3, r3, #2
 8009590:	6003      	strmi	r3, [r0, #0]
 8009592:	2201      	movmi	r2, #1
 8009594:	bf5c      	itt	pl
 8009596:	6003      	strpl	r3, [r0, #0]
 8009598:	2202      	movpl	r2, #2
 800959a:	4610      	mov	r0, r2
 800959c:	4770      	bx	lr
 800959e:	b299      	uxth	r1, r3
 80095a0:	b909      	cbnz	r1, 80095a6 <__lo0bits+0x2a>
 80095a2:	0c1b      	lsrs	r3, r3, #16
 80095a4:	2210      	movs	r2, #16
 80095a6:	b2d9      	uxtb	r1, r3
 80095a8:	b909      	cbnz	r1, 80095ae <__lo0bits+0x32>
 80095aa:	3208      	adds	r2, #8
 80095ac:	0a1b      	lsrs	r3, r3, #8
 80095ae:	0719      	lsls	r1, r3, #28
 80095b0:	bf04      	itt	eq
 80095b2:	091b      	lsreq	r3, r3, #4
 80095b4:	3204      	addeq	r2, #4
 80095b6:	0799      	lsls	r1, r3, #30
 80095b8:	bf04      	itt	eq
 80095ba:	089b      	lsreq	r3, r3, #2
 80095bc:	3202      	addeq	r2, #2
 80095be:	07d9      	lsls	r1, r3, #31
 80095c0:	d403      	bmi.n	80095ca <__lo0bits+0x4e>
 80095c2:	085b      	lsrs	r3, r3, #1
 80095c4:	f102 0201 	add.w	r2, r2, #1
 80095c8:	d003      	beq.n	80095d2 <__lo0bits+0x56>
 80095ca:	6003      	str	r3, [r0, #0]
 80095cc:	e7e5      	b.n	800959a <__lo0bits+0x1e>
 80095ce:	2200      	movs	r2, #0
 80095d0:	e7e3      	b.n	800959a <__lo0bits+0x1e>
 80095d2:	2220      	movs	r2, #32
 80095d4:	e7e1      	b.n	800959a <__lo0bits+0x1e>
	...

080095d8 <__i2b>:
 80095d8:	b510      	push	{r4, lr}
 80095da:	460c      	mov	r4, r1
 80095dc:	2101      	movs	r1, #1
 80095de:	f7ff ff05 	bl	80093ec <_Balloc>
 80095e2:	4602      	mov	r2, r0
 80095e4:	b928      	cbnz	r0, 80095f2 <__i2b+0x1a>
 80095e6:	4b05      	ldr	r3, [pc, #20]	; (80095fc <__i2b+0x24>)
 80095e8:	4805      	ldr	r0, [pc, #20]	; (8009600 <__i2b+0x28>)
 80095ea:	f240 1145 	movw	r1, #325	; 0x145
 80095ee:	f000 fca7 	bl	8009f40 <__assert_func>
 80095f2:	2301      	movs	r3, #1
 80095f4:	6144      	str	r4, [r0, #20]
 80095f6:	6103      	str	r3, [r0, #16]
 80095f8:	bd10      	pop	{r4, pc}
 80095fa:	bf00      	nop
 80095fc:	0800acb0 	.word	0x0800acb0
 8009600:	0800acc1 	.word	0x0800acc1

08009604 <__multiply>:
 8009604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	4691      	mov	r9, r2
 800960a:	690a      	ldr	r2, [r1, #16]
 800960c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009610:	429a      	cmp	r2, r3
 8009612:	bfb8      	it	lt
 8009614:	460b      	movlt	r3, r1
 8009616:	460c      	mov	r4, r1
 8009618:	bfbc      	itt	lt
 800961a:	464c      	movlt	r4, r9
 800961c:	4699      	movlt	r9, r3
 800961e:	6927      	ldr	r7, [r4, #16]
 8009620:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009624:	68a3      	ldr	r3, [r4, #8]
 8009626:	6861      	ldr	r1, [r4, #4]
 8009628:	eb07 060a 	add.w	r6, r7, sl
 800962c:	42b3      	cmp	r3, r6
 800962e:	b085      	sub	sp, #20
 8009630:	bfb8      	it	lt
 8009632:	3101      	addlt	r1, #1
 8009634:	f7ff feda 	bl	80093ec <_Balloc>
 8009638:	b930      	cbnz	r0, 8009648 <__multiply+0x44>
 800963a:	4602      	mov	r2, r0
 800963c:	4b44      	ldr	r3, [pc, #272]	; (8009750 <__multiply+0x14c>)
 800963e:	4845      	ldr	r0, [pc, #276]	; (8009754 <__multiply+0x150>)
 8009640:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009644:	f000 fc7c 	bl	8009f40 <__assert_func>
 8009648:	f100 0514 	add.w	r5, r0, #20
 800964c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009650:	462b      	mov	r3, r5
 8009652:	2200      	movs	r2, #0
 8009654:	4543      	cmp	r3, r8
 8009656:	d321      	bcc.n	800969c <__multiply+0x98>
 8009658:	f104 0314 	add.w	r3, r4, #20
 800965c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009660:	f109 0314 	add.w	r3, r9, #20
 8009664:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009668:	9202      	str	r2, [sp, #8]
 800966a:	1b3a      	subs	r2, r7, r4
 800966c:	3a15      	subs	r2, #21
 800966e:	f022 0203 	bic.w	r2, r2, #3
 8009672:	3204      	adds	r2, #4
 8009674:	f104 0115 	add.w	r1, r4, #21
 8009678:	428f      	cmp	r7, r1
 800967a:	bf38      	it	cc
 800967c:	2204      	movcc	r2, #4
 800967e:	9201      	str	r2, [sp, #4]
 8009680:	9a02      	ldr	r2, [sp, #8]
 8009682:	9303      	str	r3, [sp, #12]
 8009684:	429a      	cmp	r2, r3
 8009686:	d80c      	bhi.n	80096a2 <__multiply+0x9e>
 8009688:	2e00      	cmp	r6, #0
 800968a:	dd03      	ble.n	8009694 <__multiply+0x90>
 800968c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009690:	2b00      	cmp	r3, #0
 8009692:	d05b      	beq.n	800974c <__multiply+0x148>
 8009694:	6106      	str	r6, [r0, #16]
 8009696:	b005      	add	sp, #20
 8009698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969c:	f843 2b04 	str.w	r2, [r3], #4
 80096a0:	e7d8      	b.n	8009654 <__multiply+0x50>
 80096a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80096a6:	f1ba 0f00 	cmp.w	sl, #0
 80096aa:	d024      	beq.n	80096f6 <__multiply+0xf2>
 80096ac:	f104 0e14 	add.w	lr, r4, #20
 80096b0:	46a9      	mov	r9, r5
 80096b2:	f04f 0c00 	mov.w	ip, #0
 80096b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80096ba:	f8d9 1000 	ldr.w	r1, [r9]
 80096be:	fa1f fb82 	uxth.w	fp, r2
 80096c2:	b289      	uxth	r1, r1
 80096c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80096c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80096cc:	f8d9 2000 	ldr.w	r2, [r9]
 80096d0:	4461      	add	r1, ip
 80096d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80096da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80096de:	b289      	uxth	r1, r1
 80096e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80096e4:	4577      	cmp	r7, lr
 80096e6:	f849 1b04 	str.w	r1, [r9], #4
 80096ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80096ee:	d8e2      	bhi.n	80096b6 <__multiply+0xb2>
 80096f0:	9a01      	ldr	r2, [sp, #4]
 80096f2:	f845 c002 	str.w	ip, [r5, r2]
 80096f6:	9a03      	ldr	r2, [sp, #12]
 80096f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80096fc:	3304      	adds	r3, #4
 80096fe:	f1b9 0f00 	cmp.w	r9, #0
 8009702:	d021      	beq.n	8009748 <__multiply+0x144>
 8009704:	6829      	ldr	r1, [r5, #0]
 8009706:	f104 0c14 	add.w	ip, r4, #20
 800970a:	46ae      	mov	lr, r5
 800970c:	f04f 0a00 	mov.w	sl, #0
 8009710:	f8bc b000 	ldrh.w	fp, [ip]
 8009714:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009718:	fb09 220b 	mla	r2, r9, fp, r2
 800971c:	4452      	add	r2, sl
 800971e:	b289      	uxth	r1, r1
 8009720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009724:	f84e 1b04 	str.w	r1, [lr], #4
 8009728:	f85c 1b04 	ldr.w	r1, [ip], #4
 800972c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009730:	f8be 1000 	ldrh.w	r1, [lr]
 8009734:	fb09 110a 	mla	r1, r9, sl, r1
 8009738:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800973c:	4567      	cmp	r7, ip
 800973e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009742:	d8e5      	bhi.n	8009710 <__multiply+0x10c>
 8009744:	9a01      	ldr	r2, [sp, #4]
 8009746:	50a9      	str	r1, [r5, r2]
 8009748:	3504      	adds	r5, #4
 800974a:	e799      	b.n	8009680 <__multiply+0x7c>
 800974c:	3e01      	subs	r6, #1
 800974e:	e79b      	b.n	8009688 <__multiply+0x84>
 8009750:	0800acb0 	.word	0x0800acb0
 8009754:	0800acc1 	.word	0x0800acc1

08009758 <__pow5mult>:
 8009758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800975c:	4615      	mov	r5, r2
 800975e:	f012 0203 	ands.w	r2, r2, #3
 8009762:	4606      	mov	r6, r0
 8009764:	460f      	mov	r7, r1
 8009766:	d007      	beq.n	8009778 <__pow5mult+0x20>
 8009768:	4c25      	ldr	r4, [pc, #148]	; (8009800 <__pow5mult+0xa8>)
 800976a:	3a01      	subs	r2, #1
 800976c:	2300      	movs	r3, #0
 800976e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009772:	f7ff fe9d 	bl	80094b0 <__multadd>
 8009776:	4607      	mov	r7, r0
 8009778:	10ad      	asrs	r5, r5, #2
 800977a:	d03d      	beq.n	80097f8 <__pow5mult+0xa0>
 800977c:	69f4      	ldr	r4, [r6, #28]
 800977e:	b97c      	cbnz	r4, 80097a0 <__pow5mult+0x48>
 8009780:	2010      	movs	r0, #16
 8009782:	f7fe f83b 	bl	80077fc <malloc>
 8009786:	4602      	mov	r2, r0
 8009788:	61f0      	str	r0, [r6, #28]
 800978a:	b928      	cbnz	r0, 8009798 <__pow5mult+0x40>
 800978c:	4b1d      	ldr	r3, [pc, #116]	; (8009804 <__pow5mult+0xac>)
 800978e:	481e      	ldr	r0, [pc, #120]	; (8009808 <__pow5mult+0xb0>)
 8009790:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009794:	f000 fbd4 	bl	8009f40 <__assert_func>
 8009798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800979c:	6004      	str	r4, [r0, #0]
 800979e:	60c4      	str	r4, [r0, #12]
 80097a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80097a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097a8:	b94c      	cbnz	r4, 80097be <__pow5mult+0x66>
 80097aa:	f240 2171 	movw	r1, #625	; 0x271
 80097ae:	4630      	mov	r0, r6
 80097b0:	f7ff ff12 	bl	80095d8 <__i2b>
 80097b4:	2300      	movs	r3, #0
 80097b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80097ba:	4604      	mov	r4, r0
 80097bc:	6003      	str	r3, [r0, #0]
 80097be:	f04f 0900 	mov.w	r9, #0
 80097c2:	07eb      	lsls	r3, r5, #31
 80097c4:	d50a      	bpl.n	80097dc <__pow5mult+0x84>
 80097c6:	4639      	mov	r1, r7
 80097c8:	4622      	mov	r2, r4
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7ff ff1a 	bl	8009604 <__multiply>
 80097d0:	4639      	mov	r1, r7
 80097d2:	4680      	mov	r8, r0
 80097d4:	4630      	mov	r0, r6
 80097d6:	f7ff fe49 	bl	800946c <_Bfree>
 80097da:	4647      	mov	r7, r8
 80097dc:	106d      	asrs	r5, r5, #1
 80097de:	d00b      	beq.n	80097f8 <__pow5mult+0xa0>
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	b938      	cbnz	r0, 80097f4 <__pow5mult+0x9c>
 80097e4:	4622      	mov	r2, r4
 80097e6:	4621      	mov	r1, r4
 80097e8:	4630      	mov	r0, r6
 80097ea:	f7ff ff0b 	bl	8009604 <__multiply>
 80097ee:	6020      	str	r0, [r4, #0]
 80097f0:	f8c0 9000 	str.w	r9, [r0]
 80097f4:	4604      	mov	r4, r0
 80097f6:	e7e4      	b.n	80097c2 <__pow5mult+0x6a>
 80097f8:	4638      	mov	r0, r7
 80097fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fe:	bf00      	nop
 8009800:	0800ae10 	.word	0x0800ae10
 8009804:	0800ac41 	.word	0x0800ac41
 8009808:	0800acc1 	.word	0x0800acc1

0800980c <__lshift>:
 800980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009810:	460c      	mov	r4, r1
 8009812:	6849      	ldr	r1, [r1, #4]
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800981a:	68a3      	ldr	r3, [r4, #8]
 800981c:	4607      	mov	r7, r0
 800981e:	4691      	mov	r9, r2
 8009820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009824:	f108 0601 	add.w	r6, r8, #1
 8009828:	42b3      	cmp	r3, r6
 800982a:	db0b      	blt.n	8009844 <__lshift+0x38>
 800982c:	4638      	mov	r0, r7
 800982e:	f7ff fddd 	bl	80093ec <_Balloc>
 8009832:	4605      	mov	r5, r0
 8009834:	b948      	cbnz	r0, 800984a <__lshift+0x3e>
 8009836:	4602      	mov	r2, r0
 8009838:	4b28      	ldr	r3, [pc, #160]	; (80098dc <__lshift+0xd0>)
 800983a:	4829      	ldr	r0, [pc, #164]	; (80098e0 <__lshift+0xd4>)
 800983c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009840:	f000 fb7e 	bl	8009f40 <__assert_func>
 8009844:	3101      	adds	r1, #1
 8009846:	005b      	lsls	r3, r3, #1
 8009848:	e7ee      	b.n	8009828 <__lshift+0x1c>
 800984a:	2300      	movs	r3, #0
 800984c:	f100 0114 	add.w	r1, r0, #20
 8009850:	f100 0210 	add.w	r2, r0, #16
 8009854:	4618      	mov	r0, r3
 8009856:	4553      	cmp	r3, sl
 8009858:	db33      	blt.n	80098c2 <__lshift+0xb6>
 800985a:	6920      	ldr	r0, [r4, #16]
 800985c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009860:	f104 0314 	add.w	r3, r4, #20
 8009864:	f019 091f 	ands.w	r9, r9, #31
 8009868:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800986c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009870:	d02b      	beq.n	80098ca <__lshift+0xbe>
 8009872:	f1c9 0e20 	rsb	lr, r9, #32
 8009876:	468a      	mov	sl, r1
 8009878:	2200      	movs	r2, #0
 800987a:	6818      	ldr	r0, [r3, #0]
 800987c:	fa00 f009 	lsl.w	r0, r0, r9
 8009880:	4310      	orrs	r0, r2
 8009882:	f84a 0b04 	str.w	r0, [sl], #4
 8009886:	f853 2b04 	ldr.w	r2, [r3], #4
 800988a:	459c      	cmp	ip, r3
 800988c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009890:	d8f3      	bhi.n	800987a <__lshift+0x6e>
 8009892:	ebac 0304 	sub.w	r3, ip, r4
 8009896:	3b15      	subs	r3, #21
 8009898:	f023 0303 	bic.w	r3, r3, #3
 800989c:	3304      	adds	r3, #4
 800989e:	f104 0015 	add.w	r0, r4, #21
 80098a2:	4584      	cmp	ip, r0
 80098a4:	bf38      	it	cc
 80098a6:	2304      	movcc	r3, #4
 80098a8:	50ca      	str	r2, [r1, r3]
 80098aa:	b10a      	cbz	r2, 80098b0 <__lshift+0xa4>
 80098ac:	f108 0602 	add.w	r6, r8, #2
 80098b0:	3e01      	subs	r6, #1
 80098b2:	4638      	mov	r0, r7
 80098b4:	612e      	str	r6, [r5, #16]
 80098b6:	4621      	mov	r1, r4
 80098b8:	f7ff fdd8 	bl	800946c <_Bfree>
 80098bc:	4628      	mov	r0, r5
 80098be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80098c6:	3301      	adds	r3, #1
 80098c8:	e7c5      	b.n	8009856 <__lshift+0x4a>
 80098ca:	3904      	subs	r1, #4
 80098cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80098d4:	459c      	cmp	ip, r3
 80098d6:	d8f9      	bhi.n	80098cc <__lshift+0xc0>
 80098d8:	e7ea      	b.n	80098b0 <__lshift+0xa4>
 80098da:	bf00      	nop
 80098dc:	0800acb0 	.word	0x0800acb0
 80098e0:	0800acc1 	.word	0x0800acc1

080098e4 <__mcmp>:
 80098e4:	b530      	push	{r4, r5, lr}
 80098e6:	6902      	ldr	r2, [r0, #16]
 80098e8:	690c      	ldr	r4, [r1, #16]
 80098ea:	1b12      	subs	r2, r2, r4
 80098ec:	d10e      	bne.n	800990c <__mcmp+0x28>
 80098ee:	f100 0314 	add.w	r3, r0, #20
 80098f2:	3114      	adds	r1, #20
 80098f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80098f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80098fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009900:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009904:	42a5      	cmp	r5, r4
 8009906:	d003      	beq.n	8009910 <__mcmp+0x2c>
 8009908:	d305      	bcc.n	8009916 <__mcmp+0x32>
 800990a:	2201      	movs	r2, #1
 800990c:	4610      	mov	r0, r2
 800990e:	bd30      	pop	{r4, r5, pc}
 8009910:	4283      	cmp	r3, r0
 8009912:	d3f3      	bcc.n	80098fc <__mcmp+0x18>
 8009914:	e7fa      	b.n	800990c <__mcmp+0x28>
 8009916:	f04f 32ff 	mov.w	r2, #4294967295
 800991a:	e7f7      	b.n	800990c <__mcmp+0x28>

0800991c <__mdiff>:
 800991c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	460c      	mov	r4, r1
 8009922:	4606      	mov	r6, r0
 8009924:	4611      	mov	r1, r2
 8009926:	4620      	mov	r0, r4
 8009928:	4690      	mov	r8, r2
 800992a:	f7ff ffdb 	bl	80098e4 <__mcmp>
 800992e:	1e05      	subs	r5, r0, #0
 8009930:	d110      	bne.n	8009954 <__mdiff+0x38>
 8009932:	4629      	mov	r1, r5
 8009934:	4630      	mov	r0, r6
 8009936:	f7ff fd59 	bl	80093ec <_Balloc>
 800993a:	b930      	cbnz	r0, 800994a <__mdiff+0x2e>
 800993c:	4b3a      	ldr	r3, [pc, #232]	; (8009a28 <__mdiff+0x10c>)
 800993e:	4602      	mov	r2, r0
 8009940:	f240 2137 	movw	r1, #567	; 0x237
 8009944:	4839      	ldr	r0, [pc, #228]	; (8009a2c <__mdiff+0x110>)
 8009946:	f000 fafb 	bl	8009f40 <__assert_func>
 800994a:	2301      	movs	r3, #1
 800994c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009954:	bfa4      	itt	ge
 8009956:	4643      	movge	r3, r8
 8009958:	46a0      	movge	r8, r4
 800995a:	4630      	mov	r0, r6
 800995c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009960:	bfa6      	itte	ge
 8009962:	461c      	movge	r4, r3
 8009964:	2500      	movge	r5, #0
 8009966:	2501      	movlt	r5, #1
 8009968:	f7ff fd40 	bl	80093ec <_Balloc>
 800996c:	b920      	cbnz	r0, 8009978 <__mdiff+0x5c>
 800996e:	4b2e      	ldr	r3, [pc, #184]	; (8009a28 <__mdiff+0x10c>)
 8009970:	4602      	mov	r2, r0
 8009972:	f240 2145 	movw	r1, #581	; 0x245
 8009976:	e7e5      	b.n	8009944 <__mdiff+0x28>
 8009978:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800997c:	6926      	ldr	r6, [r4, #16]
 800997e:	60c5      	str	r5, [r0, #12]
 8009980:	f104 0914 	add.w	r9, r4, #20
 8009984:	f108 0514 	add.w	r5, r8, #20
 8009988:	f100 0e14 	add.w	lr, r0, #20
 800998c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009990:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009994:	f108 0210 	add.w	r2, r8, #16
 8009998:	46f2      	mov	sl, lr
 800999a:	2100      	movs	r1, #0
 800999c:	f859 3b04 	ldr.w	r3, [r9], #4
 80099a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80099a4:	fa11 f88b 	uxtah	r8, r1, fp
 80099a8:	b299      	uxth	r1, r3
 80099aa:	0c1b      	lsrs	r3, r3, #16
 80099ac:	eba8 0801 	sub.w	r8, r8, r1
 80099b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80099b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80099b8:	fa1f f888 	uxth.w	r8, r8
 80099bc:	1419      	asrs	r1, r3, #16
 80099be:	454e      	cmp	r6, r9
 80099c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80099c4:	f84a 3b04 	str.w	r3, [sl], #4
 80099c8:	d8e8      	bhi.n	800999c <__mdiff+0x80>
 80099ca:	1b33      	subs	r3, r6, r4
 80099cc:	3b15      	subs	r3, #21
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	3304      	adds	r3, #4
 80099d4:	3415      	adds	r4, #21
 80099d6:	42a6      	cmp	r6, r4
 80099d8:	bf38      	it	cc
 80099da:	2304      	movcc	r3, #4
 80099dc:	441d      	add	r5, r3
 80099de:	4473      	add	r3, lr
 80099e0:	469e      	mov	lr, r3
 80099e2:	462e      	mov	r6, r5
 80099e4:	4566      	cmp	r6, ip
 80099e6:	d30e      	bcc.n	8009a06 <__mdiff+0xea>
 80099e8:	f10c 0203 	add.w	r2, ip, #3
 80099ec:	1b52      	subs	r2, r2, r5
 80099ee:	f022 0203 	bic.w	r2, r2, #3
 80099f2:	3d03      	subs	r5, #3
 80099f4:	45ac      	cmp	ip, r5
 80099f6:	bf38      	it	cc
 80099f8:	2200      	movcc	r2, #0
 80099fa:	4413      	add	r3, r2
 80099fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009a00:	b17a      	cbz	r2, 8009a22 <__mdiff+0x106>
 8009a02:	6107      	str	r7, [r0, #16]
 8009a04:	e7a4      	b.n	8009950 <__mdiff+0x34>
 8009a06:	f856 8b04 	ldr.w	r8, [r6], #4
 8009a0a:	fa11 f288 	uxtah	r2, r1, r8
 8009a0e:	1414      	asrs	r4, r2, #16
 8009a10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a14:	b292      	uxth	r2, r2
 8009a16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009a1a:	f84e 2b04 	str.w	r2, [lr], #4
 8009a1e:	1421      	asrs	r1, r4, #16
 8009a20:	e7e0      	b.n	80099e4 <__mdiff+0xc8>
 8009a22:	3f01      	subs	r7, #1
 8009a24:	e7ea      	b.n	80099fc <__mdiff+0xe0>
 8009a26:	bf00      	nop
 8009a28:	0800acb0 	.word	0x0800acb0
 8009a2c:	0800acc1 	.word	0x0800acc1

08009a30 <__d2b>:
 8009a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	460f      	mov	r7, r1
 8009a36:	2101      	movs	r1, #1
 8009a38:	ec59 8b10 	vmov	r8, r9, d0
 8009a3c:	4616      	mov	r6, r2
 8009a3e:	f7ff fcd5 	bl	80093ec <_Balloc>
 8009a42:	4604      	mov	r4, r0
 8009a44:	b930      	cbnz	r0, 8009a54 <__d2b+0x24>
 8009a46:	4602      	mov	r2, r0
 8009a48:	4b24      	ldr	r3, [pc, #144]	; (8009adc <__d2b+0xac>)
 8009a4a:	4825      	ldr	r0, [pc, #148]	; (8009ae0 <__d2b+0xb0>)
 8009a4c:	f240 310f 	movw	r1, #783	; 0x30f
 8009a50:	f000 fa76 	bl	8009f40 <__assert_func>
 8009a54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a5c:	bb2d      	cbnz	r5, 8009aaa <__d2b+0x7a>
 8009a5e:	9301      	str	r3, [sp, #4]
 8009a60:	f1b8 0300 	subs.w	r3, r8, #0
 8009a64:	d026      	beq.n	8009ab4 <__d2b+0x84>
 8009a66:	4668      	mov	r0, sp
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	f7ff fd87 	bl	800957c <__lo0bits>
 8009a6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a72:	b1e8      	cbz	r0, 8009ab0 <__d2b+0x80>
 8009a74:	f1c0 0320 	rsb	r3, r0, #32
 8009a78:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	40c2      	lsrs	r2, r0
 8009a80:	6163      	str	r3, [r4, #20]
 8009a82:	9201      	str	r2, [sp, #4]
 8009a84:	9b01      	ldr	r3, [sp, #4]
 8009a86:	61a3      	str	r3, [r4, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	bf14      	ite	ne
 8009a8c:	2202      	movne	r2, #2
 8009a8e:	2201      	moveq	r2, #1
 8009a90:	6122      	str	r2, [r4, #16]
 8009a92:	b1bd      	cbz	r5, 8009ac4 <__d2b+0x94>
 8009a94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a98:	4405      	add	r5, r0
 8009a9a:	603d      	str	r5, [r7, #0]
 8009a9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009aa0:	6030      	str	r0, [r6, #0]
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	b003      	add	sp, #12
 8009aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009aae:	e7d6      	b.n	8009a5e <__d2b+0x2e>
 8009ab0:	6161      	str	r1, [r4, #20]
 8009ab2:	e7e7      	b.n	8009a84 <__d2b+0x54>
 8009ab4:	a801      	add	r0, sp, #4
 8009ab6:	f7ff fd61 	bl	800957c <__lo0bits>
 8009aba:	9b01      	ldr	r3, [sp, #4]
 8009abc:	6163      	str	r3, [r4, #20]
 8009abe:	3020      	adds	r0, #32
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	e7e5      	b.n	8009a90 <__d2b+0x60>
 8009ac4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ac8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009acc:	6038      	str	r0, [r7, #0]
 8009ace:	6918      	ldr	r0, [r3, #16]
 8009ad0:	f7ff fd34 	bl	800953c <__hi0bits>
 8009ad4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ad8:	e7e2      	b.n	8009aa0 <__d2b+0x70>
 8009ada:	bf00      	nop
 8009adc:	0800acb0 	.word	0x0800acb0
 8009ae0:	0800acc1 	.word	0x0800acc1

08009ae4 <__ssputs_r>:
 8009ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae8:	688e      	ldr	r6, [r1, #8]
 8009aea:	461f      	mov	r7, r3
 8009aec:	42be      	cmp	r6, r7
 8009aee:	680b      	ldr	r3, [r1, #0]
 8009af0:	4682      	mov	sl, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	4690      	mov	r8, r2
 8009af6:	d82c      	bhi.n	8009b52 <__ssputs_r+0x6e>
 8009af8:	898a      	ldrh	r2, [r1, #12]
 8009afa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009afe:	d026      	beq.n	8009b4e <__ssputs_r+0x6a>
 8009b00:	6965      	ldr	r5, [r4, #20]
 8009b02:	6909      	ldr	r1, [r1, #16]
 8009b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b08:	eba3 0901 	sub.w	r9, r3, r1
 8009b0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b10:	1c7b      	adds	r3, r7, #1
 8009b12:	444b      	add	r3, r9
 8009b14:	106d      	asrs	r5, r5, #1
 8009b16:	429d      	cmp	r5, r3
 8009b18:	bf38      	it	cc
 8009b1a:	461d      	movcc	r5, r3
 8009b1c:	0553      	lsls	r3, r2, #21
 8009b1e:	d527      	bpl.n	8009b70 <__ssputs_r+0x8c>
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7fd fe9b 	bl	800785c <_malloc_r>
 8009b26:	4606      	mov	r6, r0
 8009b28:	b360      	cbz	r0, 8009b84 <__ssputs_r+0xa0>
 8009b2a:	6921      	ldr	r1, [r4, #16]
 8009b2c:	464a      	mov	r2, r9
 8009b2e:	f000 f9f9 	bl	8009f24 <memcpy>
 8009b32:	89a3      	ldrh	r3, [r4, #12]
 8009b34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	6126      	str	r6, [r4, #16]
 8009b40:	6165      	str	r5, [r4, #20]
 8009b42:	444e      	add	r6, r9
 8009b44:	eba5 0509 	sub.w	r5, r5, r9
 8009b48:	6026      	str	r6, [r4, #0]
 8009b4a:	60a5      	str	r5, [r4, #8]
 8009b4c:	463e      	mov	r6, r7
 8009b4e:	42be      	cmp	r6, r7
 8009b50:	d900      	bls.n	8009b54 <__ssputs_r+0x70>
 8009b52:	463e      	mov	r6, r7
 8009b54:	6820      	ldr	r0, [r4, #0]
 8009b56:	4632      	mov	r2, r6
 8009b58:	4641      	mov	r1, r8
 8009b5a:	f000 f9c9 	bl	8009ef0 <memmove>
 8009b5e:	68a3      	ldr	r3, [r4, #8]
 8009b60:	1b9b      	subs	r3, r3, r6
 8009b62:	60a3      	str	r3, [r4, #8]
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	4433      	add	r3, r6
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b70:	462a      	mov	r2, r5
 8009b72:	f000 fa2b 	bl	8009fcc <_realloc_r>
 8009b76:	4606      	mov	r6, r0
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	d1e0      	bne.n	8009b3e <__ssputs_r+0x5a>
 8009b7c:	6921      	ldr	r1, [r4, #16]
 8009b7e:	4650      	mov	r0, sl
 8009b80:	f7ff fbe8 	bl	8009354 <_free_r>
 8009b84:	230c      	movs	r3, #12
 8009b86:	f8ca 3000 	str.w	r3, [sl]
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b90:	81a3      	strh	r3, [r4, #12]
 8009b92:	f04f 30ff 	mov.w	r0, #4294967295
 8009b96:	e7e9      	b.n	8009b6c <__ssputs_r+0x88>

08009b98 <_svfiprintf_r>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	4698      	mov	r8, r3
 8009b9e:	898b      	ldrh	r3, [r1, #12]
 8009ba0:	061b      	lsls	r3, r3, #24
 8009ba2:	b09d      	sub	sp, #116	; 0x74
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	460d      	mov	r5, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	d50e      	bpl.n	8009bca <_svfiprintf_r+0x32>
 8009bac:	690b      	ldr	r3, [r1, #16]
 8009bae:	b963      	cbnz	r3, 8009bca <_svfiprintf_r+0x32>
 8009bb0:	2140      	movs	r1, #64	; 0x40
 8009bb2:	f7fd fe53 	bl	800785c <_malloc_r>
 8009bb6:	6028      	str	r0, [r5, #0]
 8009bb8:	6128      	str	r0, [r5, #16]
 8009bba:	b920      	cbnz	r0, 8009bc6 <_svfiprintf_r+0x2e>
 8009bbc:	230c      	movs	r3, #12
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc4:	e0d0      	b.n	8009d68 <_svfiprintf_r+0x1d0>
 8009bc6:	2340      	movs	r3, #64	; 0x40
 8009bc8:	616b      	str	r3, [r5, #20]
 8009bca:	2300      	movs	r3, #0
 8009bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8009bce:	2320      	movs	r3, #32
 8009bd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009bd8:	2330      	movs	r3, #48	; 0x30
 8009bda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009d80 <_svfiprintf_r+0x1e8>
 8009bde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009be2:	f04f 0901 	mov.w	r9, #1
 8009be6:	4623      	mov	r3, r4
 8009be8:	469a      	mov	sl, r3
 8009bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bee:	b10a      	cbz	r2, 8009bf4 <_svfiprintf_r+0x5c>
 8009bf0:	2a25      	cmp	r2, #37	; 0x25
 8009bf2:	d1f9      	bne.n	8009be8 <_svfiprintf_r+0x50>
 8009bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8009bf8:	d00b      	beq.n	8009c12 <_svfiprintf_r+0x7a>
 8009bfa:	465b      	mov	r3, fp
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4638      	mov	r0, r7
 8009c02:	f7ff ff6f 	bl	8009ae4 <__ssputs_r>
 8009c06:	3001      	adds	r0, #1
 8009c08:	f000 80a9 	beq.w	8009d5e <_svfiprintf_r+0x1c6>
 8009c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c0e:	445a      	add	r2, fp
 8009c10:	9209      	str	r2, [sp, #36]	; 0x24
 8009c12:	f89a 3000 	ldrb.w	r3, [sl]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 80a1 	beq.w	8009d5e <_svfiprintf_r+0x1c6>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c26:	f10a 0a01 	add.w	sl, sl, #1
 8009c2a:	9304      	str	r3, [sp, #16]
 8009c2c:	9307      	str	r3, [sp, #28]
 8009c2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c32:	931a      	str	r3, [sp, #104]	; 0x68
 8009c34:	4654      	mov	r4, sl
 8009c36:	2205      	movs	r2, #5
 8009c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c3c:	4850      	ldr	r0, [pc, #320]	; (8009d80 <_svfiprintf_r+0x1e8>)
 8009c3e:	f7f6 facf 	bl	80001e0 <memchr>
 8009c42:	9a04      	ldr	r2, [sp, #16]
 8009c44:	b9d8      	cbnz	r0, 8009c7e <_svfiprintf_r+0xe6>
 8009c46:	06d0      	lsls	r0, r2, #27
 8009c48:	bf44      	itt	mi
 8009c4a:	2320      	movmi	r3, #32
 8009c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c50:	0711      	lsls	r1, r2, #28
 8009c52:	bf44      	itt	mi
 8009c54:	232b      	movmi	r3, #43	; 0x2b
 8009c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c60:	d015      	beq.n	8009c8e <_svfiprintf_r+0xf6>
 8009c62:	9a07      	ldr	r2, [sp, #28]
 8009c64:	4654      	mov	r4, sl
 8009c66:	2000      	movs	r0, #0
 8009c68:	f04f 0c0a 	mov.w	ip, #10
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c72:	3b30      	subs	r3, #48	; 0x30
 8009c74:	2b09      	cmp	r3, #9
 8009c76:	d94d      	bls.n	8009d14 <_svfiprintf_r+0x17c>
 8009c78:	b1b0      	cbz	r0, 8009ca8 <_svfiprintf_r+0x110>
 8009c7a:	9207      	str	r2, [sp, #28]
 8009c7c:	e014      	b.n	8009ca8 <_svfiprintf_r+0x110>
 8009c7e:	eba0 0308 	sub.w	r3, r0, r8
 8009c82:	fa09 f303 	lsl.w	r3, r9, r3
 8009c86:	4313      	orrs	r3, r2
 8009c88:	9304      	str	r3, [sp, #16]
 8009c8a:	46a2      	mov	sl, r4
 8009c8c:	e7d2      	b.n	8009c34 <_svfiprintf_r+0x9c>
 8009c8e:	9b03      	ldr	r3, [sp, #12]
 8009c90:	1d19      	adds	r1, r3, #4
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	9103      	str	r1, [sp, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	bfbb      	ittet	lt
 8009c9a:	425b      	neglt	r3, r3
 8009c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8009ca0:	9307      	strge	r3, [sp, #28]
 8009ca2:	9307      	strlt	r3, [sp, #28]
 8009ca4:	bfb8      	it	lt
 8009ca6:	9204      	strlt	r2, [sp, #16]
 8009ca8:	7823      	ldrb	r3, [r4, #0]
 8009caa:	2b2e      	cmp	r3, #46	; 0x2e
 8009cac:	d10c      	bne.n	8009cc8 <_svfiprintf_r+0x130>
 8009cae:	7863      	ldrb	r3, [r4, #1]
 8009cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb2:	d134      	bne.n	8009d1e <_svfiprintf_r+0x186>
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	1d1a      	adds	r2, r3, #4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	9203      	str	r2, [sp, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfb8      	it	lt
 8009cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009cc4:	3402      	adds	r4, #2
 8009cc6:	9305      	str	r3, [sp, #20]
 8009cc8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009d90 <_svfiprintf_r+0x1f8>
 8009ccc:	7821      	ldrb	r1, [r4, #0]
 8009cce:	2203      	movs	r2, #3
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	f7f6 fa85 	bl	80001e0 <memchr>
 8009cd6:	b138      	cbz	r0, 8009ce8 <_svfiprintf_r+0x150>
 8009cd8:	9b04      	ldr	r3, [sp, #16]
 8009cda:	eba0 000a 	sub.w	r0, r0, sl
 8009cde:	2240      	movs	r2, #64	; 0x40
 8009ce0:	4082      	lsls	r2, r0
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	3401      	adds	r4, #1
 8009ce6:	9304      	str	r3, [sp, #16]
 8009ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cec:	4825      	ldr	r0, [pc, #148]	; (8009d84 <_svfiprintf_r+0x1ec>)
 8009cee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cf2:	2206      	movs	r2, #6
 8009cf4:	f7f6 fa74 	bl	80001e0 <memchr>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d038      	beq.n	8009d6e <_svfiprintf_r+0x1d6>
 8009cfc:	4b22      	ldr	r3, [pc, #136]	; (8009d88 <_svfiprintf_r+0x1f0>)
 8009cfe:	bb1b      	cbnz	r3, 8009d48 <_svfiprintf_r+0x1b0>
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	3307      	adds	r3, #7
 8009d04:	f023 0307 	bic.w	r3, r3, #7
 8009d08:	3308      	adds	r3, #8
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d0e:	4433      	add	r3, r6
 8009d10:	9309      	str	r3, [sp, #36]	; 0x24
 8009d12:	e768      	b.n	8009be6 <_svfiprintf_r+0x4e>
 8009d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d18:	460c      	mov	r4, r1
 8009d1a:	2001      	movs	r0, #1
 8009d1c:	e7a6      	b.n	8009c6c <_svfiprintf_r+0xd4>
 8009d1e:	2300      	movs	r3, #0
 8009d20:	3401      	adds	r4, #1
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	4619      	mov	r1, r3
 8009d26:	f04f 0c0a 	mov.w	ip, #10
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d30:	3a30      	subs	r2, #48	; 0x30
 8009d32:	2a09      	cmp	r2, #9
 8009d34:	d903      	bls.n	8009d3e <_svfiprintf_r+0x1a6>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0c6      	beq.n	8009cc8 <_svfiprintf_r+0x130>
 8009d3a:	9105      	str	r1, [sp, #20]
 8009d3c:	e7c4      	b.n	8009cc8 <_svfiprintf_r+0x130>
 8009d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d42:	4604      	mov	r4, r0
 8009d44:	2301      	movs	r3, #1
 8009d46:	e7f0      	b.n	8009d2a <_svfiprintf_r+0x192>
 8009d48:	ab03      	add	r3, sp, #12
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	462a      	mov	r2, r5
 8009d4e:	4b0f      	ldr	r3, [pc, #60]	; (8009d8c <_svfiprintf_r+0x1f4>)
 8009d50:	a904      	add	r1, sp, #16
 8009d52:	4638      	mov	r0, r7
 8009d54:	f7fd feae 	bl	8007ab4 <_printf_float>
 8009d58:	1c42      	adds	r2, r0, #1
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	d1d6      	bne.n	8009d0c <_svfiprintf_r+0x174>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	065b      	lsls	r3, r3, #25
 8009d62:	f53f af2d 	bmi.w	8009bc0 <_svfiprintf_r+0x28>
 8009d66:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d68:	b01d      	add	sp, #116	; 0x74
 8009d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6e:	ab03      	add	r3, sp, #12
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	462a      	mov	r2, r5
 8009d74:	4b05      	ldr	r3, [pc, #20]	; (8009d8c <_svfiprintf_r+0x1f4>)
 8009d76:	a904      	add	r1, sp, #16
 8009d78:	4638      	mov	r0, r7
 8009d7a:	f7fe f93f 	bl	8007ffc <_printf_i>
 8009d7e:	e7eb      	b.n	8009d58 <_svfiprintf_r+0x1c0>
 8009d80:	0800ae1c 	.word	0x0800ae1c
 8009d84:	0800ae26 	.word	0x0800ae26
 8009d88:	08007ab5 	.word	0x08007ab5
 8009d8c:	08009ae5 	.word	0x08009ae5
 8009d90:	0800ae22 	.word	0x0800ae22

08009d94 <__sflush_r>:
 8009d94:	898a      	ldrh	r2, [r1, #12]
 8009d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	0710      	lsls	r0, r2, #28
 8009d9e:	460c      	mov	r4, r1
 8009da0:	d458      	bmi.n	8009e54 <__sflush_r+0xc0>
 8009da2:	684b      	ldr	r3, [r1, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	dc05      	bgt.n	8009db4 <__sflush_r+0x20>
 8009da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dc02      	bgt.n	8009db4 <__sflush_r+0x20>
 8009dae:	2000      	movs	r0, #0
 8009db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009db6:	2e00      	cmp	r6, #0
 8009db8:	d0f9      	beq.n	8009dae <__sflush_r+0x1a>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dc0:	682f      	ldr	r7, [r5, #0]
 8009dc2:	6a21      	ldr	r1, [r4, #32]
 8009dc4:	602b      	str	r3, [r5, #0]
 8009dc6:	d032      	beq.n	8009e2e <__sflush_r+0x9a>
 8009dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	075a      	lsls	r2, r3, #29
 8009dce:	d505      	bpl.n	8009ddc <__sflush_r+0x48>
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	1ac0      	subs	r0, r0, r3
 8009dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dd6:	b10b      	cbz	r3, 8009ddc <__sflush_r+0x48>
 8009dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dda:	1ac0      	subs	r0, r0, r3
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4602      	mov	r2, r0
 8009de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009de2:	6a21      	ldr	r1, [r4, #32]
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b0      	blx	r6
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	d106      	bne.n	8009dfc <__sflush_r+0x68>
 8009dee:	6829      	ldr	r1, [r5, #0]
 8009df0:	291d      	cmp	r1, #29
 8009df2:	d82b      	bhi.n	8009e4c <__sflush_r+0xb8>
 8009df4:	4a29      	ldr	r2, [pc, #164]	; (8009e9c <__sflush_r+0x108>)
 8009df6:	410a      	asrs	r2, r1
 8009df8:	07d6      	lsls	r6, r2, #31
 8009dfa:	d427      	bmi.n	8009e4c <__sflush_r+0xb8>
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	6062      	str	r2, [r4, #4]
 8009e00:	04d9      	lsls	r1, r3, #19
 8009e02:	6922      	ldr	r2, [r4, #16]
 8009e04:	6022      	str	r2, [r4, #0]
 8009e06:	d504      	bpl.n	8009e12 <__sflush_r+0x7e>
 8009e08:	1c42      	adds	r2, r0, #1
 8009e0a:	d101      	bne.n	8009e10 <__sflush_r+0x7c>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b903      	cbnz	r3, 8009e12 <__sflush_r+0x7e>
 8009e10:	6560      	str	r0, [r4, #84]	; 0x54
 8009e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e14:	602f      	str	r7, [r5, #0]
 8009e16:	2900      	cmp	r1, #0
 8009e18:	d0c9      	beq.n	8009dae <__sflush_r+0x1a>
 8009e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e1e:	4299      	cmp	r1, r3
 8009e20:	d002      	beq.n	8009e28 <__sflush_r+0x94>
 8009e22:	4628      	mov	r0, r5
 8009e24:	f7ff fa96 	bl	8009354 <_free_r>
 8009e28:	2000      	movs	r0, #0
 8009e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8009e2c:	e7c0      	b.n	8009db0 <__sflush_r+0x1c>
 8009e2e:	2301      	movs	r3, #1
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b0      	blx	r6
 8009e34:	1c41      	adds	r1, r0, #1
 8009e36:	d1c8      	bne.n	8009dca <__sflush_r+0x36>
 8009e38:	682b      	ldr	r3, [r5, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0c5      	beq.n	8009dca <__sflush_r+0x36>
 8009e3e:	2b1d      	cmp	r3, #29
 8009e40:	d001      	beq.n	8009e46 <__sflush_r+0xb2>
 8009e42:	2b16      	cmp	r3, #22
 8009e44:	d101      	bne.n	8009e4a <__sflush_r+0xb6>
 8009e46:	602f      	str	r7, [r5, #0]
 8009e48:	e7b1      	b.n	8009dae <__sflush_r+0x1a>
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e50:	81a3      	strh	r3, [r4, #12]
 8009e52:	e7ad      	b.n	8009db0 <__sflush_r+0x1c>
 8009e54:	690f      	ldr	r7, [r1, #16]
 8009e56:	2f00      	cmp	r7, #0
 8009e58:	d0a9      	beq.n	8009dae <__sflush_r+0x1a>
 8009e5a:	0793      	lsls	r3, r2, #30
 8009e5c:	680e      	ldr	r6, [r1, #0]
 8009e5e:	bf08      	it	eq
 8009e60:	694b      	ldreq	r3, [r1, #20]
 8009e62:	600f      	str	r7, [r1, #0]
 8009e64:	bf18      	it	ne
 8009e66:	2300      	movne	r3, #0
 8009e68:	eba6 0807 	sub.w	r8, r6, r7
 8009e6c:	608b      	str	r3, [r1, #8]
 8009e6e:	f1b8 0f00 	cmp.w	r8, #0
 8009e72:	dd9c      	ble.n	8009dae <__sflush_r+0x1a>
 8009e74:	6a21      	ldr	r1, [r4, #32]
 8009e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e78:	4643      	mov	r3, r8
 8009e7a:	463a      	mov	r2, r7
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b0      	blx	r6
 8009e80:	2800      	cmp	r0, #0
 8009e82:	dc06      	bgt.n	8009e92 <__sflush_r+0xfe>
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e8a:	81a3      	strh	r3, [r4, #12]
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e90:	e78e      	b.n	8009db0 <__sflush_r+0x1c>
 8009e92:	4407      	add	r7, r0
 8009e94:	eba8 0800 	sub.w	r8, r8, r0
 8009e98:	e7e9      	b.n	8009e6e <__sflush_r+0xda>
 8009e9a:	bf00      	nop
 8009e9c:	dfbffffe 	.word	0xdfbffffe

08009ea0 <_fflush_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	690b      	ldr	r3, [r1, #16]
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	b913      	cbnz	r3, 8009eb0 <_fflush_r+0x10>
 8009eaa:	2500      	movs	r5, #0
 8009eac:	4628      	mov	r0, r5
 8009eae:	bd38      	pop	{r3, r4, r5, pc}
 8009eb0:	b118      	cbz	r0, 8009eba <_fflush_r+0x1a>
 8009eb2:	6a03      	ldr	r3, [r0, #32]
 8009eb4:	b90b      	cbnz	r3, 8009eba <_fflush_r+0x1a>
 8009eb6:	f7fe fa4f 	bl	8008358 <__sinit>
 8009eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f3      	beq.n	8009eaa <_fflush_r+0xa>
 8009ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ec4:	07d0      	lsls	r0, r2, #31
 8009ec6:	d404      	bmi.n	8009ed2 <_fflush_r+0x32>
 8009ec8:	0599      	lsls	r1, r3, #22
 8009eca:	d402      	bmi.n	8009ed2 <_fflush_r+0x32>
 8009ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ece:	f7fe fbc2 	bl	8008656 <__retarget_lock_acquire_recursive>
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	f7ff ff5d 	bl	8009d94 <__sflush_r>
 8009eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009edc:	07da      	lsls	r2, r3, #31
 8009ede:	4605      	mov	r5, r0
 8009ee0:	d4e4      	bmi.n	8009eac <_fflush_r+0xc>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	059b      	lsls	r3, r3, #22
 8009ee6:	d4e1      	bmi.n	8009eac <_fflush_r+0xc>
 8009ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eea:	f7fe fbb5 	bl	8008658 <__retarget_lock_release_recursive>
 8009eee:	e7dd      	b.n	8009eac <_fflush_r+0xc>

08009ef0 <memmove>:
 8009ef0:	4288      	cmp	r0, r1
 8009ef2:	b510      	push	{r4, lr}
 8009ef4:	eb01 0402 	add.w	r4, r1, r2
 8009ef8:	d902      	bls.n	8009f00 <memmove+0x10>
 8009efa:	4284      	cmp	r4, r0
 8009efc:	4623      	mov	r3, r4
 8009efe:	d807      	bhi.n	8009f10 <memmove+0x20>
 8009f00:	1e43      	subs	r3, r0, #1
 8009f02:	42a1      	cmp	r1, r4
 8009f04:	d008      	beq.n	8009f18 <memmove+0x28>
 8009f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f0e:	e7f8      	b.n	8009f02 <memmove+0x12>
 8009f10:	4402      	add	r2, r0
 8009f12:	4601      	mov	r1, r0
 8009f14:	428a      	cmp	r2, r1
 8009f16:	d100      	bne.n	8009f1a <memmove+0x2a>
 8009f18:	bd10      	pop	{r4, pc}
 8009f1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f22:	e7f7      	b.n	8009f14 <memmove+0x24>

08009f24 <memcpy>:
 8009f24:	440a      	add	r2, r1
 8009f26:	4291      	cmp	r1, r2
 8009f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f2c:	d100      	bne.n	8009f30 <memcpy+0xc>
 8009f2e:	4770      	bx	lr
 8009f30:	b510      	push	{r4, lr}
 8009f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f3a:	4291      	cmp	r1, r2
 8009f3c:	d1f9      	bne.n	8009f32 <memcpy+0xe>
 8009f3e:	bd10      	pop	{r4, pc}

08009f40 <__assert_func>:
 8009f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f42:	4614      	mov	r4, r2
 8009f44:	461a      	mov	r2, r3
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <__assert_func+0x2c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	68d8      	ldr	r0, [r3, #12]
 8009f4e:	b14c      	cbz	r4, 8009f64 <__assert_func+0x24>
 8009f50:	4b07      	ldr	r3, [pc, #28]	; (8009f70 <__assert_func+0x30>)
 8009f52:	9100      	str	r1, [sp, #0]
 8009f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f58:	4906      	ldr	r1, [pc, #24]	; (8009f74 <__assert_func+0x34>)
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	f000 f872 	bl	800a044 <fiprintf>
 8009f60:	f7fd fc44 	bl	80077ec <abort>
 8009f64:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <__assert_func+0x38>)
 8009f66:	461c      	mov	r4, r3
 8009f68:	e7f3      	b.n	8009f52 <__assert_func+0x12>
 8009f6a:	bf00      	nop
 8009f6c:	20000068 	.word	0x20000068
 8009f70:	0800ae37 	.word	0x0800ae37
 8009f74:	0800ae44 	.word	0x0800ae44
 8009f78:	0800ae72 	.word	0x0800ae72

08009f7c <_calloc_r>:
 8009f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f7e:	fba1 2402 	umull	r2, r4, r1, r2
 8009f82:	b94c      	cbnz	r4, 8009f98 <_calloc_r+0x1c>
 8009f84:	4611      	mov	r1, r2
 8009f86:	9201      	str	r2, [sp, #4]
 8009f88:	f7fd fc68 	bl	800785c <_malloc_r>
 8009f8c:	9a01      	ldr	r2, [sp, #4]
 8009f8e:	4605      	mov	r5, r0
 8009f90:	b930      	cbnz	r0, 8009fa0 <_calloc_r+0x24>
 8009f92:	4628      	mov	r0, r5
 8009f94:	b003      	add	sp, #12
 8009f96:	bd30      	pop	{r4, r5, pc}
 8009f98:	220c      	movs	r2, #12
 8009f9a:	6002      	str	r2, [r0, #0]
 8009f9c:	2500      	movs	r5, #0
 8009f9e:	e7f8      	b.n	8009f92 <_calloc_r+0x16>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	f7fe fa86 	bl	80084b2 <memset>
 8009fa6:	e7f4      	b.n	8009f92 <_calloc_r+0x16>

08009fa8 <__ascii_mbtowc>:
 8009fa8:	b082      	sub	sp, #8
 8009faa:	b901      	cbnz	r1, 8009fae <__ascii_mbtowc+0x6>
 8009fac:	a901      	add	r1, sp, #4
 8009fae:	b142      	cbz	r2, 8009fc2 <__ascii_mbtowc+0x1a>
 8009fb0:	b14b      	cbz	r3, 8009fc6 <__ascii_mbtowc+0x1e>
 8009fb2:	7813      	ldrb	r3, [r2, #0]
 8009fb4:	600b      	str	r3, [r1, #0]
 8009fb6:	7812      	ldrb	r2, [r2, #0]
 8009fb8:	1e10      	subs	r0, r2, #0
 8009fba:	bf18      	it	ne
 8009fbc:	2001      	movne	r0, #1
 8009fbe:	b002      	add	sp, #8
 8009fc0:	4770      	bx	lr
 8009fc2:	4610      	mov	r0, r2
 8009fc4:	e7fb      	b.n	8009fbe <__ascii_mbtowc+0x16>
 8009fc6:	f06f 0001 	mvn.w	r0, #1
 8009fca:	e7f8      	b.n	8009fbe <__ascii_mbtowc+0x16>

08009fcc <_realloc_r>:
 8009fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4614      	mov	r4, r2
 8009fd4:	460e      	mov	r6, r1
 8009fd6:	b921      	cbnz	r1, 8009fe2 <_realloc_r+0x16>
 8009fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fdc:	4611      	mov	r1, r2
 8009fde:	f7fd bc3d 	b.w	800785c <_malloc_r>
 8009fe2:	b92a      	cbnz	r2, 8009ff0 <_realloc_r+0x24>
 8009fe4:	f7ff f9b6 	bl	8009354 <_free_r>
 8009fe8:	4625      	mov	r5, r4
 8009fea:	4628      	mov	r0, r5
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	f000 f83a 	bl	800a068 <_malloc_usable_size_r>
 8009ff4:	4284      	cmp	r4, r0
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	d802      	bhi.n	800a000 <_realloc_r+0x34>
 8009ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ffe:	d812      	bhi.n	800a026 <_realloc_r+0x5a>
 800a000:	4621      	mov	r1, r4
 800a002:	4640      	mov	r0, r8
 800a004:	f7fd fc2a 	bl	800785c <_malloc_r>
 800a008:	4605      	mov	r5, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d0ed      	beq.n	8009fea <_realloc_r+0x1e>
 800a00e:	42bc      	cmp	r4, r7
 800a010:	4622      	mov	r2, r4
 800a012:	4631      	mov	r1, r6
 800a014:	bf28      	it	cs
 800a016:	463a      	movcs	r2, r7
 800a018:	f7ff ff84 	bl	8009f24 <memcpy>
 800a01c:	4631      	mov	r1, r6
 800a01e:	4640      	mov	r0, r8
 800a020:	f7ff f998 	bl	8009354 <_free_r>
 800a024:	e7e1      	b.n	8009fea <_realloc_r+0x1e>
 800a026:	4635      	mov	r5, r6
 800a028:	e7df      	b.n	8009fea <_realloc_r+0x1e>

0800a02a <__ascii_wctomb>:
 800a02a:	b149      	cbz	r1, 800a040 <__ascii_wctomb+0x16>
 800a02c:	2aff      	cmp	r2, #255	; 0xff
 800a02e:	bf85      	ittet	hi
 800a030:	238a      	movhi	r3, #138	; 0x8a
 800a032:	6003      	strhi	r3, [r0, #0]
 800a034:	700a      	strbls	r2, [r1, #0]
 800a036:	f04f 30ff 	movhi.w	r0, #4294967295
 800a03a:	bf98      	it	ls
 800a03c:	2001      	movls	r0, #1
 800a03e:	4770      	bx	lr
 800a040:	4608      	mov	r0, r1
 800a042:	4770      	bx	lr

0800a044 <fiprintf>:
 800a044:	b40e      	push	{r1, r2, r3}
 800a046:	b503      	push	{r0, r1, lr}
 800a048:	4601      	mov	r1, r0
 800a04a:	ab03      	add	r3, sp, #12
 800a04c:	4805      	ldr	r0, [pc, #20]	; (800a064 <fiprintf+0x20>)
 800a04e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a052:	6800      	ldr	r0, [r0, #0]
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	f000 f839 	bl	800a0cc <_vfiprintf_r>
 800a05a:	b002      	add	sp, #8
 800a05c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a060:	b003      	add	sp, #12
 800a062:	4770      	bx	lr
 800a064:	20000068 	.word	0x20000068

0800a068 <_malloc_usable_size_r>:
 800a068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a06c:	1f18      	subs	r0, r3, #4
 800a06e:	2b00      	cmp	r3, #0
 800a070:	bfbc      	itt	lt
 800a072:	580b      	ldrlt	r3, [r1, r0]
 800a074:	18c0      	addlt	r0, r0, r3
 800a076:	4770      	bx	lr

0800a078 <__sfputc_r>:
 800a078:	6893      	ldr	r3, [r2, #8]
 800a07a:	3b01      	subs	r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	b410      	push	{r4}
 800a080:	6093      	str	r3, [r2, #8]
 800a082:	da08      	bge.n	800a096 <__sfputc_r+0x1e>
 800a084:	6994      	ldr	r4, [r2, #24]
 800a086:	42a3      	cmp	r3, r4
 800a088:	db01      	blt.n	800a08e <__sfputc_r+0x16>
 800a08a:	290a      	cmp	r1, #10
 800a08c:	d103      	bne.n	800a096 <__sfputc_r+0x1e>
 800a08e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a092:	f000 b935 	b.w	800a300 <__swbuf_r>
 800a096:	6813      	ldr	r3, [r2, #0]
 800a098:	1c58      	adds	r0, r3, #1
 800a09a:	6010      	str	r0, [r2, #0]
 800a09c:	7019      	strb	r1, [r3, #0]
 800a09e:	4608      	mov	r0, r1
 800a0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0a4:	4770      	bx	lr

0800a0a6 <__sfputs_r>:
 800a0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a8:	4606      	mov	r6, r0
 800a0aa:	460f      	mov	r7, r1
 800a0ac:	4614      	mov	r4, r2
 800a0ae:	18d5      	adds	r5, r2, r3
 800a0b0:	42ac      	cmp	r4, r5
 800a0b2:	d101      	bne.n	800a0b8 <__sfputs_r+0x12>
 800a0b4:	2000      	movs	r0, #0
 800a0b6:	e007      	b.n	800a0c8 <__sfputs_r+0x22>
 800a0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0bc:	463a      	mov	r2, r7
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f7ff ffda 	bl	800a078 <__sfputc_r>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d1f3      	bne.n	800a0b0 <__sfputs_r+0xa>
 800a0c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0cc <_vfiprintf_r>:
 800a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	b09d      	sub	sp, #116	; 0x74
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	4698      	mov	r8, r3
 800a0d8:	4606      	mov	r6, r0
 800a0da:	b118      	cbz	r0, 800a0e4 <_vfiprintf_r+0x18>
 800a0dc:	6a03      	ldr	r3, [r0, #32]
 800a0de:	b90b      	cbnz	r3, 800a0e4 <_vfiprintf_r+0x18>
 800a0e0:	f7fe f93a 	bl	8008358 <__sinit>
 800a0e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0e6:	07d9      	lsls	r1, r3, #31
 800a0e8:	d405      	bmi.n	800a0f6 <_vfiprintf_r+0x2a>
 800a0ea:	89ab      	ldrh	r3, [r5, #12]
 800a0ec:	059a      	lsls	r2, r3, #22
 800a0ee:	d402      	bmi.n	800a0f6 <_vfiprintf_r+0x2a>
 800a0f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0f2:	f7fe fab0 	bl	8008656 <__retarget_lock_acquire_recursive>
 800a0f6:	89ab      	ldrh	r3, [r5, #12]
 800a0f8:	071b      	lsls	r3, r3, #28
 800a0fa:	d501      	bpl.n	800a100 <_vfiprintf_r+0x34>
 800a0fc:	692b      	ldr	r3, [r5, #16]
 800a0fe:	b99b      	cbnz	r3, 800a128 <_vfiprintf_r+0x5c>
 800a100:	4629      	mov	r1, r5
 800a102:	4630      	mov	r0, r6
 800a104:	f000 f93a 	bl	800a37c <__swsetup_r>
 800a108:	b170      	cbz	r0, 800a128 <_vfiprintf_r+0x5c>
 800a10a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a10c:	07dc      	lsls	r4, r3, #31
 800a10e:	d504      	bpl.n	800a11a <_vfiprintf_r+0x4e>
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	b01d      	add	sp, #116	; 0x74
 800a116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	0598      	lsls	r0, r3, #22
 800a11e:	d4f7      	bmi.n	800a110 <_vfiprintf_r+0x44>
 800a120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a122:	f7fe fa99 	bl	8008658 <__retarget_lock_release_recursive>
 800a126:	e7f3      	b.n	800a110 <_vfiprintf_r+0x44>
 800a128:	2300      	movs	r3, #0
 800a12a:	9309      	str	r3, [sp, #36]	; 0x24
 800a12c:	2320      	movs	r3, #32
 800a12e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a132:	f8cd 800c 	str.w	r8, [sp, #12]
 800a136:	2330      	movs	r3, #48	; 0x30
 800a138:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a2ec <_vfiprintf_r+0x220>
 800a13c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a140:	f04f 0901 	mov.w	r9, #1
 800a144:	4623      	mov	r3, r4
 800a146:	469a      	mov	sl, r3
 800a148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14c:	b10a      	cbz	r2, 800a152 <_vfiprintf_r+0x86>
 800a14e:	2a25      	cmp	r2, #37	; 0x25
 800a150:	d1f9      	bne.n	800a146 <_vfiprintf_r+0x7a>
 800a152:	ebba 0b04 	subs.w	fp, sl, r4
 800a156:	d00b      	beq.n	800a170 <_vfiprintf_r+0xa4>
 800a158:	465b      	mov	r3, fp
 800a15a:	4622      	mov	r2, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	4630      	mov	r0, r6
 800a160:	f7ff ffa1 	bl	800a0a6 <__sfputs_r>
 800a164:	3001      	adds	r0, #1
 800a166:	f000 80a9 	beq.w	800a2bc <_vfiprintf_r+0x1f0>
 800a16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a16c:	445a      	add	r2, fp
 800a16e:	9209      	str	r2, [sp, #36]	; 0x24
 800a170:	f89a 3000 	ldrb.w	r3, [sl]
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 80a1 	beq.w	800a2bc <_vfiprintf_r+0x1f0>
 800a17a:	2300      	movs	r3, #0
 800a17c:	f04f 32ff 	mov.w	r2, #4294967295
 800a180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a184:	f10a 0a01 	add.w	sl, sl, #1
 800a188:	9304      	str	r3, [sp, #16]
 800a18a:	9307      	str	r3, [sp, #28]
 800a18c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a190:	931a      	str	r3, [sp, #104]	; 0x68
 800a192:	4654      	mov	r4, sl
 800a194:	2205      	movs	r2, #5
 800a196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19a:	4854      	ldr	r0, [pc, #336]	; (800a2ec <_vfiprintf_r+0x220>)
 800a19c:	f7f6 f820 	bl	80001e0 <memchr>
 800a1a0:	9a04      	ldr	r2, [sp, #16]
 800a1a2:	b9d8      	cbnz	r0, 800a1dc <_vfiprintf_r+0x110>
 800a1a4:	06d1      	lsls	r1, r2, #27
 800a1a6:	bf44      	itt	mi
 800a1a8:	2320      	movmi	r3, #32
 800a1aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ae:	0713      	lsls	r3, r2, #28
 800a1b0:	bf44      	itt	mi
 800a1b2:	232b      	movmi	r3, #43	; 0x2b
 800a1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a1be:	d015      	beq.n	800a1ec <_vfiprintf_r+0x120>
 800a1c0:	9a07      	ldr	r2, [sp, #28]
 800a1c2:	4654      	mov	r4, sl
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f04f 0c0a 	mov.w	ip, #10
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d0:	3b30      	subs	r3, #48	; 0x30
 800a1d2:	2b09      	cmp	r3, #9
 800a1d4:	d94d      	bls.n	800a272 <_vfiprintf_r+0x1a6>
 800a1d6:	b1b0      	cbz	r0, 800a206 <_vfiprintf_r+0x13a>
 800a1d8:	9207      	str	r2, [sp, #28]
 800a1da:	e014      	b.n	800a206 <_vfiprintf_r+0x13a>
 800a1dc:	eba0 0308 	sub.w	r3, r0, r8
 800a1e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	9304      	str	r3, [sp, #16]
 800a1e8:	46a2      	mov	sl, r4
 800a1ea:	e7d2      	b.n	800a192 <_vfiprintf_r+0xc6>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	1d19      	adds	r1, r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	9103      	str	r1, [sp, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	bfbb      	ittet	lt
 800a1f8:	425b      	neglt	r3, r3
 800a1fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a1fe:	9307      	strge	r3, [sp, #28]
 800a200:	9307      	strlt	r3, [sp, #28]
 800a202:	bfb8      	it	lt
 800a204:	9204      	strlt	r2, [sp, #16]
 800a206:	7823      	ldrb	r3, [r4, #0]
 800a208:	2b2e      	cmp	r3, #46	; 0x2e
 800a20a:	d10c      	bne.n	800a226 <_vfiprintf_r+0x15a>
 800a20c:	7863      	ldrb	r3, [r4, #1]
 800a20e:	2b2a      	cmp	r3, #42	; 0x2a
 800a210:	d134      	bne.n	800a27c <_vfiprintf_r+0x1b0>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	1d1a      	adds	r2, r3, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	9203      	str	r2, [sp, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bfb8      	it	lt
 800a21e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a222:	3402      	adds	r4, #2
 800a224:	9305      	str	r3, [sp, #20]
 800a226:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a2fc <_vfiprintf_r+0x230>
 800a22a:	7821      	ldrb	r1, [r4, #0]
 800a22c:	2203      	movs	r2, #3
 800a22e:	4650      	mov	r0, sl
 800a230:	f7f5 ffd6 	bl	80001e0 <memchr>
 800a234:	b138      	cbz	r0, 800a246 <_vfiprintf_r+0x17a>
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	eba0 000a 	sub.w	r0, r0, sl
 800a23c:	2240      	movs	r2, #64	; 0x40
 800a23e:	4082      	lsls	r2, r0
 800a240:	4313      	orrs	r3, r2
 800a242:	3401      	adds	r4, #1
 800a244:	9304      	str	r3, [sp, #16]
 800a246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24a:	4829      	ldr	r0, [pc, #164]	; (800a2f0 <_vfiprintf_r+0x224>)
 800a24c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a250:	2206      	movs	r2, #6
 800a252:	f7f5 ffc5 	bl	80001e0 <memchr>
 800a256:	2800      	cmp	r0, #0
 800a258:	d03f      	beq.n	800a2da <_vfiprintf_r+0x20e>
 800a25a:	4b26      	ldr	r3, [pc, #152]	; (800a2f4 <_vfiprintf_r+0x228>)
 800a25c:	bb1b      	cbnz	r3, 800a2a6 <_vfiprintf_r+0x1da>
 800a25e:	9b03      	ldr	r3, [sp, #12]
 800a260:	3307      	adds	r3, #7
 800a262:	f023 0307 	bic.w	r3, r3, #7
 800a266:	3308      	adds	r3, #8
 800a268:	9303      	str	r3, [sp, #12]
 800a26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26c:	443b      	add	r3, r7
 800a26e:	9309      	str	r3, [sp, #36]	; 0x24
 800a270:	e768      	b.n	800a144 <_vfiprintf_r+0x78>
 800a272:	fb0c 3202 	mla	r2, ip, r2, r3
 800a276:	460c      	mov	r4, r1
 800a278:	2001      	movs	r0, #1
 800a27a:	e7a6      	b.n	800a1ca <_vfiprintf_r+0xfe>
 800a27c:	2300      	movs	r3, #0
 800a27e:	3401      	adds	r4, #1
 800a280:	9305      	str	r3, [sp, #20]
 800a282:	4619      	mov	r1, r3
 800a284:	f04f 0c0a 	mov.w	ip, #10
 800a288:	4620      	mov	r0, r4
 800a28a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a28e:	3a30      	subs	r2, #48	; 0x30
 800a290:	2a09      	cmp	r2, #9
 800a292:	d903      	bls.n	800a29c <_vfiprintf_r+0x1d0>
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0c6      	beq.n	800a226 <_vfiprintf_r+0x15a>
 800a298:	9105      	str	r1, [sp, #20]
 800a29a:	e7c4      	b.n	800a226 <_vfiprintf_r+0x15a>
 800a29c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e7f0      	b.n	800a288 <_vfiprintf_r+0x1bc>
 800a2a6:	ab03      	add	r3, sp, #12
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	462a      	mov	r2, r5
 800a2ac:	4b12      	ldr	r3, [pc, #72]	; (800a2f8 <_vfiprintf_r+0x22c>)
 800a2ae:	a904      	add	r1, sp, #16
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f7fd fbff 	bl	8007ab4 <_printf_float>
 800a2b6:	4607      	mov	r7, r0
 800a2b8:	1c78      	adds	r0, r7, #1
 800a2ba:	d1d6      	bne.n	800a26a <_vfiprintf_r+0x19e>
 800a2bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2be:	07d9      	lsls	r1, r3, #31
 800a2c0:	d405      	bmi.n	800a2ce <_vfiprintf_r+0x202>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	059a      	lsls	r2, r3, #22
 800a2c6:	d402      	bmi.n	800a2ce <_vfiprintf_r+0x202>
 800a2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ca:	f7fe f9c5 	bl	8008658 <__retarget_lock_release_recursive>
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	065b      	lsls	r3, r3, #25
 800a2d2:	f53f af1d 	bmi.w	800a110 <_vfiprintf_r+0x44>
 800a2d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2d8:	e71c      	b.n	800a114 <_vfiprintf_r+0x48>
 800a2da:	ab03      	add	r3, sp, #12
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	462a      	mov	r2, r5
 800a2e0:	4b05      	ldr	r3, [pc, #20]	; (800a2f8 <_vfiprintf_r+0x22c>)
 800a2e2:	a904      	add	r1, sp, #16
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7fd fe89 	bl	8007ffc <_printf_i>
 800a2ea:	e7e4      	b.n	800a2b6 <_vfiprintf_r+0x1ea>
 800a2ec:	0800ae1c 	.word	0x0800ae1c
 800a2f0:	0800ae26 	.word	0x0800ae26
 800a2f4:	08007ab5 	.word	0x08007ab5
 800a2f8:	0800a0a7 	.word	0x0800a0a7
 800a2fc:	0800ae22 	.word	0x0800ae22

0800a300 <__swbuf_r>:
 800a300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a302:	460e      	mov	r6, r1
 800a304:	4614      	mov	r4, r2
 800a306:	4605      	mov	r5, r0
 800a308:	b118      	cbz	r0, 800a312 <__swbuf_r+0x12>
 800a30a:	6a03      	ldr	r3, [r0, #32]
 800a30c:	b90b      	cbnz	r3, 800a312 <__swbuf_r+0x12>
 800a30e:	f7fe f823 	bl	8008358 <__sinit>
 800a312:	69a3      	ldr	r3, [r4, #24]
 800a314:	60a3      	str	r3, [r4, #8]
 800a316:	89a3      	ldrh	r3, [r4, #12]
 800a318:	071a      	lsls	r2, r3, #28
 800a31a:	d525      	bpl.n	800a368 <__swbuf_r+0x68>
 800a31c:	6923      	ldr	r3, [r4, #16]
 800a31e:	b31b      	cbz	r3, 800a368 <__swbuf_r+0x68>
 800a320:	6823      	ldr	r3, [r4, #0]
 800a322:	6922      	ldr	r2, [r4, #16]
 800a324:	1a98      	subs	r0, r3, r2
 800a326:	6963      	ldr	r3, [r4, #20]
 800a328:	b2f6      	uxtb	r6, r6
 800a32a:	4283      	cmp	r3, r0
 800a32c:	4637      	mov	r7, r6
 800a32e:	dc04      	bgt.n	800a33a <__swbuf_r+0x3a>
 800a330:	4621      	mov	r1, r4
 800a332:	4628      	mov	r0, r5
 800a334:	f7ff fdb4 	bl	8009ea0 <_fflush_r>
 800a338:	b9e0      	cbnz	r0, 800a374 <__swbuf_r+0x74>
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	60a3      	str	r3, [r4, #8]
 800a340:	6823      	ldr	r3, [r4, #0]
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	6022      	str	r2, [r4, #0]
 800a346:	701e      	strb	r6, [r3, #0]
 800a348:	6962      	ldr	r2, [r4, #20]
 800a34a:	1c43      	adds	r3, r0, #1
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d004      	beq.n	800a35a <__swbuf_r+0x5a>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	07db      	lsls	r3, r3, #31
 800a354:	d506      	bpl.n	800a364 <__swbuf_r+0x64>
 800a356:	2e0a      	cmp	r6, #10
 800a358:	d104      	bne.n	800a364 <__swbuf_r+0x64>
 800a35a:	4621      	mov	r1, r4
 800a35c:	4628      	mov	r0, r5
 800a35e:	f7ff fd9f 	bl	8009ea0 <_fflush_r>
 800a362:	b938      	cbnz	r0, 800a374 <__swbuf_r+0x74>
 800a364:	4638      	mov	r0, r7
 800a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a368:	4621      	mov	r1, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	f000 f806 	bl	800a37c <__swsetup_r>
 800a370:	2800      	cmp	r0, #0
 800a372:	d0d5      	beq.n	800a320 <__swbuf_r+0x20>
 800a374:	f04f 37ff 	mov.w	r7, #4294967295
 800a378:	e7f4      	b.n	800a364 <__swbuf_r+0x64>
	...

0800a37c <__swsetup_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4b2a      	ldr	r3, [pc, #168]	; (800a428 <__swsetup_r+0xac>)
 800a380:	4605      	mov	r5, r0
 800a382:	6818      	ldr	r0, [r3, #0]
 800a384:	460c      	mov	r4, r1
 800a386:	b118      	cbz	r0, 800a390 <__swsetup_r+0x14>
 800a388:	6a03      	ldr	r3, [r0, #32]
 800a38a:	b90b      	cbnz	r3, 800a390 <__swsetup_r+0x14>
 800a38c:	f7fd ffe4 	bl	8008358 <__sinit>
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a396:	0718      	lsls	r0, r3, #28
 800a398:	d422      	bmi.n	800a3e0 <__swsetup_r+0x64>
 800a39a:	06d9      	lsls	r1, r3, #27
 800a39c:	d407      	bmi.n	800a3ae <__swsetup_r+0x32>
 800a39e:	2309      	movs	r3, #9
 800a3a0:	602b      	str	r3, [r5, #0]
 800a3a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e034      	b.n	800a418 <__swsetup_r+0x9c>
 800a3ae:	0758      	lsls	r0, r3, #29
 800a3b0:	d512      	bpl.n	800a3d8 <__swsetup_r+0x5c>
 800a3b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3b4:	b141      	cbz	r1, 800a3c8 <__swsetup_r+0x4c>
 800a3b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3ba:	4299      	cmp	r1, r3
 800a3bc:	d002      	beq.n	800a3c4 <__swsetup_r+0x48>
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f7fe ffc8 	bl	8009354 <_free_r>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	6363      	str	r3, [r4, #52]	; 0x34
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	6063      	str	r3, [r4, #4]
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	f043 0308 	orr.w	r3, r3, #8
 800a3de:	81a3      	strh	r3, [r4, #12]
 800a3e0:	6923      	ldr	r3, [r4, #16]
 800a3e2:	b94b      	cbnz	r3, 800a3f8 <__swsetup_r+0x7c>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3ee:	d003      	beq.n	800a3f8 <__swsetup_r+0x7c>
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 f840 	bl	800a478 <__smakebuf_r>
 800a3f8:	89a0      	ldrh	r0, [r4, #12]
 800a3fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3fe:	f010 0301 	ands.w	r3, r0, #1
 800a402:	d00a      	beq.n	800a41a <__swsetup_r+0x9e>
 800a404:	2300      	movs	r3, #0
 800a406:	60a3      	str	r3, [r4, #8]
 800a408:	6963      	ldr	r3, [r4, #20]
 800a40a:	425b      	negs	r3, r3
 800a40c:	61a3      	str	r3, [r4, #24]
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	b943      	cbnz	r3, 800a424 <__swsetup_r+0xa8>
 800a412:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a416:	d1c4      	bne.n	800a3a2 <__swsetup_r+0x26>
 800a418:	bd38      	pop	{r3, r4, r5, pc}
 800a41a:	0781      	lsls	r1, r0, #30
 800a41c:	bf58      	it	pl
 800a41e:	6963      	ldrpl	r3, [r4, #20]
 800a420:	60a3      	str	r3, [r4, #8]
 800a422:	e7f4      	b.n	800a40e <__swsetup_r+0x92>
 800a424:	2000      	movs	r0, #0
 800a426:	e7f7      	b.n	800a418 <__swsetup_r+0x9c>
 800a428:	20000068 	.word	0x20000068

0800a42c <__swhatbuf_r>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	460c      	mov	r4, r1
 800a430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a434:	2900      	cmp	r1, #0
 800a436:	b096      	sub	sp, #88	; 0x58
 800a438:	4615      	mov	r5, r2
 800a43a:	461e      	mov	r6, r3
 800a43c:	da0d      	bge.n	800a45a <__swhatbuf_r+0x2e>
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a444:	f04f 0100 	mov.w	r1, #0
 800a448:	bf0c      	ite	eq
 800a44a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a44e:	2340      	movne	r3, #64	; 0x40
 800a450:	2000      	movs	r0, #0
 800a452:	6031      	str	r1, [r6, #0]
 800a454:	602b      	str	r3, [r5, #0]
 800a456:	b016      	add	sp, #88	; 0x58
 800a458:	bd70      	pop	{r4, r5, r6, pc}
 800a45a:	466a      	mov	r2, sp
 800a45c:	f000 f848 	bl	800a4f0 <_fstat_r>
 800a460:	2800      	cmp	r0, #0
 800a462:	dbec      	blt.n	800a43e <__swhatbuf_r+0x12>
 800a464:	9901      	ldr	r1, [sp, #4]
 800a466:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a46a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a46e:	4259      	negs	r1, r3
 800a470:	4159      	adcs	r1, r3
 800a472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a476:	e7eb      	b.n	800a450 <__swhatbuf_r+0x24>

0800a478 <__smakebuf_r>:
 800a478:	898b      	ldrh	r3, [r1, #12]
 800a47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a47c:	079d      	lsls	r5, r3, #30
 800a47e:	4606      	mov	r6, r0
 800a480:	460c      	mov	r4, r1
 800a482:	d507      	bpl.n	800a494 <__smakebuf_r+0x1c>
 800a484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	6123      	str	r3, [r4, #16]
 800a48c:	2301      	movs	r3, #1
 800a48e:	6163      	str	r3, [r4, #20]
 800a490:	b002      	add	sp, #8
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	ab01      	add	r3, sp, #4
 800a496:	466a      	mov	r2, sp
 800a498:	f7ff ffc8 	bl	800a42c <__swhatbuf_r>
 800a49c:	9900      	ldr	r1, [sp, #0]
 800a49e:	4605      	mov	r5, r0
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7fd f9db 	bl	800785c <_malloc_r>
 800a4a6:	b948      	cbnz	r0, 800a4bc <__smakebuf_r+0x44>
 800a4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ac:	059a      	lsls	r2, r3, #22
 800a4ae:	d4ef      	bmi.n	800a490 <__smakebuf_r+0x18>
 800a4b0:	f023 0303 	bic.w	r3, r3, #3
 800a4b4:	f043 0302 	orr.w	r3, r3, #2
 800a4b8:	81a3      	strh	r3, [r4, #12]
 800a4ba:	e7e3      	b.n	800a484 <__smakebuf_r+0xc>
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	6020      	str	r0, [r4, #0]
 800a4c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4c4:	81a3      	strh	r3, [r4, #12]
 800a4c6:	9b00      	ldr	r3, [sp, #0]
 800a4c8:	6163      	str	r3, [r4, #20]
 800a4ca:	9b01      	ldr	r3, [sp, #4]
 800a4cc:	6120      	str	r0, [r4, #16]
 800a4ce:	b15b      	cbz	r3, 800a4e8 <__smakebuf_r+0x70>
 800a4d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f000 f81d 	bl	800a514 <_isatty_r>
 800a4da:	b128      	cbz	r0, 800a4e8 <__smakebuf_r+0x70>
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	f023 0303 	bic.w	r3, r3, #3
 800a4e2:	f043 0301 	orr.w	r3, r3, #1
 800a4e6:	81a3      	strh	r3, [r4, #12]
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	431d      	orrs	r5, r3
 800a4ec:	81a5      	strh	r5, [r4, #12]
 800a4ee:	e7cf      	b.n	800a490 <__smakebuf_r+0x18>

0800a4f0 <_fstat_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	4d07      	ldr	r5, [pc, #28]	; (800a510 <_fstat_r+0x20>)
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	602b      	str	r3, [r5, #0]
 800a4fe:	f7f7 ff56 	bl	80023ae <_fstat>
 800a502:	1c43      	adds	r3, r0, #1
 800a504:	d102      	bne.n	800a50c <_fstat_r+0x1c>
 800a506:	682b      	ldr	r3, [r5, #0]
 800a508:	b103      	cbz	r3, 800a50c <_fstat_r+0x1c>
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	bd38      	pop	{r3, r4, r5, pc}
 800a50e:	bf00      	nop
 800a510:	200008cc 	.word	0x200008cc

0800a514 <_isatty_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4d06      	ldr	r5, [pc, #24]	; (800a530 <_isatty_r+0x1c>)
 800a518:	2300      	movs	r3, #0
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	f7f7 ff55 	bl	80023ce <_isatty>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_isatty_r+0x1a>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_isatty_r+0x1a>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	200008cc 	.word	0x200008cc

0800a534 <_init>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	bf00      	nop
 800a538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53a:	bc08      	pop	{r3}
 800a53c:	469e      	mov	lr, r3
 800a53e:	4770      	bx	lr

0800a540 <_fini>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	bf00      	nop
 800a544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a546:	bc08      	pop	{r3}
 800a548:	469e      	mov	lr, r3
 800a54a:	4770      	bx	lr
