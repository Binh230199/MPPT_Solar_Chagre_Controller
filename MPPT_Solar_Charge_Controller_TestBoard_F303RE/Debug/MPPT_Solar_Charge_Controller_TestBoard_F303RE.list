
MPPT_Solar_Charge_Controller_TestBoard_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e44  0800bcc0  0800bcc0  0001bcc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb04  0800cb04  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cb04  0800cb04  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cb04  0800cb04  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb04  0800cb04  0001cb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb08  0800cb08  0001cb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cb0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000758  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022bfc  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004715  00000000  00000000  00042e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001638  00000000  00000000  00047568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001146  00000000  00000000  00048ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027c88  00000000  00000000  00049ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020052  00000000  00000000  0007196e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dcf08  00000000  00000000  000919c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007098  00000000  00000000  0016e8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00175960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bca8 	.word	0x0800bca8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800bca8 	.word	0x0800bca8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <_ZN4blib6AnalogC1Ev>:

#include "Analog.h"

namespace blib
{
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f858 	bl	8000c78 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <_ZN4blib6AnalogC1Ev+0x44>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <_ZN4blib6AnalogC1Ev+0x48>)
 8000be2:	619a      	str	r2, [r3, #24]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <_ZN4blib6AnalogC1Ev+0x4c>)
 8000be8:	61da      	str	r2, [r3, #28]
    {
        sampling();
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f834 	bl	8000c58 <_ZN4blib6Analog8samplingEv>
    }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	0800c6d0 	.word	0x0800c6d0
 8000c00:	20000214 	.word	0x20000214
 8000c04:	20000264 	.word	0x20000264

08000c08 <_ZN4blib6AnalogD1Ev>:

    Analog::~Analog()
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <_ZN4blib6AnalogD1Ev+0x2c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fff0 	bl	8003c00 <HAL_ADC_Stop_DMA>
    Analog::~Analog()
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f838 	bl	8000c98 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
    }
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	0800c6d0 	.word	0x0800c6d0

08000c38 <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    }
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ffe1 	bl	8000c08 <_ZN4blib6AnalogD1Ev>
 8000c46:	2134      	movs	r1, #52	; 0x34
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f008 f96b 	bl	8008f24 <_ZdlPvj>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6998      	ldr	r0, [r3, #24]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3304      	adds	r3, #4
 8000c68:	2205      	movs	r2, #5
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f002 feac 	bl	80039c8 <HAL_ADC_Start_DMA>
    }
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
                {
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev+0x1c>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
                }
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	0800c6e0 	.word	0x0800c6e0

08000c98 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>:
                virtual ~Singleton()
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
                {
                }
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev+0x1c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	0800c6e0 	.word	0x0800c6e0

08000cb8 <_ZN4blib2dp9SingletonINS_6AnalogEED0Ev>:
                virtual ~Singleton()
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
                }
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe9 	bl	8000c98 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f008 f92b 	bl	8008f24 <_ZdlPvj>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_ZN4blib6Logger5printEPKc+0x2c>)
 8000ce2:	681c      	ldr	r4, [r3, #0]
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff facb 	bl	8000280 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	6879      	ldr	r1, [r7, #4]
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f007 f935 	bl	8007f64 <HAL_UART_Transmit>
            }
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd90      	pop	{r4, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000014 	.word	0x20000014

08000d08 <_ZN4blib13ChargeControlC1Ev>:
        {
            return value;    // Nếu giá trị nằm trong khoảng, trả về giá trị ban đầu
        }
    }

    ChargeControl::ChargeControl()
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f836 	bl	8000d84 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <_ZN4blib13ChargeControlC1Ev+0x34>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	721a      	strb	r2, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	725a      	strb	r2, [r3, #9]
    {

    }
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	0800c6f0 	.word	0x0800c6f0

08000d40 <_ZN4blib13ChargeControlD1Ev>:
    ChargeControl::~ChargeControl()
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <_ZN4blib13ChargeControlD1Ev+0x20>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f827 	bl	8000da4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
    {

    }
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800c6f0 	.word	0x0800c6f0

08000d64 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    }
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ffe7 	bl	8000d40 <_ZN4blib13ChargeControlD1Ev>
 8000d72:	211c      	movs	r1, #28
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f008 f8d5 	bl	8008f24 <_ZdlPvj>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>:
                Singleton()
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
                {
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev+0x1c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	601a      	str	r2, [r3, #0]
                }
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	0800c700 	.word	0x0800c700

08000da4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>:
                virtual ~Singleton()
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
                }
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev+0x1c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	0800c700 	.word	0x0800c700

08000dc4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED0Ev>:
                virtual ~Singleton()
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
                }
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ffe9 	bl	8000da4 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
 8000dd2:	2104      	movs	r1, #4
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f008 f8a5 	bl	8008f24 <_ZdlPvj>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 8000de4:	b598      	push	{r3, r4, r7, lr}
 8000de6:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d109      	bne.n	8000e04 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x20>
                        mInstance = new T();
 8000df0:	2034      	movs	r0, #52	; 0x34
 8000df2:	f008 f899 	bl	8008f28 <_Znwj>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461c      	mov	r4, r3
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f7ff fedc 	bl	8000bb8 <_ZN4blib6AnalogC1Ev>
 8000e00:	4b02      	ldr	r3, [pc, #8]	; (8000e0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8000e02:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8000e04:	4b01      	ldr	r3, [pc, #4]	; (8000e0c <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 8000e06:	681b      	ldr	r3, [r3, #0]
                }
 8000e08:	4618      	mov	r0, r3
 8000e0a:	bd98      	pop	{r3, r4, r7, pc}
 8000e0c:	200001fc 	.word	0x200001fc

08000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af02      	add	r7, sp, #8
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 8000e1e:	480c      	ldr	r0, [pc, #48]	; (8000e50 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8000e20:	f7ff ff5a 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	68fa      	ldr	r2, [r7, #12]
 8000e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e34:	4807      	ldr	r0, [pc, #28]	; (8000e54 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8000e36:	f008 fe7f 	bl	8009b38 <sniprintf>
                print(mBuffer);
 8000e3a:	4806      	ldr	r0, [pc, #24]	; (8000e54 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8000e3c:	f7ff ff4c 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 8000e42:	f7ff ff49 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
            }
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	0800bcfc 	.word	0x0800bcfc
 8000e54:	200003e8 	.word	0x200003e8
 8000e58:	0800bd04 	.word	0x0800bd04

08000e5c <_ZN4blib11LcdSimulateC1Ev>:
    using Callback = void (LcdSimulate::*)();

    class LcdSimulate : public dp::Singleton<LcdSimulate>
    {
        public:
            LcdSimulate() : mLcd(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 ffee 	bl	8002e48 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev>
 8000e6c:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <_ZN4blib11LcdSimulateC1Ev+0x90>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f103 000c 	add.w	r0, r3, #12
 8000e78:	234e      	movs	r3, #78	; 0x4e
 8000e7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <_ZN4blib11LcdSimulateC1Ev+0x94>)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	f007 fd6d 	bl	800895c <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>
            {
                mLcd.clearDisplay();
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	330c      	adds	r3, #12
 8000e86:	4618      	mov	r0, r3
 8000e88:	f007 ff44 	bl	8008d14 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "DO AN TOT NGHIEP");
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f103 000c 	add.w	r0, r3, #12
 8000e92:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <_ZN4blib11LcdSimulateC1Ev+0x98>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	2100      	movs	r1, #0
 8000e98:	f007 fe1a 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "NAM HOC: 2023-2024");
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f103 000c 	add.w	r0, r3, #12
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <_ZN4blib11LcdSimulateC1Ev+0x9c>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f007 fe12 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "LOP: DTD61DH");
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f103 000c 	add.w	r0, r3, #12
 8000eb2:	4b12      	ldr	r3, [pc, #72]	; (8000efc <_ZN4blib11LcdSimulateC1Ev+0xa0>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	f007 fe0a 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 1, "DAI HOC HANG HAI VN");
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f103 000c 	add.w	r0, r3, #12
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <_ZN4blib11LcdSimulateC1Ev+0xa4>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	f007 fe02 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                HAL_Delay(2000);
 8000ecc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ed0:	f002 fb48 	bl	8003564 <HAL_Delay>
                mCallback = &LcdSimulate::impl_1_HomeScreen;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <_ZN4blib11LcdSimulateC1Ev+0xa8>)
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
            }
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	0800c710 	.word	0x0800c710
 8000ef0:	200002a8 	.word	0x200002a8
 8000ef4:	0800bd08 	.word	0x0800bd08
 8000ef8:	0800bd1c 	.word	0x0800bd1c
 8000efc:	0800bd30 	.word	0x0800bd30
 8000f00:	0800bd40 	.word	0x0800bd40
 8000f04:	08000fa1 	.word	0x08000fa1

08000f08 <_ZN4blib11LcdSimulateD1Ev>:
            virtual ~LcdSimulate()
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
            {
 8000f10:	4a08      	ldr	r2, [pc, #32]	; (8000f34 <_ZN4blib11LcdSimulateD1Ev+0x2c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	330c      	adds	r3, #12
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f007 fd3c 	bl	8008998 <_ZN4blib3LcdD1Ev>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 ffa0 	bl	8002e68 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>

            }
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	0800c710 	.word	0x0800c710

08000f38 <_ZN4blib11LcdSimulateD0Ev>:
            virtual ~LcdSimulate()
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
            }
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ffe1 	bl	8000f08 <_ZN4blib11LcdSimulateD1Ev>
 8000f46:	2120      	movs	r1, #32
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f007 ffeb 	bl	8008f24 <_ZdlPvj>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZN4blib11LcdSimulate3runEv>:
            void run()
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
            {
                (LcdSimulate::getInstance().*mCallback)();
 8000f60:	f001 ffa2 	bl	8002ea8 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 8000f64:	4603      	mov	r3, r0
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6892      	ldr	r2, [r2, #8]
 8000f6a:	1052      	asrs	r2, r2, #1
 8000f6c:	1899      	adds	r1, r3, r2
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6892      	ldr	r2, [r2, #8]
 8000f72:	f002 0201 	and.w	r2, r2, #1
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d102      	bne.n	8000f80 <_ZN4blib11LcdSimulate3runEv+0x28>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	e008      	b.n	8000f92 <_ZN4blib11LcdSimulate3runEv+0x3a>
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	6892      	ldr	r2, [r2, #8]
 8000f84:	1052      	asrs	r2, r2, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	6852      	ldr	r2, [r2, #4]
 8000f8e:	4413      	add	r3, r2
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4608      	mov	r0, r1
 8000f94:	4798      	blx	r3
            }
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv>:
            void impl_1_HomeScreen()
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8000fa8:	f001 ff94 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8000fac:	60f8      	str	r0, [r7, #12]

                mLcd.clearDisplay();
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f007 feae 	bl	8008d14 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 2, "HOME SCREEN");
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f103 000c 	add.w	r0, r3, #12
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xbc>)
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	f007 fd84 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 2, "HOME SCREEN");
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f103 000c 	add.w	r0, r3, #12
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xbc>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	f007 fd7c 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 2, "HOME SCREEN");
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f103 000c 	add.w	r0, r3, #12
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xbc>)
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	f007 fd74 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 2, "Press any button");
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f103 000c 	add.w	r0, r3, #12
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xc0>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	2103      	movs	r1, #3
 8000ff4:	f007 fd6c 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>

                // Nhan nut bat ky thi se chuyen sang man hinh menu
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f007 fc69 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8000ffe:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001000:	2b01      	cmp	r3, #1
 8001002:	d011      	beq.n	8001028 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x88>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f007 fc63 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800100a:	4603      	mov	r3, r0
 800100c:	2b02      	cmp	r3, #2
 800100e:	d00b      	beq.n	8001028 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x88>
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
 8001010:	68f8      	ldr	r0, [r7, #12]
 8001012:	f007 fc5d 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001016:	4603      	mov	r3, r0
 8001018:	2b03      	cmp	r3, #3
 800101a:	d005      	beq.n	8001028 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x88>
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f007 fc57 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001022:	4603      	mov	r3, r0
 8001024:	2b04      	cmp	r3, #4
 8001026:	d101      	bne.n	800102c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x8c>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x8e>
 800102c:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xb2>
                {
                    LOGI("Go to menu screen");
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xc4>)
 8001034:	2243      	movs	r2, #67	; 0x43
 8001036:	490c      	ldr	r1, [pc, #48]	; (8001068 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xc8>)
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xcc>)
 800103a:	f7ff fee9 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0xd0>)
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
                    button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800104a:	2100      	movs	r1, #0
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f007 fc31 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                }
            }
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	0800bd54 	.word	0x0800bd54
 8001060:	0800bd60 	.word	0x0800bd60
 8001064:	0800bd74 	.word	0x0800bd74
 8001068:	0800bd88 	.word	0x0800bd88
 800106c:	0800bd94 	.word	0x0800bd94
 8001070:	08001075 	.word	0x08001075

08001074 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv>:

            void impl_2_MenuScreen()
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 800107c:	f001 ff2a 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001080:	60f8      	str	r0, [r7, #12]

                static int arrowLine = 0;

                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001082:	68f8      	ldr	r0, [r7, #12]
 8001084:	f007 fc24 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001088:	4603      	mov	r3, r0
 800108a:	2b01      	cmp	r3, #1
 800108c:	bf0c      	ite	eq
 800108e:	2301      	moveq	r3, #1
 8001090:	2300      	movne	r3, #0
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00d      	beq.n	80010b4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x40>
                {
                    if (arrowLine == 0)
 8001098:	4b5a      	ldr	r3, [pc, #360]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x34>
                    {
                        arrowLine = 2;
 80010a0:	4b58      	ldr	r3, [pc, #352]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e076      	b.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    else
                    {
                        arrowLine--;
 80010a8:	4b56      	ldr	r3, [pc, #344]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a55      	ldr	r2, [pc, #340]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80010b0:	6013      	str	r3, [r2, #0]
 80010b2:	e070      	b.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f007 fc0b 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b02      	cmp	r3, #2
 80010be:	bf0c      	ite	eq
 80010c0:	2301      	moveq	r3, #1
 80010c2:	2300      	movne	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00d      	beq.n	80010e6 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x72>
                {
                    if (arrowLine == 2)
 80010ca:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d103      	bne.n	80010da <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x66>
                    {
                        arrowLine = 0;
 80010d2:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e05d      	b.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    else
                    {
                        arrowLine++;
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a48      	ldr	r2, [pc, #288]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e057      	b.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f007 fbf2 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf0c      	ite	eq
 80010f2:	2301      	moveq	r3, #1
 80010f4:	2300      	movne	r3, #0
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d00f      	beq.n	800111c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xa8>
                {
                    LOGI("Go back to homescreen");
 80010fc:	4b42      	ldr	r3, [pc, #264]	; (8001208 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 80010fe:	226a      	movs	r2, #106	; 0x6a
 8001100:	4942      	ldr	r1, [pc, #264]	; (800120c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8001102:	4843      	ldr	r0, [pc, #268]	; (8001210 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x19c>)
 8001104:	f7ff fe84 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a42      	ldr	r2, [pc, #264]	; (8001214 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a0>)
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 8001114:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e03c      	b.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                }
                // Nhan nut SEL ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f007 fbd7 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001122:	4603      	mov	r3, r0
 8001124:	2b03      	cmp	r3, #3
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d031      	beq.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                {
                    // Chon DISPLAY MODE
                    if (arrowLine == 0)
 8001132:	4b34      	ldr	r3, [pc, #208]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xe0>
                    {
                        LOGI("Go to Display Menu");
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 800113c:	2274      	movs	r2, #116	; 0x74
 800113e:	4933      	ldr	r1, [pc, #204]	; (800120c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8001140:	4835      	ldr	r0, [pc, #212]	; (8001218 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a4>)
 8001142:	f7ff fe65 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_DisplayScroll;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a34      	ldr	r2, [pc, #208]	; (800121c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	e020      	b.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    // Chon SETTING MODE
                    else if (arrowLine == 1)
 8001154:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10c      	bne.n	8001176 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x102>
                    {
                        LOGI("Go to Setting Menu");
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 800115e:	227a      	movs	r2, #122	; 0x7a
 8001160:	492a      	ldr	r1, [pc, #168]	; (800120c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8001162:	482f      	ldr	r0, [pc, #188]	; (8001220 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1ac>)
 8001164:	f7ff fe54 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_SettingScroll;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a2e      	ldr	r2, [pc, #184]	; (8001224 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b0>)
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	e00f      	b.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    // Chon ABOUT
                    else if (arrowLine == 2)
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d10b      	bne.n	8001196 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    {
                        LOGI("Go to About");
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x194>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	4922      	ldr	r1, [pc, #136]	; (800120c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x198>)
 8001184:	4828      	ldr	r0, [pc, #160]	; (8001228 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b4>)
 8001186:	f7ff fe43 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_AboutScreen;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a27      	ldr	r2, [pc, #156]	; (800122c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b8>)
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
                else
                {

                }

                mLcd.clearDisplay();
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	330c      	adds	r3, #12
 800119a:	4618      	mov	r0, r3
 800119c:	f007 fdba 	bl	8008d14 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f103 000c 	add.w	r0, r3, #12
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1bc>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	2100      	movs	r1, #0
 80011ac:	f007 fc90 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "2 SETTING MODE");
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f103 000c 	add.w	r0, r3, #12
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c0>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	2101      	movs	r1, #1
 80011bc:	f007 fc88 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "3 ABOUT");
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f103 000c 	add.w	r0, r3, #12
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c4>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	2102      	movs	r1, #2
 80011cc:	f007 fc80 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f103 000c 	add.w	r0, r3, #12
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	2103      	movs	r1, #3
 80011dc:	f007 fc78 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f103 000c 	add.w	r0, r3, #12
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x190>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b2d9      	uxtb	r1, r3
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1cc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f007 fc6e 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80011f4:	2100      	movs	r1, #0
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f007 fb5c 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000200 	.word	0x20000200
 8001208:	0800bdb4 	.word	0x0800bdb4
 800120c:	0800bd88 	.word	0x0800bd88
 8001210:	0800bdc8 	.word	0x0800bdc8
 8001214:	08000fa1 	.word	0x08000fa1
 8001218:	0800bdec 	.word	0x0800bdec
 800121c:	080012e5 	.word	0x080012e5
 8001220:	0800be0c 	.word	0x0800be0c
 8001224:	0800168d 	.word	0x0800168d
 8001228:	0800be2c 	.word	0x0800be2c
 800122c:	08001245 	.word	0x08001245
 8001230:	0800be48 	.word	0x0800be48
 8001234:	0800be58 	.word	0x0800be58
 8001238:	0800be68 	.word	0x0800be68
 800123c:	0800be70 	.word	0x0800be70
 8001240:	0800be88 	.word	0x0800be88

08001244 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv>:

            void impl_3_AboutScreen()
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
            {
                mLcd.clearDisplay();
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	330c      	adds	r3, #12
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fd5f 	bl	8008d14 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "MPPT SOLAR CHARGER");
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f103 000c 	add.w	r0, r3, #12
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x8c>)
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	f007 fc35 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, "FIRMWARE VER: 1.0.0");
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f103 000c 	add.w	r0, r3, #12
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	2101      	movs	r1, #1
 8001272:	f007 fc2d 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, "CONTACT:09123123123");
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f103 000c 	add.w	r0, r3, #12
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	2102      	movs	r1, #2
 8001282:	f007 fc25 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, "4BACK");
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f103 000c 	add.w	r0, r3, #12
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x98>)
 800128e:	220f      	movs	r2, #15
 8001290:	2103      	movs	r1, #3
 8001292:	f007 fc1d 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>

                auto &button = Button::getInstance();
 8001296:	f001 fe1d 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800129a:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f007 fb17 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b04      	cmp	r3, #4
 80012a6:	bf0c      	ite	eq
 80012a8:	2301      	moveq	r3, #1
 80012aa:	2300      	movne	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d005      	beq.n	80012be <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x7a>
                {
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x9c>)
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80012be:	2100      	movs	r1, #0
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f007 faf7 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0800be8c 	.word	0x0800be8c
 80012d4:	0800bea0 	.word	0x0800bea0
 80012d8:	0800beb4 	.word	0x0800beb4
 80012dc:	0800bec8 	.word	0x0800bec8
 80012e0:	08001075 	.word	0x08001075

080012e4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv>:

            void impl_3_DisplayScroll()
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0a0      	sub	sp, #128	; 0x80
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
            {
                const int COL = 21;
 80012ec:	2315      	movs	r3, #21
 80012ee:	67fb      	str	r3, [r7, #124]	; 0x7c
                const int ROW = 5;
 80012f0:	2305      	movs	r3, #5
 80012f2:	67bb      	str	r3, [r7, #120]	; 0x78

                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
 80012f4:	4a8d      	ldr	r2, [pc, #564]	; (800152c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x248>)
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	4611      	mov	r1, r2
 80012fc:	2269      	movs	r2, #105	; 0x69
 80012fe:	4618      	mov	r0, r3
 8001300:	f008 fd65 	bl	8009dce <memcpy>
                        "3 DISPLAY VIEW 3", "4 DISPLAY VIEW 4" };

                static int arrowLine = 0;
                static int mIndexLine = 1;

                auto &button = Button::getInstance();
 8001304:	f001 fde6 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001308:	6778      	str	r0, [r7, #116]	; 0x74
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 800130a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800130c:	f007 fae0 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001310:	4603      	mov	r3, r0
 8001312:	2b01      	cmp	r3, #1
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d026      	beq.n	800136e <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x8a>
                {
                    if (mIndexLine == 1)
 8001320:	4b83      	ldr	r3, [pc, #524]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d106      	bne.n	8001336 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x52>
                    {
                        mIndexLine = ROW - 1;
 8001328:	4b81      	ldr	r3, [pc, #516]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 800132a:	2204      	movs	r2, #4
 800132c:	601a      	str	r2, [r3, #0]
                        arrowLine = 2;
 800132e:	4b81      	ldr	r3, [pc, #516]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8001330:	2202      	movs	r2, #2
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	e004      	b.n	8001340 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x5c>
                    }
                    else
                    {
                        mIndexLine--;
 8001336:	4b7e      	ldr	r3, [pc, #504]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	4a7c      	ldr	r2, [pc, #496]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 800133e:	6013      	str	r3, [r2, #0]
                    }

                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001340:	4b7b      	ldr	r3, [pc, #492]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d004      	beq.n	8001352 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x6e>
 8001348:	4b79      	ldr	r3, [pc, #484]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b03      	cmp	r3, #3
 800134e:	f040 80ad 	bne.w	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                    {
                        if (arrowLine == 0)
 8001352:	4b78      	ldr	r3, [pc, #480]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d103      	bne.n	8001362 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x7e>
                        {
                            arrowLine = 2;
 800135a:	4b76      	ldr	r3, [pc, #472]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	e0a4      	b.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                        }
                        else
                        {
                            arrowLine--;
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3b01      	subs	r3, #1
 8001368:	4a72      	ldr	r2, [pc, #456]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	e09e      	b.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                        }
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 800136e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001370:	f007 faae 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001374:	4603      	mov	r3, r0
 8001376:	2b02      	cmp	r3, #2
 8001378:	bf0c      	ite	eq
 800137a:	2301      	moveq	r3, #1
 800137c:	2300      	movne	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d025      	beq.n	80013d0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xec>
                {
                    // Dong bo > voi index
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001384:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d003      	beq.n	8001394 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xb0>
 800138c:	4b68      	ldr	r3, [pc, #416]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d10c      	bne.n	80013ae <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xca>
                    {
                        if (arrowLine == 2)
 8001394:	4b67      	ldr	r3, [pc, #412]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d103      	bne.n	80013a4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xc0>
                        {
                            arrowLine = 0;
 800139c:	4b65      	ldr	r3, [pc, #404]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	e004      	b.n	80013ae <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xca>
                        }
                        else
                        {
                            arrowLine++;
 80013a4:	4b63      	ldr	r3, [pc, #396]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a62      	ldr	r2, [pc, #392]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80013ac:	6013      	str	r3, [r2, #0]
                        }
                    }

                    if (mIndexLine == ROW - 1)
 80013ae:	4b60      	ldr	r3, [pc, #384]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d106      	bne.n	80013c4 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xe0>
                    {
                        mIndexLine = 1;
 80013b6:	4b5e      	ldr	r3, [pc, #376]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
                        arrowLine = 0;
 80013bc:	4b5d      	ldr	r3, [pc, #372]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e073      	b.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                    }
                    else
                    {
                        mIndexLine++;
 80013c4:	4b5a      	ldr	r3, [pc, #360]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a59      	ldr	r2, [pc, #356]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e06d      	b.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (menuscreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80013d0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80013d2:	f007 fa7d 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b04      	cmp	r3, #4
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d012      	beq.n	800140c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x128>
                {
                    LOGI("Go back to Menu screen");
 80013e6:	4b54      	ldr	r3, [pc, #336]	; (8001538 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 80013e8:	22ea      	movs	r2, #234	; 0xea
 80013ea:	4954      	ldr	r1, [pc, #336]	; (800153c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 80013ec:	4854      	ldr	r0, [pc, #336]	; (8001540 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x25c>)
 80013ee:	f7ff fd0f 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a53      	ldr	r2, [pc, #332]	; (8001544 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x260>)
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 80013fe:	4b4d      	ldr	r3, [pc, #308]	; (8001534 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x250>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
                    mIndexLine = 1;
 8001404:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 8001406:	2201      	movs	r2, #1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e04f      	b.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                }
                // Nhan nut SEL
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 800140c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800140e:	f007 fa5f 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001412:	4603      	mov	r3, r0
 8001414:	2b03      	cmp	r3, #3
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d044      	beq.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                {
                    // Chon DISPLAY MODE
                    if (mIndexLine == 1)
 8001422:	4b43      	ldr	r3, [pc, #268]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d10c      	bne.n	8001444 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x160>
                    {
                        LOGI("Go to Display Config 1");
 800142a:	4b43      	ldr	r3, [pc, #268]	; (8001538 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 800142c:	22f5      	movs	r2, #245	; 0xf5
 800142e:	4943      	ldr	r1, [pc, #268]	; (800153c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 8001430:	4845      	ldr	r0, [pc, #276]	; (8001548 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x264>)
 8001432:	f7ff fced 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig1;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a44      	ldr	r2, [pc, #272]	; (800154c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
 8001442:	e033      	b.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                    }
                    // Chon SETTING MODE
                    else if (mIndexLine == 2)
 8001444:	4b3a      	ldr	r3, [pc, #232]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d10c      	bne.n	8001466 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x182>
                    {
                        LOGI("Go to Display Config 2");
 800144c:	4b3a      	ldr	r3, [pc, #232]	; (8001538 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 800144e:	22fb      	movs	r2, #251	; 0xfb
 8001450:	493a      	ldr	r1, [pc, #232]	; (800153c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 8001452:	483f      	ldr	r0, [pc, #252]	; (8001550 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 8001454:	f7ff fcdc 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig2;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a3e      	ldr	r2, [pc, #248]	; (8001554 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x270>)
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	e022      	b.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                    }
                    // Chon ABOUT
                    else if (mIndexLine == 3)
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b03      	cmp	r3, #3
 800146c:	d10d      	bne.n	800148a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1a6>
                    {
                        LOGI("Go to Display Config 3");
 800146e:	4b32      	ldr	r3, [pc, #200]	; (8001538 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8001470:	f240 1201 	movw	r2, #257	; 0x101
 8001474:	4931      	ldr	r1, [pc, #196]	; (800153c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 8001476:	4838      	ldr	r0, [pc, #224]	; (8001558 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x274>)
 8001478:	f7ff fcca 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig3;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a37      	ldr	r2, [pc, #220]	; (800155c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x278>)
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	e010      	b.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                    }
                    else if (mIndexLine == 4)
 800148a:	4b29      	ldr	r3, [pc, #164]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d10c      	bne.n	80014ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1c8>
                    {
                        LOGI("Go to Display Config 4");
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x254>)
 8001494:	f44f 7283 	mov.w	r2, #262	; 0x106
 8001498:	4928      	ldr	r1, [pc, #160]	; (800153c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x258>)
 800149a:	4831      	ldr	r0, [pc, #196]	; (8001560 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x27c>)
 800149c:	f7ff fcb8 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig4;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a30      	ldr	r2, [pc, #192]	; (8001564 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x280>)
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
                else
                {

                }

                mLcd.clearDisplay();
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	330c      	adds	r3, #12
 80014b0:	4618      	mov	r0, r3
 80014b2:	f007 fc2f 	bl	8008d14 <_ZN4blib3Lcd12clearDisplayEv>

                if (mIndexLine == 1)
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d154      	bne.n	8001568 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x284>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f103 000c 	add.w	r0, r3, #12
 80014c4:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	f107 0108 	add.w	r1, r7, #8
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00da      	lsls	r2, r3, #3
 80014d4:	1ad2      	subs	r2, r2, r3
 80014d6:	188b      	adds	r3, r1, r2
 80014d8:	2201      	movs	r2, #1
 80014da:	2100      	movs	r1, #0
 80014dc:	f007 faf8 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f103 000c 	add.w	r0, r3, #12
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	f107 0108 	add.w	r1, r7, #8
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	00da      	lsls	r2, r3, #3
 80014f8:	1ad2      	subs	r2, r2, r3
 80014fa:	188b      	adds	r3, r1, r2
 80014fc:	2201      	movs	r2, #1
 80014fe:	2101      	movs	r1, #1
 8001500:	f007 fae6 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f103 000c 	add.w	r0, r3, #12
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x24c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	1c9a      	adds	r2, r3, #2
 8001510:	f107 0108 	add.w	r1, r7, #8
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	00da      	lsls	r2, r3, #3
 800151c:	1ad2      	subs	r2, r2, r3
 800151e:	188b      	adds	r3, r1, r2
 8001520:	2201      	movs	r2, #1
 8001522:	2102      	movs	r1, #2
 8001524:	f007 fad4 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 8001528:	e08d      	b.n	8001646 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x362>
 800152a:	bf00      	nop
 800152c:	0800bf9c 	.word	0x0800bf9c
 8001530:	20000000 	.word	0x20000000
 8001534:	20000204 	.word	0x20000204
 8001538:	0800bed0 	.word	0x0800bed0
 800153c:	0800bd88 	.word	0x0800bd88
 8001540:	0800bee8 	.word	0x0800bee8
 8001544:	08001075 	.word	0x08001075
 8001548:	0800bf0c 	.word	0x0800bf0c
 800154c:	08001ea9 	.word	0x08001ea9
 8001550:	0800bf30 	.word	0x0800bf30
 8001554:	08001f09 	.word	0x08001f09
 8001558:	0800bf54 	.word	0x0800bf54
 800155c:	08001f69 	.word	0x08001f69
 8001560:	0800bf78 	.word	0x0800bf78
 8001564:	08001fc9 	.word	0x08001fc9
                }
                else if (mIndexLine == ROW - 1)
 8001568:	4b44      	ldr	r3, [pc, #272]	; (800167c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x398>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d135      	bne.n	80015dc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2f8>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f103 000c 	add.w	r0, r3, #12
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x398>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	1e9a      	subs	r2, r3, #2
 800157c:	f107 0108 	add.w	r1, r7, #8
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	00da      	lsls	r2, r3, #3
 8001588:	1ad2      	subs	r2, r2, r3
 800158a:	188b      	adds	r3, r1, r2
 800158c:	2201      	movs	r2, #1
 800158e:	2100      	movs	r1, #0
 8001590:	f007 fa9e 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f103 000c 	add.w	r0, r3, #12
 800159a:	4b38      	ldr	r3, [pc, #224]	; (800167c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x398>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	1e5a      	subs	r2, r3, #1
 80015a0:	f107 0108 	add.w	r1, r7, #8
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	00da      	lsls	r2, r3, #3
 80015ac:	1ad2      	subs	r2, r2, r3
 80015ae:	188b      	adds	r3, r1, r2
 80015b0:	2201      	movs	r2, #1
 80015b2:	2101      	movs	r1, #1
 80015b4:	f007 fa8c 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f103 000c 	add.w	r0, r3, #12
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x398>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	f107 0108 	add.w	r1, r7, #8
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	00da      	lsls	r2, r3, #3
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	188b      	adds	r3, r1, r2
 80015d2:	2201      	movs	r2, #1
 80015d4:	2102      	movs	r1, #2
 80015d6:	f007 fa7b 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 80015da:	e034      	b.n	8001646 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x362>
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f103 000c 	add.w	r0, r3, #12
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x398>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	1e5a      	subs	r2, r3, #1
 80015e8:	f107 0108 	add.w	r1, r7, #8
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	00da      	lsls	r2, r3, #3
 80015f4:	1ad2      	subs	r2, r2, r3
 80015f6:	188b      	adds	r3, r1, r2
 80015f8:	2201      	movs	r2, #1
 80015fa:	2100      	movs	r1, #0
 80015fc:	f007 fa68 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f103 000c 	add.w	r0, r3, #12
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x398>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f107 0108 	add.w	r1, r7, #8
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	00da      	lsls	r2, r3, #3
 8001616:	1ad2      	subs	r2, r2, r3
 8001618:	188b      	adds	r3, r1, r2
 800161a:	2201      	movs	r2, #1
 800161c:	2101      	movs	r1, #1
 800161e:	f007 fa57 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f103 000c 	add.w	r0, r3, #12
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x398>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	f107 0108 	add.w	r1, r7, #8
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	00da      	lsls	r2, r3, #3
 800163a:	1ad2      	subs	r2, r2, r3
 800163c:	188b      	adds	r3, r1, r2
 800163e:	2201      	movs	r2, #1
 8001640:	2102      	movs	r1, #2
 8001642:	f007 fa45 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f103 000c 	add.w	r0, r3, #12
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x39c>)
 800164e:	2200      	movs	r2, #0
 8001650:	2103      	movs	r1, #3
 8001652:	f007 fa3d 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f103 000c 	add.w	r0, r3, #12
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3a0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	b2d9      	uxtb	r1, r3
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3a4>)
 8001664:	2200      	movs	r2, #0
 8001666:	f007 fa33 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800166a:	2100      	movs	r1, #0
 800166c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800166e:	f007 f921 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001672:	bf00      	nop
 8001674:	3780      	adds	r7, #128	; 0x80
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000000 	.word	0x20000000
 8001680:	0800be70 	.word	0x0800be70
 8001684:	20000204 	.word	0x20000204
 8001688:	0800be88 	.word	0x0800be88

0800168c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv>:

            void impl_3_SettingScroll()
 800168c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168e:	b0cb      	sub	sp, #300	; 0x12c
 8001690:	af00      	add	r7, sp, #0
 8001692:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001696:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800169a:	6018      	str	r0, [r3, #0]
            {
                const int COL = 21;
 800169c:	2315      	movs	r3, #21
 800169e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
                const int ROW = 13;
 80016a2:	230d      	movs	r3, #13
 80016a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
 80016a8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016b0:	4618      	mov	r0, r3
 80016b2:	f240 1311 	movw	r3, #273	; 0x111
 80016b6:	461a      	mov	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f008 fab4 	bl	8009c26 <memset>
 80016be:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016c2:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 80016c6:	4bb5      	ldr	r3, [pc, #724]	; (800199c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x310>)
 80016c8:	f106 0515 	add.w	r5, r6, #21
 80016cc:	461c      	mov	r4, r3
 80016ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016d0:	6028      	str	r0, [r5, #0]
 80016d2:	6069      	str	r1, [r5, #4]
 80016d4:	60aa      	str	r2, [r5, #8]
 80016d6:	60eb      	str	r3, [r5, #12]
 80016d8:	8823      	ldrh	r3, [r4, #0]
 80016da:	78a2      	ldrb	r2, [r4, #2]
 80016dc:	822b      	strh	r3, [r5, #16]
 80016de:	4613      	mov	r3, r2
 80016e0:	74ab      	strb	r3, [r5, #18]
 80016e2:	f106 0328 	add.w	r3, r6, #40	; 0x28
 80016e6:	2200      	movs	r2, #0
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80016ee:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80016f2:	4aab      	ldr	r2, [pc, #684]	; (80019a0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x314>)
 80016f4:	f101 032a 	add.w	r3, r1, #42	; 0x2a
 80016f8:	6810      	ldr	r0, [r2, #0]
 80016fa:	6018      	str	r0, [r3, #0]
 80016fc:	8890      	ldrh	r0, [r2, #4]
 80016fe:	7992      	ldrb	r2, [r2, #6]
 8001700:	8098      	strh	r0, [r3, #4]
 8001702:	719a      	strb	r2, [r3, #6]
 8001704:	f101 0331 	add.w	r3, r1, #49	; 0x31
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	819a      	strh	r2, [r3, #12]
 8001712:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001716:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 800171a:	4ba2      	ldr	r3, [pc, #648]	; (80019a4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x318>)
 800171c:	f106 053f 	add.w	r5, r6, #63	; 0x3f
 8001720:	461c      	mov	r4, r3
 8001722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001724:	6028      	str	r0, [r5, #0]
 8001726:	6069      	str	r1, [r5, #4]
 8001728:	60aa      	str	r2, [r5, #8]
 800172a:	60eb      	str	r3, [r5, #12]
 800172c:	8823      	ldrh	r3, [r4, #0]
 800172e:	78a2      	ldrb	r2, [r4, #2]
 8001730:	822b      	strh	r3, [r5, #16]
 8001732:	4613      	mov	r3, r2
 8001734:	74ab      	strb	r3, [r5, #18]
 8001736:	f106 0352 	add.w	r3, r6, #82	; 0x52
 800173a:	2200      	movs	r2, #0
 800173c:	801a      	strh	r2, [r3, #0]
 800173e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001742:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 8001746:	4b98      	ldr	r3, [pc, #608]	; (80019a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x31c>)
 8001748:	f106 0454 	add.w	r4, r6, #84	; 0x54
 800174c:	461d      	mov	r5, r3
 800174e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	8022      	strh	r2, [r4, #0]
 8001758:	3402      	adds	r4, #2
 800175a:	0c1b      	lsrs	r3, r3, #16
 800175c:	7023      	strb	r3, [r4, #0]
 800175e:	f106 0367 	add.w	r3, r6, #103	; 0x67
 8001762:	2200      	movs	r2, #0
 8001764:	801a      	strh	r2, [r3, #0]
 8001766:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800176a:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 800176e:	4b8f      	ldr	r3, [pc, #572]	; (80019ac <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x320>)
 8001770:	f106 0569 	add.w	r5, r6, #105	; 0x69
 8001774:	461c      	mov	r4, r3
 8001776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001778:	6028      	str	r0, [r5, #0]
 800177a:	6069      	str	r1, [r5, #4]
 800177c:	60aa      	str	r2, [r5, #8]
 800177e:	60eb      	str	r3, [r5, #12]
 8001780:	8823      	ldrh	r3, [r4, #0]
 8001782:	78a2      	ldrb	r2, [r4, #2]
 8001784:	822b      	strh	r3, [r5, #16]
 8001786:	4613      	mov	r3, r2
 8001788:	74ab      	strb	r3, [r5, #18]
 800178a:	f106 037c 	add.w	r3, r6, #124	; 0x7c
 800178e:	2200      	movs	r2, #0
 8001790:	801a      	strh	r2, [r3, #0]
 8001792:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001796:	f5a3 7590 	sub.w	r5, r3, #288	; 0x120
 800179a:	4b85      	ldr	r3, [pc, #532]	; (80019b0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x324>)
 800179c:	f105 047e 	add.w	r4, r5, #126	; 0x7e
 80017a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80017a2:	6020      	str	r0, [r4, #0]
 80017a4:	6061      	str	r1, [r4, #4]
 80017a6:	60a2      	str	r2, [r4, #8]
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	81a3      	strh	r3, [r4, #12]
 80017ac:	f105 038c 	add.w	r3, r5, #140	; 0x8c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f8c3 2003 	str.w	r2, [r3, #3]
 80017b8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017bc:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x328>)
 80017c2:	f106 0593 	add.w	r5, r6, #147	; 0x93
 80017c6:	461c      	mov	r4, r3
 80017c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ca:	6028      	str	r0, [r5, #0]
 80017cc:	6069      	str	r1, [r5, #4]
 80017ce:	60aa      	str	r2, [r5, #8]
 80017d0:	60eb      	str	r3, [r5, #12]
 80017d2:	8823      	ldrh	r3, [r4, #0]
 80017d4:	78a2      	ldrb	r2, [r4, #2]
 80017d6:	822b      	strh	r3, [r5, #16]
 80017d8:	4613      	mov	r3, r2
 80017da:	74ab      	strb	r3, [r5, #18]
 80017dc:	f106 03a6 	add.w	r3, r6, #166	; 0xa6
 80017e0:	2200      	movs	r2, #0
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80017e8:	f5a3 7490 	sub.w	r4, r3, #288	; 0x120
 80017ec:	4b72      	ldr	r3, [pc, #456]	; (80019b8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x32c>)
 80017ee:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
 80017f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017f4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017f8:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	711a      	strb	r2, [r3, #4]
 8001802:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001806:	f5a3 7490 	sub.w	r4, r3, #288	; 0x120
 800180a:	4b6c      	ldr	r3, [pc, #432]	; (80019bc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x330>)
 800180c:	f104 02bd 	add.w	r2, r4, #189	; 0xbd
 8001810:	cb03      	ldmia	r3!, {r0, r1}
 8001812:	6010      	str	r0, [r2, #0]
 8001814:	6051      	str	r1, [r2, #4]
 8001816:	8819      	ldrh	r1, [r3, #0]
 8001818:	789b      	ldrb	r3, [r3, #2]
 800181a:	8111      	strh	r1, [r2, #8]
 800181c:	7293      	strb	r3, [r2, #10]
 800181e:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
 8001828:	811a      	strh	r2, [r3, #8]
 800182a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800182e:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x334>)
 8001834:	f106 05d2 	add.w	r5, r6, #210	; 0xd2
 8001838:	461c      	mov	r4, r3
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	6028      	str	r0, [r5, #0]
 800183e:	6069      	str	r1, [r5, #4]
 8001840:	60aa      	str	r2, [r5, #8]
 8001842:	60eb      	str	r3, [r5, #12]
 8001844:	8823      	ldrh	r3, [r4, #0]
 8001846:	822b      	strh	r3, [r5, #16]
 8001848:	f106 03e4 	add.w	r3, r6, #228	; 0xe4
 800184c:	2100      	movs	r1, #0
 800184e:	460a      	mov	r2, r1
 8001850:	801a      	strh	r2, [r3, #0]
 8001852:	460a      	mov	r2, r1
 8001854:	709a      	strb	r2, [r3, #2]
 8001856:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800185a:	f5a3 7690 	sub.w	r6, r3, #288	; 0x120
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x338>)
 8001860:	f106 04e7 	add.w	r4, r6, #231	; 0xe7
 8001864:	461d      	mov	r5, r3
 8001866:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001868:	6020      	str	r0, [r4, #0]
 800186a:	6061      	str	r1, [r4, #4]
 800186c:	60a2      	str	r2, [r4, #8]
 800186e:	60e3      	str	r3, [r4, #12]
 8001870:	f106 03f7 	add.w	r3, r6, #247	; 0xf7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	711a      	strb	r2, [r3, #4]
                        "7 FAN TRIGGER TEMP", "8 SHUTDOWN TEMP", "9 AUTOLOAD", "10BACKLIGHT SLEEP",
                        "11FACTORY RESET" };
                static int arrowLine = 0;
                static int mIndexLine = 1;

                auto &button = Button::getInstance();
 800187a:	f001 fb2b 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 800187e:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001882:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001886:	f007 f823 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d026      	beq.n	80018e8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x25c>
                {
                    if (mIndexLine == 1)
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d106      	bne.n	80018b0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x224>
                    {
                        mIndexLine = ROW - 1;
 80018a2:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 80018a4:	220c      	movs	r2, #12
 80018a6:	601a      	str	r2, [r3, #0]
                        arrowLine = 2;
 80018a8:	4b48      	ldr	r3, [pc, #288]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	e004      	b.n	80018ba <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x22e>
                    }
                    else
                    {
                        mIndexLine--;
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 80018b8:	6013      	str	r3, [r2, #0]
                    }

                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 80018ba:	4b43      	ldr	r3, [pc, #268]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d004      	beq.n	80018cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x240>
 80018c2:	4b41      	ldr	r3, [pc, #260]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b0b      	cmp	r3, #11
 80018c8:	f040 81e3 	bne.w	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    {
                        if (arrowLine == 0)
 80018cc:	4b3f      	ldr	r3, [pc, #252]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d103      	bne.n	80018dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x250>
                        {
                            arrowLine = 2;
 80018d4:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	e1da      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                        }
                        else
                        {
                            arrowLine--;
 80018dc:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	4a3a      	ldr	r2, [pc, #232]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e1d4      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                        }
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 80018e8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80018ec:	f006 fff0 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	bf0c      	ite	eq
 80018f6:	2301      	moveq	r3, #1
 80018f8:	2300      	movne	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d025      	beq.n	800194c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>
                {
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8001900:	4b31      	ldr	r3, [pc, #196]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d003      	beq.n	8001910 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x284>
 8001908:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b0b      	cmp	r3, #11
 800190e:	d10c      	bne.n	800192a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x29e>
                    {
                        if (arrowLine == 2)
 8001910:	4b2e      	ldr	r3, [pc, #184]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d103      	bne.n	8001920 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x294>
                        {
                            arrowLine = 0;
 8001918:	4b2c      	ldr	r3, [pc, #176]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	e004      	b.n	800192a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x29e>
                        }
                        else
                        {
                            arrowLine++;
 8001920:	4b2a      	ldr	r3, [pc, #168]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3301      	adds	r3, #1
 8001926:	4a29      	ldr	r2, [pc, #164]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 8001928:	6013      	str	r3, [r2, #0]
                        }
                    }

                    if (mIndexLine == ROW - 1)
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b0c      	cmp	r3, #12
 8001930:	d106      	bne.n	8001940 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2b4>
                    {
                        mIndexLine = 1;
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]
                        arrowLine = 0;
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e1a8      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    else
                    {
                        mIndexLine++;
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e1a2      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (menuscreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800194c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001950:	f006 ffbe 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001954:	4603      	mov	r3, r0
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf0c      	ite	eq
 800195a:	2301      	moveq	r3, #1
 800195c:	2300      	movne	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03d      	beq.n	80019e0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x354>
                {
                    LOGI("Go back to Menu screen");
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x344>)
 8001966:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800196a:	491a      	ldr	r1, [pc, #104]	; (80019d4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x348>)
 800196c:	481a      	ldr	r0, [pc, #104]	; (80019d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x34c>)
 800196e:	f7ff fa4f 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 8001972:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001976:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a17      	ldr	r2, [pc, #92]	; (80019dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x350>)
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001984:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 800198e:	4b0f      	ldr	r3, [pc, #60]	; (80019cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x340>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
                    mIndexLine = 1;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e17a      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
 800199c:	0800c1a8 	.word	0x0800c1a8
 80019a0:	0800c1c0 	.word	0x0800c1c0
 80019a4:	0800c1d8 	.word	0x0800c1d8
 80019a8:	0800c1f0 	.word	0x0800c1f0
 80019ac:	0800c208 	.word	0x0800c208
 80019b0:	0800c220 	.word	0x0800c220
 80019b4:	0800c238 	.word	0x0800c238
 80019b8:	0800c250 	.word	0x0800c250
 80019bc:	0800c268 	.word	0x0800c268
 80019c0:	0800c280 	.word	0x0800c280
 80019c4:	0800c298 	.word	0x0800c298
 80019c8:	20000004 	.word	0x20000004
 80019cc:	20000208 	.word	0x20000208
 80019d0:	0800c008 	.word	0x0800c008
 80019d4:	0800bd88 	.word	0x0800bd88
 80019d8:	0800bee8 	.word	0x0800bee8
 80019dc:	08001075 	.word	0x08001075
                }
                // Nhan nut SEL
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80019e0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80019e4:	f006 ff74 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 814c 	beq.w	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                {
                    // Chon DISPLAY MODE
                    if (mIndexLine == 1)
 80019fa:	4b82      	ldr	r3, [pc, #520]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d115      	bne.n	8001a2e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x3a2>
                    {
                        LOGI("Go to Supply Algorithm");
 8001a02:	4b81      	ldr	r3, [pc, #516]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001a04:	f240 127b 	movw	r2, #379	; 0x17b
 8001a08:	4980      	ldr	r1, [pc, #512]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001a0a:	4881      	ldr	r0, [pc, #516]	; (8001c10 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x584>)
 8001a0c:	f7ff fa00 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_SupplyAlgorithm;
 8001a10:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7e      	ldr	r2, [pc, #504]	; (8001c14 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x588>)
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a22:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	e131      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    // Chon SETTING MODE
                    else if (mIndexLine == 2)
 8001a2e:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d115      	bne.n	8001a62 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x3d6>
                    {
                        LOGI("Go to Charge mode");
 8001a36:	4b74      	ldr	r3, [pc, #464]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001a38:	f240 1281 	movw	r2, #385	; 0x181
 8001a3c:	4973      	ldr	r1, [pc, #460]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001a3e:	4876      	ldr	r0, [pc, #472]	; (8001c18 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x58c>)
 8001a40:	f7ff f9e6 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargeMode;
 8001a44:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a48:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a73      	ldr	r2, [pc, #460]	; (8001c1c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x590>)
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a56:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	e117      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    // Chon ABOUT
                    else if (mIndexLine == 3)
 8001a62:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d115      	bne.n	8001a96 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    {
                        LOGI("Go to Max battery voltage");
 8001a6a:	4b67      	ldr	r3, [pc, #412]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001a6c:	f240 1287 	movw	r2, #391	; 0x187
 8001a70:	4966      	ldr	r1, [pc, #408]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001a72:	486b      	ldr	r0, [pc, #428]	; (8001c20 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x594>)
 8001a74:	f7ff f9cc 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MaxBatteryVolt;
 8001a78:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a7c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a68      	ldr	r2, [pc, #416]	; (8001c24 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x598>)
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001a8a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	e0fd      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    else if (mIndexLine == 4)
 8001a96:	4b5b      	ldr	r3, [pc, #364]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d115      	bne.n	8001aca <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x43e>
                    {
                        LOGI("Go to Min battery voltage");
 8001a9e:	4b5a      	ldr	r3, [pc, #360]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001aa0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001aa4:	4959      	ldr	r1, [pc, #356]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001aa6:	4860      	ldr	r0, [pc, #384]	; (8001c28 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x59c>)
 8001aa8:	f7ff f9b2 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MinBatteryVolt;
 8001aac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ab0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5d      	ldr	r2, [pc, #372]	; (8001c2c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a0>)
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001abe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	e0e3      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    else if (mIndexLine == 5)
 8001aca:	4b4e      	ldr	r3, [pc, #312]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d115      	bne.n	8001afe <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x472>
                    {
                        LOGI("Go to Charging current");
 8001ad2:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001ad4:	f240 1291 	movw	r2, #401	; 0x191
 8001ad8:	494c      	ldr	r1, [pc, #304]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001ada:	4855      	ldr	r0, [pc, #340]	; (8001c30 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a4>)
 8001adc:	f7ff f998 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargingCurrent;
 8001ae0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ae4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a52      	ldr	r2, [pc, #328]	; (8001c34 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5a8>)
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001af2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	e0c9      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    else if (mIndexLine == 6)
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d115      	bne.n	8001b32 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x4a6>
                    {
                        LOGI("Go to Cooling fan");
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001b08:	f44f 72cb 	mov.w	r2, #406	; 0x196
 8001b0c:	493f      	ldr	r1, [pc, #252]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001b0e:	484a      	ldr	r0, [pc, #296]	; (8001c38 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5ac>)
 8001b10:	f7ff f97e 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_CoolingFan;
 8001b14:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a47      	ldr	r2, [pc, #284]	; (8001c3c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5b0>)
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b26:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	e0af      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    else if (mIndexLine == 7)
 8001b32:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b07      	cmp	r3, #7
 8001b38:	d115      	bne.n	8001b66 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x4da>
                    {
                        LOGI("Go to Fan trigger temp");
 8001b3a:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001b3c:	f240 129b 	movw	r2, #411	; 0x19b
 8001b40:	4932      	ldr	r1, [pc, #200]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001b42:	483f      	ldr	r0, [pc, #252]	; (8001c40 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5b4>)
 8001b44:	f7ff f964 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FanTriggerTemp;
 8001b48:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b4c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a3c      	ldr	r2, [pc, #240]	; (8001c44 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5b8>)
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e095      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    else if (mIndexLine == 8)
 8001b66:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d115      	bne.n	8001b9a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x50e>
                    {
                        LOGI("Go to Shutdown temp");
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001b70:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8001b74:	4925      	ldr	r1, [pc, #148]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001b76:	4834      	ldr	r0, [pc, #208]	; (8001c48 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5bc>)
 8001b78:	f7ff f94a 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ShutdownTemp;
 8001b7c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a31      	ldr	r2, [pc, #196]	; (8001c4c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5c0>)
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001b8e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e07b      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    else if (mIndexLine == 9)
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b09      	cmp	r3, #9
 8001ba0:	d115      	bne.n	8001bce <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x542>
                    {
                        LOGI("Go to Autoload config");
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001ba4:	f240 12a5 	movw	r2, #421	; 0x1a5
 8001ba8:	4918      	ldr	r1, [pc, #96]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001baa:	4829      	ldr	r0, [pc, #164]	; (8001c50 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5c4>)
 8001bac:	f7ff f930 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_AutoloadCfg;
 8001bb0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5c8>)
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bc2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	e061      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    }
                    else if (mIndexLine == 10)
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x578>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b0a      	cmp	r3, #10
 8001bd4:	d144      	bne.n	8001c60 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d4>
                    {
                        LOGI("Go to Backlight");
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x57c>)
 8001bd8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8001bdc:	490b      	ldr	r1, [pc, #44]	; (8001c0c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x580>)
 8001bde:	481e      	ldr	r0, [pc, #120]	; (8001c58 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5cc>)
 8001be0:	f7ff f916 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_Backlight;
 8001be4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001be8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5d0>)
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001bf6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	e047      	b.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
 8001c02:	bf00      	nop
 8001c04:	20000004 	.word	0x20000004
 8001c08:	0800c008 	.word	0x0800c008
 8001c0c:	0800bd88 	.word	0x0800bd88
 8001c10:	0800c020 	.word	0x0800c020
 8001c14:	08002029 	.word	0x08002029
 8001c18:	0800c044 	.word	0x0800c044
 8001c1c:	080021a9 	.word	0x080021a9
 8001c20:	0800c064 	.word	0x0800c064
 8001c24:	08002369 	.word	0x08002369
 8001c28:	0800c08c 	.word	0x0800c08c
 8001c2c:	080023c9 	.word	0x080023c9
 8001c30:	0800c0b4 	.word	0x0800c0b4
 8001c34:	08002429 	.word	0x08002429
 8001c38:	0800c0d8 	.word	0x0800c0d8
 8001c3c:	08002489 	.word	0x08002489
 8001c40:	0800c0f8 	.word	0x0800c0f8
 8001c44:	080024e9 	.word	0x080024e9
 8001c48:	0800c11c 	.word	0x0800c11c
 8001c4c:	08002549 	.word	0x08002549
 8001c50:	0800c140 	.word	0x0800c140
 8001c54:	080025a9 	.word	0x080025a9
 8001c58:	0800c164 	.word	0x0800c164
 8001c5c:	08002609 	.word	0x08002609
                    }
                    else if (mIndexLine == 11)
 8001c60:	4b89      	ldr	r3, [pc, #548]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b0b      	cmp	r3, #11
 8001c66:	d114      	bne.n	8001c92 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x606>
                    {
                        LOGI("Go to Factory reset");
 8001c68:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x800>)
 8001c6a:	f240 12af 	movw	r2, #431	; 0x1af
 8001c6e:	4988      	ldr	r1, [pc, #544]	; (8001e90 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x804>)
 8001c70:	4888      	ldr	r0, [pc, #544]	; (8001e94 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x808>)
 8001c72:	f7ff f8cd 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FactoryReset;
 8001c76:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c7a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a85      	ldr	r2, [pc, #532]	; (8001e98 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x80c>)
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
                else
                {

                }

                mLcd.clearDisplay();
 8001c92:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c96:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f007 f838 	bl	8008d14 <_ZN4blib3Lcd12clearDisplayEv>
                if (mIndexLine == 1)
 8001ca4:	4b78      	ldr	r3, [pc, #480]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d141      	bne.n	8001d30 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x6a4>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 8001cac:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cb0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f103 000c 	add.w	r0, r3, #12
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	f107 0108 	add.w	r1, r7, #8
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	00da      	lsls	r2, r3, #3
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	188b      	adds	r3, r1, r2
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	f006 fefd 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 8001cd6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cda:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f103 000c 	add.w	r0, r3, #12
 8001ce4:	4b68      	ldr	r3, [pc, #416]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	f107 0108 	add.w	r1, r7, #8
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00da      	lsls	r2, r3, #3
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	188b      	adds	r3, r1, r2
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	f006 fee7 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 8001d02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d06:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f103 000c 	add.w	r0, r3, #12
 8001d10:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1c9a      	adds	r2, r3, #2
 8001d16:	f107 0108 	add.w	r1, r7, #8
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	00da      	lsls	r2, r3, #3
 8001d22:	1ad2      	subs	r2, r2, r3
 8001d24:	188b      	adds	r3, r1, r2
 8001d26:	2201      	movs	r2, #1
 8001d28:	2102      	movs	r1, #2
 8001d2a:	f006 fed1 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 8001d2e:	e086      	b.n	8001e3e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7b2>
                }
                else if (mIndexLine == ROW - 1)
 8001d30:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d141      	bne.n	8001dbc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x730>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 8001d38:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f103 000c 	add.w	r0, r3, #12
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1e9a      	subs	r2, r3, #2
 8001d4c:	f107 0108 	add.w	r1, r7, #8
 8001d50:	4613      	mov	r3, r2
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	4413      	add	r3, r2
 8001d56:	00da      	lsls	r2, r3, #3
 8001d58:	1ad2      	subs	r2, r2, r3
 8001d5a:	188b      	adds	r3, r1, r2
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2100      	movs	r1, #0
 8001d60:	f006 feb6 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 8001d64:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d68:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f103 000c 	add.w	r0, r3, #12
 8001d72:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	1e5a      	subs	r2, r3, #1
 8001d78:	f107 0108 	add.w	r1, r7, #8
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	00da      	lsls	r2, r3, #3
 8001d84:	1ad2      	subs	r2, r2, r3
 8001d86:	188b      	adds	r3, r1, r2
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	f006 fea0 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 8001d90:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d94:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f103 000c 	add.w	r0, r3, #12
 8001d9e:	4b3a      	ldr	r3, [pc, #232]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	f107 0108 	add.w	r1, r7, #8
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	00da      	lsls	r2, r3, #3
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	188b      	adds	r3, r1, r2
 8001db2:	2201      	movs	r2, #1
 8001db4:	2102      	movs	r1, #2
 8001db6:	f006 fe8b 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 8001dba:	e040      	b.n	8001e3e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7b2>
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 8001dbc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dc0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f103 000c 	add.w	r0, r3, #12
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	1e5a      	subs	r2, r3, #1
 8001dd0:	f107 0108 	add.w	r1, r7, #8
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	00da      	lsls	r2, r3, #3
 8001ddc:	1ad2      	subs	r2, r2, r3
 8001dde:	188b      	adds	r3, r1, r2
 8001de0:	2201      	movs	r2, #1
 8001de2:	2100      	movs	r1, #0
 8001de4:	f006 fe74 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 8001de8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f103 000c 	add.w	r0, r3, #12
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f107 0108 	add.w	r1, r7, #8
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	00da      	lsls	r2, r3, #3
 8001e06:	1ad2      	subs	r2, r2, r3
 8001e08:	188b      	adds	r3, r1, r2
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	f006 fe5f 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8001e12:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e16:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f103 000c 	add.w	r0, r3, #12
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7fc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	f107 0108 	add.w	r1, r7, #8
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	00da      	lsls	r2, r3, #3
 8001e32:	1ad2      	subs	r2, r2, r3
 8001e34:	188b      	adds	r3, r1, r2
 8001e36:	2201      	movs	r2, #1
 8001e38:	2102      	movs	r1, #2
 8001e3a:	f006 fe49 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 8001e3e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e42:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f103 000c 	add.w	r0, r3, #12
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x810>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2103      	movs	r1, #3
 8001e52:	f006 fe3d 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 8001e56:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e5a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f103 000c 	add.w	r0, r3, #12
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x814>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b2d9      	uxtb	r1, r3
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x818>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f006 fe2f 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001e72:	2100      	movs	r1, #0
 8001e74:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8001e78:	f006 fd1c 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001e7c:	bf00      	nop
 8001e7e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	0800c008 	.word	0x0800c008
 8001e90:	0800bd88 	.word	0x0800bd88
 8001e94:	0800c184 	.word	0x0800c184
 8001e98:	08002669 	.word	0x08002669
 8001e9c:	0800be70 	.word	0x0800be70
 8001ea0:	20000208 	.word	0x20000208
 8001ea4:	0800be88 	.word	0x0800be88

08001ea8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev>:

            void impl_3_1_DisplayConfig1()
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
//                mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                auto &button = Button::getInstance();
 8001eb0:	f001 f810 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001eb4:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f006 fd0a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00c      	beq.n	8001ee6 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x50>)
 8001ece:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8001ed2:	490a      	ldr	r1, [pc, #40]	; (8001efc <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x54>)
 8001ed4:	480a      	ldr	r0, [pc, #40]	; (8001f00 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x58>)
 8001ed6:	f7fe ff9b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x5c>)
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f006 fce3 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	0800c2b0 	.word	0x0800c2b0
 8001efc:	0800bd88 	.word	0x0800bd88
 8001f00:	0800c2c8 	.word	0x0800c2c8
 8001f04:	080012e5 	.word	0x080012e5

08001f08 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev>:

            void impl_3_1_DisplayConfig2()
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
//                mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                auto &button = Button::getInstance();
 8001f10:	f000 ffe0 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001f14:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f006 fcda 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00c      	beq.n	8001f46 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x50>)
 8001f2e:	f240 2205 	movw	r2, #517	; 0x205
 8001f32:	490a      	ldr	r1, [pc, #40]	; (8001f5c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x54>)
 8001f34:	480a      	ldr	r0, [pc, #40]	; (8001f60 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x58>)
 8001f36:	f7fe ff6b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x5c>)
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001f46:	2100      	movs	r1, #0
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f006 fcb3 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	0800c2f0 	.word	0x0800c2f0
 8001f5c:	0800bd88 	.word	0x0800bd88
 8001f60:	0800c2c8 	.word	0x0800c2c8
 8001f64:	080012e5 	.word	0x080012e5

08001f68 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev>:

            void impl_3_1_DisplayConfig3()
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8001f70:	f000 ffb0 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001f74:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f006 fcaa 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00c      	beq.n	8001fa6 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x50>)
 8001f8e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8001f92:	490a      	ldr	r1, [pc, #40]	; (8001fbc <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x54>)
 8001f94:	480a      	ldr	r0, [pc, #40]	; (8001fc0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x58>)
 8001f96:	f7fe ff3b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a09      	ldr	r2, [pc, #36]	; (8001fc4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x5c>)
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f006 fc83 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	0800c308 	.word	0x0800c308
 8001fbc:	0800bd88 	.word	0x0800bd88
 8001fc0:	0800c2c8 	.word	0x0800c2c8
 8001fc4:	080012e5 	.word	0x080012e5

08001fc8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev>:

            void impl_3_1_DisplayConfig4()
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
//                mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 15, "4BACK");
                auto &button = Button::getInstance();
 8001fd0:	f000 ff80 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001fd4:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f006 fc7a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00c      	beq.n	8002006 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8001fec:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x50>)
 8001fee:	f240 2226 	movw	r2, #550	; 0x226
 8001ff2:	490a      	ldr	r1, [pc, #40]	; (800201c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x54>)
 8001ff4:	480a      	ldr	r0, [pc, #40]	; (8002020 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x58>)
 8001ff6:	f7fe ff0b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a09      	ldr	r2, [pc, #36]	; (8002024 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x5c>)
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002006:	2100      	movs	r1, #0
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f006 fc53 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	0800c320 	.word	0x0800c320
 800201c:	0800bd88 	.word	0x0800bd88
 8002020:	0800c2c8 	.word	0x0800c2c8
 8002024:	080012e5 	.word	0x080012e5

08002028 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv>:

            void impl_3_2_SupplyAlgorithm()
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002030:	f000 ff50 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002034:	60f8      	str	r0, [r7, #12]
                static int supplyAlgorithm = 0;    // MPPT+CC-CV va CC-CV Only

                mLcd.clearDisplay();
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	330c      	adds	r3, #12
 800203a:	4618      	mov	r0, r3
 800203c:	f006 fe6a 	bl	8008d14 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 000c 	add.w	r0, r3, #12
 8002046:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x14c>)
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	f006 fd40 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f006 fc3d 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002056:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002058:	2b01      	cmp	r3, #1
 800205a:	d005      	beq.n	8002068 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x40>
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f006 fc37 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002062:	4603      	mov	r3, r0
 8002064:	2b02      	cmp	r3, #2
 8002066:	d101      	bne.n	800206c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x44>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x46>
 800206c:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x5e>
                {
                    supplyAlgorithm = !supplyAlgorithm;
 8002072:	4b41      	ldr	r3, [pc, #260]	; (8002178 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	bf0c      	ite	eq
 800207a:	2301      	moveq	r3, #1
 800207c:	2300      	movne	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 8002084:	601a      	str	r2, [r3, #0]
                }

                if (supplyAlgorithm == 0)
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x78>
                {
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f103 000c 	add.w	r0, r3, #12
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x154>)
 8002096:	2200      	movs	r2, #0
 8002098:	2101      	movs	r1, #1
 800209a:	f006 fd19 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 800209e:	e014      	b.n	80020ca <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xa2>
                }
                else if (supplyAlgorithm == 1)
 80020a0:	4b35      	ldr	r3, [pc, #212]	; (8002178 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d108      	bne.n	80020ba <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x92>
                {
                    mLcd.displayLine(1, 0, "CC-CV Only");
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f103 000c 	add.w	r0, r3, #12
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x158>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	2101      	movs	r1, #1
 80020b4:	f006 fd0c 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 80020b8:	e007      	b.n	80020ca <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xa2>
                }
                else
                {
                    mLcd.displayLine(1, 0, "Error");
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f103 000c 	add.w	r0, r3, #12
 80020c0:	4b30      	ldr	r3, [pc, #192]	; (8002184 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x15c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	2101      	movs	r1, #1
 80020c6:	f006 fd03 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f006 fc00 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	bf0c      	ite	eq
 80020d6:	2301      	moveq	r3, #1
 80020d8:	2300      	movne	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d021      	beq.n	8002124 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>
                {
                    if (supplyAlgorithm == 0)
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d108      	bne.n	80020fa <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xd2>
                    {
                        mLcd.displayLine(2, 0, "> MPPT+CC-CV");
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f103 000c 	add.w	r0, r3, #12
 80020ee:	4b26      	ldr	r3, [pc, #152]	; (8002188 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x160>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	2102      	movs	r1, #2
 80020f4:	f006 fcec 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 80020f8:	e014      	b.n	8002124 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>
                    }
                    else if (supplyAlgorithm == 1)
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x150>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d108      	bne.n	8002114 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xec>
                    {
                        mLcd.displayLine(2, 0, "> CC-CV Only");
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f103 000c 	add.w	r0, r3, #12
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x164>)
 800210a:	2200      	movs	r2, #0
 800210c:	2102      	movs	r1, #2
 800210e:	f006 fcdf 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002112:	e007      	b.n	8002124 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xfc>
                    }
                    else
                    {
                        mLcd.displayLine(2, 0, "Error alogrithm");
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f103 000c 	add.w	r0, r3, #12
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x168>)
 800211c:	2200      	movs	r2, #0
 800211e:	2102      	movs	r1, #2
 8002120:	f006 fcd6 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 000c 	add.w	r0, r3, #12
 800212a:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x16c>)
 800212c:	2200      	movs	r2, #0
 800212e:	2103      	movs	r1, #3
 8002130:	f006 fcce 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f006 fbcb 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800213a:	4603      	mov	r3, r0
 800213c:	2b04      	cmp	r3, #4
 800213e:	bf0c      	ite	eq
 8002140:	2301      	moveq	r3, #1
 8002142:	2300      	movne	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x13c>
                {
                    LOGI("Go back to Setting screen");
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x170>)
 800214c:	f240 225d 	movw	r2, #605	; 0x25d
 8002150:	4912      	ldr	r1, [pc, #72]	; (800219c <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x174>)
 8002152:	4813      	ldr	r0, [pc, #76]	; (80021a0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x178>)
 8002154:	f7fe fe5c 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x17c>)
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002164:	2100      	movs	r1, #0
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f006 fba4 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	0800c338 	.word	0x0800c338
 8002178:	2000020c 	.word	0x2000020c
 800217c:	0800c34c 	.word	0x0800c34c
 8002180:	0800c358 	.word	0x0800c358
 8002184:	0800c364 	.word	0x0800c364
 8002188:	0800c36c 	.word	0x0800c36c
 800218c:	0800c37c 	.word	0x0800c37c
 8002190:	0800c38c 	.word	0x0800c38c
 8002194:	0800c39c 	.word	0x0800c39c
 8002198:	0800c3b4 	.word	0x0800c3b4
 800219c:	0800bd88 	.word	0x0800bd88
 80021a0:	0800c3d0 	.word	0x0800c3d0
 80021a4:	0800168d 	.word	0x0800168d

080021a8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv>:

            void impl_3_2_ChargeMode()
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80021b0:	f000 fe90 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80021b4:	60f8      	str	r0, [r7, #12]
                static int chargeMode = 0;    // PSU

                mLcd.clearDisplay();
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	330c      	adds	r3, #12
 80021ba:	4618      	mov	r0, r3
 80021bc:	f006 fdaa 	bl	8008d14 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f103 000c 	add.w	r0, r3, #12
 80021c6:	4b5d      	ldr	r3, [pc, #372]	; (800233c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x194>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	2100      	movs	r1, #0
 80021cc:	f006 fc80 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f006 fb7d 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b01      	cmp	r3, #1
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00d      	beq.n	8002202 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x5a>
                {
                    if (chargeMode == 0)
 80021e6:	4b56      	ldr	r3, [pc, #344]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d103      	bne.n	80021f6 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x4e>
                    {
                        chargeMode = 3;
 80021ee:	4b54      	ldr	r3, [pc, #336]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021f0:	2203      	movs	r2, #3
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e019      	b.n	800222a <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x82>
                    }
                    else
                    {
                        chargeMode--;
 80021f6:	4b52      	ldr	r3, [pc, #328]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	4a50      	ldr	r2, [pc, #320]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e013      	b.n	800222a <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x82>
                    }
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f006 fb64 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002208:	4603      	mov	r3, r0
 800220a:	2b02      	cmp	r3, #2
 800220c:	bf0c      	ite	eq
 800220e:	2301      	moveq	r3, #1
 8002210:	2300      	movne	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x82>
                {
                    if (chargeMode == 2)
 8002218:	4b49      	ldr	r3, [pc, #292]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d004      	beq.n	800222a <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x82>
                    {
                        chargeMode == 0;
                    }
                    else
                    {
                        chargeMode++;
 8002220:	4b47      	ldr	r3, [pc, #284]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	4a46      	ldr	r2, [pc, #280]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 8002228:	6013      	str	r3, [r2, #0]
                    }
                }

                if (chargeMode == 0)
 800222a:	4b45      	ldr	r3, [pc, #276]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x9c>
                {
                    mLcd.displayLine(1, 0, "PSU");
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f103 000c 	add.w	r0, r3, #12
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x19c>)
 800223a:	2200      	movs	r2, #0
 800223c:	2101      	movs	r1, #1
 800223e:	f006 fc47 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002242:	e018      	b.n	8002276 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xce>
                }
                else if (chargeMode == 1)
 8002244:	4b3e      	ldr	r3, [pc, #248]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d108      	bne.n	800225e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xb6>
                {
                    mLcd.displayLine(1, 0, "Charger");
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 000c 	add.w	r0, r3, #12
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a0>)
 8002254:	2200      	movs	r2, #0
 8002256:	2101      	movs	r1, #1
 8002258:	f006 fc3a 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 800225c:	e00b      	b.n	8002276 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xce>
                }
                else if (chargeMode == 2)
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d107      	bne.n	8002276 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xce>
                {
                    mLcd.displayLine(1, 0, "Inverter");
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f103 000c 	add.w	r0, r3, #12
 800226c:	4b37      	ldr	r3, [pc, #220]	; (800234c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a4>)
 800226e:	2200      	movs	r2, #0
 8002270:	2101      	movs	r1, #1
 8002272:	f006 fc2d 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f006 fb2a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800227c:	4603      	mov	r3, r0
 800227e:	2b03      	cmp	r3, #3
 8002280:	bf0c      	ite	eq
 8002282:	2301      	moveq	r3, #1
 8002284:	2300      	movne	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02e      	beq.n	80022ea <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x142>
                {
                    if (chargeMode == 0)
 800228c:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d108      	bne.n	80022a6 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xfe>
                    {
                        mLcd.displayLine(2, 0, "PSU");
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f103 000c 	add.w	r0, r3, #12
 800229a:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x19c>)
 800229c:	2200      	movs	r2, #0
 800229e:	2102      	movs	r1, #2
 80022a0:	f006 fc16 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 80022a4:	e021      	b.n	80022ea <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x142>
                    }
                    else if (chargeMode == 1)
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d108      	bne.n	80022c0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x118>
                    {
                        mLcd.displayLine(2, 0, "Charger");
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f103 000c 	add.w	r0, r3, #12
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	2102      	movs	r1, #2
 80022ba:	f006 fc09 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 80022be:	e014      	b.n	80022ea <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x142>
                    }
                    else if (chargeMode == 2)
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x198>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d108      	bne.n	80022da <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x132>
                    {
                        mLcd.displayLine(2, 0, "Inverter");
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 000c 	add.w	r0, r3, #12
 80022ce:	4b1f      	ldr	r3, [pc, #124]	; (800234c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	2102      	movs	r1, #2
 80022d4:	f006 fbfc 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
 80022d8:	e007      	b.n	80022ea <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x142>
                    }
                    else
                    {
                        mLcd.displayLine(2, 0, "Error mode");
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 000c 	add.w	r0, r3, #12
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	2102      	movs	r1, #2
 80022e6:	f006 fbf3 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f103 000c 	add.w	r0, r3, #12
 80022f0:	4b18      	ldr	r3, [pc, #96]	; (8002354 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1ac>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	2103      	movs	r1, #3
 80022f6:	f006 fbeb 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f006 fae8 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002300:	4603      	mov	r3, r0
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00c      	beq.n	800232a <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x182>
                {
                    LOGI("Go back to Setting screen");
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b0>)
 8002312:	f240 22a9 	movw	r2, #681	; 0x2a9
 8002316:	4911      	ldr	r1, [pc, #68]	; (800235c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002318:	4811      	ldr	r0, [pc, #68]	; (8002360 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b8>)
 800231a:	f7fe fd79 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a10      	ldr	r2, [pc, #64]	; (8002364 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1bc>)
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800232a:	2100      	movs	r1, #0
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f006 fac1 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	0800c338 	.word	0x0800c338
 8002340:	20000210 	.word	0x20000210
 8002344:	0800c3f8 	.word	0x0800c3f8
 8002348:	0800c3fc 	.word	0x0800c3fc
 800234c:	0800c404 	.word	0x0800c404
 8002350:	0800c410 	.word	0x0800c410
 8002354:	0800c39c 	.word	0x0800c39c
 8002358:	0800c41c 	.word	0x0800c41c
 800235c:	0800bd88 	.word	0x0800bd88
 8002360:	0800c3d0 	.word	0x0800c3d0
 8002364:	0800168d 	.word	0x0800168d

08002368 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv>:

            void impl_3_2_MaxBatteryVolt()
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002370:	f000 fdb0 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002374:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f006 faaa 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800237c:	4603      	mov	r3, r0
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf0c      	ite	eq
 8002382:	2301      	moveq	r3, #1
 8002384:	2300      	movne	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00c      	beq.n	80023a6 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x50>)
 800238e:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8002392:	490a      	ldr	r1, [pc, #40]	; (80023bc <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x54>)
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x58>)
 8002396:	f7fe fd3b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x5c>)
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80023a6:	2100      	movs	r1, #0
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f006 fa83 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	0800c430 	.word	0x0800c430
 80023bc:	0800bd88 	.word	0x0800bd88
 80023c0:	0800c3d0 	.word	0x0800c3d0
 80023c4:	0800168d 	.word	0x0800168d

080023c8 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv>:

            void impl_3_2_MinBatteryVolt()
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80023d0:	f000 fd80 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80023d4:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f006 fa7a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00c      	beq.n	8002406 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x50>)
 80023ee:	f240 22bf 	movw	r2, #703	; 0x2bf
 80023f2:	490a      	ldr	r1, [pc, #40]	; (800241c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x54>)
 80023f4:	480a      	ldr	r0, [pc, #40]	; (8002420 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x58>)
 80023f6:	f7fe fd0b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x5c>)
 80023fe:	605a      	str	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002406:	2100      	movs	r1, #0
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f006 fa53 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	0800c448 	.word	0x0800c448
 800241c:	0800bd88 	.word	0x0800bd88
 8002420:	0800c3d0 	.word	0x0800c3d0
 8002424:	0800168d 	.word	0x0800168d

08002428 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv>:

            void impl_3_2_ChargingCurrent()
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002430:	f000 fd50 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002434:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f006 fa4a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800243c:	4603      	mov	r3, r0
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00c      	beq.n	8002466 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 800244c:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x50>)
 800244e:	f240 22ca 	movw	r2, #714	; 0x2ca
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x54>)
 8002454:	480a      	ldr	r0, [pc, #40]	; (8002480 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x58>)
 8002456:	f7fe fcdb 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a09      	ldr	r2, [pc, #36]	; (8002484 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x5c>)
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002466:	2100      	movs	r1, #0
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f006 fa23 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	0800c460 	.word	0x0800c460
 800247c:	0800bd88 	.word	0x0800bd88
 8002480:	0800c3d0 	.word	0x0800c3d0
 8002484:	0800168d 	.word	0x0800168d

08002488 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv>:

            void impl_3_2_CoolingFan()
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002490:	f000 fd20 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002494:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f006 fa1a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800249c:	4603      	mov	r3, r0
 800249e:	2b04      	cmp	r3, #4
 80024a0:	bf0c      	ite	eq
 80024a2:	2301      	moveq	r3, #1
 80024a4:	2300      	movne	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00c      	beq.n	80024c6 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x50>)
 80024ae:	f240 22d5 	movw	r2, #725	; 0x2d5
 80024b2:	490a      	ldr	r1, [pc, #40]	; (80024dc <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x54>)
 80024b4:	480a      	ldr	r0, [pc, #40]	; (80024e0 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x58>)
 80024b6:	f7fe fcab 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x5c>)
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80024c6:	2100      	movs	r1, #0
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f006 f9f3 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	0800c47c 	.word	0x0800c47c
 80024dc:	0800bd88 	.word	0x0800bd88
 80024e0:	0800c3d0 	.word	0x0800c3d0
 80024e4:	0800168d 	.word	0x0800168d

080024e8 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv>:

            void impl_3_2_FanTriggerTemp()
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80024f0:	f000 fcf0 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80024f4:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f006 f9ea 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf0c      	ite	eq
 8002502:	2301      	moveq	r3, #1
 8002504:	2300      	movne	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x50>)
 800250e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8002512:	490a      	ldr	r1, [pc, #40]	; (800253c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x54>)
 8002514:	480a      	ldr	r0, [pc, #40]	; (8002540 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x58>)
 8002516:	f7fe fc7b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a09      	ldr	r2, [pc, #36]	; (8002544 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x5c>)
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002526:	2100      	movs	r1, #0
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f006 f9c3 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	0800c490 	.word	0x0800c490
 800253c:	0800bd88 	.word	0x0800bd88
 8002540:	0800c3d0 	.word	0x0800c3d0
 8002544:	0800168d 	.word	0x0800168d

08002548 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv>:

            void impl_3_2_ShutdownTemp()
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002550:	f000 fcc0 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002554:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f006 f9ba 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800255c:	4603      	mov	r3, r0
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf0c      	ite	eq
 8002562:	2301      	moveq	r3, #1
 8002564:	2300      	movne	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00c      	beq.n	8002586 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x50>)
 800256e:	f240 22eb 	movw	r2, #747	; 0x2eb
 8002572:	490a      	ldr	r1, [pc, #40]	; (800259c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x54>)
 8002574:	480a      	ldr	r0, [pc, #40]	; (80025a0 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x58>)
 8002576:	f7fe fc4b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x5c>)
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002586:	2100      	movs	r1, #0
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f006 f993 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	0800c4a8 	.word	0x0800c4a8
 800259c:	0800bd88 	.word	0x0800bd88
 80025a0:	0800c3d0 	.word	0x0800c3d0
 80025a4:	0800168d 	.word	0x0800168d

080025a8 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv>:

            void impl_3_2_AutoloadCfg()
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80025b0:	f000 fc90 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80025b4:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f006 f98a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00c      	beq.n	80025e6 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x50>)
 80025ce:	f240 22f6 	movw	r2, #758	; 0x2f6
 80025d2:	490a      	ldr	r1, [pc, #40]	; (80025fc <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x54>)
 80025d4:	480a      	ldr	r0, [pc, #40]	; (8002600 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x58>)
 80025d6:	f7fe fc1b 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a09      	ldr	r2, [pc, #36]	; (8002604 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x5c>)
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80025e6:	2100      	movs	r1, #0
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f006 f963 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	0800c4c0 	.word	0x0800c4c0
 80025fc:	0800bd88 	.word	0x0800bd88
 8002600:	0800c3d0 	.word	0x0800c3d0
 8002604:	0800168d 	.word	0x0800168d

08002608 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv>:

            void impl_3_2_Backlight()
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002610:	f000 fc60 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002614:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f006 f95a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800261c:	4603      	mov	r3, r0
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf0c      	ite	eq
 8002622:	2301      	moveq	r3, #1
 8002624:	2300      	movne	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 800262c:	4b0a      	ldr	r3, [pc, #40]	; (8002658 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x50>)
 800262e:	f240 3201 	movw	r2, #769	; 0x301
 8002632:	490a      	ldr	r1, [pc, #40]	; (800265c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x54>)
 8002634:	480a      	ldr	r0, [pc, #40]	; (8002660 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x58>)
 8002636:	f7fe fbeb 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a09      	ldr	r2, [pc, #36]	; (8002664 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x5c>)
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002646:	2100      	movs	r1, #0
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f006 f933 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	0800c4d8 	.word	0x0800c4d8
 800265c:	0800bd88 	.word	0x0800bd88
 8002660:	0800c3d0 	.word	0x0800c3d0
 8002664:	0800168d 	.word	0x0800168d

08002668 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv>:

            void impl_3_2_FactoryReset()
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002670:	f000 fc30 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002674:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f006 f92a 	bl	80088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800267c:	4603      	mov	r3, r0
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf0c      	ite	eq
 8002682:	2301      	moveq	r3, #1
 8002684:	2300      	movne	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00c      	beq.n	80026a6 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x50>)
 800268e:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002692:	490a      	ldr	r1, [pc, #40]	; (80026bc <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x54>)
 8002694:	480a      	ldr	r0, [pc, #40]	; (80026c0 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x58>)
 8002696:	f7fe fbbb 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a09      	ldr	r2, [pc, #36]	; (80026c4 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x5c>)
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80026a6:	2100      	movs	r1, #0
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f006 f903 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	0800c4ec 	.word	0x0800c4ec
 80026bc:	0800bd88 	.word	0x0800bd88
 80026c0:	0800c3d0 	.word	0x0800c3d0
 80026c4:	0800168d 	.word	0x0800168d

080026c8 <HAL_GPIO_EXTI_Callback>:
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 80026d2:	2300      	movs	r3, #0
 80026d4:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 2600000U;
 80026d6:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <HAL_GPIO_EXTI_Callback+0x148>)
 80026d8:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e002      	b.n	80026e6 <HAL_GPIO_EXTI_Callback+0x1e>
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	3301      	adds	r3, #1
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	bf8c      	ite	hi
 80026ee:	2301      	movhi	r3, #1
 80026f0:	2300      	movls	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f3      	bne.n	80026e0 <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == BUT_UP_Pin)
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d10b      	bne.n	800271a <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Up pin");
 8002702:	4b44      	ldr	r3, [pc, #272]	; (8002814 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002704:	2253      	movs	r2, #83	; 0x53
 8002706:	4944      	ldr	r1, [pc, #272]	; (8002818 <HAL_GPIO_EXTI_Callback+0x150>)
 8002708:	4844      	ldr	r0, [pc, #272]	; (800281c <HAL_GPIO_EXTI_Callback+0x154>)
 800270a:	f7fe fb81 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::UP;
 800270e:	4b44      	ldr	r3, [pc, #272]	; (8002820 <HAL_GPIO_EXTI_Callback+0x158>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_UP_GPIO_Port;
 8002714:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	e032      	b.n	8002780 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_DOWN_Pin)
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d10b      	bne.n	8002738 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Down pin");
 8002720:	4b3c      	ldr	r3, [pc, #240]	; (8002814 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002722:	2259      	movs	r2, #89	; 0x59
 8002724:	493c      	ldr	r1, [pc, #240]	; (8002818 <HAL_GPIO_EXTI_Callback+0x150>)
 8002726:	4840      	ldr	r0, [pc, #256]	; (8002828 <HAL_GPIO_EXTI_Callback+0x160>)
 8002728:	f7fe fb72 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::DOWN;
 800272c:	4b3c      	ldr	r3, [pc, #240]	; (8002820 <HAL_GPIO_EXTI_Callback+0x158>)
 800272e:	2202      	movs	r2, #2
 8002730:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_DOWN_GPIO_Port;
 8002732:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e023      	b.n	8002780 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_BACK_Pin)
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	2b04      	cmp	r3, #4
 800273c:	d10b      	bne.n	8002756 <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002740:	225f      	movs	r2, #95	; 0x5f
 8002742:	4935      	ldr	r1, [pc, #212]	; (8002818 <HAL_GPIO_EXTI_Callback+0x150>)
 8002744:	4839      	ldr	r0, [pc, #228]	; (800282c <HAL_GPIO_EXTI_Callback+0x164>)
 8002746:	f7fe fb63 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 800274a:	4b35      	ldr	r3, [pc, #212]	; (8002820 <HAL_GPIO_EXTI_Callback+0x158>)
 800274c:	2204      	movs	r2, #4
 800274e:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_BACK_GPIO_Port;
 8002750:	4b34      	ldr	r3, [pc, #208]	; (8002824 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	e014      	b.n	8002780 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_SEL_Pin)
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b08      	cmp	r3, #8
 800275a:	d10b      	bne.n	8002774 <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <HAL_GPIO_EXTI_Callback+0x14c>)
 800275e:	2265      	movs	r2, #101	; 0x65
 8002760:	492d      	ldr	r1, [pc, #180]	; (8002818 <HAL_GPIO_EXTI_Callback+0x150>)
 8002762:	4833      	ldr	r0, [pc, #204]	; (8002830 <HAL_GPIO_EXTI_Callback+0x168>)
 8002764:	f7fe fb54 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SEL;
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_GPIO_EXTI_Callback+0x158>)
 800276a:	2203      	movs	r2, #3
 800276c:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_SEL_GPIO_Port;
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	e005      	b.n	8002780 <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 8002774:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002776:	226b      	movs	r2, #107	; 0x6b
 8002778:	4927      	ldr	r1, [pc, #156]	; (8002818 <HAL_GPIO_EXTI_Callback+0x150>)
 800277a:	482e      	ldr	r0, [pc, #184]	; (8002834 <HAL_GPIO_EXTI_Callback+0x16c>)
 800277c:	f7fe fb48 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 8002780:	f000 fba8 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002784:	4602      	mov	r2, r0
 8002786:	4b26      	ldr	r3, [pc, #152]	; (8002820 <HAL_GPIO_EXTI_Callback+0x158>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4619      	mov	r1, r3
 800278c:	4610      	mov	r0, r2
 800278e:	f006 f891 	bl	80088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 8002792:	f000 fb9f 	bl	8002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002796:	4603      	mov	r3, r0
 8002798:	4618      	mov	r0, r3
 800279a:	f006 f8a5 	bl	80088e8 <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01e      	beq.n	80027e2 <HAL_GPIO_EXTI_Callback+0x11a>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3301      	adds	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	4619      	mov	r1, r3
 80027b0:	69f8      	ldr	r0, [r7, #28]
 80027b2:	f002 fcd1 	bl	8005158 <HAL_GPIO_ReadPin>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	bf0c      	ite	eq
 80027bc:	2301      	moveq	r3, #1
 80027be:	2300      	movne	r3, #0
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	69b9      	ldr	r1, [r7, #24]
 80027c6:	4299      	cmp	r1, r3
 80027c8:	bf8c      	ite	hi
 80027ca:	2301      	movhi	r3, #1
 80027cc:	2300      	movls	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	4013      	ands	r3, r2
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf14      	ite	ne
 80027d8:	2301      	movne	r3, #1
 80027da:	2300      	moveq	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1e1      	bne.n	80027a6 <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e002      	b.n	80027ee <HAL_GPIO_EXTI_Callback+0x126>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3301      	adds	r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	bf8c      	ite	hi
 80027f6:	2301      	movhi	r3, #1
 80027f8:	2300      	movls	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f3      	bne.n	80027e8 <HAL_GPIO_EXTI_Callback+0x120>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 8002800:	4a0d      	ldr	r2, [pc, #52]	; (8002838 <HAL_GPIO_EXTI_Callback+0x170>)
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	6153      	str	r3, [r2, #20]
}
 8002806:	bf00      	nop
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	0027ac40 	.word	0x0027ac40
 8002814:	0800c504 	.word	0x0800c504
 8002818:	0800c51c 	.word	0x0800c51c
 800281c:	0800c528 	.word	0x0800c528
 8002820:	200003d0 	.word	0x200003d0
 8002824:	48000800 	.word	0x48000800
 8002828:	0800c544 	.word	0x0800c544
 800282c:	0800c564 	.word	0x0800c564
 8002830:	0800c584 	.word	0x0800c584
 8002834:	0800c5a4 	.word	0x0800c5a4
 8002838:	40010400 	.word	0x40010400

0800283c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
    blib::Analog::getInstance().sampling();
 8002844:	f7fe face 	bl	8000de4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fa04 	bl	8000c58 <_ZN4blib6Analog8samplingEv>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800285e:	f000 fe1b 	bl	8003498 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8002862:	f000 f839 	bl	80028d8 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002866:	f000 fa43 	bl	8002cf0 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 800286a:	f000 fa23 	bl	8002cb4 <_ZL11MX_DMA_Initv>
    MX_ADC1_Init();
 800286e:	f000 f8a7 	bl	80029c0 <_ZL12MX_ADC1_Initv>
    MX_I2C1_Init();
 8002872:	f000 f935 	bl	8002ae0 <_ZL12MX_I2C1_Initv>
    MX_USART2_UART_Init();
 8002876:	f000 f9e9 	bl	8002c4c <_ZL19MX_USART2_UART_Initv>
    MX_TIM2_Init();
 800287a:	f000 f97f 	bl	8002b7c <_ZL12MX_TIM2_Initv>
    /* USER CODE BEGIN 2 */
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <main+0x6c>)
 8002880:	22aa      	movs	r2, #170	; 0xaa
 8002882:	4911      	ldr	r1, [pc, #68]	; (80028c8 <main+0x70>)
 8002884:	4811      	ldr	r0, [pc, #68]	; (80028cc <main+0x74>)
 8002886:	f7fe fac3 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <main+0x6c>)
 800288c:	22ab      	movs	r2, #171	; 0xab
 800288e:	490e      	ldr	r1, [pc, #56]	; (80028c8 <main+0x70>)
 8002890:	480f      	ldr	r0, [pc, #60]	; (80028d0 <main+0x78>)
 8002892:	f7fe fabd 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <main+0x6c>)
 8002898:	22ac      	movs	r2, #172	; 0xac
 800289a:	490b      	ldr	r1, [pc, #44]	; (80028c8 <main+0x70>)
 800289c:	480d      	ldr	r0, [pc, #52]	; (80028d4 <main+0x7c>)
 800289e:	f7fe fab7 	bl	8000e10 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

    auto &analog = blib::Analog::getInstance();
 80028a2:	f7fe fa9f 	bl	8000de4 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80028a6:	60f8      	str	r0, [r7, #12]
//    auto &monitor = blib::Monitor::getInstance();
    auto &chargeCtrl = blib::ChargeControl::getInstance();
 80028a8:	f000 fb2a 	bl	8002f00 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 80028ac:	60b8      	str	r0, [r7, #8]
    auto &lcdSimulate = blib::LcdSimulate::getInstance();
 80028ae:	f000 fafb 	bl	8002ea8 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 80028b2:	6078      	str	r0, [r7, #4]
        /* USER CODE BEGIN 3 */
//        analog.readAnalog();
//        chargeCtrl.run();
////        serialMnt.show();
//        monitor.showMenu();
        lcdSimulate.run();
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7fe fb4f 	bl	8000f58 <_ZN4blib11LcdSimulate3runEv>
        HAL_Delay(500);
 80028ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028be:	f000 fe51 	bl	8003564 <HAL_Delay>
        lcdSimulate.run();
 80028c2:	e7f7      	b.n	80028b4 <main+0x5c>
 80028c4:	0800c5c8 	.word	0x0800c5c8
 80028c8:	0800c51c 	.word	0x0800c51c
 80028cc:	0800c5d0 	.word	0x0800c5d0
 80028d0:	0800c5fc 	.word	0x0800c5fc
 80028d4:	0800c618 	.word	0x0800c618

080028d8 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0a6      	sub	sp, #152	; 0x98
 80028dc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80028de:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028e2:	2228      	movs	r2, #40	; 0x28
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f007 f99d 	bl	8009c26 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80028ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	2258      	movs	r2, #88	; 0x58
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f007 f98f 	bl	8009c26 <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002908:	2302      	movs	r3, #2
 800290a:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800290c:	2301      	movs	r3, #1
 800290e:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002910:	2310      	movs	r3, #16
 8002912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002916:	2302      	movs	r3, #2
 8002918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800291c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002920:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002924:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002928:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002932:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002936:	4618      	mov	r0, r3
 8002938:	f003 f882 	bl	8005a40 <HAL_RCC_OscConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <_Z18SystemClock_Configv+0x78>
    {
        Error_Handler();
 800294c:	f000 fa76 	bl	8002e3c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 8002950:	230f      	movs	r3, #15
 8002952:	65fb      	str	r3, [r7, #92]	; 0x5c
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002954:	2302      	movs	r3, #2
 8002956:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002958:	2300      	movs	r3, #0
 800295a:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800295c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002960:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002962:	2300      	movs	r3, #0
 8002964:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002966:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800296a:	2102      	movs	r1, #2
 800296c:	4618      	mov	r0, r3
 800296e:	f004 f8bb 	bl	8006ae8 <HAL_RCC_ClockConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	bf14      	ite	ne
 8002978:	2301      	movne	r3, #1
 800297a:	2300      	moveq	r3, #0
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <_Z18SystemClock_Configv+0xae>
    {
        Error_Handler();
 8002982:	f000 fa5b 	bl	8002e3c <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <_Z18SystemClock_Configv+0xe4>)
 8002988:	607b      	str	r3, [r7, #4]
            | RCC_PERIPHCLK_TIM2;
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800298e:	2300      	movs	r3, #0
 8002990:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002992:	2300      	movs	r3, #0
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fadb 	bl	8006f54 <HAL_RCCEx_PeriphCLKConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <_Z18SystemClock_Configv+0xda>
    {
        Error_Handler();
 80029ae:	f000 fa45 	bl	8002e3c <Error_Handler>
    }
}
 80029b2:	bf00      	nop
 80029b4:	3798      	adds	r7, #152	; 0x98
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	00100022 	.word	0x00100022

080029c0 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	; 0x28
 80029c4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = { 0 };
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 80029d2:	1d3b      	adds	r3, r7, #4
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
 80029e0:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 80029e2:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 80029e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80029e8:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 80029ec:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029f0:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029f2:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80029f8:	4b38      	ldr	r3, [pc, #224]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80029fe:	4b37      	ldr	r3, [pc, #220]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	765a      	strb	r2, [r3, #25]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a04:	4b35      	ldr	r3, [pc, #212]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a0c:	4b33      	ldr	r3, [pc, #204]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a12:	4b32      	ldr	r3, [pc, #200]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a18:	4b30      	ldr	r3, [pc, #192]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 2;
 8002a1e:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a20:	2202      	movs	r2, #2
 8002a22:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a2c:	4b2b      	ldr	r3, [pc, #172]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a2e:	2208      	movs	r2, #8
 8002a30:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8002a32:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	761a      	strb	r2, [r3, #24]
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002a38:	4b28      	ldr	r3, [pc, #160]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a3e:	4827      	ldr	r0, [pc, #156]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a40:	f000 fdc8 	bl	80035d4 <HAL_ADC_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	bf14      	ite	ne
 8002a4a:	2301      	movne	r3, #1
 8002a4c:	2300      	moveq	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <_ZL12MX_ADC1_Initv+0x98>
    {
        Error_Handler();
 8002a54:	f000 f9f2 	bl	8002e3c <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	4619      	mov	r1, r3
 8002a62:	481e      	ldr	r0, [pc, #120]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a64:	f001 fc18 	bl	8004298 <HAL_ADCEx_MultiModeConfigChannel>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <_ZL12MX_ADC1_Initv+0xbc>
    {
        Error_Handler();
 8002a78:	f000 f9e0 	bl	8002e3c <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002a84:	2301      	movs	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8002a88:	2307      	movs	r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4810      	ldr	r0, [pc, #64]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002a9a:	f001 f913 	bl	8003cc4 <HAL_ADC_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <_ZL12MX_ADC1_Initv+0xf2>
    {
        Error_Handler();
 8002aae:	f000 f9c5 	bl	8002e3c <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Rank = ADC_REGULAR_RANK_2;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4808      	ldr	r0, [pc, #32]	; (8002adc <_ZL12MX_ADC1_Initv+0x11c>)
 8002abc:	f001 f902 	bl	8003cc4 <HAL_ADC_ConfigChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	bf14      	ite	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	2300      	moveq	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <_ZL12MX_ADC1_Initv+0x114>
    {
        Error_Handler();
 8002ad0:	f000 f9b4 	bl	8002e3c <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8002ad4:	bf00      	nop
 8002ad6:	3728      	adds	r7, #40	; 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000214 	.word	0x20000214

08002ae0 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002ae6:	4a23      	ldr	r2, [pc, #140]	; (8002b74 <_ZL12MX_I2C1_Initv+0x94>)
 8002ae8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x2000090E;
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002aec:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <_ZL12MX_I2C1_Initv+0x98>)
 8002aee:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b1a:	4815      	ldr	r0, [pc, #84]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002b1c:	f002 fb64 	bl	80051e8 <HAL_I2C_Init>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	bf14      	ite	ne
 8002b26:	2301      	movne	r3, #1
 8002b28:	2300      	moveq	r3, #0
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <_ZL12MX_I2C1_Initv+0x54>
    {
        Error_Handler();
 8002b30:	f000 f984 	bl	8002e3c <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b34:	2100      	movs	r1, #0
 8002b36:	480e      	ldr	r0, [pc, #56]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002b38:	f002 feea 	bl	8005910 <HAL_I2CEx_ConfigAnalogFilter>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <_ZL12MX_I2C1_Initv+0x70>
    {
        Error_Handler();
 8002b4c:	f000 f976 	bl	8002e3c <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002b50:	2100      	movs	r1, #0
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <_ZL12MX_I2C1_Initv+0x90>)
 8002b54:	f002 ff27 	bl	80059a6 <HAL_I2CEx_ConfigDigitalFilter>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <_ZL12MX_I2C1_Initv+0x8c>
    {
        Error_Handler();
 8002b68:	f000 f968 	bl	8002e3c <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8002b6c:	bf00      	nop
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200002a8 	.word	0x200002a8
 8002b74:	40005400 	.word	0x40005400
 8002b78:	2000090e 	.word	0x2000090e

08002b7c <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002b8e:	463b      	mov	r3, r7
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
 8002b9c:	615a      	str	r2, [r3, #20]
 8002b9e:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8002ba0:	4b29      	ldr	r3, [pc, #164]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ba6:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 71;
 8002ba8:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002baa:	2247      	movs	r2, #71	; 0x47
 8002bac:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b26      	ldr	r3, [pc, #152]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 500 - 1;
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002bb6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002bba:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbc:	4b22      	ldr	r3, [pc, #136]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002bc8:	481f      	ldr	r0, [pc, #124]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002bca:	f004 fbe1 	bl	8007390 <HAL_TIM_PWM_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <_ZL12MX_TIM2_Initv+0x66>
    {
        Error_Handler();
 8002bde:	f000 f92d 	bl	8002e3c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bea:	f107 031c 	add.w	r3, r7, #28
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4815      	ldr	r0, [pc, #84]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002bf2:	f005 f8dd 	bl	8007db0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <_ZL12MX_TIM2_Initv+0x8e>
    {
        Error_Handler();
 8002c06:	f000 f919 	bl	8002e3c <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c0a:	2360      	movs	r3, #96	; 0x60
 8002c0c:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 250;
 8002c0e:	23fa      	movs	r3, #250	; 0xfa
 8002c10:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002c22:	f004 fc0d 	bl	8007440 <HAL_TIM_PWM_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <_ZL12MX_TIM2_Initv+0xbe>
    {
        Error_Handler();
 8002c36:	f000 f901 	bl	8002e3c <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8002c3a:	4803      	ldr	r0, [pc, #12]	; (8002c48 <_ZL12MX_TIM2_Initv+0xcc>)
 8002c3c:	f000 fa64 	bl	8003108 <HAL_TIM_MspPostInit>

}
 8002c40:	bf00      	nop
 8002c42:	3728      	adds	r7, #40	; 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200002fc 	.word	0x200002fc

08002c4c <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8002c50:	4b16      	ldr	r3, [pc, #88]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c52:	4a17      	ldr	r2, [pc, #92]	; (8002cb0 <_ZL19MX_USART2_UART_Initv+0x64>)
 8002c54:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c5c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c72:	220c      	movs	r2, #12
 8002c74:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c88:	4b08      	ldr	r3, [pc, #32]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c8e:	4807      	ldr	r0, [pc, #28]	; (8002cac <_ZL19MX_USART2_UART_Initv+0x60>)
 8002c90:	f005 f91a 	bl	8007ec8 <HAL_UART_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <_ZL19MX_USART2_UART_Initv+0x5c>
    {
        Error_Handler();
 8002ca4:	f000 f8ca 	bl	8002e3c <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	20000348 	.word	0x20000348
 8002cb0:	40004400 	.word	0x40004400

08002cb4 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8002cba:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <_ZL11MX_DMA_Initv+0x38>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <_ZL11MX_DMA_Initv+0x38>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6153      	str	r3, [r2, #20]
 8002cc6:	4b09      	ldr	r3, [pc, #36]	; (8002cec <_ZL11MX_DMA_Initv+0x38>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	200b      	movs	r0, #11
 8002cd8:	f001 fe91 	bl	80049fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002cdc:	200b      	movs	r0, #11
 8002cde:	f001 feaa 	bl	8004a36 <HAL_NVIC_EnableIRQ>

}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000

08002cf0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b088      	sub	sp, #32
 8002cf4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	4b4a      	ldr	r3, [pc, #296]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	4a49      	ldr	r2, [pc, #292]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d10:	6153      	str	r3, [r2, #20]
 8002d12:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1e:	4b44      	ldr	r3, [pc, #272]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	4a43      	ldr	r2, [pc, #268]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	6153      	str	r3, [r2, #20]
 8002d2a:	4b41      	ldr	r3, [pc, #260]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d36:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d40:	6153      	str	r3, [r2, #20]
 8002d42:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <_ZL12MX_GPIO_Initv+0x140>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_RED_Pin | LED_YEL_Pin | LED_GRE_Pin, GPIO_PIN_SET);
 8002d4e:	2201      	movs	r2, #1
 8002d50:	2107      	movs	r1, #7
 8002d52:	4838      	ldr	r0, [pc, #224]	; (8002e34 <_ZL12MX_GPIO_Initv+0x144>)
 8002d54:	f002 fa18 	bl	8005188 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | BUCK_EN_Pin, GPIO_PIN_SET);
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002d5e:	4836      	ldr	r0, [pc, #216]	; (8002e38 <_ZL12MX_GPIO_Initv+0x148>)
 8002d60:	f002 fa12 	bl	8005188 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, BFC_Pin | FAN_Pin, GPIO_PIN_SET);
 8002d64:	2201      	movs	r2, #1
 8002d66:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d6e:	f002 fa0b 	bl	8005188 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUT_UP_Pin BUT_DOWN_Pin BUT_BACK_Pin BUT_SEL_Pin */
    GPIO_InitStruct.Pin = BUT_UP_Pin | BUT_DOWN_Pin | BUT_BACK_Pin | BUT_SEL_Pin;
 8002d72:	230f      	movs	r3, #15
 8002d74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d76:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	4619      	mov	r1, r3
 8002d86:	482c      	ldr	r0, [pc, #176]	; (8002e38 <_ZL12MX_GPIO_Initv+0x148>)
 8002d88:	f002 f85c 	bl	8004e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_RED_Pin LED_YEL_Pin LED_GRE_Pin */
    GPIO_InitStruct.Pin = LED_RED_Pin | LED_YEL_Pin | LED_GRE_Pin;
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d90:	2301      	movs	r3, #1
 8002d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	4619      	mov	r1, r3
 8002da2:	4824      	ldr	r0, [pc, #144]	; (8002e34 <_ZL12MX_GPIO_Initv+0x144>)
 8002da4:	f002 f84e 	bl	8004e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : INVERTER_CTRL_Pin BUCK_EN_Pin */
    GPIO_InitStruct.Pin = INVERTER_CTRL_Pin | BUCK_EN_Pin;
 8002da8:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002dac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dae:	2301      	movs	r3, #1
 8002db0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	481d      	ldr	r0, [pc, #116]	; (8002e38 <_ZL12MX_GPIO_Initv+0x148>)
 8002dc2:	f002 f83f 	bl	8004e44 <HAL_GPIO_Init>

    /*Configure GPIO pins : BFC_Pin FAN_Pin */
    GPIO_InitStruct.Pin = BFC_Pin | FAN_Pin;
 8002dc6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002dca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd8:	f107 030c 	add.w	r3, r7, #12
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de2:	f002 f82f 	bl	8004e44 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	2006      	movs	r0, #6
 8002dec:	f001 fe07 	bl	80049fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002df0:	2006      	movs	r0, #6
 8002df2:	f001 fe20 	bl	8004a36 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2007      	movs	r0, #7
 8002dfc:	f001 fdff 	bl	80049fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002e00:	2007      	movs	r0, #7
 8002e02:	f001 fe18 	bl	8004a36 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2008      	movs	r0, #8
 8002e0c:	f001 fdf7 	bl	80049fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8002e10:	2008      	movs	r0, #8
 8002e12:	f001 fe10 	bl	8004a36 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2009      	movs	r0, #9
 8002e1c:	f001 fdef 	bl	80049fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002e20:	2009      	movs	r0, #9
 8002e22:	f001 fe08 	bl	8004a36 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8002e26:	bf00      	nop
 8002e28:	3720      	adds	r7, #32
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	48000400 	.word	0x48000400
 8002e38:	48000800 	.word	0x48000800

08002e3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e40:	b672      	cpsid	i
}
 8002e42:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8002e44:	e7fe      	b.n	8002e44 <Error_Handler+0x8>
	...

08002e48 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev>:
                Singleton()
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
                {
 8002e50:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev+0x1c>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
                }
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	0800c720 	.word	0x0800c720

08002e68 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>:
                virtual ~Singleton()
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
                }
 8002e70:	4a04      	ldr	r2, [pc, #16]	; (8002e84 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev+0x1c>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	0800c720 	.word	0x0800c720

08002e88 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED0Ev>:
                virtual ~Singleton()
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
                }
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f7ff ffe9 	bl	8002e68 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>
 8002e96:	2104      	movs	r1, #4
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f006 f843 	bl	8008f24 <_ZdlPvj>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>:
                static T& getInstance()
 8002ea8:	b598      	push	{r3, r4, r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002eb4:	2020      	movs	r0, #32
 8002eb6:	f006 f837 	bl	8008f28 <_Znwj>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461c      	mov	r4, r3
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	f7fd ffcc 	bl	8000e5c <_ZN4blib11LcdSimulateC1Ev>
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8002ec6:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002ec8:	4b01      	ldr	r3, [pc, #4]	; (8002ed0 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8002eca:	681b      	ldr	r3, [r3, #0]
                }
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd98      	pop	{r3, r4, r7, pc}
 8002ed0:	200003dc 	.word	0x200003dc

08002ed4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 8002ed4:	b598      	push	{r3, r4, r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002ee0:	2008      	movs	r0, #8
 8002ee2:	f006 f821 	bl	8008f28 <_Znwj>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	461c      	mov	r4, r3
 8002eea:	4620      	mov	r0, r4
 8002eec:	f005 fcae 	bl	800884c <_ZN4blib6ButtonC1Ev>
 8002ef0:	4b02      	ldr	r3, [pc, #8]	; (8002efc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002ef2:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002ef4:	4b01      	ldr	r3, [pc, #4]	; (8002efc <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
                }
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd98      	pop	{r3, r4, r7, pc}
 8002efc:	200003d4 	.word	0x200003d4

08002f00 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 8002f00:	b598      	push	{r3, r4, r7, lr}
 8002f02:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8002f04:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d109      	bne.n	8002f20 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x20>
                        mInstance = new T();
 8002f0c:	201c      	movs	r0, #28
 8002f0e:	f006 f80b 	bl	8008f28 <_Znwj>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461c      	mov	r4, r3
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7fd fef6 	bl	8000d08 <_ZN4blib13ChargeControlC1Ev>
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002f1e:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8002f20:	4b01      	ldr	r3, [pc, #4]	; (8002f28 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 8002f22:	681b      	ldr	r3, [r3, #0]
                }
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd98      	pop	{r3, r4, r7, pc}
 8002f28:	200003d8 	.word	0x200003d8

08002f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_MspInit+0x44>)
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <HAL_MspInit+0x44>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6193      	str	r3, [r2, #24]
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_MspInit+0x44>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_MspInit+0x44>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_MspInit+0x44>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	61d3      	str	r3, [r2, #28]
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_MspInit+0x44>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f94:	d14c      	bne.n	8003030 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f96:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_ADC_MspInit+0xc4>)
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4a27      	ldr	r2, [pc, #156]	; (8003038 <HAL_ADC_MspInit+0xc4>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6153      	str	r3, [r2, #20]
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_ADC_MspInit+0xc4>)
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	4b22      	ldr	r3, [pc, #136]	; (8003038 <HAL_ADC_MspInit+0xc4>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4a21      	ldr	r2, [pc, #132]	; (8003038 <HAL_ADC_MspInit+0xc4>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	6153      	str	r3, [r2, #20]
 8002fba:	4b1f      	ldr	r3, [pc, #124]	; (8003038 <HAL_ADC_MspInit+0xc4>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fdc:	f001 ff32 	bl	8004e44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8002fe2:	4a17      	ldr	r2, [pc, #92]	; (8003040 <HAL_ADC_MspInit+0xcc>)
 8002fe4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8002ff4:	2280      	movs	r2, #128	; 0x80
 8002ff6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ff8:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8002ffa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ffe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8003002:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003006:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_ADC_MspInit+0xc8>)
 800300a:	2220      	movs	r2, #32
 800300c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8003010:	2200      	movs	r2, #0
 8003012:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8003016:	f001 fd28 	bl	8004a6a <HAL_DMA_Init>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8003020:	f7ff ff0c 	bl	8002e3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a05      	ldr	r2, [pc, #20]	; (800303c <HAL_ADC_MspInit+0xc8>)
 8003028:	639a      	str	r2, [r3, #56]	; 0x38
 800302a:	4a04      	ldr	r2, [pc, #16]	; (800303c <HAL_ADC_MspInit+0xc8>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	20000264 	.word	0x20000264
 8003040:	40020008 	.word	0x40020008

08003044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b08a      	sub	sp, #40	; 0x28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a17      	ldr	r2, [pc, #92]	; (80030c0 <HAL_I2C_MspInit+0x7c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d127      	bne.n	80030b6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_I2C_MspInit+0x80>)
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <HAL_I2C_MspInit+0x80>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003070:	6153      	str	r3, [r2, #20]
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_I2C_MspInit+0x80>)
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800307e:	23c0      	movs	r3, #192	; 0xc0
 8003080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003082:	2312      	movs	r3, #18
 8003084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800308a:	2303      	movs	r3, #3
 800308c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800308e:	2304      	movs	r3, #4
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	f107 0314 	add.w	r3, r7, #20
 8003096:	4619      	mov	r1, r3
 8003098:	480b      	ldr	r0, [pc, #44]	; (80030c8 <HAL_I2C_MspInit+0x84>)
 800309a:	f001 fed3 	bl	8004e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <HAL_I2C_MspInit+0x80>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <HAL_I2C_MspInit+0x80>)
 80030a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030a8:	61d3      	str	r3, [r2, #28]
 80030aa:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_I2C_MspInit+0x80>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b2:	60fb      	str	r3, [r7, #12]
 80030b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030b6:	bf00      	nop
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40005400 	.word	0x40005400
 80030c4:	40021000 	.word	0x40021000
 80030c8:	48000400 	.word	0x48000400

080030cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d10b      	bne.n	80030f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_TIM_PWM_MspInit+0x38>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a08      	ldr	r2, [pc, #32]	; (8003104 <HAL_TIM_PWM_MspInit+0x38>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	61d3      	str	r3, [r2, #28]
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_TIM_PWM_MspInit+0x38>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80030f6:	bf00      	nop
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40021000 	.word	0x40021000

08003108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003128:	d11c      	bne.n	8003164 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_TIM_MspPostInit+0x64>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4a0f      	ldr	r2, [pc, #60]	; (800316c <HAL_TIM_MspPostInit+0x64>)
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	6153      	str	r3, [r2, #20]
 8003136:	4b0d      	ldr	r3, [pc, #52]	; (800316c <HAL_TIM_MspPostInit+0x64>)
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	60bb      	str	r3, [r7, #8]
 8003140:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003142:	2320      	movs	r3, #32
 8003144:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003152:	2301      	movs	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003156:	f107 030c 	add.w	r3, r7, #12
 800315a:	4619      	mov	r1, r3
 800315c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003160:	f001 fe70 	bl	8004e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003164:	bf00      	nop
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000

08003170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a17      	ldr	r2, [pc, #92]	; (80031ec <HAL_UART_MspInit+0x7c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d128      	bne.n	80031e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003192:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <HAL_UART_MspInit+0x80>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <HAL_UART_MspInit+0x80>)
 8003198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319c:	61d3      	str	r3, [r2, #28]
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <HAL_UART_MspInit+0x80>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_UART_MspInit+0x80>)
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <HAL_UART_MspInit+0x80>)
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	6153      	str	r3, [r2, #20]
 80031b6:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_UART_MspInit+0x80>)
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031c2:	230c      	movs	r3, #12
 80031c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031ce:	2303      	movs	r3, #3
 80031d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031d2:	2307      	movs	r3, #7
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e0:	f001 fe30 	bl	8004e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031e4:	bf00      	nop
 80031e6:	3728      	adds	r7, #40	; 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	40004400 	.word	0x40004400
 80031f0:	40021000 	.word	0x40021000

080031f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <NMI_Handler+0x4>

080031fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <HardFault_Handler+0x4>

08003200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <MemManage_Handler+0x4>

08003206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800320a:	e7fe      	b.n	800320a <BusFault_Handler+0x4>

0800320c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003210:	e7fe      	b.n	8003210 <UsageFault_Handler+0x4>

08003212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003212:	b480      	push	{r7}
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003240:	f000 f970 	bl	8003524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003244:	bf00      	nop
 8003246:	bd80      	pop	{r7, pc}

08003248 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_UP_Pin);
 800324c:	2001      	movs	r0, #1
 800324e:	f001 ffb3 	bl	80051b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}

08003256 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_DOWN_Pin);
 800325a:	2002      	movs	r0, #2
 800325c:	f001 ffac 	bl	80051b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}

08003264 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BACK_Pin);
 8003268:	2004      	movs	r0, #4
 800326a:	f001 ffa5 	bl	80051b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}

08003272 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SEL_Pin);
 8003276:	2008      	movs	r0, #8
 8003278:	f001 ff9e 	bl	80051b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	bd80      	pop	{r7, pc}

08003280 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003284:	4802      	ldr	r0, [pc, #8]	; (8003290 <DMA1_Channel1_IRQHandler+0x10>)
 8003286:	f001 fccf 	bl	8004c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000264 	.word	0x20000264

08003294 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return 1;
 8003298:	2301      	movs	r3, #1
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_kill>:

int _kill(int pid, int sig)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80032ae:	f006 fd61 	bl	8009d74 <__errno>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2216      	movs	r2, #22
 80032b6:	601a      	str	r2, [r3, #0]
  return -1;
 80032b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <_exit>:

void _exit (int status)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032cc:	f04f 31ff 	mov.w	r1, #4294967295
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ffe7 	bl	80032a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032d6:	e7fe      	b.n	80032d6 <_exit+0x12>

080032d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e00a      	b.n	8003300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032ea:	f3af 8000 	nop.w
 80032ee:	4601      	mov	r1, r0
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	60ba      	str	r2, [r7, #8]
 80032f6:	b2ca      	uxtb	r2, r1
 80032f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	429a      	cmp	r2, r3
 8003306:	dbf0      	blt.n	80032ea <_read+0x12>
  }

  return len;
 8003308:	687b      	ldr	r3, [r7, #4]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b086      	sub	sp, #24
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	e009      	b.n	8003338 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	60ba      	str	r2, [r7, #8]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	dbf1      	blt.n	8003324 <_write+0x12>
  }
  return len;
 8003340:	687b      	ldr	r3, [r7, #4]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <_close>:

int _close(int file)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003362:	b480      	push	{r7}
 8003364:	b083      	sub	sp, #12
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003372:	605a      	str	r2, [r3, #4]
  return 0;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <_isatty>:

int _isatty(int file)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800338a:	2301      	movs	r3, #1
}
 800338c:	4618      	mov	r0, r3
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033bc:	4a14      	ldr	r2, [pc, #80]	; (8003410 <_sbrk+0x5c>)
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <_sbrk+0x60>)
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <_sbrk+0x64>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d102      	bne.n	80033d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033d0:	4b11      	ldr	r3, [pc, #68]	; (8003418 <_sbrk+0x64>)
 80033d2:	4a12      	ldr	r2, [pc, #72]	; (800341c <_sbrk+0x68>)
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033d6:	4b10      	ldr	r3, [pc, #64]	; (8003418 <_sbrk+0x64>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4413      	add	r3, r2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d207      	bcs.n	80033f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033e4:	f006 fcc6 	bl	8009d74 <__errno>
 80033e8:	4603      	mov	r3, r0
 80033ea:	220c      	movs	r2, #12
 80033ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ee:	f04f 33ff 	mov.w	r3, #4294967295
 80033f2:	e009      	b.n	8003408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <_sbrk+0x64>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033fa:	4b07      	ldr	r3, [pc, #28]	; (8003418 <_sbrk+0x64>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4413      	add	r3, r2
 8003402:	4a05      	ldr	r2, [pc, #20]	; (8003418 <_sbrk+0x64>)
 8003404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003406:	68fb      	ldr	r3, [r7, #12]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20010000 	.word	0x20010000
 8003414:	00000400 	.word	0x00000400
 8003418:	200003e0 	.word	0x200003e0
 800341c:	20000938 	.word	0x20000938

08003420 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <SystemInit+0x20>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	4a05      	ldr	r2, [pc, #20]	; (8003440 <SystemInit+0x20>)
 800342c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800347c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003448:	f7ff ffea 	bl	8003420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800344c:	480c      	ldr	r0, [pc, #48]	; (8003480 <LoopForever+0x6>)
  ldr r1, =_edata
 800344e:	490d      	ldr	r1, [pc, #52]	; (8003484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003450:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <LoopForever+0xe>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003454:	e002      	b.n	800345c <LoopCopyDataInit>

08003456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800345a:	3304      	adds	r3, #4

0800345c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800345c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800345e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003460:	d3f9      	bcc.n	8003456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003464:	4c0a      	ldr	r4, [pc, #40]	; (8003490 <LoopForever+0x16>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003468:	e001      	b.n	800346e <LoopFillZerobss>

0800346a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800346a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800346c:	3204      	adds	r2, #4

0800346e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800346e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003470:	d3fb      	bcc.n	800346a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003472:	f006 fc85 	bl	8009d80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003476:	f7ff f9ef 	bl	8002858 <main>

0800347a <LoopForever>:

LoopForever:
    b LoopForever
 800347a:	e7fe      	b.n	800347a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800347c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003484:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003488:	0800cb0c 	.word	0x0800cb0c
  ldr r2, =_sbss
 800348c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003490:	20000938 	.word	0x20000938

08003494 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003494:	e7fe      	b.n	8003494 <ADC1_2_IRQHandler>
	...

08003498 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_Init+0x28>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <HAL_Init+0x28>)
 80034a2:	f043 0310 	orr.w	r3, r3, #16
 80034a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a8:	2003      	movs	r0, #3
 80034aa:	f001 fa9d 	bl	80049e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ae:	200f      	movs	r0, #15
 80034b0:	f000 f808 	bl	80034c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b4:	f7ff fd3a 	bl	8002f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40022000 	.word	0x40022000

080034c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034cc:	4b12      	ldr	r3, [pc, #72]	; (8003518 <HAL_InitTick+0x54>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <HAL_InitTick+0x58>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034da:	fbb3 f3f1 	udiv	r3, r3, r1
 80034de:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fab5 	bl	8004a52 <HAL_SYSTICK_Config>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00e      	b.n	8003510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b0f      	cmp	r3, #15
 80034f6:	d80a      	bhi.n	800350e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f8:	2200      	movs	r2, #0
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f001 fa7d 	bl	80049fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003504:	4a06      	ldr	r2, [pc, #24]	; (8003520 <HAL_InitTick+0x5c>)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
}
 8003510:	4618      	mov	r0, r3
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000008 	.word	0x20000008
 800351c:	20000010 	.word	0x20000010
 8003520:	2000000c 	.word	0x2000000c

08003524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003528:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_IncTick+0x20>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <HAL_IncTick+0x24>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a04      	ldr	r2, [pc, #16]	; (8003548 <HAL_IncTick+0x24>)
 8003536:	6013      	str	r3, [r2, #0]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000010 	.word	0x20000010
 8003548:	200003e4 	.word	0x200003e4

0800354c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_GetTick+0x14>)
 8003552:	681b      	ldr	r3, [r3, #0]
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	200003e4 	.word	0x200003e4

08003564 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff ffee 	bl	800354c <HAL_GetTick>
 8003570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d005      	beq.n	800358a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_Delay+0x44>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800358a:	bf00      	nop
 800358c:	f7ff ffde 	bl	800354c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	429a      	cmp	r2, r3
 800359a:	d8f7      	bhi.n	800358c <HAL_Delay+0x28>
  {
  }
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000010 	.word	0x20000010

080035ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b09a      	sub	sp, #104	; 0x68
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e1e3      	b.n	80039bc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b00      	cmp	r3, #0
 8003604:	d176      	bne.n	80036f4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d152      	bne.n	80036b4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7ff fca3 	bl	8002f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d13b      	bne.n	80036b4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 ffe7 	bl	8004610 <ADC_Disable>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d12f      	bne.n	80036b4 <HAL_ADC_Init+0xe0>
 8003654:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003658:	2b00      	cmp	r3, #0
 800365a:	d12b      	bne.n	80036b4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003664:	f023 0302 	bic.w	r3, r3, #2
 8003668:	f043 0202 	orr.w	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800367e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800368e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003690:	4b92      	ldr	r3, [pc, #584]	; (80038dc <HAL_ADC_Init+0x308>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a92      	ldr	r2, [pc, #584]	; (80038e0 <HAL_ADC_Init+0x30c>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0c9a      	lsrs	r2, r3, #18
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036a6:	e002      	b.n	80036ae <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f9      	bne.n	80036a8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80036cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d0:	d110      	bne.n	80036f4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f023 0312 	bic.w	r3, r3, #18
 80036da:	f043 0210 	orr.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 8150 	bne.w	80039a2 <HAL_ADC_Init+0x3ce>
 8003702:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 814b 	bne.w	80039a2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 8143 	bne.w	80039a2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003724:	f043 0202 	orr.w	r2, r3, #2
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003734:	d004      	beq.n	8003740 <HAL_ADC_Init+0x16c>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6a      	ldr	r2, [pc, #424]	; (80038e4 <HAL_ADC_Init+0x310>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d101      	bne.n	8003744 <HAL_ADC_Init+0x170>
 8003740:	4b69      	ldr	r3, [pc, #420]	; (80038e8 <HAL_ADC_Init+0x314>)
 8003742:	e000      	b.n	8003746 <HAL_ADC_Init+0x172>
 8003744:	4b69      	ldr	r3, [pc, #420]	; (80038ec <HAL_ADC_Init+0x318>)
 8003746:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003750:	d102      	bne.n	8003758 <HAL_ADC_Init+0x184>
 8003752:	4b64      	ldr	r3, [pc, #400]	; (80038e4 <HAL_ADC_Init+0x310>)
 8003754:	60fb      	str	r3, [r7, #12]
 8003756:	e01a      	b.n	800378e <HAL_ADC_Init+0x1ba>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a61      	ldr	r2, [pc, #388]	; (80038e4 <HAL_ADC_Init+0x310>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d103      	bne.n	800376a <HAL_ADC_Init+0x196>
 8003762:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	e011      	b.n	800378e <HAL_ADC_Init+0x1ba>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a60      	ldr	r2, [pc, #384]	; (80038f0 <HAL_ADC_Init+0x31c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d102      	bne.n	800377a <HAL_ADC_Init+0x1a6>
 8003774:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <HAL_ADC_Init+0x320>)
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e009      	b.n	800378e <HAL_ADC_Init+0x1ba>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a5d      	ldr	r2, [pc, #372]	; (80038f4 <HAL_ADC_Init+0x320>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d102      	bne.n	800378a <HAL_ADC_Init+0x1b6>
 8003784:	4b5a      	ldr	r3, [pc, #360]	; (80038f0 <HAL_ADC_Init+0x31c>)
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e001      	b.n	800378e <HAL_ADC_Init+0x1ba>
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d108      	bne.n	80037ae <HAL_ADC_Init+0x1da>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_ADC_Init+0x1da>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_ADC_Init+0x1dc>
 80037ae:	2300      	movs	r3, #0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d11c      	bne.n	80037ee <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 0303 	and.w	r3, r3, #3
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d107      	bne.n	80037d6 <HAL_ADC_Init+0x202>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_Init+0x202>
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <HAL_ADC_Init+0x204>
 80037d6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d108      	bne.n	80037ee <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80037dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037ec:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7e5b      	ldrb	r3, [r3, #25]
 80037f2:	035b      	lsls	r3, r3, #13
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037f8:	2a01      	cmp	r2, #1
 80037fa:	d002      	beq.n	8003802 <HAL_ADC_Init+0x22e>
 80037fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003800:	e000      	b.n	8003804 <HAL_ADC_Init+0x230>
 8003802:	2200      	movs	r2, #0
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4313      	orrs	r3, r2
 8003812:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003814:	4313      	orrs	r3, r2
 8003816:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d11b      	bne.n	800385a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	7e5b      	ldrb	r3, [r3, #25]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	3b01      	subs	r3, #1
 8003830:	045a      	lsls	r2, r3, #17
 8003832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003834:	4313      	orrs	r3, r2
 8003836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383a:	663b      	str	r3, [r7, #96]	; 0x60
 800383c:	e00d      	b.n	800385a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f043 0201 	orr.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	2b01      	cmp	r3, #1
 8003860:	d054      	beq.n	800390c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a22      	ldr	r2, [pc, #136]	; (80038f0 <HAL_ADC_Init+0x31c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_ADC_Init+0x2a2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a20      	ldr	r2, [pc, #128]	; (80038f4 <HAL_ADC_Init+0x320>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d140      	bne.n	80038f8 <HAL_ADC_Init+0x324>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800387e:	d02a      	beq.n	80038d6 <HAL_ADC_Init+0x302>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003888:	d022      	beq.n	80038d0 <HAL_ADC_Init+0x2fc>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003892:	d01a      	beq.n	80038ca <HAL_ADC_Init+0x2f6>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 800389c:	d012      	beq.n	80038c4 <HAL_ADC_Init+0x2f0>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80038a6:	d00a      	beq.n	80038be <HAL_ADC_Init+0x2ea>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80038b0:	d002      	beq.n	80038b8 <HAL_ADC_Init+0x2e4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	e023      	b.n	8003900 <HAL_ADC_Init+0x32c>
 80038b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80038bc:	e020      	b.n	8003900 <HAL_ADC_Init+0x32c>
 80038be:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80038c2:	e01d      	b.n	8003900 <HAL_ADC_Init+0x32c>
 80038c4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80038c8:	e01a      	b.n	8003900 <HAL_ADC_Init+0x32c>
 80038ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ce:	e017      	b.n	8003900 <HAL_ADC_Init+0x32c>
 80038d0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80038d4:	e014      	b.n	8003900 <HAL_ADC_Init+0x32c>
 80038d6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80038da:	e011      	b.n	8003900 <HAL_ADC_Init+0x32c>
 80038dc:	20000008 	.word	0x20000008
 80038e0:	431bde83 	.word	0x431bde83
 80038e4:	50000100 	.word	0x50000100
 80038e8:	50000300 	.word	0x50000300
 80038ec:	50000700 	.word	0x50000700
 80038f0:	50000400 	.word	0x50000400
 80038f4:	50000500 	.word	0x50000500
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003904:	4313      	orrs	r3, r2
 8003906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003908:	4313      	orrs	r3, r2
 800390a:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b00      	cmp	r3, #0
 8003918:	d114      	bne.n	8003944 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003928:	f023 0302 	bic.w	r3, r3, #2
 800392c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	7e1b      	ldrb	r3, [r3, #24]
 8003932:	039a      	lsls	r2, r3, #14
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4313      	orrs	r3, r2
 800393e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003940:	4313      	orrs	r3, r2
 8003942:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <HAL_ADC_Init+0x3f0>)
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6812      	ldr	r2, [r2, #0]
 8003952:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003954:	430b      	orrs	r3, r1
 8003956:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10c      	bne.n	800397a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f023 010f 	bic.w	r1, r3, #15
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
 8003978:	e007      	b.n	800398a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 020f 	bic.w	r2, r2, #15
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f023 0303 	bic.w	r3, r3, #3
 8003998:	f043 0201 	orr.w	r2, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40
 80039a0:	e00a      	b.n	80039b8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f023 0312 	bic.w	r3, r3, #18
 80039aa:	f043 0210 	orr.w	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80039b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3768      	adds	r7, #104	; 0x68
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	fff0c007 	.word	0xfff0c007

080039c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 80f7 	bne.w	8003bd6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_ADC_Start_DMA+0x2e>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e0f2      	b.n	8003bdc <HAL_ADC_Start_DMA+0x214>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a06:	d004      	beq.n	8003a12 <HAL_ADC_Start_DMA+0x4a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a75      	ldr	r2, [pc, #468]	; (8003be4 <HAL_ADC_Start_DMA+0x21c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d109      	bne.n	8003a26 <HAL_ADC_Start_DMA+0x5e>
 8003a12:	4b75      	ldr	r3, [pc, #468]	; (8003be8 <HAL_ADC_Start_DMA+0x220>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bf0c      	ite	eq
 8003a1e:	2301      	moveq	r3, #1
 8003a20:	2300      	movne	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	e008      	b.n	8003a38 <HAL_ADC_Start_DMA+0x70>
 8003a26:	4b71      	ldr	r3, [pc, #452]	; (8003bec <HAL_ADC_Start_DMA+0x224>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	bf0c      	ite	eq
 8003a32:	2301      	moveq	r3, #1
 8003a34:	2300      	movne	r3, #0
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80c5 	beq.w	8003bc8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fd82 	bl	8004548 <ADC_Enable>
 8003a44:	4603      	mov	r3, r0
 8003a46:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 80b7 	bne.w	8003bbe <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a6c:	d004      	beq.n	8003a78 <HAL_ADC_Start_DMA+0xb0>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5c      	ldr	r2, [pc, #368]	; (8003be4 <HAL_ADC_Start_DMA+0x21c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d106      	bne.n	8003a86 <HAL_ADC_Start_DMA+0xbe>
 8003a78:	4b5b      	ldr	r3, [pc, #364]	; (8003be8 <HAL_ADC_Start_DMA+0x220>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <HAL_ADC_Start_DMA+0xde>
 8003a84:	e005      	b.n	8003a92 <HAL_ADC_Start_DMA+0xca>
 8003a86:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_ADC_Start_DMA+0x224>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_ADC_Start_DMA+0xde>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a9a:	d004      	beq.n	8003aa6 <HAL_ADC_Start_DMA+0xde>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a53      	ldr	r2, [pc, #332]	; (8003bf0 <HAL_ADC_Start_DMA+0x228>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d115      	bne.n	8003ad2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d036      	beq.n	8003b2e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ac8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003ad0:	e02d      	b.n	8003b2e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ae6:	d004      	beq.n	8003af2 <HAL_ADC_Start_DMA+0x12a>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a3d      	ldr	r2, [pc, #244]	; (8003be4 <HAL_ADC_Start_DMA+0x21c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d10a      	bne.n	8003b08 <HAL_ADC_Start_DMA+0x140>
 8003af2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	bf14      	ite	ne
 8003b00:	2301      	movne	r3, #1
 8003b02:	2300      	moveq	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e008      	b.n	8003b1a <HAL_ADC_Start_DMA+0x152>
 8003b08:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <HAL_ADC_Start_DMA+0x228>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3a:	d106      	bne.n	8003b4a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f023 0206 	bic.w	r2, r3, #6
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
 8003b48:	e002      	b.n	8003b50 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_ADC_Start_DMA+0x22c>)
 8003b5e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <HAL_ADC_Start_DMA+0x230>)
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <HAL_ADC_Start_DMA+0x234>)
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	221c      	movs	r2, #28
 8003b76:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0210 	orr.w	r2, r2, #16
 8003b86:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3340      	adds	r3, #64	; 0x40
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f000 ffa6 	bl	8004af8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0204 	orr.w	r2, r2, #4
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	e00d      	b.n	8003bda <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bc6:	e008      	b.n	8003bda <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003bd4:	e001      	b.n	8003bda <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	50000100 	.word	0x50000100
 8003be8:	50000300 	.word	0x50000300
 8003bec:	50000700 	.word	0x50000700
 8003bf0:	50000400 	.word	0x50000400
 8003bf4:	0800447d 	.word	0x0800447d
 8003bf8:	080044f7 	.word	0x080044f7
 8003bfc:	08004513 	.word	0x08004513

08003c00 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_Stop_DMA+0x1a>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e050      	b.n	8003cbc <HAL_ADC_Stop_DMA+0xbc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003c22:	216c      	movs	r1, #108	; 0x6c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fd59 	bl	80046dc <ADC_ConversionStop>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d13e      	bne.n	8003cb2 <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d10f      	bne.n	8003c70 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 ffae 	bl	8004bb6 <HAL_DMA_Abort>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0210 	bic.w	r2, r2, #16
 8003c7e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fcc2 	bl	8004610 <ADC_Disable>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e002      	b.n	8003c98 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fcbc 	bl	8004610 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b09b      	sub	sp, #108	; 0x6c
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_ADC_ConfigChannel+0x22>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e2c8      	b.n	8004278 <HAL_ADC_ConfigChannel+0x5b4>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 82ac 	bne.w	8004256 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d81c      	bhi.n	8003d40 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	461a      	mov	r2, r3
 8003d1a:	231f      	movs	r3, #31
 8003d1c:	4093      	lsls	r3, r2
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	4019      	ands	r1, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fa00 f203 	lsl.w	r2, r0, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d3e:	e063      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b09      	cmp	r3, #9
 8003d46:	d81e      	bhi.n	8003d86 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	3b1e      	subs	r3, #30
 8003d5c:	221f      	movs	r2, #31
 8003d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d62:	43db      	mvns	r3, r3
 8003d64:	4019      	ands	r1, r3
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	3b1e      	subs	r3, #30
 8003d78:	fa00 f203 	lsl.w	r2, r0, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	635a      	str	r2, [r3, #52]	; 0x34
 8003d84:	e040      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b0e      	cmp	r3, #14
 8003d8c:	d81e      	bhi.n	8003dcc <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	3b3c      	subs	r3, #60	; 0x3c
 8003da2:	221f      	movs	r2, #31
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	43db      	mvns	r3, r3
 8003daa:	4019      	ands	r1, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	3b3c      	subs	r3, #60	; 0x3c
 8003dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
 8003dca:	e01d      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	3b5a      	subs	r3, #90	; 0x5a
 8003de0:	221f      	movs	r2, #31
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	4019      	ands	r1, r3
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	6818      	ldr	r0, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4413      	add	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	3b5a      	subs	r3, #90	; 0x5a
 8003dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 80e5 	bne.w	8003fe2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b09      	cmp	r3, #9
 8003e1e:	d91c      	bls.n	8003e5a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6999      	ldr	r1, [r3, #24]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	3b1e      	subs	r3, #30
 8003e32:	2207      	movs	r2, #7
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	4019      	ands	r1, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	6898      	ldr	r0, [r3, #8]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	4413      	add	r3, r2
 8003e4a:	3b1e      	subs	r3, #30
 8003e4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	619a      	str	r2, [r3, #24]
 8003e58:	e019      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6959      	ldr	r1, [r3, #20]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	4413      	add	r3, r2
 8003e6a:	2207      	movs	r2, #7
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	4019      	ands	r1, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	6898      	ldr	r0, [r3, #8]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	fa00 f203 	lsl.w	r2, r0, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	08db      	lsrs	r3, r3, #3
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d84f      	bhi.n	8003f50 <HAL_ADC_ConfigChannel+0x28c>
 8003eb0:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <HAL_ADC_ConfigChannel+0x1f4>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003eeb 	.word	0x08003eeb
 8003ec0:	08003f0d 	.word	0x08003f0d
 8003ec4:	08003f2f 	.word	0x08003f2f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ece:	4b99      	ldr	r3, [pc, #612]	; (8004134 <HAL_ADC_ConfigChannel+0x470>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	0691      	lsls	r1, r2, #26
 8003ed8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003eda:	430a      	orrs	r2, r1
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ee6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003ee8:	e07b      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ef0:	4b90      	ldr	r3, [pc, #576]	; (8004134 <HAL_ADC_ConfigChannel+0x470>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	0691      	lsls	r1, r2, #26
 8003efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003efc:	430a      	orrs	r2, r1
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f08:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f0a:	e06a      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f12:	4b88      	ldr	r3, [pc, #544]	; (8004134 <HAL_ADC_ConfigChannel+0x470>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	0691      	lsls	r1, r2, #26
 8003f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f2a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f2c:	e059      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f34:	4b7f      	ldr	r3, [pc, #508]	; (8004134 <HAL_ADC_ConfigChannel+0x470>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	0691      	lsls	r1, r2, #26
 8003f3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f40:	430a      	orrs	r2, r1
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f4c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f4e:	e048      	b.n	8003fe2 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	069b      	lsls	r3, r3, #26
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	069b      	lsls	r3, r3, #26
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f96:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	069b      	lsls	r3, r3, #26
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fba:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	069b      	lsls	r3, r3, #26
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d107      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fde:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003fe0:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d108      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x33e>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_ConfigChannel+0x33e>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_ADC_ConfigChannel+0x340>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 8131 	bne.w	800426c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d00f      	beq.n	8004032 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43da      	mvns	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	400a      	ands	r2, r1
 800402c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004030:	e049      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	409a      	lsls	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b09      	cmp	r3, #9
 8004052:	d91c      	bls.n	800408e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6999      	ldr	r1, [r3, #24]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	3b1b      	subs	r3, #27
 8004066:	2207      	movs	r2, #7
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	4019      	ands	r1, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	6898      	ldr	r0, [r3, #8]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	3b1b      	subs	r3, #27
 8004080:	fa00 f203 	lsl.w	r2, r0, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	619a      	str	r2, [r3, #24]
 800408c:	e01b      	b.n	80040c6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6959      	ldr	r1, [r3, #20]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	2207      	movs	r2, #7
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43db      	mvns	r3, r3
 80040a8:	4019      	ands	r1, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	6898      	ldr	r0, [r3, #8]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	fa00 f203 	lsl.w	r2, r0, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040ce:	d004      	beq.n	80040da <HAL_ADC_ConfigChannel+0x416>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_ADC_ConfigChannel+0x474>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <HAL_ADC_ConfigChannel+0x41a>
 80040da:	4b18      	ldr	r3, [pc, #96]	; (800413c <HAL_ADC_ConfigChannel+0x478>)
 80040dc:	e000      	b.n	80040e0 <HAL_ADC_ConfigChannel+0x41c>
 80040de:	4b18      	ldr	r3, [pc, #96]	; (8004140 <HAL_ADC_ConfigChannel+0x47c>)
 80040e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d105      	bne.n	80040f6 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80040ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d015      	beq.n	8004122 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80040fa:	2b11      	cmp	r3, #17
 80040fc:	d105      	bne.n	800410a <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80040fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800410e:	2b12      	cmp	r3, #18
 8004110:	f040 80ac 	bne.w	800426c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800411c:	2b00      	cmp	r3, #0
 800411e:	f040 80a5 	bne.w	800426c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800412a:	d10b      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x480>
 800412c:	4b02      	ldr	r3, [pc, #8]	; (8004138 <HAL_ADC_ConfigChannel+0x474>)
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e023      	b.n	800417a <HAL_ADC_ConfigChannel+0x4b6>
 8004132:	bf00      	nop
 8004134:	83fff000 	.word	0x83fff000
 8004138:	50000100 	.word	0x50000100
 800413c:	50000300 	.word	0x50000300
 8004140:	50000700 	.word	0x50000700
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a4e      	ldr	r2, [pc, #312]	; (8004284 <HAL_ADC_ConfigChannel+0x5c0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d103      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x492>
 800414e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e011      	b.n	800417a <HAL_ADC_ConfigChannel+0x4b6>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4b      	ldr	r2, [pc, #300]	; (8004288 <HAL_ADC_ConfigChannel+0x5c4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d102      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x4a2>
 8004160:	4b4a      	ldr	r3, [pc, #296]	; (800428c <HAL_ADC_ConfigChannel+0x5c8>)
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	e009      	b.n	800417a <HAL_ADC_ConfigChannel+0x4b6>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a48      	ldr	r2, [pc, #288]	; (800428c <HAL_ADC_ConfigChannel+0x5c8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d102      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x4b2>
 8004170:	4b45      	ldr	r3, [pc, #276]	; (8004288 <HAL_ADC_ConfigChannel+0x5c4>)
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e001      	b.n	800417a <HAL_ADC_ConfigChannel+0x4b6>
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b01      	cmp	r3, #1
 8004186:	d108      	bne.n	800419a <HAL_ADC_ConfigChannel+0x4d6>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_ADC_ConfigChannel+0x4d6>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <HAL_ADC_ConfigChannel+0x4d8>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d150      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d010      	beq.n	80041c8 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d107      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x4fe>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d101      	bne.n	80041c2 <HAL_ADC_ConfigChannel+0x4fe>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x500>
 80041c2:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d13c      	bne.n	8004242 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d11d      	bne.n	800420c <HAL_ADC_ConfigChannel+0x548>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041d8:	d118      	bne.n	800420c <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80041da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e4:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041e6:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_ADC_ConfigChannel+0x5cc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2a      	ldr	r2, [pc, #168]	; (8004294 <HAL_ADC_ConfigChannel+0x5d0>)
 80041ec:	fba2 2303 	umull	r2, r3, r2, r3
 80041f0:	0c9a      	lsrs	r2, r3, #18
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80041fc:	e002      	b.n	8004204 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	3b01      	subs	r3, #1
 8004202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f9      	bne.n	80041fe <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800420a:	e02e      	b.n	800426a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b11      	cmp	r3, #17
 8004212:	d10b      	bne.n	800422c <HAL_ADC_ConfigChannel+0x568>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800421c:	d106      	bne.n	800422c <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800421e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004228:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800422a:	e01e      	b.n	800426a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b12      	cmp	r3, #18
 8004232:	d11a      	bne.n	800426a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800423c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800423e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004240:	e013      	b.n	800426a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004254:	e00a      	b.n	800426c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425a:	f043 0220 	orr.w	r2, r3, #32
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004268:	e000      	b.n	800426c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800426a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004278:	4618      	mov	r0, r3
 800427a:	376c      	adds	r7, #108	; 0x6c
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	50000100 	.word	0x50000100
 8004288:	50000400 	.word	0x50000400
 800428c:	50000500 	.word	0x50000500
 8004290:	20000008 	.word	0x20000008
 8004294:	431bde83 	.word	0x431bde83

08004298 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004298:	b480      	push	{r7}
 800429a:	b099      	sub	sp, #100	; 0x64
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b0:	d102      	bne.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80042b2:	4b6d      	ldr	r3, [pc, #436]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	e01a      	b.n	80042ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a6a      	ldr	r2, [pc, #424]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d103      	bne.n	80042ca <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80042c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	e011      	b.n	80042ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a67      	ldr	r2, [pc, #412]	; (800446c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d102      	bne.n	80042da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80042d4:	4b66      	ldr	r3, [pc, #408]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80042d6:	60bb      	str	r3, [r7, #8]
 80042d8:	e009      	b.n	80042ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a64      	ldr	r2, [pc, #400]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d102      	bne.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042e4:	4b61      	ldr	r3, [pc, #388]	; (800446c <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	e001      	b.n	80042ee <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0b0      	b.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004302:	2302      	movs	r3, #2
 8004304:	e0a9      	b.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 808d 	bne.w	8004438 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 8086 	bne.w	8004438 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004334:	d004      	beq.n	8004340 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a4b      	ldr	r2, [pc, #300]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d101      	bne.n	8004344 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004340:	4b4c      	ldr	r3, [pc, #304]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004342:	e000      	b.n	8004346 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004344:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004346:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d040      	beq.n	80043d2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6859      	ldr	r1, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004362:	035b      	lsls	r3, r3, #13
 8004364:	430b      	orrs	r3, r1
 8004366:	431a      	orrs	r2, r3
 8004368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800436a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	2b01      	cmp	r3, #1
 8004378:	d108      	bne.n	800438c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d15c      	bne.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80043ae:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d14b      	bne.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80043b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043bc:	f023 030f 	bic.w	r3, r3, #15
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	6811      	ldr	r1, [r2, #0]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	6892      	ldr	r2, [r2, #8]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	431a      	orrs	r2, r3
 80043cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043ce:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80043d0:	e03c      	b.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043dc:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d108      	bne.n	80043fe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d123      	bne.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d107      	bne.n	8004420 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004420:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	d112      	bne.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800442e:	f023 030f 	bic.w	r3, r3, #15
 8004432:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004434:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004436:	e009      	b.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800444a:	e000      	b.n	800444e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800444c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800445a:	4618      	mov	r0, r3
 800445c:	3764      	adds	r7, #100	; 0x64
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	50000100 	.word	0x50000100
 800446c:	50000400 	.word	0x50000400
 8004470:	50000500 	.word	0x50000500
 8004474:	50000300 	.word	0x50000300
 8004478:	50000700 	.word	0x50000700

0800447c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d126      	bne.n	80044e4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d115      	bne.n	80044dc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d111      	bne.n	80044dc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7fe f9ad 	bl	800283c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80044e2:	e004      	b.n	80044ee <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	4798      	blx	r3
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7ff f851 	bl	80035ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b084      	sub	sp, #16
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	f043 0204 	orr.w	r2, r3, #4
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff f841 	bl	80035c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d108      	bne.n	8004574 <ADC_Enable+0x2c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <ADC_Enable+0x2c>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <ADC_Enable+0x2e>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d143      	bne.n	8004602 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b22      	ldr	r3, [pc, #136]	; (800460c <ADC_Enable+0xc4>)
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	f043 0210 	orr.w	r2, r3, #16
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	f043 0201 	orr.w	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e02f      	b.n	8004604 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80045b4:	f7fe ffca 	bl	800354c <HAL_GetTick>
 80045b8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045ba:	e01b      	b.n	80045f4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045bc:	f7fe ffc6 	bl	800354c <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d914      	bls.n	80045f4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d00d      	beq.n	80045f4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f043 0210 	orr.w	r2, r3, #16
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	f043 0201 	orr.w	r2, r3, #1
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e007      	b.n	8004604 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d1dc      	bne.n	80045bc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	8000003f 	.word	0x8000003f

08004610 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <ADC_Disable+0x2c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <ADC_Disable+0x2c>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <ADC_Disable+0x2e>
 800463c:	2300      	movs	r3, #0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d047      	beq.n	80046d2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 030d 	and.w	r3, r3, #13
 800464c:	2b01      	cmp	r3, #1
 800464e:	d10f      	bne.n	8004670 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0202 	orr.w	r2, r2, #2
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2203      	movs	r2, #3
 8004666:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004668:	f7fe ff70 	bl	800354c <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800466e:	e029      	b.n	80046c4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	f043 0210 	orr.w	r2, r3, #16
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e023      	b.n	80046d4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800468c:	f7fe ff5e 	bl	800354c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d914      	bls.n	80046c4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10d      	bne.n	80046c4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f043 0210 	orr.w	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f043 0201 	orr.w	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e007      	b.n	80046d4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d0dc      	beq.n	800468c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 809b 	beq.w	8004838 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004710:	d12a      	bne.n	8004768 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004716:	2b01      	cmp	r3, #1
 8004718:	d126      	bne.n	8004768 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800471e:	2b01      	cmp	r3, #1
 8004720:	d122      	bne.n	8004768 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8004722:	230c      	movs	r3, #12
 8004724:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004726:	e014      	b.n	8004752 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4a46      	ldr	r2, [pc, #280]	; (8004844 <ADC_ConversionStop+0x168>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d90d      	bls.n	800474c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f043 0210 	orr.w	r2, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	f043 0201 	orr.w	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e076      	b.n	800483a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	3301      	adds	r3, #1
 8004750:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	d1e3      	bne.n	8004728 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2240      	movs	r2, #64	; 0x40
 8004766:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b60      	cmp	r3, #96	; 0x60
 800476c:	d015      	beq.n	800479a <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d10e      	bne.n	800479a <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004786:	2b00      	cmp	r3, #0
 8004788:	d107      	bne.n	800479a <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0210 	orr.w	r2, r2, #16
 8004798:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d015      	beq.n	80047cc <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d10e      	bne.n	80047cc <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d107      	bne.n	80047cc <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0220 	orr.w	r2, r2, #32
 80047ca:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b60      	cmp	r3, #96	; 0x60
 80047d0:	d005      	beq.n	80047de <ADC_ConversionStop+0x102>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b6c      	cmp	r3, #108	; 0x6c
 80047d6:	d105      	bne.n	80047e4 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80047d8:	230c      	movs	r3, #12
 80047da:	617b      	str	r3, [r7, #20]
        break;
 80047dc:	e005      	b.n	80047ea <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80047de:	2308      	movs	r3, #8
 80047e0:	617b      	str	r3, [r7, #20]
        break;
 80047e2:	e002      	b.n	80047ea <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80047e4:	2304      	movs	r3, #4
 80047e6:	617b      	str	r3, [r7, #20]
        break;
 80047e8:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80047ea:	f7fe feaf 	bl	800354c <HAL_GetTick>
 80047ee:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80047f0:	e01b      	b.n	800482a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80047f2:	f7fe feab 	bl	800354c <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b0b      	cmp	r3, #11
 80047fe:	d914      	bls.n	800482a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00d      	beq.n	800482a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0210 	orr.w	r2, r3, #16
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481e:	f043 0201 	orr.w	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e007      	b.n	800483a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	4013      	ands	r3, r2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1dc      	bne.n	80047f2 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	000993ff 	.word	0x000993ff

08004848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004858:	4b0c      	ldr	r3, [pc, #48]	; (800488c <__NVIC_SetPriorityGrouping+0x44>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004864:	4013      	ands	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004870:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800487a:	4a04      	ldr	r2, [pc, #16]	; (800488c <__NVIC_SetPriorityGrouping+0x44>)
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	60d3      	str	r3, [r2, #12]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	e000ed00 	.word	0xe000ed00

08004890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	0a1b      	lsrs	r3, r3, #8
 800489a:	f003 0307 	and.w	r3, r3, #7
}
 800489e:	4618      	mov	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000ed00 	.word	0xe000ed00

080048ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	db0b      	blt.n	80048d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	f003 021f 	and.w	r2, r3, #31
 80048c4:	4907      	ldr	r1, [pc, #28]	; (80048e4 <__NVIC_EnableIRQ+0x38>)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	2001      	movs	r0, #1
 80048ce:	fa00 f202 	lsl.w	r2, r0, r2
 80048d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	e000e100 	.word	0xe000e100

080048e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	db0a      	blt.n	8004912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	490c      	ldr	r1, [pc, #48]	; (8004934 <__NVIC_SetPriority+0x4c>)
 8004902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	440b      	add	r3, r1
 800490c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004910:	e00a      	b.n	8004928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	4908      	ldr	r1, [pc, #32]	; (8004938 <__NVIC_SetPriority+0x50>)
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	3b04      	subs	r3, #4
 8004920:	0112      	lsls	r2, r2, #4
 8004922:	b2d2      	uxtb	r2, r2
 8004924:	440b      	add	r3, r1
 8004926:	761a      	strb	r2, [r3, #24]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	e000e100 	.word	0xe000e100
 8004938:	e000ed00 	.word	0xe000ed00

0800493c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800493c:	b480      	push	{r7}
 800493e:	b089      	sub	sp, #36	; 0x24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f1c3 0307 	rsb	r3, r3, #7
 8004956:	2b04      	cmp	r3, #4
 8004958:	bf28      	it	cs
 800495a:	2304      	movcs	r3, #4
 800495c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3304      	adds	r3, #4
 8004962:	2b06      	cmp	r3, #6
 8004964:	d902      	bls.n	800496c <NVIC_EncodePriority+0x30>
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3b03      	subs	r3, #3
 800496a:	e000      	b.n	800496e <NVIC_EncodePriority+0x32>
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004970:	f04f 32ff 	mov.w	r2, #4294967295
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43da      	mvns	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	401a      	ands	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004984:	f04f 31ff 	mov.w	r1, #4294967295
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	fa01 f303 	lsl.w	r3, r1, r3
 800498e:	43d9      	mvns	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004994:	4313      	orrs	r3, r2
         );
}
 8004996:	4618      	mov	r0, r3
 8004998:	3724      	adds	r7, #36	; 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b4:	d301      	bcc.n	80049ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049b6:	2301      	movs	r3, #1
 80049b8:	e00f      	b.n	80049da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ba:	4a0a      	ldr	r2, [pc, #40]	; (80049e4 <SysTick_Config+0x40>)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3b01      	subs	r3, #1
 80049c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049c2:	210f      	movs	r1, #15
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	f7ff ff8e 	bl	80048e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <SysTick_Config+0x40>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049d2:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <SysTick_Config+0x40>)
 80049d4:	2207      	movs	r2, #7
 80049d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	e000e010 	.word	0xe000e010

080049e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff29 	bl	8004848 <__NVIC_SetPriorityGrouping>
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b086      	sub	sp, #24
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a10:	f7ff ff3e 	bl	8004890 <__NVIC_GetPriorityGrouping>
 8004a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68b9      	ldr	r1, [r7, #8]
 8004a1a:	6978      	ldr	r0, [r7, #20]
 8004a1c:	f7ff ff8e 	bl	800493c <NVIC_EncodePriority>
 8004a20:	4602      	mov	r2, r0
 8004a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a26:	4611      	mov	r1, r2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff ff5d 	bl	80048e8 <__NVIC_SetPriority>
}
 8004a2e:	bf00      	nop
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff ff31 	bl	80048ac <__NVIC_EnableIRQ>
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff ffa2 	bl	80049a4 <SysTick_Config>
 8004a60:	4603      	mov	r3, r0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e037      	b.n	8004af0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a96:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f97a 	bl	8004dcc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}  
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <HAL_DMA_Start_IT+0x20>
 8004b14:	2302      	movs	r3, #2
 8004b16:	e04a      	b.n	8004bae <HAL_DMA_Start_IT+0xb6>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d13a      	bne.n	8004ba0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0201 	bic.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 f90d 	bl	8004d6e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 020e 	orr.w	r2, r2, #14
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e00f      	b.n	8004b8e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 020a 	orr.w	r2, r2, #10
 8004b7c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0204 	bic.w	r2, r2, #4
 8004b8c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e005      	b.n	8004bac <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
 8004baa:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d008      	beq.n	8004bda <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e020      	b.n	8004c1c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 020e 	bic.w	r2, r2, #14
 8004be8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0201 	bic.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c02:	2101      	movs	r1, #1
 8004c04:	fa01 f202 	lsl.w	r2, r1, r2
 8004c08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	2204      	movs	r2, #4
 8004c46:	409a      	lsls	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d024      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x72>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f003 0304 	and.w	r3, r3, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d01f      	beq.n	8004c9a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0320 	and.w	r3, r3, #32
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d107      	bne.n	8004c78 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	2104      	movs	r1, #4
 8004c82:	fa01 f202 	lsl.w	r2, r1, r2
 8004c86:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d06a      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004c98:	e065      	b.n	8004d66 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d02c      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xdc>
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d027      	beq.n	8004d04 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10b      	bne.n	8004cda <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 020a 	bic.w	r2, r2, #10
 8004cd0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ce8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d035      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004d02:	e030      	b.n	8004d66 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d08:	2208      	movs	r2, #8
 8004d0a:	409a      	lsls	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d028      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x13e>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d023      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 020e 	bic.w	r2, r2, #14
 8004d2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d36:	2101      	movs	r1, #1
 8004d38:	fa01 f202 	lsl.w	r2, r1, r2
 8004d3c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	4798      	blx	r3
    }
  }
}  
 8004d64:	e7ff      	b.n	8004d66 <HAL_DMA_IRQHandler+0x13e>
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b085      	sub	sp, #20
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f202 	lsl.w	r2, r1, r2
 8004d8a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d108      	bne.n	8004dae <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004dac:	e007      	b.n	8004dbe <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	60da      	str	r2, [r3, #12]
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
	...

08004dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <DMA_CalcBaseAndBitshift+0x60>)
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d80f      	bhi.n	8004e00 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <DMA_CalcBaseAndBitshift+0x64>)
 8004de8:	4413      	add	r3, r2
 8004dea:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <DMA_CalcBaseAndBitshift+0x68>)
 8004dec:	fba2 2303 	umull	r2, r3, r2, r3
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	009a      	lsls	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a0f      	ldr	r2, [pc, #60]	; (8004e38 <DMA_CalcBaseAndBitshift+0x6c>)
 8004dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004dfe:	e00e      	b.n	8004e1e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <DMA_CalcBaseAndBitshift+0x70>)
 8004e08:	4413      	add	r3, r2
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <DMA_CalcBaseAndBitshift+0x68>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	009a      	lsls	r2, r3, #2
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a09      	ldr	r2, [pc, #36]	; (8004e40 <DMA_CalcBaseAndBitshift+0x74>)
 8004e1c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40020407 	.word	0x40020407
 8004e30:	bffdfff8 	.word	0xbffdfff8
 8004e34:	cccccccd 	.word	0xcccccccd
 8004e38:	40020000 	.word	0x40020000
 8004e3c:	bffdfbf8 	.word	0xbffdfbf8
 8004e40:	40020400 	.word	0x40020400

08004e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b087      	sub	sp, #28
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e52:	e160      	b.n	8005116 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2101      	movs	r1, #1
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e60:	4013      	ands	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8152 	beq.w	8005110 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d005      	beq.n	8004e84 <HAL_GPIO_Init+0x40>
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d130      	bne.n	8004ee6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	2203      	movs	r2, #3
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eba:	2201      	movs	r2, #1
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f003 0201 	and.w	r2, r3, #1
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d017      	beq.n	8004f22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	2203      	movs	r2, #3
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43db      	mvns	r3, r3
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4013      	ands	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d123      	bne.n	8004f76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	08da      	lsrs	r2, r3, #3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3208      	adds	r2, #8
 8004f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	08da      	lsrs	r2, r3, #3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3208      	adds	r2, #8
 8004f70:	6939      	ldr	r1, [r7, #16]
 8004f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	2203      	movs	r2, #3
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	43db      	mvns	r3, r3
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f003 0203 	and.w	r2, r3, #3
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f000 80ac 	beq.w	8005110 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb8:	4b5e      	ldr	r3, [pc, #376]	; (8005134 <HAL_GPIO_Init+0x2f0>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	4a5d      	ldr	r2, [pc, #372]	; (8005134 <HAL_GPIO_Init+0x2f0>)
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	6193      	str	r3, [r2, #24]
 8004fc4:	4b5b      	ldr	r3, [pc, #364]	; (8005134 <HAL_GPIO_Init+0x2f0>)
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fd0:	4a59      	ldr	r2, [pc, #356]	; (8005138 <HAL_GPIO_Init+0x2f4>)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f003 0303 	and.w	r3, r3, #3
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	220f      	movs	r2, #15
 8004fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fec:	43db      	mvns	r3, r3
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ffa:	d025      	beq.n	8005048 <HAL_GPIO_Init+0x204>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a4f      	ldr	r2, [pc, #316]	; (800513c <HAL_GPIO_Init+0x2f8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d01f      	beq.n	8005044 <HAL_GPIO_Init+0x200>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a4e      	ldr	r2, [pc, #312]	; (8005140 <HAL_GPIO_Init+0x2fc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d019      	beq.n	8005040 <HAL_GPIO_Init+0x1fc>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a4d      	ldr	r2, [pc, #308]	; (8005144 <HAL_GPIO_Init+0x300>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <HAL_GPIO_Init+0x1f8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a4c      	ldr	r2, [pc, #304]	; (8005148 <HAL_GPIO_Init+0x304>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00d      	beq.n	8005038 <HAL_GPIO_Init+0x1f4>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a4b      	ldr	r2, [pc, #300]	; (800514c <HAL_GPIO_Init+0x308>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <HAL_GPIO_Init+0x1f0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a4a      	ldr	r2, [pc, #296]	; (8005150 <HAL_GPIO_Init+0x30c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_GPIO_Init+0x1ec>
 800502c:	2306      	movs	r3, #6
 800502e:	e00c      	b.n	800504a <HAL_GPIO_Init+0x206>
 8005030:	2307      	movs	r3, #7
 8005032:	e00a      	b.n	800504a <HAL_GPIO_Init+0x206>
 8005034:	2305      	movs	r3, #5
 8005036:	e008      	b.n	800504a <HAL_GPIO_Init+0x206>
 8005038:	2304      	movs	r3, #4
 800503a:	e006      	b.n	800504a <HAL_GPIO_Init+0x206>
 800503c:	2303      	movs	r3, #3
 800503e:	e004      	b.n	800504a <HAL_GPIO_Init+0x206>
 8005040:	2302      	movs	r3, #2
 8005042:	e002      	b.n	800504a <HAL_GPIO_Init+0x206>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <HAL_GPIO_Init+0x206>
 8005048:	2300      	movs	r3, #0
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	f002 0203 	and.w	r2, r2, #3
 8005050:	0092      	lsls	r2, r2, #2
 8005052:	4093      	lsls	r3, r2
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800505a:	4937      	ldr	r1, [pc, #220]	; (8005138 <HAL_GPIO_Init+0x2f4>)
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	3302      	adds	r3, #2
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005068:	4b3a      	ldr	r3, [pc, #232]	; (8005154 <HAL_GPIO_Init+0x310>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	43db      	mvns	r3, r3
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800508c:	4a31      	ldr	r2, [pc, #196]	; (8005154 <HAL_GPIO_Init+0x310>)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005092:	4b30      	ldr	r3, [pc, #192]	; (8005154 <HAL_GPIO_Init+0x310>)
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	43db      	mvns	r3, r3
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4013      	ands	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80050ae:	693a      	ldr	r2, [r7, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80050b6:	4a27      	ldr	r2, [pc, #156]	; (8005154 <HAL_GPIO_Init+0x310>)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050bc:	4b25      	ldr	r3, [pc, #148]	; (8005154 <HAL_GPIO_Init+0x310>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	43db      	mvns	r3, r3
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4313      	orrs	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_GPIO_Init+0x310>)
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <HAL_GPIO_Init+0x310>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	43db      	mvns	r3, r3
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4013      	ands	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800510a:	4a12      	ldr	r2, [pc, #72]	; (8005154 <HAL_GPIO_Init+0x310>)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3301      	adds	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	f47f ae97 	bne.w	8004e54 <HAL_GPIO_Init+0x10>
  }
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40021000 	.word	0x40021000
 8005138:	40010000 	.word	0x40010000
 800513c:	48000400 	.word	0x48000400
 8005140:	48000800 	.word	0x48000800
 8005144:	48000c00 	.word	0x48000c00
 8005148:	48001000 	.word	0x48001000
 800514c:	48001400 	.word	0x48001400
 8005150:	48001800 	.word	0x48001800
 8005154:	40010400 	.word	0x40010400

08005158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	460b      	mov	r3, r1
 8005162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691a      	ldr	r2, [r3, #16]
 8005168:	887b      	ldrh	r3, [r7, #2]
 800516a:	4013      	ands	r3, r2
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
 8005174:	e001      	b.n	800517a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	807b      	strh	r3, [r7, #2]
 8005194:	4613      	mov	r3, r2
 8005196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005198:	787b      	ldrb	r3, [r7, #1]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800519e:	887a      	ldrh	r2, [r7, #2]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051a4:	e002      	b.n	80051ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051c2:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	88fb      	ldrh	r3, [r7, #6]
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d006      	beq.n	80051dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051ce:	4a05      	ldr	r2, [pc, #20]	; (80051e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd fa76 	bl	80026c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40010400 	.word	0x40010400

080051e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e081      	b.n	80052fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fd ff18 	bl	8003044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	; 0x24
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0201 	bic.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005238:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005248:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d107      	bne.n	8005262 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	e006      	b.n	8005270 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800526e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b02      	cmp	r3, #2
 8005276:	d104      	bne.n	8005282 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005280:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005294:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69d9      	ldr	r1, [r3, #28]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0201 	orr.w	r2, r2, #1
 80052de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	607a      	str	r2, [r7, #4]
 8005312:	461a      	mov	r2, r3
 8005314:	460b      	mov	r3, r1
 8005316:	817b      	strh	r3, [r7, #10]
 8005318:	4613      	mov	r3, r2
 800531a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b20      	cmp	r3, #32
 8005326:	f040 80da 	bne.w	80054de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005330:	2b01      	cmp	r3, #1
 8005332:	d101      	bne.n	8005338 <HAL_I2C_Master_Transmit+0x30>
 8005334:	2302      	movs	r3, #2
 8005336:	e0d3      	b.n	80054e0 <HAL_I2C_Master_Transmit+0x1d8>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005340:	f7fe f904 	bl	800354c <HAL_GetTick>
 8005344:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	2319      	movs	r3, #25
 800534c:	2201      	movs	r2, #1
 800534e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f8f0 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e0be      	b.n	80054e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2221      	movs	r2, #33	; 0x21
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2210      	movs	r2, #16
 800536e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	893a      	ldrh	r2, [r7, #8]
 8005382:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	2bff      	cmp	r3, #255	; 0xff
 8005392:	d90e      	bls.n	80053b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	22ff      	movs	r2, #255	; 0xff
 8005398:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	8979      	ldrh	r1, [r7, #10]
 80053a2:	4b51      	ldr	r3, [pc, #324]	; (80054e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fa7e 	bl	80058ac <I2C_TransferConfig>
 80053b0:	e06c      	b.n	800548c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	8979      	ldrh	r1, [r7, #10]
 80053c4:	4b48      	ldr	r3, [pc, #288]	; (80054e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 fa6d 	bl	80058ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80053d2:	e05b      	b.n	800548c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	6a39      	ldr	r1, [r7, #32]
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f000 f8fc 	bl	80055d6 <I2C_WaitOnTXISFlagUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e07b      	b.n	80054e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d034      	beq.n	800548c <HAL_I2C_Master_Transmit+0x184>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	2b00      	cmp	r3, #0
 8005428:	d130      	bne.n	800548c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	2200      	movs	r2, #0
 8005432:	2180      	movs	r1, #128	; 0x80
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f87f 	bl	8005538 <I2C_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e04d      	b.n	80054e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	2bff      	cmp	r3, #255	; 0xff
 800544c:	d90e      	bls.n	800546c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	22ff      	movs	r2, #255	; 0xff
 8005452:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005458:	b2da      	uxtb	r2, r3
 800545a:	8979      	ldrh	r1, [r7, #10]
 800545c:	2300      	movs	r3, #0
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f000 fa21 	bl	80058ac <I2C_TransferConfig>
 800546a:	e00f      	b.n	800548c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547a:	b2da      	uxtb	r2, r3
 800547c:	8979      	ldrh	r1, [r7, #10]
 800547e:	2300      	movs	r3, #0
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fa10 	bl	80058ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d19e      	bne.n	80053d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f8e2 	bl	8005664 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e01a      	b.n	80054e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2220      	movs	r2, #32
 80054b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	6859      	ldr	r1, [r3, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_I2C_Master_Transmit+0x1e4>)
 80054be:	400b      	ands	r3, r1
 80054c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
  }
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3718      	adds	r7, #24
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	80002000 	.word	0x80002000
 80054ec:	fe00e800 	.word	0xfe00e800

080054f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b02      	cmp	r3, #2
 8005504:	d103      	bne.n	800550e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2200      	movs	r2, #0
 800550c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b01      	cmp	r3, #1
 800551a:	d007      	beq.n	800552c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	619a      	str	r2, [r3, #24]
  }
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005548:	e031      	b.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d02d      	beq.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7fd fffb 	bl	800354c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d302      	bcc.n	8005568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d122      	bne.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4013      	ands	r3, r2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	429a      	cmp	r2, r3
 8005576:	bf0c      	ite	eq
 8005578:	2301      	moveq	r3, #1
 800557a:	2300      	movne	r3, #0
 800557c:	b2db      	uxtb	r3, r3
 800557e:	461a      	mov	r2, r3
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	429a      	cmp	r2, r3
 8005584:	d113      	bne.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e00f      	b.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4013      	ands	r3, r2
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	bf0c      	ite	eq
 80055be:	2301      	moveq	r3, #1
 80055c0:	2300      	movne	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	79fb      	ldrb	r3, [r7, #7]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d0be      	beq.n	800554a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055e2:	e033      	b.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f87f 	bl	80056ec <I2C_IsErrorOccurred>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e031      	b.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fe:	d025      	beq.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005600:	f7fd ffa4 	bl	800354c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	d302      	bcc.n	8005616 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d11a      	bne.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699b      	ldr	r3, [r3, #24]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b02      	cmp	r3, #2
 8005622:	d013      	beq.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005628:	f043 0220 	orr.w	r2, r3, #32
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e007      	b.n	800565c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b02      	cmp	r3, #2
 8005658:	d1c4      	bne.n	80055e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005670:	e02f      	b.n	80056d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 f838 	bl	80056ec <I2C_IsErrorOccurred>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e02d      	b.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005686:	f7fd ff61 	bl	800354c <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	d302      	bcc.n	800569c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d11a      	bne.n	80056d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d013      	beq.n	80056d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e007      	b.n	80056e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b20      	cmp	r3, #32
 80056de:	d1c8      	bne.n	8005672 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08a      	sub	sp, #40	; 0x28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005706:	2300      	movs	r3, #0
 8005708:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b00      	cmp	r3, #0
 8005716:	d068      	beq.n	80057ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2210      	movs	r2, #16
 800571e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005720:	e049      	b.n	80057b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005728:	d045      	beq.n	80057b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fd ff0f 	bl	800354c <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <I2C_IsErrorOccurred+0x54>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d13a      	bne.n	80057b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800574a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005752:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800575e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005762:	d121      	bne.n	80057a8 <I2C_IsErrorOccurred+0xbc>
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800576a:	d01d      	beq.n	80057a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	2b20      	cmp	r3, #32
 8005770:	d01a      	beq.n	80057a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005780:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005782:	f7fd fee3 	bl	800354c <HAL_GetTick>
 8005786:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005788:	e00e      	b.n	80057a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800578a:	f7fd fedf 	bl	800354c <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b19      	cmp	r3, #25
 8005796:	d907      	bls.n	80057a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	f043 0320 	orr.w	r3, r3, #32
 800579e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80057a6:	e006      	b.n	80057b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d1e9      	bne.n	800578a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d003      	beq.n	80057cc <I2C_IsErrorOccurred+0xe0>
 80057c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d0aa      	beq.n	8005722 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80057cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2220      	movs	r2, #32
 80057da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	f043 0304 	orr.w	r3, r3, #4
 80057e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00b      	beq.n	8005814 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80057fc:	6a3b      	ldr	r3, [r7, #32]
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800580c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	f043 0308 	orr.w	r3, r3, #8
 8005824:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800582e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00b      	beq.n	8005858 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	f043 0302 	orr.w	r3, r3, #2
 8005846:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01c      	beq.n	800589a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fe45 	bl	80054f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	4b0d      	ldr	r3, [pc, #52]	; (80058a8 <I2C_IsErrorOccurred+0x1bc>)
 8005872:	400b      	ands	r3, r1
 8005874:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	431a      	orrs	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800589a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3728      	adds	r7, #40	; 0x28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	fe00e800 	.word	0xfe00e800

080058ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	607b      	str	r3, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	817b      	strh	r3, [r7, #10]
 80058ba:	4613      	mov	r3, r2
 80058bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058be:	897b      	ldrh	r3, [r7, #10]
 80058c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058c4:	7a7b      	ldrb	r3, [r7, #9]
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80058d2:	6a3b      	ldr	r3, [r7, #32]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	0d5b      	lsrs	r3, r3, #21
 80058e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80058ea:	4b08      	ldr	r3, [pc, #32]	; (800590c <I2C_TransferConfig+0x60>)
 80058ec:	430b      	orrs	r3, r1
 80058ee:	43db      	mvns	r3, r3
 80058f0:	ea02 0103 	and.w	r1, r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80058fe:	bf00      	nop
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	03ff63ff 	.word	0x03ff63ff

08005910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b20      	cmp	r3, #32
 8005924:	d138      	bne.n	8005998 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005930:	2302      	movs	r3, #2
 8005932:	e032      	b.n	800599a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2224      	movs	r2, #36	; 0x24
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0201 	bic.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005962:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f042 0201 	orr.w	r2, r2, #1
 8005982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d139      	bne.n	8005a30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e033      	b.n	8005a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2224      	movs	r2, #36	; 0x24
 80059d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a50:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	f001 b83a 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005a6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 816f 	beq.w	8005d5a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a7c:	4bb5      	ldr	r3, [pc, #724]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 030c 	and.w	r3, r3, #12
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d00c      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005a88:	4bb2      	ldr	r3, [pc, #712]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d15c      	bne.n	8005b4e <HAL_RCC_OscConfig+0x10e>
 8005a94:	4baf      	ldr	r3, [pc, #700]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aa0:	d155      	bne.n	8005b4e <HAL_RCC_OscConfig+0x10e>
 8005aa2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aa6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aaa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005aae:	fa93 f3a3 	rbit	r3, r3
 8005ab2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005ab6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aba:	fab3 f383 	clz	r3, r3
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f043 0301 	orr.w	r3, r3, #1
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d102      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x94>
 8005ace:	4ba1      	ldr	r3, [pc, #644]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	e015      	b.n	8005b00 <HAL_RCC_OscConfig+0xc0>
 8005ad4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005ad8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005adc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8005ae0:	fa93 f3a3 	rbit	r3, r3
 8005ae4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005aec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005af0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8005af4:	fa93 f3a3 	rbit	r3, r3
 8005af8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005afc:	4b95      	ldr	r3, [pc, #596]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005b04:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005b08:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8005b0c:	fa92 f2a2 	rbit	r2, r2
 8005b10:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8005b14:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005b18:	fab2 f282 	clz	r2, r2
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	f042 0220 	orr.w	r2, r2, #32
 8005b22:	b2d2      	uxtb	r2, r2
 8005b24:	f002 021f 	and.w	r2, r2, #31
 8005b28:	2101      	movs	r1, #1
 8005b2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8111 	beq.w	8005d58 <HAL_RCC_OscConfig+0x318>
 8005b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f040 8108 	bne.w	8005d58 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f000 bfc6 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5e:	d106      	bne.n	8005b6e <HAL_RCC_OscConfig+0x12e>
 8005b60:	4b7c      	ldr	r3, [pc, #496]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a7b      	ldr	r2, [pc, #492]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e036      	b.n	8005bdc <HAL_RCC_OscConfig+0x19c>
 8005b6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10c      	bne.n	8005b98 <HAL_RCC_OscConfig+0x158>
 8005b7e:	4b75      	ldr	r3, [pc, #468]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a74      	ldr	r2, [pc, #464]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	4b72      	ldr	r3, [pc, #456]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a71      	ldr	r2, [pc, #452]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005b90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b94:	6013      	str	r3, [r2, #0]
 8005b96:	e021      	b.n	8005bdc <HAL_RCC_OscConfig+0x19c>
 8005b98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005b9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ba8:	d10c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x184>
 8005baa:	4b6a      	ldr	r3, [pc, #424]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a69      	ldr	r2, [pc, #420]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	4b67      	ldr	r3, [pc, #412]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a66      	ldr	r2, [pc, #408]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e00b      	b.n	8005bdc <HAL_RCC_OscConfig+0x19c>
 8005bc4:	4b63      	ldr	r3, [pc, #396]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a62      	ldr	r2, [pc, #392]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	4b60      	ldr	r3, [pc, #384]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a5f      	ldr	r2, [pc, #380]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bda:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005be0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d059      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bec:	f7fd fcae 	bl	800354c <HAL_GetTick>
 8005bf0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf4:	e00a      	b.n	8005c0c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf6:	f7fd fca9 	bl	800354c <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b64      	cmp	r3, #100	; 0x64
 8005c04:	d902      	bls.n	8005c0c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	f000 bf67 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>
 8005c0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c10:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c14:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8005c18:	fa93 f3a3 	rbit	r3, r3
 8005c1c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8005c20:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c24:	fab3 f383 	clz	r3, r3
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	095b      	lsrs	r3, r3, #5
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d102      	bne.n	8005c3e <HAL_RCC_OscConfig+0x1fe>
 8005c38:	4b46      	ldr	r3, [pc, #280]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	e015      	b.n	8005c6a <HAL_RCC_OscConfig+0x22a>
 8005c3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c42:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8005c4a:	fa93 f3a3 	rbit	r3, r3
 8005c4e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005c52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005c56:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8005c5a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8005c5e:	fa93 f3a3 	rbit	r3, r3
 8005c62:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005c66:	4b3b      	ldr	r3, [pc, #236]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c6e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005c72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005c76:	fa92 f2a2 	rbit	r2, r2
 8005c7a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8005c7e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8005c82:	fab2 f282 	clz	r2, r2
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	f042 0220 	orr.w	r2, r2, #32
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	f002 021f 	and.w	r2, r2, #31
 8005c92:	2101      	movs	r1, #1
 8005c94:	fa01 f202 	lsl.w	r2, r1, r2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0ab      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x1b6>
 8005c9e:	e05c      	b.n	8005d5a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca0:	f7fd fc54 	bl	800354c <HAL_GetTick>
 8005ca4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca8:	e00a      	b.n	8005cc0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005caa:	f7fd fc4f 	bl	800354c <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	; 0x64
 8005cb8:	d902      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	f000 bf0d 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>
 8005cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cc4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005ccc:	fa93 f3a3 	rbit	r3, r3
 8005cd0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005cd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd8:	fab3 f383 	clz	r3, r3
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d102      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x2b2>
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	e015      	b.n	8005d1e <HAL_RCC_OscConfig+0x2de>
 8005cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005cf6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cfa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8005cfe:	fa93 f3a3 	rbit	r3, r3
 8005d02:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005d06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005d0a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8005d0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8005d12:	fa93 f3a3 	rbit	r3, r3
 8005d16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <HAL_RCC_OscConfig+0x314>)
 8005d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d22:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005d26:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8005d2a:	fa92 f2a2 	rbit	r2, r2
 8005d2e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8005d32:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005d36:	fab2 f282 	clz	r2, r2
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	f042 0220 	orr.w	r2, r2, #32
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	f002 021f 	and.w	r2, r2, #31
 8005d46:	2101      	movs	r1, #1
 8005d48:	fa01 f202 	lsl.w	r2, r1, r2
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1ab      	bne.n	8005caa <HAL_RCC_OscConfig+0x26a>
 8005d52:	e002      	b.n	8005d5a <HAL_RCC_OscConfig+0x31a>
 8005d54:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005d5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 817f 	beq.w	800606e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005d70:	4ba7      	ldr	r3, [pc, #668]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f003 030c 	and.w	r3, r3, #12
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00c      	beq.n	8005d96 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005d7c:	4ba4      	ldr	r3, [pc, #656]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f003 030c 	and.w	r3, r3, #12
 8005d84:	2b08      	cmp	r3, #8
 8005d86:	d173      	bne.n	8005e70 <HAL_RCC_OscConfig+0x430>
 8005d88:	4ba1      	ldr	r3, [pc, #644]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d94:	d16c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x430>
 8005d96:	2302      	movs	r3, #2
 8005d98:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d9c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005da0:	fa93 f3a3 	rbit	r3, r3
 8005da4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8005da8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dac:	fab3 f383 	clz	r3, r3
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	095b      	lsrs	r3, r3, #5
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f043 0301 	orr.w	r3, r3, #1
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d102      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x386>
 8005dc0:	4b93      	ldr	r3, [pc, #588]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	e013      	b.n	8005dee <HAL_RCC_OscConfig+0x3ae>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dcc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005dd0:	fa93 f3a3 	rbit	r3, r3
 8005dd4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005dd8:	2302      	movs	r3, #2
 8005dda:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005dde:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005de2:	fa93 f3a3 	rbit	r3, r3
 8005de6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005dea:	4b89      	ldr	r3, [pc, #548]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	2202      	movs	r2, #2
 8005df0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005df4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8005df8:	fa92 f2a2 	rbit	r2, r2
 8005dfc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005e00:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005e04:	fab2 f282 	clz	r2, r2
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	f042 0220 	orr.w	r2, r2, #32
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	f002 021f 	and.w	r2, r2, #31
 8005e14:	2101      	movs	r1, #1
 8005e16:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCC_OscConfig+0x3f6>
 8005e20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e24:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d002      	beq.n	8005e36 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	f000 be52 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e36:	4b76      	ldr	r3, [pc, #472]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	21f8      	movs	r1, #248	; 0xf8
 8005e4c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e50:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8005e54:	fa91 f1a1 	rbit	r1, r1
 8005e58:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8005e5c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005e60:	fab1 f181 	clz	r1, r1
 8005e64:	b2c9      	uxtb	r1, r1
 8005e66:	408b      	lsls	r3, r1
 8005e68:	4969      	ldr	r1, [pc, #420]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6e:	e0fe      	b.n	800606e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005e74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8088 	beq.w	8005f92 <HAL_RCC_OscConfig+0x552>
 8005e82:	2301      	movs	r3, #1
 8005e84:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e88:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e8c:	fa93 f3a3 	rbit	r3, r3
 8005e90:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005e94:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e98:	fab3 f383 	clz	r3, r3
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005ea2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	2301      	movs	r3, #1
 8005eac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eae:	f7fd fb4d 	bl	800354c <HAL_GetTick>
 8005eb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eb6:	e00a      	b.n	8005ece <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005eb8:	f7fd fb48 	bl	800354c <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d902      	bls.n	8005ece <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	f000 be06 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005ed8:	fa93 f3a3 	rbit	r3, r3
 8005edc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005ee0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ee4:	fab3 f383 	clz	r3, r3
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	095b      	lsrs	r3, r3, #5
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d102      	bne.n	8005efe <HAL_RCC_OscConfig+0x4be>
 8005ef8:	4b45      	ldr	r3, [pc, #276]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	e013      	b.n	8005f26 <HAL_RCC_OscConfig+0x4e6>
 8005efe:	2302      	movs	r3, #2
 8005f00:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f04:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005f08:	fa93 f3a3 	rbit	r3, r3
 8005f0c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005f10:	2302      	movs	r3, #2
 8005f12:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005f16:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005f1a:	fa93 f3a3 	rbit	r3, r3
 8005f1e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005f22:	4b3b      	ldr	r3, [pc, #236]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	2202      	movs	r2, #2
 8005f28:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005f2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005f30:	fa92 f2a2 	rbit	r2, r2
 8005f34:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005f38:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005f3c:	fab2 f282 	clz	r2, r2
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	f042 0220 	orr.w	r2, r2, #32
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	f002 021f 	and.w	r2, r2, #31
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d0af      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f58:	4b2d      	ldr	r3, [pc, #180]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005f64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	21f8      	movs	r1, #248	; 0xf8
 8005f6e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005f76:	fa91 f1a1 	rbit	r1, r1
 8005f7a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005f7e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005f82:	fab1 f181 	clz	r1, r1
 8005f86:	b2c9      	uxtb	r1, r1
 8005f88:	408b      	lsls	r3, r1
 8005f8a:	4921      	ldr	r1, [pc, #132]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]
 8005f90:	e06d      	b.n	800606e <HAL_RCC_OscConfig+0x62e>
 8005f92:	2301      	movs	r3, #1
 8005f94:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f98:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005f9c:	fa93 f3a3 	rbit	r3, r3
 8005fa0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005fa4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa8:	fab3 f383 	clz	r3, r3
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005fb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	2300      	movs	r3, #0
 8005fbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbe:	f7fd fac5 	bl	800354c <HAL_GetTick>
 8005fc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc6:	e00a      	b.n	8005fde <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fc8:	f7fd fac0 	bl	800354c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d902      	bls.n	8005fde <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	f000 bd7e 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005fe8:	fa93 f3a3 	rbit	r3, r3
 8005fec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005ff0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ff4:	fab3 f383 	clz	r3, r3
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d105      	bne.n	8006014 <HAL_RCC_OscConfig+0x5d4>
 8006008:	4b01      	ldr	r3, [pc, #4]	; (8006010 <HAL_RCC_OscConfig+0x5d0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	e016      	b.n	800603c <HAL_RCC_OscConfig+0x5fc>
 800600e:	bf00      	nop
 8006010:	40021000 	.word	0x40021000
 8006014:	2302      	movs	r3, #2
 8006016:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601e:	fa93 f3a3 	rbit	r3, r3
 8006022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006026:	2302      	movs	r3, #2
 8006028:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800602c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006030:	fa93 f3a3 	rbit	r3, r3
 8006034:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006038:	4bbf      	ldr	r3, [pc, #764]	; (8006338 <HAL_RCC_OscConfig+0x8f8>)
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	2202      	movs	r2, #2
 800603e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006042:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006046:	fa92 f2a2 	rbit	r2, r2
 800604a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800604e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006052:	fab2 f282 	clz	r2, r2
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	f042 0220 	orr.w	r2, r2, #32
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	f002 021f 	and.w	r2, r2, #31
 8006062:	2101      	movs	r1, #1
 8006064:	fa01 f202 	lsl.w	r2, r1, r2
 8006068:	4013      	ands	r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1ac      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800606e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006072:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0308 	and.w	r3, r3, #8
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 8113 	beq.w	80062aa <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006088:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d07c      	beq.n	800618e <HAL_RCC_OscConfig+0x74e>
 8006094:	2301      	movs	r3, #1
 8006096:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800609e:	fa93 f3a3 	rbit	r3, r3
 80060a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80060a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060aa:	fab3 f383 	clz	r3, r3
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	4ba2      	ldr	r3, [pc, #648]	; (800633c <HAL_RCC_OscConfig+0x8fc>)
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	461a      	mov	r2, r3
 80060ba:	2301      	movs	r3, #1
 80060bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060be:	f7fd fa45 	bl	800354c <HAL_GetTick>
 80060c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c6:	e00a      	b.n	80060de <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c8:	f7fd fa40 	bl	800354c <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d902      	bls.n	80060de <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	f000 bcfe 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>
 80060de:	2302      	movs	r3, #2
 80060e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e8:	fa93 f2a3 	rbit	r2, r3
 80060ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060f0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80060f4:	601a      	str	r2, [r3, #0]
 80060f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80060fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80060fe:	2202      	movs	r2, #2
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	fa93 f2a3 	rbit	r2, r3
 8006110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800611e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006122:	2202      	movs	r2, #2
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800612a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	fa93 f2a3 	rbit	r2, r3
 8006134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006138:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800613c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800613e:	4b7e      	ldr	r3, [pc, #504]	; (8006338 <HAL_RCC_OscConfig+0x8f8>)
 8006140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006142:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006146:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800614a:	2102      	movs	r1, #2
 800614c:	6019      	str	r1, [r3, #0]
 800614e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006152:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	fa93 f1a3 	rbit	r1, r3
 800615c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006160:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006164:	6019      	str	r1, [r3, #0]
  return result;
 8006166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800616a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	fab3 f383 	clz	r3, r3
 8006174:	b2db      	uxtb	r3, r3
 8006176:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800617a:	b2db      	uxtb	r3, r3
 800617c:	f003 031f 	and.w	r3, r3, #31
 8006180:	2101      	movs	r1, #1
 8006182:	fa01 f303 	lsl.w	r3, r1, r3
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d09d      	beq.n	80060c8 <HAL_RCC_OscConfig+0x688>
 800618c:	e08d      	b.n	80062aa <HAL_RCC_OscConfig+0x86a>
 800618e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006192:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006196:	2201      	movs	r2, #1
 8006198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800619e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	fa93 f2a3 	rbit	r2, r3
 80061a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061ac:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80061b0:	601a      	str	r2, [r3, #0]
  return result;
 80061b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061b6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80061ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061bc:	fab3 f383 	clz	r3, r3
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	461a      	mov	r2, r3
 80061c4:	4b5d      	ldr	r3, [pc, #372]	; (800633c <HAL_RCC_OscConfig+0x8fc>)
 80061c6:	4413      	add	r3, r2
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	461a      	mov	r2, r3
 80061cc:	2300      	movs	r3, #0
 80061ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d0:	f7fd f9bc 	bl	800354c <HAL_GetTick>
 80061d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061da:	f7fd f9b7 	bl	800354c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d902      	bls.n	80061f0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	f000 bc75 	b.w	8006ada <HAL_RCC_OscConfig+0x109a>
 80061f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80061f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80061f8:	2202      	movs	r2, #2
 80061fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006200:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	fa93 f2a3 	rbit	r2, r3
 800620a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800620e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800621c:	2202      	movs	r2, #2
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	fa93 f2a3 	rbit	r2, r3
 800622e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800623c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006240:	2202      	movs	r2, #2
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006248:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	fa93 f2a3 	rbit	r2, r3
 8006252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006256:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800625a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800625c:	4b36      	ldr	r3, [pc, #216]	; (8006338 <HAL_RCC_OscConfig+0x8f8>)
 800625e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006264:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006268:	2102      	movs	r1, #2
 800626a:	6019      	str	r1, [r3, #0]
 800626c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006270:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	fa93 f1a3 	rbit	r1, r3
 800627a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800627e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006282:	6019      	str	r1, [r3, #0]
  return result;
 8006284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006288:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	fab3 f383 	clz	r3, r3
 8006292:	b2db      	uxtb	r3, r3
 8006294:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006298:	b2db      	uxtb	r3, r3
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	2101      	movs	r1, #1
 80062a0:	fa01 f303 	lsl.w	r3, r1, r3
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d197      	bne.n	80061da <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062ae:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0304 	and.w	r3, r3, #4
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	f000 81a5 	beq.w	800660a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062c0:	2300      	movs	r3, #0
 80062c2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062c6:	4b1c      	ldr	r3, [pc, #112]	; (8006338 <HAL_RCC_OscConfig+0x8f8>)
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d116      	bne.n	8006300 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d2:	4b19      	ldr	r3, [pc, #100]	; (8006338 <HAL_RCC_OscConfig+0x8f8>)
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	4a18      	ldr	r2, [pc, #96]	; (8006338 <HAL_RCC_OscConfig+0x8f8>)
 80062d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062dc:	61d3      	str	r3, [r2, #28]
 80062de:	4b16      	ldr	r3, [pc, #88]	; (8006338 <HAL_RCC_OscConfig+0x8f8>)
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80062e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80062f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80062f8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <HAL_RCC_OscConfig+0x900>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006308:	2b00      	cmp	r3, #0
 800630a:	d121      	bne.n	8006350 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800630c:	4b0c      	ldr	r3, [pc, #48]	; (8006340 <HAL_RCC_OscConfig+0x900>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0b      	ldr	r2, [pc, #44]	; (8006340 <HAL_RCC_OscConfig+0x900>)
 8006312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006316:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006318:	f7fd f918 	bl	800354c <HAL_GetTick>
 800631c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006320:	e010      	b.n	8006344 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006322:	f7fd f913 	bl	800354c <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	; 0x64
 8006330:	d908      	bls.n	8006344 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e3d1      	b.n	8006ada <HAL_RCC_OscConfig+0x109a>
 8006336:	bf00      	nop
 8006338:	40021000 	.word	0x40021000
 800633c:	10908120 	.word	0x10908120
 8006340:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006344:	4b8d      	ldr	r3, [pc, #564]	; (800657c <HAL_RCC_OscConfig+0xb3c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0e8      	beq.n	8006322 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006354:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d106      	bne.n	800636e <HAL_RCC_OscConfig+0x92e>
 8006360:	4b87      	ldr	r3, [pc, #540]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	4a86      	ldr	r2, [pc, #536]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 8006366:	f043 0301 	orr.w	r3, r3, #1
 800636a:	6213      	str	r3, [r2, #32]
 800636c:	e035      	b.n	80063da <HAL_RCC_OscConfig+0x99a>
 800636e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006372:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10c      	bne.n	8006398 <HAL_RCC_OscConfig+0x958>
 800637e:	4b80      	ldr	r3, [pc, #512]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	4a7f      	ldr	r2, [pc, #508]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 8006384:	f023 0301 	bic.w	r3, r3, #1
 8006388:	6213      	str	r3, [r2, #32]
 800638a:	4b7d      	ldr	r3, [pc, #500]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	4a7c      	ldr	r2, [pc, #496]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 8006390:	f023 0304 	bic.w	r3, r3, #4
 8006394:	6213      	str	r3, [r2, #32]
 8006396:	e020      	b.n	80063da <HAL_RCC_OscConfig+0x99a>
 8006398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800639c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b05      	cmp	r3, #5
 80063a6:	d10c      	bne.n	80063c2 <HAL_RCC_OscConfig+0x982>
 80063a8:	4b75      	ldr	r3, [pc, #468]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	4a74      	ldr	r2, [pc, #464]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80063ae:	f043 0304 	orr.w	r3, r3, #4
 80063b2:	6213      	str	r3, [r2, #32]
 80063b4:	4b72      	ldr	r3, [pc, #456]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	4a71      	ldr	r2, [pc, #452]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	6213      	str	r3, [r2, #32]
 80063c0:	e00b      	b.n	80063da <HAL_RCC_OscConfig+0x99a>
 80063c2:	4b6f      	ldr	r3, [pc, #444]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	4a6e      	ldr	r2, [pc, #440]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	6213      	str	r3, [r2, #32]
 80063ce:	4b6c      	ldr	r3, [pc, #432]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	4a6b      	ldr	r2, [pc, #428]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80063da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80063de:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8081 	beq.w	80064ee <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ec:	f7fd f8ae 	bl	800354c <HAL_GetTick>
 80063f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063f4:	e00b      	b.n	800640e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063f6:	f7fd f8a9 	bl	800354c <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	f241 3288 	movw	r2, #5000	; 0x1388
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e365      	b.n	8006ada <HAL_RCC_OscConfig+0x109a>
 800640e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006412:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006416:	2202      	movs	r2, #2
 8006418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800641e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	fa93 f2a3 	rbit	r2, r3
 8006428:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800642c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006436:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800643a:	2202      	movs	r2, #2
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006442:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	fa93 f2a3 	rbit	r2, r3
 800644c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006450:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8006454:	601a      	str	r2, [r3, #0]
  return result;
 8006456:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800645a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800645e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006460:	fab3 f383 	clz	r3, r3
 8006464:	b2db      	uxtb	r3, r3
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	b2db      	uxtb	r3, r3
 800646a:	f043 0302 	orr.w	r3, r3, #2
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d102      	bne.n	800647a <HAL_RCC_OscConfig+0xa3a>
 8006474:	4b42      	ldr	r3, [pc, #264]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	e013      	b.n	80064a2 <HAL_RCC_OscConfig+0xa62>
 800647a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800647e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8006482:	2202      	movs	r2, #2
 8006484:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800648a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	fa93 f2a3 	rbit	r2, r3
 8006494:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006498:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	4b38      	ldr	r3, [pc, #224]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 80064a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80064a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80064aa:	2102      	movs	r1, #2
 80064ac:	6011      	str	r1, [r2, #0]
 80064ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80064b2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	fa92 f1a2 	rbit	r1, r2
 80064bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80064c0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80064c4:	6011      	str	r1, [r2, #0]
  return result;
 80064c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80064ca:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80064ce:	6812      	ldr	r2, [r2, #0]
 80064d0:	fab2 f282 	clz	r2, r2
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064da:	b2d2      	uxtb	r2, r2
 80064dc:	f002 021f 	and.w	r2, r2, #31
 80064e0:	2101      	movs	r1, #1
 80064e2:	fa01 f202 	lsl.w	r2, r1, r2
 80064e6:	4013      	ands	r3, r2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d084      	beq.n	80063f6 <HAL_RCC_OscConfig+0x9b6>
 80064ec:	e083      	b.n	80065f6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ee:	f7fd f82d 	bl	800354c <HAL_GetTick>
 80064f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f6:	e00b      	b.n	8006510 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064f8:	f7fd f828 	bl	800354c <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f241 3288 	movw	r2, #5000	; 0x1388
 8006508:	4293      	cmp	r3, r2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e2e4      	b.n	8006ada <HAL_RCC_OscConfig+0x109a>
 8006510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006514:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006518:	2202      	movs	r2, #2
 800651a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800651c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006520:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	fa93 f2a3 	rbit	r2, r3
 800652a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800652e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006538:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800653c:	2202      	movs	r2, #2
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006544:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	fa93 f2a3 	rbit	r2, r3
 800654e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006552:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006556:	601a      	str	r2, [r3, #0]
  return result;
 8006558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800655c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8006560:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006562:	fab3 f383 	clz	r3, r3
 8006566:	b2db      	uxtb	r3, r3
 8006568:	095b      	lsrs	r3, r3, #5
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f043 0302 	orr.w	r3, r3, #2
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d106      	bne.n	8006584 <HAL_RCC_OscConfig+0xb44>
 8006576:	4b02      	ldr	r3, [pc, #8]	; (8006580 <HAL_RCC_OscConfig+0xb40>)
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	e017      	b.n	80065ac <HAL_RCC_OscConfig+0xb6c>
 800657c:	40007000 	.word	0x40007000
 8006580:	40021000 	.word	0x40021000
 8006584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006588:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800658c:	2202      	movs	r2, #2
 800658e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006594:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	fa93 f2a3 	rbit	r2, r3
 800659e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80065a2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	4bb3      	ldr	r3, [pc, #716]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065b0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80065b4:	2102      	movs	r1, #2
 80065b6:	6011      	str	r1, [r2, #0]
 80065b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	fa92 f1a2 	rbit	r1, r2
 80065c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065ca:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80065ce:	6011      	str	r1, [r2, #0]
  return result;
 80065d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80065d4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80065d8:	6812      	ldr	r2, [r2, #0]
 80065da:	fab2 f282 	clz	r2, r2
 80065de:	b2d2      	uxtb	r2, r2
 80065e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e4:	b2d2      	uxtb	r2, r2
 80065e6:	f002 021f 	and.w	r2, r2, #31
 80065ea:	2101      	movs	r1, #1
 80065ec:	fa01 f202 	lsl.w	r2, r1, r2
 80065f0:	4013      	ands	r3, r2
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d180      	bne.n	80064f8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065f6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d105      	bne.n	800660a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065fe:	4b9e      	ldr	r3, [pc, #632]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	4a9d      	ldr	r2, [pc, #628]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 8006604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006608:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800660a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800660e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 825e 	beq.w	8006ad8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800661c:	4b96      	ldr	r3, [pc, #600]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f003 030c 	and.w	r3, r3, #12
 8006624:	2b08      	cmp	r3, #8
 8006626:	f000 821f 	beq.w	8006a68 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800662a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800662e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	2b02      	cmp	r3, #2
 8006638:	f040 8170 	bne.w	800691c <HAL_RCC_OscConfig+0xedc>
 800663c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006640:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800664a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800664e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	fa93 f2a3 	rbit	r2, r3
 8006658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800665c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006660:	601a      	str	r2, [r3, #0]
  return result;
 8006662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006666:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800666a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666c:	fab3 f383 	clz	r3, r3
 8006670:	b2db      	uxtb	r3, r3
 8006672:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006676:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	461a      	mov	r2, r3
 800667e:	2300      	movs	r3, #0
 8006680:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006682:	f7fc ff63 	bl	800354c <HAL_GetTick>
 8006686:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800668a:	e009      	b.n	80066a0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800668c:	f7fc ff5e 	bl	800354c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	2b02      	cmp	r3, #2
 800669a:	d901      	bls.n	80066a0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e21c      	b.n	8006ada <HAL_RCC_OscConfig+0x109a>
 80066a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066b2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	fa93 f2a3 	rbit	r2, r3
 80066bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066c0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80066c4:	601a      	str	r2, [r3, #0]
  return result;
 80066c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066ca:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80066ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80066d0:	fab3 f383 	clz	r3, r3
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	f043 0301 	orr.w	r3, r3, #1
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d102      	bne.n	80066ea <HAL_RCC_OscConfig+0xcaa>
 80066e4:	4b64      	ldr	r3, [pc, #400]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	e027      	b.n	800673a <HAL_RCC_OscConfig+0xcfa>
 80066ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80066f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80066fc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	fa93 f2a3 	rbit	r2, r3
 8006706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800670a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006714:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006722:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	fa93 f2a3 	rbit	r2, r3
 800672c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006730:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	4b50      	ldr	r3, [pc, #320]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800673e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006742:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006746:	6011      	str	r1, [r2, #0]
 8006748:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800674c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	fa92 f1a2 	rbit	r1, r2
 8006756:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800675a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800675e:	6011      	str	r1, [r2, #0]
  return result;
 8006760:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006764:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	fab2 f282 	clz	r2, r2
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	f042 0220 	orr.w	r2, r2, #32
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	f002 021f 	and.w	r2, r2, #31
 800677a:	2101      	movs	r1, #1
 800677c:	fa01 f202 	lsl.w	r2, r1, r2
 8006780:	4013      	ands	r3, r2
 8006782:	2b00      	cmp	r3, #0
 8006784:	d182      	bne.n	800668c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006786:	4b3c      	ldr	r3, [pc, #240]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	f023 020f 	bic.w	r2, r3, #15
 800678e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006792:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	4937      	ldr	r1, [pc, #220]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 800679c:	4313      	orrs	r3, r2
 800679e:	62cb      	str	r3, [r1, #44]	; 0x2c
 80067a0:	4b35      	ldr	r3, [pc, #212]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80067a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6a19      	ldr	r1, [r3, #32]
 80067b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	430b      	orrs	r3, r1
 80067c2:	492d      	ldr	r1, [pc, #180]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	604b      	str	r3, [r1, #4]
 80067c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067cc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80067d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067da:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	fa93 f2a3 	rbit	r2, r3
 80067e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067e8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80067ec:	601a      	str	r2, [r3, #0]
  return result;
 80067ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80067f2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80067f6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067f8:	fab3 f383 	clz	r3, r3
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006802:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	461a      	mov	r2, r3
 800680a:	2301      	movs	r3, #1
 800680c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800680e:	f7fc fe9d 	bl	800354c <HAL_GetTick>
 8006812:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006816:	e009      	b.n	800682c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006818:	f7fc fe98 	bl	800354c <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	2b02      	cmp	r3, #2
 8006826:	d901      	bls.n	800682c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e156      	b.n	8006ada <HAL_RCC_OscConfig+0x109a>
 800682c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006830:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006838:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	fa93 f2a3 	rbit	r2, r3
 8006848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800684c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8006850:	601a      	str	r2, [r3, #0]
  return result;
 8006852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006856:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800685a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800685c:	fab3 f383 	clz	r3, r3
 8006860:	b2db      	uxtb	r3, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b01      	cmp	r3, #1
 800686e:	d105      	bne.n	800687c <HAL_RCC_OscConfig+0xe3c>
 8006870:	4b01      	ldr	r3, [pc, #4]	; (8006878 <HAL_RCC_OscConfig+0xe38>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	e02a      	b.n	80068cc <HAL_RCC_OscConfig+0xe8c>
 8006876:	bf00      	nop
 8006878:	40021000 	.word	0x40021000
 800687c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006880:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800688e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	fa93 f2a3 	rbit	r2, r3
 8006898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800689c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068a6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80068aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068b4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	fa93 f2a3 	rbit	r2, r3
 80068be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068c2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	4b86      	ldr	r3, [pc, #536]	; (8006ae4 <HAL_RCC_OscConfig+0x10a4>)
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068d0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80068d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80068d8:	6011      	str	r1, [r2, #0]
 80068da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068de:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	fa92 f1a2 	rbit	r1, r2
 80068e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068ec:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80068f0:	6011      	str	r1, [r2, #0]
  return result;
 80068f2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80068f6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80068fa:	6812      	ldr	r2, [r2, #0]
 80068fc:	fab2 f282 	clz	r2, r2
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	f042 0220 	orr.w	r2, r2, #32
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	f002 021f 	and.w	r2, r2, #31
 800690c:	2101      	movs	r1, #1
 800690e:	fa01 f202 	lsl.w	r2, r1, r2
 8006912:	4013      	ands	r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	f43f af7f 	beq.w	8006818 <HAL_RCC_OscConfig+0xdd8>
 800691a:	e0dd      	b.n	8006ad8 <HAL_RCC_OscConfig+0x1098>
 800691c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006920:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006924:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006928:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800692e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	fa93 f2a3 	rbit	r2, r3
 8006938:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800693c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8006940:	601a      	str	r2, [r3, #0]
  return result;
 8006942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006946:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800694a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694c:	fab3 f383 	clz	r3, r3
 8006950:	b2db      	uxtb	r3, r3
 8006952:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006956:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	461a      	mov	r2, r3
 800695e:	2300      	movs	r3, #0
 8006960:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006962:	f7fc fdf3 	bl	800354c <HAL_GetTick>
 8006966:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800696a:	e009      	b.n	8006980 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800696c:	f7fc fdee 	bl	800354c <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d901      	bls.n	8006980 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	e0ac      	b.n	8006ada <HAL_RCC_OscConfig+0x109a>
 8006980:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006984:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800698c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800698e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006992:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	fa93 f2a3 	rbit	r2, r3
 800699c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069a0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80069a4:	601a      	str	r2, [r3, #0]
  return result;
 80069a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069aa:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80069ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069b0:	fab3 f383 	clz	r3, r3
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f043 0301 	orr.w	r3, r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d102      	bne.n	80069ca <HAL_RCC_OscConfig+0xf8a>
 80069c4:	4b47      	ldr	r3, [pc, #284]	; (8006ae4 <HAL_RCC_OscConfig+0x10a4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	e027      	b.n	8006a1a <HAL_RCC_OscConfig+0xfda>
 80069ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069ce:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80069d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069dc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	fa93 f2a3 	rbit	r2, r3
 80069e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069ea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80069f4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80069f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a02:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	fa93 f2a3 	rbit	r2, r3
 8006a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a10:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8006a14:	601a      	str	r2, [r3, #0]
 8006a16:	4b33      	ldr	r3, [pc, #204]	; (8006ae4 <HAL_RCC_OscConfig+0x10a4>)
 8006a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a1e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006a22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006a26:	6011      	str	r1, [r2, #0]
 8006a28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a2c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006a30:	6812      	ldr	r2, [r2, #0]
 8006a32:	fa92 f1a2 	rbit	r1, r2
 8006a36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a3a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006a3e:	6011      	str	r1, [r2, #0]
  return result;
 8006a40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8006a44:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	fab2 f282 	clz	r2, r2
 8006a4e:	b2d2      	uxtb	r2, r2
 8006a50:	f042 0220 	orr.w	r2, r2, #32
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	f002 021f 	and.w	r2, r2, #31
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d182      	bne.n	800696c <HAL_RCC_OscConfig+0xf2c>
 8006a66:	e037      	b.n	8006ad8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e02e      	b.n	8006ada <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006a7c:	4b19      	ldr	r3, [pc, #100]	; (8006ae4 <HAL_RCC_OscConfig+0x10a4>)
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8006a84:	4b17      	ldr	r3, [pc, #92]	; (8006ae4 <HAL_RCC_OscConfig+0x10a4>)
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006a8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006a90:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8006a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d117      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006aa4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8006aa8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006aac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ab0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d10b      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006ac0:	f003 020f 	and.w	r2, r3, #15
 8006ac4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ac8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d001      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e000      	b.n	8006ada <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	40021000 	.word	0x40021000

08006ae8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b09e      	sub	sp, #120	; 0x78
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e162      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b00:	4b90      	ldr	r3, [pc, #576]	; (8006d44 <HAL_RCC_ClockConfig+0x25c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d910      	bls.n	8006b30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b0e:	4b8d      	ldr	r3, [pc, #564]	; (8006d44 <HAL_RCC_ClockConfig+0x25c>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f023 0207 	bic.w	r2, r3, #7
 8006b16:	498b      	ldr	r1, [pc, #556]	; (8006d44 <HAL_RCC_ClockConfig+0x25c>)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b1e:	4b89      	ldr	r3, [pc, #548]	; (8006d44 <HAL_RCC_ClockConfig+0x25c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d001      	beq.n	8006b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e14a      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d008      	beq.n	8006b4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b3c:	4b82      	ldr	r3, [pc, #520]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	497f      	ldr	r1, [pc, #508]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	f000 80dc 	beq.w	8006d14 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d13c      	bne.n	8006bde <HAL_RCC_ClockConfig+0xf6>
 8006b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b6c:	fa93 f3a3 	rbit	r3, r3
 8006b70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b74:	fab3 f383 	clz	r3, r3
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	f043 0301 	orr.w	r3, r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d102      	bne.n	8006b8e <HAL_RCC_ClockConfig+0xa6>
 8006b88:	4b6f      	ldr	r3, [pc, #444]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	e00f      	b.n	8006bae <HAL_RCC_ClockConfig+0xc6>
 8006b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006b96:	fa93 f3a3 	rbit	r3, r3
 8006b9a:	667b      	str	r3, [r7, #100]	; 0x64
 8006b9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ba0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ba4:	fa93 f3a3 	rbit	r3, r3
 8006ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006baa:	4b67      	ldr	r3, [pc, #412]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006bb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8006bb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bb6:	fa92 f2a2 	rbit	r2, r2
 8006bba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8006bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006bbe:	fab2 f282 	clz	r2, r2
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	f042 0220 	orr.w	r2, r2, #32
 8006bc8:	b2d2      	uxtb	r2, r2
 8006bca:	f002 021f 	and.w	r2, r2, #31
 8006bce:	2101      	movs	r1, #1
 8006bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d17b      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e0f3      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d13c      	bne.n	8006c60 <HAL_RCC_ClockConfig+0x178>
 8006be6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bee:	fa93 f3a3 	rbit	r3, r3
 8006bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf6:	fab3 f383 	clz	r3, r3
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d102      	bne.n	8006c10 <HAL_RCC_ClockConfig+0x128>
 8006c0a:	4b4f      	ldr	r3, [pc, #316]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	e00f      	b.n	8006c30 <HAL_RCC_ClockConfig+0x148>
 8006c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c18:	fa93 f3a3 	rbit	r3, r3
 8006c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c22:	643b      	str	r3, [r7, #64]	; 0x40
 8006c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c26:	fa93 f3a3 	rbit	r3, r3
 8006c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c2c:	4b46      	ldr	r3, [pc, #280]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c34:	63ba      	str	r2, [r7, #56]	; 0x38
 8006c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c38:	fa92 f2a2 	rbit	r2, r2
 8006c3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8006c3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c40:	fab2 f282 	clz	r2, r2
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	f042 0220 	orr.w	r2, r2, #32
 8006c4a:	b2d2      	uxtb	r2, r2
 8006c4c:	f002 021f 	and.w	r2, r2, #31
 8006c50:	2101      	movs	r1, #1
 8006c52:	fa01 f202 	lsl.w	r2, r1, r2
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d13a      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0b2      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x2de>
 8006c60:	2302      	movs	r3, #2
 8006c62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	fa93 f3a3 	rbit	r3, r3
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6e:	fab3 f383 	clz	r3, r3
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	095b      	lsrs	r3, r3, #5
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f043 0301 	orr.w	r3, r3, #1
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d102      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x1a0>
 8006c82:	4b31      	ldr	r3, [pc, #196]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	e00d      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x1bc>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8e:	fa93 f3a3 	rbit	r3, r3
 8006c92:	627b      	str	r3, [r7, #36]	; 0x24
 8006c94:	2302      	movs	r3, #2
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	fa93 f3a3 	rbit	r3, r3
 8006c9e:	61fb      	str	r3, [r7, #28]
 8006ca0:	4b29      	ldr	r3, [pc, #164]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	61ba      	str	r2, [r7, #24]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	fa92 f2a2 	rbit	r2, r2
 8006cae:	617a      	str	r2, [r7, #20]
  return result;
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	fab2 f282 	clz	r2, r2
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	f042 0220 	orr.w	r2, r2, #32
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	f002 021f 	and.w	r2, r2, #31
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e079      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f023 0203 	bic.w	r2, r3, #3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	491a      	ldr	r1, [pc, #104]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ce4:	f7fc fc32 	bl	800354c <HAL_GetTick>
 8006ce8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cea:	e00a      	b.n	8006d02 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cec:	f7fc fc2e 	bl	800354c <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e061      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d02:	4b11      	ldr	r3, [pc, #68]	; (8006d48 <HAL_RCC_ClockConfig+0x260>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f003 020c 	and.w	r2, r3, #12
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d1eb      	bne.n	8006cec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d14:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <HAL_RCC_ClockConfig+0x25c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d214      	bcs.n	8006d4c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d22:	4b08      	ldr	r3, [pc, #32]	; (8006d44 <HAL_RCC_ClockConfig+0x25c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f023 0207 	bic.w	r2, r3, #7
 8006d2a:	4906      	ldr	r1, [pc, #24]	; (8006d44 <HAL_RCC_ClockConfig+0x25c>)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d32:	4b04      	ldr	r3, [pc, #16]	; (8006d44 <HAL_RCC_ClockConfig+0x25c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d005      	beq.n	8006d4c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e040      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x2de>
 8006d44:	40022000 	.word	0x40022000
 8006d48:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d008      	beq.n	8006d6a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d58:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	491a      	ldr	r1, [pc, #104]	; (8006dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0308 	and.w	r3, r3, #8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d76:	4b16      	ldr	r3, [pc, #88]	; (8006dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	4912      	ldr	r1, [pc, #72]	; (8006dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006d8a:	f000 f829 	bl	8006de0 <HAL_RCC_GetSysClockFreq>
 8006d8e:	4601      	mov	r1, r0
 8006d90:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <HAL_RCC_ClockConfig+0x2e8>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d98:	22f0      	movs	r2, #240	; 0xf0
 8006d9a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	fa92 f2a2 	rbit	r2, r2
 8006da2:	60fa      	str	r2, [r7, #12]
  return result;
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	fab2 f282 	clz	r2, r2
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	40d3      	lsrs	r3, r2
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <HAL_RCC_ClockConfig+0x2ec>)
 8006db0:	5cd3      	ldrb	r3, [r2, r3]
 8006db2:	fa21 f303 	lsr.w	r3, r1, r3
 8006db6:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <HAL_RCC_ClockConfig+0x2f0>)
 8006db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8006dba:	4b08      	ldr	r3, [pc, #32]	; (8006ddc <HAL_RCC_ClockConfig+0x2f4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fc fb80 	bl	80034c4 <HAL_InitTick>
  
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3778      	adds	r7, #120	; 0x78
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	0800c728 	.word	0x0800c728
 8006dd8:	20000008 	.word	0x20000008
 8006ddc:	2000000c 	.word	0x2000000c

08006de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b08b      	sub	sp, #44	; 0x2c
 8006de4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61fb      	str	r3, [r7, #28]
 8006dea:	2300      	movs	r3, #0
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	2300      	movs	r3, #0
 8006df0:	627b      	str	r3, [r7, #36]	; 0x24
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006dfa:	4b2a      	ldr	r3, [pc, #168]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f003 030c 	and.w	r3, r3, #12
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	d002      	beq.n	8006e10 <HAL_RCC_GetSysClockFreq+0x30>
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d003      	beq.n	8006e16 <HAL_RCC_GetSysClockFreq+0x36>
 8006e0e:	e03f      	b.n	8006e90 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006e10:	4b25      	ldr	r3, [pc, #148]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e12:	623b      	str	r3, [r7, #32]
      break;
 8006e14:	e03f      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006e1c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006e20:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	fa92 f2a2 	rbit	r2, r2
 8006e28:	607a      	str	r2, [r7, #4]
  return result;
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	fab2 f282 	clz	r2, r2
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	40d3      	lsrs	r3, r2
 8006e34:	4a1d      	ldr	r2, [pc, #116]	; (8006eac <HAL_RCC_GetSysClockFreq+0xcc>)
 8006e36:	5cd3      	ldrb	r3, [r2, r3]
 8006e38:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006e3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	220f      	movs	r2, #15
 8006e44:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	fa92 f2a2 	rbit	r2, r2
 8006e4c:	60fa      	str	r2, [r7, #12]
  return result;
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	fab2 f282 	clz	r2, r2
 8006e54:	b2d2      	uxtb	r2, r2
 8006e56:	40d3      	lsrs	r3, r2
 8006e58:	4a15      	ldr	r2, [pc, #84]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006e5a:	5cd3      	ldrb	r3, [r2, r3]
 8006e5c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006e68:	4a0f      	ldr	r2, [pc, #60]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
 8006e78:	e007      	b.n	8006e8a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006e7a:	4a0b      	ldr	r2, [pc, #44]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	623b      	str	r3, [r7, #32]
      break;
 8006e8e:	e002      	b.n	8006e96 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e90:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006e92:	623b      	str	r3, [r7, #32]
      break;
 8006e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e96:	6a3b      	ldr	r3, [r7, #32]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	372c      	adds	r7, #44	; 0x2c
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40021000 	.word	0x40021000
 8006ea8:	007a1200 	.word	0x007a1200
 8006eac:	0800c740 	.word	0x0800c740
 8006eb0:	0800c750 	.word	0x0800c750

08006eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eba:	681b      	ldr	r3, [r3, #0]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20000008 	.word	0x20000008

08006ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006ed2:	f7ff ffef 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ee0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006ee4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	fa92 f2a2 	rbit	r2, r2
 8006eec:	603a      	str	r2, [r7, #0]
  return result;
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	fab2 f282 	clz	r2, r2
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	40d3      	lsrs	r3, r2
 8006ef8:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <HAL_RCC_GetPCLK1Freq+0x40>)
 8006efa:	5cd3      	ldrb	r3, [r2, r3]
 8006efc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	0800c738 	.word	0x0800c738

08006f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006f16:	f7ff ffcd 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006f24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006f28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	fa92 f2a2 	rbit	r2, r2
 8006f30:	603a      	str	r2, [r7, #0]
  return result;
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	fab2 f282 	clz	r2, r2
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	40d3      	lsrs	r3, r2
 8006f3c:	4a04      	ldr	r2, [pc, #16]	; (8006f50 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006f3e:	5cd3      	ldrb	r3, [r2, r3]
 8006f40:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40021000 	.word	0x40021000
 8006f50:	0800c738 	.word	0x0800c738

08006f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b092      	sub	sp, #72	; 0x48
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 80d4 	beq.w	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f78:	4b4e      	ldr	r3, [pc, #312]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f7a:	69db      	ldr	r3, [r3, #28]
 8006f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10e      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f84:	4b4b      	ldr	r3, [pc, #300]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f86:	69db      	ldr	r3, [r3, #28]
 8006f88:	4a4a      	ldr	r2, [pc, #296]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	61d3      	str	r3, [r2, #28]
 8006f90:	4b48      	ldr	r3, [pc, #288]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f98:	60bb      	str	r3, [r7, #8]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa2:	4b45      	ldr	r3, [pc, #276]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d118      	bne.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fae:	4b42      	ldr	r3, [pc, #264]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a41      	ldr	r2, [pc, #260]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fba:	f7fc fac7 	bl	800354c <HAL_GetTick>
 8006fbe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc2:	f7fc fac3 	bl	800354c <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b64      	cmp	r3, #100	; 0x64
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e1d6      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fd4:	4b38      	ldr	r3, [pc, #224]	; (80070b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0f0      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fe0:	4b34      	ldr	r3, [pc, #208]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006fe2:	6a1b      	ldr	r3, [r3, #32]
 8006fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8084 	beq.w	80070fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d07c      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007000:	4b2c      	ldr	r3, [pc, #176]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007002:	6a1b      	ldr	r3, [r3, #32]
 8007004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800700a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800700e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	fa93 f3a3 	rbit	r3, r3
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800701a:	fab3 f383 	clz	r3, r3
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	4b26      	ldr	r3, [pc, #152]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	461a      	mov	r2, r3
 800702a:	2301      	movs	r3, #1
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	fa93 f3a3 	rbit	r3, r3
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800703e:	fab3 f383 	clz	r3, r3
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	4b1d      	ldr	r3, [pc, #116]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007048:	4413      	add	r3, r2
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	461a      	mov	r2, r3
 800704e:	2300      	movs	r3, #0
 8007050:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007052:	4a18      	ldr	r2, [pc, #96]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007056:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d04b      	beq.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007062:	f7fc fa73 	bl	800354c <HAL_GetTick>
 8007066:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007068:	e00a      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800706a:	f7fc fa6f 	bl	800354c <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	f241 3288 	movw	r2, #5000	; 0x1388
 8007078:	4293      	cmp	r3, r2
 800707a:	d901      	bls.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e180      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007080:	2302      	movs	r3, #2
 8007082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	fa93 f3a3 	rbit	r3, r3
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
 800708c:	2302      	movs	r3, #2
 800708e:	623b      	str	r3, [r7, #32]
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	fa93 f3a3 	rbit	r3, r3
 8007096:	61fb      	str	r3, [r7, #28]
  return result;
 8007098:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709a:	fab3 f383 	clz	r3, r3
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	f043 0302 	orr.w	r3, r3, #2
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d108      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80070ae:	4b01      	ldr	r3, [pc, #4]	; (80070b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	e00d      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40007000 	.word	0x40007000
 80070bc:	10908100 	.word	0x10908100
 80070c0:	2302      	movs	r3, #2
 80070c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	fa93 f3a3 	rbit	r3, r3
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	4b9a      	ldr	r3, [pc, #616]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	2202      	movs	r2, #2
 80070d2:	613a      	str	r2, [r7, #16]
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	fa92 f2a2 	rbit	r2, r2
 80070da:	60fa      	str	r2, [r7, #12]
  return result;
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	fab2 f282 	clz	r2, r2
 80070e2:	b2d2      	uxtb	r2, r2
 80070e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	f002 021f 	and.w	r2, r2, #31
 80070ee:	2101      	movs	r1, #1
 80070f0:	fa01 f202 	lsl.w	r2, r1, r2
 80070f4:	4013      	ands	r3, r2
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d0b7      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80070fa:	4b8f      	ldr	r3, [pc, #572]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	498c      	ldr	r1, [pc, #560]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007108:	4313      	orrs	r3, r2
 800710a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800710c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007110:	2b01      	cmp	r3, #1
 8007112:	d105      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007114:	4b88      	ldr	r3, [pc, #544]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	4a87      	ldr	r2, [pc, #540]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800711a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800711e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800712c:	4b82      	ldr	r3, [pc, #520]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	f023 0203 	bic.w	r2, r3, #3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	497f      	ldr	r1, [pc, #508]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800713a:	4313      	orrs	r3, r2
 800713c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0302 	and.w	r3, r3, #2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d008      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800714a:	4b7b      	ldr	r3, [pc, #492]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	4978      	ldr	r1, [pc, #480]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007158:	4313      	orrs	r3, r2
 800715a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007168:	4b73      	ldr	r3, [pc, #460]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	691b      	ldr	r3, [r3, #16]
 8007174:	4970      	ldr	r1, [pc, #448]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007176:	4313      	orrs	r3, r2
 8007178:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0320 	and.w	r3, r3, #32
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007186:	4b6c      	ldr	r3, [pc, #432]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	f023 0210 	bic.w	r2, r3, #16
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	4969      	ldr	r1, [pc, #420]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007194:	4313      	orrs	r3, r2
 8007196:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d008      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80071a4:	4b64      	ldr	r3, [pc, #400]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071b0:	4961      	ldr	r1, [pc, #388]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d008      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071c2:	4b5d      	ldr	r3, [pc, #372]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	f023 0220 	bic.w	r2, r3, #32
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	495a      	ldr	r1, [pc, #360]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d008      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071e0:	4b55      	ldr	r3, [pc, #340]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	4952      	ldr	r1, [pc, #328]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d008      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071fe:	4b4e      	ldr	r3, [pc, #312]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	494b      	ldr	r1, [pc, #300]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800720c:	4313      	orrs	r3, r2
 800720e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0310 	and.w	r3, r3, #16
 8007218:	2b00      	cmp	r3, #0
 800721a:	d008      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800721c:	4b46      	ldr	r3, [pc, #280]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800721e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007220:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	4943      	ldr	r1, [pc, #268]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800722a:	4313      	orrs	r3, r2
 800722c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007236:	2b00      	cmp	r3, #0
 8007238:	d008      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800723a:	4b3f      	ldr	r3, [pc, #252]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	493c      	ldr	r1, [pc, #240]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007248:	4313      	orrs	r3, r2
 800724a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007254:	2b00      	cmp	r3, #0
 8007256:	d008      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007258:	4b37      	ldr	r3, [pc, #220]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007264:	4934      	ldr	r1, [pc, #208]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007266:	4313      	orrs	r3, r2
 8007268:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d008      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007276:	4b30      	ldr	r3, [pc, #192]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	492d      	ldr	r1, [pc, #180]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007284:	4313      	orrs	r3, r2
 8007286:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007294:	4b28      	ldr	r3, [pc, #160]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007298:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a0:	4925      	ldr	r1, [pc, #148]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d008      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80072b2:	4b21      	ldr	r3, [pc, #132]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	491e      	ldr	r1, [pc, #120]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80072d0:	4b19      	ldr	r3, [pc, #100]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	4916      	ldr	r1, [pc, #88]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80072ee:	4b12      	ldr	r3, [pc, #72]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	490f      	ldr	r1, [pc, #60]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007308:	2b00      	cmp	r3, #0
 800730a:	d008      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800730c:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007318:	4907      	ldr	r1, [pc, #28]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800731a:	4313      	orrs	r3, r2
 800731c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00c      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800732a:	4b03      	ldr	r3, [pc, #12]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	e002      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007336:	bf00      	nop
 8007338:	40021000 	.word	0x40021000
 800733c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733e:	4913      	ldr	r1, [pc, #76]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007340:	4313      	orrs	r3, r2
 8007342:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8007350:	4b0e      	ldr	r3, [pc, #56]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007354:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735c:	490b      	ldr	r1, [pc, #44]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800735e:	4313      	orrs	r3, r2
 8007360:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d008      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800737a:	4904      	ldr	r1, [pc, #16]	; (800738c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800737c:	4313      	orrs	r3, r2
 800737e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3748      	adds	r7, #72	; 0x48
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40021000 	.word	0x40021000

08007390 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e049      	b.n	8007436 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7fb fe88 	bl	80030cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4610      	mov	r0, r2
 80073d0:	f000 f94a 	bl	8007668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3708      	adds	r7, #8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800744c:	2300      	movs	r3, #0
 800744e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800745a:	2302      	movs	r3, #2
 800745c:	e0ff      	b.n	800765e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b14      	cmp	r3, #20
 800746a:	f200 80f0 	bhi.w	800764e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800746e:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007474:	080074c9 	.word	0x080074c9
 8007478:	0800764f 	.word	0x0800764f
 800747c:	0800764f 	.word	0x0800764f
 8007480:	0800764f 	.word	0x0800764f
 8007484:	08007509 	.word	0x08007509
 8007488:	0800764f 	.word	0x0800764f
 800748c:	0800764f 	.word	0x0800764f
 8007490:	0800764f 	.word	0x0800764f
 8007494:	0800754b 	.word	0x0800754b
 8007498:	0800764f 	.word	0x0800764f
 800749c:	0800764f 	.word	0x0800764f
 80074a0:	0800764f 	.word	0x0800764f
 80074a4:	0800758b 	.word	0x0800758b
 80074a8:	0800764f 	.word	0x0800764f
 80074ac:	0800764f 	.word	0x0800764f
 80074b0:	0800764f 	.word	0x0800764f
 80074b4:	080075cd 	.word	0x080075cd
 80074b8:	0800764f 	.word	0x0800764f
 80074bc:	0800764f 	.word	0x0800764f
 80074c0:	0800764f 	.word	0x0800764f
 80074c4:	0800760d 	.word	0x0800760d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68b9      	ldr	r1, [r7, #8]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f968 	bl	80077a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	699a      	ldr	r2, [r3, #24]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0208 	orr.w	r2, r2, #8
 80074e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0204 	bic.w	r2, r2, #4
 80074f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6999      	ldr	r1, [r3, #24]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691a      	ldr	r2, [r3, #16]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	619a      	str	r2, [r3, #24]
      break;
 8007506:	e0a5      	b.n	8007654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68b9      	ldr	r1, [r7, #8]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 f9e2 	bl	80078d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6999      	ldr	r1, [r3, #24]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	021a      	lsls	r2, r3, #8
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	619a      	str	r2, [r3, #24]
      break;
 8007548:	e084      	b.n	8007654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fa55 	bl	8007a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69da      	ldr	r2, [r3, #28]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f042 0208 	orr.w	r2, r2, #8
 8007564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	69da      	ldr	r2, [r3, #28]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0204 	bic.w	r2, r2, #4
 8007574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69d9      	ldr	r1, [r3, #28]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	430a      	orrs	r2, r1
 8007586:	61da      	str	r2, [r3, #28]
      break;
 8007588:	e064      	b.n	8007654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68b9      	ldr	r1, [r7, #8]
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fac7 	bl	8007b24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69da      	ldr	r2, [r3, #28]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69d9      	ldr	r1, [r3, #28]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	021a      	lsls	r2, r3, #8
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	61da      	str	r2, [r3, #28]
      break;
 80075ca:	e043      	b.n	8007654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fb16 	bl	8007c04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0208 	orr.w	r2, r2, #8
 80075e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f022 0204 	bic.w	r2, r2, #4
 80075f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	691a      	ldr	r2, [r3, #16]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800760a:	e023      	b.n	8007654 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68b9      	ldr	r1, [r7, #8]
 8007612:	4618      	mov	r0, r3
 8007614:	f000 fb60 	bl	8007cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007626:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007636:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	021a      	lsls	r2, r3, #8
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800764c:	e002      	b.n	8007654 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	75fb      	strb	r3, [r7, #23]
      break;
 8007652:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800765c:	7dfb      	ldrb	r3, [r7, #23]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop

08007668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a42      	ldr	r2, [pc, #264]	; (8007784 <TIM_Base_SetConfig+0x11c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007686:	d00f      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a3f      	ldr	r2, [pc, #252]	; (8007788 <TIM_Base_SetConfig+0x120>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00b      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a3e      	ldr	r2, [pc, #248]	; (800778c <TIM_Base_SetConfig+0x124>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d007      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a3d      	ldr	r2, [pc, #244]	; (8007790 <TIM_Base_SetConfig+0x128>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d003      	beq.n	80076a8 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a3c      	ldr	r2, [pc, #240]	; (8007794 <TIM_Base_SetConfig+0x12c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d108      	bne.n	80076ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a31      	ldr	r2, [pc, #196]	; (8007784 <TIM_Base_SetConfig+0x11c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d01f      	beq.n	8007702 <TIM_Base_SetConfig+0x9a>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c8:	d01b      	beq.n	8007702 <TIM_Base_SetConfig+0x9a>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a2e      	ldr	r2, [pc, #184]	; (8007788 <TIM_Base_SetConfig+0x120>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d017      	beq.n	8007702 <TIM_Base_SetConfig+0x9a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a2d      	ldr	r2, [pc, #180]	; (800778c <TIM_Base_SetConfig+0x124>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <TIM_Base_SetConfig+0x9a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a2c      	ldr	r2, [pc, #176]	; (8007790 <TIM_Base_SetConfig+0x128>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00f      	beq.n	8007702 <TIM_Base_SetConfig+0x9a>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a2c      	ldr	r2, [pc, #176]	; (8007798 <TIM_Base_SetConfig+0x130>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00b      	beq.n	8007702 <TIM_Base_SetConfig+0x9a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2b      	ldr	r2, [pc, #172]	; (800779c <TIM_Base_SetConfig+0x134>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <TIM_Base_SetConfig+0x9a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a2a      	ldr	r2, [pc, #168]	; (80077a0 <TIM_Base_SetConfig+0x138>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d003      	beq.n	8007702 <TIM_Base_SetConfig+0x9a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a25      	ldr	r2, [pc, #148]	; (8007794 <TIM_Base_SetConfig+0x12c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d108      	bne.n	8007714 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a12      	ldr	r2, [pc, #72]	; (8007784 <TIM_Base_SetConfig+0x11c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d013      	beq.n	8007768 <TIM_Base_SetConfig+0x100>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a13      	ldr	r2, [pc, #76]	; (8007790 <TIM_Base_SetConfig+0x128>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00f      	beq.n	8007768 <TIM_Base_SetConfig+0x100>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a13      	ldr	r2, [pc, #76]	; (8007798 <TIM_Base_SetConfig+0x130>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d00b      	beq.n	8007768 <TIM_Base_SetConfig+0x100>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a12      	ldr	r2, [pc, #72]	; (800779c <TIM_Base_SetConfig+0x134>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d007      	beq.n	8007768 <TIM_Base_SetConfig+0x100>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a11      	ldr	r2, [pc, #68]	; (80077a0 <TIM_Base_SetConfig+0x138>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d003      	beq.n	8007768 <TIM_Base_SetConfig+0x100>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a0c      	ldr	r2, [pc, #48]	; (8007794 <TIM_Base_SetConfig+0x12c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d103      	bne.n	8007770 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	615a      	str	r2, [r3, #20]
}
 8007776:	bf00      	nop
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	40012c00 	.word	0x40012c00
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40013400 	.word	0x40013400
 8007794:	40015000 	.word	0x40015000
 8007798:	40014000 	.word	0x40014000
 800779c:	40014400 	.word	0x40014400
 80077a0:	40014800 	.word	0x40014800

080077a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f023 0201 	bic.w	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f023 0302 	bic.w	r3, r3, #2
 80077f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a30      	ldr	r2, [pc, #192]	; (80078c0 <TIM_OC1_SetConfig+0x11c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <TIM_OC1_SetConfig+0x88>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a2f      	ldr	r2, [pc, #188]	; (80078c4 <TIM_OC1_SetConfig+0x120>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00f      	beq.n	800782c <TIM_OC1_SetConfig+0x88>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a2e      	ldr	r2, [pc, #184]	; (80078c8 <TIM_OC1_SetConfig+0x124>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00b      	beq.n	800782c <TIM_OC1_SetConfig+0x88>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a2d      	ldr	r2, [pc, #180]	; (80078cc <TIM_OC1_SetConfig+0x128>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d007      	beq.n	800782c <TIM_OC1_SetConfig+0x88>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a2c      	ldr	r2, [pc, #176]	; (80078d0 <TIM_OC1_SetConfig+0x12c>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <TIM_OC1_SetConfig+0x88>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a2b      	ldr	r2, [pc, #172]	; (80078d4 <TIM_OC1_SetConfig+0x130>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d10c      	bne.n	8007846 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f023 0308 	bic.w	r3, r3, #8
 8007832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	4313      	orrs	r3, r2
 800783c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f023 0304 	bic.w	r3, r3, #4
 8007844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a1d      	ldr	r2, [pc, #116]	; (80078c0 <TIM_OC1_SetConfig+0x11c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <TIM_OC1_SetConfig+0xd2>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a1c      	ldr	r2, [pc, #112]	; (80078c4 <TIM_OC1_SetConfig+0x120>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d00f      	beq.n	8007876 <TIM_OC1_SetConfig+0xd2>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4a1b      	ldr	r2, [pc, #108]	; (80078c8 <TIM_OC1_SetConfig+0x124>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d00b      	beq.n	8007876 <TIM_OC1_SetConfig+0xd2>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a1a      	ldr	r2, [pc, #104]	; (80078cc <TIM_OC1_SetConfig+0x128>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d007      	beq.n	8007876 <TIM_OC1_SetConfig+0xd2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <TIM_OC1_SetConfig+0x12c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d003      	beq.n	8007876 <TIM_OC1_SetConfig+0xd2>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	4a18      	ldr	r2, [pc, #96]	; (80078d4 <TIM_OC1_SetConfig+0x130>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d111      	bne.n	800789a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800787c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	695b      	ldr	r3, [r3, #20]
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	621a      	str	r2, [r3, #32]
}
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40012c00 	.word	0x40012c00
 80078c4:	40013400 	.word	0x40013400
 80078c8:	40014000 	.word	0x40014000
 80078cc:	40014400 	.word	0x40014400
 80078d0:	40014800 	.word	0x40014800
 80078d4:	40015000 	.word	0x40015000

080078d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	f023 0210 	bic.w	r2, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	021b      	lsls	r3, r3, #8
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	4313      	orrs	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f023 0320 	bic.w	r3, r3, #32
 8007926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	011b      	lsls	r3, r3, #4
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a2c      	ldr	r2, [pc, #176]	; (80079e8 <TIM_OC2_SetConfig+0x110>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_OC2_SetConfig+0x74>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a2b      	ldr	r2, [pc, #172]	; (80079ec <TIM_OC2_SetConfig+0x114>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_OC2_SetConfig+0x74>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <TIM_OC2_SetConfig+0x118>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d10d      	bne.n	8007968 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	011b      	lsls	r3, r3, #4
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007966:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <TIM_OC2_SetConfig+0x110>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d013      	beq.n	8007998 <TIM_OC2_SetConfig+0xc0>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a1e      	ldr	r2, [pc, #120]	; (80079ec <TIM_OC2_SetConfig+0x114>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d00f      	beq.n	8007998 <TIM_OC2_SetConfig+0xc0>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a1e      	ldr	r2, [pc, #120]	; (80079f4 <TIM_OC2_SetConfig+0x11c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d00b      	beq.n	8007998 <TIM_OC2_SetConfig+0xc0>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a1d      	ldr	r2, [pc, #116]	; (80079f8 <TIM_OC2_SetConfig+0x120>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d007      	beq.n	8007998 <TIM_OC2_SetConfig+0xc0>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a1c      	ldr	r2, [pc, #112]	; (80079fc <TIM_OC2_SetConfig+0x124>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d003      	beq.n	8007998 <TIM_OC2_SetConfig+0xc0>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <TIM_OC2_SetConfig+0x118>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d113      	bne.n	80079c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800799e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	40012c00 	.word	0x40012c00
 80079ec:	40013400 	.word	0x40013400
 80079f0:	40015000 	.word	0x40015000
 80079f4:	40014000 	.word	0x40014000
 80079f8:	40014400 	.word	0x40014400
 80079fc:	40014800 	.word	0x40014800

08007a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b087      	sub	sp, #28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a2b      	ldr	r2, [pc, #172]	; (8007b0c <TIM_OC3_SetConfig+0x10c>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <TIM_OC3_SetConfig+0x72>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a2a      	ldr	r2, [pc, #168]	; (8007b10 <TIM_OC3_SetConfig+0x110>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_OC3_SetConfig+0x72>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a29      	ldr	r2, [pc, #164]	; (8007b14 <TIM_OC3_SetConfig+0x114>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d10d      	bne.n	8007a8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <TIM_OC3_SetConfig+0x10c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <TIM_OC3_SetConfig+0xbe>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <TIM_OC3_SetConfig+0x110>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00f      	beq.n	8007abe <TIM_OC3_SetConfig+0xbe>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <TIM_OC3_SetConfig+0x118>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d00b      	beq.n	8007abe <TIM_OC3_SetConfig+0xbe>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <TIM_OC3_SetConfig+0x11c>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d007      	beq.n	8007abe <TIM_OC3_SetConfig+0xbe>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a1b      	ldr	r2, [pc, #108]	; (8007b20 <TIM_OC3_SetConfig+0x120>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d003      	beq.n	8007abe <TIM_OC3_SetConfig+0xbe>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a16      	ldr	r2, [pc, #88]	; (8007b14 <TIM_OC3_SetConfig+0x114>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d113      	bne.n	8007ae6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	693a      	ldr	r2, [r7, #16]
 8007aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685a      	ldr	r2, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	621a      	str	r2, [r3, #32]
}
 8007b00:	bf00      	nop
 8007b02:	371c      	adds	r7, #28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	40012c00 	.word	0x40012c00
 8007b10:	40013400 	.word	0x40013400
 8007b14:	40015000 	.word	0x40015000
 8007b18:	40014000 	.word	0x40014000
 8007b1c:	40014400 	.word	0x40014400
 8007b20:	40014800 	.word	0x40014800

08007b24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b087      	sub	sp, #28
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	021b      	lsls	r3, r3, #8
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	031b      	lsls	r3, r3, #12
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <TIM_OC4_SetConfig+0xc8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d013      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x8c>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <TIM_OC4_SetConfig+0xcc>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00f      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x8c>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a18      	ldr	r2, [pc, #96]	; (8007bf4 <TIM_OC4_SetConfig+0xd0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x8c>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <TIM_OC4_SetConfig+0xd4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d007      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x8c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <TIM_OC4_SetConfig+0xd8>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC4_SetConfig+0x8c>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <TIM_OC4_SetConfig+0xdc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d109      	bne.n	8007bc4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	019b      	lsls	r3, r3, #6
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	40012c00 	.word	0x40012c00
 8007bf0:	40013400 	.word	0x40013400
 8007bf4:	40014000 	.word	0x40014000
 8007bf8:	40014400 	.word	0x40014400
 8007bfc:	40014800 	.word	0x40014800
 8007c00:	40015000 	.word	0x40015000

08007c04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	041b      	lsls	r3, r3, #16
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a19      	ldr	r2, [pc, #100]	; (8007cc0 <TIM_OC5_SetConfig+0xbc>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d013      	beq.n	8007c86 <TIM_OC5_SetConfig+0x82>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a18      	ldr	r2, [pc, #96]	; (8007cc4 <TIM_OC5_SetConfig+0xc0>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d00f      	beq.n	8007c86 <TIM_OC5_SetConfig+0x82>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a17      	ldr	r2, [pc, #92]	; (8007cc8 <TIM_OC5_SetConfig+0xc4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00b      	beq.n	8007c86 <TIM_OC5_SetConfig+0x82>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a16      	ldr	r2, [pc, #88]	; (8007ccc <TIM_OC5_SetConfig+0xc8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d007      	beq.n	8007c86 <TIM_OC5_SetConfig+0x82>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <TIM_OC5_SetConfig+0xcc>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d003      	beq.n	8007c86 <TIM_OC5_SetConfig+0x82>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a14      	ldr	r2, [pc, #80]	; (8007cd4 <TIM_OC5_SetConfig+0xd0>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d109      	bne.n	8007c9a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	621a      	str	r2, [r3, #32]
}
 8007cb4:	bf00      	nop
 8007cb6:	371c      	adds	r7, #28
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	40012c00 	.word	0x40012c00
 8007cc4:	40013400 	.word	0x40013400
 8007cc8:	40014000 	.word	0x40014000
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800
 8007cd4:	40015000 	.word	0x40015000

08007cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b087      	sub	sp, #28
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a1b      	ldr	r3, [r3, #32]
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	021b      	lsls	r3, r3, #8
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	051b      	lsls	r3, r3, #20
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a1a      	ldr	r2, [pc, #104]	; (8007d98 <TIM_OC6_SetConfig+0xc0>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d013      	beq.n	8007d5c <TIM_OC6_SetConfig+0x84>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a19      	ldr	r2, [pc, #100]	; (8007d9c <TIM_OC6_SetConfig+0xc4>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00f      	beq.n	8007d5c <TIM_OC6_SetConfig+0x84>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a18      	ldr	r2, [pc, #96]	; (8007da0 <TIM_OC6_SetConfig+0xc8>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <TIM_OC6_SetConfig+0x84>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a17      	ldr	r2, [pc, #92]	; (8007da4 <TIM_OC6_SetConfig+0xcc>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <TIM_OC6_SetConfig+0x84>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a16      	ldr	r2, [pc, #88]	; (8007da8 <TIM_OC6_SetConfig+0xd0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_OC6_SetConfig+0x84>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a15      	ldr	r2, [pc, #84]	; (8007dac <TIM_OC6_SetConfig+0xd4>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d109      	bne.n	8007d70 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	029b      	lsls	r3, r3, #10
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	697a      	ldr	r2, [r7, #20]
 8007d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	621a      	str	r2, [r3, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40013400 	.word	0x40013400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800
 8007dac:	40015000 	.word	0x40015000

08007db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e06d      	b.n	8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a30      	ldr	r2, [pc, #192]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d009      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a2f      	ldr	r2, [pc, #188]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d004      	beq.n	8007e06 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a2d      	ldr	r2, [pc, #180]	; (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d108      	bne.n	8007e18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007e0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1e      	ldr	r2, [pc, #120]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d01d      	beq.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e44:	d018      	beq.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1c      	ldr	r2, [pc, #112]	; (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d013      	beq.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a1a      	ldr	r2, [pc, #104]	; (8007ec0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00e      	beq.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a15      	ldr	r2, [pc, #84]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d009      	beq.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a16      	ldr	r2, [pc, #88]	; (8007ec4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d004      	beq.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a11      	ldr	r2, [pc, #68]	; (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d10c      	bne.n	8007e92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	68ba      	ldr	r2, [r7, #8]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40013400 	.word	0x40013400
 8007eb8:	40015000 	.word	0x40015000
 8007ebc:	40000400 	.word	0x40000400
 8007ec0:	40000800 	.word	0x40000800
 8007ec4:	40014000 	.word	0x40014000

08007ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e040      	b.n	8007f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fb f940 	bl	8003170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2224      	movs	r2, #36	; 0x24
 8007ef4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8b6 	bl	8008078 <UART_SetConfig>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e022      	b.n	8007f5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa7e 	bl	8008420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fb05 	bl	8008564 <UART_CheckIdleState>
 8007f5a:	4603      	mov	r3, r0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	d178      	bne.n	800806e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_UART_Transmit+0x24>
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e071      	b.n	8008070 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2221      	movs	r2, #33	; 0x21
 8007f98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f9a:	f7fb fad7 	bl	800354c <HAL_GetTick>
 8007f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	88fa      	ldrh	r2, [r7, #6]
 8007fa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb8:	d108      	bne.n	8007fcc <HAL_UART_Transmit+0x68>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	e003      	b.n	8007fd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fd4:	e030      	b.n	8008038 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 fb67 	bl	80086b4 <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e03c      	b.n	8008070 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	881a      	ldrh	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008008:	b292      	uxth	r2, r2
 800800a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	3302      	adds	r3, #2
 8008010:	61bb      	str	r3, [r7, #24]
 8008012:	e008      	b.n	8008026 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	781a      	ldrb	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	b292      	uxth	r2, r2
 800801e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d1c8      	bne.n	8007fd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2200      	movs	r2, #0
 800804c:	2140      	movs	r1, #64	; 0x40
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 fb30 	bl	80086b4 <UART_WaitOnFlagUntilTimeout>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d004      	beq.n	8008064 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e005      	b.n	8008070 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2220      	movs	r2, #32
 8008068:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e000      	b.n	8008070 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800806e:	2302      	movs	r3, #2
  }
}
 8008070:	4618      	mov	r0, r3
 8008072:	3720      	adds	r7, #32
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b088      	sub	sp, #32
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689a      	ldr	r2, [r3, #8]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	4b92      	ldr	r3, [pc, #584]	; (80082ec <UART_SetConfig+0x274>)
 80080a4:	4013      	ands	r3, r2
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	6812      	ldr	r2, [r2, #0]
 80080aa:	6979      	ldr	r1, [r7, #20]
 80080ac:	430b      	orrs	r3, r1
 80080ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a80      	ldr	r2, [pc, #512]	; (80082f0 <UART_SetConfig+0x278>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d120      	bne.n	8008136 <UART_SetConfig+0xbe>
 80080f4:	4b7f      	ldr	r3, [pc, #508]	; (80082f4 <UART_SetConfig+0x27c>)
 80080f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	2b03      	cmp	r3, #3
 80080fe:	d817      	bhi.n	8008130 <UART_SetConfig+0xb8>
 8008100:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <UART_SetConfig+0x90>)
 8008102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008106:	bf00      	nop
 8008108:	08008119 	.word	0x08008119
 800810c:	08008125 	.word	0x08008125
 8008110:	0800812b 	.word	0x0800812b
 8008114:	0800811f 	.word	0x0800811f
 8008118:	2301      	movs	r3, #1
 800811a:	77fb      	strb	r3, [r7, #31]
 800811c:	e0b5      	b.n	800828a <UART_SetConfig+0x212>
 800811e:	2302      	movs	r3, #2
 8008120:	77fb      	strb	r3, [r7, #31]
 8008122:	e0b2      	b.n	800828a <UART_SetConfig+0x212>
 8008124:	2304      	movs	r3, #4
 8008126:	77fb      	strb	r3, [r7, #31]
 8008128:	e0af      	b.n	800828a <UART_SetConfig+0x212>
 800812a:	2308      	movs	r3, #8
 800812c:	77fb      	strb	r3, [r7, #31]
 800812e:	e0ac      	b.n	800828a <UART_SetConfig+0x212>
 8008130:	2310      	movs	r3, #16
 8008132:	77fb      	strb	r3, [r7, #31]
 8008134:	e0a9      	b.n	800828a <UART_SetConfig+0x212>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a6f      	ldr	r2, [pc, #444]	; (80082f8 <UART_SetConfig+0x280>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d124      	bne.n	800818a <UART_SetConfig+0x112>
 8008140:	4b6c      	ldr	r3, [pc, #432]	; (80082f4 <UART_SetConfig+0x27c>)
 8008142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008144:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800814c:	d011      	beq.n	8008172 <UART_SetConfig+0xfa>
 800814e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008152:	d817      	bhi.n	8008184 <UART_SetConfig+0x10c>
 8008154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008158:	d011      	beq.n	800817e <UART_SetConfig+0x106>
 800815a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800815e:	d811      	bhi.n	8008184 <UART_SetConfig+0x10c>
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <UART_SetConfig+0xf4>
 8008164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008168:	d006      	beq.n	8008178 <UART_SetConfig+0x100>
 800816a:	e00b      	b.n	8008184 <UART_SetConfig+0x10c>
 800816c:	2300      	movs	r3, #0
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e08b      	b.n	800828a <UART_SetConfig+0x212>
 8008172:	2302      	movs	r3, #2
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e088      	b.n	800828a <UART_SetConfig+0x212>
 8008178:	2304      	movs	r3, #4
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e085      	b.n	800828a <UART_SetConfig+0x212>
 800817e:	2308      	movs	r3, #8
 8008180:	77fb      	strb	r3, [r7, #31]
 8008182:	e082      	b.n	800828a <UART_SetConfig+0x212>
 8008184:	2310      	movs	r3, #16
 8008186:	77fb      	strb	r3, [r7, #31]
 8008188:	e07f      	b.n	800828a <UART_SetConfig+0x212>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a5b      	ldr	r2, [pc, #364]	; (80082fc <UART_SetConfig+0x284>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d124      	bne.n	80081de <UART_SetConfig+0x166>
 8008194:	4b57      	ldr	r3, [pc, #348]	; (80082f4 <UART_SetConfig+0x27c>)
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800819c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80081a0:	d011      	beq.n	80081c6 <UART_SetConfig+0x14e>
 80081a2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80081a6:	d817      	bhi.n	80081d8 <UART_SetConfig+0x160>
 80081a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081ac:	d011      	beq.n	80081d2 <UART_SetConfig+0x15a>
 80081ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081b2:	d811      	bhi.n	80081d8 <UART_SetConfig+0x160>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d003      	beq.n	80081c0 <UART_SetConfig+0x148>
 80081b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081bc:	d006      	beq.n	80081cc <UART_SetConfig+0x154>
 80081be:	e00b      	b.n	80081d8 <UART_SetConfig+0x160>
 80081c0:	2300      	movs	r3, #0
 80081c2:	77fb      	strb	r3, [r7, #31]
 80081c4:	e061      	b.n	800828a <UART_SetConfig+0x212>
 80081c6:	2302      	movs	r3, #2
 80081c8:	77fb      	strb	r3, [r7, #31]
 80081ca:	e05e      	b.n	800828a <UART_SetConfig+0x212>
 80081cc:	2304      	movs	r3, #4
 80081ce:	77fb      	strb	r3, [r7, #31]
 80081d0:	e05b      	b.n	800828a <UART_SetConfig+0x212>
 80081d2:	2308      	movs	r3, #8
 80081d4:	77fb      	strb	r3, [r7, #31]
 80081d6:	e058      	b.n	800828a <UART_SetConfig+0x212>
 80081d8:	2310      	movs	r3, #16
 80081da:	77fb      	strb	r3, [r7, #31]
 80081dc:	e055      	b.n	800828a <UART_SetConfig+0x212>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a47      	ldr	r2, [pc, #284]	; (8008300 <UART_SetConfig+0x288>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d124      	bne.n	8008232 <UART_SetConfig+0x1ba>
 80081e8:	4b42      	ldr	r3, [pc, #264]	; (80082f4 <UART_SetConfig+0x27c>)
 80081ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80081f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081f4:	d011      	beq.n	800821a <UART_SetConfig+0x1a2>
 80081f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081fa:	d817      	bhi.n	800822c <UART_SetConfig+0x1b4>
 80081fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008200:	d011      	beq.n	8008226 <UART_SetConfig+0x1ae>
 8008202:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008206:	d811      	bhi.n	800822c <UART_SetConfig+0x1b4>
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <UART_SetConfig+0x19c>
 800820c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008210:	d006      	beq.n	8008220 <UART_SetConfig+0x1a8>
 8008212:	e00b      	b.n	800822c <UART_SetConfig+0x1b4>
 8008214:	2300      	movs	r3, #0
 8008216:	77fb      	strb	r3, [r7, #31]
 8008218:	e037      	b.n	800828a <UART_SetConfig+0x212>
 800821a:	2302      	movs	r3, #2
 800821c:	77fb      	strb	r3, [r7, #31]
 800821e:	e034      	b.n	800828a <UART_SetConfig+0x212>
 8008220:	2304      	movs	r3, #4
 8008222:	77fb      	strb	r3, [r7, #31]
 8008224:	e031      	b.n	800828a <UART_SetConfig+0x212>
 8008226:	2308      	movs	r3, #8
 8008228:	77fb      	strb	r3, [r7, #31]
 800822a:	e02e      	b.n	800828a <UART_SetConfig+0x212>
 800822c:	2310      	movs	r3, #16
 800822e:	77fb      	strb	r3, [r7, #31]
 8008230:	e02b      	b.n	800828a <UART_SetConfig+0x212>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a33      	ldr	r2, [pc, #204]	; (8008304 <UART_SetConfig+0x28c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d124      	bne.n	8008286 <UART_SetConfig+0x20e>
 800823c:	4b2d      	ldr	r3, [pc, #180]	; (80082f4 <UART_SetConfig+0x27c>)
 800823e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008240:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008244:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008248:	d011      	beq.n	800826e <UART_SetConfig+0x1f6>
 800824a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800824e:	d817      	bhi.n	8008280 <UART_SetConfig+0x208>
 8008250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008254:	d011      	beq.n	800827a <UART_SetConfig+0x202>
 8008256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800825a:	d811      	bhi.n	8008280 <UART_SetConfig+0x208>
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <UART_SetConfig+0x1f0>
 8008260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008264:	d006      	beq.n	8008274 <UART_SetConfig+0x1fc>
 8008266:	e00b      	b.n	8008280 <UART_SetConfig+0x208>
 8008268:	2300      	movs	r3, #0
 800826a:	77fb      	strb	r3, [r7, #31]
 800826c:	e00d      	b.n	800828a <UART_SetConfig+0x212>
 800826e:	2302      	movs	r3, #2
 8008270:	77fb      	strb	r3, [r7, #31]
 8008272:	e00a      	b.n	800828a <UART_SetConfig+0x212>
 8008274:	2304      	movs	r3, #4
 8008276:	77fb      	strb	r3, [r7, #31]
 8008278:	e007      	b.n	800828a <UART_SetConfig+0x212>
 800827a:	2308      	movs	r3, #8
 800827c:	77fb      	strb	r3, [r7, #31]
 800827e:	e004      	b.n	800828a <UART_SetConfig+0x212>
 8008280:	2310      	movs	r3, #16
 8008282:	77fb      	strb	r3, [r7, #31]
 8008284:	e001      	b.n	800828a <UART_SetConfig+0x212>
 8008286:	2310      	movs	r3, #16
 8008288:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008292:	d16b      	bne.n	800836c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008294:	7ffb      	ldrb	r3, [r7, #31]
 8008296:	2b08      	cmp	r3, #8
 8008298:	d838      	bhi.n	800830c <UART_SetConfig+0x294>
 800829a:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <UART_SetConfig+0x228>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082c5 	.word	0x080082c5
 80082a4:	080082cd 	.word	0x080082cd
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	0800830d 	.word	0x0800830d
 80082b0:	080082db 	.word	0x080082db
 80082b4:	0800830d 	.word	0x0800830d
 80082b8:	0800830d 	.word	0x0800830d
 80082bc:	0800830d 	.word	0x0800830d
 80082c0:	080082e3 	.word	0x080082e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082c4:	f7fe fe02 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 80082c8:	61b8      	str	r0, [r7, #24]
        break;
 80082ca:	e024      	b.n	8008316 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082cc:	f7fe fe20 	bl	8006f10 <HAL_RCC_GetPCLK2Freq>
 80082d0:	61b8      	str	r0, [r7, #24]
        break;
 80082d2:	e020      	b.n	8008316 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082d4:	4b0c      	ldr	r3, [pc, #48]	; (8008308 <UART_SetConfig+0x290>)
 80082d6:	61bb      	str	r3, [r7, #24]
        break;
 80082d8:	e01d      	b.n	8008316 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082da:	f7fe fd81 	bl	8006de0 <HAL_RCC_GetSysClockFreq>
 80082de:	61b8      	str	r0, [r7, #24]
        break;
 80082e0:	e019      	b.n	8008316 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082e6:	61bb      	str	r3, [r7, #24]
        break;
 80082e8:	e015      	b.n	8008316 <UART_SetConfig+0x29e>
 80082ea:	bf00      	nop
 80082ec:	efff69f3 	.word	0xefff69f3
 80082f0:	40013800 	.word	0x40013800
 80082f4:	40021000 	.word	0x40021000
 80082f8:	40004400 	.word	0x40004400
 80082fc:	40004800 	.word	0x40004800
 8008300:	40004c00 	.word	0x40004c00
 8008304:	40005000 	.word	0x40005000
 8008308:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	77bb      	strb	r3, [r7, #30]
        break;
 8008314:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d073      	beq.n	8008404 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	005a      	lsls	r2, r3, #1
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	085b      	lsrs	r3, r3, #1
 8008326:	441a      	add	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008330:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	2b0f      	cmp	r3, #15
 8008336:	d916      	bls.n	8008366 <UART_SetConfig+0x2ee>
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800833e:	d212      	bcs.n	8008366 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	b29b      	uxth	r3, r3
 8008344:	f023 030f 	bic.w	r3, r3, #15
 8008348:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	085b      	lsrs	r3, r3, #1
 800834e:	b29b      	uxth	r3, r3
 8008350:	f003 0307 	and.w	r3, r3, #7
 8008354:	b29a      	uxth	r2, r3
 8008356:	89fb      	ldrh	r3, [r7, #14]
 8008358:	4313      	orrs	r3, r2
 800835a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	89fa      	ldrh	r2, [r7, #14]
 8008362:	60da      	str	r2, [r3, #12]
 8008364:	e04e      	b.n	8008404 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	77bb      	strb	r3, [r7, #30]
 800836a:	e04b      	b.n	8008404 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800836c:	7ffb      	ldrb	r3, [r7, #31]
 800836e:	2b08      	cmp	r3, #8
 8008370:	d827      	bhi.n	80083c2 <UART_SetConfig+0x34a>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <UART_SetConfig+0x300>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	0800839d 	.word	0x0800839d
 800837c:	080083a5 	.word	0x080083a5
 8008380:	080083ad 	.word	0x080083ad
 8008384:	080083c3 	.word	0x080083c3
 8008388:	080083b3 	.word	0x080083b3
 800838c:	080083c3 	.word	0x080083c3
 8008390:	080083c3 	.word	0x080083c3
 8008394:	080083c3 	.word	0x080083c3
 8008398:	080083bb 	.word	0x080083bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800839c:	f7fe fd96 	bl	8006ecc <HAL_RCC_GetPCLK1Freq>
 80083a0:	61b8      	str	r0, [r7, #24]
        break;
 80083a2:	e013      	b.n	80083cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083a4:	f7fe fdb4 	bl	8006f10 <HAL_RCC_GetPCLK2Freq>
 80083a8:	61b8      	str	r0, [r7, #24]
        break;
 80083aa:	e00f      	b.n	80083cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083ac:	4b1b      	ldr	r3, [pc, #108]	; (800841c <UART_SetConfig+0x3a4>)
 80083ae:	61bb      	str	r3, [r7, #24]
        break;
 80083b0:	e00c      	b.n	80083cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083b2:	f7fe fd15 	bl	8006de0 <HAL_RCC_GetSysClockFreq>
 80083b6:	61b8      	str	r0, [r7, #24]
        break;
 80083b8:	e008      	b.n	80083cc <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083be:	61bb      	str	r3, [r7, #24]
        break;
 80083c0:	e004      	b.n	80083cc <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	77bb      	strb	r3, [r7, #30]
        break;
 80083ca:	bf00      	nop
    }

    if (pclk != 0U)
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d018      	beq.n	8008404 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	085a      	lsrs	r2, r3, #1
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	441a      	add	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	2b0f      	cmp	r3, #15
 80083ea:	d909      	bls.n	8008400 <UART_SetConfig+0x388>
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083f2:	d205      	bcs.n	8008400 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60da      	str	r2, [r3, #12]
 80083fe:	e001      	b.n	8008404 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2200      	movs	r2, #0
 8008408:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008410:	7fbb      	ldrb	r3, [r7, #30]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	007a1200 	.word	0x007a1200

08008420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	f003 0301 	and.w	r3, r3, #1
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00a      	beq.n	800844a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	f003 0302 	and.w	r3, r3, #2
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00a      	beq.n	800848e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008492:	f003 0308 	and.w	r3, r3, #8
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	430a      	orrs	r2, r1
 80084ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b4:	f003 0310 	and.w	r3, r3, #16
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	430a      	orrs	r2, r1
 80084d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d01a      	beq.n	8008536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800851e:	d10a      	bne.n	8008536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00a      	beq.n	8008558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	605a      	str	r2, [r3, #4]
  }
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b098      	sub	sp, #96	; 0x60
 8008568:	af02      	add	r7, sp, #8
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008574:	f7fa ffea 	bl	800354c <HAL_GetTick>
 8008578:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b08      	cmp	r3, #8
 8008586:	d12e      	bne.n	80085e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008590:	2200      	movs	r2, #0
 8008592:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f000 f88c 	bl	80086b4 <UART_WaitOnFlagUntilTimeout>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d021      	beq.n	80085e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085b6:	653b      	str	r3, [r7, #80]	; 0x50
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	461a      	mov	r2, r3
 80085be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c0:	647b      	str	r3, [r7, #68]	; 0x44
 80085c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e6      	bne.n	80085a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e062      	b.n	80086ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b04      	cmp	r3, #4
 80085f2:	d149      	bne.n	8008688 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085fc:	2200      	movs	r2, #0
 80085fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f856 	bl	80086b4 <UART_WaitOnFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d03c      	beq.n	8008688 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	623b      	str	r3, [r7, #32]
   return(result);
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862c:	633b      	str	r3, [r7, #48]	; 0x30
 800862e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e6      	bne.n	800860e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f023 0301 	bic.w	r3, r3, #1
 8008656:	64bb      	str	r3, [r7, #72]	; 0x48
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008660:	61fa      	str	r2, [r7, #28]
 8008662:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	69b9      	ldr	r1, [r7, #24]
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	617b      	str	r3, [r7, #20]
   return(result);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e5      	bne.n	8008640 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e011      	b.n	80086ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2220      	movs	r2, #32
 800868c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2220      	movs	r2, #32
 8008692:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3758      	adds	r7, #88	; 0x58
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	603b      	str	r3, [r7, #0]
 80086c0:	4613      	mov	r3, r2
 80086c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086c4:	e049      	b.n	800875a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c6:	69bb      	ldr	r3, [r7, #24]
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086cc:	d045      	beq.n	800875a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ce:	f7fa ff3d 	bl	800354c <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	69ba      	ldr	r2, [r7, #24]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d302      	bcc.n	80086e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e048      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0304 	and.w	r3, r3, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d031      	beq.n	800875a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69db      	ldr	r3, [r3, #28]
 80086fc:	f003 0308 	and.w	r3, r3, #8
 8008700:	2b08      	cmp	r3, #8
 8008702:	d110      	bne.n	8008726 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2208      	movs	r2, #8
 800870a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f000 f838 	bl	8008782 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2208      	movs	r2, #8
 8008716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e029      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008734:	d111      	bne.n	800875a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800873e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f81e 	bl	8008782 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2220      	movs	r2, #32
 800874a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e00f      	b.n	800877a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	69da      	ldr	r2, [r3, #28]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4013      	ands	r3, r2
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	429a      	cmp	r2, r3
 8008768:	bf0c      	ite	eq
 800876a:	2301      	moveq	r3, #1
 800876c:	2300      	movne	r3, #0
 800876e:	b2db      	uxtb	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	429a      	cmp	r2, r3
 8008776:	d0a6      	beq.n	80086c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008782:	b480      	push	{r7}
 8008784:	b095      	sub	sp, #84	; 0x54
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008792:	e853 3f00 	ldrex	r3, [r3]
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800879e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087a8:	643b      	str	r3, [r7, #64]	; 0x40
 80087aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087b0:	e841 2300 	strex	r3, r2, [r1]
 80087b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1e6      	bne.n	800878a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	3308      	adds	r3, #8
 80087c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	e853 3f00 	ldrex	r3, [r3]
 80087ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	f023 0301 	bic.w	r3, r3, #1
 80087d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	3308      	adds	r3, #8
 80087da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e5      	bne.n	80087bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d118      	bne.n	800882a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	60bb      	str	r3, [r7, #8]
   return(result);
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	f023 0310 	bic.w	r3, r3, #16
 800880c:	647b      	str	r3, [r7, #68]	; 0x44
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008816:	61bb      	str	r3, [r7, #24]
 8008818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6979      	ldr	r1, [r7, #20]
 800881c:	69ba      	ldr	r2, [r7, #24]
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	613b      	str	r3, [r7, #16]
   return(result);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e6      	bne.n	80087f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800883e:	bf00      	nop
 8008840:	3754      	adds	r7, #84	; 0x54
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <_ZN4blib6ButtonC1Ev>:
#include "Button.h"
#include "Monitor.h"

namespace blib
{
    Button::Button()
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4618      	mov	r0, r3
 8008858:	f000 f850 	bl	80088fc <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 800885c:	4a03      	ldr	r2, [pc, #12]	; (800886c <_ZN4blib6ButtonC1Ev+0x20>)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
    {

    }
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	0800c768 	.word	0x0800c768

08008870 <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	4a05      	ldr	r2, [pc, #20]	; (8008890 <_ZN4blib6ButtonD1Ev+0x20>)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f84b 	bl	800891c <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
    {

    }
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	0800c768 	.word	0x0800c768

08008894 <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
    }
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff ffe7 	bl	8008870 <_ZN4blib6ButtonD1Ev>
 80088a2:	2108      	movs	r1, #8
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fb3d 	bl	8008f24 <_ZdlPvj>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4618      	mov	r0, r3
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	605a      	str	r2, [r3, #4]
    }
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
        return mLatestPressedButton;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
    }
 80088dc:	4618      	mov	r0, r3
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
    }
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
                {
 8008904:	4a04      	ldr	r2, [pc, #16]	; (8008918 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	601a      	str	r2, [r3, #0]
                }
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	0800c778 	.word	0x0800c778

0800891c <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
                }
 8008924:	4a04      	ldr	r2, [pc, #16]	; (8008938 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4618      	mov	r0, r3
 800892e:	370c      	adds	r7, #12
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr
 8008938:	0800c778 	.word	0x0800c778

0800893c <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 800893c:	b580      	push	{r7, lr}
 800893e:	b082      	sub	sp, #8
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
                }
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff ffe9 	bl	800891c <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 800894a:	2104      	movs	r1, #4
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fae9 	bl	8008f24 <_ZdlPvj>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>:
#include "Lcd.h"

namespace blib
{

    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	70fb      	strb	r3, [r7, #3]
            address)
 800896a:	4a0a      	ldr	r2, [pc, #40]	; (8008994 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh+0x38>)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	601a      	str	r2, [r3, #0]
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	605a      	str	r2, [r3, #4]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	609a      	str	r2, [r3, #8]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	78fa      	ldrb	r2, [r7, #3]
 8008980:	731a      	strb	r2, [r3, #12]
    {
        init();
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 f9ea 	bl	8008d5c <_ZN4blib3Lcd4initEv>
    }
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	0800c788 	.word	0x0800c788

08008998 <_ZN4blib3LcdD1Ev>:
    Lcd::~Lcd()
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	4a04      	ldr	r2, [pc, #16]	; (80089b4 <_ZN4blib3LcdD1Ev+0x1c>)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	601a      	str	r2, [r3, #0]
    {

    }
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4618      	mov	r0, r3
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	0800c788 	.word	0x0800c788

080089b8 <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
    }
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7ff ffe9 	bl	8008998 <_ZN4blib3LcdD1Ev>
 80089c6:	2114      	movs	r1, #20
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 faab 	bl	8008f24 <_ZdlPvj>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4618      	mov	r0, r3
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af02      	add	r7, sp, #8
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	73fb      	strb	r3, [r7, #15]
 80089e8:	2300      	movs	r3, #0
 80089ea:	73bb      	strb	r3, [r7, #14]
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 80089ec:	78fb      	ldrb	r3, [r7, #3]
 80089ee:	f023 030f 	bic.w	r3, r3, #15
 80089f2:	73fb      	strb	r3, [r7, #15]
        dataLow = ((command << 4) & 0xF0);
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	011b      	lsls	r3, r3, #4
 80089f8:	73bb      	strb	r3, [r7, #14]
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 80089fa:	7bfb      	ldrb	r3, [r7, #15]
 80089fc:	f043 030c 	orr.w	r3, r3, #12
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	723b      	strb	r3, [r7, #8]
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	f043 0308 	orr.w	r3, r3, #8
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	727b      	strb	r3, [r7, #9]
        data[2] = dataLow | 0x0C;
 8008a0e:	7bbb      	ldrb	r3, [r7, #14]
 8008a10:	f043 030c 	orr.w	r3, r3, #12
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	72bb      	strb	r3, [r7, #10]
        data[3] = dataLow | 0x08;
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	f043 0308 	orr.w	r3, r3, #8
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6898      	ldr	r0, [r3, #8]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7b1b      	ldrb	r3, [r3, #12]
 8008a2a:	b299      	uxth	r1, r3
 8008a2c:	f107 0208 	add.w	r2, r7, #8
 8008a30:	2364      	movs	r3, #100	; 0x64
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	2304      	movs	r3, #4
 8008a36:	f7fc fc67 	bl	8005308 <HAL_I2C_Master_Transmit>
    }
 8008a3a:	bf00      	nop
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b086      	sub	sp, #24
 8008a46:	af02      	add	r7, sp, #8
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
 8008a52:	2300      	movs	r3, #0
 8008a54:	73bb      	strb	r3, [r7, #14]
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	f023 030f 	bic.w	r3, r3, #15
 8008a5c:	73fb      	strb	r3, [r7, #15]
        dataLow = ((data << 4) & 0xF0);
 8008a5e:	78fb      	ldrb	r3, [r7, #3]
 8008a60:	011b      	lsls	r3, r3, #4
 8008a62:	73bb      	strb	r3, [r7, #14]
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	f043 030d 	orr.w	r3, r3, #13
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	723b      	strb	r3, [r7, #8]
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 8008a6e:	7bfb      	ldrb	r3, [r7, #15]
 8008a70:	f043 0309 	orr.w	r3, r3, #9
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	727b      	strb	r3, [r7, #9]
        dataBuf[2] = dataLow | 0x0D;
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	f043 030d 	orr.w	r3, r3, #13
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	72bb      	strb	r3, [r7, #10]
        dataBuf[3] = dataLow | 0x09;
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	f043 0309 	orr.w	r3, r3, #9
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6898      	ldr	r0, [r3, #8]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7b1b      	ldrb	r3, [r3, #12]
 8008a94:	b299      	uxth	r1, r3
 8008a96:	f107 0208 	add.w	r2, r7, #8
 8008a9a:	2364      	movs	r3, #100	; 0x64
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	2304      	movs	r3, #4
 8008aa0:	f7fc fc32 	bl	8005308 <HAL_I2C_Master_Transmit>
    }
 8008aa4:	bf00      	nop
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <_ZN4blib6ischarEPKc>:
    {

    }

    char ischar(const char *string)
    {
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
        return (string != nullptr) ? *(string) : ' ';
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d002      	beq.n	8008ac0 <_ZN4blib6ischarEPKc+0x14>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	e000      	b.n	8008ac2 <_ZN4blib6ischarEPKc+0x16>
 8008ac0:	2320      	movs	r3, #32
    }
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
	...

08008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>:
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 8008ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ad2:	b0ab      	sub	sp, #172	; 0xac
 8008ad4:	af14      	add	r7, sp, #80	; 0x50
 8008ad6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8008ad8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ada:	460b      	mov	r3, r1
 8008adc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        LOGI("|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|", ischar(string),
 8008ae6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008ae8:	f7ff ffe0 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008aec:	4603      	mov	r3, r0
 8008aee:	643b      	str	r3, [r7, #64]	; 0x40
 8008af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af2:	3301      	adds	r3, #1
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff ffd9 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008afa:	4603      	mov	r3, r0
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b00:	3302      	adds	r3, #2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff ffd2 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b0e:	3303      	adds	r3, #3
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7ff ffcb 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b16:	4603      	mov	r3, r0
 8008b18:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff ffc4 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b24:	4603      	mov	r3, r0
 8008b26:	633b      	str	r3, [r7, #48]	; 0x30
 8008b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b2a:	3305      	adds	r3, #5
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff ffbd 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b32:	4603      	mov	r3, r0
 8008b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b38:	3306      	adds	r3, #6
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff ffb6 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b40:	4603      	mov	r3, r0
 8008b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b46:	3307      	adds	r3, #7
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff ffaf 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
 8008b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b54:	3308      	adds	r3, #8
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff ffa8 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	623b      	str	r3, [r7, #32]
 8008b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b62:	3309      	adds	r3, #9
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff ffa1 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	61fb      	str	r3, [r7, #28]
 8008b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b70:	330a      	adds	r3, #10
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff ff9a 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b7e:	330b      	adds	r3, #11
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff ff93 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b86:	4603      	mov	r3, r0
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b8c:	330c      	adds	r3, #12
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff ff8c 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008b94:	4603      	mov	r3, r0
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9a:	330d      	adds	r3, #13
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff ff85 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ba8:	330e      	adds	r3, #14
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7ff ff7e 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	60bb      	str	r3, [r7, #8]
 8008bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb6:	330f      	adds	r3, #15
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff ff77 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc4:	3310      	adds	r3, #16
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff ff70 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	461e      	mov	r6, r3
 8008bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd2:	3311      	adds	r3, #17
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff ff69 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	461d      	mov	r5, r3
 8008bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be0:	3312      	adds	r3, #18
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7ff ff62 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008be8:	4603      	mov	r3, r0
 8008bea:	461c      	mov	r4, r3
 8008bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bee:	3313      	adds	r3, #19
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff ff5b 	bl	8008aac <_ZN4blib6ischarEPKc>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bfa:	9412      	str	r4, [sp, #72]	; 0x48
 8008bfc:	9511      	str	r5, [sp, #68]	; 0x44
 8008bfe:	9610      	str	r6, [sp, #64]	; 0x40
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	920f      	str	r2, [sp, #60]	; 0x3c
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	920e      	str	r2, [sp, #56]	; 0x38
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	920d      	str	r2, [sp, #52]	; 0x34
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	920c      	str	r2, [sp, #48]	; 0x30
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	920a      	str	r2, [sp, #40]	; 0x28
 8008c18:	69fa      	ldr	r2, [r7, #28]
 8008c1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008c1c:	6a3a      	ldr	r2, [r7, #32]
 8008c1e:	9208      	str	r2, [sp, #32]
 8008c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c22:	9207      	str	r2, [sp, #28]
 8008c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c26:	9206      	str	r2, [sp, #24]
 8008c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c2a:	9205      	str	r2, [sp, #20]
 8008c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2e:	9204      	str	r2, [sp, #16]
 8008c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c32:	9203      	str	r2, [sp, #12]
 8008c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c36:	9202      	str	r2, [sp, #8]
 8008c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c3a:	9201      	str	r2, [sp, #4]
 8008c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	4b31      	ldr	r3, [pc, #196]	; (8008d08 <_ZN4blib3Lcd11displayLineEhhPKc+0x238>)
 8008c42:	225d      	movs	r2, #93	; 0x5d
 8008c44:	4931      	ldr	r1, [pc, #196]	; (8008d0c <_ZN4blib3Lcd11displayLineEhhPKc+0x23c>)
 8008c46:	4832      	ldr	r0, [pc, #200]	; (8008d10 <_ZN4blib3Lcd11displayLineEhhPKc+0x240>)
 8008c48:	f000 f8ea 	bl	8008e20 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_>
                ischar(string + 5), ischar(string + 6), ischar(string + 7), ischar(string + 8),
                ischar(string + 9), ischar(string + 10), ischar(string + 11), ischar(string + 12),
                ischar(string + 13), ischar(string + 14), ischar(string + 15), ischar(string + 16),
                ischar(string + 17), ischar(string + 18), ischar(string + 19));

        uint8_t command = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        switch (mLcdType)
 8008c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d03c      	beq.n	8008cd4 <_ZN4blib3Lcd11displayLineEhhPKc+0x204>
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d000      	beq.n	8008c60 <_ZN4blib3Lcd11displayLineEhhPKc+0x190>
                    default:
                        break;
                }
                break;
            default:
                break;
 8008c5e:	e03a      	b.n	8008cd6 <_ZN4blib3Lcd11displayLineEhhPKc+0x206>
                switch (row)
 8008c60:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d833      	bhi.n	8008cd0 <_ZN4blib3Lcd11displayLineEhhPKc+0x200>
 8008c68:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <_ZN4blib3Lcd11displayLineEhhPKc+0x1a0>)
 8008c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6e:	bf00      	nop
 8008c70:	08008c81 	.word	0x08008c81
 8008c74:	08008c8f 	.word	0x08008c8f
 8008c78:	08008ca5 	.word	0x08008ca5
 8008c7c:	08008cbb 	.word	0x08008cbb
                        command = 0x80 | (col + 0x00);
 8008c80:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008c8c:	e021      	b.n	8008cd2 <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x40);
 8008c8e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008c92:	3340      	adds	r3, #64	; 0x40
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	b25b      	sxtb	r3, r3
 8008c98:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c9c:	b25b      	sxtb	r3, r3
 8008c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008ca2:	e016      	b.n	8008cd2 <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x14);
 8008ca4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008ca8:	3314      	adds	r3, #20
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	b25b      	sxtb	r3, r3
 8008cae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cb2:	b25b      	sxtb	r3, r3
 8008cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008cb8:	e00b      	b.n	8008cd2 <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x54);
 8008cba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8008cbe:	3354      	adds	r3, #84	; 0x54
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	b25b      	sxtb	r3, r3
 8008cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8008cce:	e000      	b.n	8008cd2 <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        break;
 8008cd0:	bf00      	nop
                break;
 8008cd2:	e000      	b.n	8008cd6 <_ZN4blib3Lcd11displayLineEhhPKc+0x206>
                break;
 8008cd4:	bf00      	nop
        }

        sendCmd(command);
 8008cd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008cde:	f7ff fe7b 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 8008ce2:	e008      	b.n	8008cf6 <_ZN4blib3Lcd11displayLineEhhPKc+0x226>
        {
            sendData(*string);
 8008ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008cec:	f7ff fea9 	bl	8008a42 <_ZN4blib3Lcd8sendDataEh>
            string++;
 8008cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	647b      	str	r3, [r7, #68]	; 0x44
        while (*string)
 8008cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1f2      	bne.n	8008ce4 <_ZN4blib3Lcd11displayLineEhhPKc+0x214>
        }
    }
 8008cfe:	bf00      	nop
 8008d00:	bf00      	nop
 8008d02:	375c      	adds	r7, #92	; 0x5c
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d08:	0800c644 	.word	0x0800c644
 8008d0c:	0800c650 	.word	0x0800c650
 8008d10:	0800c658 	.word	0x0800c658

08008d14 <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
        const char *emptyLine = "                    ";
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <_ZN4blib3Lcd12clearDisplayEv+0x44>)
 8008d1e:	60fb      	str	r3, [r7, #12]
        displayLine(0, 0, emptyLine);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff fed2 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
        displayLine(1, 0, emptyLine);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2101      	movs	r1, #1
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f7ff fecc 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
        displayLine(2, 0, emptyLine);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2102      	movs	r1, #2
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff fec6 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
        displayLine(3, 0, emptyLine);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	2103      	movs	r1, #3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f7ff fec0 	bl	8008ad0 <_ZN4blib3Lcd11displayLineEhhPKc>
    }
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	0800c6a4 	.word	0x0800c6a4

08008d5c <_ZN4blib3Lcd4initEv>:
    void Lcd::init()
    {
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2206      	movs	r2, #6
 8008d68:	735a      	strb	r2, [r3, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2228      	movs	r2, #40	; 0x28
 8008d6e:	73da      	strb	r2, [r3, #15]
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2208      	movs	r2, #8
 8008d74:	739a      	strb	r2, [r3, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_BLACKLIGHT;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2208      	movs	r2, #8
 8008d7a:	741a      	strb	r2, [r3, #16]

        HAL_Delay(50);
 8008d7c:	2032      	movs	r0, #50	; 0x32
 8008d7e:	f7fa fbf1 	bl	8003564 <HAL_Delay>
        sendCmd(0x30);
 8008d82:	2130      	movs	r1, #48	; 0x30
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f7ff fe27 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 8008d8a:	2005      	movs	r0, #5
 8008d8c:	f7fa fbea 	bl	8003564 <HAL_Delay>
        sendCmd(0x30);
 8008d90:	2130      	movs	r1, #48	; 0x30
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff fe20 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008d98:	2001      	movs	r0, #1
 8008d9a:	f7fa fbe3 	bl	8003564 <HAL_Delay>
        sendCmd(0x30);
 8008d9e:	2130      	movs	r1, #48	; 0x30
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7ff fe19 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8008da6:	200a      	movs	r0, #10
 8008da8:	f7fa fbdc 	bl	8003564 <HAL_Delay>
        sendCmd(0x20);
 8008dac:	2120      	movs	r1, #32
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff fe12 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 8008db4:	200a      	movs	r0, #10
 8008db6:	f7fa fbd5 	bl	8003564 <HAL_Delay>

        sendCmd(mFunctionSet);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7bdb      	ldrb	r3, [r3, #15]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff fe09 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008dc6:	2001      	movs	r0, #1
 8008dc8:	f7fa fbcc 	bl	8003564 <HAL_Delay>
        sendCmd(mDisplayControl);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	7b9b      	ldrb	r3, [r3, #14]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff fe00 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008dd8:	2001      	movs	r0, #1
 8008dda:	f7fa fbc3 	bl	8003564 <HAL_Delay>
        sendCmd(0x01);    //clear display
 8008dde:	2101      	movs	r1, #1
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7ff fdf9 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 8008de6:	2002      	movs	r0, #2
 8008de8:	f7fa fbbc 	bl	8003564 <HAL_Delay>
        sendCmd(mEntryMode);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	7b5b      	ldrb	r3, [r3, #13]
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fdf0 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008df8:	2001      	movs	r0, #1
 8008dfa:	f7fa fbb3 	bl	8003564 <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	7b9b      	ldrb	r3, [r3, #14]
 8008e02:	f043 0304 	orr.w	r3, r3, #4
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff fde4 	bl	80089d8 <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 8008e10:	2001      	movs	r0, #1
 8008e12:	f7fa fba7 	bl	8003564 <HAL_Delay>
    }
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 8008e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e22:	b0a9      	sub	sp, #164	; 0xa4
 8008e24:	af16      	add	r7, sp, #88	; 0x58
 8008e26:	6478      	str	r0, [r7, #68]	; 0x44
 8008e28:	6439      	str	r1, [r7, #64]	; 0x40
 8008e2a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e2c:	63bb      	str	r3, [r7, #56]	; 0x38
                print("[>]  ");
 8008e2e:	483a      	ldr	r0, [pc, #232]	; (8008f18 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xf8>)
 8008e30:	f7f7 ff52 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 8008e34:	f897 6060 	ldrb.w	r6, [r7, #96]	; 0x60
 8008e38:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8008e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e3e:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8008e42:	633a      	str	r2, [r7, #48]	; 0x30
 8008e44:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 8008e48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008e4a:	f897 0070 	ldrb.w	r0, [r7, #112]	; 0x70
 8008e4e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e50:	f897 4074 	ldrb.w	r4, [r7, #116]	; 0x74
 8008e54:	627c      	str	r4, [r7, #36]	; 0x24
 8008e56:	f897 5078 	ldrb.w	r5, [r7, #120]	; 0x78
 8008e5a:	623d      	str	r5, [r7, #32]
 8008e5c:	f897 c07c 	ldrb.w	ip, [r7, #124]	; 0x7c
 8008e60:	4663      	mov	r3, ip
 8008e62:	61fb      	str	r3, [r7, #28]
 8008e64:	f897 c080 	ldrb.w	ip, [r7, #128]	; 0x80
 8008e68:	4662      	mov	r2, ip
 8008e6a:	61ba      	str	r2, [r7, #24]
 8008e6c:	f897 c084 	ldrb.w	ip, [r7, #132]	; 0x84
 8008e70:	4661      	mov	r1, ip
 8008e72:	6179      	str	r1, [r7, #20]
 8008e74:	f897 c088 	ldrb.w	ip, [r7, #136]	; 0x88
 8008e78:	4660      	mov	r0, ip
 8008e7a:	6138      	str	r0, [r7, #16]
 8008e7c:	f897 c08c 	ldrb.w	ip, [r7, #140]	; 0x8c
 8008e80:	4664      	mov	r4, ip
 8008e82:	60fc      	str	r4, [r7, #12]
 8008e84:	f897 c090 	ldrb.w	ip, [r7, #144]	; 0x90
 8008e88:	4665      	mov	r5, ip
 8008e8a:	60bd      	str	r5, [r7, #8]
 8008e8c:	f897 c094 	ldrb.w	ip, [r7, #148]	; 0x94
 8008e90:	4663      	mov	r3, ip
 8008e92:	607b      	str	r3, [r7, #4]
 8008e94:	f897 5098 	ldrb.w	r5, [r7, #152]	; 0x98
 8008e98:	f897 409c 	ldrb.w	r4, [r7, #156]	; 0x9c
 8008e9c:	f897 00a0 	ldrb.w	r0, [r7, #160]	; 0xa0
 8008ea0:	f897 10a4 	ldrb.w	r1, [r7, #164]	; 0xa4
 8008ea4:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8008ea8:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8008eac:	9315      	str	r3, [sp, #84]	; 0x54
 8008eae:	9214      	str	r2, [sp, #80]	; 0x50
 8008eb0:	9113      	str	r1, [sp, #76]	; 0x4c
 8008eb2:	9012      	str	r0, [sp, #72]	; 0x48
 8008eb4:	9411      	str	r4, [sp, #68]	; 0x44
 8008eb6:	9510      	str	r5, [sp, #64]	; 0x40
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ebc:	68bd      	ldr	r5, [r7, #8]
 8008ebe:	950e      	str	r5, [sp, #56]	; 0x38
 8008ec0:	68fc      	ldr	r4, [r7, #12]
 8008ec2:	940d      	str	r4, [sp, #52]	; 0x34
 8008ec4:	6938      	ldr	r0, [r7, #16]
 8008ec6:	900c      	str	r0, [sp, #48]	; 0x30
 8008ec8:	6979      	ldr	r1, [r7, #20]
 8008eca:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	920a      	str	r2, [sp, #40]	; 0x28
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ed4:	6a3d      	ldr	r5, [r7, #32]
 8008ed6:	9508      	str	r5, [sp, #32]
 8008ed8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008eda:	9407      	str	r4, [sp, #28]
 8008edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ede:	9006      	str	r0, [sp, #24]
 8008ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ee2:	9105      	str	r1, [sp, #20]
 8008ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ee6:	9204      	str	r2, [sp, #16]
 8008ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eea:	9303      	str	r3, [sp, #12]
 8008eec:	9602      	str	r6, [sp, #8]
 8008eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008efa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008efe:	4807      	ldr	r0, [pc, #28]	; (8008f1c <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xfc>)
 8008f00:	f000 fe1a 	bl	8009b38 <sniprintf>
                print(mBuffer);
 8008f04:	4805      	ldr	r0, [pc, #20]	; (8008f1c <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xfc>)
 8008f06:	f7f7 fee7 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8008f0a:	4805      	ldr	r0, [pc, #20]	; (8008f20 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0x100>)
 8008f0c:	f7f7 fee4 	bl	8000cd8 <_ZN4blib6Logger5printEPKc>
            }
 8008f10:	bf00      	nop
 8008f12:	374c      	adds	r7, #76	; 0x4c
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f18:	0800c6bc 	.word	0x0800c6bc
 8008f1c:	200003e8 	.word	0x200003e8
 8008f20:	0800c6c4 	.word	0x0800c6c4

08008f24 <_ZdlPvj>:
 8008f24:	f000 b811 	b.w	8008f4a <_ZdlPv>

08008f28 <_Znwj>:
 8008f28:	2801      	cmp	r0, #1
 8008f2a:	bf38      	it	cc
 8008f2c:	2001      	movcc	r0, #1
 8008f2e:	b510      	push	{r4, lr}
 8008f30:	4604      	mov	r4, r0
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 f81c 	bl	8008f70 <malloc>
 8008f38:	b100      	cbz	r0, 8008f3c <_Znwj+0x14>
 8008f3a:	bd10      	pop	{r4, pc}
 8008f3c:	f000 f808 	bl	8008f50 <_ZSt15get_new_handlerv>
 8008f40:	b908      	cbnz	r0, 8008f46 <_Znwj+0x1e>
 8008f42:	f000 f80d 	bl	8008f60 <abort>
 8008f46:	4780      	blx	r0
 8008f48:	e7f3      	b.n	8008f32 <_Znwj+0xa>

08008f4a <_ZdlPv>:
 8008f4a:	f000 b819 	b.w	8008f80 <free>
	...

08008f50 <_ZSt15get_new_handlerv>:
 8008f50:	4b02      	ldr	r3, [pc, #8]	; (8008f5c <_ZSt15get_new_handlerv+0xc>)
 8008f52:	6818      	ldr	r0, [r3, #0]
 8008f54:	f3bf 8f5b 	dmb	ish
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	200007e8 	.word	0x200007e8

08008f60 <abort>:
 8008f60:	b508      	push	{r3, lr}
 8008f62:	2006      	movs	r0, #6
 8008f64:	f000 fe90 	bl	8009c88 <raise>
 8008f68:	2001      	movs	r0, #1
 8008f6a:	f7fa f9ab 	bl	80032c4 <_exit>
	...

08008f70 <malloc>:
 8008f70:	4b02      	ldr	r3, [pc, #8]	; (8008f7c <malloc+0xc>)
 8008f72:	4601      	mov	r1, r0
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	f000 b82b 	b.w	8008fd0 <_malloc_r>
 8008f7a:	bf00      	nop
 8008f7c:	20000070 	.word	0x20000070

08008f80 <free>:
 8008f80:	4b02      	ldr	r3, [pc, #8]	; (8008f8c <free+0xc>)
 8008f82:	4601      	mov	r1, r0
 8008f84:	6818      	ldr	r0, [r3, #0]
 8008f86:	f001 bdad 	b.w	800aae4 <_free_r>
 8008f8a:	bf00      	nop
 8008f8c:	20000070 	.word	0x20000070

08008f90 <sbrk_aligned>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	4e0e      	ldr	r6, [pc, #56]	; (8008fcc <sbrk_aligned+0x3c>)
 8008f94:	460c      	mov	r4, r1
 8008f96:	6831      	ldr	r1, [r6, #0]
 8008f98:	4605      	mov	r5, r0
 8008f9a:	b911      	cbnz	r1, 8008fa2 <sbrk_aligned+0x12>
 8008f9c:	f000 fec8 	bl	8009d30 <_sbrk_r>
 8008fa0:	6030      	str	r0, [r6, #0]
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f000 fec3 	bl	8009d30 <_sbrk_r>
 8008faa:	1c43      	adds	r3, r0, #1
 8008fac:	d00a      	beq.n	8008fc4 <sbrk_aligned+0x34>
 8008fae:	1cc4      	adds	r4, r0, #3
 8008fb0:	f024 0403 	bic.w	r4, r4, #3
 8008fb4:	42a0      	cmp	r0, r4
 8008fb6:	d007      	beq.n	8008fc8 <sbrk_aligned+0x38>
 8008fb8:	1a21      	subs	r1, r4, r0
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 feb8 	bl	8009d30 <_sbrk_r>
 8008fc0:	3001      	adds	r0, #1
 8008fc2:	d101      	bne.n	8008fc8 <sbrk_aligned+0x38>
 8008fc4:	f04f 34ff 	mov.w	r4, #4294967295
 8008fc8:	4620      	mov	r0, r4
 8008fca:	bd70      	pop	{r4, r5, r6, pc}
 8008fcc:	200007f0 	.word	0x200007f0

08008fd0 <_malloc_r>:
 8008fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd4:	1ccd      	adds	r5, r1, #3
 8008fd6:	f025 0503 	bic.w	r5, r5, #3
 8008fda:	3508      	adds	r5, #8
 8008fdc:	2d0c      	cmp	r5, #12
 8008fde:	bf38      	it	cc
 8008fe0:	250c      	movcc	r5, #12
 8008fe2:	2d00      	cmp	r5, #0
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	db01      	blt.n	8008fec <_malloc_r+0x1c>
 8008fe8:	42a9      	cmp	r1, r5
 8008fea:	d905      	bls.n	8008ff8 <_malloc_r+0x28>
 8008fec:	230c      	movs	r3, #12
 8008fee:	603b      	str	r3, [r7, #0]
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80090cc <_malloc_r+0xfc>
 8008ffc:	f000 f868 	bl	80090d0 <__malloc_lock>
 8009000:	f8d8 3000 	ldr.w	r3, [r8]
 8009004:	461c      	mov	r4, r3
 8009006:	bb5c      	cbnz	r4, 8009060 <_malloc_r+0x90>
 8009008:	4629      	mov	r1, r5
 800900a:	4638      	mov	r0, r7
 800900c:	f7ff ffc0 	bl	8008f90 <sbrk_aligned>
 8009010:	1c43      	adds	r3, r0, #1
 8009012:	4604      	mov	r4, r0
 8009014:	d155      	bne.n	80090c2 <_malloc_r+0xf2>
 8009016:	f8d8 4000 	ldr.w	r4, [r8]
 800901a:	4626      	mov	r6, r4
 800901c:	2e00      	cmp	r6, #0
 800901e:	d145      	bne.n	80090ac <_malloc_r+0xdc>
 8009020:	2c00      	cmp	r4, #0
 8009022:	d048      	beq.n	80090b6 <_malloc_r+0xe6>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	4631      	mov	r1, r6
 8009028:	4638      	mov	r0, r7
 800902a:	eb04 0903 	add.w	r9, r4, r3
 800902e:	f000 fe7f 	bl	8009d30 <_sbrk_r>
 8009032:	4581      	cmp	r9, r0
 8009034:	d13f      	bne.n	80090b6 <_malloc_r+0xe6>
 8009036:	6821      	ldr	r1, [r4, #0]
 8009038:	1a6d      	subs	r5, r5, r1
 800903a:	4629      	mov	r1, r5
 800903c:	4638      	mov	r0, r7
 800903e:	f7ff ffa7 	bl	8008f90 <sbrk_aligned>
 8009042:	3001      	adds	r0, #1
 8009044:	d037      	beq.n	80090b6 <_malloc_r+0xe6>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	442b      	add	r3, r5
 800904a:	6023      	str	r3, [r4, #0]
 800904c:	f8d8 3000 	ldr.w	r3, [r8]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d038      	beq.n	80090c6 <_malloc_r+0xf6>
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	42a2      	cmp	r2, r4
 8009058:	d12b      	bne.n	80090b2 <_malloc_r+0xe2>
 800905a:	2200      	movs	r2, #0
 800905c:	605a      	str	r2, [r3, #4]
 800905e:	e00f      	b.n	8009080 <_malloc_r+0xb0>
 8009060:	6822      	ldr	r2, [r4, #0]
 8009062:	1b52      	subs	r2, r2, r5
 8009064:	d41f      	bmi.n	80090a6 <_malloc_r+0xd6>
 8009066:	2a0b      	cmp	r2, #11
 8009068:	d917      	bls.n	800909a <_malloc_r+0xca>
 800906a:	1961      	adds	r1, r4, r5
 800906c:	42a3      	cmp	r3, r4
 800906e:	6025      	str	r5, [r4, #0]
 8009070:	bf18      	it	ne
 8009072:	6059      	strne	r1, [r3, #4]
 8009074:	6863      	ldr	r3, [r4, #4]
 8009076:	bf08      	it	eq
 8009078:	f8c8 1000 	streq.w	r1, [r8]
 800907c:	5162      	str	r2, [r4, r5]
 800907e:	604b      	str	r3, [r1, #4]
 8009080:	4638      	mov	r0, r7
 8009082:	f104 060b 	add.w	r6, r4, #11
 8009086:	f000 f829 	bl	80090dc <__malloc_unlock>
 800908a:	f026 0607 	bic.w	r6, r6, #7
 800908e:	1d23      	adds	r3, r4, #4
 8009090:	1af2      	subs	r2, r6, r3
 8009092:	d0ae      	beq.n	8008ff2 <_malloc_r+0x22>
 8009094:	1b9b      	subs	r3, r3, r6
 8009096:	50a3      	str	r3, [r4, r2]
 8009098:	e7ab      	b.n	8008ff2 <_malloc_r+0x22>
 800909a:	42a3      	cmp	r3, r4
 800909c:	6862      	ldr	r2, [r4, #4]
 800909e:	d1dd      	bne.n	800905c <_malloc_r+0x8c>
 80090a0:	f8c8 2000 	str.w	r2, [r8]
 80090a4:	e7ec      	b.n	8009080 <_malloc_r+0xb0>
 80090a6:	4623      	mov	r3, r4
 80090a8:	6864      	ldr	r4, [r4, #4]
 80090aa:	e7ac      	b.n	8009006 <_malloc_r+0x36>
 80090ac:	4634      	mov	r4, r6
 80090ae:	6876      	ldr	r6, [r6, #4]
 80090b0:	e7b4      	b.n	800901c <_malloc_r+0x4c>
 80090b2:	4613      	mov	r3, r2
 80090b4:	e7cc      	b.n	8009050 <_malloc_r+0x80>
 80090b6:	230c      	movs	r3, #12
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	4638      	mov	r0, r7
 80090bc:	f000 f80e 	bl	80090dc <__malloc_unlock>
 80090c0:	e797      	b.n	8008ff2 <_malloc_r+0x22>
 80090c2:	6025      	str	r5, [r4, #0]
 80090c4:	e7dc      	b.n	8009080 <_malloc_r+0xb0>
 80090c6:	605b      	str	r3, [r3, #4]
 80090c8:	deff      	udf	#255	; 0xff
 80090ca:	bf00      	nop
 80090cc:	200007ec 	.word	0x200007ec

080090d0 <__malloc_lock>:
 80090d0:	4801      	ldr	r0, [pc, #4]	; (80090d8 <__malloc_lock+0x8>)
 80090d2:	f000 be7a 	b.w	8009dca <__retarget_lock_acquire_recursive>
 80090d6:	bf00      	nop
 80090d8:	20000934 	.word	0x20000934

080090dc <__malloc_unlock>:
 80090dc:	4801      	ldr	r0, [pc, #4]	; (80090e4 <__malloc_unlock+0x8>)
 80090de:	f000 be75 	b.w	8009dcc <__retarget_lock_release_recursive>
 80090e2:	bf00      	nop
 80090e4:	20000934 	.word	0x20000934

080090e8 <__cvt>:
 80090e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090ec:	ec55 4b10 	vmov	r4, r5, d0
 80090f0:	2d00      	cmp	r5, #0
 80090f2:	460e      	mov	r6, r1
 80090f4:	4619      	mov	r1, r3
 80090f6:	462b      	mov	r3, r5
 80090f8:	bfbb      	ittet	lt
 80090fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090fe:	461d      	movlt	r5, r3
 8009100:	2300      	movge	r3, #0
 8009102:	232d      	movlt	r3, #45	; 0x2d
 8009104:	700b      	strb	r3, [r1, #0]
 8009106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009108:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800910c:	4691      	mov	r9, r2
 800910e:	f023 0820 	bic.w	r8, r3, #32
 8009112:	bfbc      	itt	lt
 8009114:	4622      	movlt	r2, r4
 8009116:	4614      	movlt	r4, r2
 8009118:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800911c:	d005      	beq.n	800912a <__cvt+0x42>
 800911e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009122:	d100      	bne.n	8009126 <__cvt+0x3e>
 8009124:	3601      	adds	r6, #1
 8009126:	2102      	movs	r1, #2
 8009128:	e000      	b.n	800912c <__cvt+0x44>
 800912a:	2103      	movs	r1, #3
 800912c:	ab03      	add	r3, sp, #12
 800912e:	9301      	str	r3, [sp, #4]
 8009130:	ab02      	add	r3, sp, #8
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	ec45 4b10 	vmov	d0, r4, r5
 8009138:	4653      	mov	r3, sl
 800913a:	4632      	mov	r2, r6
 800913c:	f000 fee0 	bl	8009f00 <_dtoa_r>
 8009140:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009144:	4607      	mov	r7, r0
 8009146:	d102      	bne.n	800914e <__cvt+0x66>
 8009148:	f019 0f01 	tst.w	r9, #1
 800914c:	d022      	beq.n	8009194 <__cvt+0xac>
 800914e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009152:	eb07 0906 	add.w	r9, r7, r6
 8009156:	d110      	bne.n	800917a <__cvt+0x92>
 8009158:	783b      	ldrb	r3, [r7, #0]
 800915a:	2b30      	cmp	r3, #48	; 0x30
 800915c:	d10a      	bne.n	8009174 <__cvt+0x8c>
 800915e:	2200      	movs	r2, #0
 8009160:	2300      	movs	r3, #0
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	f7f7 fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800916a:	b918      	cbnz	r0, 8009174 <__cvt+0x8c>
 800916c:	f1c6 0601 	rsb	r6, r6, #1
 8009170:	f8ca 6000 	str.w	r6, [sl]
 8009174:	f8da 3000 	ldr.w	r3, [sl]
 8009178:	4499      	add	r9, r3
 800917a:	2200      	movs	r2, #0
 800917c:	2300      	movs	r3, #0
 800917e:	4620      	mov	r0, r4
 8009180:	4629      	mov	r1, r5
 8009182:	f7f7 fca9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009186:	b108      	cbz	r0, 800918c <__cvt+0xa4>
 8009188:	f8cd 900c 	str.w	r9, [sp, #12]
 800918c:	2230      	movs	r2, #48	; 0x30
 800918e:	9b03      	ldr	r3, [sp, #12]
 8009190:	454b      	cmp	r3, r9
 8009192:	d307      	bcc.n	80091a4 <__cvt+0xbc>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009198:	1bdb      	subs	r3, r3, r7
 800919a:	4638      	mov	r0, r7
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	b004      	add	sp, #16
 80091a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a4:	1c59      	adds	r1, r3, #1
 80091a6:	9103      	str	r1, [sp, #12]
 80091a8:	701a      	strb	r2, [r3, #0]
 80091aa:	e7f0      	b.n	800918e <__cvt+0xa6>

080091ac <__exponent>:
 80091ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091ae:	4603      	mov	r3, r0
 80091b0:	2900      	cmp	r1, #0
 80091b2:	bfb8      	it	lt
 80091b4:	4249      	neglt	r1, r1
 80091b6:	f803 2b02 	strb.w	r2, [r3], #2
 80091ba:	bfb4      	ite	lt
 80091bc:	222d      	movlt	r2, #45	; 0x2d
 80091be:	222b      	movge	r2, #43	; 0x2b
 80091c0:	2909      	cmp	r1, #9
 80091c2:	7042      	strb	r2, [r0, #1]
 80091c4:	dd2a      	ble.n	800921c <__exponent+0x70>
 80091c6:	f10d 0207 	add.w	r2, sp, #7
 80091ca:	4617      	mov	r7, r2
 80091cc:	260a      	movs	r6, #10
 80091ce:	4694      	mov	ip, r2
 80091d0:	fb91 f5f6 	sdiv	r5, r1, r6
 80091d4:	fb06 1415 	mls	r4, r6, r5, r1
 80091d8:	3430      	adds	r4, #48	; 0x30
 80091da:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80091de:	460c      	mov	r4, r1
 80091e0:	2c63      	cmp	r4, #99	; 0x63
 80091e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80091e6:	4629      	mov	r1, r5
 80091e8:	dcf1      	bgt.n	80091ce <__exponent+0x22>
 80091ea:	3130      	adds	r1, #48	; 0x30
 80091ec:	f1ac 0402 	sub.w	r4, ip, #2
 80091f0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80091f4:	1c41      	adds	r1, r0, #1
 80091f6:	4622      	mov	r2, r4
 80091f8:	42ba      	cmp	r2, r7
 80091fa:	d30a      	bcc.n	8009212 <__exponent+0x66>
 80091fc:	f10d 0209 	add.w	r2, sp, #9
 8009200:	eba2 020c 	sub.w	r2, r2, ip
 8009204:	42bc      	cmp	r4, r7
 8009206:	bf88      	it	hi
 8009208:	2200      	movhi	r2, #0
 800920a:	4413      	add	r3, r2
 800920c:	1a18      	subs	r0, r3, r0
 800920e:	b003      	add	sp, #12
 8009210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009212:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009216:	f801 5f01 	strb.w	r5, [r1, #1]!
 800921a:	e7ed      	b.n	80091f8 <__exponent+0x4c>
 800921c:	2330      	movs	r3, #48	; 0x30
 800921e:	3130      	adds	r1, #48	; 0x30
 8009220:	7083      	strb	r3, [r0, #2]
 8009222:	70c1      	strb	r1, [r0, #3]
 8009224:	1d03      	adds	r3, r0, #4
 8009226:	e7f1      	b.n	800920c <__exponent+0x60>

08009228 <_printf_float>:
 8009228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	ed2d 8b02 	vpush	{d8}
 8009230:	b08d      	sub	sp, #52	; 0x34
 8009232:	460c      	mov	r4, r1
 8009234:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009238:	4616      	mov	r6, r2
 800923a:	461f      	mov	r7, r3
 800923c:	4605      	mov	r5, r0
 800923e:	f000 fd2b 	bl	8009c98 <_localeconv_r>
 8009242:	f8d0 a000 	ldr.w	sl, [r0]
 8009246:	4650      	mov	r0, sl
 8009248:	f7f7 f81a 	bl	8000280 <strlen>
 800924c:	2300      	movs	r3, #0
 800924e:	930a      	str	r3, [sp, #40]	; 0x28
 8009250:	6823      	ldr	r3, [r4, #0]
 8009252:	9305      	str	r3, [sp, #20]
 8009254:	f8d8 3000 	ldr.w	r3, [r8]
 8009258:	f894 b018 	ldrb.w	fp, [r4, #24]
 800925c:	3307      	adds	r3, #7
 800925e:	f023 0307 	bic.w	r3, r3, #7
 8009262:	f103 0208 	add.w	r2, r3, #8
 8009266:	f8c8 2000 	str.w	r2, [r8]
 800926a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800926e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009272:	9307      	str	r3, [sp, #28]
 8009274:	f8cd 8018 	str.w	r8, [sp, #24]
 8009278:	ee08 0a10 	vmov	s16, r0
 800927c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009280:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009284:	4b9e      	ldr	r3, [pc, #632]	; (8009500 <_printf_float+0x2d8>)
 8009286:	f04f 32ff 	mov.w	r2, #4294967295
 800928a:	f7f7 fc57 	bl	8000b3c <__aeabi_dcmpun>
 800928e:	bb88      	cbnz	r0, 80092f4 <_printf_float+0xcc>
 8009290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009294:	4b9a      	ldr	r3, [pc, #616]	; (8009500 <_printf_float+0x2d8>)
 8009296:	f04f 32ff 	mov.w	r2, #4294967295
 800929a:	f7f7 fc31 	bl	8000b00 <__aeabi_dcmple>
 800929e:	bb48      	cbnz	r0, 80092f4 <_printf_float+0xcc>
 80092a0:	2200      	movs	r2, #0
 80092a2:	2300      	movs	r3, #0
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7f7 fc20 	bl	8000aec <__aeabi_dcmplt>
 80092ac:	b110      	cbz	r0, 80092b4 <_printf_float+0x8c>
 80092ae:	232d      	movs	r3, #45	; 0x2d
 80092b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b4:	4a93      	ldr	r2, [pc, #588]	; (8009504 <_printf_float+0x2dc>)
 80092b6:	4b94      	ldr	r3, [pc, #592]	; (8009508 <_printf_float+0x2e0>)
 80092b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092bc:	bf94      	ite	ls
 80092be:	4690      	movls	r8, r2
 80092c0:	4698      	movhi	r8, r3
 80092c2:	2303      	movs	r3, #3
 80092c4:	6123      	str	r3, [r4, #16]
 80092c6:	9b05      	ldr	r3, [sp, #20]
 80092c8:	f023 0304 	bic.w	r3, r3, #4
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	f04f 0900 	mov.w	r9, #0
 80092d2:	9700      	str	r7, [sp, #0]
 80092d4:	4633      	mov	r3, r6
 80092d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80092d8:	4621      	mov	r1, r4
 80092da:	4628      	mov	r0, r5
 80092dc:	f000 f9da 	bl	8009694 <_printf_common>
 80092e0:	3001      	adds	r0, #1
 80092e2:	f040 8090 	bne.w	8009406 <_printf_float+0x1de>
 80092e6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ea:	b00d      	add	sp, #52	; 0x34
 80092ec:	ecbd 8b02 	vpop	{d8}
 80092f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f4:	4642      	mov	r2, r8
 80092f6:	464b      	mov	r3, r9
 80092f8:	4640      	mov	r0, r8
 80092fa:	4649      	mov	r1, r9
 80092fc:	f7f7 fc1e 	bl	8000b3c <__aeabi_dcmpun>
 8009300:	b140      	cbz	r0, 8009314 <_printf_float+0xec>
 8009302:	464b      	mov	r3, r9
 8009304:	2b00      	cmp	r3, #0
 8009306:	bfbc      	itt	lt
 8009308:	232d      	movlt	r3, #45	; 0x2d
 800930a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800930e:	4a7f      	ldr	r2, [pc, #508]	; (800950c <_printf_float+0x2e4>)
 8009310:	4b7f      	ldr	r3, [pc, #508]	; (8009510 <_printf_float+0x2e8>)
 8009312:	e7d1      	b.n	80092b8 <_printf_float+0x90>
 8009314:	6863      	ldr	r3, [r4, #4]
 8009316:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800931a:	9206      	str	r2, [sp, #24]
 800931c:	1c5a      	adds	r2, r3, #1
 800931e:	d13f      	bne.n	80093a0 <_printf_float+0x178>
 8009320:	2306      	movs	r3, #6
 8009322:	6063      	str	r3, [r4, #4]
 8009324:	9b05      	ldr	r3, [sp, #20]
 8009326:	6861      	ldr	r1, [r4, #4]
 8009328:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800932c:	2300      	movs	r3, #0
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	ab0a      	add	r3, sp, #40	; 0x28
 8009332:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009336:	ab09      	add	r3, sp, #36	; 0x24
 8009338:	ec49 8b10 	vmov	d0, r8, r9
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	6022      	str	r2, [r4, #0]
 8009340:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009344:	4628      	mov	r0, r5
 8009346:	f7ff fecf 	bl	80090e8 <__cvt>
 800934a:	9b06      	ldr	r3, [sp, #24]
 800934c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800934e:	2b47      	cmp	r3, #71	; 0x47
 8009350:	4680      	mov	r8, r0
 8009352:	d108      	bne.n	8009366 <_printf_float+0x13e>
 8009354:	1cc8      	adds	r0, r1, #3
 8009356:	db02      	blt.n	800935e <_printf_float+0x136>
 8009358:	6863      	ldr	r3, [r4, #4]
 800935a:	4299      	cmp	r1, r3
 800935c:	dd41      	ble.n	80093e2 <_printf_float+0x1ba>
 800935e:	f1ab 0302 	sub.w	r3, fp, #2
 8009362:	fa5f fb83 	uxtb.w	fp, r3
 8009366:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800936a:	d820      	bhi.n	80093ae <_printf_float+0x186>
 800936c:	3901      	subs	r1, #1
 800936e:	465a      	mov	r2, fp
 8009370:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009374:	9109      	str	r1, [sp, #36]	; 0x24
 8009376:	f7ff ff19 	bl	80091ac <__exponent>
 800937a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800937c:	1813      	adds	r3, r2, r0
 800937e:	2a01      	cmp	r2, #1
 8009380:	4681      	mov	r9, r0
 8009382:	6123      	str	r3, [r4, #16]
 8009384:	dc02      	bgt.n	800938c <_printf_float+0x164>
 8009386:	6822      	ldr	r2, [r4, #0]
 8009388:	07d2      	lsls	r2, r2, #31
 800938a:	d501      	bpl.n	8009390 <_printf_float+0x168>
 800938c:	3301      	adds	r3, #1
 800938e:	6123      	str	r3, [r4, #16]
 8009390:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009394:	2b00      	cmp	r3, #0
 8009396:	d09c      	beq.n	80092d2 <_printf_float+0xaa>
 8009398:	232d      	movs	r3, #45	; 0x2d
 800939a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800939e:	e798      	b.n	80092d2 <_printf_float+0xaa>
 80093a0:	9a06      	ldr	r2, [sp, #24]
 80093a2:	2a47      	cmp	r2, #71	; 0x47
 80093a4:	d1be      	bne.n	8009324 <_printf_float+0xfc>
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1bc      	bne.n	8009324 <_printf_float+0xfc>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e7b9      	b.n	8009322 <_printf_float+0xfa>
 80093ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80093b2:	d118      	bne.n	80093e6 <_printf_float+0x1be>
 80093b4:	2900      	cmp	r1, #0
 80093b6:	6863      	ldr	r3, [r4, #4]
 80093b8:	dd0b      	ble.n	80093d2 <_printf_float+0x1aa>
 80093ba:	6121      	str	r1, [r4, #16]
 80093bc:	b913      	cbnz	r3, 80093c4 <_printf_float+0x19c>
 80093be:	6822      	ldr	r2, [r4, #0]
 80093c0:	07d0      	lsls	r0, r2, #31
 80093c2:	d502      	bpl.n	80093ca <_printf_float+0x1a2>
 80093c4:	3301      	adds	r3, #1
 80093c6:	440b      	add	r3, r1
 80093c8:	6123      	str	r3, [r4, #16]
 80093ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80093cc:	f04f 0900 	mov.w	r9, #0
 80093d0:	e7de      	b.n	8009390 <_printf_float+0x168>
 80093d2:	b913      	cbnz	r3, 80093da <_printf_float+0x1b2>
 80093d4:	6822      	ldr	r2, [r4, #0]
 80093d6:	07d2      	lsls	r2, r2, #31
 80093d8:	d501      	bpl.n	80093de <_printf_float+0x1b6>
 80093da:	3302      	adds	r3, #2
 80093dc:	e7f4      	b.n	80093c8 <_printf_float+0x1a0>
 80093de:	2301      	movs	r3, #1
 80093e0:	e7f2      	b.n	80093c8 <_printf_float+0x1a0>
 80093e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093e8:	4299      	cmp	r1, r3
 80093ea:	db05      	blt.n	80093f8 <_printf_float+0x1d0>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	6121      	str	r1, [r4, #16]
 80093f0:	07d8      	lsls	r0, r3, #31
 80093f2:	d5ea      	bpl.n	80093ca <_printf_float+0x1a2>
 80093f4:	1c4b      	adds	r3, r1, #1
 80093f6:	e7e7      	b.n	80093c8 <_printf_float+0x1a0>
 80093f8:	2900      	cmp	r1, #0
 80093fa:	bfd4      	ite	le
 80093fc:	f1c1 0202 	rsble	r2, r1, #2
 8009400:	2201      	movgt	r2, #1
 8009402:	4413      	add	r3, r2
 8009404:	e7e0      	b.n	80093c8 <_printf_float+0x1a0>
 8009406:	6823      	ldr	r3, [r4, #0]
 8009408:	055a      	lsls	r2, r3, #21
 800940a:	d407      	bmi.n	800941c <_printf_float+0x1f4>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	4642      	mov	r2, r8
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	d12c      	bne.n	8009474 <_printf_float+0x24c>
 800941a:	e764      	b.n	80092e6 <_printf_float+0xbe>
 800941c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009420:	f240 80e0 	bls.w	80095e4 <_printf_float+0x3bc>
 8009424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009428:	2200      	movs	r2, #0
 800942a:	2300      	movs	r3, #0
 800942c:	f7f7 fb54 	bl	8000ad8 <__aeabi_dcmpeq>
 8009430:	2800      	cmp	r0, #0
 8009432:	d034      	beq.n	800949e <_printf_float+0x276>
 8009434:	4a37      	ldr	r2, [pc, #220]	; (8009514 <_printf_float+0x2ec>)
 8009436:	2301      	movs	r3, #1
 8009438:	4631      	mov	r1, r6
 800943a:	4628      	mov	r0, r5
 800943c:	47b8      	blx	r7
 800943e:	3001      	adds	r0, #1
 8009440:	f43f af51 	beq.w	80092e6 <_printf_float+0xbe>
 8009444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009448:	429a      	cmp	r2, r3
 800944a:	db02      	blt.n	8009452 <_printf_float+0x22a>
 800944c:	6823      	ldr	r3, [r4, #0]
 800944e:	07d8      	lsls	r0, r3, #31
 8009450:	d510      	bpl.n	8009474 <_printf_float+0x24c>
 8009452:	ee18 3a10 	vmov	r3, s16
 8009456:	4652      	mov	r2, sl
 8009458:	4631      	mov	r1, r6
 800945a:	4628      	mov	r0, r5
 800945c:	47b8      	blx	r7
 800945e:	3001      	adds	r0, #1
 8009460:	f43f af41 	beq.w	80092e6 <_printf_float+0xbe>
 8009464:	f04f 0800 	mov.w	r8, #0
 8009468:	f104 091a 	add.w	r9, r4, #26
 800946c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800946e:	3b01      	subs	r3, #1
 8009470:	4543      	cmp	r3, r8
 8009472:	dc09      	bgt.n	8009488 <_printf_float+0x260>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	079b      	lsls	r3, r3, #30
 8009478:	f100 8107 	bmi.w	800968a <_printf_float+0x462>
 800947c:	68e0      	ldr	r0, [r4, #12]
 800947e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009480:	4298      	cmp	r0, r3
 8009482:	bfb8      	it	lt
 8009484:	4618      	movlt	r0, r3
 8009486:	e730      	b.n	80092ea <_printf_float+0xc2>
 8009488:	2301      	movs	r3, #1
 800948a:	464a      	mov	r2, r9
 800948c:	4631      	mov	r1, r6
 800948e:	4628      	mov	r0, r5
 8009490:	47b8      	blx	r7
 8009492:	3001      	adds	r0, #1
 8009494:	f43f af27 	beq.w	80092e6 <_printf_float+0xbe>
 8009498:	f108 0801 	add.w	r8, r8, #1
 800949c:	e7e6      	b.n	800946c <_printf_float+0x244>
 800949e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dc39      	bgt.n	8009518 <_printf_float+0x2f0>
 80094a4:	4a1b      	ldr	r2, [pc, #108]	; (8009514 <_printf_float+0x2ec>)
 80094a6:	2301      	movs	r3, #1
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	f43f af19 	beq.w	80092e6 <_printf_float+0xbe>
 80094b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094b8:	4313      	orrs	r3, r2
 80094ba:	d102      	bne.n	80094c2 <_printf_float+0x29a>
 80094bc:	6823      	ldr	r3, [r4, #0]
 80094be:	07d9      	lsls	r1, r3, #31
 80094c0:	d5d8      	bpl.n	8009474 <_printf_float+0x24c>
 80094c2:	ee18 3a10 	vmov	r3, s16
 80094c6:	4652      	mov	r2, sl
 80094c8:	4631      	mov	r1, r6
 80094ca:	4628      	mov	r0, r5
 80094cc:	47b8      	blx	r7
 80094ce:	3001      	adds	r0, #1
 80094d0:	f43f af09 	beq.w	80092e6 <_printf_float+0xbe>
 80094d4:	f04f 0900 	mov.w	r9, #0
 80094d8:	f104 0a1a 	add.w	sl, r4, #26
 80094dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094de:	425b      	negs	r3, r3
 80094e0:	454b      	cmp	r3, r9
 80094e2:	dc01      	bgt.n	80094e8 <_printf_float+0x2c0>
 80094e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e6:	e792      	b.n	800940e <_printf_float+0x1e6>
 80094e8:	2301      	movs	r3, #1
 80094ea:	4652      	mov	r2, sl
 80094ec:	4631      	mov	r1, r6
 80094ee:	4628      	mov	r0, r5
 80094f0:	47b8      	blx	r7
 80094f2:	3001      	adds	r0, #1
 80094f4:	f43f aef7 	beq.w	80092e6 <_printf_float+0xbe>
 80094f8:	f109 0901 	add.w	r9, r9, #1
 80094fc:	e7ee      	b.n	80094dc <_printf_float+0x2b4>
 80094fe:	bf00      	nop
 8009500:	7fefffff 	.word	0x7fefffff
 8009504:	0800c790 	.word	0x0800c790
 8009508:	0800c794 	.word	0x0800c794
 800950c:	0800c798 	.word	0x0800c798
 8009510:	0800c79c 	.word	0x0800c79c
 8009514:	0800c7a0 	.word	0x0800c7a0
 8009518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800951a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800951c:	429a      	cmp	r2, r3
 800951e:	bfa8      	it	ge
 8009520:	461a      	movge	r2, r3
 8009522:	2a00      	cmp	r2, #0
 8009524:	4691      	mov	r9, r2
 8009526:	dc37      	bgt.n	8009598 <_printf_float+0x370>
 8009528:	f04f 0b00 	mov.w	fp, #0
 800952c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009530:	f104 021a 	add.w	r2, r4, #26
 8009534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009536:	9305      	str	r3, [sp, #20]
 8009538:	eba3 0309 	sub.w	r3, r3, r9
 800953c:	455b      	cmp	r3, fp
 800953e:	dc33      	bgt.n	80095a8 <_printf_float+0x380>
 8009540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009544:	429a      	cmp	r2, r3
 8009546:	db3b      	blt.n	80095c0 <_printf_float+0x398>
 8009548:	6823      	ldr	r3, [r4, #0]
 800954a:	07da      	lsls	r2, r3, #31
 800954c:	d438      	bmi.n	80095c0 <_printf_float+0x398>
 800954e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009552:	eba2 0903 	sub.w	r9, r2, r3
 8009556:	9b05      	ldr	r3, [sp, #20]
 8009558:	1ad2      	subs	r2, r2, r3
 800955a:	4591      	cmp	r9, r2
 800955c:	bfa8      	it	ge
 800955e:	4691      	movge	r9, r2
 8009560:	f1b9 0f00 	cmp.w	r9, #0
 8009564:	dc35      	bgt.n	80095d2 <_printf_float+0x3aa>
 8009566:	f04f 0800 	mov.w	r8, #0
 800956a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800956e:	f104 0a1a 	add.w	sl, r4, #26
 8009572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009576:	1a9b      	subs	r3, r3, r2
 8009578:	eba3 0309 	sub.w	r3, r3, r9
 800957c:	4543      	cmp	r3, r8
 800957e:	f77f af79 	ble.w	8009474 <_printf_float+0x24c>
 8009582:	2301      	movs	r3, #1
 8009584:	4652      	mov	r2, sl
 8009586:	4631      	mov	r1, r6
 8009588:	4628      	mov	r0, r5
 800958a:	47b8      	blx	r7
 800958c:	3001      	adds	r0, #1
 800958e:	f43f aeaa 	beq.w	80092e6 <_printf_float+0xbe>
 8009592:	f108 0801 	add.w	r8, r8, #1
 8009596:	e7ec      	b.n	8009572 <_printf_float+0x34a>
 8009598:	4613      	mov	r3, r2
 800959a:	4631      	mov	r1, r6
 800959c:	4642      	mov	r2, r8
 800959e:	4628      	mov	r0, r5
 80095a0:	47b8      	blx	r7
 80095a2:	3001      	adds	r0, #1
 80095a4:	d1c0      	bne.n	8009528 <_printf_float+0x300>
 80095a6:	e69e      	b.n	80092e6 <_printf_float+0xbe>
 80095a8:	2301      	movs	r3, #1
 80095aa:	4631      	mov	r1, r6
 80095ac:	4628      	mov	r0, r5
 80095ae:	9205      	str	r2, [sp, #20]
 80095b0:	47b8      	blx	r7
 80095b2:	3001      	adds	r0, #1
 80095b4:	f43f ae97 	beq.w	80092e6 <_printf_float+0xbe>
 80095b8:	9a05      	ldr	r2, [sp, #20]
 80095ba:	f10b 0b01 	add.w	fp, fp, #1
 80095be:	e7b9      	b.n	8009534 <_printf_float+0x30c>
 80095c0:	ee18 3a10 	vmov	r3, s16
 80095c4:	4652      	mov	r2, sl
 80095c6:	4631      	mov	r1, r6
 80095c8:	4628      	mov	r0, r5
 80095ca:	47b8      	blx	r7
 80095cc:	3001      	adds	r0, #1
 80095ce:	d1be      	bne.n	800954e <_printf_float+0x326>
 80095d0:	e689      	b.n	80092e6 <_printf_float+0xbe>
 80095d2:	9a05      	ldr	r2, [sp, #20]
 80095d4:	464b      	mov	r3, r9
 80095d6:	4442      	add	r2, r8
 80095d8:	4631      	mov	r1, r6
 80095da:	4628      	mov	r0, r5
 80095dc:	47b8      	blx	r7
 80095de:	3001      	adds	r0, #1
 80095e0:	d1c1      	bne.n	8009566 <_printf_float+0x33e>
 80095e2:	e680      	b.n	80092e6 <_printf_float+0xbe>
 80095e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e6:	2a01      	cmp	r2, #1
 80095e8:	dc01      	bgt.n	80095ee <_printf_float+0x3c6>
 80095ea:	07db      	lsls	r3, r3, #31
 80095ec:	d53a      	bpl.n	8009664 <_printf_float+0x43c>
 80095ee:	2301      	movs	r3, #1
 80095f0:	4642      	mov	r2, r8
 80095f2:	4631      	mov	r1, r6
 80095f4:	4628      	mov	r0, r5
 80095f6:	47b8      	blx	r7
 80095f8:	3001      	adds	r0, #1
 80095fa:	f43f ae74 	beq.w	80092e6 <_printf_float+0xbe>
 80095fe:	ee18 3a10 	vmov	r3, s16
 8009602:	4652      	mov	r2, sl
 8009604:	4631      	mov	r1, r6
 8009606:	4628      	mov	r0, r5
 8009608:	47b8      	blx	r7
 800960a:	3001      	adds	r0, #1
 800960c:	f43f ae6b 	beq.w	80092e6 <_printf_float+0xbe>
 8009610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009614:	2200      	movs	r2, #0
 8009616:	2300      	movs	r3, #0
 8009618:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800961c:	f7f7 fa5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009620:	b9d8      	cbnz	r0, 800965a <_printf_float+0x432>
 8009622:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009626:	f108 0201 	add.w	r2, r8, #1
 800962a:	4631      	mov	r1, r6
 800962c:	4628      	mov	r0, r5
 800962e:	47b8      	blx	r7
 8009630:	3001      	adds	r0, #1
 8009632:	d10e      	bne.n	8009652 <_printf_float+0x42a>
 8009634:	e657      	b.n	80092e6 <_printf_float+0xbe>
 8009636:	2301      	movs	r3, #1
 8009638:	4652      	mov	r2, sl
 800963a:	4631      	mov	r1, r6
 800963c:	4628      	mov	r0, r5
 800963e:	47b8      	blx	r7
 8009640:	3001      	adds	r0, #1
 8009642:	f43f ae50 	beq.w	80092e6 <_printf_float+0xbe>
 8009646:	f108 0801 	add.w	r8, r8, #1
 800964a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800964c:	3b01      	subs	r3, #1
 800964e:	4543      	cmp	r3, r8
 8009650:	dcf1      	bgt.n	8009636 <_printf_float+0x40e>
 8009652:	464b      	mov	r3, r9
 8009654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009658:	e6da      	b.n	8009410 <_printf_float+0x1e8>
 800965a:	f04f 0800 	mov.w	r8, #0
 800965e:	f104 0a1a 	add.w	sl, r4, #26
 8009662:	e7f2      	b.n	800964a <_printf_float+0x422>
 8009664:	2301      	movs	r3, #1
 8009666:	4642      	mov	r2, r8
 8009668:	e7df      	b.n	800962a <_printf_float+0x402>
 800966a:	2301      	movs	r3, #1
 800966c:	464a      	mov	r2, r9
 800966e:	4631      	mov	r1, r6
 8009670:	4628      	mov	r0, r5
 8009672:	47b8      	blx	r7
 8009674:	3001      	adds	r0, #1
 8009676:	f43f ae36 	beq.w	80092e6 <_printf_float+0xbe>
 800967a:	f108 0801 	add.w	r8, r8, #1
 800967e:	68e3      	ldr	r3, [r4, #12]
 8009680:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009682:	1a5b      	subs	r3, r3, r1
 8009684:	4543      	cmp	r3, r8
 8009686:	dcf0      	bgt.n	800966a <_printf_float+0x442>
 8009688:	e6f8      	b.n	800947c <_printf_float+0x254>
 800968a:	f04f 0800 	mov.w	r8, #0
 800968e:	f104 0919 	add.w	r9, r4, #25
 8009692:	e7f4      	b.n	800967e <_printf_float+0x456>

08009694 <_printf_common>:
 8009694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009698:	4616      	mov	r6, r2
 800969a:	4699      	mov	r9, r3
 800969c:	688a      	ldr	r2, [r1, #8]
 800969e:	690b      	ldr	r3, [r1, #16]
 80096a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096a4:	4293      	cmp	r3, r2
 80096a6:	bfb8      	it	lt
 80096a8:	4613      	movlt	r3, r2
 80096aa:	6033      	str	r3, [r6, #0]
 80096ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096b0:	4607      	mov	r7, r0
 80096b2:	460c      	mov	r4, r1
 80096b4:	b10a      	cbz	r2, 80096ba <_printf_common+0x26>
 80096b6:	3301      	adds	r3, #1
 80096b8:	6033      	str	r3, [r6, #0]
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	0699      	lsls	r1, r3, #26
 80096be:	bf42      	ittt	mi
 80096c0:	6833      	ldrmi	r3, [r6, #0]
 80096c2:	3302      	addmi	r3, #2
 80096c4:	6033      	strmi	r3, [r6, #0]
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	f015 0506 	ands.w	r5, r5, #6
 80096cc:	d106      	bne.n	80096dc <_printf_common+0x48>
 80096ce:	f104 0a19 	add.w	sl, r4, #25
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	6832      	ldr	r2, [r6, #0]
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dc26      	bgt.n	800972a <_printf_common+0x96>
 80096dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096e0:	1e13      	subs	r3, r2, #0
 80096e2:	6822      	ldr	r2, [r4, #0]
 80096e4:	bf18      	it	ne
 80096e6:	2301      	movne	r3, #1
 80096e8:	0692      	lsls	r2, r2, #26
 80096ea:	d42b      	bmi.n	8009744 <_printf_common+0xb0>
 80096ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096f0:	4649      	mov	r1, r9
 80096f2:	4638      	mov	r0, r7
 80096f4:	47c0      	blx	r8
 80096f6:	3001      	adds	r0, #1
 80096f8:	d01e      	beq.n	8009738 <_printf_common+0xa4>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	6922      	ldr	r2, [r4, #16]
 80096fe:	f003 0306 	and.w	r3, r3, #6
 8009702:	2b04      	cmp	r3, #4
 8009704:	bf02      	ittt	eq
 8009706:	68e5      	ldreq	r5, [r4, #12]
 8009708:	6833      	ldreq	r3, [r6, #0]
 800970a:	1aed      	subeq	r5, r5, r3
 800970c:	68a3      	ldr	r3, [r4, #8]
 800970e:	bf0c      	ite	eq
 8009710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009714:	2500      	movne	r5, #0
 8009716:	4293      	cmp	r3, r2
 8009718:	bfc4      	itt	gt
 800971a:	1a9b      	subgt	r3, r3, r2
 800971c:	18ed      	addgt	r5, r5, r3
 800971e:	2600      	movs	r6, #0
 8009720:	341a      	adds	r4, #26
 8009722:	42b5      	cmp	r5, r6
 8009724:	d11a      	bne.n	800975c <_printf_common+0xc8>
 8009726:	2000      	movs	r0, #0
 8009728:	e008      	b.n	800973c <_printf_common+0xa8>
 800972a:	2301      	movs	r3, #1
 800972c:	4652      	mov	r2, sl
 800972e:	4649      	mov	r1, r9
 8009730:	4638      	mov	r0, r7
 8009732:	47c0      	blx	r8
 8009734:	3001      	adds	r0, #1
 8009736:	d103      	bne.n	8009740 <_printf_common+0xac>
 8009738:	f04f 30ff 	mov.w	r0, #4294967295
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	3501      	adds	r5, #1
 8009742:	e7c6      	b.n	80096d2 <_printf_common+0x3e>
 8009744:	18e1      	adds	r1, r4, r3
 8009746:	1c5a      	adds	r2, r3, #1
 8009748:	2030      	movs	r0, #48	; 0x30
 800974a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800974e:	4422      	add	r2, r4
 8009750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009758:	3302      	adds	r3, #2
 800975a:	e7c7      	b.n	80096ec <_printf_common+0x58>
 800975c:	2301      	movs	r3, #1
 800975e:	4622      	mov	r2, r4
 8009760:	4649      	mov	r1, r9
 8009762:	4638      	mov	r0, r7
 8009764:	47c0      	blx	r8
 8009766:	3001      	adds	r0, #1
 8009768:	d0e6      	beq.n	8009738 <_printf_common+0xa4>
 800976a:	3601      	adds	r6, #1
 800976c:	e7d9      	b.n	8009722 <_printf_common+0x8e>
	...

08009770 <_printf_i>:
 8009770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009774:	7e0f      	ldrb	r7, [r1, #24]
 8009776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009778:	2f78      	cmp	r7, #120	; 0x78
 800977a:	4691      	mov	r9, r2
 800977c:	4680      	mov	r8, r0
 800977e:	460c      	mov	r4, r1
 8009780:	469a      	mov	sl, r3
 8009782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009786:	d807      	bhi.n	8009798 <_printf_i+0x28>
 8009788:	2f62      	cmp	r7, #98	; 0x62
 800978a:	d80a      	bhi.n	80097a2 <_printf_i+0x32>
 800978c:	2f00      	cmp	r7, #0
 800978e:	f000 80d4 	beq.w	800993a <_printf_i+0x1ca>
 8009792:	2f58      	cmp	r7, #88	; 0x58
 8009794:	f000 80c0 	beq.w	8009918 <_printf_i+0x1a8>
 8009798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800979c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097a0:	e03a      	b.n	8009818 <_printf_i+0xa8>
 80097a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097a6:	2b15      	cmp	r3, #21
 80097a8:	d8f6      	bhi.n	8009798 <_printf_i+0x28>
 80097aa:	a101      	add	r1, pc, #4	; (adr r1, 80097b0 <_printf_i+0x40>)
 80097ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80097b0:	08009809 	.word	0x08009809
 80097b4:	0800981d 	.word	0x0800981d
 80097b8:	08009799 	.word	0x08009799
 80097bc:	08009799 	.word	0x08009799
 80097c0:	08009799 	.word	0x08009799
 80097c4:	08009799 	.word	0x08009799
 80097c8:	0800981d 	.word	0x0800981d
 80097cc:	08009799 	.word	0x08009799
 80097d0:	08009799 	.word	0x08009799
 80097d4:	08009799 	.word	0x08009799
 80097d8:	08009799 	.word	0x08009799
 80097dc:	08009921 	.word	0x08009921
 80097e0:	08009849 	.word	0x08009849
 80097e4:	080098db 	.word	0x080098db
 80097e8:	08009799 	.word	0x08009799
 80097ec:	08009799 	.word	0x08009799
 80097f0:	08009943 	.word	0x08009943
 80097f4:	08009799 	.word	0x08009799
 80097f8:	08009849 	.word	0x08009849
 80097fc:	08009799 	.word	0x08009799
 8009800:	08009799 	.word	0x08009799
 8009804:	080098e3 	.word	0x080098e3
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	1d1a      	adds	r2, r3, #4
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	602a      	str	r2, [r5, #0]
 8009810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009818:	2301      	movs	r3, #1
 800981a:	e09f      	b.n	800995c <_printf_i+0x1ec>
 800981c:	6820      	ldr	r0, [r4, #0]
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	0607      	lsls	r7, r0, #24
 8009822:	f103 0104 	add.w	r1, r3, #4
 8009826:	6029      	str	r1, [r5, #0]
 8009828:	d501      	bpl.n	800982e <_printf_i+0xbe>
 800982a:	681e      	ldr	r6, [r3, #0]
 800982c:	e003      	b.n	8009836 <_printf_i+0xc6>
 800982e:	0646      	lsls	r6, r0, #25
 8009830:	d5fb      	bpl.n	800982a <_printf_i+0xba>
 8009832:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009836:	2e00      	cmp	r6, #0
 8009838:	da03      	bge.n	8009842 <_printf_i+0xd2>
 800983a:	232d      	movs	r3, #45	; 0x2d
 800983c:	4276      	negs	r6, r6
 800983e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009842:	485a      	ldr	r0, [pc, #360]	; (80099ac <_printf_i+0x23c>)
 8009844:	230a      	movs	r3, #10
 8009846:	e012      	b.n	800986e <_printf_i+0xfe>
 8009848:	682b      	ldr	r3, [r5, #0]
 800984a:	6820      	ldr	r0, [r4, #0]
 800984c:	1d19      	adds	r1, r3, #4
 800984e:	6029      	str	r1, [r5, #0]
 8009850:	0605      	lsls	r5, r0, #24
 8009852:	d501      	bpl.n	8009858 <_printf_i+0xe8>
 8009854:	681e      	ldr	r6, [r3, #0]
 8009856:	e002      	b.n	800985e <_printf_i+0xee>
 8009858:	0641      	lsls	r1, r0, #25
 800985a:	d5fb      	bpl.n	8009854 <_printf_i+0xe4>
 800985c:	881e      	ldrh	r6, [r3, #0]
 800985e:	4853      	ldr	r0, [pc, #332]	; (80099ac <_printf_i+0x23c>)
 8009860:	2f6f      	cmp	r7, #111	; 0x6f
 8009862:	bf0c      	ite	eq
 8009864:	2308      	moveq	r3, #8
 8009866:	230a      	movne	r3, #10
 8009868:	2100      	movs	r1, #0
 800986a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800986e:	6865      	ldr	r5, [r4, #4]
 8009870:	60a5      	str	r5, [r4, #8]
 8009872:	2d00      	cmp	r5, #0
 8009874:	bfa2      	ittt	ge
 8009876:	6821      	ldrge	r1, [r4, #0]
 8009878:	f021 0104 	bicge.w	r1, r1, #4
 800987c:	6021      	strge	r1, [r4, #0]
 800987e:	b90e      	cbnz	r6, 8009884 <_printf_i+0x114>
 8009880:	2d00      	cmp	r5, #0
 8009882:	d04b      	beq.n	800991c <_printf_i+0x1ac>
 8009884:	4615      	mov	r5, r2
 8009886:	fbb6 f1f3 	udiv	r1, r6, r3
 800988a:	fb03 6711 	mls	r7, r3, r1, r6
 800988e:	5dc7      	ldrb	r7, [r0, r7]
 8009890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009894:	4637      	mov	r7, r6
 8009896:	42bb      	cmp	r3, r7
 8009898:	460e      	mov	r6, r1
 800989a:	d9f4      	bls.n	8009886 <_printf_i+0x116>
 800989c:	2b08      	cmp	r3, #8
 800989e:	d10b      	bne.n	80098b8 <_printf_i+0x148>
 80098a0:	6823      	ldr	r3, [r4, #0]
 80098a2:	07de      	lsls	r6, r3, #31
 80098a4:	d508      	bpl.n	80098b8 <_printf_i+0x148>
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	6861      	ldr	r1, [r4, #4]
 80098aa:	4299      	cmp	r1, r3
 80098ac:	bfde      	ittt	le
 80098ae:	2330      	movle	r3, #48	; 0x30
 80098b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098b8:	1b52      	subs	r2, r2, r5
 80098ba:	6122      	str	r2, [r4, #16]
 80098bc:	f8cd a000 	str.w	sl, [sp]
 80098c0:	464b      	mov	r3, r9
 80098c2:	aa03      	add	r2, sp, #12
 80098c4:	4621      	mov	r1, r4
 80098c6:	4640      	mov	r0, r8
 80098c8:	f7ff fee4 	bl	8009694 <_printf_common>
 80098cc:	3001      	adds	r0, #1
 80098ce:	d14a      	bne.n	8009966 <_printf_i+0x1f6>
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295
 80098d4:	b004      	add	sp, #16
 80098d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	f043 0320 	orr.w	r3, r3, #32
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	4833      	ldr	r0, [pc, #204]	; (80099b0 <_printf_i+0x240>)
 80098e4:	2778      	movs	r7, #120	; 0x78
 80098e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098ea:	6823      	ldr	r3, [r4, #0]
 80098ec:	6829      	ldr	r1, [r5, #0]
 80098ee:	061f      	lsls	r7, r3, #24
 80098f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80098f4:	d402      	bmi.n	80098fc <_printf_i+0x18c>
 80098f6:	065f      	lsls	r7, r3, #25
 80098f8:	bf48      	it	mi
 80098fa:	b2b6      	uxthmi	r6, r6
 80098fc:	07df      	lsls	r7, r3, #31
 80098fe:	bf48      	it	mi
 8009900:	f043 0320 	orrmi.w	r3, r3, #32
 8009904:	6029      	str	r1, [r5, #0]
 8009906:	bf48      	it	mi
 8009908:	6023      	strmi	r3, [r4, #0]
 800990a:	b91e      	cbnz	r6, 8009914 <_printf_i+0x1a4>
 800990c:	6823      	ldr	r3, [r4, #0]
 800990e:	f023 0320 	bic.w	r3, r3, #32
 8009912:	6023      	str	r3, [r4, #0]
 8009914:	2310      	movs	r3, #16
 8009916:	e7a7      	b.n	8009868 <_printf_i+0xf8>
 8009918:	4824      	ldr	r0, [pc, #144]	; (80099ac <_printf_i+0x23c>)
 800991a:	e7e4      	b.n	80098e6 <_printf_i+0x176>
 800991c:	4615      	mov	r5, r2
 800991e:	e7bd      	b.n	800989c <_printf_i+0x12c>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	6826      	ldr	r6, [r4, #0]
 8009924:	6961      	ldr	r1, [r4, #20]
 8009926:	1d18      	adds	r0, r3, #4
 8009928:	6028      	str	r0, [r5, #0]
 800992a:	0635      	lsls	r5, r6, #24
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	d501      	bpl.n	8009934 <_printf_i+0x1c4>
 8009930:	6019      	str	r1, [r3, #0]
 8009932:	e002      	b.n	800993a <_printf_i+0x1ca>
 8009934:	0670      	lsls	r0, r6, #25
 8009936:	d5fb      	bpl.n	8009930 <_printf_i+0x1c0>
 8009938:	8019      	strh	r1, [r3, #0]
 800993a:	2300      	movs	r3, #0
 800993c:	6123      	str	r3, [r4, #16]
 800993e:	4615      	mov	r5, r2
 8009940:	e7bc      	b.n	80098bc <_printf_i+0x14c>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	1d1a      	adds	r2, r3, #4
 8009946:	602a      	str	r2, [r5, #0]
 8009948:	681d      	ldr	r5, [r3, #0]
 800994a:	6862      	ldr	r2, [r4, #4]
 800994c:	2100      	movs	r1, #0
 800994e:	4628      	mov	r0, r5
 8009950:	f7f6 fc46 	bl	80001e0 <memchr>
 8009954:	b108      	cbz	r0, 800995a <_printf_i+0x1ea>
 8009956:	1b40      	subs	r0, r0, r5
 8009958:	6060      	str	r0, [r4, #4]
 800995a:	6863      	ldr	r3, [r4, #4]
 800995c:	6123      	str	r3, [r4, #16]
 800995e:	2300      	movs	r3, #0
 8009960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009964:	e7aa      	b.n	80098bc <_printf_i+0x14c>
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	462a      	mov	r2, r5
 800996a:	4649      	mov	r1, r9
 800996c:	4640      	mov	r0, r8
 800996e:	47d0      	blx	sl
 8009970:	3001      	adds	r0, #1
 8009972:	d0ad      	beq.n	80098d0 <_printf_i+0x160>
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	079b      	lsls	r3, r3, #30
 8009978:	d413      	bmi.n	80099a2 <_printf_i+0x232>
 800997a:	68e0      	ldr	r0, [r4, #12]
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	4298      	cmp	r0, r3
 8009980:	bfb8      	it	lt
 8009982:	4618      	movlt	r0, r3
 8009984:	e7a6      	b.n	80098d4 <_printf_i+0x164>
 8009986:	2301      	movs	r3, #1
 8009988:	4632      	mov	r2, r6
 800998a:	4649      	mov	r1, r9
 800998c:	4640      	mov	r0, r8
 800998e:	47d0      	blx	sl
 8009990:	3001      	adds	r0, #1
 8009992:	d09d      	beq.n	80098d0 <_printf_i+0x160>
 8009994:	3501      	adds	r5, #1
 8009996:	68e3      	ldr	r3, [r4, #12]
 8009998:	9903      	ldr	r1, [sp, #12]
 800999a:	1a5b      	subs	r3, r3, r1
 800999c:	42ab      	cmp	r3, r5
 800999e:	dcf2      	bgt.n	8009986 <_printf_i+0x216>
 80099a0:	e7eb      	b.n	800997a <_printf_i+0x20a>
 80099a2:	2500      	movs	r5, #0
 80099a4:	f104 0619 	add.w	r6, r4, #25
 80099a8:	e7f5      	b.n	8009996 <_printf_i+0x226>
 80099aa:	bf00      	nop
 80099ac:	0800c7a2 	.word	0x0800c7a2
 80099b0:	0800c7b3 	.word	0x0800c7b3

080099b4 <std>:
 80099b4:	2300      	movs	r3, #0
 80099b6:	b510      	push	{r4, lr}
 80099b8:	4604      	mov	r4, r0
 80099ba:	e9c0 3300 	strd	r3, r3, [r0]
 80099be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099c2:	6083      	str	r3, [r0, #8]
 80099c4:	8181      	strh	r1, [r0, #12]
 80099c6:	6643      	str	r3, [r0, #100]	; 0x64
 80099c8:	81c2      	strh	r2, [r0, #14]
 80099ca:	6183      	str	r3, [r0, #24]
 80099cc:	4619      	mov	r1, r3
 80099ce:	2208      	movs	r2, #8
 80099d0:	305c      	adds	r0, #92	; 0x5c
 80099d2:	f000 f928 	bl	8009c26 <memset>
 80099d6:	4b0d      	ldr	r3, [pc, #52]	; (8009a0c <std+0x58>)
 80099d8:	6263      	str	r3, [r4, #36]	; 0x24
 80099da:	4b0d      	ldr	r3, [pc, #52]	; (8009a10 <std+0x5c>)
 80099dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80099de:	4b0d      	ldr	r3, [pc, #52]	; (8009a14 <std+0x60>)
 80099e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099e2:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <std+0x64>)
 80099e4:	6323      	str	r3, [r4, #48]	; 0x30
 80099e6:	4b0d      	ldr	r3, [pc, #52]	; (8009a1c <std+0x68>)
 80099e8:	6224      	str	r4, [r4, #32]
 80099ea:	429c      	cmp	r4, r3
 80099ec:	d006      	beq.n	80099fc <std+0x48>
 80099ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80099f2:	4294      	cmp	r4, r2
 80099f4:	d002      	beq.n	80099fc <std+0x48>
 80099f6:	33d0      	adds	r3, #208	; 0xd0
 80099f8:	429c      	cmp	r4, r3
 80099fa:	d105      	bne.n	8009a08 <std+0x54>
 80099fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a04:	f000 b9e0 	b.w	8009dc8 <__retarget_lock_init_recursive>
 8009a08:	bd10      	pop	{r4, pc}
 8009a0a:	bf00      	nop
 8009a0c:	08009ba1 	.word	0x08009ba1
 8009a10:	08009bc3 	.word	0x08009bc3
 8009a14:	08009bfb 	.word	0x08009bfb
 8009a18:	08009c1f 	.word	0x08009c1f
 8009a1c:	200007f4 	.word	0x200007f4

08009a20 <stdio_exit_handler>:
 8009a20:	4a02      	ldr	r2, [pc, #8]	; (8009a2c <stdio_exit_handler+0xc>)
 8009a22:	4903      	ldr	r1, [pc, #12]	; (8009a30 <stdio_exit_handler+0x10>)
 8009a24:	4803      	ldr	r0, [pc, #12]	; (8009a34 <stdio_exit_handler+0x14>)
 8009a26:	f000 b869 	b.w	8009afc <_fwalk_sglue>
 8009a2a:	bf00      	nop
 8009a2c:	20000018 	.word	0x20000018
 8009a30:	0800b631 	.word	0x0800b631
 8009a34:	20000024 	.word	0x20000024

08009a38 <cleanup_stdio>:
 8009a38:	6841      	ldr	r1, [r0, #4]
 8009a3a:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <cleanup_stdio+0x34>)
 8009a3c:	4299      	cmp	r1, r3
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	4604      	mov	r4, r0
 8009a42:	d001      	beq.n	8009a48 <cleanup_stdio+0x10>
 8009a44:	f001 fdf4 	bl	800b630 <_fflush_r>
 8009a48:	68a1      	ldr	r1, [r4, #8]
 8009a4a:	4b09      	ldr	r3, [pc, #36]	; (8009a70 <cleanup_stdio+0x38>)
 8009a4c:	4299      	cmp	r1, r3
 8009a4e:	d002      	beq.n	8009a56 <cleanup_stdio+0x1e>
 8009a50:	4620      	mov	r0, r4
 8009a52:	f001 fded 	bl	800b630 <_fflush_r>
 8009a56:	68e1      	ldr	r1, [r4, #12]
 8009a58:	4b06      	ldr	r3, [pc, #24]	; (8009a74 <cleanup_stdio+0x3c>)
 8009a5a:	4299      	cmp	r1, r3
 8009a5c:	d004      	beq.n	8009a68 <cleanup_stdio+0x30>
 8009a5e:	4620      	mov	r0, r4
 8009a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a64:	f001 bde4 	b.w	800b630 <_fflush_r>
 8009a68:	bd10      	pop	{r4, pc}
 8009a6a:	bf00      	nop
 8009a6c:	200007f4 	.word	0x200007f4
 8009a70:	2000085c 	.word	0x2000085c
 8009a74:	200008c4 	.word	0x200008c4

08009a78 <global_stdio_init.part.0>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <global_stdio_init.part.0+0x30>)
 8009a7c:	4c0b      	ldr	r4, [pc, #44]	; (8009aac <global_stdio_init.part.0+0x34>)
 8009a7e:	4a0c      	ldr	r2, [pc, #48]	; (8009ab0 <global_stdio_init.part.0+0x38>)
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	4620      	mov	r0, r4
 8009a84:	2200      	movs	r2, #0
 8009a86:	2104      	movs	r1, #4
 8009a88:	f7ff ff94 	bl	80099b4 <std>
 8009a8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009a90:	2201      	movs	r2, #1
 8009a92:	2109      	movs	r1, #9
 8009a94:	f7ff ff8e 	bl	80099b4 <std>
 8009a98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009a9c:	2202      	movs	r2, #2
 8009a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aa2:	2112      	movs	r1, #18
 8009aa4:	f7ff bf86 	b.w	80099b4 <std>
 8009aa8:	2000092c 	.word	0x2000092c
 8009aac:	200007f4 	.word	0x200007f4
 8009ab0:	08009a21 	.word	0x08009a21

08009ab4 <__sfp_lock_acquire>:
 8009ab4:	4801      	ldr	r0, [pc, #4]	; (8009abc <__sfp_lock_acquire+0x8>)
 8009ab6:	f000 b988 	b.w	8009dca <__retarget_lock_acquire_recursive>
 8009aba:	bf00      	nop
 8009abc:	20000935 	.word	0x20000935

08009ac0 <__sfp_lock_release>:
 8009ac0:	4801      	ldr	r0, [pc, #4]	; (8009ac8 <__sfp_lock_release+0x8>)
 8009ac2:	f000 b983 	b.w	8009dcc <__retarget_lock_release_recursive>
 8009ac6:	bf00      	nop
 8009ac8:	20000935 	.word	0x20000935

08009acc <__sinit>:
 8009acc:	b510      	push	{r4, lr}
 8009ace:	4604      	mov	r4, r0
 8009ad0:	f7ff fff0 	bl	8009ab4 <__sfp_lock_acquire>
 8009ad4:	6a23      	ldr	r3, [r4, #32]
 8009ad6:	b11b      	cbz	r3, 8009ae0 <__sinit+0x14>
 8009ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009adc:	f7ff bff0 	b.w	8009ac0 <__sfp_lock_release>
 8009ae0:	4b04      	ldr	r3, [pc, #16]	; (8009af4 <__sinit+0x28>)
 8009ae2:	6223      	str	r3, [r4, #32]
 8009ae4:	4b04      	ldr	r3, [pc, #16]	; (8009af8 <__sinit+0x2c>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1f5      	bne.n	8009ad8 <__sinit+0xc>
 8009aec:	f7ff ffc4 	bl	8009a78 <global_stdio_init.part.0>
 8009af0:	e7f2      	b.n	8009ad8 <__sinit+0xc>
 8009af2:	bf00      	nop
 8009af4:	08009a39 	.word	0x08009a39
 8009af8:	2000092c 	.word	0x2000092c

08009afc <_fwalk_sglue>:
 8009afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b00:	4607      	mov	r7, r0
 8009b02:	4688      	mov	r8, r1
 8009b04:	4614      	mov	r4, r2
 8009b06:	2600      	movs	r6, #0
 8009b08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b0c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b10:	d505      	bpl.n	8009b1e <_fwalk_sglue+0x22>
 8009b12:	6824      	ldr	r4, [r4, #0]
 8009b14:	2c00      	cmp	r4, #0
 8009b16:	d1f7      	bne.n	8009b08 <_fwalk_sglue+0xc>
 8009b18:	4630      	mov	r0, r6
 8009b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b1e:	89ab      	ldrh	r3, [r5, #12]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d907      	bls.n	8009b34 <_fwalk_sglue+0x38>
 8009b24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	d003      	beq.n	8009b34 <_fwalk_sglue+0x38>
 8009b2c:	4629      	mov	r1, r5
 8009b2e:	4638      	mov	r0, r7
 8009b30:	47c0      	blx	r8
 8009b32:	4306      	orrs	r6, r0
 8009b34:	3568      	adds	r5, #104	; 0x68
 8009b36:	e7e9      	b.n	8009b0c <_fwalk_sglue+0x10>

08009b38 <sniprintf>:
 8009b38:	b40c      	push	{r2, r3}
 8009b3a:	b530      	push	{r4, r5, lr}
 8009b3c:	4b17      	ldr	r3, [pc, #92]	; (8009b9c <sniprintf+0x64>)
 8009b3e:	1e0c      	subs	r4, r1, #0
 8009b40:	681d      	ldr	r5, [r3, #0]
 8009b42:	b09d      	sub	sp, #116	; 0x74
 8009b44:	da08      	bge.n	8009b58 <sniprintf+0x20>
 8009b46:	238b      	movs	r3, #139	; 0x8b
 8009b48:	602b      	str	r3, [r5, #0]
 8009b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b4e:	b01d      	add	sp, #116	; 0x74
 8009b50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b54:	b002      	add	sp, #8
 8009b56:	4770      	bx	lr
 8009b58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009b5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009b60:	bf14      	ite	ne
 8009b62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009b66:	4623      	moveq	r3, r4
 8009b68:	9304      	str	r3, [sp, #16]
 8009b6a:	9307      	str	r3, [sp, #28]
 8009b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b70:	9002      	str	r0, [sp, #8]
 8009b72:	9006      	str	r0, [sp, #24]
 8009b74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b7a:	ab21      	add	r3, sp, #132	; 0x84
 8009b7c:	a902      	add	r1, sp, #8
 8009b7e:	4628      	mov	r0, r5
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	f001 fbd1 	bl	800b328 <_svfiprintf_r>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	bfbc      	itt	lt
 8009b8a:	238b      	movlt	r3, #139	; 0x8b
 8009b8c:	602b      	strlt	r3, [r5, #0]
 8009b8e:	2c00      	cmp	r4, #0
 8009b90:	d0dd      	beq.n	8009b4e <sniprintf+0x16>
 8009b92:	9b02      	ldr	r3, [sp, #8]
 8009b94:	2200      	movs	r2, #0
 8009b96:	701a      	strb	r2, [r3, #0]
 8009b98:	e7d9      	b.n	8009b4e <sniprintf+0x16>
 8009b9a:	bf00      	nop
 8009b9c:	20000070 	.word	0x20000070

08009ba0 <__sread>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	460c      	mov	r4, r1
 8009ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba8:	f000 f89c 	bl	8009ce4 <_read_r>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	bfab      	itete	ge
 8009bb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009bb2:	89a3      	ldrhlt	r3, [r4, #12]
 8009bb4:	181b      	addge	r3, r3, r0
 8009bb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009bba:	bfac      	ite	ge
 8009bbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009bbe:	81a3      	strhlt	r3, [r4, #12]
 8009bc0:	bd10      	pop	{r4, pc}

08009bc2 <__swrite>:
 8009bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc6:	461f      	mov	r7, r3
 8009bc8:	898b      	ldrh	r3, [r1, #12]
 8009bca:	05db      	lsls	r3, r3, #23
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	4616      	mov	r6, r2
 8009bd2:	d505      	bpl.n	8009be0 <__swrite+0x1e>
 8009bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd8:	2302      	movs	r3, #2
 8009bda:	2200      	movs	r2, #0
 8009bdc:	f000 f870 	bl	8009cc0 <_lseek_r>
 8009be0:	89a3      	ldrh	r3, [r4, #12]
 8009be2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bea:	81a3      	strh	r3, [r4, #12]
 8009bec:	4632      	mov	r2, r6
 8009bee:	463b      	mov	r3, r7
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf6:	f000 b8ab 	b.w	8009d50 <_write_r>

08009bfa <__sseek>:
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c02:	f000 f85d 	bl	8009cc0 <_lseek_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	bf15      	itete	ne
 8009c0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c16:	81a3      	strheq	r3, [r4, #12]
 8009c18:	bf18      	it	ne
 8009c1a:	81a3      	strhne	r3, [r4, #12]
 8009c1c:	bd10      	pop	{r4, pc}

08009c1e <__sclose>:
 8009c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c22:	f000 b83d 	b.w	8009ca0 <_close_r>

08009c26 <memset>:
 8009c26:	4402      	add	r2, r0
 8009c28:	4603      	mov	r3, r0
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d100      	bne.n	8009c30 <memset+0xa>
 8009c2e:	4770      	bx	lr
 8009c30:	f803 1b01 	strb.w	r1, [r3], #1
 8009c34:	e7f9      	b.n	8009c2a <memset+0x4>

08009c36 <_raise_r>:
 8009c36:	291f      	cmp	r1, #31
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	d904      	bls.n	8009c4a <_raise_r+0x14>
 8009c40:	2316      	movs	r3, #22
 8009c42:	6003      	str	r3, [r0, #0]
 8009c44:	f04f 30ff 	mov.w	r0, #4294967295
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009c4c:	b112      	cbz	r2, 8009c54 <_raise_r+0x1e>
 8009c4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c52:	b94b      	cbnz	r3, 8009c68 <_raise_r+0x32>
 8009c54:	4620      	mov	r0, r4
 8009c56:	f000 f869 	bl	8009d2c <_getpid_r>
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	4620      	mov	r0, r4
 8009c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c64:	f000 b850 	b.w	8009d08 <_kill_r>
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d00a      	beq.n	8009c82 <_raise_r+0x4c>
 8009c6c:	1c59      	adds	r1, r3, #1
 8009c6e:	d103      	bne.n	8009c78 <_raise_r+0x42>
 8009c70:	2316      	movs	r3, #22
 8009c72:	6003      	str	r3, [r0, #0]
 8009c74:	2001      	movs	r0, #1
 8009c76:	e7e7      	b.n	8009c48 <_raise_r+0x12>
 8009c78:	2400      	movs	r4, #0
 8009c7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c7e:	4628      	mov	r0, r5
 8009c80:	4798      	blx	r3
 8009c82:	2000      	movs	r0, #0
 8009c84:	e7e0      	b.n	8009c48 <_raise_r+0x12>
	...

08009c88 <raise>:
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <raise+0xc>)
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f7ff bfd2 	b.w	8009c36 <_raise_r>
 8009c92:	bf00      	nop
 8009c94:	20000070 	.word	0x20000070

08009c98 <_localeconv_r>:
 8009c98:	4800      	ldr	r0, [pc, #0]	; (8009c9c <_localeconv_r+0x4>)
 8009c9a:	4770      	bx	lr
 8009c9c:	20000164 	.word	0x20000164

08009ca0 <_close_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	4d06      	ldr	r5, [pc, #24]	; (8009cbc <_close_r+0x1c>)
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	4608      	mov	r0, r1
 8009caa:	602b      	str	r3, [r5, #0]
 8009cac:	f7f9 fb4d 	bl	800334a <_close>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d102      	bne.n	8009cba <_close_r+0x1a>
 8009cb4:	682b      	ldr	r3, [r5, #0]
 8009cb6:	b103      	cbz	r3, 8009cba <_close_r+0x1a>
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	20000930 	.word	0x20000930

08009cc0 <_lseek_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4d07      	ldr	r5, [pc, #28]	; (8009ce0 <_lseek_r+0x20>)
 8009cc4:	4604      	mov	r4, r0
 8009cc6:	4608      	mov	r0, r1
 8009cc8:	4611      	mov	r1, r2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	602a      	str	r2, [r5, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	f7f9 fb62 	bl	8003398 <_lseek>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_lseek_r+0x1e>
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_lseek_r+0x1e>
 8009cdc:	6023      	str	r3, [r4, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	20000930 	.word	0x20000930

08009ce4 <_read_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d07      	ldr	r5, [pc, #28]	; (8009d04 <_read_r+0x20>)
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4608      	mov	r0, r1
 8009cec:	4611      	mov	r1, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f7f9 faf0 	bl	80032d8 <_read>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_read_r+0x1e>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_read_r+0x1e>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20000930 	.word	0x20000930

08009d08 <_kill_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4d07      	ldr	r5, [pc, #28]	; (8009d28 <_kill_r+0x20>)
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	4604      	mov	r4, r0
 8009d10:	4608      	mov	r0, r1
 8009d12:	4611      	mov	r1, r2
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	f7f9 fac5 	bl	80032a4 <_kill>
 8009d1a:	1c43      	adds	r3, r0, #1
 8009d1c:	d102      	bne.n	8009d24 <_kill_r+0x1c>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	b103      	cbz	r3, 8009d24 <_kill_r+0x1c>
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	bd38      	pop	{r3, r4, r5, pc}
 8009d26:	bf00      	nop
 8009d28:	20000930 	.word	0x20000930

08009d2c <_getpid_r>:
 8009d2c:	f7f9 bab2 	b.w	8003294 <_getpid>

08009d30 <_sbrk_r>:
 8009d30:	b538      	push	{r3, r4, r5, lr}
 8009d32:	4d06      	ldr	r5, [pc, #24]	; (8009d4c <_sbrk_r+0x1c>)
 8009d34:	2300      	movs	r3, #0
 8009d36:	4604      	mov	r4, r0
 8009d38:	4608      	mov	r0, r1
 8009d3a:	602b      	str	r3, [r5, #0]
 8009d3c:	f7f9 fb3a 	bl	80033b4 <_sbrk>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_sbrk_r+0x1a>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_sbrk_r+0x1a>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20000930 	.word	0x20000930

08009d50 <_write_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4d07      	ldr	r5, [pc, #28]	; (8009d70 <_write_r+0x20>)
 8009d54:	4604      	mov	r4, r0
 8009d56:	4608      	mov	r0, r1
 8009d58:	4611      	mov	r1, r2
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	602a      	str	r2, [r5, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f7f9 fad7 	bl	8003312 <_write>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d102      	bne.n	8009d6e <_write_r+0x1e>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	b103      	cbz	r3, 8009d6e <_write_r+0x1e>
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
 8009d70:	20000930 	.word	0x20000930

08009d74 <__errno>:
 8009d74:	4b01      	ldr	r3, [pc, #4]	; (8009d7c <__errno+0x8>)
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	20000070 	.word	0x20000070

08009d80 <__libc_init_array>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	4d0d      	ldr	r5, [pc, #52]	; (8009db8 <__libc_init_array+0x38>)
 8009d84:	4c0d      	ldr	r4, [pc, #52]	; (8009dbc <__libc_init_array+0x3c>)
 8009d86:	1b64      	subs	r4, r4, r5
 8009d88:	10a4      	asrs	r4, r4, #2
 8009d8a:	2600      	movs	r6, #0
 8009d8c:	42a6      	cmp	r6, r4
 8009d8e:	d109      	bne.n	8009da4 <__libc_init_array+0x24>
 8009d90:	4d0b      	ldr	r5, [pc, #44]	; (8009dc0 <__libc_init_array+0x40>)
 8009d92:	4c0c      	ldr	r4, [pc, #48]	; (8009dc4 <__libc_init_array+0x44>)
 8009d94:	f001 ff88 	bl	800bca8 <_init>
 8009d98:	1b64      	subs	r4, r4, r5
 8009d9a:	10a4      	asrs	r4, r4, #2
 8009d9c:	2600      	movs	r6, #0
 8009d9e:	42a6      	cmp	r6, r4
 8009da0:	d105      	bne.n	8009dae <__libc_init_array+0x2e>
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da8:	4798      	blx	r3
 8009daa:	3601      	adds	r6, #1
 8009dac:	e7ee      	b.n	8009d8c <__libc_init_array+0xc>
 8009dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db2:	4798      	blx	r3
 8009db4:	3601      	adds	r6, #1
 8009db6:	e7f2      	b.n	8009d9e <__libc_init_array+0x1e>
 8009db8:	0800cb04 	.word	0x0800cb04
 8009dbc:	0800cb04 	.word	0x0800cb04
 8009dc0:	0800cb04 	.word	0x0800cb04
 8009dc4:	0800cb08 	.word	0x0800cb08

08009dc8 <__retarget_lock_init_recursive>:
 8009dc8:	4770      	bx	lr

08009dca <__retarget_lock_acquire_recursive>:
 8009dca:	4770      	bx	lr

08009dcc <__retarget_lock_release_recursive>:
 8009dcc:	4770      	bx	lr

08009dce <memcpy>:
 8009dce:	440a      	add	r2, r1
 8009dd0:	4291      	cmp	r1, r2
 8009dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dd6:	d100      	bne.n	8009dda <memcpy+0xc>
 8009dd8:	4770      	bx	lr
 8009dda:	b510      	push	{r4, lr}
 8009ddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009de4:	4291      	cmp	r1, r2
 8009de6:	d1f9      	bne.n	8009ddc <memcpy+0xe>
 8009de8:	bd10      	pop	{r4, pc}

08009dea <quorem>:
 8009dea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dee:	6903      	ldr	r3, [r0, #16]
 8009df0:	690c      	ldr	r4, [r1, #16]
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	4607      	mov	r7, r0
 8009df6:	db7e      	blt.n	8009ef6 <quorem+0x10c>
 8009df8:	3c01      	subs	r4, #1
 8009dfa:	f101 0814 	add.w	r8, r1, #20
 8009dfe:	f100 0514 	add.w	r5, r0, #20
 8009e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e06:	9301      	str	r3, [sp, #4]
 8009e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e10:	3301      	adds	r3, #1
 8009e12:	429a      	cmp	r2, r3
 8009e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e20:	d331      	bcc.n	8009e86 <quorem+0x9c>
 8009e22:	f04f 0e00 	mov.w	lr, #0
 8009e26:	4640      	mov	r0, r8
 8009e28:	46ac      	mov	ip, r5
 8009e2a:	46f2      	mov	sl, lr
 8009e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e30:	b293      	uxth	r3, r2
 8009e32:	fb06 e303 	mla	r3, r6, r3, lr
 8009e36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e3a:	0c1a      	lsrs	r2, r3, #16
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	ebaa 0303 	sub.w	r3, sl, r3
 8009e42:	f8dc a000 	ldr.w	sl, [ip]
 8009e46:	fa13 f38a 	uxtah	r3, r3, sl
 8009e4a:	fb06 220e 	mla	r2, r6, lr, r2
 8009e4e:	9300      	str	r3, [sp, #0]
 8009e50:	9b00      	ldr	r3, [sp, #0]
 8009e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009e56:	b292      	uxth	r2, r2
 8009e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8009e64:	4581      	cmp	r9, r0
 8009e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8009e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009e72:	d2db      	bcs.n	8009e2c <quorem+0x42>
 8009e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8009e78:	b92b      	cbnz	r3, 8009e86 <quorem+0x9c>
 8009e7a:	9b01      	ldr	r3, [sp, #4]
 8009e7c:	3b04      	subs	r3, #4
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	461a      	mov	r2, r3
 8009e82:	d32c      	bcc.n	8009ede <quorem+0xf4>
 8009e84:	613c      	str	r4, [r7, #16]
 8009e86:	4638      	mov	r0, r7
 8009e88:	f001 f8f4 	bl	800b074 <__mcmp>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	db22      	blt.n	8009ed6 <quorem+0xec>
 8009e90:	3601      	adds	r6, #1
 8009e92:	4629      	mov	r1, r5
 8009e94:	2000      	movs	r0, #0
 8009e96:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e9a:	f8d1 c000 	ldr.w	ip, [r1]
 8009e9e:	b293      	uxth	r3, r2
 8009ea0:	1ac3      	subs	r3, r0, r3
 8009ea2:	0c12      	lsrs	r2, r2, #16
 8009ea4:	fa13 f38c 	uxtah	r3, r3, ip
 8009ea8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009eb6:	45c1      	cmp	r9, r8
 8009eb8:	f841 3b04 	str.w	r3, [r1], #4
 8009ebc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009ec0:	d2e9      	bcs.n	8009e96 <quorem+0xac>
 8009ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009eca:	b922      	cbnz	r2, 8009ed6 <quorem+0xec>
 8009ecc:	3b04      	subs	r3, #4
 8009ece:	429d      	cmp	r5, r3
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	d30a      	bcc.n	8009eea <quorem+0x100>
 8009ed4:	613c      	str	r4, [r7, #16]
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	b003      	add	sp, #12
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	3b04      	subs	r3, #4
 8009ee2:	2a00      	cmp	r2, #0
 8009ee4:	d1ce      	bne.n	8009e84 <quorem+0x9a>
 8009ee6:	3c01      	subs	r4, #1
 8009ee8:	e7c9      	b.n	8009e7e <quorem+0x94>
 8009eea:	6812      	ldr	r2, [r2, #0]
 8009eec:	3b04      	subs	r3, #4
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	d1f0      	bne.n	8009ed4 <quorem+0xea>
 8009ef2:	3c01      	subs	r4, #1
 8009ef4:	e7eb      	b.n	8009ece <quorem+0xe4>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	e7ee      	b.n	8009ed8 <quorem+0xee>
 8009efa:	0000      	movs	r0, r0
 8009efc:	0000      	movs	r0, r0
	...

08009f00 <_dtoa_r>:
 8009f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f04:	ed2d 8b04 	vpush	{d8-d9}
 8009f08:	69c5      	ldr	r5, [r0, #28]
 8009f0a:	b093      	sub	sp, #76	; 0x4c
 8009f0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009f10:	ec57 6b10 	vmov	r6, r7, d0
 8009f14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f18:	9107      	str	r1, [sp, #28]
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8009f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8009f20:	b975      	cbnz	r5, 8009f40 <_dtoa_r+0x40>
 8009f22:	2010      	movs	r0, #16
 8009f24:	f7ff f824 	bl	8008f70 <malloc>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	61e0      	str	r0, [r4, #28]
 8009f2c:	b920      	cbnz	r0, 8009f38 <_dtoa_r+0x38>
 8009f2e:	4bae      	ldr	r3, [pc, #696]	; (800a1e8 <_dtoa_r+0x2e8>)
 8009f30:	21ef      	movs	r1, #239	; 0xef
 8009f32:	48ae      	ldr	r0, [pc, #696]	; (800a1ec <_dtoa_r+0x2ec>)
 8009f34:	f001 fbbe 	bl	800b6b4 <__assert_func>
 8009f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f3c:	6005      	str	r5, [r0, #0]
 8009f3e:	60c5      	str	r5, [r0, #12]
 8009f40:	69e3      	ldr	r3, [r4, #28]
 8009f42:	6819      	ldr	r1, [r3, #0]
 8009f44:	b151      	cbz	r1, 8009f5c <_dtoa_r+0x5c>
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	604a      	str	r2, [r1, #4]
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	4093      	lsls	r3, r2
 8009f4e:	608b      	str	r3, [r1, #8]
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 fe53 	bl	800abfc <_Bfree>
 8009f56:	69e3      	ldr	r3, [r4, #28]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	1e3b      	subs	r3, r7, #0
 8009f5e:	bfbb      	ittet	lt
 8009f60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f64:	9303      	strlt	r3, [sp, #12]
 8009f66:	2300      	movge	r3, #0
 8009f68:	2201      	movlt	r2, #1
 8009f6a:	bfac      	ite	ge
 8009f6c:	f8c8 3000 	strge.w	r3, [r8]
 8009f70:	f8c8 2000 	strlt.w	r2, [r8]
 8009f74:	4b9e      	ldr	r3, [pc, #632]	; (800a1f0 <_dtoa_r+0x2f0>)
 8009f76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f7a:	ea33 0308 	bics.w	r3, r3, r8
 8009f7e:	d11b      	bne.n	8009fb8 <_dtoa_r+0xb8>
 8009f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f82:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f86:	6013      	str	r3, [r2, #0]
 8009f88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f8c:	4333      	orrs	r3, r6
 8009f8e:	f000 8593 	beq.w	800aab8 <_dtoa_r+0xbb8>
 8009f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f94:	b963      	cbnz	r3, 8009fb0 <_dtoa_r+0xb0>
 8009f96:	4b97      	ldr	r3, [pc, #604]	; (800a1f4 <_dtoa_r+0x2f4>)
 8009f98:	e027      	b.n	8009fea <_dtoa_r+0xea>
 8009f9a:	4b97      	ldr	r3, [pc, #604]	; (800a1f8 <_dtoa_r+0x2f8>)
 8009f9c:	9300      	str	r3, [sp, #0]
 8009f9e:	3308      	adds	r3, #8
 8009fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	9800      	ldr	r0, [sp, #0]
 8009fa6:	b013      	add	sp, #76	; 0x4c
 8009fa8:	ecbd 8b04 	vpop	{d8-d9}
 8009fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb0:	4b90      	ldr	r3, [pc, #576]	; (800a1f4 <_dtoa_r+0x2f4>)
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	3303      	adds	r3, #3
 8009fb6:	e7f3      	b.n	8009fa0 <_dtoa_r+0xa0>
 8009fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	ec51 0b17 	vmov	r0, r1, d7
 8009fc2:	eeb0 8a47 	vmov.f32	s16, s14
 8009fc6:	eef0 8a67 	vmov.f32	s17, s15
 8009fca:	2300      	movs	r3, #0
 8009fcc:	f7f6 fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fd0:	4681      	mov	r9, r0
 8009fd2:	b160      	cbz	r0, 8009fee <_dtoa_r+0xee>
 8009fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	f000 8568 	beq.w	800aab2 <_dtoa_r+0xbb2>
 8009fe2:	4b86      	ldr	r3, [pc, #536]	; (800a1fc <_dtoa_r+0x2fc>)
 8009fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	e7da      	b.n	8009fa4 <_dtoa_r+0xa4>
 8009fee:	aa10      	add	r2, sp, #64	; 0x40
 8009ff0:	a911      	add	r1, sp, #68	; 0x44
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8009ff8:	eef0 0a68 	vmov.f32	s1, s17
 8009ffc:	f001 f8e0 	bl	800b1c0 <__d2b>
 800a000:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a004:	4682      	mov	sl, r0
 800a006:	2d00      	cmp	r5, #0
 800a008:	d07f      	beq.n	800a10a <_dtoa_r+0x20a>
 800a00a:	ee18 3a90 	vmov	r3, s17
 800a00e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a012:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a016:	ec51 0b18 	vmov	r0, r1, d8
 800a01a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a01e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a022:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a026:	4619      	mov	r1, r3
 800a028:	2200      	movs	r2, #0
 800a02a:	4b75      	ldr	r3, [pc, #468]	; (800a200 <_dtoa_r+0x300>)
 800a02c:	f7f6 f934 	bl	8000298 <__aeabi_dsub>
 800a030:	a367      	add	r3, pc, #412	; (adr r3, 800a1d0 <_dtoa_r+0x2d0>)
 800a032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a036:	f7f6 fae7 	bl	8000608 <__aeabi_dmul>
 800a03a:	a367      	add	r3, pc, #412	; (adr r3, 800a1d8 <_dtoa_r+0x2d8>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	f7f6 f92c 	bl	800029c <__adddf3>
 800a044:	4606      	mov	r6, r0
 800a046:	4628      	mov	r0, r5
 800a048:	460f      	mov	r7, r1
 800a04a:	f7f6 fa73 	bl	8000534 <__aeabi_i2d>
 800a04e:	a364      	add	r3, pc, #400	; (adr r3, 800a1e0 <_dtoa_r+0x2e0>)
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f7f6 fad8 	bl	8000608 <__aeabi_dmul>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 f91c 	bl	800029c <__adddf3>
 800a064:	4606      	mov	r6, r0
 800a066:	460f      	mov	r7, r1
 800a068:	f7f6 fd7e 	bl	8000b68 <__aeabi_d2iz>
 800a06c:	2200      	movs	r2, #0
 800a06e:	4683      	mov	fp, r0
 800a070:	2300      	movs	r3, #0
 800a072:	4630      	mov	r0, r6
 800a074:	4639      	mov	r1, r7
 800a076:	f7f6 fd39 	bl	8000aec <__aeabi_dcmplt>
 800a07a:	b148      	cbz	r0, 800a090 <_dtoa_r+0x190>
 800a07c:	4658      	mov	r0, fp
 800a07e:	f7f6 fa59 	bl	8000534 <__aeabi_i2d>
 800a082:	4632      	mov	r2, r6
 800a084:	463b      	mov	r3, r7
 800a086:	f7f6 fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800a08a:	b908      	cbnz	r0, 800a090 <_dtoa_r+0x190>
 800a08c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a090:	f1bb 0f16 	cmp.w	fp, #22
 800a094:	d857      	bhi.n	800a146 <_dtoa_r+0x246>
 800a096:	4b5b      	ldr	r3, [pc, #364]	; (800a204 <_dtoa_r+0x304>)
 800a098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	ec51 0b18 	vmov	r0, r1, d8
 800a0a4:	f7f6 fd22 	bl	8000aec <__aeabi_dcmplt>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d04e      	beq.n	800a14a <_dtoa_r+0x24a>
 800a0ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a0b6:	1b5b      	subs	r3, r3, r5
 800a0b8:	1e5a      	subs	r2, r3, #1
 800a0ba:	bf45      	ittet	mi
 800a0bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800a0c0:	9305      	strmi	r3, [sp, #20]
 800a0c2:	2300      	movpl	r3, #0
 800a0c4:	2300      	movmi	r3, #0
 800a0c6:	9206      	str	r2, [sp, #24]
 800a0c8:	bf54      	ite	pl
 800a0ca:	9305      	strpl	r3, [sp, #20]
 800a0cc:	9306      	strmi	r3, [sp, #24]
 800a0ce:	f1bb 0f00 	cmp.w	fp, #0
 800a0d2:	db3c      	blt.n	800a14e <_dtoa_r+0x24e>
 800a0d4:	9b06      	ldr	r3, [sp, #24]
 800a0d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a0da:	445b      	add	r3, fp
 800a0dc:	9306      	str	r3, [sp, #24]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9308      	str	r3, [sp, #32]
 800a0e2:	9b07      	ldr	r3, [sp, #28]
 800a0e4:	2b09      	cmp	r3, #9
 800a0e6:	d868      	bhi.n	800a1ba <_dtoa_r+0x2ba>
 800a0e8:	2b05      	cmp	r3, #5
 800a0ea:	bfc4      	itt	gt
 800a0ec:	3b04      	subgt	r3, #4
 800a0ee:	9307      	strgt	r3, [sp, #28]
 800a0f0:	9b07      	ldr	r3, [sp, #28]
 800a0f2:	f1a3 0302 	sub.w	r3, r3, #2
 800a0f6:	bfcc      	ite	gt
 800a0f8:	2500      	movgt	r5, #0
 800a0fa:	2501      	movle	r5, #1
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	f200 8085 	bhi.w	800a20c <_dtoa_r+0x30c>
 800a102:	e8df f003 	tbb	[pc, r3]
 800a106:	3b2e      	.short	0x3b2e
 800a108:	5839      	.short	0x5839
 800a10a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a10e:	441d      	add	r5, r3
 800a110:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a114:	2b20      	cmp	r3, #32
 800a116:	bfc1      	itttt	gt
 800a118:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a11c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a120:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a124:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a128:	bfd6      	itet	le
 800a12a:	f1c3 0320 	rsble	r3, r3, #32
 800a12e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a132:	fa06 f003 	lslle.w	r0, r6, r3
 800a136:	f7f6 f9ed 	bl	8000514 <__aeabi_ui2d>
 800a13a:	2201      	movs	r2, #1
 800a13c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a140:	3d01      	subs	r5, #1
 800a142:	920e      	str	r2, [sp, #56]	; 0x38
 800a144:	e76f      	b.n	800a026 <_dtoa_r+0x126>
 800a146:	2301      	movs	r3, #1
 800a148:	e7b3      	b.n	800a0b2 <_dtoa_r+0x1b2>
 800a14a:	900c      	str	r0, [sp, #48]	; 0x30
 800a14c:	e7b2      	b.n	800a0b4 <_dtoa_r+0x1b4>
 800a14e:	9b05      	ldr	r3, [sp, #20]
 800a150:	eba3 030b 	sub.w	r3, r3, fp
 800a154:	9305      	str	r3, [sp, #20]
 800a156:	f1cb 0300 	rsb	r3, fp, #0
 800a15a:	9308      	str	r3, [sp, #32]
 800a15c:	2300      	movs	r3, #0
 800a15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a160:	e7bf      	b.n	800a0e2 <_dtoa_r+0x1e2>
 800a162:	2300      	movs	r3, #0
 800a164:	9309      	str	r3, [sp, #36]	; 0x24
 800a166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dc52      	bgt.n	800a212 <_dtoa_r+0x312>
 800a16c:	2301      	movs	r3, #1
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	461a      	mov	r2, r3
 800a174:	920a      	str	r2, [sp, #40]	; 0x28
 800a176:	e00b      	b.n	800a190 <_dtoa_r+0x290>
 800a178:	2301      	movs	r3, #1
 800a17a:	e7f3      	b.n	800a164 <_dtoa_r+0x264>
 800a17c:	2300      	movs	r3, #0
 800a17e:	9309      	str	r3, [sp, #36]	; 0x24
 800a180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a182:	445b      	add	r3, fp
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	3301      	adds	r3, #1
 800a188:	2b01      	cmp	r3, #1
 800a18a:	9304      	str	r3, [sp, #16]
 800a18c:	bfb8      	it	lt
 800a18e:	2301      	movlt	r3, #1
 800a190:	69e0      	ldr	r0, [r4, #28]
 800a192:	2100      	movs	r1, #0
 800a194:	2204      	movs	r2, #4
 800a196:	f102 0614 	add.w	r6, r2, #20
 800a19a:	429e      	cmp	r6, r3
 800a19c:	d93d      	bls.n	800a21a <_dtoa_r+0x31a>
 800a19e:	6041      	str	r1, [r0, #4]
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	f000 fceb 	bl	800ab7c <_Balloc>
 800a1a6:	9000      	str	r0, [sp, #0]
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d139      	bne.n	800a220 <_dtoa_r+0x320>
 800a1ac:	4b16      	ldr	r3, [pc, #88]	; (800a208 <_dtoa_r+0x308>)
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	f240 11af 	movw	r1, #431	; 0x1af
 800a1b4:	e6bd      	b.n	8009f32 <_dtoa_r+0x32>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e7e1      	b.n	800a17e <_dtoa_r+0x27e>
 800a1ba:	2501      	movs	r5, #1
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9307      	str	r3, [sp, #28]
 800a1c0:	9509      	str	r5, [sp, #36]	; 0x24
 800a1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2312      	movs	r3, #18
 800a1ce:	e7d1      	b.n	800a174 <_dtoa_r+0x274>
 800a1d0:	636f4361 	.word	0x636f4361
 800a1d4:	3fd287a7 	.word	0x3fd287a7
 800a1d8:	8b60c8b3 	.word	0x8b60c8b3
 800a1dc:	3fc68a28 	.word	0x3fc68a28
 800a1e0:	509f79fb 	.word	0x509f79fb
 800a1e4:	3fd34413 	.word	0x3fd34413
 800a1e8:	0800c7d1 	.word	0x0800c7d1
 800a1ec:	0800c7e8 	.word	0x0800c7e8
 800a1f0:	7ff00000 	.word	0x7ff00000
 800a1f4:	0800c7cd 	.word	0x0800c7cd
 800a1f8:	0800c7c4 	.word	0x0800c7c4
 800a1fc:	0800c7a1 	.word	0x0800c7a1
 800a200:	3ff80000 	.word	0x3ff80000
 800a204:	0800c8d8 	.word	0x0800c8d8
 800a208:	0800c840 	.word	0x0800c840
 800a20c:	2301      	movs	r3, #1
 800a20e:	9309      	str	r3, [sp, #36]	; 0x24
 800a210:	e7d7      	b.n	800a1c2 <_dtoa_r+0x2c2>
 800a212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	e7ba      	b.n	800a190 <_dtoa_r+0x290>
 800a21a:	3101      	adds	r1, #1
 800a21c:	0052      	lsls	r2, r2, #1
 800a21e:	e7ba      	b.n	800a196 <_dtoa_r+0x296>
 800a220:	69e3      	ldr	r3, [r4, #28]
 800a222:	9a00      	ldr	r2, [sp, #0]
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	9b04      	ldr	r3, [sp, #16]
 800a228:	2b0e      	cmp	r3, #14
 800a22a:	f200 80a8 	bhi.w	800a37e <_dtoa_r+0x47e>
 800a22e:	2d00      	cmp	r5, #0
 800a230:	f000 80a5 	beq.w	800a37e <_dtoa_r+0x47e>
 800a234:	f1bb 0f00 	cmp.w	fp, #0
 800a238:	dd38      	ble.n	800a2ac <_dtoa_r+0x3ac>
 800a23a:	4bc0      	ldr	r3, [pc, #768]	; (800a53c <_dtoa_r+0x63c>)
 800a23c:	f00b 020f 	and.w	r2, fp, #15
 800a240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a244:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a248:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a24c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a250:	d019      	beq.n	800a286 <_dtoa_r+0x386>
 800a252:	4bbb      	ldr	r3, [pc, #748]	; (800a540 <_dtoa_r+0x640>)
 800a254:	ec51 0b18 	vmov	r0, r1, d8
 800a258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a25c:	f7f6 fafe 	bl	800085c <__aeabi_ddiv>
 800a260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a264:	f008 080f 	and.w	r8, r8, #15
 800a268:	2503      	movs	r5, #3
 800a26a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a540 <_dtoa_r+0x640>
 800a26e:	f1b8 0f00 	cmp.w	r8, #0
 800a272:	d10a      	bne.n	800a28a <_dtoa_r+0x38a>
 800a274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a278:	4632      	mov	r2, r6
 800a27a:	463b      	mov	r3, r7
 800a27c:	f7f6 faee 	bl	800085c <__aeabi_ddiv>
 800a280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a284:	e02b      	b.n	800a2de <_dtoa_r+0x3de>
 800a286:	2502      	movs	r5, #2
 800a288:	e7ef      	b.n	800a26a <_dtoa_r+0x36a>
 800a28a:	f018 0f01 	tst.w	r8, #1
 800a28e:	d008      	beq.n	800a2a2 <_dtoa_r+0x3a2>
 800a290:	4630      	mov	r0, r6
 800a292:	4639      	mov	r1, r7
 800a294:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a298:	f7f6 f9b6 	bl	8000608 <__aeabi_dmul>
 800a29c:	3501      	adds	r5, #1
 800a29e:	4606      	mov	r6, r0
 800a2a0:	460f      	mov	r7, r1
 800a2a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a2a6:	f109 0908 	add.w	r9, r9, #8
 800a2aa:	e7e0      	b.n	800a26e <_dtoa_r+0x36e>
 800a2ac:	f000 809f 	beq.w	800a3ee <_dtoa_r+0x4ee>
 800a2b0:	f1cb 0600 	rsb	r6, fp, #0
 800a2b4:	4ba1      	ldr	r3, [pc, #644]	; (800a53c <_dtoa_r+0x63c>)
 800a2b6:	4fa2      	ldr	r7, [pc, #648]	; (800a540 <_dtoa_r+0x640>)
 800a2b8:	f006 020f 	and.w	r2, r6, #15
 800a2bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	ec51 0b18 	vmov	r0, r1, d8
 800a2c8:	f7f6 f99e 	bl	8000608 <__aeabi_dmul>
 800a2cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2d0:	1136      	asrs	r6, r6, #4
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2502      	movs	r5, #2
 800a2d6:	2e00      	cmp	r6, #0
 800a2d8:	d17e      	bne.n	800a3d8 <_dtoa_r+0x4d8>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d1d0      	bne.n	800a280 <_dtoa_r+0x380>
 800a2de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 8084 	beq.w	800a3f2 <_dtoa_r+0x4f2>
 800a2ea:	4b96      	ldr	r3, [pc, #600]	; (800a544 <_dtoa_r+0x644>)
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	f7f6 fbfb 	bl	8000aec <__aeabi_dcmplt>
 800a2f6:	2800      	cmp	r0, #0
 800a2f8:	d07b      	beq.n	800a3f2 <_dtoa_r+0x4f2>
 800a2fa:	9b04      	ldr	r3, [sp, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d078      	beq.n	800a3f2 <_dtoa_r+0x4f2>
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	dd39      	ble.n	800a37a <_dtoa_r+0x47a>
 800a306:	4b90      	ldr	r3, [pc, #576]	; (800a548 <_dtoa_r+0x648>)
 800a308:	2200      	movs	r2, #0
 800a30a:	4640      	mov	r0, r8
 800a30c:	4649      	mov	r1, r9
 800a30e:	f7f6 f97b 	bl	8000608 <__aeabi_dmul>
 800a312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a316:	9e01      	ldr	r6, [sp, #4]
 800a318:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a31c:	3501      	adds	r5, #1
 800a31e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a322:	4628      	mov	r0, r5
 800a324:	f7f6 f906 	bl	8000534 <__aeabi_i2d>
 800a328:	4642      	mov	r2, r8
 800a32a:	464b      	mov	r3, r9
 800a32c:	f7f6 f96c 	bl	8000608 <__aeabi_dmul>
 800a330:	4b86      	ldr	r3, [pc, #536]	; (800a54c <_dtoa_r+0x64c>)
 800a332:	2200      	movs	r2, #0
 800a334:	f7f5 ffb2 	bl	800029c <__adddf3>
 800a338:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a33c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a340:	9303      	str	r3, [sp, #12]
 800a342:	2e00      	cmp	r6, #0
 800a344:	d158      	bne.n	800a3f8 <_dtoa_r+0x4f8>
 800a346:	4b82      	ldr	r3, [pc, #520]	; (800a550 <_dtoa_r+0x650>)
 800a348:	2200      	movs	r2, #0
 800a34a:	4640      	mov	r0, r8
 800a34c:	4649      	mov	r1, r9
 800a34e:	f7f5 ffa3 	bl	8000298 <__aeabi_dsub>
 800a352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a356:	4680      	mov	r8, r0
 800a358:	4689      	mov	r9, r1
 800a35a:	f7f6 fbe5 	bl	8000b28 <__aeabi_dcmpgt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	f040 8296 	bne.w	800a890 <_dtoa_r+0x990>
 800a364:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a368:	4640      	mov	r0, r8
 800a36a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a36e:	4649      	mov	r1, r9
 800a370:	f7f6 fbbc 	bl	8000aec <__aeabi_dcmplt>
 800a374:	2800      	cmp	r0, #0
 800a376:	f040 8289 	bne.w	800a88c <_dtoa_r+0x98c>
 800a37a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a37e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a380:	2b00      	cmp	r3, #0
 800a382:	f2c0 814e 	blt.w	800a622 <_dtoa_r+0x722>
 800a386:	f1bb 0f0e 	cmp.w	fp, #14
 800a38a:	f300 814a 	bgt.w	800a622 <_dtoa_r+0x722>
 800a38e:	4b6b      	ldr	r3, [pc, #428]	; (800a53c <_dtoa_r+0x63c>)
 800a390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a394:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f280 80dc 	bge.w	800a558 <_dtoa_r+0x658>
 800a3a0:	9b04      	ldr	r3, [sp, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	f300 80d8 	bgt.w	800a558 <_dtoa_r+0x658>
 800a3a8:	f040 826f 	bne.w	800a88a <_dtoa_r+0x98a>
 800a3ac:	4b68      	ldr	r3, [pc, #416]	; (800a550 <_dtoa_r+0x650>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	f7f6 f928 	bl	8000608 <__aeabi_dmul>
 800a3b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3bc:	f7f6 fbaa 	bl	8000b14 <__aeabi_dcmpge>
 800a3c0:	9e04      	ldr	r6, [sp, #16]
 800a3c2:	4637      	mov	r7, r6
 800a3c4:	2800      	cmp	r0, #0
 800a3c6:	f040 8245 	bne.w	800a854 <_dtoa_r+0x954>
 800a3ca:	9d00      	ldr	r5, [sp, #0]
 800a3cc:	2331      	movs	r3, #49	; 0x31
 800a3ce:	f805 3b01 	strb.w	r3, [r5], #1
 800a3d2:	f10b 0b01 	add.w	fp, fp, #1
 800a3d6:	e241      	b.n	800a85c <_dtoa_r+0x95c>
 800a3d8:	07f2      	lsls	r2, r6, #31
 800a3da:	d505      	bpl.n	800a3e8 <_dtoa_r+0x4e8>
 800a3dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3e0:	f7f6 f912 	bl	8000608 <__aeabi_dmul>
 800a3e4:	3501      	adds	r5, #1
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	1076      	asrs	r6, r6, #1
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	e773      	b.n	800a2d6 <_dtoa_r+0x3d6>
 800a3ee:	2502      	movs	r5, #2
 800a3f0:	e775      	b.n	800a2de <_dtoa_r+0x3de>
 800a3f2:	9e04      	ldr	r6, [sp, #16]
 800a3f4:	465f      	mov	r7, fp
 800a3f6:	e792      	b.n	800a31e <_dtoa_r+0x41e>
 800a3f8:	9900      	ldr	r1, [sp, #0]
 800a3fa:	4b50      	ldr	r3, [pc, #320]	; (800a53c <_dtoa_r+0x63c>)
 800a3fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a400:	4431      	add	r1, r6
 800a402:	9102      	str	r1, [sp, #8]
 800a404:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a406:	eeb0 9a47 	vmov.f32	s18, s14
 800a40a:	eef0 9a67 	vmov.f32	s19, s15
 800a40e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a416:	2900      	cmp	r1, #0
 800a418:	d044      	beq.n	800a4a4 <_dtoa_r+0x5a4>
 800a41a:	494e      	ldr	r1, [pc, #312]	; (800a554 <_dtoa_r+0x654>)
 800a41c:	2000      	movs	r0, #0
 800a41e:	f7f6 fa1d 	bl	800085c <__aeabi_ddiv>
 800a422:	ec53 2b19 	vmov	r2, r3, d9
 800a426:	f7f5 ff37 	bl	8000298 <__aeabi_dsub>
 800a42a:	9d00      	ldr	r5, [sp, #0]
 800a42c:	ec41 0b19 	vmov	d9, r0, r1
 800a430:	4649      	mov	r1, r9
 800a432:	4640      	mov	r0, r8
 800a434:	f7f6 fb98 	bl	8000b68 <__aeabi_d2iz>
 800a438:	4606      	mov	r6, r0
 800a43a:	f7f6 f87b 	bl	8000534 <__aeabi_i2d>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4640      	mov	r0, r8
 800a444:	4649      	mov	r1, r9
 800a446:	f7f5 ff27 	bl	8000298 <__aeabi_dsub>
 800a44a:	3630      	adds	r6, #48	; 0x30
 800a44c:	f805 6b01 	strb.w	r6, [r5], #1
 800a450:	ec53 2b19 	vmov	r2, r3, d9
 800a454:	4680      	mov	r8, r0
 800a456:	4689      	mov	r9, r1
 800a458:	f7f6 fb48 	bl	8000aec <__aeabi_dcmplt>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d164      	bne.n	800a52a <_dtoa_r+0x62a>
 800a460:	4642      	mov	r2, r8
 800a462:	464b      	mov	r3, r9
 800a464:	4937      	ldr	r1, [pc, #220]	; (800a544 <_dtoa_r+0x644>)
 800a466:	2000      	movs	r0, #0
 800a468:	f7f5 ff16 	bl	8000298 <__aeabi_dsub>
 800a46c:	ec53 2b19 	vmov	r2, r3, d9
 800a470:	f7f6 fb3c 	bl	8000aec <__aeabi_dcmplt>
 800a474:	2800      	cmp	r0, #0
 800a476:	f040 80b6 	bne.w	800a5e6 <_dtoa_r+0x6e6>
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	429d      	cmp	r5, r3
 800a47e:	f43f af7c 	beq.w	800a37a <_dtoa_r+0x47a>
 800a482:	4b31      	ldr	r3, [pc, #196]	; (800a548 <_dtoa_r+0x648>)
 800a484:	ec51 0b19 	vmov	r0, r1, d9
 800a488:	2200      	movs	r2, #0
 800a48a:	f7f6 f8bd 	bl	8000608 <__aeabi_dmul>
 800a48e:	4b2e      	ldr	r3, [pc, #184]	; (800a548 <_dtoa_r+0x648>)
 800a490:	ec41 0b19 	vmov	d9, r0, r1
 800a494:	2200      	movs	r2, #0
 800a496:	4640      	mov	r0, r8
 800a498:	4649      	mov	r1, r9
 800a49a:	f7f6 f8b5 	bl	8000608 <__aeabi_dmul>
 800a49e:	4680      	mov	r8, r0
 800a4a0:	4689      	mov	r9, r1
 800a4a2:	e7c5      	b.n	800a430 <_dtoa_r+0x530>
 800a4a4:	ec51 0b17 	vmov	r0, r1, d7
 800a4a8:	f7f6 f8ae 	bl	8000608 <__aeabi_dmul>
 800a4ac:	9b02      	ldr	r3, [sp, #8]
 800a4ae:	9d00      	ldr	r5, [sp, #0]
 800a4b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4b2:	ec41 0b19 	vmov	d9, r0, r1
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	4640      	mov	r0, r8
 800a4ba:	f7f6 fb55 	bl	8000b68 <__aeabi_d2iz>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	f7f6 f838 	bl	8000534 <__aeabi_i2d>
 800a4c4:	3630      	adds	r6, #48	; 0x30
 800a4c6:	4602      	mov	r2, r0
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	4640      	mov	r0, r8
 800a4cc:	4649      	mov	r1, r9
 800a4ce:	f7f5 fee3 	bl	8000298 <__aeabi_dsub>
 800a4d2:	f805 6b01 	strb.w	r6, [r5], #1
 800a4d6:	9b02      	ldr	r3, [sp, #8]
 800a4d8:	429d      	cmp	r5, r3
 800a4da:	4680      	mov	r8, r0
 800a4dc:	4689      	mov	r9, r1
 800a4de:	f04f 0200 	mov.w	r2, #0
 800a4e2:	d124      	bne.n	800a52e <_dtoa_r+0x62e>
 800a4e4:	4b1b      	ldr	r3, [pc, #108]	; (800a554 <_dtoa_r+0x654>)
 800a4e6:	ec51 0b19 	vmov	r0, r1, d9
 800a4ea:	f7f5 fed7 	bl	800029c <__adddf3>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	f7f6 fb17 	bl	8000b28 <__aeabi_dcmpgt>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d173      	bne.n	800a5e6 <_dtoa_r+0x6e6>
 800a4fe:	ec53 2b19 	vmov	r2, r3, d9
 800a502:	4914      	ldr	r1, [pc, #80]	; (800a554 <_dtoa_r+0x654>)
 800a504:	2000      	movs	r0, #0
 800a506:	f7f5 fec7 	bl	8000298 <__aeabi_dsub>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4640      	mov	r0, r8
 800a510:	4649      	mov	r1, r9
 800a512:	f7f6 faeb 	bl	8000aec <__aeabi_dcmplt>
 800a516:	2800      	cmp	r0, #0
 800a518:	f43f af2f 	beq.w	800a37a <_dtoa_r+0x47a>
 800a51c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a51e:	1e6b      	subs	r3, r5, #1
 800a520:	930f      	str	r3, [sp, #60]	; 0x3c
 800a522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a526:	2b30      	cmp	r3, #48	; 0x30
 800a528:	d0f8      	beq.n	800a51c <_dtoa_r+0x61c>
 800a52a:	46bb      	mov	fp, r7
 800a52c:	e04a      	b.n	800a5c4 <_dtoa_r+0x6c4>
 800a52e:	4b06      	ldr	r3, [pc, #24]	; (800a548 <_dtoa_r+0x648>)
 800a530:	f7f6 f86a 	bl	8000608 <__aeabi_dmul>
 800a534:	4680      	mov	r8, r0
 800a536:	4689      	mov	r9, r1
 800a538:	e7bd      	b.n	800a4b6 <_dtoa_r+0x5b6>
 800a53a:	bf00      	nop
 800a53c:	0800c8d8 	.word	0x0800c8d8
 800a540:	0800c8b0 	.word	0x0800c8b0
 800a544:	3ff00000 	.word	0x3ff00000
 800a548:	40240000 	.word	0x40240000
 800a54c:	401c0000 	.word	0x401c0000
 800a550:	40140000 	.word	0x40140000
 800a554:	3fe00000 	.word	0x3fe00000
 800a558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a55c:	9d00      	ldr	r5, [sp, #0]
 800a55e:	4642      	mov	r2, r8
 800a560:	464b      	mov	r3, r9
 800a562:	4630      	mov	r0, r6
 800a564:	4639      	mov	r1, r7
 800a566:	f7f6 f979 	bl	800085c <__aeabi_ddiv>
 800a56a:	f7f6 fafd 	bl	8000b68 <__aeabi_d2iz>
 800a56e:	9001      	str	r0, [sp, #4]
 800a570:	f7f5 ffe0 	bl	8000534 <__aeabi_i2d>
 800a574:	4642      	mov	r2, r8
 800a576:	464b      	mov	r3, r9
 800a578:	f7f6 f846 	bl	8000608 <__aeabi_dmul>
 800a57c:	4602      	mov	r2, r0
 800a57e:	460b      	mov	r3, r1
 800a580:	4630      	mov	r0, r6
 800a582:	4639      	mov	r1, r7
 800a584:	f7f5 fe88 	bl	8000298 <__aeabi_dsub>
 800a588:	9e01      	ldr	r6, [sp, #4]
 800a58a:	9f04      	ldr	r7, [sp, #16]
 800a58c:	3630      	adds	r6, #48	; 0x30
 800a58e:	f805 6b01 	strb.w	r6, [r5], #1
 800a592:	9e00      	ldr	r6, [sp, #0]
 800a594:	1bae      	subs	r6, r5, r6
 800a596:	42b7      	cmp	r7, r6
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	d134      	bne.n	800a608 <_dtoa_r+0x708>
 800a59e:	f7f5 fe7d 	bl	800029c <__adddf3>
 800a5a2:	4642      	mov	r2, r8
 800a5a4:	464b      	mov	r3, r9
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	460f      	mov	r7, r1
 800a5aa:	f7f6 fabd 	bl	8000b28 <__aeabi_dcmpgt>
 800a5ae:	b9c8      	cbnz	r0, 800a5e4 <_dtoa_r+0x6e4>
 800a5b0:	4642      	mov	r2, r8
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	4630      	mov	r0, r6
 800a5b6:	4639      	mov	r1, r7
 800a5b8:	f7f6 fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5bc:	b110      	cbz	r0, 800a5c4 <_dtoa_r+0x6c4>
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	07db      	lsls	r3, r3, #31
 800a5c2:	d40f      	bmi.n	800a5e4 <_dtoa_r+0x6e4>
 800a5c4:	4651      	mov	r1, sl
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 fb18 	bl	800abfc <_Bfree>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5d0:	702b      	strb	r3, [r5, #0]
 800a5d2:	f10b 0301 	add.w	r3, fp, #1
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f43f ace2 	beq.w	8009fa4 <_dtoa_r+0xa4>
 800a5e0:	601d      	str	r5, [r3, #0]
 800a5e2:	e4df      	b.n	8009fa4 <_dtoa_r+0xa4>
 800a5e4:	465f      	mov	r7, fp
 800a5e6:	462b      	mov	r3, r5
 800a5e8:	461d      	mov	r5, r3
 800a5ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5ee:	2a39      	cmp	r2, #57	; 0x39
 800a5f0:	d106      	bne.n	800a600 <_dtoa_r+0x700>
 800a5f2:	9a00      	ldr	r2, [sp, #0]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d1f7      	bne.n	800a5e8 <_dtoa_r+0x6e8>
 800a5f8:	9900      	ldr	r1, [sp, #0]
 800a5fa:	2230      	movs	r2, #48	; 0x30
 800a5fc:	3701      	adds	r7, #1
 800a5fe:	700a      	strb	r2, [r1, #0]
 800a600:	781a      	ldrb	r2, [r3, #0]
 800a602:	3201      	adds	r2, #1
 800a604:	701a      	strb	r2, [r3, #0]
 800a606:	e790      	b.n	800a52a <_dtoa_r+0x62a>
 800a608:	4ba3      	ldr	r3, [pc, #652]	; (800a898 <_dtoa_r+0x998>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	f7f5 fffc 	bl	8000608 <__aeabi_dmul>
 800a610:	2200      	movs	r2, #0
 800a612:	2300      	movs	r3, #0
 800a614:	4606      	mov	r6, r0
 800a616:	460f      	mov	r7, r1
 800a618:	f7f6 fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d09e      	beq.n	800a55e <_dtoa_r+0x65e>
 800a620:	e7d0      	b.n	800a5c4 <_dtoa_r+0x6c4>
 800a622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a624:	2a00      	cmp	r2, #0
 800a626:	f000 80ca 	beq.w	800a7be <_dtoa_r+0x8be>
 800a62a:	9a07      	ldr	r2, [sp, #28]
 800a62c:	2a01      	cmp	r2, #1
 800a62e:	f300 80ad 	bgt.w	800a78c <_dtoa_r+0x88c>
 800a632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a634:	2a00      	cmp	r2, #0
 800a636:	f000 80a5 	beq.w	800a784 <_dtoa_r+0x884>
 800a63a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a63e:	9e08      	ldr	r6, [sp, #32]
 800a640:	9d05      	ldr	r5, [sp, #20]
 800a642:	9a05      	ldr	r2, [sp, #20]
 800a644:	441a      	add	r2, r3
 800a646:	9205      	str	r2, [sp, #20]
 800a648:	9a06      	ldr	r2, [sp, #24]
 800a64a:	2101      	movs	r1, #1
 800a64c:	441a      	add	r2, r3
 800a64e:	4620      	mov	r0, r4
 800a650:	9206      	str	r2, [sp, #24]
 800a652:	f000 fb89 	bl	800ad68 <__i2b>
 800a656:	4607      	mov	r7, r0
 800a658:	b165      	cbz	r5, 800a674 <_dtoa_r+0x774>
 800a65a:	9b06      	ldr	r3, [sp, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	dd09      	ble.n	800a674 <_dtoa_r+0x774>
 800a660:	42ab      	cmp	r3, r5
 800a662:	9a05      	ldr	r2, [sp, #20]
 800a664:	bfa8      	it	ge
 800a666:	462b      	movge	r3, r5
 800a668:	1ad2      	subs	r2, r2, r3
 800a66a:	9205      	str	r2, [sp, #20]
 800a66c:	9a06      	ldr	r2, [sp, #24]
 800a66e:	1aed      	subs	r5, r5, r3
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	9306      	str	r3, [sp, #24]
 800a674:	9b08      	ldr	r3, [sp, #32]
 800a676:	b1f3      	cbz	r3, 800a6b6 <_dtoa_r+0x7b6>
 800a678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	f000 80a3 	beq.w	800a7c6 <_dtoa_r+0x8c6>
 800a680:	2e00      	cmp	r6, #0
 800a682:	dd10      	ble.n	800a6a6 <_dtoa_r+0x7a6>
 800a684:	4639      	mov	r1, r7
 800a686:	4632      	mov	r2, r6
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 fc2d 	bl	800aee8 <__pow5mult>
 800a68e:	4652      	mov	r2, sl
 800a690:	4601      	mov	r1, r0
 800a692:	4607      	mov	r7, r0
 800a694:	4620      	mov	r0, r4
 800a696:	f000 fb7d 	bl	800ad94 <__multiply>
 800a69a:	4651      	mov	r1, sl
 800a69c:	4680      	mov	r8, r0
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f000 faac 	bl	800abfc <_Bfree>
 800a6a4:	46c2      	mov	sl, r8
 800a6a6:	9b08      	ldr	r3, [sp, #32]
 800a6a8:	1b9a      	subs	r2, r3, r6
 800a6aa:	d004      	beq.n	800a6b6 <_dtoa_r+0x7b6>
 800a6ac:	4651      	mov	r1, sl
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	f000 fc1a 	bl	800aee8 <__pow5mult>
 800a6b4:	4682      	mov	sl, r0
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f000 fb55 	bl	800ad68 <__i2b>
 800a6be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	f340 8081 	ble.w	800a7ca <_dtoa_r+0x8ca>
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	4601      	mov	r1, r0
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f000 fc0b 	bl	800aee8 <__pow5mult>
 800a6d2:	9b07      	ldr	r3, [sp, #28]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	4606      	mov	r6, r0
 800a6d8:	dd7a      	ble.n	800a7d0 <_dtoa_r+0x8d0>
 800a6da:	f04f 0800 	mov.w	r8, #0
 800a6de:	6933      	ldr	r3, [r6, #16]
 800a6e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a6e4:	6918      	ldr	r0, [r3, #16]
 800a6e6:	f000 faf1 	bl	800accc <__hi0bits>
 800a6ea:	f1c0 0020 	rsb	r0, r0, #32
 800a6ee:	9b06      	ldr	r3, [sp, #24]
 800a6f0:	4418      	add	r0, r3
 800a6f2:	f010 001f 	ands.w	r0, r0, #31
 800a6f6:	f000 8094 	beq.w	800a822 <_dtoa_r+0x922>
 800a6fa:	f1c0 0320 	rsb	r3, r0, #32
 800a6fe:	2b04      	cmp	r3, #4
 800a700:	f340 8085 	ble.w	800a80e <_dtoa_r+0x90e>
 800a704:	9b05      	ldr	r3, [sp, #20]
 800a706:	f1c0 001c 	rsb	r0, r0, #28
 800a70a:	4403      	add	r3, r0
 800a70c:	9305      	str	r3, [sp, #20]
 800a70e:	9b06      	ldr	r3, [sp, #24]
 800a710:	4403      	add	r3, r0
 800a712:	4405      	add	r5, r0
 800a714:	9306      	str	r3, [sp, #24]
 800a716:	9b05      	ldr	r3, [sp, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	dd05      	ble.n	800a728 <_dtoa_r+0x828>
 800a71c:	4651      	mov	r1, sl
 800a71e:	461a      	mov	r2, r3
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fc3b 	bl	800af9c <__lshift>
 800a726:	4682      	mov	sl, r0
 800a728:	9b06      	ldr	r3, [sp, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dd05      	ble.n	800a73a <_dtoa_r+0x83a>
 800a72e:	4631      	mov	r1, r6
 800a730:	461a      	mov	r2, r3
 800a732:	4620      	mov	r0, r4
 800a734:	f000 fc32 	bl	800af9c <__lshift>
 800a738:	4606      	mov	r6, r0
 800a73a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d072      	beq.n	800a826 <_dtoa_r+0x926>
 800a740:	4631      	mov	r1, r6
 800a742:	4650      	mov	r0, sl
 800a744:	f000 fc96 	bl	800b074 <__mcmp>
 800a748:	2800      	cmp	r0, #0
 800a74a:	da6c      	bge.n	800a826 <_dtoa_r+0x926>
 800a74c:	2300      	movs	r3, #0
 800a74e:	4651      	mov	r1, sl
 800a750:	220a      	movs	r2, #10
 800a752:	4620      	mov	r0, r4
 800a754:	f000 fa74 	bl	800ac40 <__multadd>
 800a758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a75a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a75e:	4682      	mov	sl, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 81b0 	beq.w	800aac6 <_dtoa_r+0xbc6>
 800a766:	2300      	movs	r3, #0
 800a768:	4639      	mov	r1, r7
 800a76a:	220a      	movs	r2, #10
 800a76c:	4620      	mov	r0, r4
 800a76e:	f000 fa67 	bl	800ac40 <__multadd>
 800a772:	9b01      	ldr	r3, [sp, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	4607      	mov	r7, r0
 800a778:	f300 8096 	bgt.w	800a8a8 <_dtoa_r+0x9a8>
 800a77c:	9b07      	ldr	r3, [sp, #28]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	dc59      	bgt.n	800a836 <_dtoa_r+0x936>
 800a782:	e091      	b.n	800a8a8 <_dtoa_r+0x9a8>
 800a784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a78a:	e758      	b.n	800a63e <_dtoa_r+0x73e>
 800a78c:	9b04      	ldr	r3, [sp, #16]
 800a78e:	1e5e      	subs	r6, r3, #1
 800a790:	9b08      	ldr	r3, [sp, #32]
 800a792:	42b3      	cmp	r3, r6
 800a794:	bfbf      	itttt	lt
 800a796:	9b08      	ldrlt	r3, [sp, #32]
 800a798:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a79a:	9608      	strlt	r6, [sp, #32]
 800a79c:	1af3      	sublt	r3, r6, r3
 800a79e:	bfb4      	ite	lt
 800a7a0:	18d2      	addlt	r2, r2, r3
 800a7a2:	1b9e      	subge	r6, r3, r6
 800a7a4:	9b04      	ldr	r3, [sp, #16]
 800a7a6:	bfbc      	itt	lt
 800a7a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a7aa:	2600      	movlt	r6, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	bfb7      	itett	lt
 800a7b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a7b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a7b8:	1a9d      	sublt	r5, r3, r2
 800a7ba:	2300      	movlt	r3, #0
 800a7bc:	e741      	b.n	800a642 <_dtoa_r+0x742>
 800a7be:	9e08      	ldr	r6, [sp, #32]
 800a7c0:	9d05      	ldr	r5, [sp, #20]
 800a7c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a7c4:	e748      	b.n	800a658 <_dtoa_r+0x758>
 800a7c6:	9a08      	ldr	r2, [sp, #32]
 800a7c8:	e770      	b.n	800a6ac <_dtoa_r+0x7ac>
 800a7ca:	9b07      	ldr	r3, [sp, #28]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	dc19      	bgt.n	800a804 <_dtoa_r+0x904>
 800a7d0:	9b02      	ldr	r3, [sp, #8]
 800a7d2:	b9bb      	cbnz	r3, 800a804 <_dtoa_r+0x904>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7da:	b99b      	cbnz	r3, 800a804 <_dtoa_r+0x904>
 800a7dc:	9b03      	ldr	r3, [sp, #12]
 800a7de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7e2:	0d1b      	lsrs	r3, r3, #20
 800a7e4:	051b      	lsls	r3, r3, #20
 800a7e6:	b183      	cbz	r3, 800a80a <_dtoa_r+0x90a>
 800a7e8:	9b05      	ldr	r3, [sp, #20]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	9b06      	ldr	r3, [sp, #24]
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	9306      	str	r3, [sp, #24]
 800a7f4:	f04f 0801 	mov.w	r8, #1
 800a7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f47f af6f 	bne.w	800a6de <_dtoa_r+0x7de>
 800a800:	2001      	movs	r0, #1
 800a802:	e774      	b.n	800a6ee <_dtoa_r+0x7ee>
 800a804:	f04f 0800 	mov.w	r8, #0
 800a808:	e7f6      	b.n	800a7f8 <_dtoa_r+0x8f8>
 800a80a:	4698      	mov	r8, r3
 800a80c:	e7f4      	b.n	800a7f8 <_dtoa_r+0x8f8>
 800a80e:	d082      	beq.n	800a716 <_dtoa_r+0x816>
 800a810:	9a05      	ldr	r2, [sp, #20]
 800a812:	331c      	adds	r3, #28
 800a814:	441a      	add	r2, r3
 800a816:	9205      	str	r2, [sp, #20]
 800a818:	9a06      	ldr	r2, [sp, #24]
 800a81a:	441a      	add	r2, r3
 800a81c:	441d      	add	r5, r3
 800a81e:	9206      	str	r2, [sp, #24]
 800a820:	e779      	b.n	800a716 <_dtoa_r+0x816>
 800a822:	4603      	mov	r3, r0
 800a824:	e7f4      	b.n	800a810 <_dtoa_r+0x910>
 800a826:	9b04      	ldr	r3, [sp, #16]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	dc37      	bgt.n	800a89c <_dtoa_r+0x99c>
 800a82c:	9b07      	ldr	r3, [sp, #28]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	dd34      	ble.n	800a89c <_dtoa_r+0x99c>
 800a832:	9b04      	ldr	r3, [sp, #16]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	b963      	cbnz	r3, 800a854 <_dtoa_r+0x954>
 800a83a:	4631      	mov	r1, r6
 800a83c:	2205      	movs	r2, #5
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 f9fe 	bl	800ac40 <__multadd>
 800a844:	4601      	mov	r1, r0
 800a846:	4606      	mov	r6, r0
 800a848:	4650      	mov	r0, sl
 800a84a:	f000 fc13 	bl	800b074 <__mcmp>
 800a84e:	2800      	cmp	r0, #0
 800a850:	f73f adbb 	bgt.w	800a3ca <_dtoa_r+0x4ca>
 800a854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a856:	9d00      	ldr	r5, [sp, #0]
 800a858:	ea6f 0b03 	mvn.w	fp, r3
 800a85c:	f04f 0800 	mov.w	r8, #0
 800a860:	4631      	mov	r1, r6
 800a862:	4620      	mov	r0, r4
 800a864:	f000 f9ca 	bl	800abfc <_Bfree>
 800a868:	2f00      	cmp	r7, #0
 800a86a:	f43f aeab 	beq.w	800a5c4 <_dtoa_r+0x6c4>
 800a86e:	f1b8 0f00 	cmp.w	r8, #0
 800a872:	d005      	beq.n	800a880 <_dtoa_r+0x980>
 800a874:	45b8      	cmp	r8, r7
 800a876:	d003      	beq.n	800a880 <_dtoa_r+0x980>
 800a878:	4641      	mov	r1, r8
 800a87a:	4620      	mov	r0, r4
 800a87c:	f000 f9be 	bl	800abfc <_Bfree>
 800a880:	4639      	mov	r1, r7
 800a882:	4620      	mov	r0, r4
 800a884:	f000 f9ba 	bl	800abfc <_Bfree>
 800a888:	e69c      	b.n	800a5c4 <_dtoa_r+0x6c4>
 800a88a:	2600      	movs	r6, #0
 800a88c:	4637      	mov	r7, r6
 800a88e:	e7e1      	b.n	800a854 <_dtoa_r+0x954>
 800a890:	46bb      	mov	fp, r7
 800a892:	4637      	mov	r7, r6
 800a894:	e599      	b.n	800a3ca <_dtoa_r+0x4ca>
 800a896:	bf00      	nop
 800a898:	40240000 	.word	0x40240000
 800a89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 80c8 	beq.w	800aa34 <_dtoa_r+0xb34>
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	9301      	str	r3, [sp, #4]
 800a8a8:	2d00      	cmp	r5, #0
 800a8aa:	dd05      	ble.n	800a8b8 <_dtoa_r+0x9b8>
 800a8ac:	4639      	mov	r1, r7
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	f000 fb73 	bl	800af9c <__lshift>
 800a8b6:	4607      	mov	r7, r0
 800a8b8:	f1b8 0f00 	cmp.w	r8, #0
 800a8bc:	d05b      	beq.n	800a976 <_dtoa_r+0xa76>
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 f95b 	bl	800ab7c <_Balloc>
 800a8c6:	4605      	mov	r5, r0
 800a8c8:	b928      	cbnz	r0, 800a8d6 <_dtoa_r+0x9d6>
 800a8ca:	4b83      	ldr	r3, [pc, #524]	; (800aad8 <_dtoa_r+0xbd8>)
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a8d2:	f7ff bb2e 	b.w	8009f32 <_dtoa_r+0x32>
 800a8d6:	693a      	ldr	r2, [r7, #16]
 800a8d8:	3202      	adds	r2, #2
 800a8da:	0092      	lsls	r2, r2, #2
 800a8dc:	f107 010c 	add.w	r1, r7, #12
 800a8e0:	300c      	adds	r0, #12
 800a8e2:	f7ff fa74 	bl	8009dce <memcpy>
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	4629      	mov	r1, r5
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f000 fb56 	bl	800af9c <__lshift>
 800a8f0:	9b00      	ldr	r3, [sp, #0]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	9304      	str	r3, [sp, #16]
 800a8f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	9308      	str	r3, [sp, #32]
 800a8fe:	9b02      	ldr	r3, [sp, #8]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	46b8      	mov	r8, r7
 800a906:	9306      	str	r3, [sp, #24]
 800a908:	4607      	mov	r7, r0
 800a90a:	9b04      	ldr	r3, [sp, #16]
 800a90c:	4631      	mov	r1, r6
 800a90e:	3b01      	subs	r3, #1
 800a910:	4650      	mov	r0, sl
 800a912:	9301      	str	r3, [sp, #4]
 800a914:	f7ff fa69 	bl	8009dea <quorem>
 800a918:	4641      	mov	r1, r8
 800a91a:	9002      	str	r0, [sp, #8]
 800a91c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a920:	4650      	mov	r0, sl
 800a922:	f000 fba7 	bl	800b074 <__mcmp>
 800a926:	463a      	mov	r2, r7
 800a928:	9005      	str	r0, [sp, #20]
 800a92a:	4631      	mov	r1, r6
 800a92c:	4620      	mov	r0, r4
 800a92e:	f000 fbbd 	bl	800b0ac <__mdiff>
 800a932:	68c2      	ldr	r2, [r0, #12]
 800a934:	4605      	mov	r5, r0
 800a936:	bb02      	cbnz	r2, 800a97a <_dtoa_r+0xa7a>
 800a938:	4601      	mov	r1, r0
 800a93a:	4650      	mov	r0, sl
 800a93c:	f000 fb9a 	bl	800b074 <__mcmp>
 800a940:	4602      	mov	r2, r0
 800a942:	4629      	mov	r1, r5
 800a944:	4620      	mov	r0, r4
 800a946:	9209      	str	r2, [sp, #36]	; 0x24
 800a948:	f000 f958 	bl	800abfc <_Bfree>
 800a94c:	9b07      	ldr	r3, [sp, #28]
 800a94e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a950:	9d04      	ldr	r5, [sp, #16]
 800a952:	ea43 0102 	orr.w	r1, r3, r2
 800a956:	9b06      	ldr	r3, [sp, #24]
 800a958:	4319      	orrs	r1, r3
 800a95a:	d110      	bne.n	800a97e <_dtoa_r+0xa7e>
 800a95c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a960:	d029      	beq.n	800a9b6 <_dtoa_r+0xab6>
 800a962:	9b05      	ldr	r3, [sp, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	dd02      	ble.n	800a96e <_dtoa_r+0xa6e>
 800a968:	9b02      	ldr	r3, [sp, #8]
 800a96a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a96e:	9b01      	ldr	r3, [sp, #4]
 800a970:	f883 9000 	strb.w	r9, [r3]
 800a974:	e774      	b.n	800a860 <_dtoa_r+0x960>
 800a976:	4638      	mov	r0, r7
 800a978:	e7ba      	b.n	800a8f0 <_dtoa_r+0x9f0>
 800a97a:	2201      	movs	r2, #1
 800a97c:	e7e1      	b.n	800a942 <_dtoa_r+0xa42>
 800a97e:	9b05      	ldr	r3, [sp, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	db04      	blt.n	800a98e <_dtoa_r+0xa8e>
 800a984:	9907      	ldr	r1, [sp, #28]
 800a986:	430b      	orrs	r3, r1
 800a988:	9906      	ldr	r1, [sp, #24]
 800a98a:	430b      	orrs	r3, r1
 800a98c:	d120      	bne.n	800a9d0 <_dtoa_r+0xad0>
 800a98e:	2a00      	cmp	r2, #0
 800a990:	dded      	ble.n	800a96e <_dtoa_r+0xa6e>
 800a992:	4651      	mov	r1, sl
 800a994:	2201      	movs	r2, #1
 800a996:	4620      	mov	r0, r4
 800a998:	f000 fb00 	bl	800af9c <__lshift>
 800a99c:	4631      	mov	r1, r6
 800a99e:	4682      	mov	sl, r0
 800a9a0:	f000 fb68 	bl	800b074 <__mcmp>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	dc03      	bgt.n	800a9b0 <_dtoa_r+0xab0>
 800a9a8:	d1e1      	bne.n	800a96e <_dtoa_r+0xa6e>
 800a9aa:	f019 0f01 	tst.w	r9, #1
 800a9ae:	d0de      	beq.n	800a96e <_dtoa_r+0xa6e>
 800a9b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9b4:	d1d8      	bne.n	800a968 <_dtoa_r+0xa68>
 800a9b6:	9a01      	ldr	r2, [sp, #4]
 800a9b8:	2339      	movs	r3, #57	; 0x39
 800a9ba:	7013      	strb	r3, [r2, #0]
 800a9bc:	462b      	mov	r3, r5
 800a9be:	461d      	mov	r5, r3
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a9c6:	2a39      	cmp	r2, #57	; 0x39
 800a9c8:	d06c      	beq.n	800aaa4 <_dtoa_r+0xba4>
 800a9ca:	3201      	adds	r2, #1
 800a9cc:	701a      	strb	r2, [r3, #0]
 800a9ce:	e747      	b.n	800a860 <_dtoa_r+0x960>
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	dd07      	ble.n	800a9e4 <_dtoa_r+0xae4>
 800a9d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9d8:	d0ed      	beq.n	800a9b6 <_dtoa_r+0xab6>
 800a9da:	9a01      	ldr	r2, [sp, #4]
 800a9dc:	f109 0301 	add.w	r3, r9, #1
 800a9e0:	7013      	strb	r3, [r2, #0]
 800a9e2:	e73d      	b.n	800a860 <_dtoa_r+0x960>
 800a9e4:	9b04      	ldr	r3, [sp, #16]
 800a9e6:	9a08      	ldr	r2, [sp, #32]
 800a9e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d043      	beq.n	800aa78 <_dtoa_r+0xb78>
 800a9f0:	4651      	mov	r1, sl
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	220a      	movs	r2, #10
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f000 f922 	bl	800ac40 <__multadd>
 800a9fc:	45b8      	cmp	r8, r7
 800a9fe:	4682      	mov	sl, r0
 800aa00:	f04f 0300 	mov.w	r3, #0
 800aa04:	f04f 020a 	mov.w	r2, #10
 800aa08:	4641      	mov	r1, r8
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	d107      	bne.n	800aa1e <_dtoa_r+0xb1e>
 800aa0e:	f000 f917 	bl	800ac40 <__multadd>
 800aa12:	4680      	mov	r8, r0
 800aa14:	4607      	mov	r7, r0
 800aa16:	9b04      	ldr	r3, [sp, #16]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	e775      	b.n	800a90a <_dtoa_r+0xa0a>
 800aa1e:	f000 f90f 	bl	800ac40 <__multadd>
 800aa22:	4639      	mov	r1, r7
 800aa24:	4680      	mov	r8, r0
 800aa26:	2300      	movs	r3, #0
 800aa28:	220a      	movs	r2, #10
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f000 f908 	bl	800ac40 <__multadd>
 800aa30:	4607      	mov	r7, r0
 800aa32:	e7f0      	b.n	800aa16 <_dtoa_r+0xb16>
 800aa34:	9b04      	ldr	r3, [sp, #16]
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	9d00      	ldr	r5, [sp, #0]
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	4650      	mov	r0, sl
 800aa3e:	f7ff f9d4 	bl	8009dea <quorem>
 800aa42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa46:	9b00      	ldr	r3, [sp, #0]
 800aa48:	f805 9b01 	strb.w	r9, [r5], #1
 800aa4c:	1aea      	subs	r2, r5, r3
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	4293      	cmp	r3, r2
 800aa52:	dd07      	ble.n	800aa64 <_dtoa_r+0xb64>
 800aa54:	4651      	mov	r1, sl
 800aa56:	2300      	movs	r3, #0
 800aa58:	220a      	movs	r2, #10
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 f8f0 	bl	800ac40 <__multadd>
 800aa60:	4682      	mov	sl, r0
 800aa62:	e7ea      	b.n	800aa3a <_dtoa_r+0xb3a>
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bfc8      	it	gt
 800aa6a:	461d      	movgt	r5, r3
 800aa6c:	9b00      	ldr	r3, [sp, #0]
 800aa6e:	bfd8      	it	le
 800aa70:	2501      	movle	r5, #1
 800aa72:	441d      	add	r5, r3
 800aa74:	f04f 0800 	mov.w	r8, #0
 800aa78:	4651      	mov	r1, sl
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 fa8d 	bl	800af9c <__lshift>
 800aa82:	4631      	mov	r1, r6
 800aa84:	4682      	mov	sl, r0
 800aa86:	f000 faf5 	bl	800b074 <__mcmp>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	dc96      	bgt.n	800a9bc <_dtoa_r+0xabc>
 800aa8e:	d102      	bne.n	800aa96 <_dtoa_r+0xb96>
 800aa90:	f019 0f01 	tst.w	r9, #1
 800aa94:	d192      	bne.n	800a9bc <_dtoa_r+0xabc>
 800aa96:	462b      	mov	r3, r5
 800aa98:	461d      	mov	r5, r3
 800aa9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa9e:	2a30      	cmp	r2, #48	; 0x30
 800aaa0:	d0fa      	beq.n	800aa98 <_dtoa_r+0xb98>
 800aaa2:	e6dd      	b.n	800a860 <_dtoa_r+0x960>
 800aaa4:	9a00      	ldr	r2, [sp, #0]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d189      	bne.n	800a9be <_dtoa_r+0xabe>
 800aaaa:	f10b 0b01 	add.w	fp, fp, #1
 800aaae:	2331      	movs	r3, #49	; 0x31
 800aab0:	e796      	b.n	800a9e0 <_dtoa_r+0xae0>
 800aab2:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <_dtoa_r+0xbdc>)
 800aab4:	f7ff ba99 	b.w	8009fea <_dtoa_r+0xea>
 800aab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f47f aa6d 	bne.w	8009f9a <_dtoa_r+0x9a>
 800aac0:	4b07      	ldr	r3, [pc, #28]	; (800aae0 <_dtoa_r+0xbe0>)
 800aac2:	f7ff ba92 	b.w	8009fea <_dtoa_r+0xea>
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	dcb5      	bgt.n	800aa38 <_dtoa_r+0xb38>
 800aacc:	9b07      	ldr	r3, [sp, #28]
 800aace:	2b02      	cmp	r3, #2
 800aad0:	f73f aeb1 	bgt.w	800a836 <_dtoa_r+0x936>
 800aad4:	e7b0      	b.n	800aa38 <_dtoa_r+0xb38>
 800aad6:	bf00      	nop
 800aad8:	0800c840 	.word	0x0800c840
 800aadc:	0800c7a0 	.word	0x0800c7a0
 800aae0:	0800c7c4 	.word	0x0800c7c4

0800aae4 <_free_r>:
 800aae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aae6:	2900      	cmp	r1, #0
 800aae8:	d044      	beq.n	800ab74 <_free_r+0x90>
 800aaea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaee:	9001      	str	r0, [sp, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	f1a1 0404 	sub.w	r4, r1, #4
 800aaf6:	bfb8      	it	lt
 800aaf8:	18e4      	addlt	r4, r4, r3
 800aafa:	f7fe fae9 	bl	80090d0 <__malloc_lock>
 800aafe:	4a1e      	ldr	r2, [pc, #120]	; (800ab78 <_free_r+0x94>)
 800ab00:	9801      	ldr	r0, [sp, #4]
 800ab02:	6813      	ldr	r3, [r2, #0]
 800ab04:	b933      	cbnz	r3, 800ab14 <_free_r+0x30>
 800ab06:	6063      	str	r3, [r4, #4]
 800ab08:	6014      	str	r4, [r2, #0]
 800ab0a:	b003      	add	sp, #12
 800ab0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab10:	f7fe bae4 	b.w	80090dc <__malloc_unlock>
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	d908      	bls.n	800ab2a <_free_r+0x46>
 800ab18:	6825      	ldr	r5, [r4, #0]
 800ab1a:	1961      	adds	r1, r4, r5
 800ab1c:	428b      	cmp	r3, r1
 800ab1e:	bf01      	itttt	eq
 800ab20:	6819      	ldreq	r1, [r3, #0]
 800ab22:	685b      	ldreq	r3, [r3, #4]
 800ab24:	1949      	addeq	r1, r1, r5
 800ab26:	6021      	streq	r1, [r4, #0]
 800ab28:	e7ed      	b.n	800ab06 <_free_r+0x22>
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	b10b      	cbz	r3, 800ab34 <_free_r+0x50>
 800ab30:	42a3      	cmp	r3, r4
 800ab32:	d9fa      	bls.n	800ab2a <_free_r+0x46>
 800ab34:	6811      	ldr	r1, [r2, #0]
 800ab36:	1855      	adds	r5, r2, r1
 800ab38:	42a5      	cmp	r5, r4
 800ab3a:	d10b      	bne.n	800ab54 <_free_r+0x70>
 800ab3c:	6824      	ldr	r4, [r4, #0]
 800ab3e:	4421      	add	r1, r4
 800ab40:	1854      	adds	r4, r2, r1
 800ab42:	42a3      	cmp	r3, r4
 800ab44:	6011      	str	r1, [r2, #0]
 800ab46:	d1e0      	bne.n	800ab0a <_free_r+0x26>
 800ab48:	681c      	ldr	r4, [r3, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	6053      	str	r3, [r2, #4]
 800ab4e:	440c      	add	r4, r1
 800ab50:	6014      	str	r4, [r2, #0]
 800ab52:	e7da      	b.n	800ab0a <_free_r+0x26>
 800ab54:	d902      	bls.n	800ab5c <_free_r+0x78>
 800ab56:	230c      	movs	r3, #12
 800ab58:	6003      	str	r3, [r0, #0]
 800ab5a:	e7d6      	b.n	800ab0a <_free_r+0x26>
 800ab5c:	6825      	ldr	r5, [r4, #0]
 800ab5e:	1961      	adds	r1, r4, r5
 800ab60:	428b      	cmp	r3, r1
 800ab62:	bf04      	itt	eq
 800ab64:	6819      	ldreq	r1, [r3, #0]
 800ab66:	685b      	ldreq	r3, [r3, #4]
 800ab68:	6063      	str	r3, [r4, #4]
 800ab6a:	bf04      	itt	eq
 800ab6c:	1949      	addeq	r1, r1, r5
 800ab6e:	6021      	streq	r1, [r4, #0]
 800ab70:	6054      	str	r4, [r2, #4]
 800ab72:	e7ca      	b.n	800ab0a <_free_r+0x26>
 800ab74:	b003      	add	sp, #12
 800ab76:	bd30      	pop	{r4, r5, pc}
 800ab78:	200007ec 	.word	0x200007ec

0800ab7c <_Balloc>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	69c6      	ldr	r6, [r0, #28]
 800ab80:	4604      	mov	r4, r0
 800ab82:	460d      	mov	r5, r1
 800ab84:	b976      	cbnz	r6, 800aba4 <_Balloc+0x28>
 800ab86:	2010      	movs	r0, #16
 800ab88:	f7fe f9f2 	bl	8008f70 <malloc>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	61e0      	str	r0, [r4, #28]
 800ab90:	b920      	cbnz	r0, 800ab9c <_Balloc+0x20>
 800ab92:	4b18      	ldr	r3, [pc, #96]	; (800abf4 <_Balloc+0x78>)
 800ab94:	4818      	ldr	r0, [pc, #96]	; (800abf8 <_Balloc+0x7c>)
 800ab96:	216b      	movs	r1, #107	; 0x6b
 800ab98:	f000 fd8c 	bl	800b6b4 <__assert_func>
 800ab9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aba0:	6006      	str	r6, [r0, #0]
 800aba2:	60c6      	str	r6, [r0, #12]
 800aba4:	69e6      	ldr	r6, [r4, #28]
 800aba6:	68f3      	ldr	r3, [r6, #12]
 800aba8:	b183      	cbz	r3, 800abcc <_Balloc+0x50>
 800abaa:	69e3      	ldr	r3, [r4, #28]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abb2:	b9b8      	cbnz	r0, 800abe4 <_Balloc+0x68>
 800abb4:	2101      	movs	r1, #1
 800abb6:	fa01 f605 	lsl.w	r6, r1, r5
 800abba:	1d72      	adds	r2, r6, #5
 800abbc:	0092      	lsls	r2, r2, #2
 800abbe:	4620      	mov	r0, r4
 800abc0:	f000 fd96 	bl	800b6f0 <_calloc_r>
 800abc4:	b160      	cbz	r0, 800abe0 <_Balloc+0x64>
 800abc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abca:	e00e      	b.n	800abea <_Balloc+0x6e>
 800abcc:	2221      	movs	r2, #33	; 0x21
 800abce:	2104      	movs	r1, #4
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 fd8d 	bl	800b6f0 <_calloc_r>
 800abd6:	69e3      	ldr	r3, [r4, #28]
 800abd8:	60f0      	str	r0, [r6, #12]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1e4      	bne.n	800abaa <_Balloc+0x2e>
 800abe0:	2000      	movs	r0, #0
 800abe2:	bd70      	pop	{r4, r5, r6, pc}
 800abe4:	6802      	ldr	r2, [r0, #0]
 800abe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abea:	2300      	movs	r3, #0
 800abec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abf0:	e7f7      	b.n	800abe2 <_Balloc+0x66>
 800abf2:	bf00      	nop
 800abf4:	0800c7d1 	.word	0x0800c7d1
 800abf8:	0800c851 	.word	0x0800c851

0800abfc <_Bfree>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	69c6      	ldr	r6, [r0, #28]
 800ac00:	4605      	mov	r5, r0
 800ac02:	460c      	mov	r4, r1
 800ac04:	b976      	cbnz	r6, 800ac24 <_Bfree+0x28>
 800ac06:	2010      	movs	r0, #16
 800ac08:	f7fe f9b2 	bl	8008f70 <malloc>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	61e8      	str	r0, [r5, #28]
 800ac10:	b920      	cbnz	r0, 800ac1c <_Bfree+0x20>
 800ac12:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <_Bfree+0x3c>)
 800ac14:	4809      	ldr	r0, [pc, #36]	; (800ac3c <_Bfree+0x40>)
 800ac16:	218f      	movs	r1, #143	; 0x8f
 800ac18:	f000 fd4c 	bl	800b6b4 <__assert_func>
 800ac1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac20:	6006      	str	r6, [r0, #0]
 800ac22:	60c6      	str	r6, [r0, #12]
 800ac24:	b13c      	cbz	r4, 800ac36 <_Bfree+0x3a>
 800ac26:	69eb      	ldr	r3, [r5, #28]
 800ac28:	6862      	ldr	r2, [r4, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac30:	6021      	str	r1, [r4, #0]
 800ac32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	0800c7d1 	.word	0x0800c7d1
 800ac3c:	0800c851 	.word	0x0800c851

0800ac40 <__multadd>:
 800ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac44:	690d      	ldr	r5, [r1, #16]
 800ac46:	4607      	mov	r7, r0
 800ac48:	460c      	mov	r4, r1
 800ac4a:	461e      	mov	r6, r3
 800ac4c:	f101 0c14 	add.w	ip, r1, #20
 800ac50:	2000      	movs	r0, #0
 800ac52:	f8dc 3000 	ldr.w	r3, [ip]
 800ac56:	b299      	uxth	r1, r3
 800ac58:	fb02 6101 	mla	r1, r2, r1, r6
 800ac5c:	0c1e      	lsrs	r6, r3, #16
 800ac5e:	0c0b      	lsrs	r3, r1, #16
 800ac60:	fb02 3306 	mla	r3, r2, r6, r3
 800ac64:	b289      	uxth	r1, r1
 800ac66:	3001      	adds	r0, #1
 800ac68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac6c:	4285      	cmp	r5, r0
 800ac6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ac72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac76:	dcec      	bgt.n	800ac52 <__multadd+0x12>
 800ac78:	b30e      	cbz	r6, 800acbe <__multadd+0x7e>
 800ac7a:	68a3      	ldr	r3, [r4, #8]
 800ac7c:	42ab      	cmp	r3, r5
 800ac7e:	dc19      	bgt.n	800acb4 <__multadd+0x74>
 800ac80:	6861      	ldr	r1, [r4, #4]
 800ac82:	4638      	mov	r0, r7
 800ac84:	3101      	adds	r1, #1
 800ac86:	f7ff ff79 	bl	800ab7c <_Balloc>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	b928      	cbnz	r0, 800ac9a <__multadd+0x5a>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4b0c      	ldr	r3, [pc, #48]	; (800acc4 <__multadd+0x84>)
 800ac92:	480d      	ldr	r0, [pc, #52]	; (800acc8 <__multadd+0x88>)
 800ac94:	21ba      	movs	r1, #186	; 0xba
 800ac96:	f000 fd0d 	bl	800b6b4 <__assert_func>
 800ac9a:	6922      	ldr	r2, [r4, #16]
 800ac9c:	3202      	adds	r2, #2
 800ac9e:	f104 010c 	add.w	r1, r4, #12
 800aca2:	0092      	lsls	r2, r2, #2
 800aca4:	300c      	adds	r0, #12
 800aca6:	f7ff f892 	bl	8009dce <memcpy>
 800acaa:	4621      	mov	r1, r4
 800acac:	4638      	mov	r0, r7
 800acae:	f7ff ffa5 	bl	800abfc <_Bfree>
 800acb2:	4644      	mov	r4, r8
 800acb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acb8:	3501      	adds	r5, #1
 800acba:	615e      	str	r6, [r3, #20]
 800acbc:	6125      	str	r5, [r4, #16]
 800acbe:	4620      	mov	r0, r4
 800acc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc4:	0800c840 	.word	0x0800c840
 800acc8:	0800c851 	.word	0x0800c851

0800accc <__hi0bits>:
 800accc:	0c03      	lsrs	r3, r0, #16
 800acce:	041b      	lsls	r3, r3, #16
 800acd0:	b9d3      	cbnz	r3, 800ad08 <__hi0bits+0x3c>
 800acd2:	0400      	lsls	r0, r0, #16
 800acd4:	2310      	movs	r3, #16
 800acd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800acda:	bf04      	itt	eq
 800acdc:	0200      	lsleq	r0, r0, #8
 800acde:	3308      	addeq	r3, #8
 800ace0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ace4:	bf04      	itt	eq
 800ace6:	0100      	lsleq	r0, r0, #4
 800ace8:	3304      	addeq	r3, #4
 800acea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acee:	bf04      	itt	eq
 800acf0:	0080      	lsleq	r0, r0, #2
 800acf2:	3302      	addeq	r3, #2
 800acf4:	2800      	cmp	r0, #0
 800acf6:	db05      	blt.n	800ad04 <__hi0bits+0x38>
 800acf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800acfc:	f103 0301 	add.w	r3, r3, #1
 800ad00:	bf08      	it	eq
 800ad02:	2320      	moveq	r3, #32
 800ad04:	4618      	mov	r0, r3
 800ad06:	4770      	bx	lr
 800ad08:	2300      	movs	r3, #0
 800ad0a:	e7e4      	b.n	800acd6 <__hi0bits+0xa>

0800ad0c <__lo0bits>:
 800ad0c:	6803      	ldr	r3, [r0, #0]
 800ad0e:	f013 0207 	ands.w	r2, r3, #7
 800ad12:	d00c      	beq.n	800ad2e <__lo0bits+0x22>
 800ad14:	07d9      	lsls	r1, r3, #31
 800ad16:	d422      	bmi.n	800ad5e <__lo0bits+0x52>
 800ad18:	079a      	lsls	r2, r3, #30
 800ad1a:	bf49      	itett	mi
 800ad1c:	085b      	lsrmi	r3, r3, #1
 800ad1e:	089b      	lsrpl	r3, r3, #2
 800ad20:	6003      	strmi	r3, [r0, #0]
 800ad22:	2201      	movmi	r2, #1
 800ad24:	bf5c      	itt	pl
 800ad26:	6003      	strpl	r3, [r0, #0]
 800ad28:	2202      	movpl	r2, #2
 800ad2a:	4610      	mov	r0, r2
 800ad2c:	4770      	bx	lr
 800ad2e:	b299      	uxth	r1, r3
 800ad30:	b909      	cbnz	r1, 800ad36 <__lo0bits+0x2a>
 800ad32:	0c1b      	lsrs	r3, r3, #16
 800ad34:	2210      	movs	r2, #16
 800ad36:	b2d9      	uxtb	r1, r3
 800ad38:	b909      	cbnz	r1, 800ad3e <__lo0bits+0x32>
 800ad3a:	3208      	adds	r2, #8
 800ad3c:	0a1b      	lsrs	r3, r3, #8
 800ad3e:	0719      	lsls	r1, r3, #28
 800ad40:	bf04      	itt	eq
 800ad42:	091b      	lsreq	r3, r3, #4
 800ad44:	3204      	addeq	r2, #4
 800ad46:	0799      	lsls	r1, r3, #30
 800ad48:	bf04      	itt	eq
 800ad4a:	089b      	lsreq	r3, r3, #2
 800ad4c:	3202      	addeq	r2, #2
 800ad4e:	07d9      	lsls	r1, r3, #31
 800ad50:	d403      	bmi.n	800ad5a <__lo0bits+0x4e>
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	f102 0201 	add.w	r2, r2, #1
 800ad58:	d003      	beq.n	800ad62 <__lo0bits+0x56>
 800ad5a:	6003      	str	r3, [r0, #0]
 800ad5c:	e7e5      	b.n	800ad2a <__lo0bits+0x1e>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	e7e3      	b.n	800ad2a <__lo0bits+0x1e>
 800ad62:	2220      	movs	r2, #32
 800ad64:	e7e1      	b.n	800ad2a <__lo0bits+0x1e>
	...

0800ad68 <__i2b>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	f7ff ff05 	bl	800ab7c <_Balloc>
 800ad72:	4602      	mov	r2, r0
 800ad74:	b928      	cbnz	r0, 800ad82 <__i2b+0x1a>
 800ad76:	4b05      	ldr	r3, [pc, #20]	; (800ad8c <__i2b+0x24>)
 800ad78:	4805      	ldr	r0, [pc, #20]	; (800ad90 <__i2b+0x28>)
 800ad7a:	f240 1145 	movw	r1, #325	; 0x145
 800ad7e:	f000 fc99 	bl	800b6b4 <__assert_func>
 800ad82:	2301      	movs	r3, #1
 800ad84:	6144      	str	r4, [r0, #20]
 800ad86:	6103      	str	r3, [r0, #16]
 800ad88:	bd10      	pop	{r4, pc}
 800ad8a:	bf00      	nop
 800ad8c:	0800c840 	.word	0x0800c840
 800ad90:	0800c851 	.word	0x0800c851

0800ad94 <__multiply>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	4691      	mov	r9, r2
 800ad9a:	690a      	ldr	r2, [r1, #16]
 800ad9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	bfb8      	it	lt
 800ada4:	460b      	movlt	r3, r1
 800ada6:	460c      	mov	r4, r1
 800ada8:	bfbc      	itt	lt
 800adaa:	464c      	movlt	r4, r9
 800adac:	4699      	movlt	r9, r3
 800adae:	6927      	ldr	r7, [r4, #16]
 800adb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adb4:	68a3      	ldr	r3, [r4, #8]
 800adb6:	6861      	ldr	r1, [r4, #4]
 800adb8:	eb07 060a 	add.w	r6, r7, sl
 800adbc:	42b3      	cmp	r3, r6
 800adbe:	b085      	sub	sp, #20
 800adc0:	bfb8      	it	lt
 800adc2:	3101      	addlt	r1, #1
 800adc4:	f7ff feda 	bl	800ab7c <_Balloc>
 800adc8:	b930      	cbnz	r0, 800add8 <__multiply+0x44>
 800adca:	4602      	mov	r2, r0
 800adcc:	4b44      	ldr	r3, [pc, #272]	; (800aee0 <__multiply+0x14c>)
 800adce:	4845      	ldr	r0, [pc, #276]	; (800aee4 <__multiply+0x150>)
 800add0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800add4:	f000 fc6e 	bl	800b6b4 <__assert_func>
 800add8:	f100 0514 	add.w	r5, r0, #20
 800addc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ade0:	462b      	mov	r3, r5
 800ade2:	2200      	movs	r2, #0
 800ade4:	4543      	cmp	r3, r8
 800ade6:	d321      	bcc.n	800ae2c <__multiply+0x98>
 800ade8:	f104 0314 	add.w	r3, r4, #20
 800adec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800adf0:	f109 0314 	add.w	r3, r9, #20
 800adf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800adf8:	9202      	str	r2, [sp, #8]
 800adfa:	1b3a      	subs	r2, r7, r4
 800adfc:	3a15      	subs	r2, #21
 800adfe:	f022 0203 	bic.w	r2, r2, #3
 800ae02:	3204      	adds	r2, #4
 800ae04:	f104 0115 	add.w	r1, r4, #21
 800ae08:	428f      	cmp	r7, r1
 800ae0a:	bf38      	it	cc
 800ae0c:	2204      	movcc	r2, #4
 800ae0e:	9201      	str	r2, [sp, #4]
 800ae10:	9a02      	ldr	r2, [sp, #8]
 800ae12:	9303      	str	r3, [sp, #12]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d80c      	bhi.n	800ae32 <__multiply+0x9e>
 800ae18:	2e00      	cmp	r6, #0
 800ae1a:	dd03      	ble.n	800ae24 <__multiply+0x90>
 800ae1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d05b      	beq.n	800aedc <__multiply+0x148>
 800ae24:	6106      	str	r6, [r0, #16]
 800ae26:	b005      	add	sp, #20
 800ae28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2c:	f843 2b04 	str.w	r2, [r3], #4
 800ae30:	e7d8      	b.n	800ade4 <__multiply+0x50>
 800ae32:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae36:	f1ba 0f00 	cmp.w	sl, #0
 800ae3a:	d024      	beq.n	800ae86 <__multiply+0xf2>
 800ae3c:	f104 0e14 	add.w	lr, r4, #20
 800ae40:	46a9      	mov	r9, r5
 800ae42:	f04f 0c00 	mov.w	ip, #0
 800ae46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae4a:	f8d9 1000 	ldr.w	r1, [r9]
 800ae4e:	fa1f fb82 	uxth.w	fp, r2
 800ae52:	b289      	uxth	r1, r1
 800ae54:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae60:	4461      	add	r1, ip
 800ae62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae66:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae6e:	b289      	uxth	r1, r1
 800ae70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae74:	4577      	cmp	r7, lr
 800ae76:	f849 1b04 	str.w	r1, [r9], #4
 800ae7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae7e:	d8e2      	bhi.n	800ae46 <__multiply+0xb2>
 800ae80:	9a01      	ldr	r2, [sp, #4]
 800ae82:	f845 c002 	str.w	ip, [r5, r2]
 800ae86:	9a03      	ldr	r2, [sp, #12]
 800ae88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	f1b9 0f00 	cmp.w	r9, #0
 800ae92:	d021      	beq.n	800aed8 <__multiply+0x144>
 800ae94:	6829      	ldr	r1, [r5, #0]
 800ae96:	f104 0c14 	add.w	ip, r4, #20
 800ae9a:	46ae      	mov	lr, r5
 800ae9c:	f04f 0a00 	mov.w	sl, #0
 800aea0:	f8bc b000 	ldrh.w	fp, [ip]
 800aea4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aea8:	fb09 220b 	mla	r2, r9, fp, r2
 800aeac:	4452      	add	r2, sl
 800aeae:	b289      	uxth	r1, r1
 800aeb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aeb4:	f84e 1b04 	str.w	r1, [lr], #4
 800aeb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800aebc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aec0:	f8be 1000 	ldrh.w	r1, [lr]
 800aec4:	fb09 110a 	mla	r1, r9, sl, r1
 800aec8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800aecc:	4567      	cmp	r7, ip
 800aece:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aed2:	d8e5      	bhi.n	800aea0 <__multiply+0x10c>
 800aed4:	9a01      	ldr	r2, [sp, #4]
 800aed6:	50a9      	str	r1, [r5, r2]
 800aed8:	3504      	adds	r5, #4
 800aeda:	e799      	b.n	800ae10 <__multiply+0x7c>
 800aedc:	3e01      	subs	r6, #1
 800aede:	e79b      	b.n	800ae18 <__multiply+0x84>
 800aee0:	0800c840 	.word	0x0800c840
 800aee4:	0800c851 	.word	0x0800c851

0800aee8 <__pow5mult>:
 800aee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeec:	4615      	mov	r5, r2
 800aeee:	f012 0203 	ands.w	r2, r2, #3
 800aef2:	4606      	mov	r6, r0
 800aef4:	460f      	mov	r7, r1
 800aef6:	d007      	beq.n	800af08 <__pow5mult+0x20>
 800aef8:	4c25      	ldr	r4, [pc, #148]	; (800af90 <__pow5mult+0xa8>)
 800aefa:	3a01      	subs	r2, #1
 800aefc:	2300      	movs	r3, #0
 800aefe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af02:	f7ff fe9d 	bl	800ac40 <__multadd>
 800af06:	4607      	mov	r7, r0
 800af08:	10ad      	asrs	r5, r5, #2
 800af0a:	d03d      	beq.n	800af88 <__pow5mult+0xa0>
 800af0c:	69f4      	ldr	r4, [r6, #28]
 800af0e:	b97c      	cbnz	r4, 800af30 <__pow5mult+0x48>
 800af10:	2010      	movs	r0, #16
 800af12:	f7fe f82d 	bl	8008f70 <malloc>
 800af16:	4602      	mov	r2, r0
 800af18:	61f0      	str	r0, [r6, #28]
 800af1a:	b928      	cbnz	r0, 800af28 <__pow5mult+0x40>
 800af1c:	4b1d      	ldr	r3, [pc, #116]	; (800af94 <__pow5mult+0xac>)
 800af1e:	481e      	ldr	r0, [pc, #120]	; (800af98 <__pow5mult+0xb0>)
 800af20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800af24:	f000 fbc6 	bl	800b6b4 <__assert_func>
 800af28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af2c:	6004      	str	r4, [r0, #0]
 800af2e:	60c4      	str	r4, [r0, #12]
 800af30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800af34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af38:	b94c      	cbnz	r4, 800af4e <__pow5mult+0x66>
 800af3a:	f240 2171 	movw	r1, #625	; 0x271
 800af3e:	4630      	mov	r0, r6
 800af40:	f7ff ff12 	bl	800ad68 <__i2b>
 800af44:	2300      	movs	r3, #0
 800af46:	f8c8 0008 	str.w	r0, [r8, #8]
 800af4a:	4604      	mov	r4, r0
 800af4c:	6003      	str	r3, [r0, #0]
 800af4e:	f04f 0900 	mov.w	r9, #0
 800af52:	07eb      	lsls	r3, r5, #31
 800af54:	d50a      	bpl.n	800af6c <__pow5mult+0x84>
 800af56:	4639      	mov	r1, r7
 800af58:	4622      	mov	r2, r4
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7ff ff1a 	bl	800ad94 <__multiply>
 800af60:	4639      	mov	r1, r7
 800af62:	4680      	mov	r8, r0
 800af64:	4630      	mov	r0, r6
 800af66:	f7ff fe49 	bl	800abfc <_Bfree>
 800af6a:	4647      	mov	r7, r8
 800af6c:	106d      	asrs	r5, r5, #1
 800af6e:	d00b      	beq.n	800af88 <__pow5mult+0xa0>
 800af70:	6820      	ldr	r0, [r4, #0]
 800af72:	b938      	cbnz	r0, 800af84 <__pow5mult+0x9c>
 800af74:	4622      	mov	r2, r4
 800af76:	4621      	mov	r1, r4
 800af78:	4630      	mov	r0, r6
 800af7a:	f7ff ff0b 	bl	800ad94 <__multiply>
 800af7e:	6020      	str	r0, [r4, #0]
 800af80:	f8c0 9000 	str.w	r9, [r0]
 800af84:	4604      	mov	r4, r0
 800af86:	e7e4      	b.n	800af52 <__pow5mult+0x6a>
 800af88:	4638      	mov	r0, r7
 800af8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af8e:	bf00      	nop
 800af90:	0800c9a0 	.word	0x0800c9a0
 800af94:	0800c7d1 	.word	0x0800c7d1
 800af98:	0800c851 	.word	0x0800c851

0800af9c <__lshift>:
 800af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	460c      	mov	r4, r1
 800afa2:	6849      	ldr	r1, [r1, #4]
 800afa4:	6923      	ldr	r3, [r4, #16]
 800afa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	4607      	mov	r7, r0
 800afae:	4691      	mov	r9, r2
 800afb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afb4:	f108 0601 	add.w	r6, r8, #1
 800afb8:	42b3      	cmp	r3, r6
 800afba:	db0b      	blt.n	800afd4 <__lshift+0x38>
 800afbc:	4638      	mov	r0, r7
 800afbe:	f7ff fddd 	bl	800ab7c <_Balloc>
 800afc2:	4605      	mov	r5, r0
 800afc4:	b948      	cbnz	r0, 800afda <__lshift+0x3e>
 800afc6:	4602      	mov	r2, r0
 800afc8:	4b28      	ldr	r3, [pc, #160]	; (800b06c <__lshift+0xd0>)
 800afca:	4829      	ldr	r0, [pc, #164]	; (800b070 <__lshift+0xd4>)
 800afcc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800afd0:	f000 fb70 	bl	800b6b4 <__assert_func>
 800afd4:	3101      	adds	r1, #1
 800afd6:	005b      	lsls	r3, r3, #1
 800afd8:	e7ee      	b.n	800afb8 <__lshift+0x1c>
 800afda:	2300      	movs	r3, #0
 800afdc:	f100 0114 	add.w	r1, r0, #20
 800afe0:	f100 0210 	add.w	r2, r0, #16
 800afe4:	4618      	mov	r0, r3
 800afe6:	4553      	cmp	r3, sl
 800afe8:	db33      	blt.n	800b052 <__lshift+0xb6>
 800afea:	6920      	ldr	r0, [r4, #16]
 800afec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aff0:	f104 0314 	add.w	r3, r4, #20
 800aff4:	f019 091f 	ands.w	r9, r9, #31
 800aff8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800affc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b000:	d02b      	beq.n	800b05a <__lshift+0xbe>
 800b002:	f1c9 0e20 	rsb	lr, r9, #32
 800b006:	468a      	mov	sl, r1
 800b008:	2200      	movs	r2, #0
 800b00a:	6818      	ldr	r0, [r3, #0]
 800b00c:	fa00 f009 	lsl.w	r0, r0, r9
 800b010:	4310      	orrs	r0, r2
 800b012:	f84a 0b04 	str.w	r0, [sl], #4
 800b016:	f853 2b04 	ldr.w	r2, [r3], #4
 800b01a:	459c      	cmp	ip, r3
 800b01c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b020:	d8f3      	bhi.n	800b00a <__lshift+0x6e>
 800b022:	ebac 0304 	sub.w	r3, ip, r4
 800b026:	3b15      	subs	r3, #21
 800b028:	f023 0303 	bic.w	r3, r3, #3
 800b02c:	3304      	adds	r3, #4
 800b02e:	f104 0015 	add.w	r0, r4, #21
 800b032:	4584      	cmp	ip, r0
 800b034:	bf38      	it	cc
 800b036:	2304      	movcc	r3, #4
 800b038:	50ca      	str	r2, [r1, r3]
 800b03a:	b10a      	cbz	r2, 800b040 <__lshift+0xa4>
 800b03c:	f108 0602 	add.w	r6, r8, #2
 800b040:	3e01      	subs	r6, #1
 800b042:	4638      	mov	r0, r7
 800b044:	612e      	str	r6, [r5, #16]
 800b046:	4621      	mov	r1, r4
 800b048:	f7ff fdd8 	bl	800abfc <_Bfree>
 800b04c:	4628      	mov	r0, r5
 800b04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b052:	f842 0f04 	str.w	r0, [r2, #4]!
 800b056:	3301      	adds	r3, #1
 800b058:	e7c5      	b.n	800afe6 <__lshift+0x4a>
 800b05a:	3904      	subs	r1, #4
 800b05c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b060:	f841 2f04 	str.w	r2, [r1, #4]!
 800b064:	459c      	cmp	ip, r3
 800b066:	d8f9      	bhi.n	800b05c <__lshift+0xc0>
 800b068:	e7ea      	b.n	800b040 <__lshift+0xa4>
 800b06a:	bf00      	nop
 800b06c:	0800c840 	.word	0x0800c840
 800b070:	0800c851 	.word	0x0800c851

0800b074 <__mcmp>:
 800b074:	b530      	push	{r4, r5, lr}
 800b076:	6902      	ldr	r2, [r0, #16]
 800b078:	690c      	ldr	r4, [r1, #16]
 800b07a:	1b12      	subs	r2, r2, r4
 800b07c:	d10e      	bne.n	800b09c <__mcmp+0x28>
 800b07e:	f100 0314 	add.w	r3, r0, #20
 800b082:	3114      	adds	r1, #20
 800b084:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b088:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b08c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b090:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b094:	42a5      	cmp	r5, r4
 800b096:	d003      	beq.n	800b0a0 <__mcmp+0x2c>
 800b098:	d305      	bcc.n	800b0a6 <__mcmp+0x32>
 800b09a:	2201      	movs	r2, #1
 800b09c:	4610      	mov	r0, r2
 800b09e:	bd30      	pop	{r4, r5, pc}
 800b0a0:	4283      	cmp	r3, r0
 800b0a2:	d3f3      	bcc.n	800b08c <__mcmp+0x18>
 800b0a4:	e7fa      	b.n	800b09c <__mcmp+0x28>
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0aa:	e7f7      	b.n	800b09c <__mcmp+0x28>

0800b0ac <__mdiff>:
 800b0ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b0:	460c      	mov	r4, r1
 800b0b2:	4606      	mov	r6, r0
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	4690      	mov	r8, r2
 800b0ba:	f7ff ffdb 	bl	800b074 <__mcmp>
 800b0be:	1e05      	subs	r5, r0, #0
 800b0c0:	d110      	bne.n	800b0e4 <__mdiff+0x38>
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4630      	mov	r0, r6
 800b0c6:	f7ff fd59 	bl	800ab7c <_Balloc>
 800b0ca:	b930      	cbnz	r0, 800b0da <__mdiff+0x2e>
 800b0cc:	4b3a      	ldr	r3, [pc, #232]	; (800b1b8 <__mdiff+0x10c>)
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	f240 2137 	movw	r1, #567	; 0x237
 800b0d4:	4839      	ldr	r0, [pc, #228]	; (800b1bc <__mdiff+0x110>)
 800b0d6:	f000 faed 	bl	800b6b4 <__assert_func>
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e4:	bfa4      	itt	ge
 800b0e6:	4643      	movge	r3, r8
 800b0e8:	46a0      	movge	r8, r4
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b0f0:	bfa6      	itte	ge
 800b0f2:	461c      	movge	r4, r3
 800b0f4:	2500      	movge	r5, #0
 800b0f6:	2501      	movlt	r5, #1
 800b0f8:	f7ff fd40 	bl	800ab7c <_Balloc>
 800b0fc:	b920      	cbnz	r0, 800b108 <__mdiff+0x5c>
 800b0fe:	4b2e      	ldr	r3, [pc, #184]	; (800b1b8 <__mdiff+0x10c>)
 800b100:	4602      	mov	r2, r0
 800b102:	f240 2145 	movw	r1, #581	; 0x245
 800b106:	e7e5      	b.n	800b0d4 <__mdiff+0x28>
 800b108:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b10c:	6926      	ldr	r6, [r4, #16]
 800b10e:	60c5      	str	r5, [r0, #12]
 800b110:	f104 0914 	add.w	r9, r4, #20
 800b114:	f108 0514 	add.w	r5, r8, #20
 800b118:	f100 0e14 	add.w	lr, r0, #20
 800b11c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b120:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b124:	f108 0210 	add.w	r2, r8, #16
 800b128:	46f2      	mov	sl, lr
 800b12a:	2100      	movs	r1, #0
 800b12c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b130:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b134:	fa11 f88b 	uxtah	r8, r1, fp
 800b138:	b299      	uxth	r1, r3
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	eba8 0801 	sub.w	r8, r8, r1
 800b140:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b144:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b148:	fa1f f888 	uxth.w	r8, r8
 800b14c:	1419      	asrs	r1, r3, #16
 800b14e:	454e      	cmp	r6, r9
 800b150:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b154:	f84a 3b04 	str.w	r3, [sl], #4
 800b158:	d8e8      	bhi.n	800b12c <__mdiff+0x80>
 800b15a:	1b33      	subs	r3, r6, r4
 800b15c:	3b15      	subs	r3, #21
 800b15e:	f023 0303 	bic.w	r3, r3, #3
 800b162:	3304      	adds	r3, #4
 800b164:	3415      	adds	r4, #21
 800b166:	42a6      	cmp	r6, r4
 800b168:	bf38      	it	cc
 800b16a:	2304      	movcc	r3, #4
 800b16c:	441d      	add	r5, r3
 800b16e:	4473      	add	r3, lr
 800b170:	469e      	mov	lr, r3
 800b172:	462e      	mov	r6, r5
 800b174:	4566      	cmp	r6, ip
 800b176:	d30e      	bcc.n	800b196 <__mdiff+0xea>
 800b178:	f10c 0203 	add.w	r2, ip, #3
 800b17c:	1b52      	subs	r2, r2, r5
 800b17e:	f022 0203 	bic.w	r2, r2, #3
 800b182:	3d03      	subs	r5, #3
 800b184:	45ac      	cmp	ip, r5
 800b186:	bf38      	it	cc
 800b188:	2200      	movcc	r2, #0
 800b18a:	4413      	add	r3, r2
 800b18c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b190:	b17a      	cbz	r2, 800b1b2 <__mdiff+0x106>
 800b192:	6107      	str	r7, [r0, #16]
 800b194:	e7a4      	b.n	800b0e0 <__mdiff+0x34>
 800b196:	f856 8b04 	ldr.w	r8, [r6], #4
 800b19a:	fa11 f288 	uxtah	r2, r1, r8
 800b19e:	1414      	asrs	r4, r2, #16
 800b1a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1a4:	b292      	uxth	r2, r2
 800b1a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1aa:	f84e 2b04 	str.w	r2, [lr], #4
 800b1ae:	1421      	asrs	r1, r4, #16
 800b1b0:	e7e0      	b.n	800b174 <__mdiff+0xc8>
 800b1b2:	3f01      	subs	r7, #1
 800b1b4:	e7ea      	b.n	800b18c <__mdiff+0xe0>
 800b1b6:	bf00      	nop
 800b1b8:	0800c840 	.word	0x0800c840
 800b1bc:	0800c851 	.word	0x0800c851

0800b1c0 <__d2b>:
 800b1c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	2101      	movs	r1, #1
 800b1c8:	ec59 8b10 	vmov	r8, r9, d0
 800b1cc:	4616      	mov	r6, r2
 800b1ce:	f7ff fcd5 	bl	800ab7c <_Balloc>
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	b930      	cbnz	r0, 800b1e4 <__d2b+0x24>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	4b24      	ldr	r3, [pc, #144]	; (800b26c <__d2b+0xac>)
 800b1da:	4825      	ldr	r0, [pc, #148]	; (800b270 <__d2b+0xb0>)
 800b1dc:	f240 310f 	movw	r1, #783	; 0x30f
 800b1e0:	f000 fa68 	bl	800b6b4 <__assert_func>
 800b1e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1ec:	bb2d      	cbnz	r5, 800b23a <__d2b+0x7a>
 800b1ee:	9301      	str	r3, [sp, #4]
 800b1f0:	f1b8 0300 	subs.w	r3, r8, #0
 800b1f4:	d026      	beq.n	800b244 <__d2b+0x84>
 800b1f6:	4668      	mov	r0, sp
 800b1f8:	9300      	str	r3, [sp, #0]
 800b1fa:	f7ff fd87 	bl	800ad0c <__lo0bits>
 800b1fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b202:	b1e8      	cbz	r0, 800b240 <__d2b+0x80>
 800b204:	f1c0 0320 	rsb	r3, r0, #32
 800b208:	fa02 f303 	lsl.w	r3, r2, r3
 800b20c:	430b      	orrs	r3, r1
 800b20e:	40c2      	lsrs	r2, r0
 800b210:	6163      	str	r3, [r4, #20]
 800b212:	9201      	str	r2, [sp, #4]
 800b214:	9b01      	ldr	r3, [sp, #4]
 800b216:	61a3      	str	r3, [r4, #24]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bf14      	ite	ne
 800b21c:	2202      	movne	r2, #2
 800b21e:	2201      	moveq	r2, #1
 800b220:	6122      	str	r2, [r4, #16]
 800b222:	b1bd      	cbz	r5, 800b254 <__d2b+0x94>
 800b224:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b228:	4405      	add	r5, r0
 800b22a:	603d      	str	r5, [r7, #0]
 800b22c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b230:	6030      	str	r0, [r6, #0]
 800b232:	4620      	mov	r0, r4
 800b234:	b003      	add	sp, #12
 800b236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b23a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b23e:	e7d6      	b.n	800b1ee <__d2b+0x2e>
 800b240:	6161      	str	r1, [r4, #20]
 800b242:	e7e7      	b.n	800b214 <__d2b+0x54>
 800b244:	a801      	add	r0, sp, #4
 800b246:	f7ff fd61 	bl	800ad0c <__lo0bits>
 800b24a:	9b01      	ldr	r3, [sp, #4]
 800b24c:	6163      	str	r3, [r4, #20]
 800b24e:	3020      	adds	r0, #32
 800b250:	2201      	movs	r2, #1
 800b252:	e7e5      	b.n	800b220 <__d2b+0x60>
 800b254:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b258:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b25c:	6038      	str	r0, [r7, #0]
 800b25e:	6918      	ldr	r0, [r3, #16]
 800b260:	f7ff fd34 	bl	800accc <__hi0bits>
 800b264:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b268:	e7e2      	b.n	800b230 <__d2b+0x70>
 800b26a:	bf00      	nop
 800b26c:	0800c840 	.word	0x0800c840
 800b270:	0800c851 	.word	0x0800c851

0800b274 <__ssputs_r>:
 800b274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b278:	688e      	ldr	r6, [r1, #8]
 800b27a:	461f      	mov	r7, r3
 800b27c:	42be      	cmp	r6, r7
 800b27e:	680b      	ldr	r3, [r1, #0]
 800b280:	4682      	mov	sl, r0
 800b282:	460c      	mov	r4, r1
 800b284:	4690      	mov	r8, r2
 800b286:	d82c      	bhi.n	800b2e2 <__ssputs_r+0x6e>
 800b288:	898a      	ldrh	r2, [r1, #12]
 800b28a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b28e:	d026      	beq.n	800b2de <__ssputs_r+0x6a>
 800b290:	6965      	ldr	r5, [r4, #20]
 800b292:	6909      	ldr	r1, [r1, #16]
 800b294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b298:	eba3 0901 	sub.w	r9, r3, r1
 800b29c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2a0:	1c7b      	adds	r3, r7, #1
 800b2a2:	444b      	add	r3, r9
 800b2a4:	106d      	asrs	r5, r5, #1
 800b2a6:	429d      	cmp	r5, r3
 800b2a8:	bf38      	it	cc
 800b2aa:	461d      	movcc	r5, r3
 800b2ac:	0553      	lsls	r3, r2, #21
 800b2ae:	d527      	bpl.n	800b300 <__ssputs_r+0x8c>
 800b2b0:	4629      	mov	r1, r5
 800b2b2:	f7fd fe8d 	bl	8008fd0 <_malloc_r>
 800b2b6:	4606      	mov	r6, r0
 800b2b8:	b360      	cbz	r0, 800b314 <__ssputs_r+0xa0>
 800b2ba:	6921      	ldr	r1, [r4, #16]
 800b2bc:	464a      	mov	r2, r9
 800b2be:	f7fe fd86 	bl	8009dce <memcpy>
 800b2c2:	89a3      	ldrh	r3, [r4, #12]
 800b2c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2cc:	81a3      	strh	r3, [r4, #12]
 800b2ce:	6126      	str	r6, [r4, #16]
 800b2d0:	6165      	str	r5, [r4, #20]
 800b2d2:	444e      	add	r6, r9
 800b2d4:	eba5 0509 	sub.w	r5, r5, r9
 800b2d8:	6026      	str	r6, [r4, #0]
 800b2da:	60a5      	str	r5, [r4, #8]
 800b2dc:	463e      	mov	r6, r7
 800b2de:	42be      	cmp	r6, r7
 800b2e0:	d900      	bls.n	800b2e4 <__ssputs_r+0x70>
 800b2e2:	463e      	mov	r6, r7
 800b2e4:	6820      	ldr	r0, [r4, #0]
 800b2e6:	4632      	mov	r2, r6
 800b2e8:	4641      	mov	r1, r8
 800b2ea:	f000 f9c9 	bl	800b680 <memmove>
 800b2ee:	68a3      	ldr	r3, [r4, #8]
 800b2f0:	1b9b      	subs	r3, r3, r6
 800b2f2:	60a3      	str	r3, [r4, #8]
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	4433      	add	r3, r6
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	2000      	movs	r0, #0
 800b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b300:	462a      	mov	r2, r5
 800b302:	f000 fa1d 	bl	800b740 <_realloc_r>
 800b306:	4606      	mov	r6, r0
 800b308:	2800      	cmp	r0, #0
 800b30a:	d1e0      	bne.n	800b2ce <__ssputs_r+0x5a>
 800b30c:	6921      	ldr	r1, [r4, #16]
 800b30e:	4650      	mov	r0, sl
 800b310:	f7ff fbe8 	bl	800aae4 <_free_r>
 800b314:	230c      	movs	r3, #12
 800b316:	f8ca 3000 	str.w	r3, [sl]
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b320:	81a3      	strh	r3, [r4, #12]
 800b322:	f04f 30ff 	mov.w	r0, #4294967295
 800b326:	e7e9      	b.n	800b2fc <__ssputs_r+0x88>

0800b328 <_svfiprintf_r>:
 800b328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32c:	4698      	mov	r8, r3
 800b32e:	898b      	ldrh	r3, [r1, #12]
 800b330:	061b      	lsls	r3, r3, #24
 800b332:	b09d      	sub	sp, #116	; 0x74
 800b334:	4607      	mov	r7, r0
 800b336:	460d      	mov	r5, r1
 800b338:	4614      	mov	r4, r2
 800b33a:	d50e      	bpl.n	800b35a <_svfiprintf_r+0x32>
 800b33c:	690b      	ldr	r3, [r1, #16]
 800b33e:	b963      	cbnz	r3, 800b35a <_svfiprintf_r+0x32>
 800b340:	2140      	movs	r1, #64	; 0x40
 800b342:	f7fd fe45 	bl	8008fd0 <_malloc_r>
 800b346:	6028      	str	r0, [r5, #0]
 800b348:	6128      	str	r0, [r5, #16]
 800b34a:	b920      	cbnz	r0, 800b356 <_svfiprintf_r+0x2e>
 800b34c:	230c      	movs	r3, #12
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	e0d0      	b.n	800b4f8 <_svfiprintf_r+0x1d0>
 800b356:	2340      	movs	r3, #64	; 0x40
 800b358:	616b      	str	r3, [r5, #20]
 800b35a:	2300      	movs	r3, #0
 800b35c:	9309      	str	r3, [sp, #36]	; 0x24
 800b35e:	2320      	movs	r3, #32
 800b360:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b364:	f8cd 800c 	str.w	r8, [sp, #12]
 800b368:	2330      	movs	r3, #48	; 0x30
 800b36a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b510 <_svfiprintf_r+0x1e8>
 800b36e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b372:	f04f 0901 	mov.w	r9, #1
 800b376:	4623      	mov	r3, r4
 800b378:	469a      	mov	sl, r3
 800b37a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b37e:	b10a      	cbz	r2, 800b384 <_svfiprintf_r+0x5c>
 800b380:	2a25      	cmp	r2, #37	; 0x25
 800b382:	d1f9      	bne.n	800b378 <_svfiprintf_r+0x50>
 800b384:	ebba 0b04 	subs.w	fp, sl, r4
 800b388:	d00b      	beq.n	800b3a2 <_svfiprintf_r+0x7a>
 800b38a:	465b      	mov	r3, fp
 800b38c:	4622      	mov	r2, r4
 800b38e:	4629      	mov	r1, r5
 800b390:	4638      	mov	r0, r7
 800b392:	f7ff ff6f 	bl	800b274 <__ssputs_r>
 800b396:	3001      	adds	r0, #1
 800b398:	f000 80a9 	beq.w	800b4ee <_svfiprintf_r+0x1c6>
 800b39c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b39e:	445a      	add	r2, fp
 800b3a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 80a1 	beq.w	800b4ee <_svfiprintf_r+0x1c6>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b3b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3b6:	f10a 0a01 	add.w	sl, sl, #1
 800b3ba:	9304      	str	r3, [sp, #16]
 800b3bc:	9307      	str	r3, [sp, #28]
 800b3be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3c2:	931a      	str	r3, [sp, #104]	; 0x68
 800b3c4:	4654      	mov	r4, sl
 800b3c6:	2205      	movs	r2, #5
 800b3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3cc:	4850      	ldr	r0, [pc, #320]	; (800b510 <_svfiprintf_r+0x1e8>)
 800b3ce:	f7f4 ff07 	bl	80001e0 <memchr>
 800b3d2:	9a04      	ldr	r2, [sp, #16]
 800b3d4:	b9d8      	cbnz	r0, 800b40e <_svfiprintf_r+0xe6>
 800b3d6:	06d0      	lsls	r0, r2, #27
 800b3d8:	bf44      	itt	mi
 800b3da:	2320      	movmi	r3, #32
 800b3dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3e0:	0711      	lsls	r1, r2, #28
 800b3e2:	bf44      	itt	mi
 800b3e4:	232b      	movmi	r3, #43	; 0x2b
 800b3e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b3ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b3f0:	d015      	beq.n	800b41e <_svfiprintf_r+0xf6>
 800b3f2:	9a07      	ldr	r2, [sp, #28]
 800b3f4:	4654      	mov	r4, sl
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	f04f 0c0a 	mov.w	ip, #10
 800b3fc:	4621      	mov	r1, r4
 800b3fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b402:	3b30      	subs	r3, #48	; 0x30
 800b404:	2b09      	cmp	r3, #9
 800b406:	d94d      	bls.n	800b4a4 <_svfiprintf_r+0x17c>
 800b408:	b1b0      	cbz	r0, 800b438 <_svfiprintf_r+0x110>
 800b40a:	9207      	str	r2, [sp, #28]
 800b40c:	e014      	b.n	800b438 <_svfiprintf_r+0x110>
 800b40e:	eba0 0308 	sub.w	r3, r0, r8
 800b412:	fa09 f303 	lsl.w	r3, r9, r3
 800b416:	4313      	orrs	r3, r2
 800b418:	9304      	str	r3, [sp, #16]
 800b41a:	46a2      	mov	sl, r4
 800b41c:	e7d2      	b.n	800b3c4 <_svfiprintf_r+0x9c>
 800b41e:	9b03      	ldr	r3, [sp, #12]
 800b420:	1d19      	adds	r1, r3, #4
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	9103      	str	r1, [sp, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	bfbb      	ittet	lt
 800b42a:	425b      	neglt	r3, r3
 800b42c:	f042 0202 	orrlt.w	r2, r2, #2
 800b430:	9307      	strge	r3, [sp, #28]
 800b432:	9307      	strlt	r3, [sp, #28]
 800b434:	bfb8      	it	lt
 800b436:	9204      	strlt	r2, [sp, #16]
 800b438:	7823      	ldrb	r3, [r4, #0]
 800b43a:	2b2e      	cmp	r3, #46	; 0x2e
 800b43c:	d10c      	bne.n	800b458 <_svfiprintf_r+0x130>
 800b43e:	7863      	ldrb	r3, [r4, #1]
 800b440:	2b2a      	cmp	r3, #42	; 0x2a
 800b442:	d134      	bne.n	800b4ae <_svfiprintf_r+0x186>
 800b444:	9b03      	ldr	r3, [sp, #12]
 800b446:	1d1a      	adds	r2, r3, #4
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	9203      	str	r2, [sp, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	bfb8      	it	lt
 800b450:	f04f 33ff 	movlt.w	r3, #4294967295
 800b454:	3402      	adds	r4, #2
 800b456:	9305      	str	r3, [sp, #20]
 800b458:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b520 <_svfiprintf_r+0x1f8>
 800b45c:	7821      	ldrb	r1, [r4, #0]
 800b45e:	2203      	movs	r2, #3
 800b460:	4650      	mov	r0, sl
 800b462:	f7f4 febd 	bl	80001e0 <memchr>
 800b466:	b138      	cbz	r0, 800b478 <_svfiprintf_r+0x150>
 800b468:	9b04      	ldr	r3, [sp, #16]
 800b46a:	eba0 000a 	sub.w	r0, r0, sl
 800b46e:	2240      	movs	r2, #64	; 0x40
 800b470:	4082      	lsls	r2, r0
 800b472:	4313      	orrs	r3, r2
 800b474:	3401      	adds	r4, #1
 800b476:	9304      	str	r3, [sp, #16]
 800b478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b47c:	4825      	ldr	r0, [pc, #148]	; (800b514 <_svfiprintf_r+0x1ec>)
 800b47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b482:	2206      	movs	r2, #6
 800b484:	f7f4 feac 	bl	80001e0 <memchr>
 800b488:	2800      	cmp	r0, #0
 800b48a:	d038      	beq.n	800b4fe <_svfiprintf_r+0x1d6>
 800b48c:	4b22      	ldr	r3, [pc, #136]	; (800b518 <_svfiprintf_r+0x1f0>)
 800b48e:	bb1b      	cbnz	r3, 800b4d8 <_svfiprintf_r+0x1b0>
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	3307      	adds	r3, #7
 800b494:	f023 0307 	bic.w	r3, r3, #7
 800b498:	3308      	adds	r3, #8
 800b49a:	9303      	str	r3, [sp, #12]
 800b49c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b49e:	4433      	add	r3, r6
 800b4a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b4a2:	e768      	b.n	800b376 <_svfiprintf_r+0x4e>
 800b4a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4a8:	460c      	mov	r4, r1
 800b4aa:	2001      	movs	r0, #1
 800b4ac:	e7a6      	b.n	800b3fc <_svfiprintf_r+0xd4>
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	3401      	adds	r4, #1
 800b4b2:	9305      	str	r3, [sp, #20]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	f04f 0c0a 	mov.w	ip, #10
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4c0:	3a30      	subs	r2, #48	; 0x30
 800b4c2:	2a09      	cmp	r2, #9
 800b4c4:	d903      	bls.n	800b4ce <_svfiprintf_r+0x1a6>
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d0c6      	beq.n	800b458 <_svfiprintf_r+0x130>
 800b4ca:	9105      	str	r1, [sp, #20]
 800b4cc:	e7c4      	b.n	800b458 <_svfiprintf_r+0x130>
 800b4ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e7f0      	b.n	800b4ba <_svfiprintf_r+0x192>
 800b4d8:	ab03      	add	r3, sp, #12
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	462a      	mov	r2, r5
 800b4de:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <_svfiprintf_r+0x1f4>)
 800b4e0:	a904      	add	r1, sp, #16
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	f7fd fea0 	bl	8009228 <_printf_float>
 800b4e8:	1c42      	adds	r2, r0, #1
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	d1d6      	bne.n	800b49c <_svfiprintf_r+0x174>
 800b4ee:	89ab      	ldrh	r3, [r5, #12]
 800b4f0:	065b      	lsls	r3, r3, #25
 800b4f2:	f53f af2d 	bmi.w	800b350 <_svfiprintf_r+0x28>
 800b4f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4f8:	b01d      	add	sp, #116	; 0x74
 800b4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4fe:	ab03      	add	r3, sp, #12
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	462a      	mov	r2, r5
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <_svfiprintf_r+0x1f4>)
 800b506:	a904      	add	r1, sp, #16
 800b508:	4638      	mov	r0, r7
 800b50a:	f7fe f931 	bl	8009770 <_printf_i>
 800b50e:	e7eb      	b.n	800b4e8 <_svfiprintf_r+0x1c0>
 800b510:	0800c9ac 	.word	0x0800c9ac
 800b514:	0800c9b6 	.word	0x0800c9b6
 800b518:	08009229 	.word	0x08009229
 800b51c:	0800b275 	.word	0x0800b275
 800b520:	0800c9b2 	.word	0x0800c9b2

0800b524 <__sflush_r>:
 800b524:	898a      	ldrh	r2, [r1, #12]
 800b526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52a:	4605      	mov	r5, r0
 800b52c:	0710      	lsls	r0, r2, #28
 800b52e:	460c      	mov	r4, r1
 800b530:	d458      	bmi.n	800b5e4 <__sflush_r+0xc0>
 800b532:	684b      	ldr	r3, [r1, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	dc05      	bgt.n	800b544 <__sflush_r+0x20>
 800b538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	dc02      	bgt.n	800b544 <__sflush_r+0x20>
 800b53e:	2000      	movs	r0, #0
 800b540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b546:	2e00      	cmp	r6, #0
 800b548:	d0f9      	beq.n	800b53e <__sflush_r+0x1a>
 800b54a:	2300      	movs	r3, #0
 800b54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b550:	682f      	ldr	r7, [r5, #0]
 800b552:	6a21      	ldr	r1, [r4, #32]
 800b554:	602b      	str	r3, [r5, #0]
 800b556:	d032      	beq.n	800b5be <__sflush_r+0x9a>
 800b558:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	075a      	lsls	r2, r3, #29
 800b55e:	d505      	bpl.n	800b56c <__sflush_r+0x48>
 800b560:	6863      	ldr	r3, [r4, #4]
 800b562:	1ac0      	subs	r0, r0, r3
 800b564:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b566:	b10b      	cbz	r3, 800b56c <__sflush_r+0x48>
 800b568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b56a:	1ac0      	subs	r0, r0, r3
 800b56c:	2300      	movs	r3, #0
 800b56e:	4602      	mov	r2, r0
 800b570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b572:	6a21      	ldr	r1, [r4, #32]
 800b574:	4628      	mov	r0, r5
 800b576:	47b0      	blx	r6
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	d106      	bne.n	800b58c <__sflush_r+0x68>
 800b57e:	6829      	ldr	r1, [r5, #0]
 800b580:	291d      	cmp	r1, #29
 800b582:	d82b      	bhi.n	800b5dc <__sflush_r+0xb8>
 800b584:	4a29      	ldr	r2, [pc, #164]	; (800b62c <__sflush_r+0x108>)
 800b586:	410a      	asrs	r2, r1
 800b588:	07d6      	lsls	r6, r2, #31
 800b58a:	d427      	bmi.n	800b5dc <__sflush_r+0xb8>
 800b58c:	2200      	movs	r2, #0
 800b58e:	6062      	str	r2, [r4, #4]
 800b590:	04d9      	lsls	r1, r3, #19
 800b592:	6922      	ldr	r2, [r4, #16]
 800b594:	6022      	str	r2, [r4, #0]
 800b596:	d504      	bpl.n	800b5a2 <__sflush_r+0x7e>
 800b598:	1c42      	adds	r2, r0, #1
 800b59a:	d101      	bne.n	800b5a0 <__sflush_r+0x7c>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b903      	cbnz	r3, 800b5a2 <__sflush_r+0x7e>
 800b5a0:	6560      	str	r0, [r4, #84]	; 0x54
 800b5a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5a4:	602f      	str	r7, [r5, #0]
 800b5a6:	2900      	cmp	r1, #0
 800b5a8:	d0c9      	beq.n	800b53e <__sflush_r+0x1a>
 800b5aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	d002      	beq.n	800b5b8 <__sflush_r+0x94>
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f7ff fa96 	bl	800aae4 <_free_r>
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	6360      	str	r0, [r4, #52]	; 0x34
 800b5bc:	e7c0      	b.n	800b540 <__sflush_r+0x1c>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	47b0      	blx	r6
 800b5c4:	1c41      	adds	r1, r0, #1
 800b5c6:	d1c8      	bne.n	800b55a <__sflush_r+0x36>
 800b5c8:	682b      	ldr	r3, [r5, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d0c5      	beq.n	800b55a <__sflush_r+0x36>
 800b5ce:	2b1d      	cmp	r3, #29
 800b5d0:	d001      	beq.n	800b5d6 <__sflush_r+0xb2>
 800b5d2:	2b16      	cmp	r3, #22
 800b5d4:	d101      	bne.n	800b5da <__sflush_r+0xb6>
 800b5d6:	602f      	str	r7, [r5, #0]
 800b5d8:	e7b1      	b.n	800b53e <__sflush_r+0x1a>
 800b5da:	89a3      	ldrh	r3, [r4, #12]
 800b5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5e0:	81a3      	strh	r3, [r4, #12]
 800b5e2:	e7ad      	b.n	800b540 <__sflush_r+0x1c>
 800b5e4:	690f      	ldr	r7, [r1, #16]
 800b5e6:	2f00      	cmp	r7, #0
 800b5e8:	d0a9      	beq.n	800b53e <__sflush_r+0x1a>
 800b5ea:	0793      	lsls	r3, r2, #30
 800b5ec:	680e      	ldr	r6, [r1, #0]
 800b5ee:	bf08      	it	eq
 800b5f0:	694b      	ldreq	r3, [r1, #20]
 800b5f2:	600f      	str	r7, [r1, #0]
 800b5f4:	bf18      	it	ne
 800b5f6:	2300      	movne	r3, #0
 800b5f8:	eba6 0807 	sub.w	r8, r6, r7
 800b5fc:	608b      	str	r3, [r1, #8]
 800b5fe:	f1b8 0f00 	cmp.w	r8, #0
 800b602:	dd9c      	ble.n	800b53e <__sflush_r+0x1a>
 800b604:	6a21      	ldr	r1, [r4, #32]
 800b606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b608:	4643      	mov	r3, r8
 800b60a:	463a      	mov	r2, r7
 800b60c:	4628      	mov	r0, r5
 800b60e:	47b0      	blx	r6
 800b610:	2800      	cmp	r0, #0
 800b612:	dc06      	bgt.n	800b622 <__sflush_r+0xfe>
 800b614:	89a3      	ldrh	r3, [r4, #12]
 800b616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b61a:	81a3      	strh	r3, [r4, #12]
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295
 800b620:	e78e      	b.n	800b540 <__sflush_r+0x1c>
 800b622:	4407      	add	r7, r0
 800b624:	eba8 0800 	sub.w	r8, r8, r0
 800b628:	e7e9      	b.n	800b5fe <__sflush_r+0xda>
 800b62a:	bf00      	nop
 800b62c:	dfbffffe 	.word	0xdfbffffe

0800b630 <_fflush_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	690b      	ldr	r3, [r1, #16]
 800b634:	4605      	mov	r5, r0
 800b636:	460c      	mov	r4, r1
 800b638:	b913      	cbnz	r3, 800b640 <_fflush_r+0x10>
 800b63a:	2500      	movs	r5, #0
 800b63c:	4628      	mov	r0, r5
 800b63e:	bd38      	pop	{r3, r4, r5, pc}
 800b640:	b118      	cbz	r0, 800b64a <_fflush_r+0x1a>
 800b642:	6a03      	ldr	r3, [r0, #32]
 800b644:	b90b      	cbnz	r3, 800b64a <_fflush_r+0x1a>
 800b646:	f7fe fa41 	bl	8009acc <__sinit>
 800b64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d0f3      	beq.n	800b63a <_fflush_r+0xa>
 800b652:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b654:	07d0      	lsls	r0, r2, #31
 800b656:	d404      	bmi.n	800b662 <_fflush_r+0x32>
 800b658:	0599      	lsls	r1, r3, #22
 800b65a:	d402      	bmi.n	800b662 <_fflush_r+0x32>
 800b65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b65e:	f7fe fbb4 	bl	8009dca <__retarget_lock_acquire_recursive>
 800b662:	4628      	mov	r0, r5
 800b664:	4621      	mov	r1, r4
 800b666:	f7ff ff5d 	bl	800b524 <__sflush_r>
 800b66a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b66c:	07da      	lsls	r2, r3, #31
 800b66e:	4605      	mov	r5, r0
 800b670:	d4e4      	bmi.n	800b63c <_fflush_r+0xc>
 800b672:	89a3      	ldrh	r3, [r4, #12]
 800b674:	059b      	lsls	r3, r3, #22
 800b676:	d4e1      	bmi.n	800b63c <_fflush_r+0xc>
 800b678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b67a:	f7fe fba7 	bl	8009dcc <__retarget_lock_release_recursive>
 800b67e:	e7dd      	b.n	800b63c <_fflush_r+0xc>

0800b680 <memmove>:
 800b680:	4288      	cmp	r0, r1
 800b682:	b510      	push	{r4, lr}
 800b684:	eb01 0402 	add.w	r4, r1, r2
 800b688:	d902      	bls.n	800b690 <memmove+0x10>
 800b68a:	4284      	cmp	r4, r0
 800b68c:	4623      	mov	r3, r4
 800b68e:	d807      	bhi.n	800b6a0 <memmove+0x20>
 800b690:	1e43      	subs	r3, r0, #1
 800b692:	42a1      	cmp	r1, r4
 800b694:	d008      	beq.n	800b6a8 <memmove+0x28>
 800b696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b69a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b69e:	e7f8      	b.n	800b692 <memmove+0x12>
 800b6a0:	4402      	add	r2, r0
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	428a      	cmp	r2, r1
 800b6a6:	d100      	bne.n	800b6aa <memmove+0x2a>
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6b2:	e7f7      	b.n	800b6a4 <memmove+0x24>

0800b6b4 <__assert_func>:
 800b6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <__assert_func+0x2c>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4605      	mov	r5, r0
 800b6c0:	68d8      	ldr	r0, [r3, #12]
 800b6c2:	b14c      	cbz	r4, 800b6d8 <__assert_func+0x24>
 800b6c4:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <__assert_func+0x30>)
 800b6c6:	9100      	str	r1, [sp, #0]
 800b6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6cc:	4906      	ldr	r1, [pc, #24]	; (800b6e8 <__assert_func+0x34>)
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	f000 f872 	bl	800b7b8 <fiprintf>
 800b6d4:	f7fd fc44 	bl	8008f60 <abort>
 800b6d8:	4b04      	ldr	r3, [pc, #16]	; (800b6ec <__assert_func+0x38>)
 800b6da:	461c      	mov	r4, r3
 800b6dc:	e7f3      	b.n	800b6c6 <__assert_func+0x12>
 800b6de:	bf00      	nop
 800b6e0:	20000070 	.word	0x20000070
 800b6e4:	0800c9c7 	.word	0x0800c9c7
 800b6e8:	0800c9d4 	.word	0x0800c9d4
 800b6ec:	0800ca02 	.word	0x0800ca02

0800b6f0 <_calloc_r>:
 800b6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6f2:	fba1 2402 	umull	r2, r4, r1, r2
 800b6f6:	b94c      	cbnz	r4, 800b70c <_calloc_r+0x1c>
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	9201      	str	r2, [sp, #4]
 800b6fc:	f7fd fc68 	bl	8008fd0 <_malloc_r>
 800b700:	9a01      	ldr	r2, [sp, #4]
 800b702:	4605      	mov	r5, r0
 800b704:	b930      	cbnz	r0, 800b714 <_calloc_r+0x24>
 800b706:	4628      	mov	r0, r5
 800b708:	b003      	add	sp, #12
 800b70a:	bd30      	pop	{r4, r5, pc}
 800b70c:	220c      	movs	r2, #12
 800b70e:	6002      	str	r2, [r0, #0]
 800b710:	2500      	movs	r5, #0
 800b712:	e7f8      	b.n	800b706 <_calloc_r+0x16>
 800b714:	4621      	mov	r1, r4
 800b716:	f7fe fa86 	bl	8009c26 <memset>
 800b71a:	e7f4      	b.n	800b706 <_calloc_r+0x16>

0800b71c <__ascii_mbtowc>:
 800b71c:	b082      	sub	sp, #8
 800b71e:	b901      	cbnz	r1, 800b722 <__ascii_mbtowc+0x6>
 800b720:	a901      	add	r1, sp, #4
 800b722:	b142      	cbz	r2, 800b736 <__ascii_mbtowc+0x1a>
 800b724:	b14b      	cbz	r3, 800b73a <__ascii_mbtowc+0x1e>
 800b726:	7813      	ldrb	r3, [r2, #0]
 800b728:	600b      	str	r3, [r1, #0]
 800b72a:	7812      	ldrb	r2, [r2, #0]
 800b72c:	1e10      	subs	r0, r2, #0
 800b72e:	bf18      	it	ne
 800b730:	2001      	movne	r0, #1
 800b732:	b002      	add	sp, #8
 800b734:	4770      	bx	lr
 800b736:	4610      	mov	r0, r2
 800b738:	e7fb      	b.n	800b732 <__ascii_mbtowc+0x16>
 800b73a:	f06f 0001 	mvn.w	r0, #1
 800b73e:	e7f8      	b.n	800b732 <__ascii_mbtowc+0x16>

0800b740 <_realloc_r>:
 800b740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b744:	4680      	mov	r8, r0
 800b746:	4614      	mov	r4, r2
 800b748:	460e      	mov	r6, r1
 800b74a:	b921      	cbnz	r1, 800b756 <_realloc_r+0x16>
 800b74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b750:	4611      	mov	r1, r2
 800b752:	f7fd bc3d 	b.w	8008fd0 <_malloc_r>
 800b756:	b92a      	cbnz	r2, 800b764 <_realloc_r+0x24>
 800b758:	f7ff f9c4 	bl	800aae4 <_free_r>
 800b75c:	4625      	mov	r5, r4
 800b75e:	4628      	mov	r0, r5
 800b760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b764:	f000 f83a 	bl	800b7dc <_malloc_usable_size_r>
 800b768:	4284      	cmp	r4, r0
 800b76a:	4607      	mov	r7, r0
 800b76c:	d802      	bhi.n	800b774 <_realloc_r+0x34>
 800b76e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b772:	d812      	bhi.n	800b79a <_realloc_r+0x5a>
 800b774:	4621      	mov	r1, r4
 800b776:	4640      	mov	r0, r8
 800b778:	f7fd fc2a 	bl	8008fd0 <_malloc_r>
 800b77c:	4605      	mov	r5, r0
 800b77e:	2800      	cmp	r0, #0
 800b780:	d0ed      	beq.n	800b75e <_realloc_r+0x1e>
 800b782:	42bc      	cmp	r4, r7
 800b784:	4622      	mov	r2, r4
 800b786:	4631      	mov	r1, r6
 800b788:	bf28      	it	cs
 800b78a:	463a      	movcs	r2, r7
 800b78c:	f7fe fb1f 	bl	8009dce <memcpy>
 800b790:	4631      	mov	r1, r6
 800b792:	4640      	mov	r0, r8
 800b794:	f7ff f9a6 	bl	800aae4 <_free_r>
 800b798:	e7e1      	b.n	800b75e <_realloc_r+0x1e>
 800b79a:	4635      	mov	r5, r6
 800b79c:	e7df      	b.n	800b75e <_realloc_r+0x1e>

0800b79e <__ascii_wctomb>:
 800b79e:	b149      	cbz	r1, 800b7b4 <__ascii_wctomb+0x16>
 800b7a0:	2aff      	cmp	r2, #255	; 0xff
 800b7a2:	bf85      	ittet	hi
 800b7a4:	238a      	movhi	r3, #138	; 0x8a
 800b7a6:	6003      	strhi	r3, [r0, #0]
 800b7a8:	700a      	strbls	r2, [r1, #0]
 800b7aa:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7ae:	bf98      	it	ls
 800b7b0:	2001      	movls	r0, #1
 800b7b2:	4770      	bx	lr
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	4770      	bx	lr

0800b7b8 <fiprintf>:
 800b7b8:	b40e      	push	{r1, r2, r3}
 800b7ba:	b503      	push	{r0, r1, lr}
 800b7bc:	4601      	mov	r1, r0
 800b7be:	ab03      	add	r3, sp, #12
 800b7c0:	4805      	ldr	r0, [pc, #20]	; (800b7d8 <fiprintf+0x20>)
 800b7c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c6:	6800      	ldr	r0, [r0, #0]
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	f000 f839 	bl	800b840 <_vfiprintf_r>
 800b7ce:	b002      	add	sp, #8
 800b7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7d4:	b003      	add	sp, #12
 800b7d6:	4770      	bx	lr
 800b7d8:	20000070 	.word	0x20000070

0800b7dc <_malloc_usable_size_r>:
 800b7dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7e0:	1f18      	subs	r0, r3, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bfbc      	itt	lt
 800b7e6:	580b      	ldrlt	r3, [r1, r0]
 800b7e8:	18c0      	addlt	r0, r0, r3
 800b7ea:	4770      	bx	lr

0800b7ec <__sfputc_r>:
 800b7ec:	6893      	ldr	r3, [r2, #8]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	b410      	push	{r4}
 800b7f4:	6093      	str	r3, [r2, #8]
 800b7f6:	da08      	bge.n	800b80a <__sfputc_r+0x1e>
 800b7f8:	6994      	ldr	r4, [r2, #24]
 800b7fa:	42a3      	cmp	r3, r4
 800b7fc:	db01      	blt.n	800b802 <__sfputc_r+0x16>
 800b7fe:	290a      	cmp	r1, #10
 800b800:	d103      	bne.n	800b80a <__sfputc_r+0x1e>
 800b802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b806:	f000 b935 	b.w	800ba74 <__swbuf_r>
 800b80a:	6813      	ldr	r3, [r2, #0]
 800b80c:	1c58      	adds	r0, r3, #1
 800b80e:	6010      	str	r0, [r2, #0]
 800b810:	7019      	strb	r1, [r3, #0]
 800b812:	4608      	mov	r0, r1
 800b814:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <__sfputs_r>:
 800b81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	4614      	mov	r4, r2
 800b822:	18d5      	adds	r5, r2, r3
 800b824:	42ac      	cmp	r4, r5
 800b826:	d101      	bne.n	800b82c <__sfputs_r+0x12>
 800b828:	2000      	movs	r0, #0
 800b82a:	e007      	b.n	800b83c <__sfputs_r+0x22>
 800b82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b830:	463a      	mov	r2, r7
 800b832:	4630      	mov	r0, r6
 800b834:	f7ff ffda 	bl	800b7ec <__sfputc_r>
 800b838:	1c43      	adds	r3, r0, #1
 800b83a:	d1f3      	bne.n	800b824 <__sfputs_r+0xa>
 800b83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b840 <_vfiprintf_r>:
 800b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	460d      	mov	r5, r1
 800b846:	b09d      	sub	sp, #116	; 0x74
 800b848:	4614      	mov	r4, r2
 800b84a:	4698      	mov	r8, r3
 800b84c:	4606      	mov	r6, r0
 800b84e:	b118      	cbz	r0, 800b858 <_vfiprintf_r+0x18>
 800b850:	6a03      	ldr	r3, [r0, #32]
 800b852:	b90b      	cbnz	r3, 800b858 <_vfiprintf_r+0x18>
 800b854:	f7fe f93a 	bl	8009acc <__sinit>
 800b858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b85a:	07d9      	lsls	r1, r3, #31
 800b85c:	d405      	bmi.n	800b86a <_vfiprintf_r+0x2a>
 800b85e:	89ab      	ldrh	r3, [r5, #12]
 800b860:	059a      	lsls	r2, r3, #22
 800b862:	d402      	bmi.n	800b86a <_vfiprintf_r+0x2a>
 800b864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b866:	f7fe fab0 	bl	8009dca <__retarget_lock_acquire_recursive>
 800b86a:	89ab      	ldrh	r3, [r5, #12]
 800b86c:	071b      	lsls	r3, r3, #28
 800b86e:	d501      	bpl.n	800b874 <_vfiprintf_r+0x34>
 800b870:	692b      	ldr	r3, [r5, #16]
 800b872:	b99b      	cbnz	r3, 800b89c <_vfiprintf_r+0x5c>
 800b874:	4629      	mov	r1, r5
 800b876:	4630      	mov	r0, r6
 800b878:	f000 f93a 	bl	800baf0 <__swsetup_r>
 800b87c:	b170      	cbz	r0, 800b89c <_vfiprintf_r+0x5c>
 800b87e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b880:	07dc      	lsls	r4, r3, #31
 800b882:	d504      	bpl.n	800b88e <_vfiprintf_r+0x4e>
 800b884:	f04f 30ff 	mov.w	r0, #4294967295
 800b888:	b01d      	add	sp, #116	; 0x74
 800b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b88e:	89ab      	ldrh	r3, [r5, #12]
 800b890:	0598      	lsls	r0, r3, #22
 800b892:	d4f7      	bmi.n	800b884 <_vfiprintf_r+0x44>
 800b894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b896:	f7fe fa99 	bl	8009dcc <__retarget_lock_release_recursive>
 800b89a:	e7f3      	b.n	800b884 <_vfiprintf_r+0x44>
 800b89c:	2300      	movs	r3, #0
 800b89e:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a0:	2320      	movs	r3, #32
 800b8a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8aa:	2330      	movs	r3, #48	; 0x30
 800b8ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ba60 <_vfiprintf_r+0x220>
 800b8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8b4:	f04f 0901 	mov.w	r9, #1
 800b8b8:	4623      	mov	r3, r4
 800b8ba:	469a      	mov	sl, r3
 800b8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8c0:	b10a      	cbz	r2, 800b8c6 <_vfiprintf_r+0x86>
 800b8c2:	2a25      	cmp	r2, #37	; 0x25
 800b8c4:	d1f9      	bne.n	800b8ba <_vfiprintf_r+0x7a>
 800b8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b8ca:	d00b      	beq.n	800b8e4 <_vfiprintf_r+0xa4>
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f7ff ffa1 	bl	800b81a <__sfputs_r>
 800b8d8:	3001      	adds	r0, #1
 800b8da:	f000 80a9 	beq.w	800ba30 <_vfiprintf_r+0x1f0>
 800b8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8e0:	445a      	add	r2, fp
 800b8e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 80a1 	beq.w	800ba30 <_vfiprintf_r+0x1f0>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8f8:	f10a 0a01 	add.w	sl, sl, #1
 800b8fc:	9304      	str	r3, [sp, #16]
 800b8fe:	9307      	str	r3, [sp, #28]
 800b900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b904:	931a      	str	r3, [sp, #104]	; 0x68
 800b906:	4654      	mov	r4, sl
 800b908:	2205      	movs	r2, #5
 800b90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b90e:	4854      	ldr	r0, [pc, #336]	; (800ba60 <_vfiprintf_r+0x220>)
 800b910:	f7f4 fc66 	bl	80001e0 <memchr>
 800b914:	9a04      	ldr	r2, [sp, #16]
 800b916:	b9d8      	cbnz	r0, 800b950 <_vfiprintf_r+0x110>
 800b918:	06d1      	lsls	r1, r2, #27
 800b91a:	bf44      	itt	mi
 800b91c:	2320      	movmi	r3, #32
 800b91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b922:	0713      	lsls	r3, r2, #28
 800b924:	bf44      	itt	mi
 800b926:	232b      	movmi	r3, #43	; 0x2b
 800b928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b92c:	f89a 3000 	ldrb.w	r3, [sl]
 800b930:	2b2a      	cmp	r3, #42	; 0x2a
 800b932:	d015      	beq.n	800b960 <_vfiprintf_r+0x120>
 800b934:	9a07      	ldr	r2, [sp, #28]
 800b936:	4654      	mov	r4, sl
 800b938:	2000      	movs	r0, #0
 800b93a:	f04f 0c0a 	mov.w	ip, #10
 800b93e:	4621      	mov	r1, r4
 800b940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b944:	3b30      	subs	r3, #48	; 0x30
 800b946:	2b09      	cmp	r3, #9
 800b948:	d94d      	bls.n	800b9e6 <_vfiprintf_r+0x1a6>
 800b94a:	b1b0      	cbz	r0, 800b97a <_vfiprintf_r+0x13a>
 800b94c:	9207      	str	r2, [sp, #28]
 800b94e:	e014      	b.n	800b97a <_vfiprintf_r+0x13a>
 800b950:	eba0 0308 	sub.w	r3, r0, r8
 800b954:	fa09 f303 	lsl.w	r3, r9, r3
 800b958:	4313      	orrs	r3, r2
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	46a2      	mov	sl, r4
 800b95e:	e7d2      	b.n	800b906 <_vfiprintf_r+0xc6>
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	1d19      	adds	r1, r3, #4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	9103      	str	r1, [sp, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bfbb      	ittet	lt
 800b96c:	425b      	neglt	r3, r3
 800b96e:	f042 0202 	orrlt.w	r2, r2, #2
 800b972:	9307      	strge	r3, [sp, #28]
 800b974:	9307      	strlt	r3, [sp, #28]
 800b976:	bfb8      	it	lt
 800b978:	9204      	strlt	r2, [sp, #16]
 800b97a:	7823      	ldrb	r3, [r4, #0]
 800b97c:	2b2e      	cmp	r3, #46	; 0x2e
 800b97e:	d10c      	bne.n	800b99a <_vfiprintf_r+0x15a>
 800b980:	7863      	ldrb	r3, [r4, #1]
 800b982:	2b2a      	cmp	r3, #42	; 0x2a
 800b984:	d134      	bne.n	800b9f0 <_vfiprintf_r+0x1b0>
 800b986:	9b03      	ldr	r3, [sp, #12]
 800b988:	1d1a      	adds	r2, r3, #4
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	9203      	str	r2, [sp, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bfb8      	it	lt
 800b992:	f04f 33ff 	movlt.w	r3, #4294967295
 800b996:	3402      	adds	r4, #2
 800b998:	9305      	str	r3, [sp, #20]
 800b99a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ba70 <_vfiprintf_r+0x230>
 800b99e:	7821      	ldrb	r1, [r4, #0]
 800b9a0:	2203      	movs	r2, #3
 800b9a2:	4650      	mov	r0, sl
 800b9a4:	f7f4 fc1c 	bl	80001e0 <memchr>
 800b9a8:	b138      	cbz	r0, 800b9ba <_vfiprintf_r+0x17a>
 800b9aa:	9b04      	ldr	r3, [sp, #16]
 800b9ac:	eba0 000a 	sub.w	r0, r0, sl
 800b9b0:	2240      	movs	r2, #64	; 0x40
 800b9b2:	4082      	lsls	r2, r0
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	3401      	adds	r4, #1
 800b9b8:	9304      	str	r3, [sp, #16]
 800b9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9be:	4829      	ldr	r0, [pc, #164]	; (800ba64 <_vfiprintf_r+0x224>)
 800b9c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9c4:	2206      	movs	r2, #6
 800b9c6:	f7f4 fc0b 	bl	80001e0 <memchr>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	d03f      	beq.n	800ba4e <_vfiprintf_r+0x20e>
 800b9ce:	4b26      	ldr	r3, [pc, #152]	; (800ba68 <_vfiprintf_r+0x228>)
 800b9d0:	bb1b      	cbnz	r3, 800ba1a <_vfiprintf_r+0x1da>
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	3307      	adds	r3, #7
 800b9d6:	f023 0307 	bic.w	r3, r3, #7
 800b9da:	3308      	adds	r3, #8
 800b9dc:	9303      	str	r3, [sp, #12]
 800b9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e0:	443b      	add	r3, r7
 800b9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e4:	e768      	b.n	800b8b8 <_vfiprintf_r+0x78>
 800b9e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9ea:	460c      	mov	r4, r1
 800b9ec:	2001      	movs	r0, #1
 800b9ee:	e7a6      	b.n	800b93e <_vfiprintf_r+0xfe>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	3401      	adds	r4, #1
 800b9f4:	9305      	str	r3, [sp, #20]
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f04f 0c0a 	mov.w	ip, #10
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba02:	3a30      	subs	r2, #48	; 0x30
 800ba04:	2a09      	cmp	r2, #9
 800ba06:	d903      	bls.n	800ba10 <_vfiprintf_r+0x1d0>
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0c6      	beq.n	800b99a <_vfiprintf_r+0x15a>
 800ba0c:	9105      	str	r1, [sp, #20]
 800ba0e:	e7c4      	b.n	800b99a <_vfiprintf_r+0x15a>
 800ba10:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba14:	4604      	mov	r4, r0
 800ba16:	2301      	movs	r3, #1
 800ba18:	e7f0      	b.n	800b9fc <_vfiprintf_r+0x1bc>
 800ba1a:	ab03      	add	r3, sp, #12
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	462a      	mov	r2, r5
 800ba20:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <_vfiprintf_r+0x22c>)
 800ba22:	a904      	add	r1, sp, #16
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7fd fbff 	bl	8009228 <_printf_float>
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	1c78      	adds	r0, r7, #1
 800ba2e:	d1d6      	bne.n	800b9de <_vfiprintf_r+0x19e>
 800ba30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba32:	07d9      	lsls	r1, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_vfiprintf_r+0x202>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	059a      	lsls	r2, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_vfiprintf_r+0x202>
 800ba3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3e:	f7fe f9c5 	bl	8009dcc <__retarget_lock_release_recursive>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	065b      	lsls	r3, r3, #25
 800ba46:	f53f af1d 	bmi.w	800b884 <_vfiprintf_r+0x44>
 800ba4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba4c:	e71c      	b.n	800b888 <_vfiprintf_r+0x48>
 800ba4e:	ab03      	add	r3, sp, #12
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	462a      	mov	r2, r5
 800ba54:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <_vfiprintf_r+0x22c>)
 800ba56:	a904      	add	r1, sp, #16
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7fd fe89 	bl	8009770 <_printf_i>
 800ba5e:	e7e4      	b.n	800ba2a <_vfiprintf_r+0x1ea>
 800ba60:	0800c9ac 	.word	0x0800c9ac
 800ba64:	0800c9b6 	.word	0x0800c9b6
 800ba68:	08009229 	.word	0x08009229
 800ba6c:	0800b81b 	.word	0x0800b81b
 800ba70:	0800c9b2 	.word	0x0800c9b2

0800ba74 <__swbuf_r>:
 800ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba76:	460e      	mov	r6, r1
 800ba78:	4614      	mov	r4, r2
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	b118      	cbz	r0, 800ba86 <__swbuf_r+0x12>
 800ba7e:	6a03      	ldr	r3, [r0, #32]
 800ba80:	b90b      	cbnz	r3, 800ba86 <__swbuf_r+0x12>
 800ba82:	f7fe f823 	bl	8009acc <__sinit>
 800ba86:	69a3      	ldr	r3, [r4, #24]
 800ba88:	60a3      	str	r3, [r4, #8]
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	071a      	lsls	r2, r3, #28
 800ba8e:	d525      	bpl.n	800badc <__swbuf_r+0x68>
 800ba90:	6923      	ldr	r3, [r4, #16]
 800ba92:	b31b      	cbz	r3, 800badc <__swbuf_r+0x68>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	6922      	ldr	r2, [r4, #16]
 800ba98:	1a98      	subs	r0, r3, r2
 800ba9a:	6963      	ldr	r3, [r4, #20]
 800ba9c:	b2f6      	uxtb	r6, r6
 800ba9e:	4283      	cmp	r3, r0
 800baa0:	4637      	mov	r7, r6
 800baa2:	dc04      	bgt.n	800baae <__swbuf_r+0x3a>
 800baa4:	4621      	mov	r1, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	f7ff fdc2 	bl	800b630 <_fflush_r>
 800baac:	b9e0      	cbnz	r0, 800bae8 <__swbuf_r+0x74>
 800baae:	68a3      	ldr	r3, [r4, #8]
 800bab0:	3b01      	subs	r3, #1
 800bab2:	60a3      	str	r3, [r4, #8]
 800bab4:	6823      	ldr	r3, [r4, #0]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	6022      	str	r2, [r4, #0]
 800baba:	701e      	strb	r6, [r3, #0]
 800babc:	6962      	ldr	r2, [r4, #20]
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d004      	beq.n	800bace <__swbuf_r+0x5a>
 800bac4:	89a3      	ldrh	r3, [r4, #12]
 800bac6:	07db      	lsls	r3, r3, #31
 800bac8:	d506      	bpl.n	800bad8 <__swbuf_r+0x64>
 800baca:	2e0a      	cmp	r6, #10
 800bacc:	d104      	bne.n	800bad8 <__swbuf_r+0x64>
 800bace:	4621      	mov	r1, r4
 800bad0:	4628      	mov	r0, r5
 800bad2:	f7ff fdad 	bl	800b630 <_fflush_r>
 800bad6:	b938      	cbnz	r0, 800bae8 <__swbuf_r+0x74>
 800bad8:	4638      	mov	r0, r7
 800bada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800badc:	4621      	mov	r1, r4
 800bade:	4628      	mov	r0, r5
 800bae0:	f000 f806 	bl	800baf0 <__swsetup_r>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d0d5      	beq.n	800ba94 <__swbuf_r+0x20>
 800bae8:	f04f 37ff 	mov.w	r7, #4294967295
 800baec:	e7f4      	b.n	800bad8 <__swbuf_r+0x64>
	...

0800baf0 <__swsetup_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4b2a      	ldr	r3, [pc, #168]	; (800bb9c <__swsetup_r+0xac>)
 800baf4:	4605      	mov	r5, r0
 800baf6:	6818      	ldr	r0, [r3, #0]
 800baf8:	460c      	mov	r4, r1
 800bafa:	b118      	cbz	r0, 800bb04 <__swsetup_r+0x14>
 800bafc:	6a03      	ldr	r3, [r0, #32]
 800bafe:	b90b      	cbnz	r3, 800bb04 <__swsetup_r+0x14>
 800bb00:	f7fd ffe4 	bl	8009acc <__sinit>
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb0a:	0718      	lsls	r0, r3, #28
 800bb0c:	d422      	bmi.n	800bb54 <__swsetup_r+0x64>
 800bb0e:	06d9      	lsls	r1, r3, #27
 800bb10:	d407      	bmi.n	800bb22 <__swsetup_r+0x32>
 800bb12:	2309      	movs	r3, #9
 800bb14:	602b      	str	r3, [r5, #0]
 800bb16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bb1a:	81a3      	strh	r3, [r4, #12]
 800bb1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb20:	e034      	b.n	800bb8c <__swsetup_r+0x9c>
 800bb22:	0758      	lsls	r0, r3, #29
 800bb24:	d512      	bpl.n	800bb4c <__swsetup_r+0x5c>
 800bb26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb28:	b141      	cbz	r1, 800bb3c <__swsetup_r+0x4c>
 800bb2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb2e:	4299      	cmp	r1, r3
 800bb30:	d002      	beq.n	800bb38 <__swsetup_r+0x48>
 800bb32:	4628      	mov	r0, r5
 800bb34:	f7fe ffd6 	bl	800aae4 <_free_r>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	6363      	str	r3, [r4, #52]	; 0x34
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	2300      	movs	r3, #0
 800bb46:	6063      	str	r3, [r4, #4]
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	6023      	str	r3, [r4, #0]
 800bb4c:	89a3      	ldrh	r3, [r4, #12]
 800bb4e:	f043 0308 	orr.w	r3, r3, #8
 800bb52:	81a3      	strh	r3, [r4, #12]
 800bb54:	6923      	ldr	r3, [r4, #16]
 800bb56:	b94b      	cbnz	r3, 800bb6c <__swsetup_r+0x7c>
 800bb58:	89a3      	ldrh	r3, [r4, #12]
 800bb5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb62:	d003      	beq.n	800bb6c <__swsetup_r+0x7c>
 800bb64:	4621      	mov	r1, r4
 800bb66:	4628      	mov	r0, r5
 800bb68:	f000 f840 	bl	800bbec <__smakebuf_r>
 800bb6c:	89a0      	ldrh	r0, [r4, #12]
 800bb6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb72:	f010 0301 	ands.w	r3, r0, #1
 800bb76:	d00a      	beq.n	800bb8e <__swsetup_r+0x9e>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60a3      	str	r3, [r4, #8]
 800bb7c:	6963      	ldr	r3, [r4, #20]
 800bb7e:	425b      	negs	r3, r3
 800bb80:	61a3      	str	r3, [r4, #24]
 800bb82:	6923      	ldr	r3, [r4, #16]
 800bb84:	b943      	cbnz	r3, 800bb98 <__swsetup_r+0xa8>
 800bb86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb8a:	d1c4      	bne.n	800bb16 <__swsetup_r+0x26>
 800bb8c:	bd38      	pop	{r3, r4, r5, pc}
 800bb8e:	0781      	lsls	r1, r0, #30
 800bb90:	bf58      	it	pl
 800bb92:	6963      	ldrpl	r3, [r4, #20]
 800bb94:	60a3      	str	r3, [r4, #8]
 800bb96:	e7f4      	b.n	800bb82 <__swsetup_r+0x92>
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e7f7      	b.n	800bb8c <__swsetup_r+0x9c>
 800bb9c:	20000070 	.word	0x20000070

0800bba0 <__swhatbuf_r>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	460c      	mov	r4, r1
 800bba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	b096      	sub	sp, #88	; 0x58
 800bbac:	4615      	mov	r5, r2
 800bbae:	461e      	mov	r6, r3
 800bbb0:	da0d      	bge.n	800bbce <__swhatbuf_r+0x2e>
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bbb8:	f04f 0100 	mov.w	r1, #0
 800bbbc:	bf0c      	ite	eq
 800bbbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bbc2:	2340      	movne	r3, #64	; 0x40
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	6031      	str	r1, [r6, #0]
 800bbc8:	602b      	str	r3, [r5, #0]
 800bbca:	b016      	add	sp, #88	; 0x58
 800bbcc:	bd70      	pop	{r4, r5, r6, pc}
 800bbce:	466a      	mov	r2, sp
 800bbd0:	f000 f848 	bl	800bc64 <_fstat_r>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	dbec      	blt.n	800bbb2 <__swhatbuf_r+0x12>
 800bbd8:	9901      	ldr	r1, [sp, #4]
 800bbda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bbde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bbe2:	4259      	negs	r1, r3
 800bbe4:	4159      	adcs	r1, r3
 800bbe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbea:	e7eb      	b.n	800bbc4 <__swhatbuf_r+0x24>

0800bbec <__smakebuf_r>:
 800bbec:	898b      	ldrh	r3, [r1, #12]
 800bbee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bbf0:	079d      	lsls	r5, r3, #30
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	d507      	bpl.n	800bc08 <__smakebuf_r+0x1c>
 800bbf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bbfc:	6023      	str	r3, [r4, #0]
 800bbfe:	6123      	str	r3, [r4, #16]
 800bc00:	2301      	movs	r3, #1
 800bc02:	6163      	str	r3, [r4, #20]
 800bc04:	b002      	add	sp, #8
 800bc06:	bd70      	pop	{r4, r5, r6, pc}
 800bc08:	ab01      	add	r3, sp, #4
 800bc0a:	466a      	mov	r2, sp
 800bc0c:	f7ff ffc8 	bl	800bba0 <__swhatbuf_r>
 800bc10:	9900      	ldr	r1, [sp, #0]
 800bc12:	4605      	mov	r5, r0
 800bc14:	4630      	mov	r0, r6
 800bc16:	f7fd f9db 	bl	8008fd0 <_malloc_r>
 800bc1a:	b948      	cbnz	r0, 800bc30 <__smakebuf_r+0x44>
 800bc1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc20:	059a      	lsls	r2, r3, #22
 800bc22:	d4ef      	bmi.n	800bc04 <__smakebuf_r+0x18>
 800bc24:	f023 0303 	bic.w	r3, r3, #3
 800bc28:	f043 0302 	orr.w	r3, r3, #2
 800bc2c:	81a3      	strh	r3, [r4, #12]
 800bc2e:	e7e3      	b.n	800bbf8 <__smakebuf_r+0xc>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	6020      	str	r0, [r4, #0]
 800bc34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc38:	81a3      	strh	r3, [r4, #12]
 800bc3a:	9b00      	ldr	r3, [sp, #0]
 800bc3c:	6163      	str	r3, [r4, #20]
 800bc3e:	9b01      	ldr	r3, [sp, #4]
 800bc40:	6120      	str	r0, [r4, #16]
 800bc42:	b15b      	cbz	r3, 800bc5c <__smakebuf_r+0x70>
 800bc44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f000 f81d 	bl	800bc88 <_isatty_r>
 800bc4e:	b128      	cbz	r0, 800bc5c <__smakebuf_r+0x70>
 800bc50:	89a3      	ldrh	r3, [r4, #12]
 800bc52:	f023 0303 	bic.w	r3, r3, #3
 800bc56:	f043 0301 	orr.w	r3, r3, #1
 800bc5a:	81a3      	strh	r3, [r4, #12]
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	431d      	orrs	r5, r3
 800bc60:	81a5      	strh	r5, [r4, #12]
 800bc62:	e7cf      	b.n	800bc04 <__smakebuf_r+0x18>

0800bc64 <_fstat_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	; (800bc84 <_fstat_r+0x20>)
 800bc68:	2300      	movs	r3, #0
 800bc6a:	4604      	mov	r4, r0
 800bc6c:	4608      	mov	r0, r1
 800bc6e:	4611      	mov	r1, r2
 800bc70:	602b      	str	r3, [r5, #0]
 800bc72:	f7f7 fb76 	bl	8003362 <_fstat>
 800bc76:	1c43      	adds	r3, r0, #1
 800bc78:	d102      	bne.n	800bc80 <_fstat_r+0x1c>
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	b103      	cbz	r3, 800bc80 <_fstat_r+0x1c>
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	bd38      	pop	{r3, r4, r5, pc}
 800bc82:	bf00      	nop
 800bc84:	20000930 	.word	0x20000930

0800bc88 <_isatty_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d06      	ldr	r5, [pc, #24]	; (800bca4 <_isatty_r+0x1c>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	602b      	str	r3, [r5, #0]
 800bc94:	f7f7 fb75 	bl	8003382 <_isatty>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_isatty_r+0x1a>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_isatty_r+0x1a>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	20000930 	.word	0x20000930

0800bca8 <_init>:
 800bca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcaa:	bf00      	nop
 800bcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcae:	bc08      	pop	{r3}
 800bcb0:	469e      	mov	lr, r3
 800bcb2:	4770      	bx	lr

0800bcb4 <_fini>:
 800bcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb6:	bf00      	nop
 800bcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcba:	bc08      	pop	{r3}
 800bcbc:	469e      	mov	lr, r3
 800bcbe:	4770      	bx	lr
