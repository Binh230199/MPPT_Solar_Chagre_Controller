
MPPT_Solar_Charge_Controller_TestBoard_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec4  0800d698  0800d698  0001d698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e55c  0800e55c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e55c  0800e55c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e55c  0800e55c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e55c  0800e55c  0001e55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e560  0800e560  0001e560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00000764  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000948  20000948  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 14 .debug_info   000301f4  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000570e  00000000  00000000  0005044b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016d0  00000000  00000000  00055b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011b8  00000000  00000000  00057230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028f22  00000000  00000000  000583e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00021d1a  00000000  00000000  0008130a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2a06  00000000  00000000  000a3024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000073c4  00000000  00000000  00185a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  0018cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d680 	.word	0x0800d680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	0800d680 	.word	0x0800d680

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <_ZN4blib6AnalogC1Ev>:

#include "Analog.h"
#include <cmath>
namespace blib
{
    Analog::Analog() : mHadc(&hadc1), mHdmaAdc(&hdma_adc1)
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 faca 	bl	80011fc <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <_ZN4blib6AnalogC1Ev+0x48>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <_ZN4blib6AnalogC1Ev+0x4c>)
 8000c82:	619a      	str	r2, [r3, #24]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <_ZN4blib6AnalogC1Ev+0x50>)
 8000c88:	61da      	str	r2, [r3, #28]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44
    {
        sampling();
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f000 f833 	bl	8000cfc <_ZN4blib6Analog8samplingEv>
    }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	0800e10c 	.word	0x0800e10c
 8000ca4:	20000228 	.word	0x20000228
 8000ca8:	20000278 	.word	0x20000278

08000cac <_ZN4blib6AnalogD1Ev>:

    Analog::~Analog()
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <_ZN4blib6AnalogD1Ev+0x2c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
    {
        HAL_ADC_Stop_DMA(mHadc);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 fe12 	bl	80048e8 <HAL_ADC_Stop_DMA>
    Analog::~Analog()
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f000 faa8 	bl	800121c <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
    }
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	0800e10c 	.word	0x0800e10c

08000cdc <_ZN4blib6AnalogD0Ev>:
    Analog::~Analog()
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
    }
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ffe1 	bl	8000cac <_ZN4blib6AnalogD1Ev>
 8000cea:	2148      	movs	r1, #72	; 0x48
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f009 fc05 	bl	800a4fc <_ZdlPvj>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_ZN4blib6Analog8samplingEv>:

    // Lay mau ADC bang DMA
    void Analog::sampling()
    {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
        HAL_ADC_Start_DMA(mHadc, mAdcValues, NUMBER_OF_CHANNELS);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6998      	ldr	r0, [r3, #24]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	4619      	mov	r1, r3
 8000d10:	f003 fcce 	bl	80046b0 <HAL_ADC_Start_DMA>
    }
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZN4blib6Analog10readAnalogEv>:
    {
        return mTemp;
    }

    void Analog::readAnalog()
    {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
        mVin = calSolarVoltage(mAdcValues[2]);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f000 f8a4 	bl	8000e78 <_ZN4blib6Analog15calSolarVoltageEm>
 8000d30:	eef0 7a40 	vmov.f32	s15, s0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	edc3 7a08 	vstr	s15, [r3, #32]
        mIin = calSolarCurrent(mAdcValues[2]);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f8cd 	bl	8000ee0 <_ZN4blib6Analog15calSolarCurrentEm>
 8000d46:	eef0 7a40 	vmov.f32	s15, s0
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
        mVout = calBatteryVoltage(mAdcValues[4]);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 f912 	bl	8000f80 <_ZN4blib6Analog17calBatteryVoltageEm>
 8000d5c:	eef0 7a40 	vmov.f32	s15, s0
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
        mIout = calBatteryCurrent(mAdcValues[0]);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f000 f93b 	bl	8000fe8 <_ZN4blib6Analog17calBatteryCurrentEm>
 8000d72:	eef0 7a40 	vmov.f32	s15, s0
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
        mTemp = calTemperature(mAdcValues[1]);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4619      	mov	r1, r3
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f980 	bl	8001088 <_ZN4blib6Analog14calTemperatureEm>
 8000d88:	eef0 7a40 	vmov.f32	s15, s0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

        // Power Source Detection
        if (mVin <= 3 && mVout < 3)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d98:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da4:	d80d      	bhi.n	8000dc2 <_ZN4blib6Analog10readAnalogEv+0xa6>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000dac:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000db0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db8:	d503      	bpl.n	8000dc2 <_ZN4blib6Analog10readAnalogEv+0xa6>
        {
            mInputSource = PowerSrc::USB_PORT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	645a      	str	r2, [r3, #68]	; 0x44
 8000dc0:	e01c      	b.n	8000dfc <_ZN4blib6Analog10readAnalogEv+0xe0>
        }
        else if (mVin > mVout)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	ed93 7a08 	vldr	s14, [r3, #32]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	dd03      	ble.n	8000de0 <_ZN4blib6Analog10readAnalogEv+0xc4>
        {
            mInputSource = PowerSrc::SOLAR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	645a      	str	r2, [r3, #68]	; 0x44
 8000dde:	e00d      	b.n	8000dfc <_ZN4blib6Analog10readAnalogEv+0xe0>
        }
        else if (mVin < mVout)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	ed93 7a08 	vldr	s14, [r3, #32]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	d502      	bpl.n	8000dfc <_ZN4blib6Analog10readAnalogEv+0xe0>
        {
            mInputSource = PowerSrc::BATTERY;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2202      	movs	r2, #2
 8000dfa:	645a      	str	r2, [r3, #68]	; 0x44
        else
        {

        }

        mPin = mVin * mIin;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	ed93 7a08 	vldr	s14, [r3, #32]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
        mPout = mVin * mIout;    // Cong suat ra tinh bang gia tri do duoc cua cam bien
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	ed93 7a08 	vldr	s14, [r3, #32]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8000e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
        mOutputDeviation = (mVout / k_voltage_battery_max) * 100.0f;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8000e2e:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8000e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e36:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000e70 <_ZN4blib6Analog10readAnalogEv+0x154>
 8000e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

        mBatteryPercent = ((mVout - k_voltage_battery_min)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000e4a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e4e:	ee37 7ac7 	vsub.f32	s14, s15, s14
                / (k_voltage_battery_max - k_voltage_battery_min)) * 100;
 8000e52:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000e70 <_ZN4blib6Analog10readAnalogEv+0x154>
 8000e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
        mBatteryPercent = ((mVout - k_voltage_battery_min)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	42c80000 	.word	0x42c80000
 8000e74:	00000000 	.word	0x00000000

08000e78 <_ZN4blib6Analog15calSolarVoltageEm>:

    float Analog::calSolarVoltage(uint32_t adcValue)    // Convert adcValue -> Vin
    {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
        return k_voltage_divider_input * ((float) adcValue / 4095) * 3.3;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e8c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000ed8 <_ZN4blib6Analog15calSolarVoltageEm+0x60>
 8000e90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e94:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e9c:	ee17 0a90 	vmov	r0, s15
 8000ea0:	f7ff fb5a 	bl	8000558 <__aeabi_f2d>
 8000ea4:	a30a      	add	r3, pc, #40	; (adr r3, 8000ed0 <_ZN4blib6Analog15calSolarVoltageEm+0x58>)
 8000ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eaa:	f7ff fbad 	bl	8000608 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fe7f 	bl	8000bb8 <__aeabi_d2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	ee07 3a90 	vmov	s15, r3
    }
 8000ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	66666666 	.word	0x66666666
 8000ed4:	400a6666 	.word	0x400a6666
 8000ed8:	457ff000 	.word	0x457ff000
 8000edc:	00000000 	.word	0x00000000

08000ee0 <_ZN4blib6Analog15calSolarCurrentEm>:

    float Analog::calSolarCurrent(uint32_t adcValue)    // Convert adcValue -> Iin
    {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
        float voltage = k_current_divider_input * ((float) adcValue / 4095) * 3.3;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ef4:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000f78 <_ZN4blib6Analog15calSolarCurrentEm+0x98>
 8000ef8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f00:	ee17 0a90 	vmov	r0, s15
 8000f04:	f7ff fb28 	bl	8000558 <__aeabi_f2d>
 8000f08:	a317      	add	r3, pc, #92	; (adr r3, 8000f68 <_ZN4blib6Analog15calSolarCurrentEm+0x88>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff fb7b 	bl	8000608 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fe4d 	bl	8000bb8 <__aeabi_d2f>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff fb18 	bl	8000558 <__aeabi_f2d>
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <_ZN4blib6Analog15calSolarCurrentEm+0x9c>)
 8000f2e:	f7ff f9b3 	bl	8000298 <__aeabi_dsub>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	a30d      	add	r3, pc, #52	; (adr r3, 8000f70 <_ZN4blib6Analog15calSolarCurrentEm+0x90>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff fc8c 	bl	800085c <__aeabi_ddiv>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fe34 	bl	8000bb8 <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	60bb      	str	r3, [r7, #8]

        return current;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	ee07 3a90 	vmov	s15, r3
    }
 8000f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	f3af 8000 	nop.w
 8000f68:	66666666 	.word	0x66666666
 8000f6c:	400a6666 	.word	0x400a6666
 8000f70:	a0000000 	.word	0xa0000000
 8000f74:	3fb99999 	.word	0x3fb99999
 8000f78:	457ff000 	.word	0x457ff000
 8000f7c:	40040000 	.word	0x40040000

08000f80 <_ZN4blib6Analog17calBatteryVoltageEm>:
    float Analog::calBatteryVoltage(uint32_t adcValue)    // Convert adcValue -> Vout
    {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
        return k_voltage_divider_output * ((float) adcValue / 4095) * 3.3;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f94:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000fe0 <_ZN4blib6Analog17calBatteryVoltageEm+0x60>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	ee17 0a90 	vmov	r0, s15
 8000fa8:	f7ff fad6 	bl	8000558 <__aeabi_f2d>
 8000fac:	a30a      	add	r3, pc, #40	; (adr r3, 8000fd8 <_ZN4blib6Analog17calBatteryVoltageEm+0x58>)
 8000fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb2:	f7ff fb29 	bl	8000608 <__aeabi_dmul>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fdfb 	bl	8000bb8 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	ee07 3a90 	vmov	s15, r3
    }
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	66666666 	.word	0x66666666
 8000fdc:	400a6666 	.word	0x400a6666
 8000fe0:	457ff000 	.word	0x457ff000
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <_ZN4blib6Analog17calBatteryCurrentEm>:
    float Analog::calBatteryCurrent(uint32_t adcValue)    // Convert adcValue -> Iout
    {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
        float voltage = k_current_divider_output * ((float) adcValue / 4095) * 3.3;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ffc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001080 <_ZN4blib6Analog17calBatteryCurrentEm+0x98>
 8001000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001004:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001008:	ee17 0a90 	vmov	r0, s15
 800100c:	f7ff faa4 	bl	8000558 <__aeabi_f2d>
 8001010:	a317      	add	r3, pc, #92	; (adr r3, 8001070 <_ZN4blib6Analog17calBatteryCurrentEm+0x88>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff faf7 	bl	8000608 <__aeabi_dmul>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fdc9 	bl	8000bb8 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	60fb      	str	r3, [r7, #12]
        float current = (voltage - (5 * 0.5)) / ACS_SENSITIVITY;    // Vic = 5V
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f7ff fa94 	bl	8000558 <__aeabi_f2d>
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_ZN4blib6Analog17calBatteryCurrentEm+0x9c>)
 8001036:	f7ff f92f 	bl	8000298 <__aeabi_dsub>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	a30d      	add	r3, pc, #52	; (adr r3, 8001078 <_ZN4blib6Analog17calBatteryCurrentEm+0x90>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fc08 	bl	800085c <__aeabi_ddiv>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f7ff fdb0 	bl	8000bb8 <__aeabi_d2f>
 8001058:	4603      	mov	r3, r0
 800105a:	60bb      	str	r3, [r7, #8]

        return current;
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	ee07 3a90 	vmov	s15, r3
    }
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	f3af 8000 	nop.w
 8001070:	66666666 	.word	0x66666666
 8001074:	400a6666 	.word	0x400a6666
 8001078:	a0000000 	.word	0xa0000000
 800107c:	3fb99999 	.word	0x3fb99999
 8001080:	457ff000 	.word	0x457ff000
 8001084:	40040000 	.word	0x40040000

08001088 <_ZN4blib6Analog14calTemperatureEm>:
    float Analog::calTemperature(uint32_t adcValue)    // Convert adcValue -> Temperature NTC 10k
    {
 8001088:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800108c:	b08e      	sub	sp, #56	; 0x38
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	6039      	str	r1, [r7, #0]
        const double A = 0.003354016f;
 8001094:	a352      	add	r3, pc, #328	; (adr r3, 80011e0 <_ZN4blib6Analog14calTemperatureEm+0x158>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        const double B = 0.0002569850f;
 800109e:	a34e      	add	r3, pc, #312	; (adr r3, 80011d8 <_ZN4blib6Analog14calTemperatureEm+0x150>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        const double C = 0.000002620131f;
 80010a8:	a34f      	add	r3, pc, #316	; (adr r3, 80011e8 <_ZN4blib6Analog14calTemperatureEm+0x160>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	e9c7 2308 	strd	r2, r3, [r7, #32]

        float voltage = ((float) adcValue / 4095) * 3.3;
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010bc:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80011f0 <_ZN4blib6Analog14calTemperatureEm+0x168>
 80010c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010c4:	ee16 0a90 	vmov	r0, s13
 80010c8:	f7ff fa46 	bl	8000558 <__aeabi_f2d>
 80010cc:	a340      	add	r3, pc, #256	; (adr r3, 80011d0 <_ZN4blib6Analog14calTemperatureEm+0x148>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff fa99 	bl	8000608 <__aeabi_dmul>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd6b 	bl	8000bb8 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	61fb      	str	r3, [r7, #28]
        float resistance = (3.3f * 10000.0f / voltage) - 10000.0f;
 80010e6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80011f4 <_ZN4blib6Analog14calTemperatureEm+0x16c>
 80010ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80011f8 <_ZN4blib6Analog14calTemperatureEm+0x170>
 80010f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fa:	edc7 7a06 	vstr	s15, [r7, #24]

        float logResistance = log(resistance);
 80010fe:	69b8      	ldr	r0, [r7, #24]
 8001100:	f7ff fa2a 	bl	8000558 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	ec43 2b10 	vmov	d0, r2, r3
 800110c:	f009 fa14 	bl	800a538 <log>
 8001110:	ec53 2b10 	vmov	r2, r3, d0
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fd4e 	bl	8000bb8 <__aeabi_d2f>
 800111c:	4603      	mov	r3, r0
 800111e:	617b      	str	r3, [r7, #20]
        float reciprocalTemperature = A + (B * logResistance)
 8001120:	6978      	ldr	r0, [r7, #20]
 8001122:	f7ff fa19 	bl	8000558 <__aeabi_f2d>
 8001126:	a32c      	add	r3, pc, #176	; (adr r3, 80011d8 <_ZN4blib6Analog14calTemperatureEm+0x150>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fa6c 	bl	8000608 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	a329      	add	r3, pc, #164	; (adr r3, 80011e0 <_ZN4blib6Analog14calTemperatureEm+0x158>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff f8ad 	bl	800029c <__adddf3>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4614      	mov	r4, r2
 8001148:	461d      	mov	r5, r3
                + (C * logResistance * logResistance * logResistance);
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff fa04 	bl	8000558 <__aeabi_f2d>
 8001150:	a325      	add	r3, pc, #148	; (adr r3, 80011e8 <_ZN4blib6Analog14calTemperatureEm+0x160>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa57 	bl	8000608 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4690      	mov	r8, r2
 8001160:	4699      	mov	r9, r3
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff f9f8 	bl	8000558 <__aeabi_f2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4640      	mov	r0, r8
 800116e:	4649      	mov	r1, r9
 8001170:	f7ff fa4a 	bl	8000608 <__aeabi_dmul>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4690      	mov	r8, r2
 800117a:	4699      	mov	r9, r3
 800117c:	6978      	ldr	r0, [r7, #20]
 800117e:	f7ff f9eb 	bl	8000558 <__aeabi_f2d>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4640      	mov	r0, r8
 8001188:	4649      	mov	r1, r9
 800118a:	f7ff fa3d 	bl	8000608 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4620      	mov	r0, r4
 8001194:	4629      	mov	r1, r5
 8001196:	f7ff f881 	bl	800029c <__adddf3>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
        float reciprocalTemperature = A + (B * logResistance)
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fd09 	bl	8000bb8 <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	613b      	str	r3, [r7, #16]

        float temperature = 1.0f / reciprocalTemperature;
 80011aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80011b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b6:	edc7 7a03 	vstr	s15, [r7, #12]
        return temperature;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	ee07 3a90 	vmov	s15, r3
    }
 80011c0:	eeb0 0a67 	vmov.f32	s0, s15
 80011c4:	3738      	adds	r7, #56	; 0x38
 80011c6:	46bd      	mov	sp, r7
 80011c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011cc:	f3af 8000 	nop.w
 80011d0:	66666666 	.word	0x66666666
 80011d4:	400a6666 	.word	0x400a6666
 80011d8:	20000000 	.word	0x20000000
 80011dc:	3f30d77e 	.word	0x3f30d77e
 80011e0:	a0000000 	.word	0xa0000000
 80011e4:	3f6b79e1 	.word	0x3f6b79e1
 80011e8:	40000000 	.word	0x40000000
 80011ec:	3ec5fab0 	.word	0x3ec5fab0
 80011f0:	457ff000 	.word	0x457ff000
 80011f4:	4700e800 	.word	0x4700e800
 80011f8:	461c4000 	.word	0x461c4000

080011fc <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
                {
 8001204:	4a04      	ldr	r2, [pc, #16]	; (8001218 <_ZN4blib2dp9SingletonINS_6AnalogEEC1Ev+0x1c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
                }
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	0800e11c 	.word	0x0800e11c

0800121c <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>:
                virtual ~Singleton()
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
                {
                }
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev+0x1c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	0800e11c 	.word	0x0800e11c

0800123c <_ZN4blib2dp9SingletonINS_6AnalogEED0Ev>:
                virtual ~Singleton()
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
                }
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffe9 	bl	800121c <_ZN4blib2dp9SingletonINS_6AnalogEED1Ev>
 800124a:	2104      	movs	r1, #4
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f009 f955 	bl	800a4fc <_ZdlPvj>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <_ZN4blib6Logger5printEPKc+0x2c>)
 8001266:	681c      	ldr	r4, [r3, #0]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff f809 	bl	8000280 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	4620      	mov	r0, r4
 800127a:	f008 f94d 	bl	8009518 <HAL_UART_Transmit>
            }
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bd90      	pop	{r4, r7, pc}
 8001286:	bf00      	nop
 8001288:	20000018 	.word	0x20000018

0800128c <_ZN4blib13ChargeControlC1Ev>:
        {
            return value;    // Nếu giá trị nằm trong khoảng, trả về giá trị ban đầu
        }
    }

    ChargeControl::ChargeControl()
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 fa52 	bl	8001740 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>
 800129c:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <_ZN4blib13ChargeControlC1Ev+0x58>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	721a      	strb	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	725a      	strb	r2, [r3, #9]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	741a      	strb	r2, [r3, #16]
    {
        mHtim = &htim2;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <_ZN4blib13ChargeControlC1Ev+0x5c>)
 80012be:	605a      	str	r2, [r3, #4]
        buckDisable();
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f981 	bl	80015c8 <_ZN4blib13ChargeControl11buckDisableEv>
        mChargeState = false;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	725a      	strb	r2, [r3, #9]
        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 ff88 	bl	80081e8 <HAL_TIM_PWM_Start>
    }
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	0800e12c 	.word	0x0800e12c
 80012e8:	20000310 	.word	0x20000310

080012ec <_ZN4blib13ChargeControlD1Ev>:
    ChargeControl::~ChargeControl()
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	4a05      	ldr	r2, [pc, #20]	; (800130c <_ZN4blib13ChargeControlD1Ev+0x20>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fa2f 	bl	8001760 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
    {

    }
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	0800e12c 	.word	0x0800e12c

08001310 <_ZN4blib13ChargeControlD0Ev>:
    ChargeControl::~ChargeControl()
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    }
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ffe7 	bl	80012ec <_ZN4blib13ChargeControlD1Ev>
 800131e:	2124      	movs	r1, #36	; 0x24
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f009 f8eb 	bl	800a4fc <_ZdlPvj>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <_ZN4blib13ChargeControl3runEv>:
    void ChargeControl::run()
    {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
        auto &analog = Analog::getInstance();
 8001338:	f000 fa32 	bl	80017a0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 800133c:	60f8      	str	r0, [r7, #12]
        auto &devProtection = DeviceProtection::getInstance();
 800133e:	f000 fa45 	bl	80017cc <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv>
 8001342:	60b8      	str	r0, [r7, #8]

        if (devProtection.mERR > 0 || mChargePause == true)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dc03      	bgt.n	8001354 <_ZN4blib13ChargeControl3runEv+0x24>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7a1b      	ldrb	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d103      	bne.n	800135c <_ZN4blib13ChargeControl3runEv+0x2c>
        {
            buckDisable();
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f937 	bl	80015c8 <_ZN4blib13ChargeControl11buckDisableEv>
                {

                }
            }
        }
    }
 800135a:	e0f2      	b.n	8001542 <_ZN4blib13ChargeControl3runEv+0x212>
                if (mOutputMode == OutputMode::PSU)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d132      	bne.n	80013ca <_ZN4blib13ChargeControl3runEv+0x9a>
                    if (analog.mIout > k_current_charging_max)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800136a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800136e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001376:	dd05      	ble.n	8001384 <_ZN4blib13ChargeControl3runEv+0x54>
                        mPwm--;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	e01e      	b.n	80013c2 <_ZN4blib13ChargeControl3runEv+0x92>
                    else if (analog.mVout > k_voltage_battery_max)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800138a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	dd05      	ble.n	80013a4 <_ZN4blib13ChargeControl3runEv+0x74>
                        mPwm--;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	1e5a      	subs	r2, r3, #1
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	615a      	str	r2, [r3, #20]
 80013a2:	e00e      	b.n	80013c2 <_ZN4blib13ChargeControl3runEv+0x92>
                    else if (analog.mVout < k_voltage_battery_max)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80013ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b6:	d504      	bpl.n	80013c2 <_ZN4blib13ChargeControl3runEv+0x92>
                        mPwm++;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	615a      	str	r2, [r3, #20]
                    pwmWrite();
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f968 	bl	8001698 <_ZN4blib13ChargeControl8pwmWriteEv>
    }
 80013c8:	e0bb      	b.n	8001542 <_ZN4blib13ChargeControl3runEv+0x212>
                else if (mOutputMode == OutputMode::CHARGER)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	f040 80ab 	bne.w	800152a <_ZN4blib13ChargeControl3runEv+0x1fa>
                    if (analog.mIout > k_current_charging_max)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80013de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	dd05      	ble.n	80013f4 <_ZN4blib13ChargeControl3runEv+0xc4>
                        mPwm--;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	1e5a      	subs	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	615a      	str	r2, [r3, #20]
 80013f2:	e096      	b.n	8001522 <_ZN4blib13ChargeControl3runEv+0x1f2>
                    else if (analog.mVout > k_voltage_battery_max)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80013fa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	dd05      	ble.n	8001414 <_ZN4blib13ChargeControl3runEv+0xe4>
                        mPwm--;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	1e5a      	subs	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	e086      	b.n	8001522 <_ZN4blib13ChargeControl3runEv+0x1f2>
                        if (analog.mPout > powerInputPrev && analog.mVin > voltageInputPrev)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <_ZN4blib13ChargeControl3runEv+0x21c>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd10      	ble.n	800144c <_ZN4blib13ChargeControl3runEv+0x11c>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001430:	4b47      	ldr	r3, [pc, #284]	; (8001550 <_ZN4blib13ChargeControl3runEv+0x220>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	dd05      	ble.n	800144c <_ZN4blib13ChargeControl3runEv+0x11c>
                            mPwm--;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	1e5a      	subs	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	615a      	str	r2, [r3, #20]
 800144a:	e062      	b.n	8001512 <_ZN4blib13ChargeControl3runEv+0x1e2>
                        else if (analog.mPin > powerInputPrev && analog.mVin < voltageInputPrev)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001452:	4b3e      	ldr	r3, [pc, #248]	; (800154c <_ZN4blib13ChargeControl3runEv+0x21c>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd10      	ble.n	8001484 <_ZN4blib13ChargeControl3runEv+0x154>
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	ed93 7a08 	vldr	s14, [r3, #32]
 8001468:	4b39      	ldr	r3, [pc, #228]	; (8001550 <_ZN4blib13ChargeControl3runEv+0x220>)
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d505      	bpl.n	8001484 <_ZN4blib13ChargeControl3runEv+0x154>
                            mPwm++;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	695b      	ldr	r3, [r3, #20]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	e046      	b.n	8001512 <_ZN4blib13ChargeControl3runEv+0x1e2>
                        else if (analog.mPin < powerInputPrev && analog.mVin > voltageInputPrev)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800148a:	4b30      	ldr	r3, [pc, #192]	; (800154c <_ZN4blib13ChargeControl3runEv+0x21c>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d510      	bpl.n	80014bc <_ZN4blib13ChargeControl3runEv+0x18c>
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	ed93 7a08 	vldr	s14, [r3, #32]
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <_ZN4blib13ChargeControl3runEv+0x220>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd05      	ble.n	80014bc <_ZN4blib13ChargeControl3runEv+0x18c>
                            mPwm++;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	e02a      	b.n	8001512 <_ZN4blib13ChargeControl3runEv+0x1e2>
                        else if (analog.mPin < powerInputPrev && analog.mVin < voltageInputPrev)
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <_ZN4blib13ChargeControl3runEv+0x21c>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d510      	bpl.n	80014f4 <_ZN4blib13ChargeControl3runEv+0x1c4>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	ed93 7a08 	vldr	s14, [r3, #32]
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <_ZN4blib13ChargeControl3runEv+0x220>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	d505      	bpl.n	80014f4 <_ZN4blib13ChargeControl3runEv+0x1c4>
                            mPwm--;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	1e5a      	subs	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	e00e      	b.n	8001512 <_ZN4blib13ChargeControl3runEv+0x1e2>
                        else if (analog.mVout < k_voltage_battery_max)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80014fa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80014fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001506:	d504      	bpl.n	8001512 <_ZN4blib13ChargeControl3runEv+0x1e2>
                            mPwm++;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	615a      	str	r2, [r3, #20]
                        powerInputPrev = analog.mPin;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <_ZN4blib13ChargeControl3runEv+0x21c>)
 8001518:	6013      	str	r3, [r2, #0]
                        voltageInputPrev = analog.mVin;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <_ZN4blib13ChargeControl3runEv+0x220>)
 8001520:	6013      	str	r3, [r2, #0]
                    pwmWrite();
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8b8 	bl	8001698 <_ZN4blib13ChargeControl8pwmWriteEv>
    }
 8001528:	e00b      	b.n	8001542 <_ZN4blib13ChargeControl3runEv+0x212>
                else if (mOutputMode == OutputMode::INVERTER)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b02      	cmp	r3, #2
 8001530:	d107      	bne.n	8001542 <_ZN4blib13ChargeControl3runEv+0x212>
                    HAL_GPIO_WritePin(INVERTER_CTRL_GPIO_Port, INVERTER_CTRL_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2140      	movs	r1, #64	; 0x40
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <_ZN4blib13ChargeControl3runEv+0x224>)
 8001538:	f004 fc9a 	bl	8005e70 <HAL_GPIO_WritePin>
                    buckDisable();
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f843 	bl	80015c8 <_ZN4blib13ChargeControl11buckDisableEv>
    }
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000200 	.word	0x20000200
 8001550:	20000204 	.word	0x20000204
 8001554:	48000800 	.word	0x48000800

08001558 <_ZN4blib13ChargeControl13setBuckEnableEb>:

    void ChargeControl::setBuckEnable(const bool val)
    {
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	70fb      	strb	r3, [r7, #3]
        mBuckEnable = val;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	741a      	strb	r2, [r3, #16]
    }
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <_ZN4blib13ChargeControl10buckEnableEv>:
        return mBuckEnable;
    }

    // Enable Mppt Buck converter
    void ChargeControl::buckEnable()
    {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
        LOGI();
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <_ZN4blib13ChargeControl10buckEnableEv+0x3c>)
 8001582:	229e      	movs	r2, #158	; 0x9e
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <_ZN4blib13ChargeControl10buckEnableEv+0x40>)
 8001586:	480d      	ldr	r0, [pc, #52]	; (80015bc <_ZN4blib13ChargeControl10buckEnableEv+0x44>)
 8001588:	f000 f936 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        setBuckEnable(true);
 800158c:	2101      	movs	r1, #1
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffe2 	bl	8001558 <_ZN4blib13ChargeControl13setBuckEnableEb>
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <_ZN4blib13ChargeControl10buckEnableEv+0x48>)
 800159c:	f004 fc68 	bl	8005e70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80015a0:	2200      	movs	r2, #0
 80015a2:	2101      	movs	r1, #1
 80015a4:	4807      	ldr	r0, [pc, #28]	; (80015c4 <_ZN4blib13ChargeControl10buckEnableEv+0x4c>)
 80015a6:	f004 fc63 	bl	8005e70 <HAL_GPIO_WritePin>
    }
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	0800d698 	.word	0x0800d698
 80015b8:	0800d6a4 	.word	0x0800d6a4
 80015bc:	0800d6b8 	.word	0x0800d6b8
 80015c0:	48000800 	.word	0x48000800
 80015c4:	48000400 	.word	0x48000400

080015c8 <_ZN4blib13ChargeControl11buckDisableEv>:

    // Disable Mppt Buck converter
    void ChargeControl::buckDisable()
    {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
        LOGI();
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <_ZN4blib13ChargeControl11buckDisableEv+0x40>)
 80015d2:	22a7      	movs	r2, #167	; 0xa7
 80015d4:	490d      	ldr	r1, [pc, #52]	; (800160c <_ZN4blib13ChargeControl11buckDisableEv+0x44>)
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <_ZN4blib13ChargeControl11buckDisableEv+0x48>)
 80015d8:	f000 f90e 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        setBuckEnable(false);
 80015dc:	2100      	movs	r1, #0
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffba 	bl	8001558 <_ZN4blib13ChargeControl13setBuckEnableEb>
        HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 80015e4:	2201      	movs	r2, #1
 80015e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ea:	480a      	ldr	r0, [pc, #40]	; (8001614 <_ZN4blib13ChargeControl11buckDisableEv+0x4c>)
 80015ec:	f004 fc40 	bl	8005e70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2101      	movs	r1, #1
 80015f4:	4808      	ldr	r0, [pc, #32]	; (8001618 <_ZN4blib13ChargeControl11buckDisableEv+0x50>)
 80015f6:	f004 fc3b 	bl	8005e70 <HAL_GPIO_WritePin>
        mPwm = 0;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	615a      	str	r2, [r3, #20]
    }
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	0800d6c8 	.word	0x0800d6c8
 800160c:	0800d6a4 	.word	0x0800d6a4
 8001610:	0800d6b8 	.word	0x0800d6b8
 8001614:	48000800 	.word	0x48000800
 8001618:	48000400 	.word	0x48000400

0800161c <_ZN4blib13ChargeControl10predictPwmEv>:
    uint32_t ChargeControl::predictPwm()
    {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
        auto &analog = Analog::getInstance();
 8001624:	f000 f8bc 	bl	80017a0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001628:	60b8      	str	r0, [r7, #8]

        uint32_t predictPwm = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]

        if (analog.mVin <= 0.0001f)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	edd3 7a08 	vldr	s15, [r3, #32]
 8001634:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800168c <_ZN4blib13ChargeControl10predictPwmEv+0x70>
 8001638:	eef4 7ac7 	vcmpe.f32	s15, s14
 800163c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001640:	d802      	bhi.n	8001648 <_ZN4blib13ChargeControl10predictPwmEv+0x2c>
        {
            predictPwm = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e014      	b.n	8001672 <_ZN4blib13ChargeControl10predictPwmEv+0x56>
        }
        else
        {
            // 99.5% * k_pwm_max * (Vout/Vin)
            predictPwm = (k_predict_pwm_margin * k_pwm_max * analog.mVout) / (100.0f * analog.mVin);
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800164e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001690 <_ZN4blib13ChargeControl10predictPwmEv+0x74>
 8001652:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	edd3 7a08 	vldr	s15, [r3, #32]
 800165c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001694 <_ZN4blib13ChargeControl10predictPwmEv+0x78>
 8001660:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166c:	ee17 3a90 	vmov	r3, s15
 8001670:	60fb      	str	r3, [r7, #12]
        }

        predictPwm = constrainValue(predictPwm, (uint32_t) 0, k_pwm_max_limited);
 8001672:	f240 5273 	movw	r2, #1395	; 0x573
 8001676:	2100      	movs	r1, #0
 8001678:	68f8      	ldr	r0, [r7, #12]
 800167a:	f000 f8e3 	bl	8001844 <_ZN4blib14constrainValueImEET_S1_S1_S1_>
 800167e:	60f8      	str	r0, [r7, #12]

        return predictPwm;
 8001680:	68fb      	ldr	r3, [r7, #12]
    }
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	38d1b717 	.word	0x38d1b717
 8001690:	480bba40 	.word	0x480bba40
 8001694:	42c80000 	.word	0x42c80000

08001698 <_ZN4blib13ChargeControl8pwmWriteEv>:

        HAL_TIM_PWM_Start(mHtim, TIM_CHANNEL_1);
    }

    void ChargeControl::pwmWrite()
    {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
        if (mOutputMode == OutputMode::PSU)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d10b      	bne.n	80016c0 <_ZN4blib13ChargeControl8pwmWriteEv+0x28>
        {
            mPwm = constrainValue(mPwm, (uint32_t) 0, k_pwm_max_limited);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	f240 5273 	movw	r2, #1395	; 0x573
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 f8c6 	bl	8001844 <_ZN4blib14constrainValueImEET_S1_S1_S1_>
 80016b8:	4602      	mov	r2, r0
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	615a      	str	r2, [r3, #20]
 80016be:	e00e      	b.n	80016de <_ZN4blib13ChargeControl8pwmWriteEv+0x46>
        }
        else
        {
            // Xung pwm khong duoc nho hon gia tri floor pwm
            uint32_t pPwm = predictPwm();
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ffab 	bl	800161c <_ZN4blib13ChargeControl10predictPwmEv>
 80016c6:	60f8      	str	r0, [r7, #12]
            mPwm = constrainValue(mPwm, pPwm, k_pwm_max_limited);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f240 5273 	movw	r2, #1395	; 0x573
 80016d0:	68f9      	ldr	r1, [r7, #12]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 f8b6 	bl	8001844 <_ZN4blib14constrainValueImEET_S1_S1_S1_>
 80016d8:	4602      	mov	r2, r0
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	615a      	str	r2, [r3, #20]
        }

        buckEnable();
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ff4a 	bl	8001578 <_ZN4blib13ChargeControl10buckEnableEv>

        uint32_t channel = TIM_CHANNEL_1;    // xxx: Set as Default
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]

        if (channel == TIM_CHANNEL_1)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d106      	bne.n	80016fc <_ZN4blib13ChargeControl8pwmWriteEv+0x64>
        {
            mHtim->Instance->CCR1 = mPwm;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6952      	ldr	r2, [r2, #20]
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
        }
        else if (channel == TIM_CHANNEL_4)
        {
            mHtim->Instance->CCR4 = mPwm;
        }
    }
 80016fa:	e01c      	b.n	8001736 <_ZN4blib13ChargeControl8pwmWriteEv+0x9e>
        else if (channel == TIM_CHANNEL_2)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d106      	bne.n	8001710 <_ZN4blib13ChargeControl8pwmWriteEv+0x78>
            mHtim->Instance->CCR2 = mPwm;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6952      	ldr	r2, [r2, #20]
 800170c:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800170e:	e012      	b.n	8001736 <_ZN4blib13ChargeControl8pwmWriteEv+0x9e>
        else if (channel == TIM_CHANNEL_3)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b08      	cmp	r3, #8
 8001714:	d106      	bne.n	8001724 <_ZN4blib13ChargeControl8pwmWriteEv+0x8c>
            mHtim->Instance->CCR3 = mPwm;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6952      	ldr	r2, [r2, #20]
 8001720:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8001722:	e008      	b.n	8001736 <_ZN4blib13ChargeControl8pwmWriteEv+0x9e>
        else if (channel == TIM_CHANNEL_4)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d105      	bne.n	8001736 <_ZN4blib13ChargeControl8pwmWriteEv+0x9e>
            mHtim->Instance->CCR4 = mPwm;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6952      	ldr	r2, [r2, #20]
 8001734:	641a      	str	r2, [r3, #64]	; 0x40
    }
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev>:
                Singleton()
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
                {
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <_ZN4blib2dp9SingletonINS_13ChargeControlEEC1Ev+0x1c>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	601a      	str	r2, [r3, #0]
                }
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	0800e13c 	.word	0x0800e13c

08001760 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>:
                virtual ~Singleton()
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
                }
 8001768:	4a04      	ldr	r2, [pc, #16]	; (800177c <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev+0x1c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	0800e13c 	.word	0x0800e13c

08001780 <_ZN4blib2dp9SingletonINS_13ChargeControlEED0Ev>:
                virtual ~Singleton()
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
                }
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe9 	bl	8001760 <_ZN4blib2dp9SingletonINS_13ChargeControlEED1Ev>
 800178e:	2104      	movs	r1, #4
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f008 feb3 	bl	800a4fc <_ZdlPvj>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>:
                static T& getInstance()
 80017a0:	b598      	push	{r3, r4, r7, lr}
 80017a2:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x20>
                        mInstance = new T();
 80017ac:	2048      	movs	r0, #72	; 0x48
 80017ae:	f008 fea7 	bl	800a500 <_Znwj>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461c      	mov	r4, r3
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff fa4e 	bl	8000c58 <_ZN4blib6AnalogC1Ev>
 80017bc:	4b02      	ldr	r3, [pc, #8]	; (80017c8 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80017be:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80017c0:	4b01      	ldr	r3, [pc, #4]	; (80017c8 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv+0x28>)
 80017c2:	681b      	ldr	r3, [r3, #0]
                }
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd98      	pop	{r3, r4, r7, pc}
 80017c8:	20000208 	.word	0x20000208

080017cc <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv>:
                static T& getInstance()
 80017cc:	b598      	push	{r3, r4, r7, lr}
 80017ce:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x28>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d109      	bne.n	80017ec <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x20>
                        mInstance = new T();
 80017d8:	201c      	movs	r0, #28
 80017da:	f008 fe91 	bl	800a500 <_Znwj>
 80017de:	4603      	mov	r3, r0
 80017e0:	461c      	mov	r4, r3
 80017e2:	4620      	mov	r0, r4
 80017e4:	f000 f848 	bl	8001878 <_ZN4blib16DeviceProtectionC1Ev>
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x28>)
 80017ea:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80017ec:	4b01      	ldr	r3, [pc, #4]	; (80017f4 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEE11getInstanceEv+0x28>)
 80017ee:	681b      	ldr	r3, [r3, #0]
                }
 80017f0:	4618      	mov	r0, r3
 80017f2:	bd98      	pop	{r3, r4, r7, pc}
 80017f4:	2000020c 	.word	0x2000020c

080017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af02      	add	r7, sp, #8
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 8001808:	f7ff fd28 	bl	800125c <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 800181e:	f009 fe79 	bl	800b514 <sniprintf>
                print(mBuffer);
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8001824:	f7ff fd1a 	bl	800125c <_ZN4blib6Logger5printEPKc>
                print("\n");
 8001828:	4805      	ldr	r0, [pc, #20]	; (8001840 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 800182a:	f7ff fd17 	bl	800125c <_ZN4blib6Logger5printEPKc>
            }
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0800d6d4 	.word	0x0800d6d4
 800183c:	200003f8 	.word	0x200003f8
 8001840:	0800d6dc 	.word	0x0800d6dc

08001844 <_ZN4blib14constrainValueImEET_S1_S1_S1_>:
    T constrainValue(T value, T minVal, T maxVal)
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
        if (value < minVal)
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	429a      	cmp	r2, r3
 8001856:	d201      	bcs.n	800185c <_ZN4blib14constrainValueImEET_S1_S1_S1_+0x18>
            return minVal;    // Nếu giá trị nhỏ hơn minVal, trả về minVal
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	e006      	b.n	800186a <_ZN4blib14constrainValueImEET_S1_S1_S1_+0x26>
        else if (value > maxVal)
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d901      	bls.n	8001868 <_ZN4blib14constrainValueImEET_S1_S1_S1_+0x24>
            return maxVal;    // Nếu giá trị lớn hơn maxVal, trả về maxVal
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	e000      	b.n	800186a <_ZN4blib14constrainValueImEET_S1_S1_S1_+0x26>
            return value;    // Nếu giá trị nằm trong khoảng, trả về giá trị ban đầu
 8001868:	68fb      	ldr	r3, [r7, #12]
    }
 800186a:	4618      	mov	r0, r3
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <_ZN4blib16DeviceProtectionC1Ev>:
#include "Analog.h"
#include "ChargeControl.h"

namespace blib
{
    DeviceProtection::DeviceProtection()
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f84e 	bl	8001924 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEEC1Ev>
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <_ZN4blib16DeviceProtectionC1Ev+0x64>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	741a      	strb	r2, [r3, #16]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	745a      	strb	r2, [r3, #17]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	749a      	strb	r2, [r3, #18]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	74da      	strb	r2, [r3, #19]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	751a      	strb	r2, [r3, #20]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	755a      	strb	r2, [r3, #21]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	759a      	strb	r2, [r3, #22]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	75da      	strb	r2, [r3, #23]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	761a      	strb	r2, [r3, #24]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	765a      	strb	r2, [r3, #25]
    {

    }
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	0800e14c 	.word	0x0800e14c

080018e0 <_ZN4blib16DeviceProtectionD1Ev>:
    DeviceProtection::~DeviceProtection()
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	4a05      	ldr	r2, [pc, #20]	; (8001900 <_ZN4blib16DeviceProtectionD1Ev+0x20>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f000 f827 	bl	8001944 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED1Ev>
    {

    }
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	0800e14c 	.word	0x0800e14c

08001904 <_ZN4blib16DeviceProtectionD0Ev>:
    DeviceProtection::~DeviceProtection()
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
    }
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ffe7 	bl	80018e0 <_ZN4blib16DeviceProtectionD1Ev>
 8001912:	211c      	movs	r1, #28
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f008 fdf1 	bl	800a4fc <_ZdlPvj>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEEC1Ev>:
                Singleton()
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
                {
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEEC1Ev+0x1c>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
                }
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	0800e15c 	.word	0x0800e15c

08001944 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED1Ev>:
                virtual ~Singleton()
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
                }
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED1Ev+0x1c>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	0800e15c 	.word	0x0800e15c

08001964 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED0Ev>:
                virtual ~Singleton()
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
                }
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffe9 	bl	8001944 <_ZN4blib2dp9SingletonINS_16DeviceProtectionEED1Ev>
 8001972:	2104      	movs	r1, #4
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f008 fdc1 	bl	800a4fc <_ZdlPvj>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>:
                static T& getInstance()
 8001984:	b598      	push	{r3, r4, r7, lr}
 8001986:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d109      	bne.n	80019a4 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001990:	2024      	movs	r0, #36	; 0x24
 8001992:	f008 fdb5 	bl	800a500 <_Znwj>
 8001996:	4603      	mov	r3, r0
 8001998:	461c      	mov	r4, r3
 800199a:	4620      	mov	r0, r4
 800199c:	f7ff fc76 	bl	800128c <_ZN4blib13ChargeControlC1Ev>
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 80019a2:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv+0x28>)
 80019a6:	681b      	ldr	r3, [r3, #0]
                }
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd98      	pop	{r3, r4, r7, pc}
 80019ac:	20000210 	.word	0x20000210

080019b0 <_ZN4blib11LcdSimulateC1Ev>:
    using Callback = void (LcdSimulate::*)();

    class LcdSimulate : public dp::Singleton<LcdSimulate>
    {
        public:
            LcdSimulate() : mLcd(Lcd::LcdType::LCD_TYPE_2004, &hi2c1, 0x27 << 1)
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 f8be 	bl	8003b3c <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev>
 80019c0:	4a21      	ldr	r2, [pc, #132]	; (8001a48 <_ZN4blib11LcdSimulateC1Ev+0x98>)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f103 000c 	add.w	r0, r3, #12
 80019cc:	234e      	movs	r3, #78	; 0x4e
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <_ZN4blib11LcdSimulateC1Ev+0x9c>)
 80019d0:	2101      	movs	r1, #1
 80019d2:	f008 fa9d 	bl	8009f10 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>
            {
                mLcd.clearDisplay();
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	330c      	adds	r3, #12
 80019da:	4618      	mov	r0, r3
 80019dc:	f008 fc74 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                mLcd.displayLine(0, 1, "DO AN TOT NGHIEP");
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f103 000c 	add.w	r0, r3, #12
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <_ZN4blib11LcdSimulateC1Ev+0xa0>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	2100      	movs	r1, #0
 80019ec:	f008 fb4a 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "NAM HOC: 2023-2024");
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f103 000c 	add.w	r0, r3, #12
 80019f6:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <_ZN4blib11LcdSimulateC1Ev+0xa4>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	2101      	movs	r1, #1
 80019fc:	f008 fb42 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "LOP: DTD61DH");
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f103 000c 	add.w	r0, r3, #12
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <_ZN4blib11LcdSimulateC1Ev+0xa8>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	2102      	movs	r1, #2
 8001a0c:	f008 fb3a 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 1, "DAI HOC HANG HAI VN");
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f103 000c 	add.w	r0, r3, #12
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_ZN4blib11LcdSimulateC1Ev+0xac>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	f008 fb32 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.clearDisplay();
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	330c      	adds	r3, #12
 8001a24:	4618      	mov	r0, r3
 8001a26:	f008 fc4f 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                HAL_Delay(2000);
 8001a2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001a2e:	f002 fc0d 	bl	800424c <HAL_Delay>
                mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <_ZN4blib11LcdSimulateC1Ev+0xb0>)
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
            }
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4618      	mov	r0, r3
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	0800e16c 	.word	0x0800e16c
 8001a4c:	200002bc 	.word	0x200002bc
 8001a50:	0800d6e0 	.word	0x0800d6e0
 8001a54:	0800d6f4 	.word	0x0800d6f4
 8001a58:	0800d708 	.word	0x0800d708
 8001a5c:	0800d718 	.word	0x0800d718
 8001a60:	08001afd 	.word	0x08001afd

08001a64 <_ZN4blib11LcdSimulateD1Ev>:
            virtual ~LcdSimulate()
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
            {
 8001a6c:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <_ZN4blib11LcdSimulateD1Ev+0x2c>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	330c      	adds	r3, #12
 8001a76:	4618      	mov	r0, r3
 8001a78:	f008 fa68 	bl	8009f4c <_ZN4blib3LcdD1Ev>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 f86c 	bl	8003b5c <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>

            }
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	0800e16c 	.word	0x0800e16c

08001a94 <_ZN4blib11LcdSimulateD0Ev>:
            virtual ~LcdSimulate()
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
            }
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe1 	bl	8001a64 <_ZN4blib11LcdSimulateD1Ev>
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f008 fd29 	bl	800a4fc <_ZdlPvj>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_ZN4blib11LcdSimulate3runEv>:
            void run()
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
            {
                (LcdSimulate::getInstance().*mCallback)();
 8001abc:	f002 f86e 	bl	8003b9c <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6892      	ldr	r2, [r2, #8]
 8001ac6:	1052      	asrs	r2, r2, #1
 8001ac8:	1899      	adds	r1, r3, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6892      	ldr	r2, [r2, #8]
 8001ace:	f002 0201 	and.w	r2, r2, #1
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d102      	bne.n	8001adc <_ZN4blib11LcdSimulate3runEv+0x28>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	e008      	b.n	8001aee <_ZN4blib11LcdSimulate3runEv+0x3a>
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6892      	ldr	r2, [r2, #8]
 8001ae0:	1052      	asrs	r2, r2, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6852      	ldr	r2, [r2, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4608      	mov	r0, r1
 8001af0:	4798      	blx	r3
            }
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv>:
            void impl_1_HomeScreen()
 8001afc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b00:	b0a2      	sub	sp, #136	; 0x88
 8001b02:	af06      	add	r7, sp, #24
 8001b04:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8001b06:	f002 f85f 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001b0a:	66f8      	str	r0, [r7, #108]	; 0x6c
                auto &analog = Analog::getInstance();
 8001b0c:	f7ff fe48 	bl	80017a0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 8001b10:	66b8      	str	r0, [r7, #104]	; 0x68

                char line0[21] = { 0 }, line1[21] = { 0 }, line2[21] = { 0 }, line3[21] = { 0 };
 8001b12:	2300      	movs	r3, #0
 8001b14:	653b      	str	r3, [r7, #80]	; 0x50
 8001b16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
 8001b24:	741a      	strb	r2, [r3, #16]
 8001b26:	2300      	movs	r3, #0
 8001b28:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
 8001b38:	741a      	strb	r2, [r3, #16]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	741a      	strb	r2, [r3, #16]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
 8001b60:	741a      	strb	r2, [r3, #16]

                snprintf(line0, 21, "I:%2.1fV %2.1fA %2.1fW", analog.mVin, analog.mIin,
 8001b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcf6 	bl	8000558 <__aeabi_f2d>
 8001b6c:	4604      	mov	r4, r0
 8001b6e:	460d      	mov	r5, r1
 8001b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fcef 	bl	8000558 <__aeabi_f2d>
 8001b7a:	4680      	mov	r8, r0
 8001b7c:	4689      	mov	r9, r1
                        analog.mPin);
 8001b7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                snprintf(line0, 21, "I:%2.1fV %2.1fA %2.1fW", analog.mVin, analog.mIin,
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fce8 	bl	8000558 <__aeabi_f2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8001b90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b94:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b98:	e9cd 4500 	strd	r4, r5, [sp]
 8001b9c:	4a5a      	ldr	r2, [pc, #360]	; (8001d08 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x20c>)
 8001b9e:	2115      	movs	r1, #21
 8001ba0:	f009 fcb8 	bl	800b514 <sniprintf>
                snprintf(line1, 21, "O:%2.1fV %2.1fA %2.1fW", analog.mVout, analog.mIout,
 8001ba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcd5 	bl	8000558 <__aeabi_f2d>
 8001bae:	4604      	mov	r4, r0
 8001bb0:	460d      	mov	r5, r1
 8001bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fcce 	bl	8000558 <__aeabi_f2d>
 8001bbc:	4680      	mov	r8, r0
 8001bbe:	4689      	mov	r9, r1
                        analog.mPout);
 8001bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                snprintf(line1, 21, "O:%2.1fV %2.1fA %2.1fW", analog.mVout, analog.mIout,
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcc7 	bl	8000558 <__aeabi_f2d>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001bd6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001bda:	e9cd 4500 	strd	r4, r5, [sp]
 8001bde:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x210>)
 8001be0:	2115      	movs	r1, #21
 8001be2:	f009 fc97 	bl	800b514 <sniprintf>
                if (analog.mInputSource == PowerSrc::USB_PORT)
 8001be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d107      	bne.n	8001bfe <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x102>
                {
                    snprintf(line2, 21, "Src: USB");
 8001bee:	f107 0320 	add.w	r3, r7, #32
 8001bf2:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x214>)
 8001bf4:	2115      	movs	r1, #21
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f009 fc8c 	bl	800b514 <sniprintf>
 8001bfc:	e01e      	b.n	8001c3c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x140>
                }
                else if (analog.mInputSource == PowerSrc::SOLAR)
 8001bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d107      	bne.n	8001c16 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x11a>
                {
                    snprintf(line2, 21, "Src: SOLAR");
 8001c06:	f107 0320 	add.w	r3, r7, #32
 8001c0a:	4a42      	ldr	r2, [pc, #264]	; (8001d14 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x218>)
 8001c0c:	2115      	movs	r1, #21
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f009 fc80 	bl	800b514 <sniprintf>
 8001c14:	e012      	b.n	8001c3c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x140>
                }
                else if (analog.mInputSource == PowerSrc::BATTERY)
 8001c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d10e      	bne.n	8001c3c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x140>
                {
                    snprintf(line2, 21, "Src: BAT [%.1f%%]", analog.mBatteryPercent);
 8001c1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fc98 	bl	8000558 <__aeabi_f2d>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	f107 0020 	add.w	r0, r7, #32
 8001c30:	e9cd 2300 	strd	r2, r3, [sp]
 8001c34:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x21c>)
 8001c36:	2115      	movs	r1, #21
 8001c38:	f009 fc6c 	bl	800b514 <sniprintf>
                }

                if (button.getLatestPressedButton() != Button::ButtonName::UNDEFINED)
 8001c3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c3e:	f008 f921 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf14      	ite	ne
 8001c48:	2301      	movne	r3, #1
 8001c4a:	2300      	moveq	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d004      	beq.n	8001c5c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x160>
                {
                    mLcd.clearDisplay();
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	330c      	adds	r3, #12
 8001c56:	4618      	mov	r0, r3
 8001c58:	f008 fb36 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                }
                mLcd.displayLine(0, 0, line0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f103 000c 	add.w	r0, r3, #12
 8001c62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	f008 fa0b 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, line1);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f103 000c 	add.w	r0, r3, #12
 8001c74:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	f008 fa02 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, line2);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f103 000c 	add.w	r0, r3, #12
 8001c86:	f107 0320 	add.w	r3, r7, #32
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	f008 f9f9 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 2, "Press any button");
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f103 000c 	add.w	r0, r3, #12
 8001c98:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x220>)
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	f008 f9f1 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                // Nhan nut bat ky thi se chuyen sang man hinh menu
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001ca2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ca4:	f008 f8ee 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ca8:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d011      	beq.n	8001cd2 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1d6>
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN
 8001cae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001cb0:	f008 f8e8 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d00b      	beq.n	8001cd2 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1d6>
                        || button.getLatestPressedButton() == Button::ButtonName::SEL
 8001cba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001cbc:	f008 f8e2 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d005      	beq.n	8001cd2 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1d6>
                        || button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001cc6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001cc8:	f008 f8dc 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b04      	cmp	r3, #4
 8001cd0:	d101      	bne.n	8001cd6 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1da>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x1dc>
 8001cd6:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00f      	beq.n	8001cfc <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x200>
                {
                    LOGI("Go to menu screen");
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x224>)
 8001cde:	225b      	movs	r2, #91	; 0x5b
 8001ce0:	4910      	ldr	r1, [pc, #64]	; (8001d24 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x228>)
 8001ce2:	4811      	ldr	r0, [pc, #68]	; (8001d28 <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x22c>)
 8001ce4:	f7ff fd88 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <_ZN4blib11LcdSimulate17impl_1_HomeScreenEv+0x230>)
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
                    button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001cf8:	f008 f8b6 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
                }
            }
 8001cfc:	bf00      	nop
 8001cfe:	3770      	adds	r7, #112	; 0x70
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d06:	bf00      	nop
 8001d08:	0800d72c 	.word	0x0800d72c
 8001d0c:	0800d744 	.word	0x0800d744
 8001d10:	0800d75c 	.word	0x0800d75c
 8001d14:	0800d768 	.word	0x0800d768
 8001d18:	0800d774 	.word	0x0800d774
 8001d1c:	0800d788 	.word	0x0800d788
 8001d20:	0800d79c 	.word	0x0800d79c
 8001d24:	0800d7b0 	.word	0x0800d7b0
 8001d28:	0800d7bc 	.word	0x0800d7bc
 8001d2c:	08001d31 	.word	0x08001d31

08001d30 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv>:

            void impl_2_MenuScreen()
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8001d38:	f001 ff46 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001d3c:	60f8      	str	r0, [r7, #12]

                static int arrowLine = 0;

                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f008 f8a0 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	bf0c      	ite	eq
 8001d4a:	2301      	moveq	r3, #1
 8001d4c:	2300      	movne	r3, #0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00d      	beq.n	8001d70 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x40>
                {
                    if (arrowLine == 0)
 8001d54:	4b60      	ldr	r3, [pc, #384]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d103      	bne.n	8001d64 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x34>
                    {
                        arrowLine = 2;
 8001d5c:	4b5e      	ldr	r3, [pc, #376]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001d5e:	2202      	movs	r2, #2
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e076      	b.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    else
                    {
                        arrowLine--;
 8001d64:	4b5c      	ldr	r3, [pc, #368]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	4a5b      	ldr	r2, [pc, #364]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e070      	b.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f008 f887 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00d      	beq.n	8001da2 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x72>
                {
                    if (arrowLine == 2)
 8001d86:	4b54      	ldr	r3, [pc, #336]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d103      	bne.n	8001d96 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x66>
                    {
                        arrowLine = 0;
 8001d8e:	4b52      	ldr	r3, [pc, #328]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e05d      	b.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    else
                    {
                        arrowLine++;
 8001d96:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e057      	b.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f008 f86e 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2300      	movne	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00f      	beq.n	8001dd8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xa8>
                {
                    LOGI("Go back to homescreen");
 8001db8:	4b48      	ldr	r3, [pc, #288]	; (8001edc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1ac>)
 8001dba:	2282      	movs	r2, #130	; 0x82
 8001dbc:	4948      	ldr	r1, [pc, #288]	; (8001ee0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b0>)
 8001dbe:	4849      	ldr	r0, [pc, #292]	; (8001ee4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b4>)
 8001dc0:	f7ff fd1a 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_1_HomeScreen;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a48      	ldr	r2, [pc, #288]	; (8001ee8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b8>)
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 8001dd0:	4b41      	ldr	r3, [pc, #260]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	e03c      	b.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                }
                // Nhan nut SEL ->  ve trang truoc (homescreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f008 f853 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b03      	cmp	r3, #3
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d031      	beq.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                {
                    // Chon DISPLAY MODE
                    if (arrowLine == 0)
 8001dee:	4b3a      	ldr	r3, [pc, #232]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10c      	bne.n	8001e10 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0xe0>
                    {
                        LOGI("Go to Display Menu");
 8001df6:	4b39      	ldr	r3, [pc, #228]	; (8001edc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1ac>)
 8001df8:	228c      	movs	r2, #140	; 0x8c
 8001dfa:	4939      	ldr	r1, [pc, #228]	; (8001ee0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b0>)
 8001dfc:	483b      	ldr	r0, [pc, #236]	; (8001eec <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1bc>)
 8001dfe:	f7ff fcfb 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_DisplayScroll;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c0>)
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e020      	b.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    // Chon SETTING MODE
                    else if (arrowLine == 1)
 8001e10:	4b31      	ldr	r3, [pc, #196]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10c      	bne.n	8001e32 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x102>
                    {
                        LOGI("Go to Setting Menu");
 8001e18:	4b30      	ldr	r3, [pc, #192]	; (8001edc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1ac>)
 8001e1a:	2292      	movs	r2, #146	; 0x92
 8001e1c:	4930      	ldr	r1, [pc, #192]	; (8001ee0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b0>)
 8001e1e:	4835      	ldr	r0, [pc, #212]	; (8001ef4 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c4>)
 8001e20:	f7ff fcea 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_SettingScroll;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a34      	ldr	r2, [pc, #208]	; (8001ef8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1c8>)
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	e00f      	b.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    }
                    // Chon ABOUT
                    else if (arrowLine == 2)
 8001e32:	4b29      	ldr	r3, [pc, #164]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d10b      	bne.n	8001e52 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x122>
                    {
                        LOGI("Go to About");
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1ac>)
 8001e3c:	2298      	movs	r2, #152	; 0x98
 8001e3e:	4928      	ldr	r1, [pc, #160]	; (8001ee0 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1b0>)
 8001e40:	482e      	ldr	r0, [pc, #184]	; (8001efc <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1cc>)
 8001e42:	f7ff fcd9 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_AboutScreen;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1d0>)
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
                else
                {

                }

                if (button.getLatestPressedButton() != Button::ButtonName::UNDEFINED)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f008 f816 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf14      	ite	ne
 8001e5e:	2301      	movne	r3, #1
 8001e60:	2300      	moveq	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d004      	beq.n	8001e72 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x142>
                {
                    mLcd.clearDisplay();
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	330c      	adds	r3, #12
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f008 fa2b 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                }
                mLcd.displayLine(0, 1, "1 DISPLAY MODE");
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f103 000c 	add.w	r0, r3, #12
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1d4>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	f008 f901 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 1, "2 SETTING MODE");
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f103 000c 	add.w	r0, r3, #12
 8001e88:	4b1f      	ldr	r3, [pc, #124]	; (8001f08 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1d8>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	f008 f8f9 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 1, "3 ABOUT");
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f103 000c 	add.w	r0, r3, #12
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1dc>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	f008 f8f1 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f103 000c 	add.w	r0, r3, #12
 8001ea8:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1e0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2103      	movs	r1, #3
 8001eae:	f008 f8e9 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f103 000c 	add.w	r0, r3, #12
 8001eb8:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1a8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	b2d9      	uxtb	r1, r3
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <_ZN4blib11LcdSimulate17impl_2_MenuScreenEv+0x1e4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f008 f8df 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f007 ffcd 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000214 	.word	0x20000214
 8001edc:	0800d7dc 	.word	0x0800d7dc
 8001ee0:	0800d7b0 	.word	0x0800d7b0
 8001ee4:	0800d7f0 	.word	0x0800d7f0
 8001ee8:	08001afd 	.word	0x08001afd
 8001eec:	0800d814 	.word	0x0800d814
 8001ef0:	08001fcd 	.word	0x08001fcd
 8001ef4:	0800d834 	.word	0x0800d834
 8001ef8:	08002391 	.word	0x08002391
 8001efc:	0800d854 	.word	0x0800d854
 8001f00:	08001f19 	.word	0x08001f19
 8001f04:	0800d870 	.word	0x0800d870
 8001f08:	0800d880 	.word	0x0800d880
 8001f0c:	0800d890 	.word	0x0800d890
 8001f10:	0800d898 	.word	0x0800d898
 8001f14:	0800d8b0 	.word	0x0800d8b0

08001f18 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv>:

            void impl_3_AboutScreen()
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8001f20:	f001 fe52 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001f24:	60f8      	str	r0, [r7, #12]

                if (button.getLatestPressedButton() != Button::ButtonName::UNDEFINED)
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f007 ffac 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bf14      	ite	ne
 8001f32:	2301      	movne	r3, #1
 8001f34:	2300      	moveq	r3, #0
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x2e>
                {
                    mLcd.clearDisplay();
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	330c      	adds	r3, #12
 8001f40:	4618      	mov	r0, r3
 8001f42:	f008 f9c1 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                }
                mLcd.displayLine(0, 0, "MPPT SOLAR CHARGER");
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f103 000c 	add.w	r0, r3, #12
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0xa0>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	f008 f897 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(1, 0, "FIRMWARE VER: 1.0.0");
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f103 000c 	add.w	r0, r3, #12
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0xa4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2101      	movs	r1, #1
 8001f62:	f008 f88f 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(2, 0, "CONTACT:09123123123");
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f103 000c 	add.w	r0, r3, #12
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0xa8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2102      	movs	r1, #2
 8001f72:	f008 f887 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(3, 15, "4BACK");
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f103 000c 	add.w	r0, r3, #12
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0xac>)
 8001f7e:	220f      	movs	r2, #15
 8001f80:	2103      	movs	r1, #3
 8001f82:	f008 f87f 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f007 ff7c 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf0c      	ite	eq
 8001f92:	2301      	moveq	r3, #1
 8001f94:	2300      	movne	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0x90>
                {
                    mCallback = &LcdSimulate::impl_2_MenuScreen;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <_ZN4blib11LcdSimulate18impl_3_AboutScreenEv+0xb0>)
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f007 ff5c 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	0800d8b4 	.word	0x0800d8b4
 8001fbc:	0800d8c8 	.word	0x0800d8c8
 8001fc0:	0800d8dc 	.word	0x0800d8dc
 8001fc4:	0800d8f0 	.word	0x0800d8f0
 8001fc8:	08001d31 	.word	0x08001d31

08001fcc <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv>:

            void impl_3_DisplayScroll()
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b0a0      	sub	sp, #128	; 0x80
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
            {
                const int COL = 21;
 8001fd4:	2315      	movs	r3, #21
 8001fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
                const int ROW = 5;
 8001fd8:	2305      	movs	r3, #5
 8001fda:	67bb      	str	r3, [r7, #120]	; 0x78

                char list[ROW][COL] = { "", "1 DISPLAY VIEW 1", "2 DISPLAY VIEW 2",
 8001fdc:	4a94      	ldr	r2, [pc, #592]	; (8002230 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x264>)
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	2269      	movs	r2, #105	; 0x69
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f009 fbdf 	bl	800b7aa <memcpy>
                        "3 DISPLAY VIEW 3", "4 DISPLAY VIEW 4" };

                static int arrowLine = 0;
                static int mIndexLine = 1;

                auto &button = Button::getInstance();
 8001fec:	f001 fdec 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8001ff0:	6778      	str	r0, [r7, #116]	; 0x74
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8001ff2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ff4:	f007 ff46 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	bf0c      	ite	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	2300      	movne	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b00      	cmp	r3, #0
 8002006:	d026      	beq.n	8002056 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x8a>
                {
                    if (mIndexLine == 1)
 8002008:	4b8a      	ldr	r3, [pc, #552]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x52>
                    {
                        mIndexLine = ROW - 1;
 8002010:	4b88      	ldr	r3, [pc, #544]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002012:	2204      	movs	r2, #4
 8002014:	601a      	str	r2, [r3, #0]
                        arrowLine = 2;
 8002016:	4b88      	ldr	r3, [pc, #544]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 8002018:	2202      	movs	r2, #2
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e004      	b.n	8002028 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x5c>
                    }
                    else
                    {
                        mIndexLine--;
 800201e:	4b85      	ldr	r3, [pc, #532]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3b01      	subs	r3, #1
 8002024:	4a83      	ldr	r2, [pc, #524]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002026:	6013      	str	r3, [r2, #0]
                    }

                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8002028:	4b82      	ldr	r3, [pc, #520]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d004      	beq.n	800203a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x6e>
 8002030:	4b80      	ldr	r3, [pc, #512]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b03      	cmp	r3, #3
 8002036:	f040 80b0 	bne.w	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    {
                        if (arrowLine == 0)
 800203a:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x7e>
                        {
                            arrowLine = 2;
 8002042:	4b7d      	ldr	r3, [pc, #500]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 8002044:	2202      	movs	r2, #2
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	e0a7      	b.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                        }
                        else
                        {
                            arrowLine--;
 800204a:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3b01      	subs	r3, #1
 8002050:	4a79      	ldr	r2, [pc, #484]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 8002052:	6013      	str	r3, [r2, #0]
 8002054:	e0a1      	b.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                        }
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002056:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002058:	f007 ff14 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800205c:	4603      	mov	r3, r0
 800205e:	2b02      	cmp	r3, #2
 8002060:	bf0c      	ite	eq
 8002062:	2301      	moveq	r3, #1
 8002064:	2300      	movne	r3, #0
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d025      	beq.n	80020b8 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xec>
                {
                    // Dong bo > voi index
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 800206c:	4b71      	ldr	r3, [pc, #452]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d003      	beq.n	800207c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xb0>
 8002074:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b03      	cmp	r3, #3
 800207a:	d10c      	bne.n	8002096 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xca>
                    {
                        if (arrowLine == 2)
 800207c:	4b6e      	ldr	r3, [pc, #440]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d103      	bne.n	800208c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xc0>
                        {
                            arrowLine = 0;
 8002084:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	e004      	b.n	8002096 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xca>
                        }
                        else
                        {
                            arrowLine++;
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3301      	adds	r3, #1
 8002092:	4a69      	ldr	r2, [pc, #420]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 8002094:	6013      	str	r3, [r2, #0]
                        }
                    }

                    if (mIndexLine == ROW - 1)
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b04      	cmp	r3, #4
 800209c:	d106      	bne.n	80020ac <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0xe0>
                    {
                        mIndexLine = 1;
 800209e:	4b65      	ldr	r3, [pc, #404]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
                        arrowLine = 0;
 80020a4:	4b64      	ldr	r3, [pc, #400]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e076      	b.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                    else
                    {
                        mIndexLine++;
 80020ac:	4b61      	ldr	r3, [pc, #388]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	3301      	adds	r3, #1
 80020b2:	4a60      	ldr	r2, [pc, #384]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e070      	b.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (menuscreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80020b8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80020ba:	f007 fee3 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d013      	beq.n	80020f6 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x12a>
                {
                    LOGI("Go back to Menu screen");
 80020ce:	4b5b      	ldr	r3, [pc, #364]	; (800223c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x270>)
 80020d0:	f240 1209 	movw	r2, #265	; 0x109
 80020d4:	495a      	ldr	r1, [pc, #360]	; (8002240 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x274>)
 80020d6:	485b      	ldr	r0, [pc, #364]	; (8002244 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x278>)
 80020d8:	f7ff fb8e 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x27c>)
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 80020e8:	4b53      	ldr	r3, [pc, #332]	; (8002238 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x26c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
                    mIndexLine = 1;
 80020ee:	4b51      	ldr	r3, [pc, #324]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e051      	b.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                }
                // Nhan nut SEL
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80020f6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80020f8:	f007 fec4 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b03      	cmp	r3, #3
 8002100:	bf0c      	ite	eq
 8002102:	2301      	moveq	r3, #1
 8002104:	2300      	movne	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d046      	beq.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                {
                    // Chon DISPLAY MODE
                    if (mIndexLine == 1)
 800210c:	4b49      	ldr	r3, [pc, #292]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d10d      	bne.n	8002130 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x164>
                    {
                        LOGI("Go to Display Config 1");
 8002114:	4b49      	ldr	r3, [pc, #292]	; (800223c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x270>)
 8002116:	f44f 728a 	mov.w	r2, #276	; 0x114
 800211a:	4949      	ldr	r1, [pc, #292]	; (8002240 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x274>)
 800211c:	484b      	ldr	r0, [pc, #300]	; (800224c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x280>)
 800211e:	f7ff fb6b 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4a      	ldr	r2, [pc, #296]	; (8002250 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x284>)
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e034      	b.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                    // Chon SETTING MODE
                    else if (mIndexLine == 2)
 8002130:	4b40      	ldr	r3, [pc, #256]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d10d      	bne.n	8002154 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x188>
                    {
                        LOGI("Go to Display Config 2");
 8002138:	4b40      	ldr	r3, [pc, #256]	; (800223c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x270>)
 800213a:	f44f 728d 	mov.w	r2, #282	; 0x11a
 800213e:	4940      	ldr	r1, [pc, #256]	; (8002240 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x274>)
 8002140:	4844      	ldr	r0, [pc, #272]	; (8002254 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x288>)
 8002142:	f7ff fb59 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a43      	ldr	r2, [pc, #268]	; (8002258 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x28c>)
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	e022      	b.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                    // Chon ABOUT
                    else if (mIndexLine == 3)
 8002154:	4b37      	ldr	r3, [pc, #220]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b03      	cmp	r3, #3
 800215a:	d10d      	bne.n	8002178 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ac>
                    {
                        LOGI("Go to Display Config 3");
 800215c:	4b37      	ldr	r3, [pc, #220]	; (800223c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x270>)
 800215e:	f44f 7290 	mov.w	r2, #288	; 0x120
 8002162:	4937      	ldr	r1, [pc, #220]	; (8002240 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x274>)
 8002164:	483d      	ldr	r0, [pc, #244]	; (800225c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x290>)
 8002166:	f7ff fb47 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig3;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a3c      	ldr	r2, [pc, #240]	; (8002260 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x294>)
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	e010      	b.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    }
                    else if (mIndexLine == 4)
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b04      	cmp	r3, #4
 800217e:	d10c      	bne.n	800219a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ce>
                    {
                        LOGI("Go to Display Config 4");
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x270>)
 8002182:	f240 1225 	movw	r2, #293	; 0x125
 8002186:	492e      	ldr	r1, [pc, #184]	; (8002240 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x274>)
 8002188:	4836      	ldr	r0, [pc, #216]	; (8002264 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x298>)
 800218a:	f7ff fb35 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_1_DisplayConfig4;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a35      	ldr	r2, [pc, #212]	; (8002268 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x29c>)
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
                else
                {

                }

                if (button.getLatestPressedButton() != Button::ButtonName::UNDEFINED)
 800219a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800219c:	f007 fe72 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bf14      	ite	ne
 80021a6:	2301      	movne	r3, #1
 80021a8:	2300      	moveq	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x1ee>
                {
                    mLcd.clearDisplay();
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330c      	adds	r3, #12
 80021b4:	4618      	mov	r0, r3
 80021b6:	f008 f887 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                }

                if (mIndexLine == 1)
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d154      	bne.n	800226c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x2a0>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f103 000c 	add.w	r0, r3, #12
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f107 0108 	add.w	r1, r7, #8
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00da      	lsls	r2, r3, #3
 80021d8:	1ad2      	subs	r2, r2, r3
 80021da:	188b      	adds	r3, r1, r2
 80021dc:	2201      	movs	r2, #1
 80021de:	2100      	movs	r1, #0
 80021e0:	f007 ff50 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f103 000c 	add.w	r0, r3, #12
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	1c5a      	adds	r2, r3, #1
 80021f0:	f107 0108 	add.w	r1, r7, #8
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	00da      	lsls	r2, r3, #3
 80021fc:	1ad2      	subs	r2, r2, r3
 80021fe:	188b      	adds	r3, r1, r2
 8002200:	2201      	movs	r2, #1
 8002202:	2101      	movs	r1, #1
 8002204:	f007 ff3e 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f103 000c 	add.w	r0, r3, #12
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x268>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	1c9a      	adds	r2, r3, #2
 8002214:	f107 0108 	add.w	r1, r7, #8
 8002218:	4613      	mov	r3, r2
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4413      	add	r3, r2
 800221e:	00da      	lsls	r2, r3, #3
 8002220:	1ad2      	subs	r2, r2, r3
 8002222:	188b      	adds	r3, r1, r2
 8002224:	2201      	movs	r2, #1
 8002226:	2102      	movs	r1, #2
 8002228:	f007 ff2c 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 800222c:	e08d      	b.n	800234a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x37e>
 800222e:	bf00      	nop
 8002230:	0800d9c4 	.word	0x0800d9c4
 8002234:	20000000 	.word	0x20000000
 8002238:	20000218 	.word	0x20000218
 800223c:	0800d8f8 	.word	0x0800d8f8
 8002240:	0800d7b0 	.word	0x0800d7b0
 8002244:	0800d910 	.word	0x0800d910
 8002248:	08001d31 	.word	0x08001d31
 800224c:	0800d934 	.word	0x0800d934
 8002250:	080029e9 	.word	0x080029e9
 8002254:	0800d958 	.word	0x0800d958
 8002258:	08002a49 	.word	0x08002a49
 800225c:	0800d97c 	.word	0x0800d97c
 8002260:	08002aa9 	.word	0x08002aa9
 8002264:	0800d9a0 	.word	0x0800d9a0
 8002268:	08002b09 	.word	0x08002b09
                }
                else if (mIndexLine == ROW - 1)
 800226c:	4b44      	ldr	r3, [pc, #272]	; (8002380 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3b4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d135      	bne.n	80022e0 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x314>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 000c 	add.w	r0, r3, #12
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3b4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1e9a      	subs	r2, r3, #2
 8002280:	f107 0108 	add.w	r1, r7, #8
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	00da      	lsls	r2, r3, #3
 800228c:	1ad2      	subs	r2, r2, r3
 800228e:	188b      	adds	r3, r1, r2
 8002290:	2201      	movs	r2, #1
 8002292:	2100      	movs	r1, #0
 8002294:	f007 fef6 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f103 000c 	add.w	r0, r3, #12
 800229e:	4b38      	ldr	r3, [pc, #224]	; (8002380 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3b4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1e5a      	subs	r2, r3, #1
 80022a4:	f107 0108 	add.w	r1, r7, #8
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00da      	lsls	r2, r3, #3
 80022b0:	1ad2      	subs	r2, r2, r3
 80022b2:	188b      	adds	r3, r1, r2
 80022b4:	2201      	movs	r2, #1
 80022b6:	2101      	movs	r1, #1
 80022b8:	f007 fee4 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f103 000c 	add.w	r0, r3, #12
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3b4>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	f107 0108 	add.w	r1, r7, #8
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	00da      	lsls	r2, r3, #3
 80022d2:	1ad2      	subs	r2, r2, r3
 80022d4:	188b      	adds	r3, r1, r2
 80022d6:	2201      	movs	r2, #1
 80022d8:	2102      	movs	r1, #2
 80022da:	f007 fed3 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 80022de:	e034      	b.n	800234a <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x37e>
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f103 000c 	add.w	r0, r3, #12
 80022e6:	4b26      	ldr	r3, [pc, #152]	; (8002380 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3b4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	1e5a      	subs	r2, r3, #1
 80022ec:	f107 0108 	add.w	r1, r7, #8
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	00da      	lsls	r2, r3, #3
 80022f8:	1ad2      	subs	r2, r2, r3
 80022fa:	188b      	adds	r3, r1, r2
 80022fc:	2201      	movs	r2, #1
 80022fe:	2100      	movs	r1, #0
 8002300:	f007 fec0 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f103 000c 	add.w	r0, r3, #12
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3b4>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	f107 0108 	add.w	r1, r7, #8
 8002312:	4613      	mov	r3, r2
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4413      	add	r3, r2
 8002318:	00da      	lsls	r2, r3, #3
 800231a:	1ad2      	subs	r2, r2, r3
 800231c:	188b      	adds	r3, r1, r2
 800231e:	2201      	movs	r2, #1
 8002320:	2101      	movs	r1, #1
 8002322:	f007 feaf 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f103 000c 	add.w	r0, r3, #12
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3b4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	f107 0108 	add.w	r1, r7, #8
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	00da      	lsls	r2, r3, #3
 800233e:	1ad2      	subs	r2, r2, r3
 8002340:	188b      	adds	r3, r1, r2
 8002342:	2201      	movs	r2, #1
 8002344:	2102      	movs	r1, #2
 8002346:	f007 fe9d 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f103 000c 	add.w	r0, r3, #12
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3b8>)
 8002352:	2200      	movs	r2, #0
 8002354:	2103      	movs	r1, #3
 8002356:	f007 fe95 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f103 000c 	add.w	r0, r3, #12
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3bc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b2d9      	uxtb	r1, r3
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <_ZN4blib11LcdSimulate20impl_3_DisplayScrollEv+0x3c0>)
 8002368:	2200      	movs	r2, #0
 800236a:	f007 fe8b 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800236e:	2100      	movs	r1, #0
 8002370:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002372:	f007 fd79 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002376:	bf00      	nop
 8002378:	3780      	adds	r7, #128	; 0x80
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000000 	.word	0x20000000
 8002384:	0800d898 	.word	0x0800d898
 8002388:	20000218 	.word	0x20000218
 800238c:	0800d8b0 	.word	0x0800d8b0

08002390 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv>:

            void impl_3_SettingScroll()
 8002390:	b580      	push	{r7, lr}
 8002392:	b0c4      	sub	sp, #272	; 0x110
 8002394:	af00      	add	r7, sp, #0
 8002396:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800239a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800239e:	6018      	str	r0, [r3, #0]
            {
                // Trong che do setting thi dung sac
                ChargeControl::getInstance().mChargePause = true;
 80023a0:	f7ff faf0 	bl	8001984 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2201      	movs	r2, #1
 80023a8:	721a      	strb	r2, [r3, #8]

                const int COL = 21;
 80023aa:	2315      	movs	r3, #21
 80023ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                const int ROW = 12;
 80023b0:	230c      	movs	r3, #12
 80023b2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

                char list[ROW][COL] = { "", "1 SUPPLY ALGORITHM", "2 MODE", "3 MAX BATTERY VOLT",
 80023b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80023be:	4aa3      	ldr	r2, [pc, #652]	; (800264c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2bc>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	4611      	mov	r1, r2
 80023c4:	23fc      	movs	r3, #252	; 0xfc
 80023c6:	461a      	mov	r2, r3
 80023c8:	f009 f9ef 	bl	800b7aa <memcpy>
                        "7 FAN TRIGGER TEMP", "8 SHUTDOWN TEMP", "9 AUTOLOAD", "10BACKLIGHT SLEEP",
                        "11FACTORY RESET" };
                static int arrowLine = 0;
                static int mIndexLine = 1;

                auto &button = Button::getInstance();
 80023cc:	f001 fbfc 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80023d0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
                // Nhan nut UP -> mui ten di len
                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 80023d4:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80023d8:	f007 fd54 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d026      	beq.n	800243a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xaa>
                    /*
                     Feature: Dong bo giua index va mui ten '>'
                     - Mui ten phu thuoc vao index.
                     - Moi lan, chi hien thi 3 tuy chon, nen index va mui ten phai dong bo voi nhau
                     */
                    if (mIndexLine == 1)
 80023ec:	4b98      	ldr	r3, [pc, #608]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d106      	bne.n	8002402 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x72>
                    {
                        mIndexLine = ROW - 1;
 80023f4:	4b96      	ldr	r3, [pc, #600]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80023f6:	220b      	movs	r2, #11
 80023f8:	601a      	str	r2, [r3, #0]
                        arrowLine = 2;
 80023fa:	4b96      	ldr	r3, [pc, #600]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 80023fc:	2202      	movs	r2, #2
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e004      	b.n	800240c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x7c>
                    }
                    else
                    {
                        mIndexLine--;
 8002402:	4b93      	ldr	r3, [pc, #588]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	4a91      	ldr	r2, [pc, #580]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800240a:	6013      	str	r3, [r2, #0]
                    }

                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 800240c:	4b90      	ldr	r3, [pc, #576]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d004      	beq.n	800241e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x8e>
 8002414:	4b8e      	ldr	r3, [pc, #568]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b0a      	cmp	r3, #10
 800241a:	f040 81be 	bne.w	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    {
                        if (arrowLine == 0)
 800241e:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x9e>
                        {
                            arrowLine = 2;
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002428:	2202      	movs	r2, #2
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e1b5      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                        }
                        else
                        {
                            arrowLine--;
 800242e:	4b89      	ldr	r3, [pc, #548]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	3b01      	subs	r3, #1
 8002434:	4a87      	ldr	r2, [pc, #540]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e1af      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                        }
                    }
                }
                // Nhan nut DOWN ->  mui ten di xuong
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 800243a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800243e:	f007 fd21 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002442:	4603      	mov	r3, r0
 8002444:	2b02      	cmp	r3, #2
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d025      	beq.n	800249e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x10e>
                {
                    if (mIndexLine == 1 || mIndexLine == ROW - 2)
 8002452:	4b7f      	ldr	r3, [pc, #508]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d003      	beq.n	8002462 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xd2>
 800245a:	4b7d      	ldr	r3, [pc, #500]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b0a      	cmp	r3, #10
 8002460:	d10c      	bne.n	800247c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xec>
                    {
                        if (arrowLine == 2)
 8002462:	4b7c      	ldr	r3, [pc, #496]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d103      	bne.n	8002472 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xe2>
                        {
                            arrowLine = 0;
 800246a:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e004      	b.n	800247c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0xec>
                        }
                        else
                        {
                            arrowLine++;
 8002472:	4b78      	ldr	r3, [pc, #480]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3301      	adds	r3, #1
 8002478:	4a76      	ldr	r2, [pc, #472]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 800247a:	6013      	str	r3, [r2, #0]
                        }
                    }

                    if (mIndexLine == ROW - 1)
 800247c:	4b74      	ldr	r3, [pc, #464]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b0b      	cmp	r3, #11
 8002482:	d106      	bne.n	8002492 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x102>
                    {
                        mIndexLine = 1;
 8002484:	4b72      	ldr	r3, [pc, #456]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002486:	2201      	movs	r2, #1
 8002488:	601a      	str	r2, [r3, #0]
                        arrowLine = 0;
 800248a:	4b72      	ldr	r3, [pc, #456]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e183      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else
                    {
                        mIndexLine++;
 8002492:	4b6f      	ldr	r3, [pc, #444]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	4a6d      	ldr	r2, [pc, #436]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e17d      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                }
                // Nhan nut BACK ->  ve trang truoc (menuscreen)
                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800249e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80024a2:	f007 fcef 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d020      	beq.n	80024f8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x168>
                {
                    LOGI("Go back to Menu screen");
 80024b6:	4b68      	ldr	r3, [pc, #416]	; (8002658 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 80024b8:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 80024bc:	4967      	ldr	r1, [pc, #412]	; (800265c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 80024be:	4868      	ldr	r0, [pc, #416]	; (8002660 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d0>)
 80024c0:	f7ff f99a 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_2_MenuScreen;    //
 80024c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a65      	ldr	r2, [pc, #404]	; (8002664 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d4>)
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80024d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
                    arrowLine = 0;
 80024e0:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
                    mIndexLine = 1;
 80024e6:	4b5a      	ldr	r3, [pc, #360]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

                    // Thoat che do setting thi tiep tuc sac
                    ChargeControl::getInstance().mChargePause = false;
 80024ec:	f7ff fa4a 	bl	8001984 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2200      	movs	r2, #0
 80024f4:	721a      	strb	r2, [r3, #8]
 80024f6:	e150      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                }
                // Nhan nut SEL
                else if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 80024f8:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 80024fc:	f007 fcc2 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002500:	4603      	mov	r3, r0
 8002502:	2b03      	cmp	r3, #3
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8144 	beq.w	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                {
                    // Chon DISPLAY MODE
                    if (mIndexLine == 1)
 8002512:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d115      	bne.n	8002546 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x1b6>
                    {
                        LOGI("Go to Supply Algorithm");
 800251a:	4b4f      	ldr	r3, [pc, #316]	; (8002658 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 800251c:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 8002520:	494e      	ldr	r1, [pc, #312]	; (800265c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 8002522:	4851      	ldr	r0, [pc, #324]	; (8002668 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2d8>)
 8002524:	f7ff f968 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_SupplyAlgorithm;
 8002528:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800252c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a4e      	ldr	r2, [pc, #312]	; (800266c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2dc>)
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800253a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
 8002544:	e129      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    // Chon SETTING MODE
                    else if (mIndexLine == 2)
 8002546:	4b42      	ldr	r3, [pc, #264]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d115      	bne.n	800257a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x1ea>
                    {
                        LOGI("Go to Charge mode");
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 8002550:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8002554:	4941      	ldr	r1, [pc, #260]	; (800265c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 8002556:	4846      	ldr	r0, [pc, #280]	; (8002670 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e0>)
 8002558:	f7ff f94e 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargeMode;
 800255c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002560:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a43      	ldr	r2, [pc, #268]	; (8002674 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e4>)
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800256e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	e10f      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    // Chon ABOUT
                    else if (mIndexLine == 3)
 800257a:	4b35      	ldr	r3, [pc, #212]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b03      	cmp	r3, #3
 8002580:	d115      	bne.n	80025ae <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x21e>
                    {
                        LOGI("Go to Max battery voltage");
 8002582:	4b35      	ldr	r3, [pc, #212]	; (8002658 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 8002584:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8002588:	4934      	ldr	r1, [pc, #208]	; (800265c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 800258a:	483b      	ldr	r0, [pc, #236]	; (8002678 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2e8>)
 800258c:	f7ff f934 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MaxBatteryVolt;
 8002590:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002594:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a38      	ldr	r2, [pc, #224]	; (800267c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2ec>)
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	e0f5      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 4)
 80025ae:	4b28      	ldr	r3, [pc, #160]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d115      	bne.n	80025e2 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x252>
                    {
                        LOGI("Go to Min battery voltage");
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 80025b8:	f240 12b9 	movw	r2, #441	; 0x1b9
 80025bc:	4927      	ldr	r1, [pc, #156]	; (800265c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 80025be:	4830      	ldr	r0, [pc, #192]	; (8002680 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f0>)
 80025c0:	f7ff f91a 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_MinBatteryVolt;
 80025c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f4>)
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e0db      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 5)
 80025e2:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d115      	bne.n	8002616 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x286>
                    {
                        LOGI("Go to Charging current");
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 80025ec:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80025f0:	491a      	ldr	r1, [pc, #104]	; (800265c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 80025f2:	4825      	ldr	r0, [pc, #148]	; (8002688 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2f8>)
 80025f4:	f7ff f900 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ChargingCurrent;
 80025f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025fc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2fc>)
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800260a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	e0c1      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 6)
 8002616:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b06      	cmp	r3, #6
 800261c:	d13c      	bne.n	8002698 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x308>
                    {
                        LOGI("Go to Cooling fan");
 800261e:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2c8>)
 8002620:	f240 12c3 	movw	r2, #451	; 0x1c3
 8002624:	490d      	ldr	r1, [pc, #52]	; (800265c <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x2cc>)
 8002626:	481a      	ldr	r0, [pc, #104]	; (8002690 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x300>)
 8002628:	f7ff f8e6 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_CoolingFan;
 800262c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x304>)
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800263e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	e0a7      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
 800264a:	bf00      	nop
 800264c:	0800dbd0 	.word	0x0800dbd0
 8002650:	20000004 	.word	0x20000004
 8002654:	2000021c 	.word	0x2000021c
 8002658:	0800da30 	.word	0x0800da30
 800265c:	0800d7b0 	.word	0x0800d7b0
 8002660:	0800d910 	.word	0x0800d910
 8002664:	08001d31 	.word	0x08001d31
 8002668:	0800da48 	.word	0x0800da48
 800266c:	08002b69 	.word	0x08002b69
 8002670:	0800da6c 	.word	0x0800da6c
 8002674:	08002d01 	.word	0x08002d01
 8002678:	0800da8c 	.word	0x0800da8c
 800267c:	08002edd 	.word	0x08002edd
 8002680:	0800dab4 	.word	0x0800dab4
 8002684:	08002f3d 	.word	0x08002f3d
 8002688:	0800dadc 	.word	0x0800dadc
 800268c:	08002f9d 	.word	0x08002f9d
 8002690:	0800db00 	.word	0x0800db00
 8002694:	08002ffd 	.word	0x08002ffd
                    }
                    else if (mIndexLine == 7)
 8002698:	4bc3      	ldr	r3, [pc, #780]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b07      	cmp	r3, #7
 800269e:	d115      	bne.n	80026cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x33c>
                    {
                        LOGI("Go to Fan trigger temp");
 80026a0:	4bc2      	ldr	r3, [pc, #776]	; (80029ac <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x61c>)
 80026a2:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 80026a6:	49c2      	ldr	r1, [pc, #776]	; (80029b0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x620>)
 80026a8:	48c2      	ldr	r0, [pc, #776]	; (80029b4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x624>)
 80026aa:	f7ff f8a5 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FanTriggerTemp;
 80026ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4abf      	ldr	r2, [pc, #764]	; (80029b8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x628>)
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	e066      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 8)
 80026cc:	4bb6      	ldr	r3, [pc, #728]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d115      	bne.n	8002700 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x370>
                    {
                        LOGI("Go to Shutdown temp");
 80026d4:	4bb5      	ldr	r3, [pc, #724]	; (80029ac <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x61c>)
 80026d6:	f240 12cd 	movw	r2, #461	; 0x1cd
 80026da:	49b5      	ldr	r1, [pc, #724]	; (80029b0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x620>)
 80026dc:	48b7      	ldr	r0, [pc, #732]	; (80029bc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x62c>)
 80026de:	f7ff f88b 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_ShutdownTemp;
 80026e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4ab4      	ldr	r2, [pc, #720]	; (80029c0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x630>)
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	e04c      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 9)
 8002700:	4ba9      	ldr	r3, [pc, #676]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b09      	cmp	r3, #9
 8002706:	d115      	bne.n	8002734 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x3a4>
                    {
                        LOGI("Go to Autoload config");
 8002708:	4ba8      	ldr	r3, [pc, #672]	; (80029ac <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x61c>)
 800270a:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
 800270e:	49a8      	ldr	r1, [pc, #672]	; (80029b0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x620>)
 8002710:	48ac      	ldr	r0, [pc, #688]	; (80029c4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x634>)
 8002712:	f7ff f871 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_AutoloadCfg;
 8002716:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800271a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4aa9      	ldr	r2, [pc, #676]	; (80029c8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x638>)
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002728:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	e032      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 10)
 8002734:	4b9c      	ldr	r3, [pc, #624]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b0a      	cmp	r3, #10
 800273a:	d115      	bne.n	8002768 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x3d8>
                    {
                        LOGI("Go to Backlight");
 800273c:	4b9b      	ldr	r3, [pc, #620]	; (80029ac <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x61c>)
 800273e:	f240 12d7 	movw	r2, #471	; 0x1d7
 8002742:	499b      	ldr	r1, [pc, #620]	; (80029b0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x620>)
 8002744:	48a1      	ldr	r0, [pc, #644]	; (80029cc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x63c>)
 8002746:	f7ff f857 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_Backlight;
 800274a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800274e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a9e      	ldr	r2, [pc, #632]	; (80029d0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x640>)
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800275c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	e018      	b.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    }
                    else if (mIndexLine == 11)
 8002768:	4b8f      	ldr	r3, [pc, #572]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b0b      	cmp	r3, #11
 800276e:	d114      	bne.n	800279a <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x40a>
                    {
                        LOGI("Go to Factory reset");
 8002770:	4b8e      	ldr	r3, [pc, #568]	; (80029ac <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x61c>)
 8002772:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002776:	498e      	ldr	r1, [pc, #568]	; (80029b0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x620>)
 8002778:	4896      	ldr	r0, [pc, #600]	; (80029d4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x644>)
 800277a:	f7ff f83d 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                        mCallback = &LcdSimulate::impl_3_2_FactoryReset;
 800277e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002782:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a93      	ldr	r2, [pc, #588]	; (80029d8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x648>)
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002790:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
                else
                {

                }

                if (button.getLatestPressedButton() != Button::ButtonName::UNDEFINED)
 800279a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 800279e:	f007 fb71 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf14      	ite	ne
 80027a8:	2301      	movne	r3, #1
 80027aa:	2300      	moveq	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x434>
                {
                    mLcd.clearDisplay();
 80027b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	4618      	mov	r0, r3
 80027c0:	f007 fd82 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                }
                if (mIndexLine == 1)
 80027c4:	4b78      	ldr	r3, [pc, #480]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d141      	bne.n	8002850 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x4c0>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine]);
 80027cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f103 000c 	add.w	r0, r3, #12
 80027da:	4b73      	ldr	r3, [pc, #460]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	f107 0108 	add.w	r1, r7, #8
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	00da      	lsls	r2, r3, #3
 80027ea:	1ad2      	subs	r2, r2, r3
 80027ec:	188b      	adds	r3, r1, r2
 80027ee:	2201      	movs	r2, #1
 80027f0:	2100      	movs	r1, #0
 80027f2:	f007 fc47 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine + 1]);
 80027f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f103 000c 	add.w	r0, r3, #12
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	f107 0108 	add.w	r1, r7, #8
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	00da      	lsls	r2, r3, #3
 8002816:	1ad2      	subs	r2, r2, r3
 8002818:	188b      	adds	r3, r1, r2
 800281a:	2201      	movs	r2, #1
 800281c:	2101      	movs	r1, #1
 800281e:	f007 fc31 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 2]);
 8002822:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002826:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f103 000c 	add.w	r0, r3, #12
 8002830:	4b5d      	ldr	r3, [pc, #372]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	1c9a      	adds	r2, r3, #2
 8002836:	f107 0108 	add.w	r1, r7, #8
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	00da      	lsls	r2, r3, #3
 8002842:	1ad2      	subs	r2, r2, r3
 8002844:	188b      	adds	r3, r1, r2
 8002846:	2201      	movs	r2, #1
 8002848:	2102      	movs	r1, #2
 800284a:	f007 fc1b 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 800284e:	e086      	b.n	800295e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5ce>
                }
                else if (mIndexLine == ROW - 1)
 8002850:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b0b      	cmp	r3, #11
 8002856:	d141      	bne.n	80028dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x54c>
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 2]);
 8002858:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800285c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f103 000c 	add.w	r0, r3, #12
 8002866:	4b50      	ldr	r3, [pc, #320]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	1e9a      	subs	r2, r3, #2
 800286c:	f107 0108 	add.w	r1, r7, #8
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	00da      	lsls	r2, r3, #3
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	188b      	adds	r3, r1, r2
 800287c:	2201      	movs	r2, #1
 800287e:	2100      	movs	r1, #0
 8002880:	f007 fc00 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine - 1]);
 8002884:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002888:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f103 000c 	add.w	r0, r3, #12
 8002892:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1e5a      	subs	r2, r3, #1
 8002898:	f107 0108 	add.w	r1, r7, #8
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	00da      	lsls	r2, r3, #3
 80028a4:	1ad2      	subs	r2, r2, r3
 80028a6:	188b      	adds	r3, r1, r2
 80028a8:	2201      	movs	r2, #1
 80028aa:	2101      	movs	r1, #1
 80028ac:	f007 fbea 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine]);
 80028b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f103 000c 	add.w	r0, r3, #12
 80028be:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	f107 0108 	add.w	r1, r7, #8
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	00da      	lsls	r2, r3, #3
 80028ce:	1ad2      	subs	r2, r2, r3
 80028d0:	188b      	adds	r3, r1, r2
 80028d2:	2201      	movs	r2, #1
 80028d4:	2102      	movs	r1, #2
 80028d6:	f007 fbd5 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 80028da:	e040      	b.n	800295e <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x5ce>
                }
                else
                {
                    mLcd.displayLine(0, 1, list[mIndexLine - 1]);
 80028dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f103 000c 	add.w	r0, r3, #12
 80028ea:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	1e5a      	subs	r2, r3, #1
 80028f0:	f107 0108 	add.w	r1, r7, #8
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	00da      	lsls	r2, r3, #3
 80028fc:	1ad2      	subs	r2, r2, r3
 80028fe:	188b      	adds	r3, r1, r2
 8002900:	2201      	movs	r2, #1
 8002902:	2100      	movs	r1, #0
 8002904:	f007 fbbe 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(1, 1, list[mIndexLine]);
 8002908:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800290c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f103 000c 	add.w	r0, r3, #12
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f107 0108 	add.w	r1, r7, #8
 800291e:	4613      	mov	r3, r2
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4413      	add	r3, r2
 8002924:	00da      	lsls	r2, r3, #3
 8002926:	1ad2      	subs	r2, r2, r3
 8002928:	188b      	adds	r3, r1, r2
 800292a:	2201      	movs	r2, #1
 800292c:	2101      	movs	r1, #1
 800292e:	f007 fba9 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    mLcd.displayLine(2, 1, list[mIndexLine + 1]);
 8002932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002936:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f103 000c 	add.w	r0, r3, #12
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x618>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	f107 0108 	add.w	r1, r7, #8
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	00da      	lsls	r2, r3, #3
 8002952:	1ad2      	subs	r2, r2, r3
 8002954:	188b      	adds	r3, r1, r2
 8002956:	2201      	movs	r2, #1
 8002958:	2102      	movs	r1, #2
 800295a:	f007 fb93 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
 800295e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002962:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f103 000c 	add.w	r0, r3, #12
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x64c>)
 800296e:	2200      	movs	r2, #0
 8002970:	2103      	movs	r1, #3
 8002972:	f007 fb87 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                mLcd.displayLine(arrowLine, 0, ">");
 8002976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800297a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f103 000c 	add.w	r0, r3, #12
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x650>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	b2d9      	uxtb	r1, r3
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <_ZN4blib11LcdSimulate20impl_3_SettingScrollEv+0x654>)
 800298c:	2200      	movs	r2, #0
 800298e:	f007 fb79 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002992:	2100      	movs	r1, #0
 8002994:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8002998:	f007 fa66 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 800299c:	bf00      	nop
 800299e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000004 	.word	0x20000004
 80029ac:	0800da30 	.word	0x0800da30
 80029b0:	0800d7b0 	.word	0x0800d7b0
 80029b4:	0800db20 	.word	0x0800db20
 80029b8:	0800305d 	.word	0x0800305d
 80029bc:	0800db44 	.word	0x0800db44
 80029c0:	080030bd 	.word	0x080030bd
 80029c4:	0800db68 	.word	0x0800db68
 80029c8:	0800311d 	.word	0x0800311d
 80029cc:	0800db8c 	.word	0x0800db8c
 80029d0:	0800317d 	.word	0x0800317d
 80029d4:	0800dbac 	.word	0x0800dbac
 80029d8:	080032e1 	.word	0x080032e1
 80029dc:	0800d898 	.word	0x0800d898
 80029e0:	2000021c 	.word	0x2000021c
 80029e4:	0800d8b0 	.word	0x0800d8b0

080029e8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev>:

            void impl_3_1_DisplayConfig1()
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
//                //mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                auto &button = Button::getInstance();
 80029f0:	f001 f8ea 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80029f4:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f007 fa44 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	bf0c      	ite	eq
 8002a02:	2301      	moveq	r3, #1
 8002a04:	2300      	movne	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x50>)
 8002a0e:	f44f 7208 	mov.w	r2, #544	; 0x220
 8002a12:	490a      	ldr	r1, [pc, #40]	; (8002a3c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x54>)
 8002a14:	480a      	ldr	r0, [pc, #40]	; (8002a40 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x58>)
 8002a16:	f7fe feef 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig1Ev+0x5c>)
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002a26:	2100      	movs	r1, #0
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f007 fa1d 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	0800dccc 	.word	0x0800dccc
 8002a3c:	0800d7b0 	.word	0x0800d7b0
 8002a40:	0800dce4 	.word	0x0800dce4
 8002a44:	08001fcd 	.word	0x08001fcd

08002a48 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev>:

            void impl_3_1_DisplayConfig2()
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
//                //mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 0, "1UP 2DOWN 3SEL 4BACK");
                auto &button = Button::getInstance();
 8002a50:	f001 f8ba 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002a54:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f007 fa14 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf0c      	ite	eq
 8002a62:	2301      	moveq	r3, #1
 8002a64:	2300      	movne	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00c      	beq.n	8002a86 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x50>)
 8002a6e:	f240 2235 	movw	r2, #565	; 0x235
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x54>)
 8002a74:	480a      	ldr	r0, [pc, #40]	; (8002aa0 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x58>)
 8002a76:	f7fe febf 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a09      	ldr	r2, [pc, #36]	; (8002aa4 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig2Ev+0x5c>)
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002a86:	2100      	movs	r1, #0
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f007 f9ed 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	0800dd0c 	.word	0x0800dd0c
 8002a9c:	0800d7b0 	.word	0x0800d7b0
 8002aa0:	0800dce4 	.word	0x0800dce4
 8002aa4:	08001fcd 	.word	0x08001fcd

08002aa8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev>:

            void impl_3_1_DisplayConfig3()
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002ab0:	f001 f88a 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002ab4:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f007 f9e4 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00c      	beq.n	8002ae6 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x50>)
 8002ace:	f44f 7210 	mov.w	r2, #576	; 0x240
 8002ad2:	490a      	ldr	r1, [pc, #40]	; (8002afc <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x54>)
 8002ad4:	480a      	ldr	r0, [pc, #40]	; (8002b00 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x58>)
 8002ad6:	f7fe fe8f 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig3Ev+0x5c>)
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f007 f9bd 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	0800dd24 	.word	0x0800dd24
 8002afc:	0800d7b0 	.word	0x0800d7b0
 8002b00:	0800dce4 	.word	0x0800dce4
 8002b04:	08001fcd 	.word	0x08001fcd

08002b08 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev>:

            void impl_3_1_DisplayConfig4()
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
//                //mLcd.clearDisplay();
//                mLcd.displayLine(0, 0, line0);
//                mLcd.displayLine(1, 0, line1);
//                mLcd.displayLine(2, 0, line2);
//                mLcd.displayLine(3, 15, "4BACK");
                auto &button = Button::getInstance();
 8002b10:	f001 f85a 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002b14:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f007 f9b4 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00c      	beq.n	8002b46 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x3e>
                {
                    LOGI("Go back to Display screen");
 8002b2c:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x50>)
 8002b2e:	f240 2256 	movw	r2, #598	; 0x256
 8002b32:	490a      	ldr	r1, [pc, #40]	; (8002b5c <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x54>)
 8002b34:	480a      	ldr	r0, [pc, #40]	; (8002b60 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x58>)
 8002b36:	f7fe fe5f 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_DisplayScroll;    //
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <_ZN4blib11LcdSimulate23impl_3_1_DisplayConfig4Ev+0x5c>)
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002b46:	2100      	movs	r1, #0
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f007 f98d 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002b4e:	bf00      	nop
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	0800dd3c 	.word	0x0800dd3c
 8002b5c:	0800d7b0 	.word	0x0800d7b0
 8002b60:	0800dce4 	.word	0x0800dce4
 8002b64:	08001fcd 	.word	0x08001fcd

08002b68 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv>:

            void impl_3_2_SupplyAlgorithm()
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002b70:	f001 f82a 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002b74:	60f8      	str	r0, [r7, #12]
                static int supplyAlgorithm = 0;    // MPPT+CC-CV va CC-CV Only

                if (button.getLatestPressedButton() != Button::ButtonName::UNDEFINED)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f007 f984 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x2e>
                {
                    mLcd.clearDisplay();
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	4618      	mov	r0, r3
 8002b92:	f007 fb99 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                }
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f103 000c 	add.w	r0, r3, #12
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x164>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f007 fa6f 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f007 f96c 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002bac:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d005      	beq.n	8002bbe <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x56>
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f007 f966 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d101      	bne.n	8002bc2 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x5a>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x5c>
 8002bc2:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d009      	beq.n	8002bdc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x74>
                {
                    supplyAlgorithm = !supplyAlgorithm;
 8002bc8:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x168>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x168>)
 8002bda:	601a      	str	r2, [r3, #0]
                }

                if (supplyAlgorithm == 0)
 8002bdc:	4b3c      	ldr	r3, [pc, #240]	; (8002cd0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x168>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x8e>
                {
                    mLcd.displayLine(1, 0, "MPPT+CC-CV");
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f103 000c 	add.w	r0, r3, #12
 8002bea:	4b3a      	ldr	r3, [pc, #232]	; (8002cd4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x16c>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	2101      	movs	r1, #1
 8002bf0:	f007 fa48 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002bf4:	e014      	b.n	8002c20 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xb8>
                }
                else if (supplyAlgorithm == 1)
 8002bf6:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x168>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d108      	bne.n	8002c10 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xa8>
                {
                    mLcd.displayLine(1, 0, "CC-CV Only");
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f103 000c 	add.w	r0, r3, #12
 8002c04:	4b34      	ldr	r3, [pc, #208]	; (8002cd8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x170>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	2101      	movs	r1, #1
 8002c0a:	f007 fa3b 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002c0e:	e007      	b.n	8002c20 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xb8>
                }
                else
                {
                    mLcd.displayLine(1, 0, "Error");
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 000c 	add.w	r0, r3, #12
 8002c16:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x174>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	f007 fa32 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f007 f92f 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d021      	beq.n	8002c7a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x112>
                {
                    if (supplyAlgorithm == 0)
 8002c36:	4b26      	ldr	r3, [pc, #152]	; (8002cd0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x168>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d108      	bne.n	8002c50 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0xe8>
                    {
                        mLcd.displayLine(2, 0, "> MPPT+CC-CV");
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f103 000c 	add.w	r0, r3, #12
 8002c44:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x178>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	2102      	movs	r1, #2
 8002c4a:	f007 fa1b 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002c4e:	e014      	b.n	8002c7a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x112>
                    }
                    else if (supplyAlgorithm == 1)
 8002c50:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x168>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d108      	bne.n	8002c6a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x102>
                    {
                        mLcd.displayLine(2, 0, "> CC-CV Only");
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f103 000c 	add.w	r0, r3, #12
 8002c5e:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x17c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	2102      	movs	r1, #2
 8002c64:	f007 fa0e 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002c68:	e007      	b.n	8002c7a <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x112>
                    }
                    else
                    {
                        mLcd.displayLine(2, 0, "Error alogrithm");
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f103 000c 	add.w	r0, r3, #12
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x180>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	2102      	movs	r1, #2
 8002c76:	f007 fa05 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f103 000c 	add.w	r0, r3, #12
 8002c80:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x184>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	2103      	movs	r1, #3
 8002c86:	f007 f9fd 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f007 f8fa 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00c      	beq.n	8002cba <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x152>
                {
                    LOGI("Go back to Setting screen");
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x188>)
 8002ca2:	f44f 7224 	mov.w	r2, #656	; 0x290
 8002ca6:	4913      	ldr	r1, [pc, #76]	; (8002cf4 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x18c>)
 8002ca8:	4813      	ldr	r0, [pc, #76]	; (8002cf8 <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x190>)
 8002caa:	f7fe fda5 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <_ZN4blib11LcdSimulate24impl_3_2_SupplyAlgorithmEv+0x194>)
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002cba:	2100      	movs	r1, #0
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f007 f8d3 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	0800dd54 	.word	0x0800dd54
 8002cd0:	20000220 	.word	0x20000220
 8002cd4:	0800dd68 	.word	0x0800dd68
 8002cd8:	0800dd74 	.word	0x0800dd74
 8002cdc:	0800dd80 	.word	0x0800dd80
 8002ce0:	0800dd88 	.word	0x0800dd88
 8002ce4:	0800dd98 	.word	0x0800dd98
 8002ce8:	0800dda8 	.word	0x0800dda8
 8002cec:	0800ddb8 	.word	0x0800ddb8
 8002cf0:	0800ddd0 	.word	0x0800ddd0
 8002cf4:	0800d7b0 	.word	0x0800d7b0
 8002cf8:	0800ddec 	.word	0x0800ddec
 8002cfc:	08002391 	.word	0x08002391

08002d00 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv>:

            void impl_3_2_ChargeMode()
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002d08:	f000 ff5e 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002d0c:	60f8      	str	r0, [r7, #12]
                static int chargeMode = 0;    // PSU

                if (button.getLatestPressedButton() != Button::ButtonName::UNDEFINED)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f007 f8b8 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	bf14      	ite	ne
 8002d1a:	2301      	movne	r3, #1
 8002d1c:	2300      	moveq	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d004      	beq.n	8002d2e <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x2e>
                {
                    mLcd.clearDisplay();
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	330c      	adds	r3, #12
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f007 facd 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                }
                mLcd.displayLine(0, 0, "SUPPLY ALGORITHM");
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f103 000c 	add.w	r0, r3, #12
 8002d34:	4b5e      	ldr	r3, [pc, #376]	; (8002eb0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b0>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	f007 f9a3 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::UP)
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f007 f8a0 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	bf0c      	ite	eq
 8002d4a:	2301      	moveq	r3, #1
 8002d4c:	2300      	movne	r3, #0
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00d      	beq.n	8002d70 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x70>
                {
                    if (chargeMode == 0)
 8002d54:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d103      	bne.n	8002d64 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x64>
                    {
                        chargeMode = 3;
 8002d5c:	4b55      	ldr	r3, [pc, #340]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002d5e:	2203      	movs	r2, #3
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	e01d      	b.n	8002da0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                    }
                    else
                    {
                        chargeMode--;
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	4a52      	ldr	r2, [pc, #328]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	e017      	b.n	8002da0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                    }
                }
                else if (button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f007 f887 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00c      	beq.n	8002da0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                {
                    if (chargeMode == 2)
 8002d86:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d103      	bne.n	8002d96 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x96>
                    {
                        chargeMode = 0;
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e004      	b.n	8002da0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xa0>
                    }
                    else
                    {
                        chargeMode++;
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a45      	ldr	r2, [pc, #276]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002d9e:	6013      	str	r3, [r2, #0]
                    }
                }

                if (chargeMode == 0)
 8002da0:	4b44      	ldr	r3, [pc, #272]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d108      	bne.n	8002dba <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xba>
                {
                    mLcd.displayLine(1, 0, "PSU");
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f103 000c 	add.w	r0, r3, #12
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b8>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	2101      	movs	r1, #1
 8002db4:	f007 f966 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002db8:	e018      	b.n	8002dec <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xec>
                }
                else if (chargeMode == 1)
 8002dba:	4b3e      	ldr	r3, [pc, #248]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d108      	bne.n	8002dd4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xd4>
                {
                    mLcd.displayLine(1, 0, "Charger");
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f103 000c 	add.w	r0, r3, #12
 8002dc8:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1bc>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2101      	movs	r1, #1
 8002dce:	f007 f959 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002dd2:	e00b      	b.n	8002dec <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xec>
                }
                else if (chargeMode == 2)
 8002dd4:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d107      	bne.n	8002dec <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0xec>
                {
                    mLcd.displayLine(1, 0, "Inverter");
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f103 000c 	add.w	r0, r3, #12
 8002de2:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1c0>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	2101      	movs	r1, #1
 8002de8:	f007 f94c 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f007 f849 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	bf0c      	ite	eq
 8002df8:	2301      	moveq	r3, #1
 8002dfa:	2300      	movne	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d02e      	beq.n	8002e60 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x160>
                {
                    if (chargeMode == 0)
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x11c>
                    {
                        mLcd.displayLine(2, 0, "PSU");
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f103 000c 	add.w	r0, r3, #12
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b8>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	2102      	movs	r1, #2
 8002e16:	f007 f935 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002e1a:	e021      	b.n	8002e60 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x160>
                    }
                    else if (chargeMode == 1)
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d108      	bne.n	8002e36 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x136>
                    {
                        mLcd.displayLine(2, 0, "Charger");
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f103 000c 	add.w	r0, r3, #12
 8002e2a:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1bc>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2102      	movs	r1, #2
 8002e30:	f007 f928 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002e34:	e014      	b.n	8002e60 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x160>
                    }
                    else if (chargeMode == 2)
 8002e36:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1b4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d108      	bne.n	8002e50 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x150>
                    {
                        mLcd.displayLine(2, 0, "Inverter");
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f103 000c 	add.w	r0, r3, #12
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1c0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	2102      	movs	r1, #2
 8002e4a:	f007 f91b 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8002e4e:	e007      	b.n	8002e60 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x160>
                    }
                    else
                    {
                        mLcd.displayLine(2, 0, "Error mode");
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f103 000c 	add.w	r0, r3, #12
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1c4>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	f007 f912 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    }

                    // TODO: phai set va luu lai vao flash
                }

                mLcd.displayLine(3, 0, "1-2CHANGE 3SEL 4BACK");
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f103 000c 	add.w	r0, r3, #12
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1c8>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2103      	movs	r1, #3
 8002e6c:	f007 f90a 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f007 f807 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00c      	beq.n	8002ea0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1a0>
                {
                    LOGI("Go back to Setting screen");
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1cc>)
 8002e88:	f240 22df 	movw	r2, #735	; 0x2df
 8002e8c:	4910      	ldr	r1, [pc, #64]	; (8002ed0 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1d0>)
 8002e8e:	4811      	ldr	r0, [pc, #68]	; (8002ed4 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1d4>)
 8002e90:	f7fe fcb2 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <_ZN4blib11LcdSimulate19impl_3_2_ChargeModeEv+0x1d8>)
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f006 ffe0 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	0800dd54 	.word	0x0800dd54
 8002eb4:	20000224 	.word	0x20000224
 8002eb8:	0800de14 	.word	0x0800de14
 8002ebc:	0800de18 	.word	0x0800de18
 8002ec0:	0800de20 	.word	0x0800de20
 8002ec4:	0800de2c 	.word	0x0800de2c
 8002ec8:	0800ddb8 	.word	0x0800ddb8
 8002ecc:	0800de38 	.word	0x0800de38
 8002ed0:	0800d7b0 	.word	0x0800d7b0
 8002ed4:	0800ddec 	.word	0x0800ddec
 8002ed8:	08002391 	.word	0x08002391

08002edc <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv>:

            void impl_3_2_MaxBatteryVolt()
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002ee4:	f000 fe70 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002ee8:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f006 ffca 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf0c      	ite	eq
 8002ef6:	2301      	moveq	r3, #1
 8002ef8:	2300      	movne	r3, #0
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00c      	beq.n	8002f1a <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002f00:	4b0a      	ldr	r3, [pc, #40]	; (8002f2c <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x50>)
 8002f02:	f240 22ea 	movw	r2, #746	; 0x2ea
 8002f06:	490a      	ldr	r1, [pc, #40]	; (8002f30 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x54>)
 8002f08:	480a      	ldr	r0, [pc, #40]	; (8002f34 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x58>)
 8002f0a:	f7fe fc75 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <_ZN4blib11LcdSimulate23impl_3_2_MaxBatteryVoltEv+0x5c>)
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f006 ffa3 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	0800de4c 	.word	0x0800de4c
 8002f30:	0800d7b0 	.word	0x0800d7b0
 8002f34:	0800ddec 	.word	0x0800ddec
 8002f38:	08002391 	.word	0x08002391

08002f3c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv>:

            void impl_3_2_MinBatteryVolt()
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002f44:	f000 fe40 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002f48:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f006 ff9a 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	bf0c      	ite	eq
 8002f56:	2301      	moveq	r3, #1
 8002f58:	2300      	movne	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00c      	beq.n	8002f7a <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x50>)
 8002f62:	f240 22f5 	movw	r2, #757	; 0x2f5
 8002f66:	490a      	ldr	r1, [pc, #40]	; (8002f90 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x54>)
 8002f68:	480a      	ldr	r0, [pc, #40]	; (8002f94 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x58>)
 8002f6a:	f7fe fc45 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <_ZN4blib11LcdSimulate23impl_3_2_MinBatteryVoltEv+0x5c>)
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f006 ff73 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002f82:	bf00      	nop
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	0800de64 	.word	0x0800de64
 8002f90:	0800d7b0 	.word	0x0800d7b0
 8002f94:	0800ddec 	.word	0x0800ddec
 8002f98:	08002391 	.word	0x08002391

08002f9c <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv>:

            void impl_3_2_ChargingCurrent()
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8002fa4:	f000 fe10 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8002fa8:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f006 ff6a 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00c      	beq.n	8002fda <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x50>)
 8002fc2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002fc6:	490a      	ldr	r1, [pc, #40]	; (8002ff0 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x54>)
 8002fc8:	480a      	ldr	r0, [pc, #40]	; (8002ff4 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x58>)
 8002fca:	f7fe fc15 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <_ZN4blib11LcdSimulate24impl_3_2_ChargingCurrentEv+0x5c>)
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f006 ff43 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	0800de7c 	.word	0x0800de7c
 8002ff0:	0800d7b0 	.word	0x0800d7b0
 8002ff4:	0800ddec 	.word	0x0800ddec
 8002ff8:	08002391 	.word	0x08002391

08002ffc <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv>:

            void impl_3_2_CoolingFan()
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003004:	f000 fde0 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003008:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f006 ff3a 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003010:	4603      	mov	r3, r0
 8003012:	2b04      	cmp	r3, #4
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x50>)
 8003022:	f240 320b 	movw	r2, #779	; 0x30b
 8003026:	490a      	ldr	r1, [pc, #40]	; (8003050 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x54>)
 8003028:	480a      	ldr	r0, [pc, #40]	; (8003054 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x58>)
 800302a:	f7fe fbe5 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a09      	ldr	r2, [pc, #36]	; (8003058 <_ZN4blib11LcdSimulate19impl_3_2_CoolingFanEv+0x5c>)
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800303a:	2100      	movs	r1, #0
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f006 ff13 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	0800de98 	.word	0x0800de98
 8003050:	0800d7b0 	.word	0x0800d7b0
 8003054:	0800ddec 	.word	0x0800ddec
 8003058:	08002391 	.word	0x08002391

0800305c <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv>:

            void impl_3_2_FanTriggerTemp()
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003064:	f000 fdb0 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003068:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f006 ff0a 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003070:	4603      	mov	r3, r0
 8003072:	2b04      	cmp	r3, #4
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00c      	beq.n	800309a <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x50>)
 8003082:	f240 3216 	movw	r2, #790	; 0x316
 8003086:	490a      	ldr	r1, [pc, #40]	; (80030b0 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x54>)
 8003088:	480a      	ldr	r0, [pc, #40]	; (80030b4 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x58>)
 800308a:	f7fe fbb5 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <_ZN4blib11LcdSimulate23impl_3_2_FanTriggerTempEv+0x5c>)
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800309a:	2100      	movs	r1, #0
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f006 fee3 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	0800deac 	.word	0x0800deac
 80030b0:	0800d7b0 	.word	0x0800d7b0
 80030b4:	0800ddec 	.word	0x0800ddec
 80030b8:	08002391 	.word	0x08002391

080030bc <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv>:

            void impl_3_2_ShutdownTemp()
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80030c4:	f000 fd80 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80030c8:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f006 feda 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00c      	beq.n	80030fa <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 80030e0:	4b0a      	ldr	r3, [pc, #40]	; (800310c <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x50>)
 80030e2:	f240 3221 	movw	r2, #801	; 0x321
 80030e6:	490a      	ldr	r1, [pc, #40]	; (8003110 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x54>)
 80030e8:	480a      	ldr	r0, [pc, #40]	; (8003114 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x58>)
 80030ea:	f7fe fb85 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a09      	ldr	r2, [pc, #36]	; (8003118 <_ZN4blib11LcdSimulate21impl_3_2_ShutdownTempEv+0x5c>)
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80030fa:	2100      	movs	r1, #0
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f006 feb3 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	0800dec4 	.word	0x0800dec4
 8003110:	0800d7b0 	.word	0x0800d7b0
 8003114:	0800ddec 	.word	0x0800ddec
 8003118:	08002391 	.word	0x08002391

0800311c <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv>:

            void impl_3_2_AutoloadCfg()
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003124:	f000 fd50 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003128:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f006 feaa 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003130:	4603      	mov	r3, r0
 8003132:	2b04      	cmp	r3, #4
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x50>)
 8003142:	f44f 724b 	mov.w	r2, #812	; 0x32c
 8003146:	490a      	ldr	r1, [pc, #40]	; (8003170 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x54>)
 8003148:	480a      	ldr	r0, [pc, #40]	; (8003174 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x58>)
 800314a:	f7fe fb55 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <_ZN4blib11LcdSimulate20impl_3_2_AutoloadCfgEv+0x5c>)
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800315a:	2100      	movs	r1, #0
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f006 fe83 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	0800dedc 	.word	0x0800dedc
 8003170:	0800d7b0 	.word	0x0800d7b0
 8003174:	0800ddec 	.word	0x0800ddec
 8003178:	08002391 	.word	0x08002391

0800317c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv>:

            void impl_3_2_Backlight()
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 8003184:	f000 fd20 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003188:	60f8      	str	r0, [r7, #12]

                static bool isBacklight = true;

                if (button.getLatestPressedButton() == Button::ButtonName::UP
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f006 fe7a 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8003190:	4603      	mov	r3, r0
                        || button.getLatestPressedButton() == Button::ButtonName::DOWN)
 8003192:	2b01      	cmp	r3, #1
 8003194:	d005      	beq.n	80031a2 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x26>
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f006 fe74 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800319c:	4603      	mov	r3, r0
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d101      	bne.n	80031a6 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x2a>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x2c>
 80031a6:	2300      	movs	r3, #0
                if (button.getLatestPressedButton() == Button::ButtonName::UP
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x40>
                {
                    isBacklight = !isBacklight;
 80031ac:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x138>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	4b3f      	ldr	r3, [pc, #252]	; (80032b4 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x138>)
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e017      	b.n	80031ec <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x70>
                }

                else if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f006 fe61 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x70>
                {
                    LOGI("Go back to Setting screen");
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x13c>)
 80031d4:	f44f 7250 	mov.w	r2, #832	; 0x340
 80031d8:	4938      	ldr	r1, [pc, #224]	; (80032bc <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x140>)
 80031da:	4839      	ldr	r0, [pc, #228]	; (80032c0 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x144>)
 80031dc:	f7fe fb0c 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x148>)
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
                }

                if (button.getLatestPressedButton() != Button::ButtonName::UNDEFINED)
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f006 fe49 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d004      	beq.n	800320c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x90>
                {
                    mLcd.clearDisplay();
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	330c      	adds	r3, #12
 8003206:	4618      	mov	r0, r3
 8003208:	f007 f85e 	bl	800a2c8 <_ZN4blib3Lcd12clearDisplayEv>
                }

                mLcd.displayLine(0, 0, "LCD BACKLIGHT");
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f103 000c 	add.w	r0, r3, #12
 8003212:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x14c>)
 8003214:	2200      	movs	r2, #0
 8003216:	2100      	movs	r1, #0
 8003218:	f006 ff34 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                if (isBacklight)
 800321c:	4b25      	ldr	r3, [pc, #148]	; (80032b4 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x138>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xba>
                {
                    mLcd.displayLine(1, 0, "YES");
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f103 000c 	add.w	r0, r3, #12
 800322a:	4b28      	ldr	r3, [pc, #160]	; (80032cc <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x150>)
 800322c:	2200      	movs	r2, #0
 800322e:	2101      	movs	r1, #1
 8003230:	f006 ff28 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 8003234:	e007      	b.n	8003246 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0xca>
                }
                else
                {
                    mLcd.displayLine(1, 0, "NO ");
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f103 000c 	add.w	r0, r3, #12
 800323c:	4b24      	ldr	r3, [pc, #144]	; (80032d0 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x154>)
 800323e:	2200      	movs	r2, #0
 8003240:	2101      	movs	r1, #1
 8003242:	f006 ff1f 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                }

                if (button.getLatestPressedButton() == Button::ButtonName::SEL)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f006 fe1c 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800324c:	4603      	mov	r3, r0
 800324e:	2b03      	cmp	r3, #3
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01a      	beq.n	8003292 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x116>
                {
                    if (isBacklight == true)
 800325c:	4b15      	ldr	r3, [pc, #84]	; (80032b4 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x138>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10b      	bne.n	800327c <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x100>
                    {
                        impl_backLight();
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f878 	bl	800335a <_ZN4blib11LcdSimulate14impl_backLightEv>
                        mLcd.displayLine(2, 0, "> Backlight on");
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f103 000c 	add.w	r0, r3, #12
 8003270:	4b18      	ldr	r3, [pc, #96]	; (80032d4 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x158>)
 8003272:	2200      	movs	r2, #0
 8003274:	2102      	movs	r1, #2
 8003276:	f006 ff05 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
 800327a:	e00a      	b.n	8003292 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x116>
                    }
                    else
                    {
                        impl_Nobacklight();
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f85f 	bl	8003340 <_ZN4blib11LcdSimulate16impl_NobacklightEv>
                        mLcd.displayLine(2, 0, "> Backlight off");
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f103 000c 	add.w	r0, r3, #12
 8003288:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x15c>)
 800328a:	2200      	movs	r2, #0
 800328c:	2102      	movs	r1, #2
 800328e:	f006 fef9 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>
                    }
                }

                mLcd.displayLine(3, 15, "4BACK");
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f103 000c 	add.w	r0, r3, #12
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <_ZN4blib11LcdSimulate18impl_3_2_BacklightEv+0x160>)
 800329a:	220f      	movs	r2, #15
 800329c:	2103      	movs	r1, #3
 800329e:	f006 fef1 	bl	800a084 <_ZN4blib3Lcd11displayLineEhhPKc>

                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 80032a2:	2100      	movs	r1, #0
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f006 fddf 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000008 	.word	0x20000008
 80032b8:	0800def4 	.word	0x0800def4
 80032bc:	0800d7b0 	.word	0x0800d7b0
 80032c0:	0800ddec 	.word	0x0800ddec
 80032c4:	08002391 	.word	0x08002391
 80032c8:	0800df08 	.word	0x0800df08
 80032cc:	0800df18 	.word	0x0800df18
 80032d0:	0800df1c 	.word	0x0800df1c
 80032d4:	0800df20 	.word	0x0800df20
 80032d8:	0800df30 	.word	0x0800df30
 80032dc:	0800d8f0 	.word	0x0800d8f0

080032e0 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv>:

            void impl_3_2_FactoryReset()
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
            {
                auto &button = Button::getInstance();
 80032e8:	f000 fc6e 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 80032ec:	60f8      	str	r0, [r7, #12]
                if (button.getLatestPressedButton() == Button::ButtonName::BACK)
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f006 fdc8 	bl	8009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf0c      	ite	eq
 80032fa:	2301      	moveq	r3, #1
 80032fc:	2300      	movne	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x3e>
                {
                    LOGI("Go back to Setting screen");
 8003304:	4b0a      	ldr	r3, [pc, #40]	; (8003330 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x50>)
 8003306:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800330a:	490a      	ldr	r1, [pc, #40]	; (8003334 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x54>)
 800330c:	480a      	ldr	r0, [pc, #40]	; (8003338 <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x58>)
 800330e:	f7fe fa73 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                    mCallback = &LcdSimulate::impl_3_SettingScroll;    //
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a09      	ldr	r2, [pc, #36]	; (800333c <_ZN4blib11LcdSimulate21impl_3_2_FactoryResetEv+0x5c>)
 8003316:	605a      	str	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
                }
                button.setLatestPressedButton(Button::ButtonName::UNDEFINED);
 800331e:	2100      	movs	r1, #0
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f006 fda1 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
            }
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	0800df40 	.word	0x0800df40
 8003334:	0800d7b0 	.word	0x0800d7b0
 8003338:	0800ddec 	.word	0x0800ddec
 800333c:	08002391 	.word	0x08002391

08003340 <_ZN4blib11LcdSimulate16impl_NobacklightEv>:

            void impl_Nobacklight()
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
            {
                mLcd.noBackligth();
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	330c      	adds	r3, #12
 800334c:	4618      	mov	r0, r3
 800334e:	f007 f831 	bl	800a3b4 <_ZN4blib3Lcd11noBackligthEv>
            }
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <_ZN4blib11LcdSimulate14impl_backLightEv>:

            void impl_backLight()
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
            {
                mLcd.backlight();
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	330c      	adds	r3, #12
 8003366:	4618      	mov	r0, r3
 8003368:	f007 f835 	bl	800a3d6 <_ZN4blib3Lcd9backlightEv>
            }
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_GPIO_EXTI_Callback>:
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 2600000U;
 8003382:	4b49      	ldr	r3, [pc, #292]	; (80034a8 <HAL_GPIO_EXTI_Callback+0x134>)
 8003384:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	e002      	b.n	8003392 <HAL_GPIO_EXTI_Callback+0x1e>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	3301      	adds	r3, #1
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	429a      	cmp	r2, r3
 8003398:	bf8c      	ite	hi
 800339a:	2301      	movhi	r3, #1
 800339c:	2300      	movls	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f3      	bne.n	800338c <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == BUT_UP_Pin)
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d10b      	bne.n	80033c6 <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Up pin");
 80033ae:	4b3f      	ldr	r3, [pc, #252]	; (80034ac <HAL_GPIO_EXTI_Callback+0x138>)
 80033b0:	2253      	movs	r2, #83	; 0x53
 80033b2:	493f      	ldr	r1, [pc, #252]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x13c>)
 80033b4:	483f      	ldr	r0, [pc, #252]	; (80034b4 <HAL_GPIO_EXTI_Callback+0x140>)
 80033b6:	f7fe fa1f 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::UP;
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x144>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_UP_GPIO_Port;
 80033c0:	4b3e      	ldr	r3, [pc, #248]	; (80034bc <HAL_GPIO_EXTI_Callback+0x148>)
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	e032      	b.n	800342c <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_DOWN_Pin)
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d10b      	bne.n	80033e4 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Down pin");
 80033cc:	4b37      	ldr	r3, [pc, #220]	; (80034ac <HAL_GPIO_EXTI_Callback+0x138>)
 80033ce:	2259      	movs	r2, #89	; 0x59
 80033d0:	4937      	ldr	r1, [pc, #220]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x13c>)
 80033d2:	483b      	ldr	r0, [pc, #236]	; (80034c0 <HAL_GPIO_EXTI_Callback+0x14c>)
 80033d4:	f7fe fa10 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::DOWN;
 80033d8:	4b37      	ldr	r3, [pc, #220]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x144>)
 80033da:	2202      	movs	r2, #2
 80033dc:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_DOWN_GPIO_Port;
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <HAL_GPIO_EXTI_Callback+0x148>)
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	e023      	b.n	800342c <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_BACK_Pin)
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d10b      	bne.n	8003402 <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 80033ea:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_GPIO_EXTI_Callback+0x138>)
 80033ec:	225f      	movs	r2, #95	; 0x5f
 80033ee:	4930      	ldr	r1, [pc, #192]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x13c>)
 80033f0:	4834      	ldr	r0, [pc, #208]	; (80034c4 <HAL_GPIO_EXTI_Callback+0x150>)
 80033f2:	f7fe fa01 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x144>)
 80033f8:	2204      	movs	r2, #4
 80033fa:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_BACK_GPIO_Port;
 80033fc:	4b2f      	ldr	r3, [pc, #188]	; (80034bc <HAL_GPIO_EXTI_Callback+0x148>)
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	e014      	b.n	800342c <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_SEL_Pin)
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d10b      	bne.n	8003420 <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 8003408:	4b28      	ldr	r3, [pc, #160]	; (80034ac <HAL_GPIO_EXTI_Callback+0x138>)
 800340a:	2265      	movs	r2, #101	; 0x65
 800340c:	4928      	ldr	r1, [pc, #160]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x13c>)
 800340e:	482e      	ldr	r0, [pc, #184]	; (80034c8 <HAL_GPIO_EXTI_Callback+0x154>)
 8003410:	f7fe f9f2 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SEL;
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x144>)
 8003416:	2203      	movs	r2, #3
 8003418:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_SEL_GPIO_Port;
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_GPIO_EXTI_Callback+0x148>)
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	e005      	b.n	800342c <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 8003420:	4b22      	ldr	r3, [pc, #136]	; (80034ac <HAL_GPIO_EXTI_Callback+0x138>)
 8003422:	226b      	movs	r2, #107	; 0x6b
 8003424:	4922      	ldr	r1, [pc, #136]	; (80034b0 <HAL_GPIO_EXTI_Callback+0x13c>)
 8003426:	4829      	ldr	r0, [pc, #164]	; (80034cc <HAL_GPIO_EXTI_Callback+0x158>)
 8003428:	f7fe f9e6 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 800342c:	f000 fbcc 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003430:	4602      	mov	r2, r0
 8003432:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_GPIO_EXTI_Callback+0x144>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f006 fd15 	bl	8009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 800343e:	f000 fbc3 	bl	8003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8003442:	4603      	mov	r3, r0
 8003444:	4618      	mov	r0, r3
 8003446:	f006 fd29 	bl	8009e9c <_ZN4blib6Button12handleSignalEv>

    if (pGPIOx != nullptr)
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <HAL_GPIO_EXTI_Callback+0x106>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) && (i < (timedelay)))
 8003450:	e002      	b.n	8003458 <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3301      	adds	r3, #1
 8003456:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) && (i < (timedelay)))
 8003458:	88fb      	ldrh	r3, [r7, #6]
 800345a:	4619      	mov	r1, r3
 800345c:	69f8      	ldr	r0, [r7, #28]
 800345e:	f002 fcef 	bl	8005e40 <HAL_GPIO_ReadPin>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d105      	bne.n	8003474 <HAL_GPIO_EXTI_Callback+0x100>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	429a      	cmp	r2, r3
 800346e:	d901      	bls.n	8003474 <HAL_GPIO_EXTI_Callback+0x100>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <HAL_GPIO_EXTI_Callback+0x102>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1eb      	bne.n	8003452 <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e002      	b.n	8003486 <HAL_GPIO_EXTI_Callback+0x112>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3301      	adds	r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	429a      	cmp	r2, r3
 800348c:	bf8c      	ite	hi
 800348e:	2301      	movhi	r3, #1
 8003490:	2300      	movls	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f3      	bne.n	8003480 <HAL_GPIO_EXTI_Callback+0x10c>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 8003498:	4a0d      	ldr	r2, [pc, #52]	; (80034d0 <HAL_GPIO_EXTI_Callback+0x15c>)
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	6153      	str	r3, [r2, #20]
}
 800349e:	bf00      	nop
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	0027ac40 	.word	0x0027ac40
 80034ac:	0800df58 	.word	0x0800df58
 80034b0:	0800df70 	.word	0x0800df70
 80034b4:	0800df7c 	.word	0x0800df7c
 80034b8:	200003e4 	.word	0x200003e4
 80034bc:	48000800 	.word	0x48000800
 80034c0:	0800df98 	.word	0x0800df98
 80034c4:	0800dfb8 	.word	0x0800dfb8
 80034c8:	0800dfd8 	.word	0x0800dfd8
 80034cc:	0800dff8 	.word	0x0800dff8
 80034d0:	40010400 	.word	0x40010400

080034d4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    blib::Analog::getInstance().sampling();
 80034dc:	f7fe f960 	bl	80017a0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 80034e0:	4603      	mov	r3, r0
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fd fc0a 	bl	8000cfc <_ZN4blib6Analog8samplingEv>
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80034f6:	f000 fe43 	bl	8004180 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80034fa:	f000 f83f 	bl	800357c <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80034fe:	f000 fa71 	bl	80039e4 <_ZL12MX_GPIO_Initv>
    MX_DMA_Init();
 8003502:	f000 fa51 	bl	80039a8 <_ZL11MX_DMA_Initv>
    MX_ADC1_Init();
 8003506:	f000 f8ad 	bl	8003664 <_ZL12MX_ADC1_Initv>
    MX_I2C1_Init();
 800350a:	f000 f93b 	bl	8003784 <_ZL12MX_I2C1_Initv>
    MX_USART2_UART_Init();
 800350e:	f000 fa17 	bl	8003940 <_ZL19MX_USART2_UART_Initv>
    MX_TIM2_Init();
 8003512:	f000 f985 	bl	8003820 <_ZL12MX_TIM2_Initv>
    /* USER CODE BEGIN 2 */
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8003516:	4b14      	ldr	r3, [pc, #80]	; (8003568 <main+0x78>)
 8003518:	22ac      	movs	r2, #172	; 0xac
 800351a:	4914      	ldr	r1, [pc, #80]	; (800356c <main+0x7c>)
 800351c:	4814      	ldr	r0, [pc, #80]	; (8003570 <main+0x80>)
 800351e:	f7fe f96b 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <main+0x78>)
 8003524:	22ad      	movs	r2, #173	; 0xad
 8003526:	4911      	ldr	r1, [pc, #68]	; (800356c <main+0x7c>)
 8003528:	4812      	ldr	r0, [pc, #72]	; (8003574 <main+0x84>)
 800352a:	f7fe f965 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <main+0x78>)
 8003530:	22ae      	movs	r2, #174	; 0xae
 8003532:	490e      	ldr	r1, [pc, #56]	; (800356c <main+0x7c>)
 8003534:	4810      	ldr	r0, [pc, #64]	; (8003578 <main+0x88>)
 8003536:	f7fe f95f 	bl	80017f8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

    auto &analog = blib::Analog::getInstance();
 800353a:	f7fe f931 	bl	80017a0 <_ZN4blib2dp9SingletonINS_6AnalogEE11getInstanceEv>
 800353e:	60f8      	str	r0, [r7, #12]
    auto &chargeCtrl = blib::ChargeControl::getInstance();
 8003540:	f7fe fa20 	bl	8001984 <_ZN4blib2dp9SingletonINS_13ChargeControlEE11getInstanceEv>
 8003544:	60b8      	str	r0, [r7, #8]
    auto &lcdSimulate = blib::LcdSimulate::getInstance();
 8003546:	f000 fb29 	bl	8003b9c <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>
 800354a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        analog.readAnalog();
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f7fd fbe5 	bl	8000d1c <_ZN4blib6Analog10readAnalogEv>
        chargeCtrl.run();
 8003552:	68b8      	ldr	r0, [r7, #8]
 8003554:	f7fd feec 	bl	8001330 <_ZN4blib13ChargeControl3runEv>
//        serialMnt.show();
//        monitor.showMenu();
        lcdSimulate.run();
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fe faab 	bl	8001ab4 <_ZN4blib11LcdSimulate3runEv>
        HAL_Delay(500);
 800355e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003562:	f000 fe73 	bl	800424c <HAL_Delay>
        analog.readAnalog();
 8003566:	e7f1      	b.n	800354c <main+0x5c>
 8003568:	0800e01c 	.word	0x0800e01c
 800356c:	0800df70 	.word	0x0800df70
 8003570:	0800e024 	.word	0x0800e024
 8003574:	0800e050 	.word	0x0800e050
 8003578:	0800e06c 	.word	0x0800e06c

0800357c <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b0a6      	sub	sp, #152	; 0x98
 8003580:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003582:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003586:	2228      	movs	r2, #40	; 0x28
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f008 f839 	bl	800b602 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003590:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80035a0:	1d3b      	adds	r3, r7, #4
 80035a2:	2258      	movs	r2, #88	; 0x58
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f008 f82b 	bl	800b602 <memset>

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035ac:	2302      	movs	r3, #2
 80035ae:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035b0:	2301      	movs	r3, #1
 80035b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035b4:	2310      	movs	r3, #16
 80035b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035ba:	2302      	movs	r3, #2
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80035c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80035cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80035d0:	2300      	movs	r3, #0
 80035d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 f8a4 	bl	8006728 <HAL_RCC_OscConfig>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf14      	ite	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	2300      	moveq	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d001      	beq.n	80035f4 <_Z18SystemClock_Configv+0x78>
    {
        Error_Handler();
 80035f0:	f000 fa9e 	bl	8003b30 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 80035f4:	230f      	movs	r3, #15
 80035f6:	65fb      	str	r3, [r7, #92]	; 0x5c
            | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035f8:	2302      	movs	r3, #2
 80035fa:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035fc:	2300      	movs	r3, #0
 80035fe:	667b      	str	r3, [r7, #100]	; 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003604:	66bb      	str	r3, [r7, #104]	; 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003606:	2300      	movs	r3, #0
 8003608:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800360a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f004 f8dd 	bl	80077d0 <HAL_RCC_ClockConfig>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <_Z18SystemClock_Configv+0xae>
    {
        Error_Handler();
 8003626:	f000 fa83 	bl	8003b30 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_I2C1
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <_Z18SystemClock_Configv+0xe4>)
 800362c:	607b      	str	r3, [r7, #4]
            | RCC_PERIPHCLK_TIM2;
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8003636:	2300      	movs	r3, #0
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	4618      	mov	r0, r3
 800363e:	f004 fafd 	bl	8007c3c <HAL_RCCEx_PeriphCLKConfig>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <_Z18SystemClock_Configv+0xda>
    {
        Error_Handler();
 8003652:	f000 fa6d 	bl	8003b30 <Error_Handler>
    }
}
 8003656:	bf00      	nop
 8003658:	3798      	adds	r7, #152	; 0x98
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	00100022 	.word	0x00100022

08003664 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = { 0 };
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	60da      	str	r2, [r3, #12]
 8003682:	611a      	str	r2, [r3, #16]
 8003684:	615a      	str	r2, [r3, #20]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8003686:	4b3e      	ldr	r3, [pc, #248]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 8003688:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800368c:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800368e:	4b3c      	ldr	r3, [pc, #240]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 8003690:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003694:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003696:	4b3a      	ldr	r3, [pc, #232]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800369c:	4b38      	ldr	r3, [pc, #224]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 800369e:	2201      	movs	r2, #1
 80036a0:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 80036a2:	4b37      	ldr	r3, [pc, #220]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	765a      	strb	r2, [r3, #25]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036a8:	4b35      	ldr	r3, [pc, #212]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036b0:	4b33      	ldr	r3, [pc, #204]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036b6:	4b32      	ldr	r3, [pc, #200]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036bc:	4b30      	ldr	r3, [pc, #192]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 2;
 80036c2:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036c4:	2202      	movs	r2, #2
 80036c6:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 80036c8:	4b2d      	ldr	r3, [pc, #180]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80036d0:	4b2b      	ldr	r3, [pc, #172]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036d2:	2208      	movs	r2, #8
 80036d4:	615a      	str	r2, [r3, #20]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 80036d6:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036d8:	2200      	movs	r2, #0
 80036da:	761a      	strb	r2, [r3, #24]
    hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80036dc:	4b28      	ldr	r3, [pc, #160]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036e2:	4827      	ldr	r0, [pc, #156]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 80036e4:	f000 fdea 	bl	80042bc <HAL_ADC_Init>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	bf14      	ite	ne
 80036ee:	2301      	movne	r3, #1
 80036f0:	2300      	moveq	r3, #0
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <_ZL12MX_ADC1_Initv+0x98>
    {
        Error_Handler();
 80036f8:	f000 fa1a 	bl	8003b30 <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	4619      	mov	r1, r3
 8003706:	481e      	ldr	r0, [pc, #120]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 8003708:	f001 fc3a 	bl	8004f80 <HAL_ADCEx_MultiModeConfigChannel>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	bf14      	ite	ne
 8003712:	2301      	movne	r3, #1
 8003714:	2300      	moveq	r3, #0
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <_ZL12MX_ADC1_Initv+0xbc>
    {
        Error_Handler();
 800371c:	f000 fa08 	bl	8003b30 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_1;
 8003720:	2301      	movs	r3, #1
 8003722:	607b      	str	r3, [r7, #4]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8003724:	2301      	movs	r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8003728:	2301      	movs	r3, #1
 800372a:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800372c:	2307      	movs	r3, #7
 800372e:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
    sConfig.Offset = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	61bb      	str	r3, [r7, #24]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	4619      	mov	r1, r3
 800373c:	4810      	ldr	r0, [pc, #64]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 800373e:	f001 f935 	bl	80049ac <HAL_ADC_ConfigChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <_ZL12MX_ADC1_Initv+0xf2>
    {
        Error_Handler();
 8003752:	f000 f9ed 	bl	8003b30 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Rank = ADC_REGULAR_RANK_2;
 8003756:	2302      	movs	r3, #2
 8003758:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4808      	ldr	r0, [pc, #32]	; (8003780 <_ZL12MX_ADC1_Initv+0x11c>)
 8003760:	f001 f924 	bl	80049ac <HAL_ADC_ConfigChannel>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <_ZL12MX_ADC1_Initv+0x114>
    {
        Error_Handler();
 8003774:	f000 f9dc 	bl	8003b30 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 8003778:	bf00      	nop
 800377a:	3728      	adds	r7, #40	; 0x28
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000228 	.word	0x20000228

08003784 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8003788:	4b22      	ldr	r3, [pc, #136]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 800378a:	4a23      	ldr	r2, [pc, #140]	; (8003818 <_ZL12MX_I2C1_Initv+0x94>)
 800378c:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x2000090E;
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 8003790:	4a22      	ldr	r2, [pc, #136]	; (800381c <_ZL12MX_I2C1_Initv+0x98>)
 8003792:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800379a:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 800379c:	2201      	movs	r2, #1
 800379e:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037a0:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037ac:	4b19      	ldr	r3, [pc, #100]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037b8:	4b16      	ldr	r3, [pc, #88]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037be:	4815      	ldr	r0, [pc, #84]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 80037c0:	f002 fb86 	bl	8005ed0 <HAL_I2C_Init>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf14      	ite	ne
 80037ca:	2301      	movne	r3, #1
 80037cc:	2300      	moveq	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <_ZL12MX_I2C1_Initv+0x54>
    {
        Error_Handler();
 80037d4:	f000 f9ac 	bl	8003b30 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037d8:	2100      	movs	r1, #0
 80037da:	480e      	ldr	r0, [pc, #56]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 80037dc:	f002 ff0c 	bl	80065f8 <HAL_I2CEx_ConfigAnalogFilter>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <_ZL12MX_I2C1_Initv+0x70>
    {
        Error_Handler();
 80037f0:	f000 f99e 	bl	8003b30 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80037f4:	2100      	movs	r1, #0
 80037f6:	4807      	ldr	r0, [pc, #28]	; (8003814 <_ZL12MX_I2C1_Initv+0x90>)
 80037f8:	f002 ff49 	bl	800668e <HAL_I2CEx_ConfigDigitalFilter>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bf14      	ite	ne
 8003802:	2301      	movne	r3, #1
 8003804:	2300      	moveq	r3, #0
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <_ZL12MX_I2C1_Initv+0x8c>
    {
        Error_Handler();
 800380c:	f000 f990 	bl	8003b30 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200002bc 	.word	0x200002bc
 8003818:	40005400 	.word	0x40005400
 800381c:	2000090e 	.word	0x2000090e

08003820 <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08e      	sub	sp, #56	; 0x38
 8003824:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003834:	f107 031c 	add.w	r3, r7, #28
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003840:	463b      	mov	r3, r7
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
 800384c:	611a      	str	r2, [r3, #16]
 800384e:	615a      	str	r2, [r3, #20]
 8003850:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8003852:	4b3a      	ldr	r3, [pc, #232]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 8003854:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003858:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 800385a:	4b38      	ldr	r3, [pc, #224]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 800385c:	2200      	movs	r2, #0
 800385e:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1440;
 8003866:	4b35      	ldr	r3, [pc, #212]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 8003868:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800386c:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386e:	4b33      	ldr	r3, [pc, #204]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 8003870:	2200      	movs	r2, #0
 8003872:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003874:	4b31      	ldr	r3, [pc, #196]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 8003876:	2280      	movs	r2, #128	; 0x80
 8003878:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800387a:	4830      	ldr	r0, [pc, #192]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 800387c:	f004 fbfc 	bl	8008078 <HAL_TIM_Base_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <_ZL12MX_TIM2_Initv+0x74>
    {
        Error_Handler();
 8003890:	f000 f94e 	bl	8003b30 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800389a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800389e:	4619      	mov	r1, r3
 80038a0:	4826      	ldr	r0, [pc, #152]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 80038a2:	f004 ffe1 	bl	8008868 <HAL_TIM_ConfigClockSource>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <_ZL12MX_TIM2_Initv+0x9a>
    {
        Error_Handler();
 80038b6:	f000 f93b 	bl	8003b30 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038ba:	4820      	ldr	r0, [pc, #128]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 80038bc:	f004 fc33 	bl	8008126 <HAL_TIM_PWM_Init>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <_ZL12MX_TIM2_Initv+0xb4>
    {
        Error_Handler();
 80038d0:	f000 f92e 	bl	8003b30 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038dc:	f107 031c 	add.w	r3, r7, #28
 80038e0:	4619      	mov	r1, r3
 80038e2:	4816      	ldr	r0, [pc, #88]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 80038e4:	f005 fd20 	bl	8009328 <HAL_TIMEx_MasterConfigSynchronization>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bf14      	ite	ne
 80038ee:	2301      	movne	r3, #1
 80038f0:	2300      	moveq	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <_ZL12MX_TIM2_Initv+0xdc>
    {
        Error_Handler();
 80038f8:	f000 f91a 	bl	8003b30 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038fc:	2360      	movs	r3, #96	; 0x60
 80038fe:	603b      	str	r3, [r7, #0]
    sConfigOC.Pulse = 8;
 8003900:	2308      	movs	r3, #8
 8003902:	607b      	str	r3, [r7, #4]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800390c:	463b      	mov	r3, r7
 800390e:	2200      	movs	r2, #0
 8003910:	4619      	mov	r1, r3
 8003912:	480a      	ldr	r0, [pc, #40]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 8003914:	f004 fe94 	bl	8008640 <HAL_TIM_PWM_ConfigChannel>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	bf14      	ite	ne
 800391e:	2301      	movne	r3, #1
 8003920:	2300      	moveq	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <_ZL12MX_TIM2_Initv+0x10c>
    {
        Error_Handler();
 8003928:	f000 f902 	bl	8003b30 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 800392c:	4803      	ldr	r0, [pc, #12]	; (800393c <_ZL12MX_TIM2_Initv+0x11c>)
 800392e:	f000 fa55 	bl	8003ddc <HAL_TIM_MspPostInit>

}
 8003932:	bf00      	nop
 8003934:	3738      	adds	r7, #56	; 0x38
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000310 	.word	0x20000310

08003940 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8003944:	4b16      	ldr	r3, [pc, #88]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003946:	4a17      	ldr	r2, [pc, #92]	; (80039a4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8003948:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800394c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003950:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003952:	4b13      	ldr	r3, [pc, #76]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800395a:	2200      	movs	r2, #0
 800395c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003966:	220c      	movs	r2, #12
 8003968:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396a:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003970:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003972:	2200      	movs	r2, #0
 8003974:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003976:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003978:	2200      	movs	r2, #0
 800397a:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800397c:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 800397e:	2200      	movs	r2, #0
 8003980:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8003982:	4807      	ldr	r0, [pc, #28]	; (80039a0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8003984:	f005 fd7a 	bl	800947c <HAL_UART_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <_ZL19MX_USART2_UART_Initv+0x5c>
    {
        Error_Handler();
 8003998:	f000 f8ca 	bl	8003b30 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	2000035c 	.word	0x2000035c
 80039a4:	40004400 	.word	0x40004400

080039a8 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <_ZL11MX_DMA_Initv+0x38>)
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <_ZL11MX_DMA_Initv+0x38>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6153      	str	r3, [r2, #20]
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <_ZL11MX_DMA_Initv+0x38>)
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	607b      	str	r3, [r7, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Channel1_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2100      	movs	r1, #0
 80039ca:	200b      	movs	r0, #11
 80039cc:	f001 fe8b 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80039d0:	200b      	movs	r0, #11
 80039d2:	f001 fea4 	bl	800571e <HAL_NVIC_EnableIRQ>

}
 80039d6:	bf00      	nop
 80039d8:	3708      	adds	r7, #8
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000

080039e4 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039fa:	4b4a      	ldr	r3, [pc, #296]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4a49      	ldr	r2, [pc, #292]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 8003a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a04:	6153      	str	r3, [r2, #20]
 8003a06:	4b47      	ldr	r3, [pc, #284]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0e:	60bb      	str	r3, [r7, #8]
 8003a10:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a12:	4b44      	ldr	r3, [pc, #272]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4a43      	ldr	r2, [pc, #268]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 8003a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1c:	6153      	str	r3, [r2, #20]
 8003a1e:	4b41      	ldr	r3, [pc, #260]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	607b      	str	r3, [r7, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a2a:	4b3e      	ldr	r3, [pc, #248]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4a3d      	ldr	r2, [pc, #244]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 8003a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a34:	6153      	str	r3, [r2, #20]
 8003a36:	4b3b      	ldr	r3, [pc, #236]	; (8003b24 <_ZL12MX_GPIO_Initv+0x140>)
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED_RED_Pin | LED_YEL_Pin | LED_GRE_Pin, GPIO_PIN_SET);
 8003a42:	2201      	movs	r2, #1
 8003a44:	2107      	movs	r1, #7
 8003a46:	4838      	ldr	r0, [pc, #224]	; (8003b28 <_ZL12MX_GPIO_Initv+0x144>)
 8003a48:	f002 fa12 	bl	8005e70 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, INVERTER_CTRL_Pin | BUCK_EN_Pin, GPIO_PIN_SET);
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003a52:	4836      	ldr	r0, [pc, #216]	; (8003b2c <_ZL12MX_GPIO_Initv+0x148>)
 8003a54:	f002 fa0c 	bl	8005e70 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, BFC_Pin | FAN_Pin, GPIO_PIN_SET);
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8003a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a62:	f002 fa05 	bl	8005e70 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : BUT_UP_Pin BUT_DOWN_Pin BUT_BACK_Pin BUT_SEL_Pin */
    GPIO_InitStruct.Pin = BUT_UP_Pin | BUT_DOWN_Pin | BUT_BACK_Pin | BUT_SEL_Pin;
 8003a66:	230f      	movs	r3, #15
 8003a68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a6a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a70:	2301      	movs	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a74:	f107 030c 	add.w	r3, r7, #12
 8003a78:	4619      	mov	r1, r3
 8003a7a:	482c      	ldr	r0, [pc, #176]	; (8003b2c <_ZL12MX_GPIO_Initv+0x148>)
 8003a7c:	f002 f856 	bl	8005b2c <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_RED_Pin LED_YEL_Pin LED_GRE_Pin */
    GPIO_InitStruct.Pin = LED_RED_Pin | LED_YEL_Pin | LED_GRE_Pin;
 8003a80:	2307      	movs	r3, #7
 8003a82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a84:	2301      	movs	r3, #1
 8003a86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a90:	f107 030c 	add.w	r3, r7, #12
 8003a94:	4619      	mov	r1, r3
 8003a96:	4824      	ldr	r0, [pc, #144]	; (8003b28 <_ZL12MX_GPIO_Initv+0x144>)
 8003a98:	f002 f848 	bl	8005b2c <HAL_GPIO_Init>

    /*Configure GPIO pins : INVERTER_CTRL_Pin BUCK_EN_Pin */
    GPIO_InitStruct.Pin = INVERTER_CTRL_Pin | BUCK_EN_Pin;
 8003a9c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8003aa0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aae:	f107 030c 	add.w	r3, r7, #12
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	481d      	ldr	r0, [pc, #116]	; (8003b2c <_ZL12MX_GPIO_Initv+0x148>)
 8003ab6:	f002 f839 	bl	8005b2c <HAL_GPIO_Init>

    /*Configure GPIO pins : BFC_Pin FAN_Pin */
    GPIO_InitStruct.Pin = BFC_Pin | FAN_Pin;
 8003aba:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003abe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad6:	f002 f829 	bl	8005b2c <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2100      	movs	r1, #0
 8003ade:	2006      	movs	r0, #6
 8003ae0:	f001 fe01 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ae4:	2006      	movs	r0, #6
 8003ae6:	f001 fe1a 	bl	800571e <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2100      	movs	r1, #0
 8003aee:	2007      	movs	r0, #7
 8003af0:	f001 fdf9 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003af4:	2007      	movs	r0, #7
 8003af6:	f001 fe12 	bl	800571e <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2100      	movs	r1, #0
 8003afe:	2008      	movs	r0, #8
 8003b00:	f001 fdf1 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8003b04:	2008      	movs	r0, #8
 8003b06:	f001 fe0a 	bl	800571e <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	2009      	movs	r0, #9
 8003b10:	f001 fde9 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003b14:	2009      	movs	r0, #9
 8003b16:	f001 fe02 	bl	800571e <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8003b1a:	bf00      	nop
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	48000400 	.word	0x48000400
 8003b2c:	48000800 	.word	0x48000800

08003b30 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b34:	b672      	cpsid	i
}
 8003b36:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8003b38:	e7fe      	b.n	8003b38 <Error_Handler+0x8>
	...

08003b3c <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev>:
                Singleton()
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
                {
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <_ZN4blib2dp9SingletonINS_11LcdSimulateEEC1Ev+0x1c>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	601a      	str	r2, [r3, #0]
                }
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	0800e17c 	.word	0x0800e17c

08003b5c <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>:
                virtual ~Singleton()
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
                }
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev+0x1c>)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	0800e17c 	.word	0x0800e17c

08003b7c <_ZN4blib2dp9SingletonINS_11LcdSimulateEED0Ev>:
                virtual ~Singleton()
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
                }
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffe9 	bl	8003b5c <_ZN4blib2dp9SingletonINS_11LcdSimulateEED1Ev>
 8003b8a:	2104      	movs	r1, #4
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f006 fcb5 	bl	800a4fc <_ZdlPvj>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv>:
                static T& getInstance()
 8003b9c:	b598      	push	{r3, r4, r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8003ba0:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x20>
                        mInstance = new T();
 8003ba8:	2020      	movs	r0, #32
 8003baa:	f006 fca9 	bl	800a500 <_Znwj>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461c      	mov	r4, r3
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f7fd fefc 	bl	80019b0 <_ZN4blib11LcdSimulateC1Ev>
 8003bb8:	4b02      	ldr	r3, [pc, #8]	; (8003bc4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8003bba:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8003bbc:	4b01      	ldr	r3, [pc, #4]	; (8003bc4 <_ZN4blib2dp9SingletonINS_11LcdSimulateEE11getInstanceEv+0x28>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
                }
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	bd98      	pop	{r3, r4, r7, pc}
 8003bc4:	200003ec 	.word	0x200003ec

08003bc8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 8003bc8:	b598      	push	{r3, r4, r7, lr}
 8003bca:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d109      	bne.n	8003be8 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 8003bd4:	2008      	movs	r0, #8
 8003bd6:	f006 fc93 	bl	800a500 <_Znwj>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461c      	mov	r4, r3
 8003bde:	4620      	mov	r0, r4
 8003be0:	f006 f90e 	bl	8009e00 <_ZN4blib6ButtonC1Ev>
 8003be4:	4b02      	ldr	r3, [pc, #8]	; (8003bf0 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8003be6:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8003bea:	681b      	ldr	r3, [r3, #0]
                }
 8003bec:	4618      	mov	r0, r3
 8003bee:	bd98      	pop	{r3, r4, r7, pc}
 8003bf0:	200003e8 	.word	0x200003e8

08003bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bfa:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <HAL_MspInit+0x44>)
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	4a0e      	ldr	r2, [pc, #56]	; (8003c38 <HAL_MspInit+0x44>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6193      	str	r3, [r2, #24]
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_MspInit+0x44>)
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_MspInit+0x44>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <HAL_MspInit+0x44>)
 8003c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	61d3      	str	r3, [r2, #28]
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_MspInit+0x44>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000

08003c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c5c:	d14c      	bne.n	8003cf8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003c5e:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <HAL_ADC_MspInit+0xc4>)
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	4a27      	ldr	r2, [pc, #156]	; (8003d00 <HAL_ADC_MspInit+0xc4>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6153      	str	r3, [r2, #20]
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_ADC_MspInit+0xc4>)
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_ADC_MspInit+0xc4>)
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	; (8003d00 <HAL_ADC_MspInit+0xc4>)
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c80:	6153      	str	r3, [r2, #20]
 8003c82:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <HAL_ADC_MspInit+0xc4>)
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c92:	2303      	movs	r3, #3
 8003c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca4:	f001 ff42 	bl	8005b2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003ca8:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003caa:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <HAL_ADC_MspInit+0xcc>)
 8003cac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003cdc:	4809      	ldr	r0, [pc, #36]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cde:	f001 fd38 	bl	8005752 <HAL_DMA_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8003ce8:	f7ff ff22 	bl	8003b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cf0:	639a      	str	r2, [r3, #56]	; 0x38
 8003cf2:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_ADC_MspInit+0xc8>)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003cf8:	bf00      	nop
 8003cfa:	3728      	adds	r7, #40	; 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	20000278 	.word	0x20000278
 8003d08:	40020008 	.word	0x40020008

08003d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	; 0x28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d14:	f107 0314 	add.w	r3, r7, #20
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	605a      	str	r2, [r3, #4]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <HAL_I2C_MspInit+0x7c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d127      	bne.n	8003d7e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_I2C_MspInit+0x80>)
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_I2C_MspInit+0x80>)
 8003d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d38:	6153      	str	r3, [r2, #20]
 8003d3a:	4b14      	ldr	r3, [pc, #80]	; (8003d8c <HAL_I2C_MspInit+0x80>)
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d46:	23c0      	movs	r3, #192	; 0xc0
 8003d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d4a:	2312      	movs	r3, #18
 8003d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d52:	2303      	movs	r3, #3
 8003d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003d56:	2304      	movs	r3, #4
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d5a:	f107 0314 	add.w	r3, r7, #20
 8003d5e:	4619      	mov	r1, r3
 8003d60:	480b      	ldr	r0, [pc, #44]	; (8003d90 <HAL_I2C_MspInit+0x84>)
 8003d62:	f001 fee3 	bl	8005b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_I2C_MspInit+0x80>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4a08      	ldr	r2, [pc, #32]	; (8003d8c <HAL_I2C_MspInit+0x80>)
 8003d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d70:	61d3      	str	r3, [r2, #28]
 8003d72:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <HAL_I2C_MspInit+0x80>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d7e:	bf00      	nop
 8003d80:	3728      	adds	r7, #40	; 0x28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40005400 	.word	0x40005400
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	48000400 	.word	0x48000400

08003d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da4:	d113      	bne.n	8003dce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <HAL_TIM_Base_MspInit+0x44>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4a0b      	ldr	r2, [pc, #44]	; (8003dd8 <HAL_TIM_Base_MspInit+0x44>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	61d3      	str	r3, [r2, #28]
 8003db2:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_TIM_Base_MspInit+0x44>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	201c      	movs	r0, #28
 8003dc4:	f001 fc8f 	bl	80056e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003dc8:	201c      	movs	r0, #28
 8003dca:	f001 fca8 	bl	800571e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40021000 	.word	0x40021000

08003ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b088      	sub	sp, #32
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	2200      	movs	r2, #0
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	60da      	str	r2, [r3, #12]
 8003df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dfc:	d11c      	bne.n	8003e38 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dfe:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <HAL_TIM_MspPostInit+0x64>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4a0f      	ldr	r2, [pc, #60]	; (8003e40 <HAL_TIM_MspPostInit+0x64>)
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e08:	6153      	str	r3, [r2, #20]
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	; (8003e40 <HAL_TIM_MspPostInit+0x64>)
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e16:	2320      	movs	r3, #32
 8003e18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e34:	f001 fe7a 	bl	8005b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e38:	bf00      	nop
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08a      	sub	sp, #40	; 0x28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e4c:	f107 0314 	add.w	r3, r7, #20
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <HAL_UART_MspInit+0x7c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d128      	bne.n	8003eb8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	4a16      	ldr	r2, [pc, #88]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e70:	61d3      	str	r3, [r2, #28]
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4a10      	ldr	r2, [pc, #64]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e88:	6153      	str	r3, [r2, #20]
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <HAL_UART_MspInit+0x80>)
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e96:	230c      	movs	r3, #12
 8003e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ea6:	2307      	movs	r3, #7
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eaa:	f107 0314 	add.w	r3, r7, #20
 8003eae:	4619      	mov	r1, r3
 8003eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eb4:	f001 fe3a 	bl	8005b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003eb8:	bf00      	nop
 8003eba:	3728      	adds	r7, #40	; 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40004400 	.word	0x40004400
 8003ec4:	40021000 	.word	0x40021000

08003ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ecc:	e7fe      	b.n	8003ecc <NMI_Handler+0x4>

08003ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ed2:	e7fe      	b.n	8003ed2 <HardFault_Handler+0x4>

08003ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <MemManage_Handler+0x4>

08003eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ede:	e7fe      	b.n	8003ede <BusFault_Handler+0x4>

08003ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <UsageFault_Handler+0x4>

08003ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f02:	b480      	push	{r7}
 8003f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f14:	f000 f97a 	bl	800420c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_UP_Pin);
 8003f20:	2001      	movs	r0, #1
 8003f22:	f001 ffbd 	bl	8005ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_DOWN_Pin);
 8003f2e:	2002      	movs	r0, #2
 8003f30:	f001 ffb6 	bl	8005ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BACK_Pin);
 8003f3c:	2004      	movs	r0, #4
 8003f3e:	f001 ffaf 	bl	8005ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SEL_Pin);
 8003f4a:	2008      	movs	r0, #8
 8003f4c:	f001 ffa8 	bl	8005ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003f50:	bf00      	nop
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f58:	4802      	ldr	r0, [pc, #8]	; (8003f64 <DMA1_Channel1_IRQHandler+0x10>)
 8003f5a:	f001 fcd9 	bl	8005910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000278 	.word	0x20000278

08003f68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f6c:	4802      	ldr	r0, [pc, #8]	; (8003f78 <TIM2_IRQHandler+0x10>)
 8003f6e:	f004 fa47 	bl	8008400 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000310 	.word	0x20000310

08003f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return 1;
 8003f80:	2301      	movs	r3, #1
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <_kill>:

int _kill(int pid, int sig)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f96:	f007 fbdb 	bl	800b750 <__errno>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2216      	movs	r2, #22
 8003f9e:	601a      	str	r2, [r3, #0]
  return -1;
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_exit>:

void _exit (int status)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7ff ffe7 	bl	8003f8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fbe:	e7fe      	b.n	8003fbe <_exit+0x12>

08003fc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fcc:	2300      	movs	r3, #0
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	e00a      	b.n	8003fe8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fd2:	f3af 8000 	nop.w
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	60ba      	str	r2, [r7, #8]
 8003fde:	b2ca      	uxtb	r2, r1
 8003fe0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	617b      	str	r3, [r7, #20]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	dbf0      	blt.n	8003fd2 <_read+0x12>
  }

  return len;
 8003ff0:	687b      	ldr	r3, [r7, #4]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e009      	b.n	8004020 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	60ba      	str	r2, [r7, #8]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	3301      	adds	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	429a      	cmp	r2, r3
 8004026:	dbf1      	blt.n	800400c <_write+0x12>
  }
  return len;
 8004028:	687b      	ldr	r3, [r7, #4]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <_close>:

int _close(int file)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800405a:	605a      	str	r2, [r3, #4]
  return 0;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <_isatty>:

int _isatty(int file)
{
 800406a:	b480      	push	{r7}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004072:	2301      	movs	r3, #1
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <_sbrk+0x5c>)
 80040a6:	4b15      	ldr	r3, [pc, #84]	; (80040fc <_sbrk+0x60>)
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040b0:	4b13      	ldr	r3, [pc, #76]	; (8004100 <_sbrk+0x64>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d102      	bne.n	80040be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <_sbrk+0x64>)
 80040ba:	4a12      	ldr	r2, [pc, #72]	; (8004104 <_sbrk+0x68>)
 80040bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040be:	4b10      	ldr	r3, [pc, #64]	; (8004100 <_sbrk+0x64>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4413      	add	r3, r2
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d207      	bcs.n	80040dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040cc:	f007 fb40 	bl	800b750 <__errno>
 80040d0:	4603      	mov	r3, r0
 80040d2:	220c      	movs	r2, #12
 80040d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	e009      	b.n	80040f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <_sbrk+0x64>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040e2:	4b07      	ldr	r3, [pc, #28]	; (8004100 <_sbrk+0x64>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	4a05      	ldr	r2, [pc, #20]	; (8004100 <_sbrk+0x64>)
 80040ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040ee:	68fb      	ldr	r3, [r7, #12]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20010000 	.word	0x20010000
 80040fc:	00000400 	.word	0x00000400
 8004100:	200003f0 	.word	0x200003f0
 8004104:	20000948 	.word	0x20000948

08004108 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004108:	b480      	push	{r7}
 800410a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800410c:	4b06      	ldr	r3, [pc, #24]	; (8004128 <SystemInit+0x20>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	4a05      	ldr	r2, [pc, #20]	; (8004128 <SystemInit+0x20>)
 8004114:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004118:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800411c:	bf00      	nop
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	e000ed00 	.word	0xe000ed00

0800412c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800412c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004164 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004130:	f7ff ffea 	bl	8004108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004134:	480c      	ldr	r0, [pc, #48]	; (8004168 <LoopForever+0x6>)
  ldr r1, =_edata
 8004136:	490d      	ldr	r1, [pc, #52]	; (800416c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004138:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <LoopForever+0xe>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800413c:	e002      	b.n	8004144 <LoopCopyDataInit>

0800413e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800413e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004142:	3304      	adds	r3, #4

08004144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004148:	d3f9      	bcc.n	800413e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800414c:	4c0a      	ldr	r4, [pc, #40]	; (8004178 <LoopForever+0x16>)
  movs r3, #0
 800414e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004150:	e001      	b.n	8004156 <LoopFillZerobss>

08004152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004154:	3204      	adds	r2, #4

08004156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004158:	d3fb      	bcc.n	8004152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800415a:	f007 faff 	bl	800b75c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800415e:	f7ff f9c7 	bl	80034f0 <main>

08004162 <LoopForever>:

LoopForever:
    b LoopForever
 8004162:	e7fe      	b.n	8004162 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004164:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800416c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004170:	0800e564 	.word	0x0800e564
  ldr r2, =_sbss
 8004174:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8004178:	20000948 	.word	0x20000948

0800417c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800417c:	e7fe      	b.n	800417c <ADC1_2_IRQHandler>
	...

08004180 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_Init+0x28>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <HAL_Init+0x28>)
 800418a:	f043 0310 	orr.w	r3, r3, #16
 800418e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004190:	2003      	movs	r0, #3
 8004192:	f001 fa9d 	bl	80056d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004196:	200f      	movs	r0, #15
 8004198:	f000 f808 	bl	80041ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800419c:	f7ff fd2a 	bl	8003bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40022000 	.word	0x40022000

080041ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b4:	4b12      	ldr	r3, [pc, #72]	; (8004200 <HAL_InitTick+0x54>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b12      	ldr	r3, [pc, #72]	; (8004204 <HAL_InitTick+0x58>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 fab5 	bl	800573a <HAL_SYSTICK_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e00e      	b.n	80041f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b0f      	cmp	r3, #15
 80041de:	d80a      	bhi.n	80041f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041e0:	2200      	movs	r2, #0
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	f04f 30ff 	mov.w	r0, #4294967295
 80041e8:	f001 fa7d 	bl	80056e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041ec:	4a06      	ldr	r2, [pc, #24]	; (8004208 <HAL_InitTick+0x5c>)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	2000000c 	.word	0x2000000c
 8004204:	20000014 	.word	0x20000014
 8004208:	20000010 	.word	0x20000010

0800420c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_IncTick+0x20>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_IncTick+0x24>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4413      	add	r3, r2
 800421c:	4a04      	ldr	r2, [pc, #16]	; (8004230 <HAL_IncTick+0x24>)
 800421e:	6013      	str	r3, [r2, #0]
}
 8004220:	bf00      	nop
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000014 	.word	0x20000014
 8004230:	200003f4 	.word	0x200003f4

08004234 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return uwTick;  
 8004238:	4b03      	ldr	r3, [pc, #12]	; (8004248 <HAL_GetTick+0x14>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	200003f4 	.word	0x200003f4

0800424c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004254:	f7ff ffee 	bl	8004234 <HAL_GetTick>
 8004258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d005      	beq.n	8004272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004266:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <HAL_Delay+0x44>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004272:	bf00      	nop
 8004274:	f7ff ffde 	bl	8004234 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	429a      	cmp	r2, r3
 8004282:	d8f7      	bhi.n	8004274 <HAL_Delay+0x28>
  {
  }
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000014 	.word	0x20000014

08004294 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b09a      	sub	sp, #104	; 0x68
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e1e3      	b.n	80046a4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 0310 	and.w	r3, r3, #16
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d176      	bne.n	80043dc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d152      	bne.n	800439c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7ff fc93 	bl	8003c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d13b      	bne.n	800439c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 ffe7 	bl	80052f8 <ADC_Disable>
 800432a:	4603      	mov	r3, r0
 800432c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d12f      	bne.n	800439c <HAL_ADC_Init+0xe0>
 800433c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004340:	2b00      	cmp	r3, #0
 8004342:	d12b      	bne.n	800439c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800434c:	f023 0302 	bic.w	r3, r3, #2
 8004350:	f043 0202 	orr.w	r2, r3, #2
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689a      	ldr	r2, [r3, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004366:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004376:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004378:	4b92      	ldr	r3, [pc, #584]	; (80045c4 <HAL_ADC_Init+0x308>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a92      	ldr	r2, [pc, #584]	; (80045c8 <HAL_ADC_Init+0x30c>)
 800437e:	fba2 2303 	umull	r2, r3, r2, r3
 8004382:	0c9a      	lsrs	r2, r3, #18
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800438e:	e002      	b.n	8004396 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	3b01      	subs	r3, #1
 8004394:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1f9      	bne.n	8004390 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80043b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b8:	d110      	bne.n	80043dc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f023 0312 	bic.w	r3, r3, #18
 80043c2:	f043 0210 	orr.w	r2, r3, #16
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	f043 0201 	orr.w	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f040 8150 	bne.w	800468a <HAL_ADC_Init+0x3ce>
 80043ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 814b 	bne.w	800468a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 8143 	bne.w	800468a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800440c:	f043 0202 	orr.w	r2, r3, #2
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800441c:	d004      	beq.n	8004428 <HAL_ADC_Init+0x16c>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a6a      	ldr	r2, [pc, #424]	; (80045cc <HAL_ADC_Init+0x310>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d101      	bne.n	800442c <HAL_ADC_Init+0x170>
 8004428:	4b69      	ldr	r3, [pc, #420]	; (80045d0 <HAL_ADC_Init+0x314>)
 800442a:	e000      	b.n	800442e <HAL_ADC_Init+0x172>
 800442c:	4b69      	ldr	r3, [pc, #420]	; (80045d4 <HAL_ADC_Init+0x318>)
 800442e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004438:	d102      	bne.n	8004440 <HAL_ADC_Init+0x184>
 800443a:	4b64      	ldr	r3, [pc, #400]	; (80045cc <HAL_ADC_Init+0x310>)
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e01a      	b.n	8004476 <HAL_ADC_Init+0x1ba>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a61      	ldr	r2, [pc, #388]	; (80045cc <HAL_ADC_Init+0x310>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d103      	bne.n	8004452 <HAL_ADC_Init+0x196>
 800444a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e011      	b.n	8004476 <HAL_ADC_Init+0x1ba>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a60      	ldr	r2, [pc, #384]	; (80045d8 <HAL_ADC_Init+0x31c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d102      	bne.n	8004462 <HAL_ADC_Init+0x1a6>
 800445c:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <HAL_ADC_Init+0x320>)
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e009      	b.n	8004476 <HAL_ADC_Init+0x1ba>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a5d      	ldr	r2, [pc, #372]	; (80045dc <HAL_ADC_Init+0x320>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d102      	bne.n	8004472 <HAL_ADC_Init+0x1b6>
 800446c:	4b5a      	ldr	r3, [pc, #360]	; (80045d8 <HAL_ADC_Init+0x31c>)
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e001      	b.n	8004476 <HAL_ADC_Init+0x1ba>
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d108      	bne.n	8004496 <HAL_ADC_Init+0x1da>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_ADC_Init+0x1da>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_ADC_Init+0x1dc>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d11c      	bne.n	80044d6 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800449c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_ADC_Init+0x202>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_ADC_Init+0x202>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <HAL_ADC_Init+0x204>
 80044be:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d108      	bne.n	80044d6 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80044c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d4:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	7e5b      	ldrb	r3, [r3, #25]
 80044da:	035b      	lsls	r3, r3, #13
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044e0:	2a01      	cmp	r2, #1
 80044e2:	d002      	beq.n	80044ea <HAL_ADC_Init+0x22e>
 80044e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044e8:	e000      	b.n	80044ec <HAL_ADC_Init+0x230>
 80044ea:	2200      	movs	r2, #0
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044fc:	4313      	orrs	r3, r2
 80044fe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d11b      	bne.n	8004542 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	7e5b      	ldrb	r3, [r3, #25]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d109      	bne.n	8004526 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	3b01      	subs	r3, #1
 8004518:	045a      	lsls	r2, r3, #17
 800451a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800451c:	4313      	orrs	r3, r2
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	663b      	str	r3, [r7, #96]	; 0x60
 8004524:	e00d      	b.n	8004542 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800452e:	f043 0220 	orr.w	r2, r3, #32
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f043 0201 	orr.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	2b01      	cmp	r3, #1
 8004548:	d054      	beq.n	80045f4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <HAL_ADC_Init+0x31c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d004      	beq.n	800455e <HAL_ADC_Init+0x2a2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a20      	ldr	r2, [pc, #128]	; (80045dc <HAL_ADC_Init+0x320>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d140      	bne.n	80045e0 <HAL_ADC_Init+0x324>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004566:	d02a      	beq.n	80045be <HAL_ADC_Init+0x302>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004570:	d022      	beq.n	80045b8 <HAL_ADC_Init+0x2fc>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800457a:	d01a      	beq.n	80045b2 <HAL_ADC_Init+0x2f6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8004584:	d012      	beq.n	80045ac <HAL_ADC_Init+0x2f0>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800458e:	d00a      	beq.n	80045a6 <HAL_ADC_Init+0x2ea>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8004598:	d002      	beq.n	80045a0 <HAL_ADC_Init+0x2e4>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459e:	e023      	b.n	80045e8 <HAL_ADC_Init+0x32c>
 80045a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80045a4:	e020      	b.n	80045e8 <HAL_ADC_Init+0x32c>
 80045a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80045aa:	e01d      	b.n	80045e8 <HAL_ADC_Init+0x32c>
 80045ac:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80045b0:	e01a      	b.n	80045e8 <HAL_ADC_Init+0x32c>
 80045b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045b6:	e017      	b.n	80045e8 <HAL_ADC_Init+0x32c>
 80045b8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80045bc:	e014      	b.n	80045e8 <HAL_ADC_Init+0x32c>
 80045be:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80045c2:	e011      	b.n	80045e8 <HAL_ADC_Init+0x32c>
 80045c4:	2000000c 	.word	0x2000000c
 80045c8:	431bde83 	.word	0x431bde83
 80045cc:	50000100 	.word	0x50000100
 80045d0:	50000300 	.word	0x50000300
 80045d4:	50000700 	.word	0x50000700
 80045d8:	50000400 	.word	0x50000400
 80045dc:	50000500 	.word	0x50000500
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80045ec:	4313      	orrs	r3, r2
 80045ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045f0:	4313      	orrs	r3, r2
 80045f2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d114      	bne.n	800462c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6812      	ldr	r2, [r2, #0]
 800460c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004610:	f023 0302 	bic.w	r3, r3, #2
 8004614:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7e1b      	ldrb	r3, [r3, #24]
 800461a:	039a      	lsls	r2, r3, #14
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4313      	orrs	r3, r2
 8004626:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004628:	4313      	orrs	r3, r2
 800462a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <HAL_ADC_Init+0x3f0>)
 8004634:	4013      	ands	r3, r2
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800463c:	430b      	orrs	r3, r1
 800463e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10c      	bne.n	8004662 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f023 010f 	bic.w	r1, r3, #15
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	631a      	str	r2, [r3, #48]	; 0x30
 8004660:	e007      	b.n	8004672 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 020f 	bic.w	r2, r2, #15
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	f023 0303 	bic.w	r3, r3, #3
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
 8004688:	e00a      	b.n	80046a0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	f023 0312 	bic.w	r3, r3, #18
 8004692:	f043 0210 	orr.w	r2, r3, #16
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800469a:	2301      	movs	r3, #1
 800469c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80046a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3768      	adds	r7, #104	; 0x68
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	fff0c007 	.word	0xfff0c007

080046b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 80f7 	bne.w	80048be <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_ADC_Start_DMA+0x2e>
 80046da:	2302      	movs	r3, #2
 80046dc:	e0f2      	b.n	80048c4 <HAL_ADC_Start_DMA+0x214>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ee:	d004      	beq.n	80046fa <HAL_ADC_Start_DMA+0x4a>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a75      	ldr	r2, [pc, #468]	; (80048cc <HAL_ADC_Start_DMA+0x21c>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d109      	bne.n	800470e <HAL_ADC_Start_DMA+0x5e>
 80046fa:	4b75      	ldr	r3, [pc, #468]	; (80048d0 <HAL_ADC_Start_DMA+0x220>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 031f 	and.w	r3, r3, #31
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf0c      	ite	eq
 8004706:	2301      	moveq	r3, #1
 8004708:	2300      	movne	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	e008      	b.n	8004720 <HAL_ADC_Start_DMA+0x70>
 800470e:	4b71      	ldr	r3, [pc, #452]	; (80048d4 <HAL_ADC_Start_DMA+0x224>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2300      	movne	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80c5 	beq.w	80048b0 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fd82 	bl	8005230 <ADC_Enable>
 800472c:	4603      	mov	r3, r0
 800472e:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004730:	7dfb      	ldrb	r3, [r7, #23]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 80b7 	bne.w	80048a6 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004754:	d004      	beq.n	8004760 <HAL_ADC_Start_DMA+0xb0>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5c      	ldr	r2, [pc, #368]	; (80048cc <HAL_ADC_Start_DMA+0x21c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d106      	bne.n	800476e <HAL_ADC_Start_DMA+0xbe>
 8004760:	4b5b      	ldr	r3, [pc, #364]	; (80048d0 <HAL_ADC_Start_DMA+0x220>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 031f 	and.w	r3, r3, #31
 8004768:	2b00      	cmp	r3, #0
 800476a:	d010      	beq.n	800478e <HAL_ADC_Start_DMA+0xde>
 800476c:	e005      	b.n	800477a <HAL_ADC_Start_DMA+0xca>
 800476e:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_ADC_Start_DMA+0x224>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_ADC_Start_DMA+0xde>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004782:	d004      	beq.n	800478e <HAL_ADC_Start_DMA+0xde>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a53      	ldr	r2, [pc, #332]	; (80048d8 <HAL_ADC_Start_DMA+0x228>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d115      	bne.n	80047ba <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d036      	beq.n	8004816 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80047b8:	e02d      	b.n	8004816 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ce:	d004      	beq.n	80047da <HAL_ADC_Start_DMA+0x12a>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3d      	ldr	r2, [pc, #244]	; (80048cc <HAL_ADC_Start_DMA+0x21c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10a      	bne.n	80047f0 <HAL_ADC_Start_DMA+0x140>
 80047da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e008      	b.n	8004802 <HAL_ADC_Start_DMA+0x152>
 80047f0:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <HAL_ADC_Start_DMA+0x228>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800480e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800481e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004822:	d106      	bne.n	8004832 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004828:	f023 0206 	bic.w	r2, r3, #6
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	645a      	str	r2, [r3, #68]	; 0x44
 8004830:	e002      	b.n	8004838 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	4a25      	ldr	r2, [pc, #148]	; (80048dc <HAL_ADC_Start_DMA+0x22c>)
 8004846:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <HAL_ADC_Start_DMA+0x230>)
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <HAL_ADC_Start_DMA+0x234>)
 8004856:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	221c      	movs	r2, #28
 800485e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0210 	orr.w	r2, r2, #16
 800486e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3340      	adds	r3, #64	; 0x40
 800488a:	4619      	mov	r1, r3
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f000 ffa6 	bl	80057e0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0204 	orr.w	r2, r2, #4
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	e00d      	b.n	80048c2 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048ae:	e008      	b.n	80048c2 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80048bc:	e001      	b.n	80048c2 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80048be:	2302      	movs	r3, #2
 80048c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	50000100 	.word	0x50000100
 80048d0:	50000300 	.word	0x50000300
 80048d4:	50000700 	.word	0x50000700
 80048d8:	50000400 	.word	0x50000400
 80048dc:	08005165 	.word	0x08005165
 80048e0:	080051df 	.word	0x080051df
 80048e4:	080051fb 	.word	0x080051fb

080048e8 <HAL_ADC_Stop_DMA>:
  *         dedicated MultimodeStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_Stop_DMA+0x1a>
 80048fe:	2302      	movs	r3, #2
 8004900:	e050      	b.n	80049a4 <HAL_ADC_Stop_DMA+0xbc>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800490a:	216c      	movs	r1, #108	; 0x6c
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fd59 	bl	80053c4 <ADC_ConversionStop>
 8004912:	4603      	mov	r3, r0
 8004914:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004916:	7bfb      	ldrb	r3, [r7, #15]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d13e      	bne.n	800499a <HAL_ADC_Stop_DMA+0xb2>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004934:	2b02      	cmp	r3, #2
 8004936:	d10f      	bne.n	8004958 <HAL_ADC_Stop_DMA+0x70>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	4618      	mov	r0, r3
 800493e:	f000 ffae 	bl	800589e <HAL_DMA_Abort>
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_ADC_Stop_DMA+0x70>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);     
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004950:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0210 	bic.w	r2, r2, #16
 8004966:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to retain a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8004968:	7bfb      	ldrb	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <HAL_ADC_Stop_DMA+0x92>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fcc2 	bl	80052f8 <ADC_Disable>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]
 8004978:	e002      	b.n	8004980 <HAL_ADC_Stop_DMA+0x98>
    }
    else
    {
      ADC_Disable(hadc);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fcbc 	bl	80052f8 <ADC_Disable>
    }
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_ADC_Stop_DMA+0xb2>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800498e:	f023 0301 	bic.w	r3, r3, #1
 8004992:	f043 0201 	orr.w	r2, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b09b      	sub	sp, #108	; 0x6c
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x22>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e2c8      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x5b4>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 82ac 	bne.w	8004f3e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d81c      	bhi.n	8004a28 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685a      	ldr	r2, [r3, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	4413      	add	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	461a      	mov	r2, r3
 8004a02:	231f      	movs	r3, #31
 8004a04:	4093      	lsls	r3, r2
 8004a06:	43db      	mvns	r3, r3
 8004a08:	4019      	ands	r1, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
 8004a26:	e063      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	2b09      	cmp	r3, #9
 8004a2e:	d81e      	bhi.n	8004a6e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	3b1e      	subs	r3, #30
 8004a44:	221f      	movs	r2, #31
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43db      	mvns	r3, r3
 8004a4c:	4019      	ands	r1, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	3b1e      	subs	r3, #30
 8004a60:	fa00 f203 	lsl.w	r2, r0, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	635a      	str	r2, [r3, #52]	; 0x34
 8004a6c:	e040      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b0e      	cmp	r3, #14
 8004a74:	d81e      	bhi.n	8004ab4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	4613      	mov	r3, r2
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	4413      	add	r3, r2
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	3b3c      	subs	r3, #60	; 0x3c
 8004a8a:	221f      	movs	r2, #31
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43db      	mvns	r3, r3
 8004a92:	4019      	ands	r1, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6818      	ldr	r0, [r3, #0]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	3b3c      	subs	r3, #60	; 0x3c
 8004aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ab2:	e01d      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	3b5a      	subs	r3, #90	; 0x5a
 8004ac8:	221f      	movs	r2, #31
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	4019      	ands	r1, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6818      	ldr	r0, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	4613      	mov	r3, r2
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	4413      	add	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	3b5a      	subs	r3, #90	; 0x5a
 8004ae4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 80e5 	bne.w	8004cca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b09      	cmp	r3, #9
 8004b06:	d91c      	bls.n	8004b42 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6999      	ldr	r1, [r3, #24]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4613      	mov	r3, r2
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	4413      	add	r3, r2
 8004b18:	3b1e      	subs	r3, #30
 8004b1a:	2207      	movs	r2, #7
 8004b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	4019      	ands	r1, r3
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6898      	ldr	r0, [r3, #8]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	4413      	add	r3, r2
 8004b32:	3b1e      	subs	r3, #30
 8004b34:	fa00 f203 	lsl.w	r2, r0, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	619a      	str	r2, [r3, #24]
 8004b40:	e019      	b.n	8004b76 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6959      	ldr	r1, [r3, #20]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	4413      	add	r3, r2
 8004b52:	2207      	movs	r2, #7
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	4019      	ands	r1, r3
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6898      	ldr	r0, [r3, #8]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	695a      	ldr	r2, [r3, #20]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	08db      	lsrs	r3, r3, #3
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d84f      	bhi.n	8004c38 <HAL_ADC_ConfigChannel+0x28c>
 8004b98:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <HAL_ADC_ConfigChannel+0x1f4>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bd3 	.word	0x08004bd3
 8004ba8:	08004bf5 	.word	0x08004bf5
 8004bac:	08004c17 	.word	0x08004c17
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bb6:	4b99      	ldr	r3, [pc, #612]	; (8004e1c <HAL_ADC_ConfigChannel+0x470>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	0691      	lsls	r1, r2, #26
 8004bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004bce:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004bd0:	e07b      	b.n	8004cca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bd8:	4b90      	ldr	r3, [pc, #576]	; (8004e1c <HAL_ADC_ConfigChannel+0x470>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	0691      	lsls	r1, r2, #26
 8004be2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004be4:	430a      	orrs	r2, r1
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004bf0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004bf2:	e06a      	b.n	8004cca <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bfa:	4b88      	ldr	r3, [pc, #544]	; (8004e1c <HAL_ADC_ConfigChannel+0x470>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	0691      	lsls	r1, r2, #26
 8004c04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c06:	430a      	orrs	r2, r1
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c12:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004c14:	e059      	b.n	8004cca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c1c:	4b7f      	ldr	r3, [pc, #508]	; (8004e1c <HAL_ADC_ConfigChannel+0x470>)
 8004c1e:	4013      	ands	r3, r2
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	0691      	lsls	r1, r2, #26
 8004c26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004c34:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004c36:	e048      	b.n	8004cca <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	069b      	lsls	r3, r3, #26
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d107      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c5a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	069b      	lsls	r3, r3, #26
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d107      	bne.n	8004c80 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c7e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	069b      	lsls	r3, r3, #26
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d107      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ca2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004caa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	069b      	lsls	r3, r3, #26
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d107      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004cc6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004cc8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d108      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x33e>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x33e>
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <HAL_ADC_ConfigChannel+0x340>
 8004cea:	2300      	movs	r3, #0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f040 8131 	bne.w	8004f54 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d00f      	beq.n	8004d1a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2201      	movs	r2, #1
 8004d08:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	400a      	ands	r2, r1
 8004d14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004d18:	e049      	b.n	8004dae <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2201      	movs	r2, #1
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b09      	cmp	r3, #9
 8004d3a:	d91c      	bls.n	8004d76 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	6999      	ldr	r1, [r3, #24]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4613      	mov	r3, r2
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3b1b      	subs	r3, #27
 8004d4e:	2207      	movs	r2, #7
 8004d50:	fa02 f303 	lsl.w	r3, r2, r3
 8004d54:	43db      	mvns	r3, r3
 8004d56:	4019      	ands	r1, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	6898      	ldr	r0, [r3, #8]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	3b1b      	subs	r3, #27
 8004d68:	fa00 f203 	lsl.w	r2, r0, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	619a      	str	r2, [r3, #24]
 8004d74:	e01b      	b.n	8004dae <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6959      	ldr	r1, [r3, #20]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	4613      	mov	r3, r2
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	4413      	add	r3, r2
 8004d88:	2207      	movs	r2, #7
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	4019      	ands	r1, r3
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6898      	ldr	r0, [r3, #8]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	4413      	add	r3, r2
 8004da2:	fa00 f203 	lsl.w	r2, r0, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db6:	d004      	beq.n	8004dc2 <HAL_ADC_ConfigChannel+0x416>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <HAL_ADC_ConfigChannel+0x474>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <HAL_ADC_ConfigChannel+0x41a>
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <HAL_ADC_ConfigChannel+0x478>)
 8004dc4:	e000      	b.n	8004dc8 <HAL_ADC_ConfigChannel+0x41c>
 8004dc6:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <HAL_ADC_ConfigChannel+0x47c>)
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d105      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d015      	beq.n	8004e0a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004de2:	2b11      	cmp	r3, #17
 8004de4:	d105      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004df6:	2b12      	cmp	r3, #18
 8004df8:	f040 80ac 	bne.w	8004f54 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f040 80a5 	bne.w	8004f54 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e12:	d10b      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x480>
 8004e14:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <HAL_ADC_ConfigChannel+0x474>)
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	e023      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x4b6>
 8004e1a:	bf00      	nop
 8004e1c:	83fff000 	.word	0x83fff000
 8004e20:	50000100 	.word	0x50000100
 8004e24:	50000300 	.word	0x50000300
 8004e28:	50000700 	.word	0x50000700
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a4e      	ldr	r2, [pc, #312]	; (8004f6c <HAL_ADC_ConfigChannel+0x5c0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d103      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x492>
 8004e36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	e011      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x4b6>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a4b      	ldr	r2, [pc, #300]	; (8004f70 <HAL_ADC_ConfigChannel+0x5c4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d102      	bne.n	8004e4e <HAL_ADC_ConfigChannel+0x4a2>
 8004e48:	4b4a      	ldr	r3, [pc, #296]	; (8004f74 <HAL_ADC_ConfigChannel+0x5c8>)
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e009      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x4b6>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a48      	ldr	r2, [pc, #288]	; (8004f74 <HAL_ADC_ConfigChannel+0x5c8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d102      	bne.n	8004e5e <HAL_ADC_ConfigChannel+0x4b2>
 8004e58:	4b45      	ldr	r3, [pc, #276]	; (8004f70 <HAL_ADC_ConfigChannel+0x5c4>)
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e001      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x4b6>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d108      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x4d6>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d101      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x4d6>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x4d8>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d150      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004e88:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d010      	beq.n	8004eb0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x4fe>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d101      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x4fe>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <HAL_ADC_ConfigChannel+0x500>
 8004eaa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d13c      	bne.n	8004f2a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d11d      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x548>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ec0:	d118      	bne.n	8004ef4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ecc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ece:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <HAL_ADC_ConfigChannel+0x5cc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <HAL_ADC_ConfigChannel+0x5d0>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0c9a      	lsrs	r2, r3, #18
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ee4:	e002      	b.n	8004eec <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f9      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ef2:	e02e      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b11      	cmp	r3, #17
 8004efa:	d10b      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x568>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f04:	d106      	bne.n	8004f14 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f12:	e01e      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b12      	cmp	r3, #18
 8004f1a:	d11a      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f26:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f28:	e013      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f043 0220 	orr.w	r2, r3, #32
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004f3c:	e00a      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0220 	orr.w	r2, r3, #32
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004f50:	e000      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004f52:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004f5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	376c      	adds	r7, #108	; 0x6c
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	50000100 	.word	0x50000100
 8004f70:	50000400 	.word	0x50000400
 8004f74:	50000500 	.word	0x50000500
 8004f78:	2000000c 	.word	0x2000000c
 8004f7c:	431bde83 	.word	0x431bde83

08004f80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b099      	sub	sp, #100	; 0x64
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f98:	d102      	bne.n	8004fa0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004f9a:	4b6d      	ldr	r3, [pc, #436]	; (8005150 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004f9c:	60bb      	str	r3, [r7, #8]
 8004f9e:	e01a      	b.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a6a      	ldr	r2, [pc, #424]	; (8005150 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d103      	bne.n	8004fb2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004faa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	e011      	b.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a67      	ldr	r2, [pc, #412]	; (8005154 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d102      	bne.n	8004fc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fbc:	4b66      	ldr	r3, [pc, #408]	; (8005158 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004fbe:	60bb      	str	r3, [r7, #8]
 8004fc0:	e009      	b.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a64      	ldr	r2, [pc, #400]	; (8005158 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d102      	bne.n	8004fd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004fcc:	4b61      	ldr	r3, [pc, #388]	; (8005154 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	e001      	b.n	8004fd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d101      	bne.n	8004fe0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0b0      	b.n	8005142 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d101      	bne.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004fea:	2302      	movs	r3, #2
 8004fec:	e0a9      	b.n	8005142 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	f040 808d 	bne.w	8005120 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 8086 	bne.w	8005120 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800501c:	d004      	beq.n	8005028 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a4b      	ldr	r2, [pc, #300]	; (8005150 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005028:	4b4c      	ldr	r3, [pc, #304]	; (800515c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800502a:	e000      	b.n	800502e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800502c:	4b4c      	ldr	r3, [pc, #304]	; (8005160 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800502e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d040      	beq.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8005038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6859      	ldr	r1, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800504a:	035b      	lsls	r3, r3, #13
 800504c:	430b      	orrs	r3, r1
 800504e:	431a      	orrs	r2, r3
 8005050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005052:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0303 	and.w	r3, r3, #3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d108      	bne.n	8005074 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b01      	cmp	r3, #1
 800506e:	d101      	bne.n	8005074 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8005070:	2301      	movs	r3, #1
 8005072:	e000      	b.n	8005076 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8005074:	2300      	movs	r3, #0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d15c      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0303 	and.w	r3, r3, #3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d101      	bne.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8005096:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8005098:	2b00      	cmp	r3, #0
 800509a:	d14b      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800509c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80050a4:	f023 030f 	bic.w	r3, r3, #15
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	6811      	ldr	r1, [r2, #0]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	6892      	ldr	r2, [r2, #8]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	431a      	orrs	r2, r3
 80050b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050b6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80050b8:	e03c      	b.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80050ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050c4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d108      	bne.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80050e2:	2301      	movs	r3, #1
 80050e4:	e000      	b.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80050e6:	2300      	movs	r3, #0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d123      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8005104:	2301      	movs	r3, #1
 8005106:	e000      	b.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8005108:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800510a:	2b00      	cmp	r3, #0
 800510c:	d112      	bne.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800510e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005116:	f023 030f 	bic.w	r3, r3, #15
 800511a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800511c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800511e:	e009      	b.n	8005134 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005124:	f043 0220 	orr.w	r2, r3, #32
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005132:	e000      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8005134:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800513e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8005142:	4618      	mov	r0, r3
 8005144:	3764      	adds	r7, #100	; 0x64
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	50000100 	.word	0x50000100
 8005154:	50000400 	.word	0x50000400
 8005158:	50000500 	.word	0x50000500
 800515c:	50000300 	.word	0x50000300
 8005160:	50000700 	.word	0x50000700

08005164 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800517a:	2b00      	cmp	r3, #0
 800517c:	d126      	bne.n	80051cc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005194:	2b00      	cmp	r3, #0
 8005196:	d115      	bne.n	80051c4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800519c:	2b00      	cmp	r3, #0
 800519e:	d111      	bne.n	80051c4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d105      	bne.n	80051c4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	f043 0201 	orr.w	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7fe f985 	bl	80034d4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80051ca:	e004      	b.n	80051d6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b084      	sub	sp, #16
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	f7ff f851 	bl	8004294 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	f043 0204 	orr.w	r2, r3, #4
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7ff f841 	bl	80042a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d108      	bne.n	800525c <ADC_Enable+0x2c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <ADC_Enable+0x2c>
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <ADC_Enable+0x2e>
 800525c:	2300      	movs	r3, #0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d143      	bne.n	80052ea <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <ADC_Enable+0xc4>)
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00d      	beq.n	800528c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	f043 0210 	orr.w	r2, r3, #16
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	f043 0201 	orr.w	r2, r3, #1
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e02f      	b.n	80052ec <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800529c:	f7fe ffca 	bl	8004234 <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052a2:	e01b      	b.n	80052dc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80052a4:	f7fe ffc6 	bl	8004234 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d914      	bls.n	80052dc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d00d      	beq.n	80052dc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	f043 0210 	orr.w	r2, r3, #16
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	f043 0201 	orr.w	r2, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e007      	b.n	80052ec <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d1dc      	bne.n	80052a4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	8000003f 	.word	0x8000003f

080052f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b01      	cmp	r3, #1
 8005310:	d108      	bne.n	8005324 <ADC_Disable+0x2c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <ADC_Disable+0x2c>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <ADC_Disable+0x2e>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d047      	beq.n	80053ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 030d 	and.w	r3, r3, #13
 8005334:	2b01      	cmp	r3, #1
 8005336:	d10f      	bne.n	8005358 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689a      	ldr	r2, [r3, #8]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0202 	orr.w	r2, r2, #2
 8005346:	609a      	str	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2203      	movs	r2, #3
 800534e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8005350:	f7fe ff70 	bl	8004234 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005356:	e029      	b.n	80053ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	f043 0210 	orr.w	r2, r3, #16
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005368:	f043 0201 	orr.w	r2, r3, #1
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e023      	b.n	80053bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005374:	f7fe ff5e 	bl	8004234 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d914      	bls.n	80053ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b01      	cmp	r3, #1
 800538e:	d10d      	bne.n	80053ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0210 	orr.w	r2, r3, #16
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	f043 0201 	orr.w	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e007      	b.n	80053bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d0dc      	beq.n	8005374 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f003 030c 	and.w	r3, r3, #12
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 809b 	beq.w	8005520 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053f8:	d12a      	bne.n	8005450 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d126      	bne.n	8005450 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005406:	2b01      	cmp	r3, #1
 8005408:	d122      	bne.n	8005450 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800540a:	230c      	movs	r3, #12
 800540c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800540e:	e014      	b.n	800543a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	4a46      	ldr	r2, [pc, #280]	; (800552c <ADC_ConversionStop+0x168>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d90d      	bls.n	8005434 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	f043 0210 	orr.w	r2, r3, #16
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005428:	f043 0201 	orr.w	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e076      	b.n	8005522 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	3301      	adds	r3, #1
 8005438:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d1e3      	bne.n	8005410 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2240      	movs	r2, #64	; 0x40
 800544e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b60      	cmp	r3, #96	; 0x60
 8005454:	d015      	beq.n	8005482 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b04      	cmp	r3, #4
 8005462:	d10e      	bne.n	8005482 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800546e:	2b00      	cmp	r3, #0
 8005470:	d107      	bne.n	8005482 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0210 	orr.w	r2, r2, #16
 8005480:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d015      	beq.n	80054b4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d10e      	bne.n	80054b4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d107      	bne.n	80054b4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0220 	orr.w	r2, r2, #32
 80054b2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b60      	cmp	r3, #96	; 0x60
 80054b8:	d005      	beq.n	80054c6 <ADC_ConversionStop+0x102>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b6c      	cmp	r3, #108	; 0x6c
 80054be:	d105      	bne.n	80054cc <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80054c0:	230c      	movs	r3, #12
 80054c2:	617b      	str	r3, [r7, #20]
        break;
 80054c4:	e005      	b.n	80054d2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80054c6:	2308      	movs	r3, #8
 80054c8:	617b      	str	r3, [r7, #20]
        break;
 80054ca:	e002      	b.n	80054d2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80054cc:	2304      	movs	r3, #4
 80054ce:	617b      	str	r3, [r7, #20]
        break;
 80054d0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80054d2:	f7fe feaf 	bl	8004234 <HAL_GetTick>
 80054d6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80054d8:	e01b      	b.n	8005512 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80054da:	f7fe feab 	bl	8004234 <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b0b      	cmp	r3, #11
 80054e6:	d914      	bls.n	8005512 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00d      	beq.n	8005512 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f043 0210 	orr.w	r2, r3, #16
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005506:	f043 0201 	orr.w	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e007      	b.n	8005522 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1dc      	bne.n	80054da <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	000993ff 	.word	0x000993ff

08005530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <__NVIC_SetPriorityGrouping+0x44>)
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800554c:	4013      	ands	r3, r2
 800554e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800555c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005562:	4a04      	ldr	r2, [pc, #16]	; (8005574 <__NVIC_SetPriorityGrouping+0x44>)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	60d3      	str	r3, [r2, #12]
}
 8005568:	bf00      	nop
 800556a:	3714      	adds	r7, #20
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	e000ed00 	.word	0xe000ed00

08005578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800557c:	4b04      	ldr	r3, [pc, #16]	; (8005590 <__NVIC_GetPriorityGrouping+0x18>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	0a1b      	lsrs	r3, r3, #8
 8005582:	f003 0307 	and.w	r3, r3, #7
}
 8005586:	4618      	mov	r0, r3
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	4603      	mov	r3, r0
 800559c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	db0b      	blt.n	80055be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	f003 021f 	and.w	r2, r3, #31
 80055ac:	4907      	ldr	r1, [pc, #28]	; (80055cc <__NVIC_EnableIRQ+0x38>)
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	095b      	lsrs	r3, r3, #5
 80055b4:	2001      	movs	r0, #1
 80055b6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	e000e100 	.word	0xe000e100

080055d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	6039      	str	r1, [r7, #0]
 80055da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	db0a      	blt.n	80055fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	490c      	ldr	r1, [pc, #48]	; (800561c <__NVIC_SetPriority+0x4c>)
 80055ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ee:	0112      	lsls	r2, r2, #4
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	440b      	add	r3, r1
 80055f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055f8:	e00a      	b.n	8005610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4908      	ldr	r1, [pc, #32]	; (8005620 <__NVIC_SetPriority+0x50>)
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	3b04      	subs	r3, #4
 8005608:	0112      	lsls	r2, r2, #4
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	440b      	add	r3, r1
 800560e:	761a      	strb	r2, [r3, #24]
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	e000e100 	.word	0xe000e100
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	; 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	f1c3 0307 	rsb	r3, r3, #7
 800563e:	2b04      	cmp	r3, #4
 8005640:	bf28      	it	cs
 8005642:	2304      	movcs	r3, #4
 8005644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	3304      	adds	r3, #4
 800564a:	2b06      	cmp	r3, #6
 800564c:	d902      	bls.n	8005654 <NVIC_EncodePriority+0x30>
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3b03      	subs	r3, #3
 8005652:	e000      	b.n	8005656 <NVIC_EncodePriority+0x32>
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005658:	f04f 32ff 	mov.w	r2, #4294967295
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	fa02 f303 	lsl.w	r3, r2, r3
 8005662:	43da      	mvns	r2, r3
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	401a      	ands	r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800566c:	f04f 31ff 	mov.w	r1, #4294967295
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	fa01 f303 	lsl.w	r3, r1, r3
 8005676:	43d9      	mvns	r1, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800567c:	4313      	orrs	r3, r2
         );
}
 800567e:	4618      	mov	r0, r3
 8005680:	3724      	adds	r7, #36	; 0x24
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
	...

0800568c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3b01      	subs	r3, #1
 8005698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800569c:	d301      	bcc.n	80056a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800569e:	2301      	movs	r3, #1
 80056a0:	e00f      	b.n	80056c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056a2:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <SysTick_Config+0x40>)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056aa:	210f      	movs	r1, #15
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	f7ff ff8e 	bl	80055d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <SysTick_Config+0x40>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056ba:	4b04      	ldr	r3, [pc, #16]	; (80056cc <SysTick_Config+0x40>)
 80056bc:	2207      	movs	r2, #7
 80056be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	e000e010 	.word	0xe000e010

080056d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff29 	bl	8005530 <__NVIC_SetPriorityGrouping>
}
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b086      	sub	sp, #24
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	4603      	mov	r3, r0
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	607a      	str	r2, [r7, #4]
 80056f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056f8:	f7ff ff3e 	bl	8005578 <__NVIC_GetPriorityGrouping>
 80056fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	68b9      	ldr	r1, [r7, #8]
 8005702:	6978      	ldr	r0, [r7, #20]
 8005704:	f7ff ff8e 	bl	8005624 <NVIC_EncodePriority>
 8005708:	4602      	mov	r2, r0
 800570a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800570e:	4611      	mov	r1, r2
 8005710:	4618      	mov	r0, r3
 8005712:	f7ff ff5d 	bl	80055d0 <__NVIC_SetPriority>
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b082      	sub	sp, #8
 8005722:	af00      	add	r7, sp, #0
 8005724:	4603      	mov	r3, r0
 8005726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff ff31 	bl	8005594 <__NVIC_EnableIRQ>
}
 8005732:	bf00      	nop
 8005734:	3708      	adds	r7, #8
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b082      	sub	sp, #8
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7ff ffa2 	bl	800568c <SysTick_Config>
 8005748:	4603      	mov	r3, r0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e037      	b.n	80057d8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800577e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005782:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800578c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f97a 	bl	8005ab4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}  
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80057ee:	2300      	movs	r3, #0
 80057f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d101      	bne.n	8005800 <HAL_DMA_Start_IT+0x20>
 80057fc:	2302      	movs	r3, #2
 80057fe:	e04a      	b.n	8005896 <HAL_DMA_Start_IT+0xb6>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800580e:	2b01      	cmp	r3, #1
 8005810:	d13a      	bne.n	8005888 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2202      	movs	r2, #2
 8005816:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	68b9      	ldr	r1, [r7, #8]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f90d 	bl	8005a56 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 020e 	orr.w	r2, r2, #14
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e00f      	b.n	8005876 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 020a 	orr.w	r2, r2, #10
 8005864:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0204 	bic.w	r2, r2, #4
 8005874:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0201 	orr.w	r2, r2, #1
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e005      	b.n	8005894 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005890:	2302      	movs	r3, #2
 8005892:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8005894:	7dfb      	ldrb	r3, [r7, #23]
} 
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800589e:	b480      	push	{r7}
 80058a0:	b083      	sub	sp, #12
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d008      	beq.n	80058c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2204      	movs	r2, #4
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e020      	b.n	8005904 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 020e 	bic.w	r2, r2, #14
 80058d0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	2101      	movs	r1, #1
 80058ec:	fa01 f202 	lsl.w	r2, r1, r2
 80058f0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	2204      	movs	r2, #4
 800592e:	409a      	lsls	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4013      	ands	r3, r2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d024      	beq.n	8005982 <HAL_DMA_IRQHandler+0x72>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d01f      	beq.n	8005982 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0320 	and.w	r3, r3, #32
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 0204 	bic.w	r2, r2, #4
 800595e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	2104      	movs	r1, #4
 800596a:	fa01 f202 	lsl.w	r2, r1, r2
 800596e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d06a      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005980:	e065      	b.n	8005a4e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	2202      	movs	r2, #2
 8005988:	409a      	lsls	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4013      	ands	r3, r2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d02c      	beq.n	80059ec <HAL_DMA_IRQHandler+0xdc>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d027      	beq.n	80059ec <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 020a 	bic.w	r2, r2, #10
 80059b8:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	2102      	movs	r1, #2
 80059cc:	fa01 f202 	lsl.w	r2, r1, r2
 80059d0:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d035      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80059ea:	e030      	b.n	8005a4e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f0:	2208      	movs	r2, #8
 80059f2:	409a      	lsls	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4013      	ands	r3, r2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d028      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x13e>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d023      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 020e 	bic.w	r2, r2, #14
 8005a14:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	2101      	movs	r1, #1
 8005a20:	fa01 f202 	lsl.w	r2, r1, r2
 8005a24:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d004      	beq.n	8005a4e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	4798      	blx	r3
    }
  }
}  
 8005a4c:	e7ff      	b.n	8005a4e <HAL_DMA_IRQHandler+0x13e>
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
 8005a62:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005a72:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d108      	bne.n	8005a96 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a94:	e007      	b.n	8005aa6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68ba      	ldr	r2, [r7, #8]
 8005a9c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	60da      	str	r2, [r3, #12]
}
 8005aa6:	bf00      	nop
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4b14      	ldr	r3, [pc, #80]	; (8005b14 <DMA_CalcBaseAndBitshift+0x60>)
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d80f      	bhi.n	8005ae8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	4b12      	ldr	r3, [pc, #72]	; (8005b18 <DMA_CalcBaseAndBitshift+0x64>)
 8005ad0:	4413      	add	r3, r2
 8005ad2:	4a12      	ldr	r2, [pc, #72]	; (8005b1c <DMA_CalcBaseAndBitshift+0x68>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	009a      	lsls	r2, r3, #2
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0f      	ldr	r2, [pc, #60]	; (8005b20 <DMA_CalcBaseAndBitshift+0x6c>)
 8005ae4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8005ae6:	e00e      	b.n	8005b06 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <DMA_CalcBaseAndBitshift+0x70>)
 8005af0:	4413      	add	r3, r2
 8005af2:	4a0a      	ldr	r2, [pc, #40]	; (8005b1c <DMA_CalcBaseAndBitshift+0x68>)
 8005af4:	fba2 2303 	umull	r2, r3, r2, r3
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a09      	ldr	r2, [pc, #36]	; (8005b28 <DMA_CalcBaseAndBitshift+0x74>)
 8005b04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40020407 	.word	0x40020407
 8005b18:	bffdfff8 	.word	0xbffdfff8
 8005b1c:	cccccccd 	.word	0xcccccccd
 8005b20:	40020000 	.word	0x40020000
 8005b24:	bffdfbf8 	.word	0xbffdfbf8
 8005b28:	40020400 	.word	0x40020400

08005b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b36:	2300      	movs	r3, #0
 8005b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b3a:	e160      	b.n	8005dfe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	2101      	movs	r1, #1
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	4013      	ands	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f000 8152 	beq.w	8005df8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d005      	beq.n	8005b6c <HAL_GPIO_Init+0x40>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d130      	bne.n	8005bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	2203      	movs	r2, #3
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	43db      	mvns	r3, r3
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	4013      	ands	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43db      	mvns	r3, r3
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4013      	ands	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	f003 0201 	and.w	r2, r3, #1
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f003 0303 	and.w	r3, r3, #3
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d017      	beq.n	8005c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	2203      	movs	r2, #3
 8005be6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bea:	43db      	mvns	r3, r3
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689a      	ldr	r2, [r3, #8]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d123      	bne.n	8005c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	08da      	lsrs	r2, r3, #3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	3208      	adds	r2, #8
 8005c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	220f      	movs	r2, #15
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	43db      	mvns	r3, r3
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4013      	ands	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	691a      	ldr	r2, [r3, #16]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	08da      	lsrs	r2, r3, #3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3208      	adds	r2, #8
 8005c58:	6939      	ldr	r1, [r7, #16]
 8005c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	2203      	movs	r2, #3
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43db      	mvns	r3, r3
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4013      	ands	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 0203 	and.w	r2, r3, #3
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 80ac 	beq.w	8005df8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ca0:	4b5e      	ldr	r3, [pc, #376]	; (8005e1c <HAL_GPIO_Init+0x2f0>)
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	4a5d      	ldr	r2, [pc, #372]	; (8005e1c <HAL_GPIO_Init+0x2f0>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	6193      	str	r3, [r2, #24]
 8005cac:	4b5b      	ldr	r3, [pc, #364]	; (8005e1c <HAL_GPIO_Init+0x2f0>)
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005cb8:	4a59      	ldr	r2, [pc, #356]	; (8005e20 <HAL_GPIO_Init+0x2f4>)
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	089b      	lsrs	r3, r3, #2
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f003 0303 	and.w	r3, r3, #3
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	220f      	movs	r2, #15
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ce2:	d025      	beq.n	8005d30 <HAL_GPIO_Init+0x204>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a4f      	ldr	r2, [pc, #316]	; (8005e24 <HAL_GPIO_Init+0x2f8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d01f      	beq.n	8005d2c <HAL_GPIO_Init+0x200>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a4e      	ldr	r2, [pc, #312]	; (8005e28 <HAL_GPIO_Init+0x2fc>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d019      	beq.n	8005d28 <HAL_GPIO_Init+0x1fc>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a4d      	ldr	r2, [pc, #308]	; (8005e2c <HAL_GPIO_Init+0x300>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <HAL_GPIO_Init+0x1f8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a4c      	ldr	r2, [pc, #304]	; (8005e30 <HAL_GPIO_Init+0x304>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00d      	beq.n	8005d20 <HAL_GPIO_Init+0x1f4>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a4b      	ldr	r2, [pc, #300]	; (8005e34 <HAL_GPIO_Init+0x308>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <HAL_GPIO_Init+0x1f0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a4a      	ldr	r2, [pc, #296]	; (8005e38 <HAL_GPIO_Init+0x30c>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d101      	bne.n	8005d18 <HAL_GPIO_Init+0x1ec>
 8005d14:	2306      	movs	r3, #6
 8005d16:	e00c      	b.n	8005d32 <HAL_GPIO_Init+0x206>
 8005d18:	2307      	movs	r3, #7
 8005d1a:	e00a      	b.n	8005d32 <HAL_GPIO_Init+0x206>
 8005d1c:	2305      	movs	r3, #5
 8005d1e:	e008      	b.n	8005d32 <HAL_GPIO_Init+0x206>
 8005d20:	2304      	movs	r3, #4
 8005d22:	e006      	b.n	8005d32 <HAL_GPIO_Init+0x206>
 8005d24:	2303      	movs	r3, #3
 8005d26:	e004      	b.n	8005d32 <HAL_GPIO_Init+0x206>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e002      	b.n	8005d32 <HAL_GPIO_Init+0x206>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <HAL_GPIO_Init+0x206>
 8005d30:	2300      	movs	r3, #0
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	f002 0203 	and.w	r2, r2, #3
 8005d38:	0092      	lsls	r2, r2, #2
 8005d3a:	4093      	lsls	r3, r2
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d42:	4937      	ldr	r1, [pc, #220]	; (8005e20 <HAL_GPIO_Init+0x2f4>)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	089b      	lsrs	r3, r3, #2
 8005d48:	3302      	adds	r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d50:	4b3a      	ldr	r3, [pc, #232]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005d74:	4a31      	ldr	r2, [pc, #196]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005d7a:	4b30      	ldr	r3, [pc, #192]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	43db      	mvns	r3, r3
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4013      	ands	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005d9e:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4013      	ands	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005dce:	4b1b      	ldr	r3, [pc, #108]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	43db      	mvns	r3, r3
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4013      	ands	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005df2:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <HAL_GPIO_Init+0x310>)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f47f ae97 	bne.w	8005b3c <HAL_GPIO_Init+0x10>
  }
}
 8005e0e:	bf00      	nop
 8005e10:	bf00      	nop
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	40010000 	.word	0x40010000
 8005e24:	48000400 	.word	0x48000400
 8005e28:	48000800 	.word	0x48000800
 8005e2c:	48000c00 	.word	0x48000c00
 8005e30:	48001000 	.word	0x48001000
 8005e34:	48001400 	.word	0x48001400
 8005e38:	48001800 	.word	0x48001800
 8005e3c:	40010400 	.word	0x40010400

08005e40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	887b      	ldrh	r3, [r7, #2]
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
 8005e5c:	e001      	b.n	8005e62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	807b      	strh	r3, [r7, #2]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e80:	787b      	ldrb	r3, [r7, #1]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e86:	887a      	ldrh	r2, [r7, #2]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e8c:	e002      	b.n	8005e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e8e:	887a      	ldrh	r2, [r7, #2]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d006      	beq.n	8005ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eb6:	4a05      	ldr	r2, [pc, #20]	; (8005ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fd fa58 	bl	8003374 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ec4:	bf00      	nop
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40010400 	.word	0x40010400

08005ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e081      	b.n	8005fe6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fd ff08 	bl	8003d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2224      	movs	r2, #36	; 0x24
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d107      	bne.n	8005f4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f46:	609a      	str	r2, [r3, #8]
 8005f48:	e006      	b.n	8005f58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d104      	bne.n	8005f6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69d9      	ldr	r1, [r3, #28]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	817b      	strh	r3, [r7, #10]
 8006000:	4613      	mov	r3, r2
 8006002:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b20      	cmp	r3, #32
 800600e:	f040 80da 	bne.w	80061c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_I2C_Master_Transmit+0x30>
 800601c:	2302      	movs	r3, #2
 800601e:	e0d3      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006028:	f7fe f904 	bl	8004234 <HAL_GetTick>
 800602c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	2319      	movs	r3, #25
 8006034:	2201      	movs	r2, #1
 8006036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f8f0 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0be      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2221      	movs	r2, #33	; 0x21
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2210      	movs	r2, #16
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	893a      	ldrh	r2, [r7, #8]
 800606a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	2bff      	cmp	r3, #255	; 0xff
 800607a:	d90e      	bls.n	800609a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	22ff      	movs	r2, #255	; 0xff
 8006080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006086:	b2da      	uxtb	r2, r3
 8006088:	8979      	ldrh	r1, [r7, #10]
 800608a:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 fa7e 	bl	8006594 <I2C_TransferConfig>
 8006098:	e06c      	b.n	8006174 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	8979      	ldrh	r1, [r7, #10]
 80060ac:	4b48      	ldr	r3, [pc, #288]	; (80061d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fa6d 	bl	8006594 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80060ba:	e05b      	b.n	8006174 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	6a39      	ldr	r1, [r7, #32]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f8fc 	bl	80062be <I2C_WaitOnTXISFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e07b      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	781a      	ldrb	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d034      	beq.n	8006174 <HAL_I2C_Master_Transmit+0x184>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d130      	bne.n	8006174 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2200      	movs	r2, #0
 800611a:	2180      	movs	r1, #128	; 0x80
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f87f 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e04d      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2bff      	cmp	r3, #255	; 0xff
 8006134:	d90e      	bls.n	8006154 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006140:	b2da      	uxtb	r2, r3
 8006142:	8979      	ldrh	r1, [r7, #10]
 8006144:	2300      	movs	r3, #0
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fa21 	bl	8006594 <I2C_TransferConfig>
 8006152:	e00f      	b.n	8006174 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006162:	b2da      	uxtb	r2, r3
 8006164:	8979      	ldrh	r1, [r7, #10]
 8006166:	2300      	movs	r3, #0
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 fa10 	bl	8006594 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d19e      	bne.n	80060bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	6a39      	ldr	r1, [r7, #32]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f8e2 	bl	800634c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e01a      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2220      	movs	r2, #32
 8006198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80061a6:	400b      	ands	r3, r1
 80061a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	e000      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80061c6:	2302      	movs	r3, #2
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	80002000 	.word	0x80002000
 80061d4:	fe00e800 	.word	0xfe00e800

080061d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d103      	bne.n	80061f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2200      	movs	r2, #0
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b01      	cmp	r3, #1
 8006202:	d007      	beq.n	8006214 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	619a      	str	r2, [r3, #24]
  }
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006230:	e031      	b.n	8006296 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d02d      	beq.n	8006296 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623a:	f7fd fffb 	bl	8004234 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d122      	bne.n	8006296 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	4013      	ands	r3, r2
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	429a      	cmp	r2, r3
 800625e:	bf0c      	ite	eq
 8006260:	2301      	moveq	r3, #1
 8006262:	2300      	movne	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	461a      	mov	r2, r3
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	429a      	cmp	r2, r3
 800626c:	d113      	bne.n	8006296 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2220      	movs	r2, #32
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e00f      	b.n	80062b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	699a      	ldr	r2, [r3, #24]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d0be      	beq.n	8006232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3710      	adds	r7, #16
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	60b9      	str	r1, [r7, #8]
 80062c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ca:	e033      	b.n	8006334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68b9      	ldr	r1, [r7, #8]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 f87f 	bl	80063d4 <I2C_IsErrorOccurred>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e031      	b.n	8006344 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d025      	beq.n	8006334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e8:	f7fd ffa4 	bl	8004234 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d302      	bcc.n	80062fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d11a      	bne.n	8006334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b02      	cmp	r3, #2
 800630a:	d013      	beq.n	8006334 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006310:	f043 0220 	orr.w	r2, r3, #32
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2220      	movs	r2, #32
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e007      	b.n	8006344 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d1c4      	bne.n	80062cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006358:	e02f      	b.n	80063ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f000 f838 	bl	80063d4 <I2C_IsErrorOccurred>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e02d      	b.n	80063ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636e:	f7fd ff61 	bl	8004234 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d11a      	bne.n	80063ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b20      	cmp	r3, #32
 8006390:	d013      	beq.n	80063ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006396:	f043 0220 	orr.w	r2, r3, #32
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e007      	b.n	80063ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d1c8      	bne.n	800635a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08a      	sub	sp, #40	; 0x28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d068      	beq.n	80064d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2210      	movs	r2, #16
 8006406:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006408:	e049      	b.n	800649e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006410:	d045      	beq.n	800649e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006412:	f7fd ff0f 	bl	8004234 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <I2C_IsErrorOccurred+0x54>
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d13a      	bne.n	800649e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006432:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800643a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800644a:	d121      	bne.n	8006490 <I2C_IsErrorOccurred+0xbc>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006452:	d01d      	beq.n	8006490 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006454:	7cfb      	ldrb	r3, [r7, #19]
 8006456:	2b20      	cmp	r3, #32
 8006458:	d01a      	beq.n	8006490 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006468:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800646a:	f7fd fee3 	bl	8004234 <HAL_GetTick>
 800646e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006470:	e00e      	b.n	8006490 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006472:	f7fd fedf 	bl	8004234 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b19      	cmp	r3, #25
 800647e:	d907      	bls.n	8006490 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	f043 0320 	orr.w	r3, r3, #32
 8006486:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800648e:	e006      	b.n	800649e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f003 0320 	and.w	r3, r3, #32
 800649a:	2b20      	cmp	r3, #32
 800649c:	d1e9      	bne.n	8006472 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d003      	beq.n	80064b4 <I2C_IsErrorOccurred+0xe0>
 80064ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0aa      	beq.n	800640a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80064b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d103      	bne.n	80064c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2220      	movs	r2, #32
 80064c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	f043 0304 	orr.w	r3, r3, #4
 80064ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	f043 0301 	orr.w	r3, r3, #1
 80064ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f043 0308 	orr.w	r3, r3, #8
 800650c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006516:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	f043 0302 	orr.w	r3, r3, #2
 800652e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006538:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01c      	beq.n	8006582 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7ff fe45 	bl	80061d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6859      	ldr	r1, [r3, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <I2C_IsErrorOccurred+0x1bc>)
 800655a:	400b      	ands	r3, r1
 800655c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	431a      	orrs	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2220      	movs	r2, #32
 800656e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006586:	4618      	mov	r0, r3
 8006588:	3728      	adds	r7, #40	; 0x28
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	fe00e800 	.word	0xfe00e800

08006594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	607b      	str	r3, [r7, #4]
 800659e:	460b      	mov	r3, r1
 80065a0:	817b      	strh	r3, [r7, #10]
 80065a2:	4613      	mov	r3, r2
 80065a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065a6:	897b      	ldrh	r3, [r7, #10]
 80065a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065ac:	7a7b      	ldrb	r3, [r7, #9]
 80065ae:	041b      	lsls	r3, r3, #16
 80065b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	4313      	orrs	r3, r2
 80065be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	0d5b      	lsrs	r3, r3, #21
 80065ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80065d2:	4b08      	ldr	r3, [pc, #32]	; (80065f4 <I2C_TransferConfig+0x60>)
 80065d4:	430b      	orrs	r3, r1
 80065d6:	43db      	mvns	r3, r3
 80065d8:	ea02 0103 	and.w	r1, r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	03ff63ff 	.word	0x03ff63ff

080065f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b20      	cmp	r3, #32
 800660c:	d138      	bne.n	8006680 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006618:	2302      	movs	r3, #2
 800661a:	e032      	b.n	8006682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2224      	movs	r2, #36	; 0x24
 8006628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800664a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6819      	ldr	r1, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f042 0201 	orr.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2220      	movs	r2, #32
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	e000      	b.n	8006682 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006680:	2302      	movs	r3, #2
  }
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d139      	bne.n	8006718 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066ae:	2302      	movs	r3, #2
 80066b0:	e033      	b.n	800671a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2224      	movs	r2, #36	; 0x24
 80066be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0201 	orr.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	e000      	b.n	800671a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006718:	2302      	movs	r3, #2
  }
}
 800671a:	4618      	mov	r0, r3
 800671c:	3714      	adds	r7, #20
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800672e:	af00      	add	r7, sp, #0
 8006730:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006734:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006738:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800673a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800673e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	f001 b83a 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800674e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006752:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 816f 	beq.w	8006a42 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006764:	4bb5      	ldr	r3, [pc, #724]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f003 030c 	and.w	r3, r3, #12
 800676c:	2b04      	cmp	r3, #4
 800676e:	d00c      	beq.n	800678a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006770:	4bb2      	ldr	r3, [pc, #712]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f003 030c 	and.w	r3, r3, #12
 8006778:	2b08      	cmp	r3, #8
 800677a:	d15c      	bne.n	8006836 <HAL_RCC_OscConfig+0x10e>
 800677c:	4baf      	ldr	r3, [pc, #700]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006788:	d155      	bne.n	8006836 <HAL_RCC_OscConfig+0x10e>
 800678a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800678e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006792:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8006796:	fa93 f3a3 	rbit	r3, r3
 800679a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800679e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067a2:	fab3 f383 	clz	r3, r3
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d102      	bne.n	80067bc <HAL_RCC_OscConfig+0x94>
 80067b6:	4ba1      	ldr	r3, [pc, #644]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	e015      	b.n	80067e8 <HAL_RCC_OscConfig+0xc0>
 80067bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067c0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80067c8:	fa93 f3a3 	rbit	r3, r3
 80067cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80067d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80067d8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80067dc:	fa93 f3a3 	rbit	r3, r3
 80067e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80067e4:	4b95      	ldr	r3, [pc, #596]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80067e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067ec:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80067f0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80067f4:	fa92 f2a2 	rbit	r2, r2
 80067f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80067fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006800:	fab2 f282 	clz	r2, r2
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	f042 0220 	orr.w	r2, r2, #32
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	f002 021f 	and.w	r2, r2, #31
 8006810:	2101      	movs	r1, #1
 8006812:	fa01 f202 	lsl.w	r2, r1, r2
 8006816:	4013      	ands	r3, r2
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8111 	beq.w	8006a40 <HAL_RCC_OscConfig+0x318>
 800681e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006822:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	f040 8108 	bne.w	8006a40 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	f000 bfc6 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006836:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800683a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006846:	d106      	bne.n	8006856 <HAL_RCC_OscConfig+0x12e>
 8006848:	4b7c      	ldr	r3, [pc, #496]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7b      	ldr	r2, [pc, #492]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 800684e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e036      	b.n	80068c4 <HAL_RCC_OscConfig+0x19c>
 8006856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800685a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10c      	bne.n	8006880 <HAL_RCC_OscConfig+0x158>
 8006866:	4b75      	ldr	r3, [pc, #468]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a74      	ldr	r2, [pc, #464]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 800686c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4b72      	ldr	r3, [pc, #456]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a71      	ldr	r2, [pc, #452]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	e021      	b.n	80068c4 <HAL_RCC_OscConfig+0x19c>
 8006880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006884:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006890:	d10c      	bne.n	80068ac <HAL_RCC_OscConfig+0x184>
 8006892:	4b6a      	ldr	r3, [pc, #424]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a69      	ldr	r2, [pc, #420]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800689c:	6013      	str	r3, [r2, #0]
 800689e:	4b67      	ldr	r3, [pc, #412]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a66      	ldr	r2, [pc, #408]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80068a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a8:	6013      	str	r3, [r2, #0]
 80068aa:	e00b      	b.n	80068c4 <HAL_RCC_OscConfig+0x19c>
 80068ac:	4b63      	ldr	r3, [pc, #396]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a62      	ldr	r2, [pc, #392]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80068b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	4b60      	ldr	r3, [pc, #384]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a5f      	ldr	r2, [pc, #380]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80068be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068c2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80068c8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d059      	beq.n	8006988 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068d4:	f7fd fcae 	bl	8004234 <HAL_GetTick>
 80068d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068dc:	e00a      	b.n	80068f4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068de:	f7fd fca9 	bl	8004234 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b64      	cmp	r3, #100	; 0x64
 80068ec:	d902      	bls.n	80068f4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	f000 bf67 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>
 80068f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068f8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068fc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8006900:	fa93 f3a3 	rbit	r3, r3
 8006904:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8006908:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690c:	fab3 f383 	clz	r3, r3
 8006910:	b2db      	uxtb	r3, r3
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f043 0301 	orr.w	r3, r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d102      	bne.n	8006926 <HAL_RCC_OscConfig+0x1fe>
 8006920:	4b46      	ldr	r3, [pc, #280]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	e015      	b.n	8006952 <HAL_RCC_OscConfig+0x22a>
 8006926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800692a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8006932:	fa93 f3a3 	rbit	r3, r3
 8006936:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800693a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800693e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006942:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8006946:	fa93 f3a3 	rbit	r3, r3
 800694a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800694e:	4b3b      	ldr	r3, [pc, #236]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006956:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800695a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800695e:	fa92 f2a2 	rbit	r2, r2
 8006962:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8006966:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800696a:	fab2 f282 	clz	r2, r2
 800696e:	b2d2      	uxtb	r2, r2
 8006970:	f042 0220 	orr.w	r2, r2, #32
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	f002 021f 	and.w	r2, r2, #31
 800697a:	2101      	movs	r1, #1
 800697c:	fa01 f202 	lsl.w	r2, r1, r2
 8006980:	4013      	ands	r3, r2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0ab      	beq.n	80068de <HAL_RCC_OscConfig+0x1b6>
 8006986:	e05c      	b.n	8006a42 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006988:	f7fd fc54 	bl	8004234 <HAL_GetTick>
 800698c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006990:	e00a      	b.n	80069a8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006992:	f7fd fc4f 	bl	8004234 <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b64      	cmp	r3, #100	; 0x64
 80069a0:	d902      	bls.n	80069a8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	f000 bf0d 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>
 80069a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069ac:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80069b4:	fa93 f3a3 	rbit	r3, r3
 80069b8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80069bc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069c0:	fab3 f383 	clz	r3, r3
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d102      	bne.n	80069da <HAL_RCC_OscConfig+0x2b2>
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	e015      	b.n	8006a06 <HAL_RCC_OscConfig+0x2de>
 80069da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80069e6:	fa93 f3a3 	rbit	r3, r3
 80069ea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80069ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80069f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80069fa:	fa93 f3a3 	rbit	r3, r3
 80069fe:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8006a02:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <HAL_RCC_OscConfig+0x314>)
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a0a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8006a0e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8006a12:	fa92 f2a2 	rbit	r2, r2
 8006a16:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006a1a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8006a1e:	fab2 f282 	clz	r2, r2
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	f042 0220 	orr.w	r2, r2, #32
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	f002 021f 	and.w	r2, r2, #31
 8006a2e:	2101      	movs	r1, #1
 8006a30:	fa01 f202 	lsl.w	r2, r1, r2
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1ab      	bne.n	8006992 <HAL_RCC_OscConfig+0x26a>
 8006a3a:	e002      	b.n	8006a42 <HAL_RCC_OscConfig+0x31a>
 8006a3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006a46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 817f 	beq.w	8006d56 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006a58:	4ba7      	ldr	r3, [pc, #668]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f003 030c 	and.w	r3, r3, #12
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00c      	beq.n	8006a7e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006a64:	4ba4      	ldr	r3, [pc, #656]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f003 030c 	and.w	r3, r3, #12
 8006a6c:	2b08      	cmp	r3, #8
 8006a6e:	d173      	bne.n	8006b58 <HAL_RCC_OscConfig+0x430>
 8006a70:	4ba1      	ldr	r3, [pc, #644]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8006a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7c:	d16c      	bne.n	8006b58 <HAL_RCC_OscConfig+0x430>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a84:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8006a88:	fa93 f3a3 	rbit	r3, r3
 8006a8c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006a90:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a94:	fab3 f383 	clz	r3, r3
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d102      	bne.n	8006aae <HAL_RCC_OscConfig+0x386>
 8006aa8:	4b93      	ldr	r3, [pc, #588]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	e013      	b.n	8006ad6 <HAL_RCC_OscConfig+0x3ae>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8006ab8:	fa93 f3a3 	rbit	r3, r3
 8006abc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8006ac6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8006aca:	fa93 f3a3 	rbit	r3, r3
 8006ace:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8006ad2:	4b89      	ldr	r3, [pc, #548]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8006adc:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8006ae0:	fa92 f2a2 	rbit	r2, r2
 8006ae4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8006ae8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8006aec:	fab2 f282 	clz	r2, r2
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	f042 0220 	orr.w	r2, r2, #32
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	f002 021f 	and.w	r2, r2, #31
 8006afc:	2101      	movs	r1, #1
 8006afe:	fa01 f202 	lsl.w	r2, r1, r2
 8006b02:	4013      	ands	r3, r2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <HAL_RCC_OscConfig+0x3f6>
 8006b08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b0c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d002      	beq.n	8006b1e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f000 be52 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b1e:	4b76      	ldr	r3, [pc, #472]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b2a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	21f8      	movs	r1, #248	; 0xf8
 8006b34:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b38:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006b3c:	fa91 f1a1 	rbit	r1, r1
 8006b40:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8006b44:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006b48:	fab1 f181 	clz	r1, r1
 8006b4c:	b2c9      	uxtb	r1, r1
 8006b4e:	408b      	lsls	r3, r1
 8006b50:	4969      	ldr	r1, [pc, #420]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b56:	e0fe      	b.n	8006d56 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006b5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8088 	beq.w	8006c7a <HAL_RCC_OscConfig+0x552>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006b74:	fa93 f3a3 	rbit	r3, r3
 8006b78:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006b7c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b80:	fab3 f383 	clz	r3, r3
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006b8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	461a      	mov	r2, r3
 8006b92:	2301      	movs	r3, #1
 8006b94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b96:	f7fd fb4d 	bl	8004234 <HAL_GetTick>
 8006b9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b9e:	e00a      	b.n	8006bb6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ba0:	f7fd fb48 	bl	8004234 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d902      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	f000 be06 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bbc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006bc0:	fa93 f3a3 	rbit	r3, r3
 8006bc4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8006bc8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bcc:	fab3 f383 	clz	r3, r3
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	095b      	lsrs	r3, r3, #5
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d102      	bne.n	8006be6 <HAL_RCC_OscConfig+0x4be>
 8006be0:	4b45      	ldr	r3, [pc, #276]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	e013      	b.n	8006c0e <HAL_RCC_OscConfig+0x4e6>
 8006be6:	2302      	movs	r3, #2
 8006be8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bec:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8006bf0:	fa93 f3a3 	rbit	r3, r3
 8006bf4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8006bfe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006c02:	fa93 f3a3 	rbit	r3, r3
 8006c06:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006c0a:	4b3b      	ldr	r3, [pc, #236]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	2202      	movs	r2, #2
 8006c10:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8006c14:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006c18:	fa92 f2a2 	rbit	r2, r2
 8006c1c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8006c20:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006c24:	fab2 f282 	clz	r2, r2
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	f042 0220 	orr.w	r2, r2, #32
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	f002 021f 	and.w	r2, r2, #31
 8006c34:	2101      	movs	r1, #1
 8006c36:	fa01 f202 	lsl.w	r2, r1, r2
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d0af      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c40:	4b2d      	ldr	r3, [pc, #180]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006c4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	21f8      	movs	r1, #248	; 0xf8
 8006c56:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c5a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006c5e:	fa91 f1a1 	rbit	r1, r1
 8006c62:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006c66:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006c6a:	fab1 f181 	clz	r1, r1
 8006c6e:	b2c9      	uxtb	r1, r1
 8006c70:	408b      	lsls	r3, r1
 8006c72:	4921      	ldr	r1, [pc, #132]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	600b      	str	r3, [r1, #0]
 8006c78:	e06d      	b.n	8006d56 <HAL_RCC_OscConfig+0x62e>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c80:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006c84:	fa93 f3a3 	rbit	r3, r3
 8006c88:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8006c8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c90:	fab3 f383 	clz	r3, r3
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006c9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca6:	f7fd fac5 	bl	8004234 <HAL_GetTick>
 8006caa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cae:	e00a      	b.n	8006cc6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006cb0:	f7fd fac0 	bl	8004234 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d902      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	f000 bd7e 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ccc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cd0:	fa93 f3a3 	rbit	r3, r3
 8006cd4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8006cd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cdc:	fab3 f383 	clz	r3, r3
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	f043 0301 	orr.w	r3, r3, #1
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d105      	bne.n	8006cfc <HAL_RCC_OscConfig+0x5d4>
 8006cf0:	4b01      	ldr	r3, [pc, #4]	; (8006cf8 <HAL_RCC_OscConfig+0x5d0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	e016      	b.n	8006d24 <HAL_RCC_OscConfig+0x5fc>
 8006cf6:	bf00      	nop
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d06:	fa93 f3a3 	rbit	r3, r3
 8006d0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d0e:	2302      	movs	r3, #2
 8006d10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d14:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006d18:	fa93 f3a3 	rbit	r3, r3
 8006d1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d20:	4bbf      	ldr	r3, [pc, #764]	; (8007020 <HAL_RCC_OscConfig+0x8f8>)
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	2202      	movs	r2, #2
 8006d26:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8006d2a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006d2e:	fa92 f2a2 	rbit	r2, r2
 8006d32:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8006d36:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006d3a:	fab2 f282 	clz	r2, r2
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	f042 0220 	orr.w	r2, r2, #32
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	f002 021f 	and.w	r2, r2, #31
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d50:	4013      	ands	r3, r2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1ac      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8113 	beq.w	8006f92 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006d70:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d07c      	beq.n	8006e76 <HAL_RCC_OscConfig+0x74e>
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d86:	fa93 f3a3 	rbit	r3, r3
 8006d8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8006d8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d92:	fab3 f383 	clz	r3, r3
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4ba2      	ldr	r3, [pc, #648]	; (8007024 <HAL_RCC_OscConfig+0x8fc>)
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	461a      	mov	r2, r3
 8006da2:	2301      	movs	r3, #1
 8006da4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006da6:	f7fd fa45 	bl	8004234 <HAL_GetTick>
 8006daa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006db0:	f7fd fa40 	bl	8004234 <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d902      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	f000 bcfe 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dd0:	fa93 f2a3 	rbit	r2, r3
 8006dd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dd8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006de6:	2202      	movs	r2, #2
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	fa93 f2a3 	rbit	r2, r3
 8006df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e06:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	fa93 f2a3 	rbit	r2, r3
 8006e1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e20:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006e24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e26:	4b7e      	ldr	r3, [pc, #504]	; (8007020 <HAL_RCC_OscConfig+0x8f8>)
 8006e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e32:	2102      	movs	r1, #2
 8006e34:	6019      	str	r1, [r3, #0]
 8006e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e3a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	fa93 f1a3 	rbit	r1, r3
 8006e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e48:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e4c:	6019      	str	r1, [r3, #0]
  return result;
 8006e4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e52:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	fab3 f383 	clz	r3, r3
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	2101      	movs	r1, #1
 8006e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6e:	4013      	ands	r3, r2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d09d      	beq.n	8006db0 <HAL_RCC_OscConfig+0x688>
 8006e74:	e08d      	b.n	8006f92 <HAL_RCC_OscConfig+0x86a>
 8006e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e7a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e86:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	fa93 f2a3 	rbit	r2, r3
 8006e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006e98:	601a      	str	r2, [r3, #0]
  return result;
 8006e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006e9e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ea2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ea4:	fab3 f383 	clz	r3, r3
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4b5d      	ldr	r3, [pc, #372]	; (8007024 <HAL_RCC_OscConfig+0x8fc>)
 8006eae:	4413      	add	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eb8:	f7fd f9bc 	bl	8004234 <HAL_GetTick>
 8006ebc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ec0:	e00a      	b.n	8006ed8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ec2:	f7fd f9b7 	bl	8004234 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d902      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	f000 bc75 	b.w	80077c2 <HAL_RCC_OscConfig+0x109a>
 8006ed8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006edc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ee8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	fa93 f2a3 	rbit	r2, r3
 8006ef2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006ef6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f04:	2202      	movs	r2, #2
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	fa93 f2a3 	rbit	r2, r3
 8006f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f24:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f28:	2202      	movs	r2, #2
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f30:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	fa93 f2a3 	rbit	r2, r3
 8006f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f3e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f42:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f44:	4b36      	ldr	r3, [pc, #216]	; (8007020 <HAL_RCC_OscConfig+0x8f8>)
 8006f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f50:	2102      	movs	r1, #2
 8006f52:	6019      	str	r1, [r3, #0]
 8006f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	fa93 f1a3 	rbit	r1, r3
 8006f62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f66:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006f6a:	6019      	str	r1, [r3, #0]
  return result;
 8006f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	fab3 f383 	clz	r3, r3
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	f003 031f 	and.w	r3, r3, #31
 8006f86:	2101      	movs	r1, #1
 8006f88:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d197      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006f96:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 81a5 	beq.w	80072f2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fae:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <HAL_RCC_OscConfig+0x8f8>)
 8006fb0:	69db      	ldr	r3, [r3, #28]
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d116      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	4b19      	ldr	r3, [pc, #100]	; (8007020 <HAL_RCC_OscConfig+0x8f8>)
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	4a18      	ldr	r2, [pc, #96]	; (8007020 <HAL_RCC_OscConfig+0x8f8>)
 8006fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	61d3      	str	r3, [r2, #28]
 8006fc6:	4b16      	ldr	r3, [pc, #88]	; (8007020 <HAL_RCC_OscConfig+0x8f8>)
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8006fdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fe0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <HAL_RCC_OscConfig+0x900>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d121      	bne.n	8007038 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <HAL_RCC_OscConfig+0x900>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a0b      	ldr	r2, [pc, #44]	; (8007028 <HAL_RCC_OscConfig+0x900>)
 8006ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ffe:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007000:	f7fd f918 	bl	8004234 <HAL_GetTick>
 8007004:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007008:	e010      	b.n	800702c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800700a:	f7fd f913 	bl	8004234 <HAL_GetTick>
 800700e:	4602      	mov	r2, r0
 8007010:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b64      	cmp	r3, #100	; 0x64
 8007018:	d908      	bls.n	800702c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e3d1      	b.n	80077c2 <HAL_RCC_OscConfig+0x109a>
 800701e:	bf00      	nop
 8007020:	40021000 	.word	0x40021000
 8007024:	10908120 	.word	0x10908120
 8007028:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800702c:	4b8d      	ldr	r3, [pc, #564]	; (8007264 <HAL_RCC_OscConfig+0xb3c>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0e8      	beq.n	800700a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800703c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d106      	bne.n	8007056 <HAL_RCC_OscConfig+0x92e>
 8007048:	4b87      	ldr	r3, [pc, #540]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	4a86      	ldr	r2, [pc, #536]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 800704e:	f043 0301 	orr.w	r3, r3, #1
 8007052:	6213      	str	r3, [r2, #32]
 8007054:	e035      	b.n	80070c2 <HAL_RCC_OscConfig+0x99a>
 8007056:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800705a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0x958>
 8007066:	4b80      	ldr	r3, [pc, #512]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	4a7f      	ldr	r2, [pc, #508]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 800706c:	f023 0301 	bic.w	r3, r3, #1
 8007070:	6213      	str	r3, [r2, #32]
 8007072:	4b7d      	ldr	r3, [pc, #500]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	4a7c      	ldr	r2, [pc, #496]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 8007078:	f023 0304 	bic.w	r3, r3, #4
 800707c:	6213      	str	r3, [r2, #32]
 800707e:	e020      	b.n	80070c2 <HAL_RCC_OscConfig+0x99a>
 8007080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007084:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2b05      	cmp	r3, #5
 800708e:	d10c      	bne.n	80070aa <HAL_RCC_OscConfig+0x982>
 8007090:	4b75      	ldr	r3, [pc, #468]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 8007092:	6a1b      	ldr	r3, [r3, #32]
 8007094:	4a74      	ldr	r2, [pc, #464]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 8007096:	f043 0304 	orr.w	r3, r3, #4
 800709a:	6213      	str	r3, [r2, #32]
 800709c:	4b72      	ldr	r3, [pc, #456]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	4a71      	ldr	r2, [pc, #452]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	6213      	str	r3, [r2, #32]
 80070a8:	e00b      	b.n	80070c2 <HAL_RCC_OscConfig+0x99a>
 80070aa:	4b6f      	ldr	r3, [pc, #444]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	4a6e      	ldr	r2, [pc, #440]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	6213      	str	r3, [r2, #32]
 80070b6:	4b6c      	ldr	r3, [pc, #432]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	4a6b      	ldr	r2, [pc, #428]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 80070bc:	f023 0304 	bic.w	r3, r3, #4
 80070c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070c6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 8081 	beq.w	80071d6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070d4:	f7fd f8ae 	bl	8004234 <HAL_GetTick>
 80070d8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070dc:	e00b      	b.n	80070f6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070de:	f7fd f8a9 	bl	8004234 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e365      	b.n	80077c2 <HAL_RCC_OscConfig+0x109a>
 80070f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80070fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80070fe:	2202      	movs	r2, #2
 8007100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007102:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007106:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	fa93 f2a3 	rbit	r2, r3
 8007110:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007114:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800711e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007122:	2202      	movs	r2, #2
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800712a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	fa93 f2a3 	rbit	r2, r3
 8007134:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007138:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800713c:	601a      	str	r2, [r3, #0]
  return result;
 800713e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007142:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007146:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007148:	fab3 f383 	clz	r3, r3
 800714c:	b2db      	uxtb	r3, r3
 800714e:	095b      	lsrs	r3, r3, #5
 8007150:	b2db      	uxtb	r3, r3
 8007152:	f043 0302 	orr.w	r3, r3, #2
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b02      	cmp	r3, #2
 800715a:	d102      	bne.n	8007162 <HAL_RCC_OscConfig+0xa3a>
 800715c:	4b42      	ldr	r3, [pc, #264]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 800715e:	6a1b      	ldr	r3, [r3, #32]
 8007160:	e013      	b.n	800718a <HAL_RCC_OscConfig+0xa62>
 8007162:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007166:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800716a:	2202      	movs	r2, #2
 800716c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800716e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007172:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	fa93 f2a3 	rbit	r2, r3
 800717c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007180:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	4b38      	ldr	r3, [pc, #224]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 8007188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800718e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007192:	2102      	movs	r1, #2
 8007194:	6011      	str	r1, [r2, #0]
 8007196:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800719a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	fa92 f1a2 	rbit	r1, r2
 80071a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80071a8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80071ac:	6011      	str	r1, [r2, #0]
  return result;
 80071ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80071b2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	fab2 f282 	clz	r2, r2
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	f002 021f 	and.w	r2, r2, #31
 80071c8:	2101      	movs	r1, #1
 80071ca:	fa01 f202 	lsl.w	r2, r1, r2
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d084      	beq.n	80070de <HAL_RCC_OscConfig+0x9b6>
 80071d4:	e083      	b.n	80072de <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071d6:	f7fd f82d 	bl	8004234 <HAL_GetTick>
 80071da:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071de:	e00b      	b.n	80071f8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071e0:	f7fd f828 	bl	8004234 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d901      	bls.n	80071f8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e2e4      	b.n	80077c2 <HAL_RCC_OscConfig+0x109a>
 80071f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80071fc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007200:	2202      	movs	r2, #2
 8007202:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007208:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	fa93 f2a3 	rbit	r2, r3
 8007212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007216:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007220:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007224:	2202      	movs	r2, #2
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800722c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	fa93 f2a3 	rbit	r2, r3
 8007236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800723a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800723e:	601a      	str	r2, [r3, #0]
  return result;
 8007240:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007244:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007248:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800724a:	fab3 f383 	clz	r3, r3
 800724e:	b2db      	uxtb	r3, r3
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f043 0302 	orr.w	r3, r3, #2
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b02      	cmp	r3, #2
 800725c:	d106      	bne.n	800726c <HAL_RCC_OscConfig+0xb44>
 800725e:	4b02      	ldr	r3, [pc, #8]	; (8007268 <HAL_RCC_OscConfig+0xb40>)
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	e017      	b.n	8007294 <HAL_RCC_OscConfig+0xb6c>
 8007264:	40007000 	.word	0x40007000
 8007268:	40021000 	.word	0x40021000
 800726c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007270:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007274:	2202      	movs	r2, #2
 8007276:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800727c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	fa93 f2a3 	rbit	r2, r3
 8007286:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800728a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	4bb3      	ldr	r3, [pc, #716]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 8007292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007294:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007298:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800729c:	2102      	movs	r1, #2
 800729e:	6011      	str	r1, [r2, #0]
 80072a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80072a4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80072a8:	6812      	ldr	r2, [r2, #0]
 80072aa:	fa92 f1a2 	rbit	r1, r2
 80072ae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80072b2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80072b6:	6011      	str	r1, [r2, #0]
  return result;
 80072b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80072bc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	fab2 f282 	clz	r2, r2
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072cc:	b2d2      	uxtb	r2, r2
 80072ce:	f002 021f 	and.w	r2, r2, #31
 80072d2:	2101      	movs	r1, #1
 80072d4:	fa01 f202 	lsl.w	r2, r1, r2
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d180      	bne.n	80071e0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80072de:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d105      	bne.n	80072f2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072e6:	4b9e      	ldr	r3, [pc, #632]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	4a9d      	ldr	r2, [pc, #628]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 80072ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80072f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 825e 	beq.w	80077c0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007304:	4b96      	ldr	r3, [pc, #600]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	2b08      	cmp	r3, #8
 800730e:	f000 821f 	beq.w	8007750 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007312:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007316:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	2b02      	cmp	r3, #2
 8007320:	f040 8170 	bne.w	8007604 <HAL_RCC_OscConfig+0xedc>
 8007324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007328:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800732c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007336:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	fa93 f2a3 	rbit	r2, r3
 8007340:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007344:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007348:	601a      	str	r2, [r3, #0]
  return result;
 800734a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800734e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007352:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007354:	fab3 f383 	clz	r3, r3
 8007358:	b2db      	uxtb	r3, r3
 800735a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800735e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	461a      	mov	r2, r3
 8007366:	2300      	movs	r3, #0
 8007368:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800736a:	f7fc ff63 	bl	8004234 <HAL_GetTick>
 800736e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007372:	e009      	b.n	8007388 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007374:	f7fc ff5e 	bl	8004234 <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e21c      	b.n	80077c2 <HAL_RCC_OscConfig+0x109a>
 8007388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800738c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800739a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	fa93 f2a3 	rbit	r2, r3
 80073a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073a8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80073ac:	601a      	str	r2, [r3, #0]
  return result;
 80073ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073b2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80073b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80073b8:	fab3 f383 	clz	r3, r3
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	095b      	lsrs	r3, r3, #5
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d102      	bne.n	80073d2 <HAL_RCC_OscConfig+0xcaa>
 80073cc:	4b64      	ldr	r3, [pc, #400]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	e027      	b.n	8007422 <HAL_RCC_OscConfig+0xcfa>
 80073d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073d6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80073da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073e4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	fa93 f2a3 	rbit	r2, r3
 80073ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80073fc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800740a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	fa93 f2a3 	rbit	r2, r3
 8007414:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007418:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	4b50      	ldr	r3, [pc, #320]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007426:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800742a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800742e:	6011      	str	r1, [r2, #0]
 8007430:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007434:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007438:	6812      	ldr	r2, [r2, #0]
 800743a:	fa92 f1a2 	rbit	r1, r2
 800743e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007442:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8007446:	6011      	str	r1, [r2, #0]
  return result;
 8007448:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800744c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8007450:	6812      	ldr	r2, [r2, #0]
 8007452:	fab2 f282 	clz	r2, r2
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	f042 0220 	orr.w	r2, r2, #32
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	f002 021f 	and.w	r2, r2, #31
 8007462:	2101      	movs	r1, #1
 8007464:	fa01 f202 	lsl.w	r2, r1, r2
 8007468:	4013      	ands	r3, r2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d182      	bne.n	8007374 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800746e:	4b3c      	ldr	r3, [pc, #240]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	f023 020f 	bic.w	r2, r3, #15
 8007476:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800747a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007482:	4937      	ldr	r1, [pc, #220]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 8007484:	4313      	orrs	r3, r2
 8007486:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007488:	4b35      	ldr	r3, [pc, #212]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8007490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007494:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6a19      	ldr	r1, [r3, #32]
 800749c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	430b      	orrs	r3, r1
 80074aa:	492d      	ldr	r1, [pc, #180]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	604b      	str	r3, [r1, #4]
 80074b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074b4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80074b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074c2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	fa93 f2a3 	rbit	r2, r3
 80074cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074d0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80074d4:	601a      	str	r2, [r3, #0]
  return result;
 80074d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80074da:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80074de:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074e0:	fab3 f383 	clz	r3, r3
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	461a      	mov	r2, r3
 80074f2:	2301      	movs	r3, #1
 80074f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074f6:	f7fc fe9d 	bl	8004234 <HAL_GetTick>
 80074fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80074fe:	e009      	b.n	8007514 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007500:	f7fc fe98 	bl	8004234 <HAL_GetTick>
 8007504:	4602      	mov	r2, r0
 8007506:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d901      	bls.n	8007514 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e156      	b.n	80077c2 <HAL_RCC_OscConfig+0x109a>
 8007514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007518:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800751c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007526:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	fa93 f2a3 	rbit	r2, r3
 8007530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007534:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007538:	601a      	str	r2, [r3, #0]
  return result;
 800753a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800753e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007542:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007544:	fab3 f383 	clz	r3, r3
 8007548:	b2db      	uxtb	r3, r3
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	d105      	bne.n	8007564 <HAL_RCC_OscConfig+0xe3c>
 8007558:	4b01      	ldr	r3, [pc, #4]	; (8007560 <HAL_RCC_OscConfig+0xe38>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	e02a      	b.n	80075b4 <HAL_RCC_OscConfig+0xe8c>
 800755e:	bf00      	nop
 8007560:	40021000 	.word	0x40021000
 8007564:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007568:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800756c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007576:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	fa93 f2a3 	rbit	r2, r3
 8007580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007584:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800758e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007592:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007596:	601a      	str	r2, [r3, #0]
 8007598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800759c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	fa93 f2a3 	rbit	r2, r3
 80075a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80075aa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	4b86      	ldr	r3, [pc, #536]	; (80077cc <HAL_RCC_OscConfig+0x10a4>)
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075b8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80075bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075c6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	fa92 f1a2 	rbit	r1, r2
 80075d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075d4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80075d8:	6011      	str	r1, [r2, #0]
  return result;
 80075da:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80075de:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80075e2:	6812      	ldr	r2, [r2, #0]
 80075e4:	fab2 f282 	clz	r2, r2
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	f042 0220 	orr.w	r2, r2, #32
 80075ee:	b2d2      	uxtb	r2, r2
 80075f0:	f002 021f 	and.w	r2, r2, #31
 80075f4:	2101      	movs	r1, #1
 80075f6:	fa01 f202 	lsl.w	r2, r1, r2
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	f43f af7f 	beq.w	8007500 <HAL_RCC_OscConfig+0xdd8>
 8007602:	e0dd      	b.n	80077c0 <HAL_RCC_OscConfig+0x1098>
 8007604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007608:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800760c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007612:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007616:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	fa93 f2a3 	rbit	r2, r3
 8007620:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007624:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007628:	601a      	str	r2, [r3, #0]
  return result;
 800762a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800762e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007632:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007634:	fab3 f383 	clz	r3, r3
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800763e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	461a      	mov	r2, r3
 8007646:	2300      	movs	r3, #0
 8007648:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800764a:	f7fc fdf3 	bl	8004234 <HAL_GetTick>
 800764e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007652:	e009      	b.n	8007668 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007654:	f7fc fdee 	bl	8004234 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e0ac      	b.n	80077c2 <HAL_RCC_OscConfig+0x109a>
 8007668:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800766c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800767a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	fa93 f2a3 	rbit	r2, r3
 8007684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007688:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800768c:	601a      	str	r2, [r3, #0]
  return result;
 800768e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007692:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007696:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007698:	fab3 f383 	clz	r3, r3
 800769c:	b2db      	uxtb	r3, r3
 800769e:	095b      	lsrs	r3, r3, #5
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	f043 0301 	orr.w	r3, r3, #1
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d102      	bne.n	80076b2 <HAL_RCC_OscConfig+0xf8a>
 80076ac:	4b47      	ldr	r3, [pc, #284]	; (80077cc <HAL_RCC_OscConfig+0x10a4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	e027      	b.n	8007702 <HAL_RCC_OscConfig+0xfda>
 80076b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076b6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80076ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	fa93 f2a3 	rbit	r2, r3
 80076ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076d2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076dc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80076e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	fa93 f2a3 	rbit	r2, r3
 80076f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80076f8:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	4b33      	ldr	r3, [pc, #204]	; (80077cc <HAL_RCC_OscConfig+0x10a4>)
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007706:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800770a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800770e:	6011      	str	r1, [r2, #0]
 8007710:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007714:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	fa92 f1a2 	rbit	r1, r2
 800771e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8007722:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8007726:	6011      	str	r1, [r2, #0]
  return result;
 8007728:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800772c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	fab2 f282 	clz	r2, r2
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	f042 0220 	orr.w	r2, r2, #32
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	f002 021f 	and.w	r2, r2, #31
 8007742:	2101      	movs	r1, #1
 8007744:	fa01 f202 	lsl.w	r2, r1, r2
 8007748:	4013      	ands	r3, r2
 800774a:	2b00      	cmp	r3, #0
 800774c:	d182      	bne.n	8007654 <HAL_RCC_OscConfig+0xf2c>
 800774e:	e037      	b.n	80077c0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007754:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e02e      	b.n	80077c2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007764:	4b19      	ldr	r3, [pc, #100]	; (80077cc <HAL_RCC_OscConfig+0x10a4>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800776c:	4b17      	ldr	r3, [pc, #92]	; (80077cc <HAL_RCC_OscConfig+0x10a4>)
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007774:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007778:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800777c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007780:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	429a      	cmp	r2, r3
 800778a:	d117      	bne.n	80077bc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800778c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007790:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8007798:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d10b      	bne.n	80077bc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80077a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077a8:	f003 020f 	and.w	r2, r3, #15
 80077ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80077b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d001      	beq.n	80077c0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	40021000 	.word	0x40021000

080077d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b09e      	sub	sp, #120	; 0x78
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e162      	b.n	8007aae <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077e8:	4b90      	ldr	r3, [pc, #576]	; (8007a2c <HAL_RCC_ClockConfig+0x25c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d910      	bls.n	8007818 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f6:	4b8d      	ldr	r3, [pc, #564]	; (8007a2c <HAL_RCC_ClockConfig+0x25c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f023 0207 	bic.w	r2, r3, #7
 80077fe:	498b      	ldr	r1, [pc, #556]	; (8007a2c <HAL_RCC_ClockConfig+0x25c>)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	4313      	orrs	r3, r2
 8007804:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007806:	4b89      	ldr	r3, [pc, #548]	; (8007a2c <HAL_RCC_ClockConfig+0x25c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d001      	beq.n	8007818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e14a      	b.n	8007aae <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d008      	beq.n	8007836 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007824:	4b82      	ldr	r3, [pc, #520]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	497f      	ldr	r1, [pc, #508]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 8007832:	4313      	orrs	r3, r2
 8007834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 80dc 	beq.w	80079fc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d13c      	bne.n	80078c6 <HAL_RCC_ClockConfig+0xf6>
 800784c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007850:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007854:	fa93 f3a3 	rbit	r3, r3
 8007858:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800785a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800785c:	fab3 f383 	clz	r3, r3
 8007860:	b2db      	uxtb	r3, r3
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	d102      	bne.n	8007876 <HAL_RCC_ClockConfig+0xa6>
 8007870:	4b6f      	ldr	r3, [pc, #444]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	e00f      	b.n	8007896 <HAL_RCC_ClockConfig+0xc6>
 8007876:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800787a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800787c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800787e:	fa93 f3a3 	rbit	r3, r3
 8007882:	667b      	str	r3, [r7, #100]	; 0x64
 8007884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007888:	663b      	str	r3, [r7, #96]	; 0x60
 800788a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800788c:	fa93 f3a3 	rbit	r3, r3
 8007890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007892:	4b67      	ldr	r3, [pc, #412]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800789a:	65ba      	str	r2, [r7, #88]	; 0x58
 800789c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800789e:	fa92 f2a2 	rbit	r2, r2
 80078a2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80078a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80078a6:	fab2 f282 	clz	r2, r2
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	f042 0220 	orr.w	r2, r2, #32
 80078b0:	b2d2      	uxtb	r2, r2
 80078b2:	f002 021f 	and.w	r2, r2, #31
 80078b6:	2101      	movs	r1, #1
 80078b8:	fa01 f202 	lsl.w	r2, r1, r2
 80078bc:	4013      	ands	r3, r2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d17b      	bne.n	80079ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e0f3      	b.n	8007aae <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d13c      	bne.n	8007948 <HAL_RCC_ClockConfig+0x178>
 80078ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d6:	fa93 f3a3 	rbit	r3, r3
 80078da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80078dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078de:	fab3 f383 	clz	r3, r3
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	f043 0301 	orr.w	r3, r3, #1
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d102      	bne.n	80078f8 <HAL_RCC_ClockConfig+0x128>
 80078f2:	4b4f      	ldr	r3, [pc, #316]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	e00f      	b.n	8007918 <HAL_RCC_ClockConfig+0x148>
 80078f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007900:	fa93 f3a3 	rbit	r3, r3
 8007904:	647b      	str	r3, [r7, #68]	; 0x44
 8007906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800790a:	643b      	str	r3, [r7, #64]	; 0x40
 800790c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790e:	fa93 f3a3 	rbit	r3, r3
 8007912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007914:	4b46      	ldr	r3, [pc, #280]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800791c:	63ba      	str	r2, [r7, #56]	; 0x38
 800791e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007920:	fa92 f2a2 	rbit	r2, r2
 8007924:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007928:	fab2 f282 	clz	r2, r2
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	f042 0220 	orr.w	r2, r2, #32
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	f002 021f 	and.w	r2, r2, #31
 8007938:	2101      	movs	r1, #1
 800793a:	fa01 f202 	lsl.w	r2, r1, r2
 800793e:	4013      	ands	r3, r2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d13a      	bne.n	80079ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e0b2      	b.n	8007aae <HAL_RCC_ClockConfig+0x2de>
 8007948:	2302      	movs	r3, #2
 800794a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	fa93 f3a3 	rbit	r3, r3
 8007952:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007956:	fab3 f383 	clz	r3, r3
 800795a:	b2db      	uxtb	r3, r3
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	b2db      	uxtb	r3, r3
 8007960:	f043 0301 	orr.w	r3, r3, #1
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b01      	cmp	r3, #1
 8007968:	d102      	bne.n	8007970 <HAL_RCC_ClockConfig+0x1a0>
 800796a:	4b31      	ldr	r3, [pc, #196]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	e00d      	b.n	800798c <HAL_RCC_ClockConfig+0x1bc>
 8007970:	2302      	movs	r3, #2
 8007972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007976:	fa93 f3a3 	rbit	r3, r3
 800797a:	627b      	str	r3, [r7, #36]	; 0x24
 800797c:	2302      	movs	r3, #2
 800797e:	623b      	str	r3, [r7, #32]
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	fa93 f3a3 	rbit	r3, r3
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	4b29      	ldr	r3, [pc, #164]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	2202      	movs	r2, #2
 800798e:	61ba      	str	r2, [r7, #24]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	fa92 f2a2 	rbit	r2, r2
 8007996:	617a      	str	r2, [r7, #20]
  return result;
 8007998:	697a      	ldr	r2, [r7, #20]
 800799a:	fab2 f282 	clz	r2, r2
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	f042 0220 	orr.w	r2, r2, #32
 80079a4:	b2d2      	uxtb	r2, r2
 80079a6:	f002 021f 	and.w	r2, r2, #31
 80079aa:	2101      	movs	r1, #1
 80079ac:	fa01 f202 	lsl.w	r2, r1, r2
 80079b0:	4013      	ands	r3, r2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e079      	b.n	8007aae <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079ba:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f023 0203 	bic.w	r2, r3, #3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	491a      	ldr	r1, [pc, #104]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079cc:	f7fc fc32 	bl	8004234 <HAL_GetTick>
 80079d0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d2:	e00a      	b.n	80079ea <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079d4:	f7fc fc2e 	bl	8004234 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e061      	b.n	8007aae <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ea:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <HAL_RCC_ClockConfig+0x260>)
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f003 020c 	and.w	r2, r3, #12
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d1eb      	bne.n	80079d4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079fc:	4b0b      	ldr	r3, [pc, #44]	; (8007a2c <HAL_RCC_ClockConfig+0x25c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d214      	bcs.n	8007a34 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a0a:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <HAL_RCC_ClockConfig+0x25c>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f023 0207 	bic.w	r2, r3, #7
 8007a12:	4906      	ldr	r1, [pc, #24]	; (8007a2c <HAL_RCC_ClockConfig+0x25c>)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a1a:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <HAL_RCC_ClockConfig+0x25c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0307 	and.w	r3, r3, #7
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d005      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e040      	b.n	8007aae <HAL_RCC_ClockConfig+0x2de>
 8007a2c:	40022000 	.word	0x40022000
 8007a30:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a40:	4b1d      	ldr	r3, [pc, #116]	; (8007ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	491a      	ldr	r1, [pc, #104]	; (8007ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d009      	beq.n	8007a72 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a5e:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	4912      	ldr	r1, [pc, #72]	; (8007ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007a72:	f000 f829 	bl	8007ac8 <HAL_RCC_GetSysClockFreq>
 8007a76:	4601      	mov	r1, r0
 8007a78:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <HAL_RCC_ClockConfig+0x2e8>)
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a80:	22f0      	movs	r2, #240	; 0xf0
 8007a82:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	fa92 f2a2 	rbit	r2, r2
 8007a8a:	60fa      	str	r2, [r7, #12]
  return result;
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	fab2 f282 	clz	r2, r2
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	40d3      	lsrs	r3, r2
 8007a96:	4a09      	ldr	r2, [pc, #36]	; (8007abc <HAL_RCC_ClockConfig+0x2ec>)
 8007a98:	5cd3      	ldrb	r3, [r2, r3]
 8007a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8007a9e:	4a08      	ldr	r2, [pc, #32]	; (8007ac0 <HAL_RCC_ClockConfig+0x2f0>)
 8007aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007aa2:	4b08      	ldr	r3, [pc, #32]	; (8007ac4 <HAL_RCC_ClockConfig+0x2f4>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fc fb80 	bl	80041ac <HAL_InitTick>
  
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3778      	adds	r7, #120	; 0x78
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	0800e184 	.word	0x0800e184
 8007ac0:	2000000c 	.word	0x2000000c
 8007ac4:	20000010 	.word	0x20000010

08007ac8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b08b      	sub	sp, #44	; 0x2c
 8007acc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61fb      	str	r3, [r7, #28]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61bb      	str	r3, [r7, #24]
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007ae2:	4b2a      	ldr	r3, [pc, #168]	; (8007b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	f003 030c 	and.w	r3, r3, #12
 8007aee:	2b04      	cmp	r3, #4
 8007af0:	d002      	beq.n	8007af8 <HAL_RCC_GetSysClockFreq+0x30>
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d003      	beq.n	8007afe <HAL_RCC_GetSysClockFreq+0x36>
 8007af6:	e03f      	b.n	8007b78 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007af8:	4b25      	ldr	r3, [pc, #148]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007afa:	623b      	str	r3, [r7, #32]
      break;
 8007afc:	e03f      	b.n	8007b7e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007b04:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8007b08:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	fa92 f2a2 	rbit	r2, r2
 8007b10:	607a      	str	r2, [r7, #4]
  return result;
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	fab2 f282 	clz	r2, r2
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	40d3      	lsrs	r3, r2
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007b1e:	5cd3      	ldrb	r3, [r2, r3]
 8007b20:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8007b22:	4b1a      	ldr	r3, [pc, #104]	; (8007b8c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	220f      	movs	r2, #15
 8007b2c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	fa92 f2a2 	rbit	r2, r2
 8007b34:	60fa      	str	r2, [r7, #12]
  return result;
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	fab2 f282 	clz	r2, r2
 8007b3c:	b2d2      	uxtb	r2, r2
 8007b3e:	40d3      	lsrs	r3, r2
 8007b40:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007b42:	5cd3      	ldrb	r3, [r2, r3]
 8007b44:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007b50:	4a0f      	ldr	r2, [pc, #60]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	fb02 f303 	mul.w	r3, r2, r3
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b60:	e007      	b.n	8007b72 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007b62:	4a0b      	ldr	r2, [pc, #44]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	fb02 f303 	mul.w	r3, r2, r3
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	623b      	str	r3, [r7, #32]
      break;
 8007b76:	e002      	b.n	8007b7e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007b7a:	623b      	str	r3, [r7, #32]
      break;
 8007b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	372c      	adds	r7, #44	; 0x2c
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	40021000 	.word	0x40021000
 8007b90:	007a1200 	.word	0x007a1200
 8007b94:	0800e19c 	.word	0x0800e19c
 8007b98:	0800e1ac 	.word	0x0800e1ac

08007b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ba0:	4b03      	ldr	r3, [pc, #12]	; (8007bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	2000000c 	.word	0x2000000c

08007bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007bba:	f7ff ffef 	bl	8007b9c <HAL_RCC_GetHCLKFreq>
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007bc8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007bcc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	fa92 f2a2 	rbit	r2, r2
 8007bd4:	603a      	str	r2, [r7, #0]
  return result;
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	fab2 f282 	clz	r2, r2
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	40d3      	lsrs	r3, r2
 8007be0:	4a04      	ldr	r2, [pc, #16]	; (8007bf4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007be2:	5cd3      	ldrb	r3, [r2, r3]
 8007be4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007be8:	4618      	mov	r0, r3
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	40021000 	.word	0x40021000
 8007bf4:	0800e194 	.word	0x0800e194

08007bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007bfe:	f7ff ffcd 	bl	8007b9c <HAL_RCC_GetHCLKFreq>
 8007c02:	4601      	mov	r1, r0
 8007c04:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8007c0c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007c10:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	fa92 f2a2 	rbit	r2, r2
 8007c18:	603a      	str	r2, [r7, #0]
  return result;
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	fab2 f282 	clz	r2, r2
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	40d3      	lsrs	r3, r2
 8007c24:	4a04      	ldr	r2, [pc, #16]	; (8007c38 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007c26:	5cd3      	ldrb	r3, [r2, r3]
 8007c28:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	40021000 	.word	0x40021000
 8007c38:	0800e194 	.word	0x0800e194

08007c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b092      	sub	sp, #72	; 0x48
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 80d4 	beq.w	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c60:	4b4e      	ldr	r3, [pc, #312]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c62:	69db      	ldr	r3, [r3, #28]
 8007c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10e      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c6c:	4b4b      	ldr	r3, [pc, #300]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	4a4a      	ldr	r2, [pc, #296]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c76:	61d3      	str	r3, [r2, #28]
 8007c78:	4b48      	ldr	r3, [pc, #288]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c80:	60bb      	str	r3, [r7, #8]
 8007c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c84:	2301      	movs	r3, #1
 8007c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c8a:	4b45      	ldr	r3, [pc, #276]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d118      	bne.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c96:	4b42      	ldr	r3, [pc, #264]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a41      	ldr	r2, [pc, #260]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ca0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ca2:	f7fc fac7 	bl	8004234 <HAL_GetTick>
 8007ca6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca8:	e008      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007caa:	f7fc fac3 	bl	8004234 <HAL_GetTick>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cb2:	1ad3      	subs	r3, r2, r3
 8007cb4:	2b64      	cmp	r3, #100	; 0x64
 8007cb6:	d901      	bls.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e1d6      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cbc:	4b38      	ldr	r3, [pc, #224]	; (8007da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d0f0      	beq.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007cc8:	4b34      	ldr	r3, [pc, #208]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 8084 	beq.w	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d07c      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ce8:	4b2c      	ldr	r3, [pc, #176]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cf6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	fa93 f3a3 	rbit	r3, r3
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8007d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d02:	fab3 f383 	clz	r3, r3
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	4b26      	ldr	r3, [pc, #152]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	461a      	mov	r2, r3
 8007d12:	2301      	movs	r3, #1
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	fa93 f3a3 	rbit	r3, r3
 8007d22:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8007d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d26:	fab3 f383 	clz	r3, r3
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4b1d      	ldr	r3, [pc, #116]	; (8007da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	461a      	mov	r2, r3
 8007d36:	2300      	movs	r3, #0
 8007d38:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007d3a:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d42:	f003 0301 	and.w	r3, r3, #1
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d04b      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4a:	f7fc fa73 	bl	8004234 <HAL_GetTick>
 8007d4e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d50:	e00a      	b.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d52:	f7fc fa6f 	bl	8004234 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e180      	b.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	fa93 f3a3 	rbit	r3, r3
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
 8007d74:	2302      	movs	r3, #2
 8007d76:	623b      	str	r3, [r7, #32]
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	fa93 f3a3 	rbit	r3, r3
 8007d7e:	61fb      	str	r3, [r7, #28]
  return result;
 8007d80:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d82:	fab3 f383 	clz	r3, r3
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f043 0302 	orr.w	r3, r3, #2
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d108      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007d96:	4b01      	ldr	r3, [pc, #4]	; (8007d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	e00d      	b.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8007d9c:	40021000 	.word	0x40021000
 8007da0:	40007000 	.word	0x40007000
 8007da4:	10908100 	.word	0x10908100
 8007da8:	2302      	movs	r3, #2
 8007daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	fa93 f3a3 	rbit	r3, r3
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	4b9a      	ldr	r3, [pc, #616]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db8:	2202      	movs	r2, #2
 8007dba:	613a      	str	r2, [r7, #16]
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	fa92 f2a2 	rbit	r2, r2
 8007dc2:	60fa      	str	r2, [r7, #12]
  return result;
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	fab2 f282 	clz	r2, r2
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dd0:	b2d2      	uxtb	r2, r2
 8007dd2:	f002 021f 	and.w	r2, r2, #31
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8007ddc:	4013      	ands	r3, r2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0b7      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007de2:	4b8f      	ldr	r3, [pc, #572]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	498c      	ldr	r1, [pc, #560]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007df4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d105      	bne.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dfc:	4b88      	ldr	r3, [pc, #544]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	4a87      	ldr	r2, [pc, #540]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d008      	beq.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e14:	4b82      	ldr	r3, [pc, #520]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e18:	f023 0203 	bic.w	r2, r3, #3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	497f      	ldr	r1, [pc, #508]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d008      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e32:	4b7b      	ldr	r3, [pc, #492]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	4978      	ldr	r1, [pc, #480]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d008      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e50:	4b73      	ldr	r3, [pc, #460]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	4970      	ldr	r1, [pc, #448]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e6e:	4b6c      	ldr	r3, [pc, #432]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e72:	f023 0210 	bic.w	r2, r3, #16
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	69db      	ldr	r3, [r3, #28]
 8007e7a:	4969      	ldr	r1, [pc, #420]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d008      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8007e8c:	4b64      	ldr	r3, [pc, #400]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e98:	4961      	ldr	r1, [pc, #388]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d008      	beq.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007eaa:	4b5d      	ldr	r3, [pc, #372]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eae:	f023 0220 	bic.w	r2, r3, #32
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	495a      	ldr	r1, [pc, #360]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d008      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ec8:	4b55      	ldr	r3, [pc, #340]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ecc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed4:	4952      	ldr	r1, [pc, #328]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d008      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ee6:	4b4e      	ldr	r3, [pc, #312]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	494b      	ldr	r1, [pc, #300]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 0310 	and.w	r3, r3, #16
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d008      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f04:	4b46      	ldr	r3, [pc, #280]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	4943      	ldr	r1, [pc, #268]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d008      	beq.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f22:	4b3f      	ldr	r3, [pc, #252]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2e:	493c      	ldr	r1, [pc, #240]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f40:	4b37      	ldr	r3, [pc, #220]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4c:	4934      	ldr	r1, [pc, #208]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8007f5e:	4b30      	ldr	r3, [pc, #192]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f62:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	492d      	ldr	r1, [pc, #180]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d008      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007f7c:	4b28      	ldr	r3, [pc, #160]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f88:	4925      	ldr	r1, [pc, #148]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d008      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8007f9a:	4b21      	ldr	r3, [pc, #132]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa6:	491e      	ldr	r1, [pc, #120]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007fb8:	4b19      	ldr	r3, [pc, #100]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc4:	4916      	ldr	r1, [pc, #88]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d008      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007fd6:	4b12      	ldr	r3, [pc, #72]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe2:	490f      	ldr	r1, [pc, #60]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d008      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008000:	4907      	ldr	r1, [pc, #28]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008002:	4313      	orrs	r3, r2
 8008004:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00c      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8008012:	4b03      	ldr	r3, [pc, #12]	; (8008020 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	e002      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800801e:	bf00      	nop
 8008020:	40021000 	.word	0x40021000
 8008024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008026:	4913      	ldr	r1, [pc, #76]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008028:	4313      	orrs	r3, r2
 800802a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d008      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008038:	4b0e      	ldr	r3, [pc, #56]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008044:	490b      	ldr	r1, [pc, #44]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008046:	4313      	orrs	r3, r2
 8008048:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d008      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8008056:	4b07      	ldr	r3, [pc, #28]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008062:	4904      	ldr	r1, [pc, #16]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008064:	4313      	orrs	r3, r2
 8008066:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3748      	adds	r7, #72	; 0x48
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	40021000 	.word	0x40021000

08008078 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e049      	b.n	800811e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008090:	b2db      	uxtb	r3, r3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fb fe78 	bl	8003d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f000 fcd2 	bl	8008a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b082      	sub	sp, #8
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d101      	bne.n	8008138 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e049      	b.n	80081cc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d106      	bne.n	8008152 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f841 	bl	80081d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2202      	movs	r2, #2
 8008156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f000 fc7b 	bl	8008a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2201      	movs	r2, #1
 800816e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081dc:	bf00      	nop
 80081de:	370c      	adds	r7, #12
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d109      	bne.n	800820c <HAL_TIM_PWM_Start+0x24>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b01      	cmp	r3, #1
 8008202:	bf14      	ite	ne
 8008204:	2301      	movne	r3, #1
 8008206:	2300      	moveq	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	e03c      	b.n	8008286 <HAL_TIM_PWM_Start+0x9e>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b04      	cmp	r3, #4
 8008210:	d109      	bne.n	8008226 <HAL_TIM_PWM_Start+0x3e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b01      	cmp	r3, #1
 800821c:	bf14      	ite	ne
 800821e:	2301      	movne	r3, #1
 8008220:	2300      	moveq	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	e02f      	b.n	8008286 <HAL_TIM_PWM_Start+0x9e>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b08      	cmp	r3, #8
 800822a:	d109      	bne.n	8008240 <HAL_TIM_PWM_Start+0x58>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008232:	b2db      	uxtb	r3, r3
 8008234:	2b01      	cmp	r3, #1
 8008236:	bf14      	ite	ne
 8008238:	2301      	movne	r3, #1
 800823a:	2300      	moveq	r3, #0
 800823c:	b2db      	uxtb	r3, r3
 800823e:	e022      	b.n	8008286 <HAL_TIM_PWM_Start+0x9e>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	2b0c      	cmp	r3, #12
 8008244:	d109      	bne.n	800825a <HAL_TIM_PWM_Start+0x72>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b01      	cmp	r3, #1
 8008250:	bf14      	ite	ne
 8008252:	2301      	movne	r3, #1
 8008254:	2300      	moveq	r3, #0
 8008256:	b2db      	uxtb	r3, r3
 8008258:	e015      	b.n	8008286 <HAL_TIM_PWM_Start+0x9e>
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b10      	cmp	r3, #16
 800825e:	d109      	bne.n	8008274 <HAL_TIM_PWM_Start+0x8c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b01      	cmp	r3, #1
 800826a:	bf14      	ite	ne
 800826c:	2301      	movne	r3, #1
 800826e:	2300      	moveq	r3, #0
 8008270:	b2db      	uxtb	r3, r3
 8008272:	e008      	b.n	8008286 <HAL_TIM_PWM_Start+0x9e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b01      	cmp	r3, #1
 800827e:	bf14      	ite	ne
 8008280:	2301      	movne	r3, #1
 8008282:	2300      	moveq	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e0a1      	b.n	80083d2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d104      	bne.n	800829e <HAL_TIM_PWM_Start+0xb6>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800829c:	e023      	b.n	80082e6 <HAL_TIM_PWM_Start+0xfe>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b04      	cmp	r3, #4
 80082a2:	d104      	bne.n	80082ae <HAL_TIM_PWM_Start+0xc6>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082ac:	e01b      	b.n	80082e6 <HAL_TIM_PWM_Start+0xfe>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d104      	bne.n	80082be <HAL_TIM_PWM_Start+0xd6>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082bc:	e013      	b.n	80082e6 <HAL_TIM_PWM_Start+0xfe>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b0c      	cmp	r3, #12
 80082c2:	d104      	bne.n	80082ce <HAL_TIM_PWM_Start+0xe6>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082cc:	e00b      	b.n	80082e6 <HAL_TIM_PWM_Start+0xfe>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b10      	cmp	r3, #16
 80082d2:	d104      	bne.n	80082de <HAL_TIM_PWM_Start+0xf6>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082dc:	e003      	b.n	80082e6 <HAL_TIM_PWM_Start+0xfe>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2202      	movs	r2, #2
 80082e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2201      	movs	r2, #1
 80082ec:	6839      	ldr	r1, [r7, #0]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fff4 	bl	80092dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a38      	ldr	r2, [pc, #224]	; (80083dc <HAL_TIM_PWM_Start+0x1f4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d018      	beq.n	8008330 <HAL_TIM_PWM_Start+0x148>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a37      	ldr	r2, [pc, #220]	; (80083e0 <HAL_TIM_PWM_Start+0x1f8>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d013      	beq.n	8008330 <HAL_TIM_PWM_Start+0x148>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a35      	ldr	r2, [pc, #212]	; (80083e4 <HAL_TIM_PWM_Start+0x1fc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00e      	beq.n	8008330 <HAL_TIM_PWM_Start+0x148>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a34      	ldr	r2, [pc, #208]	; (80083e8 <HAL_TIM_PWM_Start+0x200>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d009      	beq.n	8008330 <HAL_TIM_PWM_Start+0x148>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a32      	ldr	r2, [pc, #200]	; (80083ec <HAL_TIM_PWM_Start+0x204>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <HAL_TIM_PWM_Start+0x148>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a31      	ldr	r2, [pc, #196]	; (80083f0 <HAL_TIM_PWM_Start+0x208>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d101      	bne.n	8008334 <HAL_TIM_PWM_Start+0x14c>
 8008330:	2301      	movs	r3, #1
 8008332:	e000      	b.n	8008336 <HAL_TIM_PWM_Start+0x14e>
 8008334:	2300      	movs	r3, #0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d007      	beq.n	800834a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008348:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a23      	ldr	r2, [pc, #140]	; (80083dc <HAL_TIM_PWM_Start+0x1f4>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d01d      	beq.n	8008390 <HAL_TIM_PWM_Start+0x1a8>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835c:	d018      	beq.n	8008390 <HAL_TIM_PWM_Start+0x1a8>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a24      	ldr	r2, [pc, #144]	; (80083f4 <HAL_TIM_PWM_Start+0x20c>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d013      	beq.n	8008390 <HAL_TIM_PWM_Start+0x1a8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a22      	ldr	r2, [pc, #136]	; (80083f8 <HAL_TIM_PWM_Start+0x210>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00e      	beq.n	8008390 <HAL_TIM_PWM_Start+0x1a8>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a1a      	ldr	r2, [pc, #104]	; (80083e0 <HAL_TIM_PWM_Start+0x1f8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d009      	beq.n	8008390 <HAL_TIM_PWM_Start+0x1a8>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a18      	ldr	r2, [pc, #96]	; (80083e4 <HAL_TIM_PWM_Start+0x1fc>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d004      	beq.n	8008390 <HAL_TIM_PWM_Start+0x1a8>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a19      	ldr	r2, [pc, #100]	; (80083f0 <HAL_TIM_PWM_Start+0x208>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d115      	bne.n	80083bc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689a      	ldr	r2, [r3, #8]
 8008396:	4b19      	ldr	r3, [pc, #100]	; (80083fc <HAL_TIM_PWM_Start+0x214>)
 8008398:	4013      	ands	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2b06      	cmp	r3, #6
 80083a0:	d015      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1e6>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a8:	d011      	beq.n	80083ce <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0201 	orr.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ba:	e008      	b.n	80083ce <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
 80083cc:	e000      	b.n	80083d0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	40012c00 	.word	0x40012c00
 80083e0:	40013400 	.word	0x40013400
 80083e4:	40014000 	.word	0x40014000
 80083e8:	40014400 	.word	0x40014400
 80083ec:	40014800 	.word	0x40014800
 80083f0:	40015000 	.word	0x40015000
 80083f4:	40000400 	.word	0x40000400
 80083f8:	40000800 	.word	0x40000800
 80083fc:	00010007 	.word	0x00010007

08008400 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0302 	and.w	r3, r3, #2
 8008412:	2b02      	cmp	r3, #2
 8008414:	d122      	bne.n	800845c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b02      	cmp	r3, #2
 8008422:	d11b      	bne.n	800845c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f06f 0202 	mvn.w	r2, #2
 800842c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	f003 0303 	and.w	r3, r3, #3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d003      	beq.n	800844a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 faed 	bl	8008a22 <HAL_TIM_IC_CaptureCallback>
 8008448:	e005      	b.n	8008456 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fadf 	bl	8008a0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 faf0 	bl	8008a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	f003 0304 	and.w	r3, r3, #4
 8008466:	2b04      	cmp	r3, #4
 8008468:	d122      	bne.n	80084b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	f003 0304 	and.w	r3, r3, #4
 8008474:	2b04      	cmp	r3, #4
 8008476:	d11b      	bne.n	80084b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f06f 0204 	mvn.w	r2, #4
 8008480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2202      	movs	r2, #2
 8008486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fac3 	bl	8008a22 <HAL_TIM_IC_CaptureCallback>
 800849c:	e005      	b.n	80084aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fab5 	bl	8008a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 fac6 	bl	8008a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	2b08      	cmp	r3, #8
 80084bc:	d122      	bne.n	8008504 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d11b      	bne.n	8008504 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f06f 0208 	mvn.w	r2, #8
 80084d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2204      	movs	r2, #4
 80084da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f003 0303 	and.w	r3, r3, #3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa99 	bl	8008a22 <HAL_TIM_IC_CaptureCallback>
 80084f0:	e005      	b.n	80084fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fa8b 	bl	8008a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fa9c 	bl	8008a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f003 0310 	and.w	r3, r3, #16
 800850e:	2b10      	cmp	r3, #16
 8008510:	d122      	bne.n	8008558 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b10      	cmp	r3, #16
 800851e:	d11b      	bne.n	8008558 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f06f 0210 	mvn.w	r2, #16
 8008528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2208      	movs	r2, #8
 800852e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	69db      	ldr	r3, [r3, #28]
 8008536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa6f 	bl	8008a22 <HAL_TIM_IC_CaptureCallback>
 8008544:	e005      	b.n	8008552 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fa61 	bl	8008a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa72 	bl	8008a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	2b01      	cmp	r3, #1
 8008564:	d10e      	bne.n	8008584 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b01      	cmp	r3, #1
 8008572:	d107      	bne.n	8008584 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f06f 0201 	mvn.w	r2, #1
 800857c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fa3b 	bl	80089fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800858e:	2b80      	cmp	r3, #128	; 0x80
 8008590:	d10e      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859c:	2b80      	cmp	r3, #128	; 0x80
 800859e:	d107      	bne.n	80085b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 ff52 	bl	8009454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085be:	d10e      	bne.n	80085de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ca:	2b80      	cmp	r3, #128	; 0x80
 80085cc:	d107      	bne.n	80085de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80085d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 ff45 	bl	8009468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085e8:	2b40      	cmp	r3, #64	; 0x40
 80085ea:	d10e      	bne.n	800860a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f6:	2b40      	cmp	r3, #64	; 0x40
 80085f8:	d107      	bne.n	800860a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fa20 	bl	8008a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f003 0320 	and.w	r3, r3, #32
 8008614:	2b20      	cmp	r3, #32
 8008616:	d10e      	bne.n	8008636 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f003 0320 	and.w	r3, r3, #32
 8008622:	2b20      	cmp	r3, #32
 8008624:	d107      	bne.n	8008636 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f06f 0220 	mvn.w	r2, #32
 800862e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 ff05 	bl	8009440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008636:	bf00      	nop
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800865a:	2302      	movs	r3, #2
 800865c:	e0ff      	b.n	800885e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b14      	cmp	r3, #20
 800866a:	f200 80f0 	bhi.w	800884e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	080086c9 	.word	0x080086c9
 8008678:	0800884f 	.word	0x0800884f
 800867c:	0800884f 	.word	0x0800884f
 8008680:	0800884f 	.word	0x0800884f
 8008684:	08008709 	.word	0x08008709
 8008688:	0800884f 	.word	0x0800884f
 800868c:	0800884f 	.word	0x0800884f
 8008690:	0800884f 	.word	0x0800884f
 8008694:	0800874b 	.word	0x0800874b
 8008698:	0800884f 	.word	0x0800884f
 800869c:	0800884f 	.word	0x0800884f
 80086a0:	0800884f 	.word	0x0800884f
 80086a4:	0800878b 	.word	0x0800878b
 80086a8:	0800884f 	.word	0x0800884f
 80086ac:	0800884f 	.word	0x0800884f
 80086b0:	0800884f 	.word	0x0800884f
 80086b4:	080087cd 	.word	0x080087cd
 80086b8:	0800884f 	.word	0x0800884f
 80086bc:	0800884f 	.word	0x0800884f
 80086c0:	0800884f 	.word	0x0800884f
 80086c4:	0800880d 	.word	0x0800880d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fa64 	bl	8008b9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	699a      	ldr	r2, [r3, #24]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f042 0208 	orr.w	r2, r2, #8
 80086e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	699a      	ldr	r2, [r3, #24]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f022 0204 	bic.w	r2, r2, #4
 80086f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6999      	ldr	r1, [r3, #24]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	691a      	ldr	r2, [r3, #16]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	619a      	str	r2, [r3, #24]
      break;
 8008706:	e0a5      	b.n	8008854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 fade 	bl	8008cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	699a      	ldr	r2, [r3, #24]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699a      	ldr	r2, [r3, #24]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	6999      	ldr	r1, [r3, #24]
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	021a      	lsls	r2, r3, #8
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	619a      	str	r2, [r3, #24]
      break;
 8008748:	e084      	b.n	8008854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68b9      	ldr	r1, [r7, #8]
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fb51 	bl	8008df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	69da      	ldr	r2, [r3, #28]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f042 0208 	orr.w	r2, r2, #8
 8008764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	69da      	ldr	r2, [r3, #28]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 0204 	bic.w	r2, r2, #4
 8008774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69d9      	ldr	r1, [r3, #28]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	61da      	str	r2, [r3, #28]
      break;
 8008788:	e064      	b.n	8008854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68b9      	ldr	r1, [r7, #8]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fbc3 	bl	8008f1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	69da      	ldr	r2, [r3, #28]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	69da      	ldr	r2, [r3, #28]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	69d9      	ldr	r1, [r3, #28]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	021a      	lsls	r2, r3, #8
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	61da      	str	r2, [r3, #28]
      break;
 80087ca:	e043      	b.n	8008854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68b9      	ldr	r1, [r7, #8]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fc12 	bl	8008ffc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f042 0208 	orr.w	r2, r2, #8
 80087e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 0204 	bic.w	r2, r2, #4
 80087f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	691a      	ldr	r2, [r3, #16]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	430a      	orrs	r2, r1
 8008808:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800880a:	e023      	b.n	8008854 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68b9      	ldr	r1, [r7, #8]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fc5c 	bl	80090d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	021a      	lsls	r2, r3, #8
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800884c:	e002      	b.n	8008854 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	75fb      	strb	r3, [r7, #23]
      break;
 8008852:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800885c:	7dfb      	ldrb	r3, [r7, #23]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop

08008868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_TIM_ConfigClockSource+0x1c>
 8008880:	2302      	movs	r3, #2
 8008882:	e0b6      	b.n	80089f2 <HAL_TIM_ConfigClockSource+0x18a>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2202      	movs	r2, #2
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80088a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c0:	d03e      	beq.n	8008940 <HAL_TIM_ConfigClockSource+0xd8>
 80088c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c6:	f200 8087 	bhi.w	80089d8 <HAL_TIM_ConfigClockSource+0x170>
 80088ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ce:	f000 8086 	beq.w	80089de <HAL_TIM_ConfigClockSource+0x176>
 80088d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d6:	d87f      	bhi.n	80089d8 <HAL_TIM_ConfigClockSource+0x170>
 80088d8:	2b70      	cmp	r3, #112	; 0x70
 80088da:	d01a      	beq.n	8008912 <HAL_TIM_ConfigClockSource+0xaa>
 80088dc:	2b70      	cmp	r3, #112	; 0x70
 80088de:	d87b      	bhi.n	80089d8 <HAL_TIM_ConfigClockSource+0x170>
 80088e0:	2b60      	cmp	r3, #96	; 0x60
 80088e2:	d050      	beq.n	8008986 <HAL_TIM_ConfigClockSource+0x11e>
 80088e4:	2b60      	cmp	r3, #96	; 0x60
 80088e6:	d877      	bhi.n	80089d8 <HAL_TIM_ConfigClockSource+0x170>
 80088e8:	2b50      	cmp	r3, #80	; 0x50
 80088ea:	d03c      	beq.n	8008966 <HAL_TIM_ConfigClockSource+0xfe>
 80088ec:	2b50      	cmp	r3, #80	; 0x50
 80088ee:	d873      	bhi.n	80089d8 <HAL_TIM_ConfigClockSource+0x170>
 80088f0:	2b40      	cmp	r3, #64	; 0x40
 80088f2:	d058      	beq.n	80089a6 <HAL_TIM_ConfigClockSource+0x13e>
 80088f4:	2b40      	cmp	r3, #64	; 0x40
 80088f6:	d86f      	bhi.n	80089d8 <HAL_TIM_ConfigClockSource+0x170>
 80088f8:	2b30      	cmp	r3, #48	; 0x30
 80088fa:	d064      	beq.n	80089c6 <HAL_TIM_ConfigClockSource+0x15e>
 80088fc:	2b30      	cmp	r3, #48	; 0x30
 80088fe:	d86b      	bhi.n	80089d8 <HAL_TIM_ConfigClockSource+0x170>
 8008900:	2b20      	cmp	r3, #32
 8008902:	d060      	beq.n	80089c6 <HAL_TIM_ConfigClockSource+0x15e>
 8008904:	2b20      	cmp	r3, #32
 8008906:	d867      	bhi.n	80089d8 <HAL_TIM_ConfigClockSource+0x170>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d05c      	beq.n	80089c6 <HAL_TIM_ConfigClockSource+0x15e>
 800890c:	2b10      	cmp	r3, #16
 800890e:	d05a      	beq.n	80089c6 <HAL_TIM_ConfigClockSource+0x15e>
 8008910:	e062      	b.n	80089d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008922:	f000 fcbb 	bl	800929c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	609a      	str	r2, [r3, #8]
      break;
 800893e:	e04f      	b.n	80089e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008950:	f000 fca4 	bl	800929c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	689a      	ldr	r2, [r3, #8]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008962:	609a      	str	r2, [r3, #8]
      break;
 8008964:	e03c      	b.n	80089e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008972:	461a      	mov	r2, r3
 8008974:	f000 fc18 	bl	80091a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2150      	movs	r1, #80	; 0x50
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fc71 	bl	8009266 <TIM_ITRx_SetConfig>
      break;
 8008984:	e02c      	b.n	80089e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008992:	461a      	mov	r2, r3
 8008994:	f000 fc37 	bl	8009206 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2160      	movs	r1, #96	; 0x60
 800899e:	4618      	mov	r0, r3
 80089a0:	f000 fc61 	bl	8009266 <TIM_ITRx_SetConfig>
      break;
 80089a4:	e01c      	b.n	80089e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b2:	461a      	mov	r2, r3
 80089b4:	f000 fbf8 	bl	80091a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2140      	movs	r1, #64	; 0x40
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fc51 	bl	8009266 <TIM_ITRx_SetConfig>
      break;
 80089c4:	e00c      	b.n	80089e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f000 fc48 	bl	8009266 <TIM_ITRx_SetConfig>
      break;
 80089d6:	e003      	b.n	80089e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	73fb      	strb	r3, [r7, #15]
      break;
 80089dc:	e000      	b.n	80089e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80089de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b083      	sub	sp, #12
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a16:	bf00      	nop
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a3e:	bf00      	nop
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a42      	ldr	r2, [pc, #264]	; (8008b7c <TIM_Base_SetConfig+0x11c>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d013      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a7e:	d00f      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a3f      	ldr	r2, [pc, #252]	; (8008b80 <TIM_Base_SetConfig+0x120>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00b      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a3e      	ldr	r2, [pc, #248]	; (8008b84 <TIM_Base_SetConfig+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d007      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a3d      	ldr	r2, [pc, #244]	; (8008b88 <TIM_Base_SetConfig+0x128>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d003      	beq.n	8008aa0 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a3c      	ldr	r2, [pc, #240]	; (8008b8c <TIM_Base_SetConfig+0x12c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d108      	bne.n	8008ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a31      	ldr	r2, [pc, #196]	; (8008b7c <TIM_Base_SetConfig+0x11c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d01f      	beq.n	8008afa <TIM_Base_SetConfig+0x9a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac0:	d01b      	beq.n	8008afa <TIM_Base_SetConfig+0x9a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a2e      	ldr	r2, [pc, #184]	; (8008b80 <TIM_Base_SetConfig+0x120>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d017      	beq.n	8008afa <TIM_Base_SetConfig+0x9a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a2d      	ldr	r2, [pc, #180]	; (8008b84 <TIM_Base_SetConfig+0x124>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d013      	beq.n	8008afa <TIM_Base_SetConfig+0x9a>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a2c      	ldr	r2, [pc, #176]	; (8008b88 <TIM_Base_SetConfig+0x128>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d00f      	beq.n	8008afa <TIM_Base_SetConfig+0x9a>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a2c      	ldr	r2, [pc, #176]	; (8008b90 <TIM_Base_SetConfig+0x130>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00b      	beq.n	8008afa <TIM_Base_SetConfig+0x9a>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a2b      	ldr	r2, [pc, #172]	; (8008b94 <TIM_Base_SetConfig+0x134>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d007      	beq.n	8008afa <TIM_Base_SetConfig+0x9a>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a2a      	ldr	r2, [pc, #168]	; (8008b98 <TIM_Base_SetConfig+0x138>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_Base_SetConfig+0x9a>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a25      	ldr	r2, [pc, #148]	; (8008b8c <TIM_Base_SetConfig+0x12c>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d108      	bne.n	8008b0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a12      	ldr	r2, [pc, #72]	; (8008b7c <TIM_Base_SetConfig+0x11c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d013      	beq.n	8008b60 <TIM_Base_SetConfig+0x100>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	4a13      	ldr	r2, [pc, #76]	; (8008b88 <TIM_Base_SetConfig+0x128>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d00f      	beq.n	8008b60 <TIM_Base_SetConfig+0x100>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a13      	ldr	r2, [pc, #76]	; (8008b90 <TIM_Base_SetConfig+0x130>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d00b      	beq.n	8008b60 <TIM_Base_SetConfig+0x100>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a12      	ldr	r2, [pc, #72]	; (8008b94 <TIM_Base_SetConfig+0x134>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d007      	beq.n	8008b60 <TIM_Base_SetConfig+0x100>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <TIM_Base_SetConfig+0x138>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d003      	beq.n	8008b60 <TIM_Base_SetConfig+0x100>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a0c      	ldr	r2, [pc, #48]	; (8008b8c <TIM_Base_SetConfig+0x12c>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d103      	bne.n	8008b68 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	691a      	ldr	r2, [r3, #16]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	615a      	str	r2, [r3, #20]
}
 8008b6e:	bf00      	nop
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	40012c00 	.word	0x40012c00
 8008b80:	40000400 	.word	0x40000400
 8008b84:	40000800 	.word	0x40000800
 8008b88:	40013400 	.word	0x40013400
 8008b8c:	40015000 	.word	0x40015000
 8008b90:	40014000 	.word	0x40014000
 8008b94:	40014400 	.word	0x40014400
 8008b98:	40014800 	.word	0x40014800

08008b9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b087      	sub	sp, #28
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	f023 0201 	bic.w	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f023 0302 	bic.w	r3, r3, #2
 8008be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a30      	ldr	r2, [pc, #192]	; (8008cb8 <TIM_OC1_SetConfig+0x11c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d013      	beq.n	8008c24 <TIM_OC1_SetConfig+0x88>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a2f      	ldr	r2, [pc, #188]	; (8008cbc <TIM_OC1_SetConfig+0x120>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00f      	beq.n	8008c24 <TIM_OC1_SetConfig+0x88>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a2e      	ldr	r2, [pc, #184]	; (8008cc0 <TIM_OC1_SetConfig+0x124>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00b      	beq.n	8008c24 <TIM_OC1_SetConfig+0x88>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a2d      	ldr	r2, [pc, #180]	; (8008cc4 <TIM_OC1_SetConfig+0x128>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d007      	beq.n	8008c24 <TIM_OC1_SetConfig+0x88>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a2c      	ldr	r2, [pc, #176]	; (8008cc8 <TIM_OC1_SetConfig+0x12c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d003      	beq.n	8008c24 <TIM_OC1_SetConfig+0x88>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a2b      	ldr	r2, [pc, #172]	; (8008ccc <TIM_OC1_SetConfig+0x130>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d10c      	bne.n	8008c3e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f023 0308 	bic.w	r3, r3, #8
 8008c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f023 0304 	bic.w	r3, r3, #4
 8008c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a1d      	ldr	r2, [pc, #116]	; (8008cb8 <TIM_OC1_SetConfig+0x11c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d013      	beq.n	8008c6e <TIM_OC1_SetConfig+0xd2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a1c      	ldr	r2, [pc, #112]	; (8008cbc <TIM_OC1_SetConfig+0x120>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d00f      	beq.n	8008c6e <TIM_OC1_SetConfig+0xd2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a1b      	ldr	r2, [pc, #108]	; (8008cc0 <TIM_OC1_SetConfig+0x124>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00b      	beq.n	8008c6e <TIM_OC1_SetConfig+0xd2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <TIM_OC1_SetConfig+0x128>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d007      	beq.n	8008c6e <TIM_OC1_SetConfig+0xd2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a19      	ldr	r2, [pc, #100]	; (8008cc8 <TIM_OC1_SetConfig+0x12c>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d003      	beq.n	8008c6e <TIM_OC1_SetConfig+0xd2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a18      	ldr	r2, [pc, #96]	; (8008ccc <TIM_OC1_SetConfig+0x130>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d111      	bne.n	8008c92 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	621a      	str	r2, [r3, #32]
}
 8008cac:	bf00      	nop
 8008cae:	371c      	adds	r7, #28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	40012c00 	.word	0x40012c00
 8008cbc:	40013400 	.word	0x40013400
 8008cc0:	40014000 	.word	0x40014000
 8008cc4:	40014400 	.word	0x40014400
 8008cc8:	40014800 	.word	0x40014800
 8008ccc:	40015000 	.word	0x40015000

08008cd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	f023 0210 	bic.w	r2, r3, #16
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f023 0320 	bic.w	r3, r3, #32
 8008d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a2c      	ldr	r2, [pc, #176]	; (8008de0 <TIM_OC2_SetConfig+0x110>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d007      	beq.n	8008d44 <TIM_OC2_SetConfig+0x74>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a2b      	ldr	r2, [pc, #172]	; (8008de4 <TIM_OC2_SetConfig+0x114>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d003      	beq.n	8008d44 <TIM_OC2_SetConfig+0x74>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a2a      	ldr	r2, [pc, #168]	; (8008de8 <TIM_OC2_SetConfig+0x118>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d10d      	bne.n	8008d60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a1f      	ldr	r2, [pc, #124]	; (8008de0 <TIM_OC2_SetConfig+0x110>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d013      	beq.n	8008d90 <TIM_OC2_SetConfig+0xc0>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a1e      	ldr	r2, [pc, #120]	; (8008de4 <TIM_OC2_SetConfig+0x114>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d00f      	beq.n	8008d90 <TIM_OC2_SetConfig+0xc0>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a1e      	ldr	r2, [pc, #120]	; (8008dec <TIM_OC2_SetConfig+0x11c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d00b      	beq.n	8008d90 <TIM_OC2_SetConfig+0xc0>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a1d      	ldr	r2, [pc, #116]	; (8008df0 <TIM_OC2_SetConfig+0x120>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d007      	beq.n	8008d90 <TIM_OC2_SetConfig+0xc0>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4a1c      	ldr	r2, [pc, #112]	; (8008df4 <TIM_OC2_SetConfig+0x124>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d003      	beq.n	8008d90 <TIM_OC2_SetConfig+0xc0>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a17      	ldr	r2, [pc, #92]	; (8008de8 <TIM_OC2_SetConfig+0x118>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d113      	bne.n	8008db8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d96:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d9e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	693a      	ldr	r2, [r7, #16]
 8008dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	621a      	str	r2, [r3, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	371c      	adds	r7, #28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40012c00 	.word	0x40012c00
 8008de4:	40013400 	.word	0x40013400
 8008de8:	40015000 	.word	0x40015000
 8008dec:	40014000 	.word	0x40014000
 8008df0:	40014400 	.word	0x40014400
 8008df4:	40014800 	.word	0x40014800

08008df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0303 	bic.w	r3, r3, #3
 8008e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	021b      	lsls	r3, r3, #8
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a2b      	ldr	r2, [pc, #172]	; (8008f04 <TIM_OC3_SetConfig+0x10c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d007      	beq.n	8008e6a <TIM_OC3_SetConfig+0x72>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a2a      	ldr	r2, [pc, #168]	; (8008f08 <TIM_OC3_SetConfig+0x110>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d003      	beq.n	8008e6a <TIM_OC3_SetConfig+0x72>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a29      	ldr	r2, [pc, #164]	; (8008f0c <TIM_OC3_SetConfig+0x114>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d10d      	bne.n	8008e86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	021b      	lsls	r3, r3, #8
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e84:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a1e      	ldr	r2, [pc, #120]	; (8008f04 <TIM_OC3_SetConfig+0x10c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d013      	beq.n	8008eb6 <TIM_OC3_SetConfig+0xbe>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a1d      	ldr	r2, [pc, #116]	; (8008f08 <TIM_OC3_SetConfig+0x110>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00f      	beq.n	8008eb6 <TIM_OC3_SetConfig+0xbe>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a1d      	ldr	r2, [pc, #116]	; (8008f10 <TIM_OC3_SetConfig+0x118>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00b      	beq.n	8008eb6 <TIM_OC3_SetConfig+0xbe>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a1c      	ldr	r2, [pc, #112]	; (8008f14 <TIM_OC3_SetConfig+0x11c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d007      	beq.n	8008eb6 <TIM_OC3_SetConfig+0xbe>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a1b      	ldr	r2, [pc, #108]	; (8008f18 <TIM_OC3_SetConfig+0x120>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d003      	beq.n	8008eb6 <TIM_OC3_SetConfig+0xbe>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a16      	ldr	r2, [pc, #88]	; (8008f0c <TIM_OC3_SetConfig+0x114>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d113      	bne.n	8008ede <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	695b      	ldr	r3, [r3, #20]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	693a      	ldr	r2, [r7, #16]
 8008ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	685a      	ldr	r2, [r3, #4]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	621a      	str	r2, [r3, #32]
}
 8008ef8:	bf00      	nop
 8008efa:	371c      	adds	r7, #28
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	40012c00 	.word	0x40012c00
 8008f08:	40013400 	.word	0x40013400
 8008f0c:	40015000 	.word	0x40015000
 8008f10:	40014000 	.word	0x40014000
 8008f14:	40014400 	.word	0x40014400
 8008f18:	40014800 	.word	0x40014800

08008f1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	021b      	lsls	r3, r3, #8
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	031b      	lsls	r3, r3, #12
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	; (8008fe4 <TIM_OC4_SetConfig+0xc8>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d013      	beq.n	8008fa8 <TIM_OC4_SetConfig+0x8c>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a19      	ldr	r2, [pc, #100]	; (8008fe8 <TIM_OC4_SetConfig+0xcc>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00f      	beq.n	8008fa8 <TIM_OC4_SetConfig+0x8c>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a18      	ldr	r2, [pc, #96]	; (8008fec <TIM_OC4_SetConfig+0xd0>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00b      	beq.n	8008fa8 <TIM_OC4_SetConfig+0x8c>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a17      	ldr	r2, [pc, #92]	; (8008ff0 <TIM_OC4_SetConfig+0xd4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d007      	beq.n	8008fa8 <TIM_OC4_SetConfig+0x8c>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a16      	ldr	r2, [pc, #88]	; (8008ff4 <TIM_OC4_SetConfig+0xd8>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d003      	beq.n	8008fa8 <TIM_OC4_SetConfig+0x8c>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a15      	ldr	r2, [pc, #84]	; (8008ff8 <TIM_OC4_SetConfig+0xdc>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d109      	bne.n	8008fbc <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	019b      	lsls	r3, r3, #6
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	621a      	str	r2, [r3, #32]
}
 8008fd6:	bf00      	nop
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	40012c00 	.word	0x40012c00
 8008fe8:	40013400 	.word	0x40013400
 8008fec:	40014000 	.word	0x40014000
 8008ff0:	40014400 	.word	0x40014400
 8008ff4:	40014800 	.word	0x40014800
 8008ff8:	40015000 	.word	0x40015000

08008ffc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800902a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800902e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009040:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	041b      	lsls	r3, r3, #16
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	4313      	orrs	r3, r2
 800904c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a19      	ldr	r2, [pc, #100]	; (80090b8 <TIM_OC5_SetConfig+0xbc>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d013      	beq.n	800907e <TIM_OC5_SetConfig+0x82>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a18      	ldr	r2, [pc, #96]	; (80090bc <TIM_OC5_SetConfig+0xc0>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d00f      	beq.n	800907e <TIM_OC5_SetConfig+0x82>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a17      	ldr	r2, [pc, #92]	; (80090c0 <TIM_OC5_SetConfig+0xc4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d00b      	beq.n	800907e <TIM_OC5_SetConfig+0x82>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a16      	ldr	r2, [pc, #88]	; (80090c4 <TIM_OC5_SetConfig+0xc8>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d007      	beq.n	800907e <TIM_OC5_SetConfig+0x82>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a15      	ldr	r2, [pc, #84]	; (80090c8 <TIM_OC5_SetConfig+0xcc>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d003      	beq.n	800907e <TIM_OC5_SetConfig+0x82>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a14      	ldr	r2, [pc, #80]	; (80090cc <TIM_OC5_SetConfig+0xd0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d109      	bne.n	8009092 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009084:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	021b      	lsls	r3, r3, #8
 800908c:	697a      	ldr	r2, [r7, #20]
 800908e:	4313      	orrs	r3, r2
 8009090:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68fa      	ldr	r2, [r7, #12]
 800909c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	685a      	ldr	r2, [r3, #4]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	621a      	str	r2, [r3, #32]
}
 80090ac:	bf00      	nop
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	40012c00 	.word	0x40012c00
 80090bc:	40013400 	.word	0x40013400
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400
 80090c8:	40014800 	.word	0x40014800
 80090cc:	40015000 	.word	0x40015000

080090d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	051b      	lsls	r3, r3, #20
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a1a      	ldr	r2, [pc, #104]	; (8009190 <TIM_OC6_SetConfig+0xc0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d013      	beq.n	8009154 <TIM_OC6_SetConfig+0x84>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a19      	ldr	r2, [pc, #100]	; (8009194 <TIM_OC6_SetConfig+0xc4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00f      	beq.n	8009154 <TIM_OC6_SetConfig+0x84>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a18      	ldr	r2, [pc, #96]	; (8009198 <TIM_OC6_SetConfig+0xc8>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00b      	beq.n	8009154 <TIM_OC6_SetConfig+0x84>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a17      	ldr	r2, [pc, #92]	; (800919c <TIM_OC6_SetConfig+0xcc>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d007      	beq.n	8009154 <TIM_OC6_SetConfig+0x84>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a16      	ldr	r2, [pc, #88]	; (80091a0 <TIM_OC6_SetConfig+0xd0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d003      	beq.n	8009154 <TIM_OC6_SetConfig+0x84>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a15      	ldr	r2, [pc, #84]	; (80091a4 <TIM_OC6_SetConfig+0xd4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d109      	bne.n	8009168 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800915a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	029b      	lsls	r3, r3, #10
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	685a      	ldr	r2, [r3, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	621a      	str	r2, [r3, #32]
}
 8009182:	bf00      	nop
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	40012c00 	.word	0x40012c00
 8009194:	40013400 	.word	0x40013400
 8009198:	40014000 	.word	0x40014000
 800919c:	40014400 	.word	0x40014400
 80091a0:	40014800 	.word	0x40014800
 80091a4:	40015000 	.word	0x40015000

080091a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b087      	sub	sp, #28
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	f023 0201 	bic.w	r2, r3, #1
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	693a      	ldr	r2, [r7, #16]
 80091da:	4313      	orrs	r3, r2
 80091dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f023 030a 	bic.w	r3, r3, #10
 80091e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	621a      	str	r2, [r3, #32]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009206:	b480      	push	{r7}
 8009208:	b087      	sub	sp, #28
 800920a:	af00      	add	r7, sp, #0
 800920c:	60f8      	str	r0, [r7, #12]
 800920e:	60b9      	str	r1, [r7, #8]
 8009210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6a1b      	ldr	r3, [r3, #32]
 8009216:	f023 0210 	bic.w	r2, r3, #16
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	031b      	lsls	r3, r3, #12
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	4313      	orrs	r3, r2
 800923a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	697a      	ldr	r2, [r7, #20]
 8009252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	693a      	ldr	r2, [r7, #16]
 8009258:	621a      	str	r2, [r3, #32]
}
 800925a:	bf00      	nop
 800925c:	371c      	adds	r7, #28
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009266:	b480      	push	{r7}
 8009268:	b085      	sub	sp, #20
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4313      	orrs	r3, r2
 8009284:	f043 0307 	orr.w	r3, r3, #7
 8009288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	609a      	str	r2, [r3, #8]
}
 8009290:	bf00      	nop
 8009292:	3714      	adds	r7, #20
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	021a      	lsls	r2, r3, #8
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	431a      	orrs	r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	609a      	str	r2, [r3, #8]
}
 80092d0:	bf00      	nop
 80092d2:	371c      	adds	r7, #28
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	60f8      	str	r0, [r7, #12]
 80092e4:	60b9      	str	r1, [r7, #8]
 80092e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 031f 	and.w	r3, r3, #31
 80092ee:	2201      	movs	r2, #1
 80092f0:	fa02 f303 	lsl.w	r3, r2, r3
 80092f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a1a      	ldr	r2, [r3, #32]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	43db      	mvns	r3, r3
 80092fe:	401a      	ands	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a1a      	ldr	r2, [r3, #32]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	f003 031f 	and.w	r3, r3, #31
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	fa01 f303 	lsl.w	r3, r1, r3
 8009314:	431a      	orrs	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	621a      	str	r2, [r3, #32]
}
 800931a:	bf00      	nop
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
	...

08009328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009338:	2b01      	cmp	r3, #1
 800933a:	d101      	bne.n	8009340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800933c:	2302      	movs	r3, #2
 800933e:	e06d      	b.n	800941c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a30      	ldr	r2, [pc, #192]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d009      	beq.n	800937e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a2f      	ldr	r2, [pc, #188]	; (800942c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d004      	beq.n	800937e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a2d      	ldr	r2, [pc, #180]	; (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d108      	bne.n	8009390 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009384:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	4313      	orrs	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009396:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	4313      	orrs	r3, r2
 80093a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1e      	ldr	r2, [pc, #120]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d01d      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093bc:	d018      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a1c      	ldr	r2, [pc, #112]	; (8009434 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d013      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a1a      	ldr	r2, [pc, #104]	; (8009438 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d00e      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a15      	ldr	r2, [pc, #84]	; (800942c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d009      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a16      	ldr	r2, [pc, #88]	; (800943c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d004      	beq.n	80093f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a11      	ldr	r2, [pc, #68]	; (8009430 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10c      	bne.n	800940a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	40012c00 	.word	0x40012c00
 800942c:	40013400 	.word	0x40013400
 8009430:	40015000 	.word	0x40015000
 8009434:	40000400 	.word	0x40000400
 8009438:	40000800 	.word	0x40000800
 800943c:	40014000 	.word	0x40014000

08009440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d101      	bne.n	800948e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e040      	b.n	8009510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009492:	2b00      	cmp	r3, #0
 8009494:	d106      	bne.n	80094a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7fa fcd0 	bl	8003e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2224      	movs	r2, #36	; 0x24
 80094a8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f022 0201 	bic.w	r2, r2, #1
 80094b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f8b6 	bl	800962c <UART_SetConfig>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d101      	bne.n	80094ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e022      	b.n	8009510 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d002      	beq.n	80094d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa7e 	bl	80099d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685a      	ldr	r2, [r3, #4]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689a      	ldr	r2, [r3, #8]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 fb05 	bl	8009b18 <UART_CheckIdleState>
 800950e:	4603      	mov	r3, r0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08a      	sub	sp, #40	; 0x28
 800951c:	af02      	add	r7, sp, #8
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	4613      	mov	r3, r2
 8009526:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952c:	2b20      	cmp	r3, #32
 800952e:	d178      	bne.n	8009622 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d002      	beq.n	800953c <HAL_UART_Transmit+0x24>
 8009536:	88fb      	ldrh	r3, [r7, #6]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d101      	bne.n	8009540 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e071      	b.n	8009624 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2221      	movs	r2, #33	; 0x21
 800954c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800954e:	f7fa fe71 	bl	8004234 <HAL_GetTick>
 8009552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	88fa      	ldrh	r2, [r7, #6]
 8009558:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800956c:	d108      	bne.n	8009580 <HAL_UART_Transmit+0x68>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d104      	bne.n	8009580 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009576:	2300      	movs	r3, #0
 8009578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	61bb      	str	r3, [r7, #24]
 800957e:	e003      	b.n	8009588 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009584:	2300      	movs	r3, #0
 8009586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009588:	e030      	b.n	80095ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2200      	movs	r2, #0
 8009592:	2180      	movs	r1, #128	; 0x80
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 fb67 	bl	8009c68 <UART_WaitOnFlagUntilTimeout>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2220      	movs	r2, #32
 80095a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80095a6:	2303      	movs	r3, #3
 80095a8:	e03c      	b.n	8009624 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10b      	bne.n	80095c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	881a      	ldrh	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095bc:	b292      	uxth	r2, r2
 80095be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	3302      	adds	r3, #2
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	e008      	b.n	80095da <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	781a      	ldrb	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	b292      	uxth	r2, r2
 80095d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	3301      	adds	r3, #1
 80095d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1c8      	bne.n	800958a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2200      	movs	r2, #0
 8009600:	2140      	movs	r1, #64	; 0x40
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f000 fb30 	bl	8009c68 <UART_WaitOnFlagUntilTimeout>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2220      	movs	r2, #32
 8009612:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e005      	b.n	8009624 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	e000      	b.n	8009624 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8009622:	2302      	movs	r3, #2
  }
}
 8009624:	4618      	mov	r0, r3
 8009626:	3720      	adds	r7, #32
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689a      	ldr	r2, [r3, #8]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	431a      	orrs	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	431a      	orrs	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	4313      	orrs	r3, r2
 800964e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	4b92      	ldr	r3, [pc, #584]	; (80098a0 <UART_SetConfig+0x274>)
 8009658:	4013      	ands	r3, r2
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6812      	ldr	r2, [r2, #0]
 800965e:	6979      	ldr	r1, [r7, #20]
 8009660:	430b      	orrs	r3, r1
 8009662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a1b      	ldr	r3, [r3, #32]
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	4313      	orrs	r3, r2
 8009688:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	430a      	orrs	r2, r1
 800969c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a80      	ldr	r2, [pc, #512]	; (80098a4 <UART_SetConfig+0x278>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d120      	bne.n	80096ea <UART_SetConfig+0xbe>
 80096a8:	4b7f      	ldr	r3, [pc, #508]	; (80098a8 <UART_SetConfig+0x27c>)
 80096aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d817      	bhi.n	80096e4 <UART_SetConfig+0xb8>
 80096b4:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <UART_SetConfig+0x90>)
 80096b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ba:	bf00      	nop
 80096bc:	080096cd 	.word	0x080096cd
 80096c0:	080096d9 	.word	0x080096d9
 80096c4:	080096df 	.word	0x080096df
 80096c8:	080096d3 	.word	0x080096d3
 80096cc:	2301      	movs	r3, #1
 80096ce:	77fb      	strb	r3, [r7, #31]
 80096d0:	e0b5      	b.n	800983e <UART_SetConfig+0x212>
 80096d2:	2302      	movs	r3, #2
 80096d4:	77fb      	strb	r3, [r7, #31]
 80096d6:	e0b2      	b.n	800983e <UART_SetConfig+0x212>
 80096d8:	2304      	movs	r3, #4
 80096da:	77fb      	strb	r3, [r7, #31]
 80096dc:	e0af      	b.n	800983e <UART_SetConfig+0x212>
 80096de:	2308      	movs	r3, #8
 80096e0:	77fb      	strb	r3, [r7, #31]
 80096e2:	e0ac      	b.n	800983e <UART_SetConfig+0x212>
 80096e4:	2310      	movs	r3, #16
 80096e6:	77fb      	strb	r3, [r7, #31]
 80096e8:	e0a9      	b.n	800983e <UART_SetConfig+0x212>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a6f      	ldr	r2, [pc, #444]	; (80098ac <UART_SetConfig+0x280>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d124      	bne.n	800973e <UART_SetConfig+0x112>
 80096f4:	4b6c      	ldr	r3, [pc, #432]	; (80098a8 <UART_SetConfig+0x27c>)
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80096fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009700:	d011      	beq.n	8009726 <UART_SetConfig+0xfa>
 8009702:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009706:	d817      	bhi.n	8009738 <UART_SetConfig+0x10c>
 8009708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800970c:	d011      	beq.n	8009732 <UART_SetConfig+0x106>
 800970e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009712:	d811      	bhi.n	8009738 <UART_SetConfig+0x10c>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <UART_SetConfig+0xf4>
 8009718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800971c:	d006      	beq.n	800972c <UART_SetConfig+0x100>
 800971e:	e00b      	b.n	8009738 <UART_SetConfig+0x10c>
 8009720:	2300      	movs	r3, #0
 8009722:	77fb      	strb	r3, [r7, #31]
 8009724:	e08b      	b.n	800983e <UART_SetConfig+0x212>
 8009726:	2302      	movs	r3, #2
 8009728:	77fb      	strb	r3, [r7, #31]
 800972a:	e088      	b.n	800983e <UART_SetConfig+0x212>
 800972c:	2304      	movs	r3, #4
 800972e:	77fb      	strb	r3, [r7, #31]
 8009730:	e085      	b.n	800983e <UART_SetConfig+0x212>
 8009732:	2308      	movs	r3, #8
 8009734:	77fb      	strb	r3, [r7, #31]
 8009736:	e082      	b.n	800983e <UART_SetConfig+0x212>
 8009738:	2310      	movs	r3, #16
 800973a:	77fb      	strb	r3, [r7, #31]
 800973c:	e07f      	b.n	800983e <UART_SetConfig+0x212>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a5b      	ldr	r2, [pc, #364]	; (80098b0 <UART_SetConfig+0x284>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d124      	bne.n	8009792 <UART_SetConfig+0x166>
 8009748:	4b57      	ldr	r3, [pc, #348]	; (80098a8 <UART_SetConfig+0x27c>)
 800974a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009750:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009754:	d011      	beq.n	800977a <UART_SetConfig+0x14e>
 8009756:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800975a:	d817      	bhi.n	800978c <UART_SetConfig+0x160>
 800975c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009760:	d011      	beq.n	8009786 <UART_SetConfig+0x15a>
 8009762:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009766:	d811      	bhi.n	800978c <UART_SetConfig+0x160>
 8009768:	2b00      	cmp	r3, #0
 800976a:	d003      	beq.n	8009774 <UART_SetConfig+0x148>
 800976c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009770:	d006      	beq.n	8009780 <UART_SetConfig+0x154>
 8009772:	e00b      	b.n	800978c <UART_SetConfig+0x160>
 8009774:	2300      	movs	r3, #0
 8009776:	77fb      	strb	r3, [r7, #31]
 8009778:	e061      	b.n	800983e <UART_SetConfig+0x212>
 800977a:	2302      	movs	r3, #2
 800977c:	77fb      	strb	r3, [r7, #31]
 800977e:	e05e      	b.n	800983e <UART_SetConfig+0x212>
 8009780:	2304      	movs	r3, #4
 8009782:	77fb      	strb	r3, [r7, #31]
 8009784:	e05b      	b.n	800983e <UART_SetConfig+0x212>
 8009786:	2308      	movs	r3, #8
 8009788:	77fb      	strb	r3, [r7, #31]
 800978a:	e058      	b.n	800983e <UART_SetConfig+0x212>
 800978c:	2310      	movs	r3, #16
 800978e:	77fb      	strb	r3, [r7, #31]
 8009790:	e055      	b.n	800983e <UART_SetConfig+0x212>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a47      	ldr	r2, [pc, #284]	; (80098b4 <UART_SetConfig+0x288>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d124      	bne.n	80097e6 <UART_SetConfig+0x1ba>
 800979c:	4b42      	ldr	r3, [pc, #264]	; (80098a8 <UART_SetConfig+0x27c>)
 800979e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80097a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097a8:	d011      	beq.n	80097ce <UART_SetConfig+0x1a2>
 80097aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097ae:	d817      	bhi.n	80097e0 <UART_SetConfig+0x1b4>
 80097b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097b4:	d011      	beq.n	80097da <UART_SetConfig+0x1ae>
 80097b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097ba:	d811      	bhi.n	80097e0 <UART_SetConfig+0x1b4>
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <UART_SetConfig+0x19c>
 80097c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097c4:	d006      	beq.n	80097d4 <UART_SetConfig+0x1a8>
 80097c6:	e00b      	b.n	80097e0 <UART_SetConfig+0x1b4>
 80097c8:	2300      	movs	r3, #0
 80097ca:	77fb      	strb	r3, [r7, #31]
 80097cc:	e037      	b.n	800983e <UART_SetConfig+0x212>
 80097ce:	2302      	movs	r3, #2
 80097d0:	77fb      	strb	r3, [r7, #31]
 80097d2:	e034      	b.n	800983e <UART_SetConfig+0x212>
 80097d4:	2304      	movs	r3, #4
 80097d6:	77fb      	strb	r3, [r7, #31]
 80097d8:	e031      	b.n	800983e <UART_SetConfig+0x212>
 80097da:	2308      	movs	r3, #8
 80097dc:	77fb      	strb	r3, [r7, #31]
 80097de:	e02e      	b.n	800983e <UART_SetConfig+0x212>
 80097e0:	2310      	movs	r3, #16
 80097e2:	77fb      	strb	r3, [r7, #31]
 80097e4:	e02b      	b.n	800983e <UART_SetConfig+0x212>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a33      	ldr	r2, [pc, #204]	; (80098b8 <UART_SetConfig+0x28c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d124      	bne.n	800983a <UART_SetConfig+0x20e>
 80097f0:	4b2d      	ldr	r3, [pc, #180]	; (80098a8 <UART_SetConfig+0x27c>)
 80097f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80097f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80097fc:	d011      	beq.n	8009822 <UART_SetConfig+0x1f6>
 80097fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009802:	d817      	bhi.n	8009834 <UART_SetConfig+0x208>
 8009804:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009808:	d011      	beq.n	800982e <UART_SetConfig+0x202>
 800980a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800980e:	d811      	bhi.n	8009834 <UART_SetConfig+0x208>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d003      	beq.n	800981c <UART_SetConfig+0x1f0>
 8009814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009818:	d006      	beq.n	8009828 <UART_SetConfig+0x1fc>
 800981a:	e00b      	b.n	8009834 <UART_SetConfig+0x208>
 800981c:	2300      	movs	r3, #0
 800981e:	77fb      	strb	r3, [r7, #31]
 8009820:	e00d      	b.n	800983e <UART_SetConfig+0x212>
 8009822:	2302      	movs	r3, #2
 8009824:	77fb      	strb	r3, [r7, #31]
 8009826:	e00a      	b.n	800983e <UART_SetConfig+0x212>
 8009828:	2304      	movs	r3, #4
 800982a:	77fb      	strb	r3, [r7, #31]
 800982c:	e007      	b.n	800983e <UART_SetConfig+0x212>
 800982e:	2308      	movs	r3, #8
 8009830:	77fb      	strb	r3, [r7, #31]
 8009832:	e004      	b.n	800983e <UART_SetConfig+0x212>
 8009834:	2310      	movs	r3, #16
 8009836:	77fb      	strb	r3, [r7, #31]
 8009838:	e001      	b.n	800983e <UART_SetConfig+0x212>
 800983a:	2310      	movs	r3, #16
 800983c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009846:	d16b      	bne.n	8009920 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8009848:	7ffb      	ldrb	r3, [r7, #31]
 800984a:	2b08      	cmp	r3, #8
 800984c:	d838      	bhi.n	80098c0 <UART_SetConfig+0x294>
 800984e:	a201      	add	r2, pc, #4	; (adr r2, 8009854 <UART_SetConfig+0x228>)
 8009850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009854:	08009879 	.word	0x08009879
 8009858:	08009881 	.word	0x08009881
 800985c:	08009889 	.word	0x08009889
 8009860:	080098c1 	.word	0x080098c1
 8009864:	0800988f 	.word	0x0800988f
 8009868:	080098c1 	.word	0x080098c1
 800986c:	080098c1 	.word	0x080098c1
 8009870:	080098c1 	.word	0x080098c1
 8009874:	08009897 	.word	0x08009897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009878:	f7fe f99c 	bl	8007bb4 <HAL_RCC_GetPCLK1Freq>
 800987c:	61b8      	str	r0, [r7, #24]
        break;
 800987e:	e024      	b.n	80098ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009880:	f7fe f9ba 	bl	8007bf8 <HAL_RCC_GetPCLK2Freq>
 8009884:	61b8      	str	r0, [r7, #24]
        break;
 8009886:	e020      	b.n	80098ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009888:	4b0c      	ldr	r3, [pc, #48]	; (80098bc <UART_SetConfig+0x290>)
 800988a:	61bb      	str	r3, [r7, #24]
        break;
 800988c:	e01d      	b.n	80098ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800988e:	f7fe f91b 	bl	8007ac8 <HAL_RCC_GetSysClockFreq>
 8009892:	61b8      	str	r0, [r7, #24]
        break;
 8009894:	e019      	b.n	80098ca <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800989a:	61bb      	str	r3, [r7, #24]
        break;
 800989c:	e015      	b.n	80098ca <UART_SetConfig+0x29e>
 800989e:	bf00      	nop
 80098a0:	efff69f3 	.word	0xefff69f3
 80098a4:	40013800 	.word	0x40013800
 80098a8:	40021000 	.word	0x40021000
 80098ac:	40004400 	.word	0x40004400
 80098b0:	40004800 	.word	0x40004800
 80098b4:	40004c00 	.word	0x40004c00
 80098b8:	40005000 	.word	0x40005000
 80098bc:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	77bb      	strb	r3, [r7, #30]
        break;
 80098c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d073      	beq.n	80099b8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	005a      	lsls	r2, r3, #1
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	085b      	lsrs	r3, r3, #1
 80098da:	441a      	add	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b0f      	cmp	r3, #15
 80098ea:	d916      	bls.n	800991a <UART_SetConfig+0x2ee>
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098f2:	d212      	bcs.n	800991a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	f023 030f 	bic.w	r3, r3, #15
 80098fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	085b      	lsrs	r3, r3, #1
 8009902:	b29b      	uxth	r3, r3
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	b29a      	uxth	r2, r3
 800990a:	89fb      	ldrh	r3, [r7, #14]
 800990c:	4313      	orrs	r3, r2
 800990e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	89fa      	ldrh	r2, [r7, #14]
 8009916:	60da      	str	r2, [r3, #12]
 8009918:	e04e      	b.n	80099b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	77bb      	strb	r3, [r7, #30]
 800991e:	e04b      	b.n	80099b8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009920:	7ffb      	ldrb	r3, [r7, #31]
 8009922:	2b08      	cmp	r3, #8
 8009924:	d827      	bhi.n	8009976 <UART_SetConfig+0x34a>
 8009926:	a201      	add	r2, pc, #4	; (adr r2, 800992c <UART_SetConfig+0x300>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	08009951 	.word	0x08009951
 8009930:	08009959 	.word	0x08009959
 8009934:	08009961 	.word	0x08009961
 8009938:	08009977 	.word	0x08009977
 800993c:	08009967 	.word	0x08009967
 8009940:	08009977 	.word	0x08009977
 8009944:	08009977 	.word	0x08009977
 8009948:	08009977 	.word	0x08009977
 800994c:	0800996f 	.word	0x0800996f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009950:	f7fe f930 	bl	8007bb4 <HAL_RCC_GetPCLK1Freq>
 8009954:	61b8      	str	r0, [r7, #24]
        break;
 8009956:	e013      	b.n	8009980 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009958:	f7fe f94e 	bl	8007bf8 <HAL_RCC_GetPCLK2Freq>
 800995c:	61b8      	str	r0, [r7, #24]
        break;
 800995e:	e00f      	b.n	8009980 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009960:	4b1b      	ldr	r3, [pc, #108]	; (80099d0 <UART_SetConfig+0x3a4>)
 8009962:	61bb      	str	r3, [r7, #24]
        break;
 8009964:	e00c      	b.n	8009980 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009966:	f7fe f8af 	bl	8007ac8 <HAL_RCC_GetSysClockFreq>
 800996a:	61b8      	str	r0, [r7, #24]
        break;
 800996c:	e008      	b.n	8009980 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800996e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009972:	61bb      	str	r3, [r7, #24]
        break;
 8009974:	e004      	b.n	8009980 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8009976:	2300      	movs	r3, #0
 8009978:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	77bb      	strb	r3, [r7, #30]
        break;
 800997e:	bf00      	nop
    }

    if (pclk != 0U)
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d018      	beq.n	80099b8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	085a      	lsrs	r2, r3, #1
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	441a      	add	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	2b0f      	cmp	r3, #15
 800999e:	d909      	bls.n	80099b4 <UART_SetConfig+0x388>
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099a6:	d205      	bcs.n	80099b4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	b29a      	uxth	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	60da      	str	r2, [r3, #12]
 80099b2:	e001      	b.n	80099b8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80099c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
 80099ce:	bf00      	nop
 80099d0:	007a1200 	.word	0x007a1200

080099d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	f003 0301 	and.w	r3, r3, #1
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00a      	beq.n	80099fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a02:	f003 0302 	and.w	r3, r3, #2
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	f003 0304 	and.w	r3, r3, #4
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00a      	beq.n	8009a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	f003 0310 	and.w	r3, r3, #16
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	f003 0320 	and.w	r3, r3, #32
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d01a      	beq.n	8009aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ad2:	d10a      	bne.n	8009aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	430a      	orrs	r2, r1
 8009b0a:	605a      	str	r2, [r3, #4]
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b098      	sub	sp, #96	; 0x60
 8009b1c:	af02      	add	r7, sp, #8
 8009b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b28:	f7fa fb84 	bl	8004234 <HAL_GetTick>
 8009b2c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0308 	and.w	r3, r3, #8
 8009b38:	2b08      	cmp	r3, #8
 8009b3a:	d12e      	bne.n	8009b9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b44:	2200      	movs	r2, #0
 8009b46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f000 f88c 	bl	8009c68 <UART_WaitOnFlagUntilTimeout>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d021      	beq.n	8009b9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	e853 3f00 	ldrex	r3, [r3]
 8009b62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b74:	647b      	str	r3, [r7, #68]	; 0x44
 8009b76:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b7c:	e841 2300 	strex	r3, r2, [r1]
 8009b80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e6      	bne.n	8009b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2220      	movs	r2, #32
 8009b8c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b96:	2303      	movs	r3, #3
 8009b98:	e062      	b.n	8009c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 0304 	and.w	r3, r3, #4
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d149      	bne.n	8009c3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f856 	bl	8009c68 <UART_WaitOnFlagUntilTimeout>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d03c      	beq.n	8009c3c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	e853 3f00 	ldrex	r3, [r3]
 8009bce:	623b      	str	r3, [r7, #32]
   return(result);
 8009bd0:	6a3b      	ldr	r3, [r7, #32]
 8009bd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be0:	633b      	str	r3, [r7, #48]	; 0x30
 8009be2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009be8:	e841 2300 	strex	r3, r2, [r1]
 8009bec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1e6      	bne.n	8009bc2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3308      	adds	r3, #8
 8009bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	e853 3f00 	ldrex	r3, [r3]
 8009c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f023 0301 	bic.w	r3, r3, #1
 8009c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3308      	adds	r3, #8
 8009c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c14:	61fa      	str	r2, [r7, #28]
 8009c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c18:	69b9      	ldr	r1, [r7, #24]
 8009c1a:	69fa      	ldr	r2, [r7, #28]
 8009c1c:	e841 2300 	strex	r3, r2, [r1]
 8009c20:	617b      	str	r3, [r7, #20]
   return(result);
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d1e5      	bne.n	8009bf4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2220      	movs	r2, #32
 8009c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e011      	b.n	8009c60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2220      	movs	r2, #32
 8009c40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2220      	movs	r2, #32
 8009c46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2200      	movs	r2, #0
 8009c54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3758      	adds	r7, #88	; 0x58
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	603b      	str	r3, [r7, #0]
 8009c74:	4613      	mov	r3, r2
 8009c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c78:	e049      	b.n	8009d0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c80:	d045      	beq.n	8009d0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c82:	f7fa fad7 	bl	8004234 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d302      	bcc.n	8009c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e048      	b.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0304 	and.w	r3, r3, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d031      	beq.n	8009d0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	69db      	ldr	r3, [r3, #28]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d110      	bne.n	8009cda <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f000 f838 	bl	8009d36 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2208      	movs	r2, #8
 8009cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e029      	b.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ce8:	d111      	bne.n	8009d0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cf2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 f81e 	bl	8009d36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2220      	movs	r2, #32
 8009cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e00f      	b.n	8009d2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	69da      	ldr	r2, [r3, #28]
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4013      	ands	r3, r2
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	bf0c      	ite	eq
 8009d1e:	2301      	moveq	r3, #1
 8009d20:	2300      	movne	r3, #0
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	461a      	mov	r2, r3
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d0a6      	beq.n	8009c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b095      	sub	sp, #84	; 0x54
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d46:	e853 3f00 	ldrex	r3, [r3]
 8009d4a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8009d5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d64:	e841 2300 	strex	r3, r2, [r1]
 8009d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1e6      	bne.n	8009d3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3308      	adds	r3, #8
 8009d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	6a3b      	ldr	r3, [r7, #32]
 8009d7a:	e853 3f00 	ldrex	r3, [r3]
 8009d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	f023 0301 	bic.w	r3, r3, #1
 8009d86:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d98:	e841 2300 	strex	r3, r2, [r1]
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1e5      	bne.n	8009d70 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d118      	bne.n	8009dde <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	e853 3f00 	ldrex	r3, [r3]
 8009db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	f023 0310 	bic.w	r3, r3, #16
 8009dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dca:	61bb      	str	r3, [r7, #24]
 8009dcc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dce:	6979      	ldr	r1, [r7, #20]
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	e841 2300 	strex	r3, r2, [r1]
 8009dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d1e6      	bne.n	8009dac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009df2:	bf00      	nop
 8009df4:	3754      	adds	r7, #84	; 0x54
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
	...

08009e00 <_ZN4blib6ButtonC1Ev>:
#include "Button.h"

#include "TestLcd.h"
namespace blib
{
    Button::Button()
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 f850 	bl	8009eb0 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 8009e10:	4a03      	ldr	r2, [pc, #12]	; (8009e20 <_ZN4blib6ButtonC1Ev+0x20>)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
    {

    }
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}
 8009e20:	0800e1c4 	.word	0x0800e1c4

08009e24 <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	4a05      	ldr	r2, [pc, #20]	; (8009e44 <_ZN4blib6ButtonD1Ev+0x20>)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 f84b 	bl	8009ed0 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
    {

    }
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	0800e1c4 	.word	0x0800e1c4

08009e48 <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
    }
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f7ff ffe7 	bl	8009e24 <_ZN4blib6ButtonD1Ev>
 8009e56:	2108      	movs	r1, #8
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f000 fb4f 	bl	800a4fc <_ZdlPvj>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	605a      	str	r2, [r3, #4]
    }
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
        return mLatestPressedButton;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
    }
 8009e90:	4618      	mov	r0, r3
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
//        LcdSimulate::getInstance().impl_ClearScreen();
    }
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
                {
 8009eb8:	4a04      	ldr	r2, [pc, #16]	; (8009ecc <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	601a      	str	r2, [r3, #0]
                }
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	0800e1d4 	.word	0x0800e1d4

08009ed0 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
                }
 8009ed8:	4a04      	ldr	r2, [pc, #16]	; (8009eec <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	0800e1d4 	.word	0x0800e1d4

08009ef0 <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
                }
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff ffe9 	bl	8009ed0 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 8009efe:	2104      	movs	r1, #4
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fafb 	bl	800a4fc <_ZdlPvj>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh>:
#include "Lcd.h"

namespace blib
{

    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
 8009f1c:	70fb      	strb	r3, [r7, #3]
            address)
 8009f1e:	4a0a      	ldr	r2, [pc, #40]	; (8009f48 <_ZN4blib3LcdC1ENS0_7LcdTypeEP19__I2C_HandleTypeDefh+0x38>)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	601a      	str	r2, [r3, #0]
    Lcd::Lcd(LcdType type, I2C_HandleTypeDef *hi2c, uint8_t address) : mLcdType(type), mHi2c(hi2c), mLcdAddress(
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	609a      	str	r2, [r3, #8]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	78fa      	ldrb	r2, [r7, #3]
 8009f34:	731a      	strb	r2, [r3, #12]
    {
        init();
 8009f36:	68f8      	ldr	r0, [r7, #12]
 8009f38:	f000 f9d2 	bl	800a2e0 <_ZN4blib3Lcd4initEv>
    }
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	0800e1e4 	.word	0x0800e1e4

08009f4c <_ZN4blib3LcdD1Ev>:
    Lcd::~Lcd()
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	4a04      	ldr	r2, [pc, #16]	; (8009f68 <_ZN4blib3LcdD1Ev+0x1c>)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	601a      	str	r2, [r3, #0]
    {

    }
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	0800e1e4 	.word	0x0800e1e4

08009f6c <_ZN4blib3LcdD0Ev>:
    Lcd::~Lcd()
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
    }
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff ffe9 	bl	8009f4c <_ZN4blib3LcdD1Ev>
 8009f7a:	2114      	movs	r1, #20
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fabd 	bl	800a4fc <_ZdlPvj>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4618      	mov	r0, r3
 8009f86:	3708      	adds	r7, #8
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <_ZN4blib3Lcd7sendCmdEh>:
    void Lcd::sendCmd(uint8_t command)
    {
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	460b      	mov	r3, r1
 8009f96:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	73fb      	strb	r3, [r7, #15]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73bb      	strb	r3, [r7, #14]
        uint8_t data[4];
        dataHigh = (command & 0xF0);
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	f023 030f 	bic.w	r3, r3, #15
 8009fa6:	73fb      	strb	r3, [r7, #15]
        dataLow = ((command << 4) & 0xF0);
 8009fa8:	78fb      	ldrb	r3, [r7, #3]
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	73bb      	strb	r3, [r7, #14]
        data[0] = dataHigh | 0x0C;    //en = 1, rw = 0, rs = 0;
 8009fae:	7bfb      	ldrb	r3, [r7, #15]
 8009fb0:	f043 030c 	orr.w	r3, r3, #12
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	723b      	strb	r3, [r7, #8]
        data[1] = dataHigh | 0x08;    //en = 0, rw = 0, rs = 0;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
 8009fba:	f043 0308 	orr.w	r3, r3, #8
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	727b      	strb	r3, [r7, #9]
        data[2] = dataLow | 0x0C;
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	f043 030c 	orr.w	r3, r3, #12
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	72bb      	strb	r3, [r7, #10]
        data[3] = dataLow | 0x08;
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	f043 0308 	orr.w	r3, r3, #8
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) data, sizeof(data), 100);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6898      	ldr	r0, [r3, #8]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	7b1b      	ldrb	r3, [r3, #12]
 8009fde:	b299      	uxth	r1, r3
 8009fe0:	f107 0208 	add.w	r2, r7, #8
 8009fe4:	2364      	movs	r3, #100	; 0x64
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	2304      	movs	r3, #4
 8009fea:	f7fc f801 	bl	8005ff0 <HAL_I2C_Master_Transmit>
    }
 8009fee:	bf00      	nop
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <_ZN4blib3Lcd8sendDataEh>:
    void Lcd::sendData(uint8_t data)
    {
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b086      	sub	sp, #24
 8009ffa:	af02      	add	r7, sp, #8
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	460b      	mov	r3, r1
 800a000:	70fb      	strb	r3, [r7, #3]
        uint8_t dataHigh = 0, dataLow = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]
 800a006:	2300      	movs	r3, #0
 800a008:	73bb      	strb	r3, [r7, #14]
        uint8_t dataBuf[4];
        dataHigh = (data & 0xF0);
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	f023 030f 	bic.w	r3, r3, #15
 800a010:	73fb      	strb	r3, [r7, #15]
        dataLow = ((data << 4) & 0xF0);
 800a012:	78fb      	ldrb	r3, [r7, #3]
 800a014:	011b      	lsls	r3, r3, #4
 800a016:	73bb      	strb	r3, [r7, #14]
        dataBuf[0] = dataHigh | 0x0D;    //en = 1, rw = 0, rs = 1;
 800a018:	7bfb      	ldrb	r3, [r7, #15]
 800a01a:	f043 030d 	orr.w	r3, r3, #13
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	723b      	strb	r3, [r7, #8]
        dataBuf[1] = dataHigh | 0x09;    //en = 0, rw = 0, rs = 1;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	f043 0309 	orr.w	r3, r3, #9
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	727b      	strb	r3, [r7, #9]
        dataBuf[2] = dataLow | 0x0D;
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	f043 030d 	orr.w	r3, r3, #13
 800a032:	b2db      	uxtb	r3, r3
 800a034:	72bb      	strb	r3, [r7, #10]
        dataBuf[3] = dataLow | 0x09;
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	f043 0309 	orr.w	r3, r3, #9
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(mHi2c, mLcdAddress, (uint8_t*) dataBuf, sizeof(dataBuf), 100);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6898      	ldr	r0, [r3, #8]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	7b1b      	ldrb	r3, [r3, #12]
 800a048:	b299      	uxth	r1, r3
 800a04a:	f107 0208 	add.w	r2, r7, #8
 800a04e:	2364      	movs	r3, #100	; 0x64
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	2304      	movs	r3, #4
 800a054:	f7fb ffcc 	bl	8005ff0 <HAL_I2C_Master_Transmit>
    }
 800a058:	bf00      	nop
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <_ZN4blib6ischarEPKc>:
    {

    }

    char ischar(const char *string)
    {
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
        return (string != nullptr) ? *(string) : ' ';
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <_ZN4blib6ischarEPKc+0x14>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	e000      	b.n	800a076 <_ZN4blib6ischarEPKc+0x16>
 800a074:	2320      	movs	r3, #32
    }
 800a076:	4618      	mov	r0, r3
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
	...

0800a084 <_ZN4blib3Lcd11displayLineEhhPKc>:
    void Lcd::displayLine(uint8_t row, uint8_t col, const char *string)
    {
 800a084:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a086:	b0ab      	sub	sp, #172	; 0xac
 800a088:	af14      	add	r7, sp, #80	; 0x50
 800a08a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a08c:	647b      	str	r3, [r7, #68]	; 0x44
 800a08e:	460b      	mov	r3, r1
 800a090:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800a094:	4613      	mov	r3, r2
 800a096:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        LOGI("|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|%c|", ischar(string),
 800a09a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a09c:	f7ff ffe0 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	643b      	str	r3, [r7, #64]	; 0x40
 800a0a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff ffd9 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0b4:	3302      	adds	r3, #2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff ffd2 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0c2:	3303      	adds	r3, #3
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7ff ffcb 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0d0:	3304      	adds	r3, #4
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f7ff ffc4 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	633b      	str	r3, [r7, #48]	; 0x30
 800a0dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0de:	3305      	adds	r3, #5
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7ff ffbd 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ec:	3306      	adds	r3, #6
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f7ff ffb6 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0fa:	3307      	adds	r3, #7
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff ffaf 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a102:	4603      	mov	r3, r0
 800a104:	627b      	str	r3, [r7, #36]	; 0x24
 800a106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a108:	3308      	adds	r3, #8
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff ffa8 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a110:	4603      	mov	r3, r0
 800a112:	623b      	str	r3, [r7, #32]
 800a114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a116:	3309      	adds	r3, #9
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff ffa1 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a11e:	4603      	mov	r3, r0
 800a120:	61fb      	str	r3, [r7, #28]
 800a122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a124:	330a      	adds	r3, #10
 800a126:	4618      	mov	r0, r3
 800a128:	f7ff ff9a 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a12c:	4603      	mov	r3, r0
 800a12e:	61bb      	str	r3, [r7, #24]
 800a130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a132:	330b      	adds	r3, #11
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff ff93 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a13a:	4603      	mov	r3, r0
 800a13c:	617b      	str	r3, [r7, #20]
 800a13e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a140:	330c      	adds	r3, #12
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff ff8c 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a148:	4603      	mov	r3, r0
 800a14a:	613b      	str	r3, [r7, #16]
 800a14c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a14e:	330d      	adds	r3, #13
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff ff85 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a156:	4603      	mov	r3, r0
 800a158:	60fb      	str	r3, [r7, #12]
 800a15a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a15c:	330e      	adds	r3, #14
 800a15e:	4618      	mov	r0, r3
 800a160:	f7ff ff7e 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a164:	4603      	mov	r3, r0
 800a166:	60bb      	str	r3, [r7, #8]
 800a168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a16a:	330f      	adds	r3, #15
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff ff77 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a172:	4603      	mov	r3, r0
 800a174:	607b      	str	r3, [r7, #4]
 800a176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a178:	3310      	adds	r3, #16
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff ff70 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a180:	4603      	mov	r3, r0
 800a182:	461e      	mov	r6, r3
 800a184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a186:	3311      	adds	r3, #17
 800a188:	4618      	mov	r0, r3
 800a18a:	f7ff ff69 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a18e:	4603      	mov	r3, r0
 800a190:	461d      	mov	r5, r3
 800a192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a194:	3312      	adds	r3, #18
 800a196:	4618      	mov	r0, r3
 800a198:	f7ff ff62 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a19c:	4603      	mov	r3, r0
 800a19e:	461c      	mov	r4, r3
 800a1a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1a2:	3313      	adds	r3, #19
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff ff5b 	bl	800a060 <_ZN4blib6ischarEPKc>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800a1ae:	9412      	str	r4, [sp, #72]	; 0x48
 800a1b0:	9511      	str	r5, [sp, #68]	; 0x44
 800a1b2:	9610      	str	r6, [sp, #64]	; 0x40
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	920f      	str	r2, [sp, #60]	; 0x3c
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	920e      	str	r2, [sp, #56]	; 0x38
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	920d      	str	r2, [sp, #52]	; 0x34
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	920c      	str	r2, [sp, #48]	; 0x30
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	920a      	str	r2, [sp, #40]	; 0x28
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a1d0:	6a3a      	ldr	r2, [r7, #32]
 800a1d2:	9208      	str	r2, [sp, #32]
 800a1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d6:	9207      	str	r2, [sp, #28]
 800a1d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1da:	9206      	str	r2, [sp, #24]
 800a1dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1de:	9205      	str	r2, [sp, #20]
 800a1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e2:	9204      	str	r2, [sp, #16]
 800a1e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1e6:	9203      	str	r2, [sp, #12]
 800a1e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1ea:	9202      	str	r2, [sp, #8]
 800a1ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1ee:	9201      	str	r2, [sp, #4]
 800a1f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	4b31      	ldr	r3, [pc, #196]	; (800a2bc <_ZN4blib3Lcd11displayLineEhhPKc+0x238>)
 800a1f6:	225d      	movs	r2, #93	; 0x5d
 800a1f8:	4931      	ldr	r1, [pc, #196]	; (800a2c0 <_ZN4blib3Lcd11displayLineEhhPKc+0x23c>)
 800a1fa:	4832      	ldr	r0, [pc, #200]	; (800a2c4 <_ZN4blib3Lcd11displayLineEhhPKc+0x240>)
 800a1fc:	f000 f8fc 	bl	800a3f8 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_>
                ischar(string + 5), ischar(string + 6), ischar(string + 7), ischar(string + 8),
                ischar(string + 9), ischar(string + 10), ischar(string + 11), ischar(string + 12),
                ischar(string + 13), ischar(string + 14), ischar(string + 15), ischar(string + 16),
                ischar(string + 17), ischar(string + 18), ischar(string + 19));

        uint8_t command = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        switch (mLcdType)
 800a206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d03c      	beq.n	800a288 <_ZN4blib3Lcd11displayLineEhhPKc+0x204>
 800a20e:	2b01      	cmp	r3, #1
 800a210:	d000      	beq.n	800a214 <_ZN4blib3Lcd11displayLineEhhPKc+0x190>
                    default:
                        break;
                }
                break;
            default:
                break;
 800a212:	e03a      	b.n	800a28a <_ZN4blib3Lcd11displayLineEhhPKc+0x206>
                switch (row)
 800a214:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800a218:	2b03      	cmp	r3, #3
 800a21a:	d833      	bhi.n	800a284 <_ZN4blib3Lcd11displayLineEhhPKc+0x200>
 800a21c:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <_ZN4blib3Lcd11displayLineEhhPKc+0x1a0>)
 800a21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a222:	bf00      	nop
 800a224:	0800a235 	.word	0x0800a235
 800a228:	0800a243 	.word	0x0800a243
 800a22c:	0800a259 	.word	0x0800a259
 800a230:	0800a26f 	.word	0x0800a26f
                        command = 0x80 | (col + 0x00);
 800a234:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a238:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a23c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800a240:	e021      	b.n	800a286 <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x40);
 800a242:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a246:	3340      	adds	r3, #64	; 0x40
 800a248:	b2db      	uxtb	r3, r3
 800a24a:	b25b      	sxtb	r3, r3
 800a24c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a250:	b25b      	sxtb	r3, r3
 800a252:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800a256:	e016      	b.n	800a286 <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x14);
 800a258:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a25c:	3314      	adds	r3, #20
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	b25b      	sxtb	r3, r3
 800a262:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a266:	b25b      	sxtb	r3, r3
 800a268:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800a26c:	e00b      	b.n	800a286 <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        command = 0x80 | (col + 0x54);
 800a26e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800a272:	3354      	adds	r3, #84	; 0x54
 800a274:	b2db      	uxtb	r3, r3
 800a276:	b25b      	sxtb	r3, r3
 800a278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a27c:	b25b      	sxtb	r3, r3
 800a27e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800a282:	e000      	b.n	800a286 <_ZN4blib3Lcd11displayLineEhhPKc+0x202>
                        break;
 800a284:	bf00      	nop
                break;
 800a286:	e000      	b.n	800a28a <_ZN4blib3Lcd11displayLineEhhPKc+0x206>
                break;
 800a288:	bf00      	nop
        }

        sendCmd(command);
 800a28a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a28e:	4619      	mov	r1, r3
 800a290:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a292:	f7ff fe7b 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>

        while (*string)
 800a296:	e008      	b.n	800a2aa <_ZN4blib3Lcd11displayLineEhhPKc+0x226>
        {
            sendData(*string);
 800a298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	4619      	mov	r1, r3
 800a29e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a2a0:	f7ff fea9 	bl	8009ff6 <_ZN4blib3Lcd8sendDataEh>
            string++;
 800a2a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	647b      	str	r3, [r7, #68]	; 0x44
        while (*string)
 800a2aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d1f2      	bne.n	800a298 <_ZN4blib3Lcd11displayLineEhhPKc+0x214>
        }
    }
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	375c      	adds	r7, #92	; 0x5c
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2bc:	0800e098 	.word	0x0800e098
 800a2c0:	0800e0a4 	.word	0x0800e0a4
 800a2c4:	0800e0ac 	.word	0x0800e0ac

0800a2c8 <_ZN4blib3Lcd12clearDisplayEv>:
    void Lcd::clearDisplay()
    {
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
        sendCmd(0x01);
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7ff fe5a 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
    }
 800a2d8:	bf00      	nop
 800a2da:	3708      	adds	r7, #8
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <_ZN4blib3Lcd4initEv>:
    void Lcd::init()
    {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
        mEntryMode = LCD_ENTRY_MODE_SET | LCD_CURSOR_ID_RIGHT | LCD_SHIFT_S_UNABLE;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2206      	movs	r2, #6
 800a2ec:	735a      	strb	r2, [r3, #13]
        mFunctionSet = LCD_FUNCTION_SET | LCD_DATA_DL_4BITS | LCD_LINE_N_2 | LCD_FONT_F_58;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2228      	movs	r2, #40	; 0x28
 800a2f2:	73da      	strb	r2, [r3, #15]
        mDisplayControl = LCD_DISPLAY_ON_OFF | LCD_DISPLAY_D_OFF | LCD_CURSOR_C_OFF
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2208      	movs	r2, #8
 800a2f8:	739a      	strb	r2, [r3, #14]
                | LCD_BLINK_B_OFF;
        mBlackLight = LCD_NOBLACKLIGHT;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	741a      	strb	r2, [r3, #16]

        HAL_Delay(50);
 800a300:	2032      	movs	r0, #50	; 0x32
 800a302:	f7f9 ffa3 	bl	800424c <HAL_Delay>
        sendCmd(0x30);
 800a306:	2130      	movs	r1, #48	; 0x30
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f7ff fe3f 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(5);
 800a30e:	2005      	movs	r0, #5
 800a310:	f7f9 ff9c 	bl	800424c <HAL_Delay>
        sendCmd(0x30);
 800a314:	2130      	movs	r1, #48	; 0x30
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f7ff fe38 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800a31c:	2001      	movs	r0, #1
 800a31e:	f7f9 ff95 	bl	800424c <HAL_Delay>
        sendCmd(0x30);
 800a322:	2130      	movs	r1, #48	; 0x30
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff fe31 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 800a32a:	200a      	movs	r0, #10
 800a32c:	f7f9 ff8e 	bl	800424c <HAL_Delay>
        sendCmd(0x20);
 800a330:	2120      	movs	r1, #32
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff fe2a 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(10);
 800a338:	200a      	movs	r0, #10
 800a33a:	f7f9 ff87 	bl	800424c <HAL_Delay>

        sendCmd(mFunctionSet);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	7bdb      	ldrb	r3, [r3, #15]
 800a342:	4619      	mov	r1, r3
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff fe21 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800a34a:	2001      	movs	r0, #1
 800a34c:	f7f9 ff7e 	bl	800424c <HAL_Delay>
        sendCmd(mDisplayControl);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	7b9b      	ldrb	r3, [r3, #14]
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7ff fe18 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800a35c:	2001      	movs	r0, #1
 800a35e:	f7f9 ff75 	bl	800424c <HAL_Delay>
        sendCmd(0x01);    //clear display
 800a362:	2101      	movs	r1, #1
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f7ff fe11 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(2);
 800a36a:	2002      	movs	r0, #2
 800a36c:	f7f9 ff6e 	bl	800424c <HAL_Delay>
        sendCmd(mEntryMode);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	7b5b      	ldrb	r3, [r3, #13]
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff fe08 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800a37c:	2001      	movs	r0, #1
 800a37e:	f7f9 ff65 	bl	800424c <HAL_Delay>
        sendCmd(mDisplayControl | LCD_DISPLAY_D_ON);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	7b9b      	ldrb	r3, [r3, #14]
 800a386:	f043 0304 	orr.w	r3, r3, #4
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff fdfc 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800a394:	2001      	movs	r0, #1
 800a396:	f7f9 ff59 	bl	800424c <HAL_Delay>
        sendCmd(mBlackLight);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	7c1b      	ldrb	r3, [r3, #16]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff fdf3 	bl	8009f8c <_ZN4blib3Lcd7sendCmdEh>
        HAL_Delay(1);
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	f7f9 ff50 	bl	800424c <HAL_Delay>
    }
 800a3ac:	bf00      	nop
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}

0800a3b4 <_ZN4blib3Lcd11noBackligthEv>:

    void Lcd::noBackligth()
    {
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
        mBlackLight = LCD_NOBLACKLIGHT;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	741a      	strb	r2, [r3, #16]
        sendData(mBlackLight);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	7c1b      	ldrb	r3, [r3, #16]
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f7ff fe14 	bl	8009ff6 <_ZN4blib3Lcd8sendDataEh>
    }
 800a3ce:	bf00      	nop
 800a3d0:	3708      	adds	r7, #8
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <_ZN4blib3Lcd9backlightEv>:

    void Lcd::backlight()
    {
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
        mBlackLight = LCD_BLACKLIGHT;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	741a      	strb	r2, [r3, #16]
        sendData(mBlackLight);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7c1b      	ldrb	r3, [r3, #16]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f7ff fe03 	bl	8009ff6 <_ZN4blib3Lcd8sendDataEh>
    }
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 800a3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3fa:	b0a9      	sub	sp, #164	; 0xa4
 800a3fc:	af16      	add	r7, sp, #88	; 0x58
 800a3fe:	6478      	str	r0, [r7, #68]	; 0x44
 800a400:	6439      	str	r1, [r7, #64]	; 0x40
 800a402:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a404:	63bb      	str	r3, [r7, #56]	; 0x38
                print("[>]  ");
 800a406:	483a      	ldr	r0, [pc, #232]	; (800a4f0 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xf8>)
 800a408:	f7f6 ff28 	bl	800125c <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 800a40c:	f897 6060 	ldrb.w	r6, [r7, #96]	; 0x60
 800a410:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800a414:	637b      	str	r3, [r7, #52]	; 0x34
 800a416:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 800a41a:	633a      	str	r2, [r7, #48]	; 0x30
 800a41c:	f897 106c 	ldrb.w	r1, [r7, #108]	; 0x6c
 800a420:	62f9      	str	r1, [r7, #44]	; 0x2c
 800a422:	f897 0070 	ldrb.w	r0, [r7, #112]	; 0x70
 800a426:	62b8      	str	r0, [r7, #40]	; 0x28
 800a428:	f897 4074 	ldrb.w	r4, [r7, #116]	; 0x74
 800a42c:	627c      	str	r4, [r7, #36]	; 0x24
 800a42e:	f897 5078 	ldrb.w	r5, [r7, #120]	; 0x78
 800a432:	623d      	str	r5, [r7, #32]
 800a434:	f897 c07c 	ldrb.w	ip, [r7, #124]	; 0x7c
 800a438:	4663      	mov	r3, ip
 800a43a:	61fb      	str	r3, [r7, #28]
 800a43c:	f897 c080 	ldrb.w	ip, [r7, #128]	; 0x80
 800a440:	4662      	mov	r2, ip
 800a442:	61ba      	str	r2, [r7, #24]
 800a444:	f897 c084 	ldrb.w	ip, [r7, #132]	; 0x84
 800a448:	4661      	mov	r1, ip
 800a44a:	6179      	str	r1, [r7, #20]
 800a44c:	f897 c088 	ldrb.w	ip, [r7, #136]	; 0x88
 800a450:	4660      	mov	r0, ip
 800a452:	6138      	str	r0, [r7, #16]
 800a454:	f897 c08c 	ldrb.w	ip, [r7, #140]	; 0x8c
 800a458:	4664      	mov	r4, ip
 800a45a:	60fc      	str	r4, [r7, #12]
 800a45c:	f897 c090 	ldrb.w	ip, [r7, #144]	; 0x90
 800a460:	4665      	mov	r5, ip
 800a462:	60bd      	str	r5, [r7, #8]
 800a464:	f897 c094 	ldrb.w	ip, [r7, #148]	; 0x94
 800a468:	4663      	mov	r3, ip
 800a46a:	607b      	str	r3, [r7, #4]
 800a46c:	f897 5098 	ldrb.w	r5, [r7, #152]	; 0x98
 800a470:	f897 409c 	ldrb.w	r4, [r7, #156]	; 0x9c
 800a474:	f897 00a0 	ldrb.w	r0, [r7, #160]	; 0xa0
 800a478:	f897 10a4 	ldrb.w	r1, [r7, #164]	; 0xa4
 800a47c:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 800a480:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800a484:	9315      	str	r3, [sp, #84]	; 0x54
 800a486:	9214      	str	r2, [sp, #80]	; 0x50
 800a488:	9113      	str	r1, [sp, #76]	; 0x4c
 800a48a:	9012      	str	r0, [sp, #72]	; 0x48
 800a48c:	9411      	str	r4, [sp, #68]	; 0x44
 800a48e:	9510      	str	r5, [sp, #64]	; 0x40
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	930f      	str	r3, [sp, #60]	; 0x3c
 800a494:	68bd      	ldr	r5, [r7, #8]
 800a496:	950e      	str	r5, [sp, #56]	; 0x38
 800a498:	68fc      	ldr	r4, [r7, #12]
 800a49a:	940d      	str	r4, [sp, #52]	; 0x34
 800a49c:	6938      	ldr	r0, [r7, #16]
 800a49e:	900c      	str	r0, [sp, #48]	; 0x30
 800a4a0:	6979      	ldr	r1, [r7, #20]
 800a4a2:	910b      	str	r1, [sp, #44]	; 0x2c
 800a4a4:	69ba      	ldr	r2, [r7, #24]
 800a4a6:	920a      	str	r2, [sp, #40]	; 0x28
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ac:	6a3d      	ldr	r5, [r7, #32]
 800a4ae:	9508      	str	r5, [sp, #32]
 800a4b0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a4b2:	9407      	str	r4, [sp, #28]
 800a4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b6:	9006      	str	r0, [sp, #24]
 800a4b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4ba:	9105      	str	r1, [sp, #20]
 800a4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4be:	9204      	str	r2, [sp, #16]
 800a4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c2:	9303      	str	r3, [sp, #12]
 800a4c4:	9602      	str	r6, [sp, #8]
 800a4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4d6:	4807      	ldr	r0, [pc, #28]	; (800a4f4 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xfc>)
 800a4d8:	f001 f81c 	bl	800b514 <sniprintf>
                print(mBuffer);
 800a4dc:	4805      	ldr	r0, [pc, #20]	; (800a4f4 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0xfc>)
 800a4de:	f7f6 febd 	bl	800125c <_ZN4blib6Logger5printEPKc>
                print("\n");
 800a4e2:	4805      	ldr	r0, [pc, #20]	; (800a4f8 <_ZN4blib6Logger3LogIJPKciS3_ccccccccccccccccccccEEEvS3_DpT_+0x100>)
 800a4e4:	f7f6 feba 	bl	800125c <_ZN4blib6Logger5printEPKc>
            }
 800a4e8:	bf00      	nop
 800a4ea:	374c      	adds	r7, #76	; 0x4c
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4f0:	0800e0f8 	.word	0x0800e0f8
 800a4f4:	200003f8 	.word	0x200003f8
 800a4f8:	0800e100 	.word	0x0800e100

0800a4fc <_ZdlPvj>:
 800a4fc:	f000 b811 	b.w	800a522 <_ZdlPv>

0800a500 <_Znwj>:
 800a500:	2801      	cmp	r0, #1
 800a502:	bf38      	it	cc
 800a504:	2001      	movcc	r0, #1
 800a506:	b510      	push	{r4, lr}
 800a508:	4604      	mov	r4, r0
 800a50a:	4620      	mov	r0, r4
 800a50c:	f000 fa1e 	bl	800a94c <malloc>
 800a510:	b100      	cbz	r0, 800a514 <_Znwj+0x14>
 800a512:	bd10      	pop	{r4, pc}
 800a514:	f000 f808 	bl	800a528 <_ZSt15get_new_handlerv>
 800a518:	b908      	cbnz	r0, 800a51e <_Znwj+0x1e>
 800a51a:	f000 fa0f 	bl	800a93c <abort>
 800a51e:	4780      	blx	r0
 800a520:	e7f3      	b.n	800a50a <_Znwj+0xa>

0800a522 <_ZdlPv>:
 800a522:	f000 ba1b 	b.w	800a95c <free>
	...

0800a528 <_ZSt15get_new_handlerv>:
 800a528:	4b02      	ldr	r3, [pc, #8]	; (800a534 <_ZSt15get_new_handlerv+0xc>)
 800a52a:	6818      	ldr	r0, [r3, #0]
 800a52c:	f3bf 8f5b 	dmb	ish
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	200007f8 	.word	0x200007f8

0800a538 <log>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	ed2d 8b02 	vpush	{d8}
 800a53e:	ec55 4b10 	vmov	r4, r5, d0
 800a542:	f000 f841 	bl	800a5c8 <__ieee754_log>
 800a546:	4622      	mov	r2, r4
 800a548:	462b      	mov	r3, r5
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	eeb0 8a40 	vmov.f32	s16, s0
 800a552:	eef0 8a60 	vmov.f32	s17, s1
 800a556:	f7f6 faf1 	bl	8000b3c <__aeabi_dcmpun>
 800a55a:	b998      	cbnz	r0, 800a584 <log+0x4c>
 800a55c:	2200      	movs	r2, #0
 800a55e:	2300      	movs	r3, #0
 800a560:	4620      	mov	r0, r4
 800a562:	4629      	mov	r1, r5
 800a564:	f7f6 fae0 	bl	8000b28 <__aeabi_dcmpgt>
 800a568:	b960      	cbnz	r0, 800a584 <log+0x4c>
 800a56a:	2200      	movs	r2, #0
 800a56c:	2300      	movs	r3, #0
 800a56e:	4620      	mov	r0, r4
 800a570:	4629      	mov	r1, r5
 800a572:	f7f6 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a576:	b160      	cbz	r0, 800a592 <log+0x5a>
 800a578:	f001 f8ea 	bl	800b750 <__errno>
 800a57c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800a5a8 <log+0x70>
 800a580:	2322      	movs	r3, #34	; 0x22
 800a582:	6003      	str	r3, [r0, #0]
 800a584:	eeb0 0a48 	vmov.f32	s0, s16
 800a588:	eef0 0a68 	vmov.f32	s1, s17
 800a58c:	ecbd 8b02 	vpop	{d8}
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	f001 f8dd 	bl	800b750 <__errno>
 800a596:	ecbd 8b02 	vpop	{d8}
 800a59a:	2321      	movs	r3, #33	; 0x21
 800a59c:	6003      	str	r3, [r0, #0]
 800a59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a2:	4803      	ldr	r0, [pc, #12]	; (800a5b0 <log+0x78>)
 800a5a4:	f000 b808 	b.w	800a5b8 <nan>
 800a5a8:	00000000 	.word	0x00000000
 800a5ac:	fff00000 	.word	0xfff00000
 800a5b0:	0800e45a 	.word	0x0800e45a
 800a5b4:	00000000 	.word	0x00000000

0800a5b8 <nan>:
 800a5b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a5c0 <nan+0x8>
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	00000000 	.word	0x00000000
 800a5c4:	7ff80000 	.word	0x7ff80000

0800a5c8 <__ieee754_log>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	ec51 0b10 	vmov	r0, r1, d0
 800a5d0:	ed2d 8b04 	vpush	{d8-d9}
 800a5d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a5d8:	b083      	sub	sp, #12
 800a5da:	460d      	mov	r5, r1
 800a5dc:	da29      	bge.n	800a632 <__ieee754_log+0x6a>
 800a5de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5e2:	4303      	orrs	r3, r0
 800a5e4:	ee10 2a10 	vmov	r2, s0
 800a5e8:	d10c      	bne.n	800a604 <__ieee754_log+0x3c>
 800a5ea:	49cf      	ldr	r1, [pc, #828]	; (800a928 <__ieee754_log+0x360>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f7f6 f933 	bl	800085c <__aeabi_ddiv>
 800a5f6:	ec41 0b10 	vmov	d0, r0, r1
 800a5fa:	b003      	add	sp, #12
 800a5fc:	ecbd 8b04 	vpop	{d8-d9}
 800a600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a604:	2900      	cmp	r1, #0
 800a606:	da05      	bge.n	800a614 <__ieee754_log+0x4c>
 800a608:	460b      	mov	r3, r1
 800a60a:	f7f5 fe45 	bl	8000298 <__aeabi_dsub>
 800a60e:	2200      	movs	r2, #0
 800a610:	2300      	movs	r3, #0
 800a612:	e7ee      	b.n	800a5f2 <__ieee754_log+0x2a>
 800a614:	4bc5      	ldr	r3, [pc, #788]	; (800a92c <__ieee754_log+0x364>)
 800a616:	2200      	movs	r2, #0
 800a618:	f7f5 fff6 	bl	8000608 <__aeabi_dmul>
 800a61c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a620:	460d      	mov	r5, r1
 800a622:	4ac3      	ldr	r2, [pc, #780]	; (800a930 <__ieee754_log+0x368>)
 800a624:	4295      	cmp	r5, r2
 800a626:	dd06      	ble.n	800a636 <__ieee754_log+0x6e>
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	f7f5 fe36 	bl	800029c <__adddf3>
 800a630:	e7e1      	b.n	800a5f6 <__ieee754_log+0x2e>
 800a632:	2300      	movs	r3, #0
 800a634:	e7f5      	b.n	800a622 <__ieee754_log+0x5a>
 800a636:	152c      	asrs	r4, r5, #20
 800a638:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a63c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a640:	441c      	add	r4, r3
 800a642:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a646:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a64a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a64e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a652:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a656:	ea42 0105 	orr.w	r1, r2, r5
 800a65a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a65e:	2200      	movs	r2, #0
 800a660:	4bb4      	ldr	r3, [pc, #720]	; (800a934 <__ieee754_log+0x36c>)
 800a662:	f7f5 fe19 	bl	8000298 <__aeabi_dsub>
 800a666:	1cab      	adds	r3, r5, #2
 800a668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	4682      	mov	sl, r0
 800a670:	468b      	mov	fp, r1
 800a672:	f04f 0200 	mov.w	r2, #0
 800a676:	dc53      	bgt.n	800a720 <__ieee754_log+0x158>
 800a678:	2300      	movs	r3, #0
 800a67a:	f7f6 fa2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a67e:	b1d0      	cbz	r0, 800a6b6 <__ieee754_log+0xee>
 800a680:	2c00      	cmp	r4, #0
 800a682:	f000 8122 	beq.w	800a8ca <__ieee754_log+0x302>
 800a686:	4620      	mov	r0, r4
 800a688:	f7f5 ff54 	bl	8000534 <__aeabi_i2d>
 800a68c:	a390      	add	r3, pc, #576	; (adr r3, 800a8d0 <__ieee754_log+0x308>)
 800a68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a692:	4606      	mov	r6, r0
 800a694:	460f      	mov	r7, r1
 800a696:	f7f5 ffb7 	bl	8000608 <__aeabi_dmul>
 800a69a:	a38f      	add	r3, pc, #572	; (adr r3, 800a8d8 <__ieee754_log+0x310>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f7f5 ffae 	bl	8000608 <__aeabi_dmul>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	e7ba      	b.n	800a62c <__ieee754_log+0x64>
 800a6b6:	a38a      	add	r3, pc, #552	; (adr r3, 800a8e0 <__ieee754_log+0x318>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	4650      	mov	r0, sl
 800a6be:	4659      	mov	r1, fp
 800a6c0:	f7f5 ffa2 	bl	8000608 <__aeabi_dmul>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	499b      	ldr	r1, [pc, #620]	; (800a938 <__ieee754_log+0x370>)
 800a6cc:	f7f5 fde4 	bl	8000298 <__aeabi_dsub>
 800a6d0:	4652      	mov	r2, sl
 800a6d2:	4606      	mov	r6, r0
 800a6d4:	460f      	mov	r7, r1
 800a6d6:	465b      	mov	r3, fp
 800a6d8:	4650      	mov	r0, sl
 800a6da:	4659      	mov	r1, fp
 800a6dc:	f7f5 ff94 	bl	8000608 <__aeabi_dmul>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f5 ff8e 	bl	8000608 <__aeabi_dmul>
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	460f      	mov	r7, r1
 800a6f0:	b914      	cbnz	r4, 800a6f8 <__ieee754_log+0x130>
 800a6f2:	4632      	mov	r2, r6
 800a6f4:	463b      	mov	r3, r7
 800a6f6:	e0a2      	b.n	800a83e <__ieee754_log+0x276>
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	f7f5 ff1b 	bl	8000534 <__aeabi_i2d>
 800a6fe:	a374      	add	r3, pc, #464	; (adr r3, 800a8d0 <__ieee754_log+0x308>)
 800a700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a704:	4680      	mov	r8, r0
 800a706:	4689      	mov	r9, r1
 800a708:	f7f5 ff7e 	bl	8000608 <__aeabi_dmul>
 800a70c:	a372      	add	r3, pc, #456	; (adr r3, 800a8d8 <__ieee754_log+0x310>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	4604      	mov	r4, r0
 800a714:	460d      	mov	r5, r1
 800a716:	4640      	mov	r0, r8
 800a718:	4649      	mov	r1, r9
 800a71a:	f7f5 ff75 	bl	8000608 <__aeabi_dmul>
 800a71e:	e0a7      	b.n	800a870 <__ieee754_log+0x2a8>
 800a720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a724:	f7f5 fdba 	bl	800029c <__adddf3>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4650      	mov	r0, sl
 800a72e:	4659      	mov	r1, fp
 800a730:	f7f6 f894 	bl	800085c <__aeabi_ddiv>
 800a734:	ec41 0b18 	vmov	d8, r0, r1
 800a738:	4620      	mov	r0, r4
 800a73a:	f7f5 fefb 	bl	8000534 <__aeabi_i2d>
 800a73e:	ec53 2b18 	vmov	r2, r3, d8
 800a742:	ec41 0b19 	vmov	d9, r0, r1
 800a746:	ec51 0b18 	vmov	r0, r1, d8
 800a74a:	f7f5 ff5d 	bl	8000608 <__aeabi_dmul>
 800a74e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a752:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	4602      	mov	r2, r0
 800a75a:	460b      	mov	r3, r1
 800a75c:	4680      	mov	r8, r0
 800a75e:	4689      	mov	r9, r1
 800a760:	f7f5 ff52 	bl	8000608 <__aeabi_dmul>
 800a764:	a360      	add	r3, pc, #384	; (adr r3, 800a8e8 <__ieee754_log+0x320>)
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	4606      	mov	r6, r0
 800a76c:	460f      	mov	r7, r1
 800a76e:	f7f5 ff4b 	bl	8000608 <__aeabi_dmul>
 800a772:	a35f      	add	r3, pc, #380	; (adr r3, 800a8f0 <__ieee754_log+0x328>)
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 fd90 	bl	800029c <__adddf3>
 800a77c:	4632      	mov	r2, r6
 800a77e:	463b      	mov	r3, r7
 800a780:	f7f5 ff42 	bl	8000608 <__aeabi_dmul>
 800a784:	a35c      	add	r3, pc, #368	; (adr r3, 800a8f8 <__ieee754_log+0x330>)
 800a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78a:	f7f5 fd87 	bl	800029c <__adddf3>
 800a78e:	4632      	mov	r2, r6
 800a790:	463b      	mov	r3, r7
 800a792:	f7f5 ff39 	bl	8000608 <__aeabi_dmul>
 800a796:	a35a      	add	r3, pc, #360	; (adr r3, 800a900 <__ieee754_log+0x338>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 fd7e 	bl	800029c <__adddf3>
 800a7a0:	4642      	mov	r2, r8
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	f7f5 ff30 	bl	8000608 <__aeabi_dmul>
 800a7a8:	a357      	add	r3, pc, #348	; (adr r3, 800a908 <__ieee754_log+0x340>)
 800a7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ae:	4680      	mov	r8, r0
 800a7b0:	4689      	mov	r9, r1
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	f7f5 ff27 	bl	8000608 <__aeabi_dmul>
 800a7ba:	a355      	add	r3, pc, #340	; (adr r3, 800a910 <__ieee754_log+0x348>)
 800a7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c0:	f7f5 fd6c 	bl	800029c <__adddf3>
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	463b      	mov	r3, r7
 800a7c8:	f7f5 ff1e 	bl	8000608 <__aeabi_dmul>
 800a7cc:	a352      	add	r3, pc, #328	; (adr r3, 800a918 <__ieee754_log+0x350>)
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f7f5 fd63 	bl	800029c <__adddf3>
 800a7d6:	4632      	mov	r2, r6
 800a7d8:	463b      	mov	r3, r7
 800a7da:	f7f5 ff15 	bl	8000608 <__aeabi_dmul>
 800a7de:	460b      	mov	r3, r1
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	f7f5 fd59 	bl	800029c <__adddf3>
 800a7ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a7ee:	9b01      	ldr	r3, [sp, #4]
 800a7f0:	3551      	adds	r5, #81	; 0x51
 800a7f2:	431d      	orrs	r5, r3
 800a7f4:	2d00      	cmp	r5, #0
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	4689      	mov	r9, r1
 800a7fa:	dd48      	ble.n	800a88e <__ieee754_log+0x2c6>
 800a7fc:	4b4e      	ldr	r3, [pc, #312]	; (800a938 <__ieee754_log+0x370>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	4650      	mov	r0, sl
 800a802:	4659      	mov	r1, fp
 800a804:	f7f5 ff00 	bl	8000608 <__aeabi_dmul>
 800a808:	4652      	mov	r2, sl
 800a80a:	465b      	mov	r3, fp
 800a80c:	f7f5 fefc 	bl	8000608 <__aeabi_dmul>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4606      	mov	r6, r0
 800a816:	460f      	mov	r7, r1
 800a818:	4640      	mov	r0, r8
 800a81a:	4649      	mov	r1, r9
 800a81c:	f7f5 fd3e 	bl	800029c <__adddf3>
 800a820:	ec53 2b18 	vmov	r2, r3, d8
 800a824:	f7f5 fef0 	bl	8000608 <__aeabi_dmul>
 800a828:	4680      	mov	r8, r0
 800a82a:	4689      	mov	r9, r1
 800a82c:	b964      	cbnz	r4, 800a848 <__ieee754_log+0x280>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4630      	mov	r0, r6
 800a834:	4639      	mov	r1, r7
 800a836:	f7f5 fd2f 	bl	8000298 <__aeabi_dsub>
 800a83a:	4602      	mov	r2, r0
 800a83c:	460b      	mov	r3, r1
 800a83e:	4650      	mov	r0, sl
 800a840:	4659      	mov	r1, fp
 800a842:	f7f5 fd29 	bl	8000298 <__aeabi_dsub>
 800a846:	e6d6      	b.n	800a5f6 <__ieee754_log+0x2e>
 800a848:	a321      	add	r3, pc, #132	; (adr r3, 800a8d0 <__ieee754_log+0x308>)
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	ec51 0b19 	vmov	r0, r1, d9
 800a852:	f7f5 fed9 	bl	8000608 <__aeabi_dmul>
 800a856:	a320      	add	r3, pc, #128	; (adr r3, 800a8d8 <__ieee754_log+0x310>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	4604      	mov	r4, r0
 800a85e:	460d      	mov	r5, r1
 800a860:	ec51 0b19 	vmov	r0, r1, d9
 800a864:	f7f5 fed0 	bl	8000608 <__aeabi_dmul>
 800a868:	4642      	mov	r2, r8
 800a86a:	464b      	mov	r3, r9
 800a86c:	f7f5 fd16 	bl	800029c <__adddf3>
 800a870:	4602      	mov	r2, r0
 800a872:	460b      	mov	r3, r1
 800a874:	4630      	mov	r0, r6
 800a876:	4639      	mov	r1, r7
 800a878:	f7f5 fd0e 	bl	8000298 <__aeabi_dsub>
 800a87c:	4652      	mov	r2, sl
 800a87e:	465b      	mov	r3, fp
 800a880:	f7f5 fd0a 	bl	8000298 <__aeabi_dsub>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4620      	mov	r0, r4
 800a88a:	4629      	mov	r1, r5
 800a88c:	e7d9      	b.n	800a842 <__ieee754_log+0x27a>
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4650      	mov	r0, sl
 800a894:	4659      	mov	r1, fp
 800a896:	f7f5 fcff 	bl	8000298 <__aeabi_dsub>
 800a89a:	ec53 2b18 	vmov	r2, r3, d8
 800a89e:	f7f5 feb3 	bl	8000608 <__aeabi_dmul>
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	f43f af23 	beq.w	800a6f2 <__ieee754_log+0x12a>
 800a8ac:	a308      	add	r3, pc, #32	; (adr r3, 800a8d0 <__ieee754_log+0x308>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	ec51 0b19 	vmov	r0, r1, d9
 800a8b6:	f7f5 fea7 	bl	8000608 <__aeabi_dmul>
 800a8ba:	a307      	add	r3, pc, #28	; (adr r3, 800a8d8 <__ieee754_log+0x310>)
 800a8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	460d      	mov	r5, r1
 800a8c4:	ec51 0b19 	vmov	r0, r1, d9
 800a8c8:	e727      	b.n	800a71a <__ieee754_log+0x152>
 800a8ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800a920 <__ieee754_log+0x358>
 800a8ce:	e694      	b.n	800a5fa <__ieee754_log+0x32>
 800a8d0:	fee00000 	.word	0xfee00000
 800a8d4:	3fe62e42 	.word	0x3fe62e42
 800a8d8:	35793c76 	.word	0x35793c76
 800a8dc:	3dea39ef 	.word	0x3dea39ef
 800a8e0:	55555555 	.word	0x55555555
 800a8e4:	3fd55555 	.word	0x3fd55555
 800a8e8:	df3e5244 	.word	0xdf3e5244
 800a8ec:	3fc2f112 	.word	0x3fc2f112
 800a8f0:	96cb03de 	.word	0x96cb03de
 800a8f4:	3fc74664 	.word	0x3fc74664
 800a8f8:	94229359 	.word	0x94229359
 800a8fc:	3fd24924 	.word	0x3fd24924
 800a900:	55555593 	.word	0x55555593
 800a904:	3fe55555 	.word	0x3fe55555
 800a908:	d078c69f 	.word	0xd078c69f
 800a90c:	3fc39a09 	.word	0x3fc39a09
 800a910:	1d8e78af 	.word	0x1d8e78af
 800a914:	3fcc71c5 	.word	0x3fcc71c5
 800a918:	9997fa04 	.word	0x9997fa04
 800a91c:	3fd99999 	.word	0x3fd99999
	...
 800a928:	c3500000 	.word	0xc3500000
 800a92c:	43500000 	.word	0x43500000
 800a930:	7fefffff 	.word	0x7fefffff
 800a934:	3ff00000 	.word	0x3ff00000
 800a938:	3fe00000 	.word	0x3fe00000

0800a93c <abort>:
 800a93c:	b508      	push	{r3, lr}
 800a93e:	2006      	movs	r0, #6
 800a940:	f000 fe90 	bl	800b664 <raise>
 800a944:	2001      	movs	r0, #1
 800a946:	f7f9 fb31 	bl	8003fac <_exit>
	...

0800a94c <malloc>:
 800a94c:	4b02      	ldr	r3, [pc, #8]	; (800a958 <malloc+0xc>)
 800a94e:	4601      	mov	r1, r0
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	f000 b82b 	b.w	800a9ac <_malloc_r>
 800a956:	bf00      	nop
 800a958:	20000074 	.word	0x20000074

0800a95c <free>:
 800a95c:	4b02      	ldr	r3, [pc, #8]	; (800a968 <free+0xc>)
 800a95e:	4601      	mov	r1, r0
 800a960:	6818      	ldr	r0, [r3, #0]
 800a962:	f001 bdab 	b.w	800c4bc <_free_r>
 800a966:	bf00      	nop
 800a968:	20000074 	.word	0x20000074

0800a96c <sbrk_aligned>:
 800a96c:	b570      	push	{r4, r5, r6, lr}
 800a96e:	4e0e      	ldr	r6, [pc, #56]	; (800a9a8 <sbrk_aligned+0x3c>)
 800a970:	460c      	mov	r4, r1
 800a972:	6831      	ldr	r1, [r6, #0]
 800a974:	4605      	mov	r5, r0
 800a976:	b911      	cbnz	r1, 800a97e <sbrk_aligned+0x12>
 800a978:	f000 fec8 	bl	800b70c <_sbrk_r>
 800a97c:	6030      	str	r0, [r6, #0]
 800a97e:	4621      	mov	r1, r4
 800a980:	4628      	mov	r0, r5
 800a982:	f000 fec3 	bl	800b70c <_sbrk_r>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	d00a      	beq.n	800a9a0 <sbrk_aligned+0x34>
 800a98a:	1cc4      	adds	r4, r0, #3
 800a98c:	f024 0403 	bic.w	r4, r4, #3
 800a990:	42a0      	cmp	r0, r4
 800a992:	d007      	beq.n	800a9a4 <sbrk_aligned+0x38>
 800a994:	1a21      	subs	r1, r4, r0
 800a996:	4628      	mov	r0, r5
 800a998:	f000 feb8 	bl	800b70c <_sbrk_r>
 800a99c:	3001      	adds	r0, #1
 800a99e:	d101      	bne.n	800a9a4 <sbrk_aligned+0x38>
 800a9a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	20000800 	.word	0x20000800

0800a9ac <_malloc_r>:
 800a9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b0:	1ccd      	adds	r5, r1, #3
 800a9b2:	f025 0503 	bic.w	r5, r5, #3
 800a9b6:	3508      	adds	r5, #8
 800a9b8:	2d0c      	cmp	r5, #12
 800a9ba:	bf38      	it	cc
 800a9bc:	250c      	movcc	r5, #12
 800a9be:	2d00      	cmp	r5, #0
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	db01      	blt.n	800a9c8 <_malloc_r+0x1c>
 800a9c4:	42a9      	cmp	r1, r5
 800a9c6:	d905      	bls.n	800a9d4 <_malloc_r+0x28>
 800a9c8:	230c      	movs	r3, #12
 800a9ca:	603b      	str	r3, [r7, #0]
 800a9cc:	2600      	movs	r6, #0
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aaa8 <_malloc_r+0xfc>
 800a9d8:	f000 f868 	bl	800aaac <__malloc_lock>
 800a9dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a9e0:	461c      	mov	r4, r3
 800a9e2:	bb5c      	cbnz	r4, 800aa3c <_malloc_r+0x90>
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	f7ff ffc0 	bl	800a96c <sbrk_aligned>
 800a9ec:	1c43      	adds	r3, r0, #1
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	d155      	bne.n	800aa9e <_malloc_r+0xf2>
 800a9f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a9f6:	4626      	mov	r6, r4
 800a9f8:	2e00      	cmp	r6, #0
 800a9fa:	d145      	bne.n	800aa88 <_malloc_r+0xdc>
 800a9fc:	2c00      	cmp	r4, #0
 800a9fe:	d048      	beq.n	800aa92 <_malloc_r+0xe6>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	4631      	mov	r1, r6
 800aa04:	4638      	mov	r0, r7
 800aa06:	eb04 0903 	add.w	r9, r4, r3
 800aa0a:	f000 fe7f 	bl	800b70c <_sbrk_r>
 800aa0e:	4581      	cmp	r9, r0
 800aa10:	d13f      	bne.n	800aa92 <_malloc_r+0xe6>
 800aa12:	6821      	ldr	r1, [r4, #0]
 800aa14:	1a6d      	subs	r5, r5, r1
 800aa16:	4629      	mov	r1, r5
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f7ff ffa7 	bl	800a96c <sbrk_aligned>
 800aa1e:	3001      	adds	r0, #1
 800aa20:	d037      	beq.n	800aa92 <_malloc_r+0xe6>
 800aa22:	6823      	ldr	r3, [r4, #0]
 800aa24:	442b      	add	r3, r5
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	f8d8 3000 	ldr.w	r3, [r8]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d038      	beq.n	800aaa2 <_malloc_r+0xf6>
 800aa30:	685a      	ldr	r2, [r3, #4]
 800aa32:	42a2      	cmp	r2, r4
 800aa34:	d12b      	bne.n	800aa8e <_malloc_r+0xe2>
 800aa36:	2200      	movs	r2, #0
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	e00f      	b.n	800aa5c <_malloc_r+0xb0>
 800aa3c:	6822      	ldr	r2, [r4, #0]
 800aa3e:	1b52      	subs	r2, r2, r5
 800aa40:	d41f      	bmi.n	800aa82 <_malloc_r+0xd6>
 800aa42:	2a0b      	cmp	r2, #11
 800aa44:	d917      	bls.n	800aa76 <_malloc_r+0xca>
 800aa46:	1961      	adds	r1, r4, r5
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	6025      	str	r5, [r4, #0]
 800aa4c:	bf18      	it	ne
 800aa4e:	6059      	strne	r1, [r3, #4]
 800aa50:	6863      	ldr	r3, [r4, #4]
 800aa52:	bf08      	it	eq
 800aa54:	f8c8 1000 	streq.w	r1, [r8]
 800aa58:	5162      	str	r2, [r4, r5]
 800aa5a:	604b      	str	r3, [r1, #4]
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	f104 060b 	add.w	r6, r4, #11
 800aa62:	f000 f829 	bl	800aab8 <__malloc_unlock>
 800aa66:	f026 0607 	bic.w	r6, r6, #7
 800aa6a:	1d23      	adds	r3, r4, #4
 800aa6c:	1af2      	subs	r2, r6, r3
 800aa6e:	d0ae      	beq.n	800a9ce <_malloc_r+0x22>
 800aa70:	1b9b      	subs	r3, r3, r6
 800aa72:	50a3      	str	r3, [r4, r2]
 800aa74:	e7ab      	b.n	800a9ce <_malloc_r+0x22>
 800aa76:	42a3      	cmp	r3, r4
 800aa78:	6862      	ldr	r2, [r4, #4]
 800aa7a:	d1dd      	bne.n	800aa38 <_malloc_r+0x8c>
 800aa7c:	f8c8 2000 	str.w	r2, [r8]
 800aa80:	e7ec      	b.n	800aa5c <_malloc_r+0xb0>
 800aa82:	4623      	mov	r3, r4
 800aa84:	6864      	ldr	r4, [r4, #4]
 800aa86:	e7ac      	b.n	800a9e2 <_malloc_r+0x36>
 800aa88:	4634      	mov	r4, r6
 800aa8a:	6876      	ldr	r6, [r6, #4]
 800aa8c:	e7b4      	b.n	800a9f8 <_malloc_r+0x4c>
 800aa8e:	4613      	mov	r3, r2
 800aa90:	e7cc      	b.n	800aa2c <_malloc_r+0x80>
 800aa92:	230c      	movs	r3, #12
 800aa94:	603b      	str	r3, [r7, #0]
 800aa96:	4638      	mov	r0, r7
 800aa98:	f000 f80e 	bl	800aab8 <__malloc_unlock>
 800aa9c:	e797      	b.n	800a9ce <_malloc_r+0x22>
 800aa9e:	6025      	str	r5, [r4, #0]
 800aaa0:	e7dc      	b.n	800aa5c <_malloc_r+0xb0>
 800aaa2:	605b      	str	r3, [r3, #4]
 800aaa4:	deff      	udf	#255	; 0xff
 800aaa6:	bf00      	nop
 800aaa8:	200007fc 	.word	0x200007fc

0800aaac <__malloc_lock>:
 800aaac:	4801      	ldr	r0, [pc, #4]	; (800aab4 <__malloc_lock+0x8>)
 800aaae:	f000 be7a 	b.w	800b7a6 <__retarget_lock_acquire_recursive>
 800aab2:	bf00      	nop
 800aab4:	20000944 	.word	0x20000944

0800aab8 <__malloc_unlock>:
 800aab8:	4801      	ldr	r0, [pc, #4]	; (800aac0 <__malloc_unlock+0x8>)
 800aaba:	f000 be75 	b.w	800b7a8 <__retarget_lock_release_recursive>
 800aabe:	bf00      	nop
 800aac0:	20000944 	.word	0x20000944

0800aac4 <__cvt>:
 800aac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aac8:	ec55 4b10 	vmov	r4, r5, d0
 800aacc:	2d00      	cmp	r5, #0
 800aace:	460e      	mov	r6, r1
 800aad0:	4619      	mov	r1, r3
 800aad2:	462b      	mov	r3, r5
 800aad4:	bfbb      	ittet	lt
 800aad6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aada:	461d      	movlt	r5, r3
 800aadc:	2300      	movge	r3, #0
 800aade:	232d      	movlt	r3, #45	; 0x2d
 800aae0:	700b      	strb	r3, [r1, #0]
 800aae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aae8:	4691      	mov	r9, r2
 800aaea:	f023 0820 	bic.w	r8, r3, #32
 800aaee:	bfbc      	itt	lt
 800aaf0:	4622      	movlt	r2, r4
 800aaf2:	4614      	movlt	r4, r2
 800aaf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aaf8:	d005      	beq.n	800ab06 <__cvt+0x42>
 800aafa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aafe:	d100      	bne.n	800ab02 <__cvt+0x3e>
 800ab00:	3601      	adds	r6, #1
 800ab02:	2102      	movs	r1, #2
 800ab04:	e000      	b.n	800ab08 <__cvt+0x44>
 800ab06:	2103      	movs	r1, #3
 800ab08:	ab03      	add	r3, sp, #12
 800ab0a:	9301      	str	r3, [sp, #4]
 800ab0c:	ab02      	add	r3, sp, #8
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	ec45 4b10 	vmov	d0, r4, r5
 800ab14:	4653      	mov	r3, sl
 800ab16:	4632      	mov	r2, r6
 800ab18:	f000 fede 	bl	800b8d8 <_dtoa_r>
 800ab1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab20:	4607      	mov	r7, r0
 800ab22:	d102      	bne.n	800ab2a <__cvt+0x66>
 800ab24:	f019 0f01 	tst.w	r9, #1
 800ab28:	d022      	beq.n	800ab70 <__cvt+0xac>
 800ab2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab2e:	eb07 0906 	add.w	r9, r7, r6
 800ab32:	d110      	bne.n	800ab56 <__cvt+0x92>
 800ab34:	783b      	ldrb	r3, [r7, #0]
 800ab36:	2b30      	cmp	r3, #48	; 0x30
 800ab38:	d10a      	bne.n	800ab50 <__cvt+0x8c>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4620      	mov	r0, r4
 800ab40:	4629      	mov	r1, r5
 800ab42:	f7f5 ffc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab46:	b918      	cbnz	r0, 800ab50 <__cvt+0x8c>
 800ab48:	f1c6 0601 	rsb	r6, r6, #1
 800ab4c:	f8ca 6000 	str.w	r6, [sl]
 800ab50:	f8da 3000 	ldr.w	r3, [sl]
 800ab54:	4499      	add	r9, r3
 800ab56:	2200      	movs	r2, #0
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	4629      	mov	r1, r5
 800ab5e:	f7f5 ffbb 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab62:	b108      	cbz	r0, 800ab68 <__cvt+0xa4>
 800ab64:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab68:	2230      	movs	r2, #48	; 0x30
 800ab6a:	9b03      	ldr	r3, [sp, #12]
 800ab6c:	454b      	cmp	r3, r9
 800ab6e:	d307      	bcc.n	800ab80 <__cvt+0xbc>
 800ab70:	9b03      	ldr	r3, [sp, #12]
 800ab72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab74:	1bdb      	subs	r3, r3, r7
 800ab76:	4638      	mov	r0, r7
 800ab78:	6013      	str	r3, [r2, #0]
 800ab7a:	b004      	add	sp, #16
 800ab7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab80:	1c59      	adds	r1, r3, #1
 800ab82:	9103      	str	r1, [sp, #12]
 800ab84:	701a      	strb	r2, [r3, #0]
 800ab86:	e7f0      	b.n	800ab6a <__cvt+0xa6>

0800ab88 <__exponent>:
 800ab88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2900      	cmp	r1, #0
 800ab8e:	bfb8      	it	lt
 800ab90:	4249      	neglt	r1, r1
 800ab92:	f803 2b02 	strb.w	r2, [r3], #2
 800ab96:	bfb4      	ite	lt
 800ab98:	222d      	movlt	r2, #45	; 0x2d
 800ab9a:	222b      	movge	r2, #43	; 0x2b
 800ab9c:	2909      	cmp	r1, #9
 800ab9e:	7042      	strb	r2, [r0, #1]
 800aba0:	dd2a      	ble.n	800abf8 <__exponent+0x70>
 800aba2:	f10d 0207 	add.w	r2, sp, #7
 800aba6:	4617      	mov	r7, r2
 800aba8:	260a      	movs	r6, #10
 800abaa:	4694      	mov	ip, r2
 800abac:	fb91 f5f6 	sdiv	r5, r1, r6
 800abb0:	fb06 1415 	mls	r4, r6, r5, r1
 800abb4:	3430      	adds	r4, #48	; 0x30
 800abb6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800abba:	460c      	mov	r4, r1
 800abbc:	2c63      	cmp	r4, #99	; 0x63
 800abbe:	f102 32ff 	add.w	r2, r2, #4294967295
 800abc2:	4629      	mov	r1, r5
 800abc4:	dcf1      	bgt.n	800abaa <__exponent+0x22>
 800abc6:	3130      	adds	r1, #48	; 0x30
 800abc8:	f1ac 0402 	sub.w	r4, ip, #2
 800abcc:	f802 1c01 	strb.w	r1, [r2, #-1]
 800abd0:	1c41      	adds	r1, r0, #1
 800abd2:	4622      	mov	r2, r4
 800abd4:	42ba      	cmp	r2, r7
 800abd6:	d30a      	bcc.n	800abee <__exponent+0x66>
 800abd8:	f10d 0209 	add.w	r2, sp, #9
 800abdc:	eba2 020c 	sub.w	r2, r2, ip
 800abe0:	42bc      	cmp	r4, r7
 800abe2:	bf88      	it	hi
 800abe4:	2200      	movhi	r2, #0
 800abe6:	4413      	add	r3, r2
 800abe8:	1a18      	subs	r0, r3, r0
 800abea:	b003      	add	sp, #12
 800abec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abee:	f812 5b01 	ldrb.w	r5, [r2], #1
 800abf2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800abf6:	e7ed      	b.n	800abd4 <__exponent+0x4c>
 800abf8:	2330      	movs	r3, #48	; 0x30
 800abfa:	3130      	adds	r1, #48	; 0x30
 800abfc:	7083      	strb	r3, [r0, #2]
 800abfe:	70c1      	strb	r1, [r0, #3]
 800ac00:	1d03      	adds	r3, r0, #4
 800ac02:	e7f1      	b.n	800abe8 <__exponent+0x60>

0800ac04 <_printf_float>:
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	ed2d 8b02 	vpush	{d8}
 800ac0c:	b08d      	sub	sp, #52	; 0x34
 800ac0e:	460c      	mov	r4, r1
 800ac10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac14:	4616      	mov	r6, r2
 800ac16:	461f      	mov	r7, r3
 800ac18:	4605      	mov	r5, r0
 800ac1a:	f000 fd2b 	bl	800b674 <_localeconv_r>
 800ac1e:	f8d0 a000 	ldr.w	sl, [r0]
 800ac22:	4650      	mov	r0, sl
 800ac24:	f7f5 fb2c 	bl	8000280 <strlen>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	9305      	str	r3, [sp, #20]
 800ac30:	f8d8 3000 	ldr.w	r3, [r8]
 800ac34:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac38:	3307      	adds	r3, #7
 800ac3a:	f023 0307 	bic.w	r3, r3, #7
 800ac3e:	f103 0208 	add.w	r2, r3, #8
 800ac42:	f8c8 2000 	str.w	r2, [r8]
 800ac46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac54:	ee08 0a10 	vmov	s16, r0
 800ac58:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ac5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac60:	4b9e      	ldr	r3, [pc, #632]	; (800aedc <_printf_float+0x2d8>)
 800ac62:	f04f 32ff 	mov.w	r2, #4294967295
 800ac66:	f7f5 ff69 	bl	8000b3c <__aeabi_dcmpun>
 800ac6a:	bb88      	cbnz	r0, 800acd0 <_printf_float+0xcc>
 800ac6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac70:	4b9a      	ldr	r3, [pc, #616]	; (800aedc <_printf_float+0x2d8>)
 800ac72:	f04f 32ff 	mov.w	r2, #4294967295
 800ac76:	f7f5 ff43 	bl	8000b00 <__aeabi_dcmple>
 800ac7a:	bb48      	cbnz	r0, 800acd0 <_printf_float+0xcc>
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4640      	mov	r0, r8
 800ac82:	4649      	mov	r1, r9
 800ac84:	f7f5 ff32 	bl	8000aec <__aeabi_dcmplt>
 800ac88:	b110      	cbz	r0, 800ac90 <_printf_float+0x8c>
 800ac8a:	232d      	movs	r3, #45	; 0x2d
 800ac8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac90:	4a93      	ldr	r2, [pc, #588]	; (800aee0 <_printf_float+0x2dc>)
 800ac92:	4b94      	ldr	r3, [pc, #592]	; (800aee4 <_printf_float+0x2e0>)
 800ac94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac98:	bf94      	ite	ls
 800ac9a:	4690      	movls	r8, r2
 800ac9c:	4698      	movhi	r8, r3
 800ac9e:	2303      	movs	r3, #3
 800aca0:	6123      	str	r3, [r4, #16]
 800aca2:	9b05      	ldr	r3, [sp, #20]
 800aca4:	f023 0304 	bic.w	r3, r3, #4
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	f04f 0900 	mov.w	r9, #0
 800acae:	9700      	str	r7, [sp, #0]
 800acb0:	4633      	mov	r3, r6
 800acb2:	aa0b      	add	r2, sp, #44	; 0x2c
 800acb4:	4621      	mov	r1, r4
 800acb6:	4628      	mov	r0, r5
 800acb8:	f000 f9da 	bl	800b070 <_printf_common>
 800acbc:	3001      	adds	r0, #1
 800acbe:	f040 8090 	bne.w	800ade2 <_printf_float+0x1de>
 800acc2:	f04f 30ff 	mov.w	r0, #4294967295
 800acc6:	b00d      	add	sp, #52	; 0x34
 800acc8:	ecbd 8b02 	vpop	{d8}
 800accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd0:	4642      	mov	r2, r8
 800acd2:	464b      	mov	r3, r9
 800acd4:	4640      	mov	r0, r8
 800acd6:	4649      	mov	r1, r9
 800acd8:	f7f5 ff30 	bl	8000b3c <__aeabi_dcmpun>
 800acdc:	b140      	cbz	r0, 800acf0 <_printf_float+0xec>
 800acde:	464b      	mov	r3, r9
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfbc      	itt	lt
 800ace4:	232d      	movlt	r3, #45	; 0x2d
 800ace6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acea:	4a7f      	ldr	r2, [pc, #508]	; (800aee8 <_printf_float+0x2e4>)
 800acec:	4b7f      	ldr	r3, [pc, #508]	; (800aeec <_printf_float+0x2e8>)
 800acee:	e7d1      	b.n	800ac94 <_printf_float+0x90>
 800acf0:	6863      	ldr	r3, [r4, #4]
 800acf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acf6:	9206      	str	r2, [sp, #24]
 800acf8:	1c5a      	adds	r2, r3, #1
 800acfa:	d13f      	bne.n	800ad7c <_printf_float+0x178>
 800acfc:	2306      	movs	r3, #6
 800acfe:	6063      	str	r3, [r4, #4]
 800ad00:	9b05      	ldr	r3, [sp, #20]
 800ad02:	6861      	ldr	r1, [r4, #4]
 800ad04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad08:	2300      	movs	r3, #0
 800ad0a:	9303      	str	r3, [sp, #12]
 800ad0c:	ab0a      	add	r3, sp, #40	; 0x28
 800ad0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad12:	ab09      	add	r3, sp, #36	; 0x24
 800ad14:	ec49 8b10 	vmov	d0, r8, r9
 800ad18:	9300      	str	r3, [sp, #0]
 800ad1a:	6022      	str	r2, [r4, #0]
 800ad1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad20:	4628      	mov	r0, r5
 800ad22:	f7ff fecf 	bl	800aac4 <__cvt>
 800ad26:	9b06      	ldr	r3, [sp, #24]
 800ad28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad2a:	2b47      	cmp	r3, #71	; 0x47
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	d108      	bne.n	800ad42 <_printf_float+0x13e>
 800ad30:	1cc8      	adds	r0, r1, #3
 800ad32:	db02      	blt.n	800ad3a <_printf_float+0x136>
 800ad34:	6863      	ldr	r3, [r4, #4]
 800ad36:	4299      	cmp	r1, r3
 800ad38:	dd41      	ble.n	800adbe <_printf_float+0x1ba>
 800ad3a:	f1ab 0302 	sub.w	r3, fp, #2
 800ad3e:	fa5f fb83 	uxtb.w	fp, r3
 800ad42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad46:	d820      	bhi.n	800ad8a <_printf_float+0x186>
 800ad48:	3901      	subs	r1, #1
 800ad4a:	465a      	mov	r2, fp
 800ad4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad50:	9109      	str	r1, [sp, #36]	; 0x24
 800ad52:	f7ff ff19 	bl	800ab88 <__exponent>
 800ad56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad58:	1813      	adds	r3, r2, r0
 800ad5a:	2a01      	cmp	r2, #1
 800ad5c:	4681      	mov	r9, r0
 800ad5e:	6123      	str	r3, [r4, #16]
 800ad60:	dc02      	bgt.n	800ad68 <_printf_float+0x164>
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	07d2      	lsls	r2, r2, #31
 800ad66:	d501      	bpl.n	800ad6c <_printf_float+0x168>
 800ad68:	3301      	adds	r3, #1
 800ad6a:	6123      	str	r3, [r4, #16]
 800ad6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d09c      	beq.n	800acae <_printf_float+0xaa>
 800ad74:	232d      	movs	r3, #45	; 0x2d
 800ad76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad7a:	e798      	b.n	800acae <_printf_float+0xaa>
 800ad7c:	9a06      	ldr	r2, [sp, #24]
 800ad7e:	2a47      	cmp	r2, #71	; 0x47
 800ad80:	d1be      	bne.n	800ad00 <_printf_float+0xfc>
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1bc      	bne.n	800ad00 <_printf_float+0xfc>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e7b9      	b.n	800acfe <_printf_float+0xfa>
 800ad8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad8e:	d118      	bne.n	800adc2 <_printf_float+0x1be>
 800ad90:	2900      	cmp	r1, #0
 800ad92:	6863      	ldr	r3, [r4, #4]
 800ad94:	dd0b      	ble.n	800adae <_printf_float+0x1aa>
 800ad96:	6121      	str	r1, [r4, #16]
 800ad98:	b913      	cbnz	r3, 800ada0 <_printf_float+0x19c>
 800ad9a:	6822      	ldr	r2, [r4, #0]
 800ad9c:	07d0      	lsls	r0, r2, #31
 800ad9e:	d502      	bpl.n	800ada6 <_printf_float+0x1a2>
 800ada0:	3301      	adds	r3, #1
 800ada2:	440b      	add	r3, r1
 800ada4:	6123      	str	r3, [r4, #16]
 800ada6:	65a1      	str	r1, [r4, #88]	; 0x58
 800ada8:	f04f 0900 	mov.w	r9, #0
 800adac:	e7de      	b.n	800ad6c <_printf_float+0x168>
 800adae:	b913      	cbnz	r3, 800adb6 <_printf_float+0x1b2>
 800adb0:	6822      	ldr	r2, [r4, #0]
 800adb2:	07d2      	lsls	r2, r2, #31
 800adb4:	d501      	bpl.n	800adba <_printf_float+0x1b6>
 800adb6:	3302      	adds	r3, #2
 800adb8:	e7f4      	b.n	800ada4 <_printf_float+0x1a0>
 800adba:	2301      	movs	r3, #1
 800adbc:	e7f2      	b.n	800ada4 <_printf_float+0x1a0>
 800adbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800adc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adc4:	4299      	cmp	r1, r3
 800adc6:	db05      	blt.n	800add4 <_printf_float+0x1d0>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	6121      	str	r1, [r4, #16]
 800adcc:	07d8      	lsls	r0, r3, #31
 800adce:	d5ea      	bpl.n	800ada6 <_printf_float+0x1a2>
 800add0:	1c4b      	adds	r3, r1, #1
 800add2:	e7e7      	b.n	800ada4 <_printf_float+0x1a0>
 800add4:	2900      	cmp	r1, #0
 800add6:	bfd4      	ite	le
 800add8:	f1c1 0202 	rsble	r2, r1, #2
 800addc:	2201      	movgt	r2, #1
 800adde:	4413      	add	r3, r2
 800ade0:	e7e0      	b.n	800ada4 <_printf_float+0x1a0>
 800ade2:	6823      	ldr	r3, [r4, #0]
 800ade4:	055a      	lsls	r2, r3, #21
 800ade6:	d407      	bmi.n	800adf8 <_printf_float+0x1f4>
 800ade8:	6923      	ldr	r3, [r4, #16]
 800adea:	4642      	mov	r2, r8
 800adec:	4631      	mov	r1, r6
 800adee:	4628      	mov	r0, r5
 800adf0:	47b8      	blx	r7
 800adf2:	3001      	adds	r0, #1
 800adf4:	d12c      	bne.n	800ae50 <_printf_float+0x24c>
 800adf6:	e764      	b.n	800acc2 <_printf_float+0xbe>
 800adf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adfc:	f240 80e0 	bls.w	800afc0 <_printf_float+0x3bc>
 800ae00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae04:	2200      	movs	r2, #0
 800ae06:	2300      	movs	r3, #0
 800ae08:	f7f5 fe66 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d034      	beq.n	800ae7a <_printf_float+0x276>
 800ae10:	4a37      	ldr	r2, [pc, #220]	; (800aef0 <_printf_float+0x2ec>)
 800ae12:	2301      	movs	r3, #1
 800ae14:	4631      	mov	r1, r6
 800ae16:	4628      	mov	r0, r5
 800ae18:	47b8      	blx	r7
 800ae1a:	3001      	adds	r0, #1
 800ae1c:	f43f af51 	beq.w	800acc2 <_printf_float+0xbe>
 800ae20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae24:	429a      	cmp	r2, r3
 800ae26:	db02      	blt.n	800ae2e <_printf_float+0x22a>
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	07d8      	lsls	r0, r3, #31
 800ae2c:	d510      	bpl.n	800ae50 <_printf_float+0x24c>
 800ae2e:	ee18 3a10 	vmov	r3, s16
 800ae32:	4652      	mov	r2, sl
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	f43f af41 	beq.w	800acc2 <_printf_float+0xbe>
 800ae40:	f04f 0800 	mov.w	r8, #0
 800ae44:	f104 091a 	add.w	r9, r4, #26
 800ae48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	4543      	cmp	r3, r8
 800ae4e:	dc09      	bgt.n	800ae64 <_printf_float+0x260>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	079b      	lsls	r3, r3, #30
 800ae54:	f100 8107 	bmi.w	800b066 <_printf_float+0x462>
 800ae58:	68e0      	ldr	r0, [r4, #12]
 800ae5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae5c:	4298      	cmp	r0, r3
 800ae5e:	bfb8      	it	lt
 800ae60:	4618      	movlt	r0, r3
 800ae62:	e730      	b.n	800acc6 <_printf_float+0xc2>
 800ae64:	2301      	movs	r3, #1
 800ae66:	464a      	mov	r2, r9
 800ae68:	4631      	mov	r1, r6
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b8      	blx	r7
 800ae6e:	3001      	adds	r0, #1
 800ae70:	f43f af27 	beq.w	800acc2 <_printf_float+0xbe>
 800ae74:	f108 0801 	add.w	r8, r8, #1
 800ae78:	e7e6      	b.n	800ae48 <_printf_float+0x244>
 800ae7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	dc39      	bgt.n	800aef4 <_printf_float+0x2f0>
 800ae80:	4a1b      	ldr	r2, [pc, #108]	; (800aef0 <_printf_float+0x2ec>)
 800ae82:	2301      	movs	r3, #1
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	47b8      	blx	r7
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	f43f af19 	beq.w	800acc2 <_printf_float+0xbe>
 800ae90:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ae94:	4313      	orrs	r3, r2
 800ae96:	d102      	bne.n	800ae9e <_printf_float+0x29a>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	07d9      	lsls	r1, r3, #31
 800ae9c:	d5d8      	bpl.n	800ae50 <_printf_float+0x24c>
 800ae9e:	ee18 3a10 	vmov	r3, s16
 800aea2:	4652      	mov	r2, sl
 800aea4:	4631      	mov	r1, r6
 800aea6:	4628      	mov	r0, r5
 800aea8:	47b8      	blx	r7
 800aeaa:	3001      	adds	r0, #1
 800aeac:	f43f af09 	beq.w	800acc2 <_printf_float+0xbe>
 800aeb0:	f04f 0900 	mov.w	r9, #0
 800aeb4:	f104 0a1a 	add.w	sl, r4, #26
 800aeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeba:	425b      	negs	r3, r3
 800aebc:	454b      	cmp	r3, r9
 800aebe:	dc01      	bgt.n	800aec4 <_printf_float+0x2c0>
 800aec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec2:	e792      	b.n	800adea <_printf_float+0x1e6>
 800aec4:	2301      	movs	r3, #1
 800aec6:	4652      	mov	r2, sl
 800aec8:	4631      	mov	r1, r6
 800aeca:	4628      	mov	r0, r5
 800aecc:	47b8      	blx	r7
 800aece:	3001      	adds	r0, #1
 800aed0:	f43f aef7 	beq.w	800acc2 <_printf_float+0xbe>
 800aed4:	f109 0901 	add.w	r9, r9, #1
 800aed8:	e7ee      	b.n	800aeb8 <_printf_float+0x2b4>
 800aeda:	bf00      	nop
 800aedc:	7fefffff 	.word	0x7fefffff
 800aee0:	0800e1ec 	.word	0x0800e1ec
 800aee4:	0800e1f0 	.word	0x0800e1f0
 800aee8:	0800e1f4 	.word	0x0800e1f4
 800aeec:	0800e1f8 	.word	0x0800e1f8
 800aef0:	0800e1fc 	.word	0x0800e1fc
 800aef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aef8:	429a      	cmp	r2, r3
 800aefa:	bfa8      	it	ge
 800aefc:	461a      	movge	r2, r3
 800aefe:	2a00      	cmp	r2, #0
 800af00:	4691      	mov	r9, r2
 800af02:	dc37      	bgt.n	800af74 <_printf_float+0x370>
 800af04:	f04f 0b00 	mov.w	fp, #0
 800af08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af0c:	f104 021a 	add.w	r2, r4, #26
 800af10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af12:	9305      	str	r3, [sp, #20]
 800af14:	eba3 0309 	sub.w	r3, r3, r9
 800af18:	455b      	cmp	r3, fp
 800af1a:	dc33      	bgt.n	800af84 <_printf_float+0x380>
 800af1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af20:	429a      	cmp	r2, r3
 800af22:	db3b      	blt.n	800af9c <_printf_float+0x398>
 800af24:	6823      	ldr	r3, [r4, #0]
 800af26:	07da      	lsls	r2, r3, #31
 800af28:	d438      	bmi.n	800af9c <_printf_float+0x398>
 800af2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800af2e:	eba2 0903 	sub.w	r9, r2, r3
 800af32:	9b05      	ldr	r3, [sp, #20]
 800af34:	1ad2      	subs	r2, r2, r3
 800af36:	4591      	cmp	r9, r2
 800af38:	bfa8      	it	ge
 800af3a:	4691      	movge	r9, r2
 800af3c:	f1b9 0f00 	cmp.w	r9, #0
 800af40:	dc35      	bgt.n	800afae <_printf_float+0x3aa>
 800af42:	f04f 0800 	mov.w	r8, #0
 800af46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af4a:	f104 0a1a 	add.w	sl, r4, #26
 800af4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af52:	1a9b      	subs	r3, r3, r2
 800af54:	eba3 0309 	sub.w	r3, r3, r9
 800af58:	4543      	cmp	r3, r8
 800af5a:	f77f af79 	ble.w	800ae50 <_printf_float+0x24c>
 800af5e:	2301      	movs	r3, #1
 800af60:	4652      	mov	r2, sl
 800af62:	4631      	mov	r1, r6
 800af64:	4628      	mov	r0, r5
 800af66:	47b8      	blx	r7
 800af68:	3001      	adds	r0, #1
 800af6a:	f43f aeaa 	beq.w	800acc2 <_printf_float+0xbe>
 800af6e:	f108 0801 	add.w	r8, r8, #1
 800af72:	e7ec      	b.n	800af4e <_printf_float+0x34a>
 800af74:	4613      	mov	r3, r2
 800af76:	4631      	mov	r1, r6
 800af78:	4642      	mov	r2, r8
 800af7a:	4628      	mov	r0, r5
 800af7c:	47b8      	blx	r7
 800af7e:	3001      	adds	r0, #1
 800af80:	d1c0      	bne.n	800af04 <_printf_float+0x300>
 800af82:	e69e      	b.n	800acc2 <_printf_float+0xbe>
 800af84:	2301      	movs	r3, #1
 800af86:	4631      	mov	r1, r6
 800af88:	4628      	mov	r0, r5
 800af8a:	9205      	str	r2, [sp, #20]
 800af8c:	47b8      	blx	r7
 800af8e:	3001      	adds	r0, #1
 800af90:	f43f ae97 	beq.w	800acc2 <_printf_float+0xbe>
 800af94:	9a05      	ldr	r2, [sp, #20]
 800af96:	f10b 0b01 	add.w	fp, fp, #1
 800af9a:	e7b9      	b.n	800af10 <_printf_float+0x30c>
 800af9c:	ee18 3a10 	vmov	r3, s16
 800afa0:	4652      	mov	r2, sl
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b8      	blx	r7
 800afa8:	3001      	adds	r0, #1
 800afaa:	d1be      	bne.n	800af2a <_printf_float+0x326>
 800afac:	e689      	b.n	800acc2 <_printf_float+0xbe>
 800afae:	9a05      	ldr	r2, [sp, #20]
 800afb0:	464b      	mov	r3, r9
 800afb2:	4442      	add	r2, r8
 800afb4:	4631      	mov	r1, r6
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	d1c1      	bne.n	800af42 <_printf_float+0x33e>
 800afbe:	e680      	b.n	800acc2 <_printf_float+0xbe>
 800afc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afc2:	2a01      	cmp	r2, #1
 800afc4:	dc01      	bgt.n	800afca <_printf_float+0x3c6>
 800afc6:	07db      	lsls	r3, r3, #31
 800afc8:	d53a      	bpl.n	800b040 <_printf_float+0x43c>
 800afca:	2301      	movs	r3, #1
 800afcc:	4642      	mov	r2, r8
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b8      	blx	r7
 800afd4:	3001      	adds	r0, #1
 800afd6:	f43f ae74 	beq.w	800acc2 <_printf_float+0xbe>
 800afda:	ee18 3a10 	vmov	r3, s16
 800afde:	4652      	mov	r2, sl
 800afe0:	4631      	mov	r1, r6
 800afe2:	4628      	mov	r0, r5
 800afe4:	47b8      	blx	r7
 800afe6:	3001      	adds	r0, #1
 800afe8:	f43f ae6b 	beq.w	800acc2 <_printf_float+0xbe>
 800afec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aff0:	2200      	movs	r2, #0
 800aff2:	2300      	movs	r3, #0
 800aff4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800aff8:	f7f5 fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 800affc:	b9d8      	cbnz	r0, 800b036 <_printf_float+0x432>
 800affe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b002:	f108 0201 	add.w	r2, r8, #1
 800b006:	4631      	mov	r1, r6
 800b008:	4628      	mov	r0, r5
 800b00a:	47b8      	blx	r7
 800b00c:	3001      	adds	r0, #1
 800b00e:	d10e      	bne.n	800b02e <_printf_float+0x42a>
 800b010:	e657      	b.n	800acc2 <_printf_float+0xbe>
 800b012:	2301      	movs	r3, #1
 800b014:	4652      	mov	r2, sl
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	47b8      	blx	r7
 800b01c:	3001      	adds	r0, #1
 800b01e:	f43f ae50 	beq.w	800acc2 <_printf_float+0xbe>
 800b022:	f108 0801 	add.w	r8, r8, #1
 800b026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b028:	3b01      	subs	r3, #1
 800b02a:	4543      	cmp	r3, r8
 800b02c:	dcf1      	bgt.n	800b012 <_printf_float+0x40e>
 800b02e:	464b      	mov	r3, r9
 800b030:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b034:	e6da      	b.n	800adec <_printf_float+0x1e8>
 800b036:	f04f 0800 	mov.w	r8, #0
 800b03a:	f104 0a1a 	add.w	sl, r4, #26
 800b03e:	e7f2      	b.n	800b026 <_printf_float+0x422>
 800b040:	2301      	movs	r3, #1
 800b042:	4642      	mov	r2, r8
 800b044:	e7df      	b.n	800b006 <_printf_float+0x402>
 800b046:	2301      	movs	r3, #1
 800b048:	464a      	mov	r2, r9
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b8      	blx	r7
 800b050:	3001      	adds	r0, #1
 800b052:	f43f ae36 	beq.w	800acc2 <_printf_float+0xbe>
 800b056:	f108 0801 	add.w	r8, r8, #1
 800b05a:	68e3      	ldr	r3, [r4, #12]
 800b05c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b05e:	1a5b      	subs	r3, r3, r1
 800b060:	4543      	cmp	r3, r8
 800b062:	dcf0      	bgt.n	800b046 <_printf_float+0x442>
 800b064:	e6f8      	b.n	800ae58 <_printf_float+0x254>
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	f104 0919 	add.w	r9, r4, #25
 800b06e:	e7f4      	b.n	800b05a <_printf_float+0x456>

0800b070 <_printf_common>:
 800b070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b074:	4616      	mov	r6, r2
 800b076:	4699      	mov	r9, r3
 800b078:	688a      	ldr	r2, [r1, #8]
 800b07a:	690b      	ldr	r3, [r1, #16]
 800b07c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b080:	4293      	cmp	r3, r2
 800b082:	bfb8      	it	lt
 800b084:	4613      	movlt	r3, r2
 800b086:	6033      	str	r3, [r6, #0]
 800b088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b08c:	4607      	mov	r7, r0
 800b08e:	460c      	mov	r4, r1
 800b090:	b10a      	cbz	r2, 800b096 <_printf_common+0x26>
 800b092:	3301      	adds	r3, #1
 800b094:	6033      	str	r3, [r6, #0]
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	0699      	lsls	r1, r3, #26
 800b09a:	bf42      	ittt	mi
 800b09c:	6833      	ldrmi	r3, [r6, #0]
 800b09e:	3302      	addmi	r3, #2
 800b0a0:	6033      	strmi	r3, [r6, #0]
 800b0a2:	6825      	ldr	r5, [r4, #0]
 800b0a4:	f015 0506 	ands.w	r5, r5, #6
 800b0a8:	d106      	bne.n	800b0b8 <_printf_common+0x48>
 800b0aa:	f104 0a19 	add.w	sl, r4, #25
 800b0ae:	68e3      	ldr	r3, [r4, #12]
 800b0b0:	6832      	ldr	r2, [r6, #0]
 800b0b2:	1a9b      	subs	r3, r3, r2
 800b0b4:	42ab      	cmp	r3, r5
 800b0b6:	dc26      	bgt.n	800b106 <_printf_common+0x96>
 800b0b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0bc:	1e13      	subs	r3, r2, #0
 800b0be:	6822      	ldr	r2, [r4, #0]
 800b0c0:	bf18      	it	ne
 800b0c2:	2301      	movne	r3, #1
 800b0c4:	0692      	lsls	r2, r2, #26
 800b0c6:	d42b      	bmi.n	800b120 <_printf_common+0xb0>
 800b0c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	47c0      	blx	r8
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	d01e      	beq.n	800b114 <_printf_common+0xa4>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	6922      	ldr	r2, [r4, #16]
 800b0da:	f003 0306 	and.w	r3, r3, #6
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	bf02      	ittt	eq
 800b0e2:	68e5      	ldreq	r5, [r4, #12]
 800b0e4:	6833      	ldreq	r3, [r6, #0]
 800b0e6:	1aed      	subeq	r5, r5, r3
 800b0e8:	68a3      	ldr	r3, [r4, #8]
 800b0ea:	bf0c      	ite	eq
 800b0ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0f0:	2500      	movne	r5, #0
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	bfc4      	itt	gt
 800b0f6:	1a9b      	subgt	r3, r3, r2
 800b0f8:	18ed      	addgt	r5, r5, r3
 800b0fa:	2600      	movs	r6, #0
 800b0fc:	341a      	adds	r4, #26
 800b0fe:	42b5      	cmp	r5, r6
 800b100:	d11a      	bne.n	800b138 <_printf_common+0xc8>
 800b102:	2000      	movs	r0, #0
 800b104:	e008      	b.n	800b118 <_printf_common+0xa8>
 800b106:	2301      	movs	r3, #1
 800b108:	4652      	mov	r2, sl
 800b10a:	4649      	mov	r1, r9
 800b10c:	4638      	mov	r0, r7
 800b10e:	47c0      	blx	r8
 800b110:	3001      	adds	r0, #1
 800b112:	d103      	bne.n	800b11c <_printf_common+0xac>
 800b114:	f04f 30ff 	mov.w	r0, #4294967295
 800b118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b11c:	3501      	adds	r5, #1
 800b11e:	e7c6      	b.n	800b0ae <_printf_common+0x3e>
 800b120:	18e1      	adds	r1, r4, r3
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	2030      	movs	r0, #48	; 0x30
 800b126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b12a:	4422      	add	r2, r4
 800b12c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b134:	3302      	adds	r3, #2
 800b136:	e7c7      	b.n	800b0c8 <_printf_common+0x58>
 800b138:	2301      	movs	r3, #1
 800b13a:	4622      	mov	r2, r4
 800b13c:	4649      	mov	r1, r9
 800b13e:	4638      	mov	r0, r7
 800b140:	47c0      	blx	r8
 800b142:	3001      	adds	r0, #1
 800b144:	d0e6      	beq.n	800b114 <_printf_common+0xa4>
 800b146:	3601      	adds	r6, #1
 800b148:	e7d9      	b.n	800b0fe <_printf_common+0x8e>
	...

0800b14c <_printf_i>:
 800b14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	7e0f      	ldrb	r7, [r1, #24]
 800b152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b154:	2f78      	cmp	r7, #120	; 0x78
 800b156:	4691      	mov	r9, r2
 800b158:	4680      	mov	r8, r0
 800b15a:	460c      	mov	r4, r1
 800b15c:	469a      	mov	sl, r3
 800b15e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b162:	d807      	bhi.n	800b174 <_printf_i+0x28>
 800b164:	2f62      	cmp	r7, #98	; 0x62
 800b166:	d80a      	bhi.n	800b17e <_printf_i+0x32>
 800b168:	2f00      	cmp	r7, #0
 800b16a:	f000 80d4 	beq.w	800b316 <_printf_i+0x1ca>
 800b16e:	2f58      	cmp	r7, #88	; 0x58
 800b170:	f000 80c0 	beq.w	800b2f4 <_printf_i+0x1a8>
 800b174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b17c:	e03a      	b.n	800b1f4 <_printf_i+0xa8>
 800b17e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b182:	2b15      	cmp	r3, #21
 800b184:	d8f6      	bhi.n	800b174 <_printf_i+0x28>
 800b186:	a101      	add	r1, pc, #4	; (adr r1, 800b18c <_printf_i+0x40>)
 800b188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b18c:	0800b1e5 	.word	0x0800b1e5
 800b190:	0800b1f9 	.word	0x0800b1f9
 800b194:	0800b175 	.word	0x0800b175
 800b198:	0800b175 	.word	0x0800b175
 800b19c:	0800b175 	.word	0x0800b175
 800b1a0:	0800b175 	.word	0x0800b175
 800b1a4:	0800b1f9 	.word	0x0800b1f9
 800b1a8:	0800b175 	.word	0x0800b175
 800b1ac:	0800b175 	.word	0x0800b175
 800b1b0:	0800b175 	.word	0x0800b175
 800b1b4:	0800b175 	.word	0x0800b175
 800b1b8:	0800b2fd 	.word	0x0800b2fd
 800b1bc:	0800b225 	.word	0x0800b225
 800b1c0:	0800b2b7 	.word	0x0800b2b7
 800b1c4:	0800b175 	.word	0x0800b175
 800b1c8:	0800b175 	.word	0x0800b175
 800b1cc:	0800b31f 	.word	0x0800b31f
 800b1d0:	0800b175 	.word	0x0800b175
 800b1d4:	0800b225 	.word	0x0800b225
 800b1d8:	0800b175 	.word	0x0800b175
 800b1dc:	0800b175 	.word	0x0800b175
 800b1e0:	0800b2bf 	.word	0x0800b2bf
 800b1e4:	682b      	ldr	r3, [r5, #0]
 800b1e6:	1d1a      	adds	r2, r3, #4
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	602a      	str	r2, [r5, #0]
 800b1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e09f      	b.n	800b338 <_printf_i+0x1ec>
 800b1f8:	6820      	ldr	r0, [r4, #0]
 800b1fa:	682b      	ldr	r3, [r5, #0]
 800b1fc:	0607      	lsls	r7, r0, #24
 800b1fe:	f103 0104 	add.w	r1, r3, #4
 800b202:	6029      	str	r1, [r5, #0]
 800b204:	d501      	bpl.n	800b20a <_printf_i+0xbe>
 800b206:	681e      	ldr	r6, [r3, #0]
 800b208:	e003      	b.n	800b212 <_printf_i+0xc6>
 800b20a:	0646      	lsls	r6, r0, #25
 800b20c:	d5fb      	bpl.n	800b206 <_printf_i+0xba>
 800b20e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b212:	2e00      	cmp	r6, #0
 800b214:	da03      	bge.n	800b21e <_printf_i+0xd2>
 800b216:	232d      	movs	r3, #45	; 0x2d
 800b218:	4276      	negs	r6, r6
 800b21a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b21e:	485a      	ldr	r0, [pc, #360]	; (800b388 <_printf_i+0x23c>)
 800b220:	230a      	movs	r3, #10
 800b222:	e012      	b.n	800b24a <_printf_i+0xfe>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	6820      	ldr	r0, [r4, #0]
 800b228:	1d19      	adds	r1, r3, #4
 800b22a:	6029      	str	r1, [r5, #0]
 800b22c:	0605      	lsls	r5, r0, #24
 800b22e:	d501      	bpl.n	800b234 <_printf_i+0xe8>
 800b230:	681e      	ldr	r6, [r3, #0]
 800b232:	e002      	b.n	800b23a <_printf_i+0xee>
 800b234:	0641      	lsls	r1, r0, #25
 800b236:	d5fb      	bpl.n	800b230 <_printf_i+0xe4>
 800b238:	881e      	ldrh	r6, [r3, #0]
 800b23a:	4853      	ldr	r0, [pc, #332]	; (800b388 <_printf_i+0x23c>)
 800b23c:	2f6f      	cmp	r7, #111	; 0x6f
 800b23e:	bf0c      	ite	eq
 800b240:	2308      	moveq	r3, #8
 800b242:	230a      	movne	r3, #10
 800b244:	2100      	movs	r1, #0
 800b246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b24a:	6865      	ldr	r5, [r4, #4]
 800b24c:	60a5      	str	r5, [r4, #8]
 800b24e:	2d00      	cmp	r5, #0
 800b250:	bfa2      	ittt	ge
 800b252:	6821      	ldrge	r1, [r4, #0]
 800b254:	f021 0104 	bicge.w	r1, r1, #4
 800b258:	6021      	strge	r1, [r4, #0]
 800b25a:	b90e      	cbnz	r6, 800b260 <_printf_i+0x114>
 800b25c:	2d00      	cmp	r5, #0
 800b25e:	d04b      	beq.n	800b2f8 <_printf_i+0x1ac>
 800b260:	4615      	mov	r5, r2
 800b262:	fbb6 f1f3 	udiv	r1, r6, r3
 800b266:	fb03 6711 	mls	r7, r3, r1, r6
 800b26a:	5dc7      	ldrb	r7, [r0, r7]
 800b26c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b270:	4637      	mov	r7, r6
 800b272:	42bb      	cmp	r3, r7
 800b274:	460e      	mov	r6, r1
 800b276:	d9f4      	bls.n	800b262 <_printf_i+0x116>
 800b278:	2b08      	cmp	r3, #8
 800b27a:	d10b      	bne.n	800b294 <_printf_i+0x148>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	07de      	lsls	r6, r3, #31
 800b280:	d508      	bpl.n	800b294 <_printf_i+0x148>
 800b282:	6923      	ldr	r3, [r4, #16]
 800b284:	6861      	ldr	r1, [r4, #4]
 800b286:	4299      	cmp	r1, r3
 800b288:	bfde      	ittt	le
 800b28a:	2330      	movle	r3, #48	; 0x30
 800b28c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b290:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b294:	1b52      	subs	r2, r2, r5
 800b296:	6122      	str	r2, [r4, #16]
 800b298:	f8cd a000 	str.w	sl, [sp]
 800b29c:	464b      	mov	r3, r9
 800b29e:	aa03      	add	r2, sp, #12
 800b2a0:	4621      	mov	r1, r4
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	f7ff fee4 	bl	800b070 <_printf_common>
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d14a      	bne.n	800b342 <_printf_i+0x1f6>
 800b2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b0:	b004      	add	sp, #16
 800b2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	f043 0320 	orr.w	r3, r3, #32
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	4833      	ldr	r0, [pc, #204]	; (800b38c <_printf_i+0x240>)
 800b2c0:	2778      	movs	r7, #120	; 0x78
 800b2c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b2c6:	6823      	ldr	r3, [r4, #0]
 800b2c8:	6829      	ldr	r1, [r5, #0]
 800b2ca:	061f      	lsls	r7, r3, #24
 800b2cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2d0:	d402      	bmi.n	800b2d8 <_printf_i+0x18c>
 800b2d2:	065f      	lsls	r7, r3, #25
 800b2d4:	bf48      	it	mi
 800b2d6:	b2b6      	uxthmi	r6, r6
 800b2d8:	07df      	lsls	r7, r3, #31
 800b2da:	bf48      	it	mi
 800b2dc:	f043 0320 	orrmi.w	r3, r3, #32
 800b2e0:	6029      	str	r1, [r5, #0]
 800b2e2:	bf48      	it	mi
 800b2e4:	6023      	strmi	r3, [r4, #0]
 800b2e6:	b91e      	cbnz	r6, 800b2f0 <_printf_i+0x1a4>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	f023 0320 	bic.w	r3, r3, #32
 800b2ee:	6023      	str	r3, [r4, #0]
 800b2f0:	2310      	movs	r3, #16
 800b2f2:	e7a7      	b.n	800b244 <_printf_i+0xf8>
 800b2f4:	4824      	ldr	r0, [pc, #144]	; (800b388 <_printf_i+0x23c>)
 800b2f6:	e7e4      	b.n	800b2c2 <_printf_i+0x176>
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	e7bd      	b.n	800b278 <_printf_i+0x12c>
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	6826      	ldr	r6, [r4, #0]
 800b300:	6961      	ldr	r1, [r4, #20]
 800b302:	1d18      	adds	r0, r3, #4
 800b304:	6028      	str	r0, [r5, #0]
 800b306:	0635      	lsls	r5, r6, #24
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	d501      	bpl.n	800b310 <_printf_i+0x1c4>
 800b30c:	6019      	str	r1, [r3, #0]
 800b30e:	e002      	b.n	800b316 <_printf_i+0x1ca>
 800b310:	0670      	lsls	r0, r6, #25
 800b312:	d5fb      	bpl.n	800b30c <_printf_i+0x1c0>
 800b314:	8019      	strh	r1, [r3, #0]
 800b316:	2300      	movs	r3, #0
 800b318:	6123      	str	r3, [r4, #16]
 800b31a:	4615      	mov	r5, r2
 800b31c:	e7bc      	b.n	800b298 <_printf_i+0x14c>
 800b31e:	682b      	ldr	r3, [r5, #0]
 800b320:	1d1a      	adds	r2, r3, #4
 800b322:	602a      	str	r2, [r5, #0]
 800b324:	681d      	ldr	r5, [r3, #0]
 800b326:	6862      	ldr	r2, [r4, #4]
 800b328:	2100      	movs	r1, #0
 800b32a:	4628      	mov	r0, r5
 800b32c:	f7f4 ff58 	bl	80001e0 <memchr>
 800b330:	b108      	cbz	r0, 800b336 <_printf_i+0x1ea>
 800b332:	1b40      	subs	r0, r0, r5
 800b334:	6060      	str	r0, [r4, #4]
 800b336:	6863      	ldr	r3, [r4, #4]
 800b338:	6123      	str	r3, [r4, #16]
 800b33a:	2300      	movs	r3, #0
 800b33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b340:	e7aa      	b.n	800b298 <_printf_i+0x14c>
 800b342:	6923      	ldr	r3, [r4, #16]
 800b344:	462a      	mov	r2, r5
 800b346:	4649      	mov	r1, r9
 800b348:	4640      	mov	r0, r8
 800b34a:	47d0      	blx	sl
 800b34c:	3001      	adds	r0, #1
 800b34e:	d0ad      	beq.n	800b2ac <_printf_i+0x160>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	079b      	lsls	r3, r3, #30
 800b354:	d413      	bmi.n	800b37e <_printf_i+0x232>
 800b356:	68e0      	ldr	r0, [r4, #12]
 800b358:	9b03      	ldr	r3, [sp, #12]
 800b35a:	4298      	cmp	r0, r3
 800b35c:	bfb8      	it	lt
 800b35e:	4618      	movlt	r0, r3
 800b360:	e7a6      	b.n	800b2b0 <_printf_i+0x164>
 800b362:	2301      	movs	r3, #1
 800b364:	4632      	mov	r2, r6
 800b366:	4649      	mov	r1, r9
 800b368:	4640      	mov	r0, r8
 800b36a:	47d0      	blx	sl
 800b36c:	3001      	adds	r0, #1
 800b36e:	d09d      	beq.n	800b2ac <_printf_i+0x160>
 800b370:	3501      	adds	r5, #1
 800b372:	68e3      	ldr	r3, [r4, #12]
 800b374:	9903      	ldr	r1, [sp, #12]
 800b376:	1a5b      	subs	r3, r3, r1
 800b378:	42ab      	cmp	r3, r5
 800b37a:	dcf2      	bgt.n	800b362 <_printf_i+0x216>
 800b37c:	e7eb      	b.n	800b356 <_printf_i+0x20a>
 800b37e:	2500      	movs	r5, #0
 800b380:	f104 0619 	add.w	r6, r4, #25
 800b384:	e7f5      	b.n	800b372 <_printf_i+0x226>
 800b386:	bf00      	nop
 800b388:	0800e1fe 	.word	0x0800e1fe
 800b38c:	0800e20f 	.word	0x0800e20f

0800b390 <std>:
 800b390:	2300      	movs	r3, #0
 800b392:	b510      	push	{r4, lr}
 800b394:	4604      	mov	r4, r0
 800b396:	e9c0 3300 	strd	r3, r3, [r0]
 800b39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b39e:	6083      	str	r3, [r0, #8]
 800b3a0:	8181      	strh	r1, [r0, #12]
 800b3a2:	6643      	str	r3, [r0, #100]	; 0x64
 800b3a4:	81c2      	strh	r2, [r0, #14]
 800b3a6:	6183      	str	r3, [r0, #24]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	2208      	movs	r2, #8
 800b3ac:	305c      	adds	r0, #92	; 0x5c
 800b3ae:	f000 f928 	bl	800b602 <memset>
 800b3b2:	4b0d      	ldr	r3, [pc, #52]	; (800b3e8 <std+0x58>)
 800b3b4:	6263      	str	r3, [r4, #36]	; 0x24
 800b3b6:	4b0d      	ldr	r3, [pc, #52]	; (800b3ec <std+0x5c>)
 800b3b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3ba:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <std+0x60>)
 800b3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3be:	4b0d      	ldr	r3, [pc, #52]	; (800b3f4 <std+0x64>)
 800b3c0:	6323      	str	r3, [r4, #48]	; 0x30
 800b3c2:	4b0d      	ldr	r3, [pc, #52]	; (800b3f8 <std+0x68>)
 800b3c4:	6224      	str	r4, [r4, #32]
 800b3c6:	429c      	cmp	r4, r3
 800b3c8:	d006      	beq.n	800b3d8 <std+0x48>
 800b3ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b3ce:	4294      	cmp	r4, r2
 800b3d0:	d002      	beq.n	800b3d8 <std+0x48>
 800b3d2:	33d0      	adds	r3, #208	; 0xd0
 800b3d4:	429c      	cmp	r4, r3
 800b3d6:	d105      	bne.n	800b3e4 <std+0x54>
 800b3d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3e0:	f000 b9e0 	b.w	800b7a4 <__retarget_lock_init_recursive>
 800b3e4:	bd10      	pop	{r4, pc}
 800b3e6:	bf00      	nop
 800b3e8:	0800b57d 	.word	0x0800b57d
 800b3ec:	0800b59f 	.word	0x0800b59f
 800b3f0:	0800b5d7 	.word	0x0800b5d7
 800b3f4:	0800b5fb 	.word	0x0800b5fb
 800b3f8:	20000804 	.word	0x20000804

0800b3fc <stdio_exit_handler>:
 800b3fc:	4a02      	ldr	r2, [pc, #8]	; (800b408 <stdio_exit_handler+0xc>)
 800b3fe:	4903      	ldr	r1, [pc, #12]	; (800b40c <stdio_exit_handler+0x10>)
 800b400:	4803      	ldr	r0, [pc, #12]	; (800b410 <stdio_exit_handler+0x14>)
 800b402:	f000 b869 	b.w	800b4d8 <_fwalk_sglue>
 800b406:	bf00      	nop
 800b408:	2000001c 	.word	0x2000001c
 800b40c:	0800d009 	.word	0x0800d009
 800b410:	20000028 	.word	0x20000028

0800b414 <cleanup_stdio>:
 800b414:	6841      	ldr	r1, [r0, #4]
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <cleanup_stdio+0x34>)
 800b418:	4299      	cmp	r1, r3
 800b41a:	b510      	push	{r4, lr}
 800b41c:	4604      	mov	r4, r0
 800b41e:	d001      	beq.n	800b424 <cleanup_stdio+0x10>
 800b420:	f001 fdf2 	bl	800d008 <_fflush_r>
 800b424:	68a1      	ldr	r1, [r4, #8]
 800b426:	4b09      	ldr	r3, [pc, #36]	; (800b44c <cleanup_stdio+0x38>)
 800b428:	4299      	cmp	r1, r3
 800b42a:	d002      	beq.n	800b432 <cleanup_stdio+0x1e>
 800b42c:	4620      	mov	r0, r4
 800b42e:	f001 fdeb 	bl	800d008 <_fflush_r>
 800b432:	68e1      	ldr	r1, [r4, #12]
 800b434:	4b06      	ldr	r3, [pc, #24]	; (800b450 <cleanup_stdio+0x3c>)
 800b436:	4299      	cmp	r1, r3
 800b438:	d004      	beq.n	800b444 <cleanup_stdio+0x30>
 800b43a:	4620      	mov	r0, r4
 800b43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b440:	f001 bde2 	b.w	800d008 <_fflush_r>
 800b444:	bd10      	pop	{r4, pc}
 800b446:	bf00      	nop
 800b448:	20000804 	.word	0x20000804
 800b44c:	2000086c 	.word	0x2000086c
 800b450:	200008d4 	.word	0x200008d4

0800b454 <global_stdio_init.part.0>:
 800b454:	b510      	push	{r4, lr}
 800b456:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <global_stdio_init.part.0+0x30>)
 800b458:	4c0b      	ldr	r4, [pc, #44]	; (800b488 <global_stdio_init.part.0+0x34>)
 800b45a:	4a0c      	ldr	r2, [pc, #48]	; (800b48c <global_stdio_init.part.0+0x38>)
 800b45c:	601a      	str	r2, [r3, #0]
 800b45e:	4620      	mov	r0, r4
 800b460:	2200      	movs	r2, #0
 800b462:	2104      	movs	r1, #4
 800b464:	f7ff ff94 	bl	800b390 <std>
 800b468:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b46c:	2201      	movs	r2, #1
 800b46e:	2109      	movs	r1, #9
 800b470:	f7ff ff8e 	bl	800b390 <std>
 800b474:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b478:	2202      	movs	r2, #2
 800b47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b47e:	2112      	movs	r1, #18
 800b480:	f7ff bf86 	b.w	800b390 <std>
 800b484:	2000093c 	.word	0x2000093c
 800b488:	20000804 	.word	0x20000804
 800b48c:	0800b3fd 	.word	0x0800b3fd

0800b490 <__sfp_lock_acquire>:
 800b490:	4801      	ldr	r0, [pc, #4]	; (800b498 <__sfp_lock_acquire+0x8>)
 800b492:	f000 b988 	b.w	800b7a6 <__retarget_lock_acquire_recursive>
 800b496:	bf00      	nop
 800b498:	20000945 	.word	0x20000945

0800b49c <__sfp_lock_release>:
 800b49c:	4801      	ldr	r0, [pc, #4]	; (800b4a4 <__sfp_lock_release+0x8>)
 800b49e:	f000 b983 	b.w	800b7a8 <__retarget_lock_release_recursive>
 800b4a2:	bf00      	nop
 800b4a4:	20000945 	.word	0x20000945

0800b4a8 <__sinit>:
 800b4a8:	b510      	push	{r4, lr}
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	f7ff fff0 	bl	800b490 <__sfp_lock_acquire>
 800b4b0:	6a23      	ldr	r3, [r4, #32]
 800b4b2:	b11b      	cbz	r3, 800b4bc <__sinit+0x14>
 800b4b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b8:	f7ff bff0 	b.w	800b49c <__sfp_lock_release>
 800b4bc:	4b04      	ldr	r3, [pc, #16]	; (800b4d0 <__sinit+0x28>)
 800b4be:	6223      	str	r3, [r4, #32]
 800b4c0:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <__sinit+0x2c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1f5      	bne.n	800b4b4 <__sinit+0xc>
 800b4c8:	f7ff ffc4 	bl	800b454 <global_stdio_init.part.0>
 800b4cc:	e7f2      	b.n	800b4b4 <__sinit+0xc>
 800b4ce:	bf00      	nop
 800b4d0:	0800b415 	.word	0x0800b415
 800b4d4:	2000093c 	.word	0x2000093c

0800b4d8 <_fwalk_sglue>:
 800b4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4dc:	4607      	mov	r7, r0
 800b4de:	4688      	mov	r8, r1
 800b4e0:	4614      	mov	r4, r2
 800b4e2:	2600      	movs	r6, #0
 800b4e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4e8:	f1b9 0901 	subs.w	r9, r9, #1
 800b4ec:	d505      	bpl.n	800b4fa <_fwalk_sglue+0x22>
 800b4ee:	6824      	ldr	r4, [r4, #0]
 800b4f0:	2c00      	cmp	r4, #0
 800b4f2:	d1f7      	bne.n	800b4e4 <_fwalk_sglue+0xc>
 800b4f4:	4630      	mov	r0, r6
 800b4f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4fa:	89ab      	ldrh	r3, [r5, #12]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d907      	bls.n	800b510 <_fwalk_sglue+0x38>
 800b500:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b504:	3301      	adds	r3, #1
 800b506:	d003      	beq.n	800b510 <_fwalk_sglue+0x38>
 800b508:	4629      	mov	r1, r5
 800b50a:	4638      	mov	r0, r7
 800b50c:	47c0      	blx	r8
 800b50e:	4306      	orrs	r6, r0
 800b510:	3568      	adds	r5, #104	; 0x68
 800b512:	e7e9      	b.n	800b4e8 <_fwalk_sglue+0x10>

0800b514 <sniprintf>:
 800b514:	b40c      	push	{r2, r3}
 800b516:	b530      	push	{r4, r5, lr}
 800b518:	4b17      	ldr	r3, [pc, #92]	; (800b578 <sniprintf+0x64>)
 800b51a:	1e0c      	subs	r4, r1, #0
 800b51c:	681d      	ldr	r5, [r3, #0]
 800b51e:	b09d      	sub	sp, #116	; 0x74
 800b520:	da08      	bge.n	800b534 <sniprintf+0x20>
 800b522:	238b      	movs	r3, #139	; 0x8b
 800b524:	602b      	str	r3, [r5, #0]
 800b526:	f04f 30ff 	mov.w	r0, #4294967295
 800b52a:	b01d      	add	sp, #116	; 0x74
 800b52c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b530:	b002      	add	sp, #8
 800b532:	4770      	bx	lr
 800b534:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b538:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b53c:	bf14      	ite	ne
 800b53e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b542:	4623      	moveq	r3, r4
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	9307      	str	r3, [sp, #28]
 800b548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b54c:	9002      	str	r0, [sp, #8]
 800b54e:	9006      	str	r0, [sp, #24]
 800b550:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b554:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b556:	ab21      	add	r3, sp, #132	; 0x84
 800b558:	a902      	add	r1, sp, #8
 800b55a:	4628      	mov	r0, r5
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	f001 fbcf 	bl	800cd00 <_svfiprintf_r>
 800b562:	1c43      	adds	r3, r0, #1
 800b564:	bfbc      	itt	lt
 800b566:	238b      	movlt	r3, #139	; 0x8b
 800b568:	602b      	strlt	r3, [r5, #0]
 800b56a:	2c00      	cmp	r4, #0
 800b56c:	d0dd      	beq.n	800b52a <sniprintf+0x16>
 800b56e:	9b02      	ldr	r3, [sp, #8]
 800b570:	2200      	movs	r2, #0
 800b572:	701a      	strb	r2, [r3, #0]
 800b574:	e7d9      	b.n	800b52a <sniprintf+0x16>
 800b576:	bf00      	nop
 800b578:	20000074 	.word	0x20000074

0800b57c <__sread>:
 800b57c:	b510      	push	{r4, lr}
 800b57e:	460c      	mov	r4, r1
 800b580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b584:	f000 f89c 	bl	800b6c0 <_read_r>
 800b588:	2800      	cmp	r0, #0
 800b58a:	bfab      	itete	ge
 800b58c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b58e:	89a3      	ldrhlt	r3, [r4, #12]
 800b590:	181b      	addge	r3, r3, r0
 800b592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b596:	bfac      	ite	ge
 800b598:	6563      	strge	r3, [r4, #84]	; 0x54
 800b59a:	81a3      	strhlt	r3, [r4, #12]
 800b59c:	bd10      	pop	{r4, pc}

0800b59e <__swrite>:
 800b59e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a2:	461f      	mov	r7, r3
 800b5a4:	898b      	ldrh	r3, [r1, #12]
 800b5a6:	05db      	lsls	r3, r3, #23
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	4616      	mov	r6, r2
 800b5ae:	d505      	bpl.n	800b5bc <__swrite+0x1e>
 800b5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f000 f870 	bl	800b69c <_lseek_r>
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	4632      	mov	r2, r6
 800b5ca:	463b      	mov	r3, r7
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5d2:	f000 b8ab 	b.w	800b72c <_write_r>

0800b5d6 <__sseek>:
 800b5d6:	b510      	push	{r4, lr}
 800b5d8:	460c      	mov	r4, r1
 800b5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5de:	f000 f85d 	bl	800b69c <_lseek_r>
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	bf15      	itete	ne
 800b5e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b5ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b5ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b5f2:	81a3      	strheq	r3, [r4, #12]
 800b5f4:	bf18      	it	ne
 800b5f6:	81a3      	strhne	r3, [r4, #12]
 800b5f8:	bd10      	pop	{r4, pc}

0800b5fa <__sclose>:
 800b5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fe:	f000 b83d 	b.w	800b67c <_close_r>

0800b602 <memset>:
 800b602:	4402      	add	r2, r0
 800b604:	4603      	mov	r3, r0
 800b606:	4293      	cmp	r3, r2
 800b608:	d100      	bne.n	800b60c <memset+0xa>
 800b60a:	4770      	bx	lr
 800b60c:	f803 1b01 	strb.w	r1, [r3], #1
 800b610:	e7f9      	b.n	800b606 <memset+0x4>

0800b612 <_raise_r>:
 800b612:	291f      	cmp	r1, #31
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4604      	mov	r4, r0
 800b618:	460d      	mov	r5, r1
 800b61a:	d904      	bls.n	800b626 <_raise_r+0x14>
 800b61c:	2316      	movs	r3, #22
 800b61e:	6003      	str	r3, [r0, #0]
 800b620:	f04f 30ff 	mov.w	r0, #4294967295
 800b624:	bd38      	pop	{r3, r4, r5, pc}
 800b626:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b628:	b112      	cbz	r2, 800b630 <_raise_r+0x1e>
 800b62a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b62e:	b94b      	cbnz	r3, 800b644 <_raise_r+0x32>
 800b630:	4620      	mov	r0, r4
 800b632:	f000 f869 	bl	800b708 <_getpid_r>
 800b636:	462a      	mov	r2, r5
 800b638:	4601      	mov	r1, r0
 800b63a:	4620      	mov	r0, r4
 800b63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b640:	f000 b850 	b.w	800b6e4 <_kill_r>
 800b644:	2b01      	cmp	r3, #1
 800b646:	d00a      	beq.n	800b65e <_raise_r+0x4c>
 800b648:	1c59      	adds	r1, r3, #1
 800b64a:	d103      	bne.n	800b654 <_raise_r+0x42>
 800b64c:	2316      	movs	r3, #22
 800b64e:	6003      	str	r3, [r0, #0]
 800b650:	2001      	movs	r0, #1
 800b652:	e7e7      	b.n	800b624 <_raise_r+0x12>
 800b654:	2400      	movs	r4, #0
 800b656:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b65a:	4628      	mov	r0, r5
 800b65c:	4798      	blx	r3
 800b65e:	2000      	movs	r0, #0
 800b660:	e7e0      	b.n	800b624 <_raise_r+0x12>
	...

0800b664 <raise>:
 800b664:	4b02      	ldr	r3, [pc, #8]	; (800b670 <raise+0xc>)
 800b666:	4601      	mov	r1, r0
 800b668:	6818      	ldr	r0, [r3, #0]
 800b66a:	f7ff bfd2 	b.w	800b612 <_raise_r>
 800b66e:	bf00      	nop
 800b670:	20000074 	.word	0x20000074

0800b674 <_localeconv_r>:
 800b674:	4800      	ldr	r0, [pc, #0]	; (800b678 <_localeconv_r+0x4>)
 800b676:	4770      	bx	lr
 800b678:	20000168 	.word	0x20000168

0800b67c <_close_r>:
 800b67c:	b538      	push	{r3, r4, r5, lr}
 800b67e:	4d06      	ldr	r5, [pc, #24]	; (800b698 <_close_r+0x1c>)
 800b680:	2300      	movs	r3, #0
 800b682:	4604      	mov	r4, r0
 800b684:	4608      	mov	r0, r1
 800b686:	602b      	str	r3, [r5, #0]
 800b688:	f7f8 fcd3 	bl	8004032 <_close>
 800b68c:	1c43      	adds	r3, r0, #1
 800b68e:	d102      	bne.n	800b696 <_close_r+0x1a>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	b103      	cbz	r3, 800b696 <_close_r+0x1a>
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	bd38      	pop	{r3, r4, r5, pc}
 800b698:	20000940 	.word	0x20000940

0800b69c <_lseek_r>:
 800b69c:	b538      	push	{r3, r4, r5, lr}
 800b69e:	4d07      	ldr	r5, [pc, #28]	; (800b6bc <_lseek_r+0x20>)
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	4608      	mov	r0, r1
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	602a      	str	r2, [r5, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f7f8 fce8 	bl	8004080 <_lseek>
 800b6b0:	1c43      	adds	r3, r0, #1
 800b6b2:	d102      	bne.n	800b6ba <_lseek_r+0x1e>
 800b6b4:	682b      	ldr	r3, [r5, #0]
 800b6b6:	b103      	cbz	r3, 800b6ba <_lseek_r+0x1e>
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	bd38      	pop	{r3, r4, r5, pc}
 800b6bc:	20000940 	.word	0x20000940

0800b6c0 <_read_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4d07      	ldr	r5, [pc, #28]	; (800b6e0 <_read_r+0x20>)
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	602a      	str	r2, [r5, #0]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f7f8 fc76 	bl	8003fc0 <_read>
 800b6d4:	1c43      	adds	r3, r0, #1
 800b6d6:	d102      	bne.n	800b6de <_read_r+0x1e>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	b103      	cbz	r3, 800b6de <_read_r+0x1e>
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	bd38      	pop	{r3, r4, r5, pc}
 800b6e0:	20000940 	.word	0x20000940

0800b6e4 <_kill_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	; (800b704 <_kill_r+0x20>)
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	4608      	mov	r0, r1
 800b6ee:	4611      	mov	r1, r2
 800b6f0:	602b      	str	r3, [r5, #0]
 800b6f2:	f7f8 fc4b 	bl	8003f8c <_kill>
 800b6f6:	1c43      	adds	r3, r0, #1
 800b6f8:	d102      	bne.n	800b700 <_kill_r+0x1c>
 800b6fa:	682b      	ldr	r3, [r5, #0]
 800b6fc:	b103      	cbz	r3, 800b700 <_kill_r+0x1c>
 800b6fe:	6023      	str	r3, [r4, #0]
 800b700:	bd38      	pop	{r3, r4, r5, pc}
 800b702:	bf00      	nop
 800b704:	20000940 	.word	0x20000940

0800b708 <_getpid_r>:
 800b708:	f7f8 bc38 	b.w	8003f7c <_getpid>

0800b70c <_sbrk_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d06      	ldr	r5, [pc, #24]	; (800b728 <_sbrk_r+0x1c>)
 800b710:	2300      	movs	r3, #0
 800b712:	4604      	mov	r4, r0
 800b714:	4608      	mov	r0, r1
 800b716:	602b      	str	r3, [r5, #0]
 800b718:	f7f8 fcc0 	bl	800409c <_sbrk>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_sbrk_r+0x1a>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_sbrk_r+0x1a>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20000940 	.word	0x20000940

0800b72c <_write_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d07      	ldr	r5, [pc, #28]	; (800b74c <_write_r+0x20>)
 800b730:	4604      	mov	r4, r0
 800b732:	4608      	mov	r0, r1
 800b734:	4611      	mov	r1, r2
 800b736:	2200      	movs	r2, #0
 800b738:	602a      	str	r2, [r5, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	f7f8 fc5d 	bl	8003ffa <_write>
 800b740:	1c43      	adds	r3, r0, #1
 800b742:	d102      	bne.n	800b74a <_write_r+0x1e>
 800b744:	682b      	ldr	r3, [r5, #0]
 800b746:	b103      	cbz	r3, 800b74a <_write_r+0x1e>
 800b748:	6023      	str	r3, [r4, #0]
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
 800b74c:	20000940 	.word	0x20000940

0800b750 <__errno>:
 800b750:	4b01      	ldr	r3, [pc, #4]	; (800b758 <__errno+0x8>)
 800b752:	6818      	ldr	r0, [r3, #0]
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	20000074 	.word	0x20000074

0800b75c <__libc_init_array>:
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	4d0d      	ldr	r5, [pc, #52]	; (800b794 <__libc_init_array+0x38>)
 800b760:	4c0d      	ldr	r4, [pc, #52]	; (800b798 <__libc_init_array+0x3c>)
 800b762:	1b64      	subs	r4, r4, r5
 800b764:	10a4      	asrs	r4, r4, #2
 800b766:	2600      	movs	r6, #0
 800b768:	42a6      	cmp	r6, r4
 800b76a:	d109      	bne.n	800b780 <__libc_init_array+0x24>
 800b76c:	4d0b      	ldr	r5, [pc, #44]	; (800b79c <__libc_init_array+0x40>)
 800b76e:	4c0c      	ldr	r4, [pc, #48]	; (800b7a0 <__libc_init_array+0x44>)
 800b770:	f001 ff86 	bl	800d680 <_init>
 800b774:	1b64      	subs	r4, r4, r5
 800b776:	10a4      	asrs	r4, r4, #2
 800b778:	2600      	movs	r6, #0
 800b77a:	42a6      	cmp	r6, r4
 800b77c:	d105      	bne.n	800b78a <__libc_init_array+0x2e>
 800b77e:	bd70      	pop	{r4, r5, r6, pc}
 800b780:	f855 3b04 	ldr.w	r3, [r5], #4
 800b784:	4798      	blx	r3
 800b786:	3601      	adds	r6, #1
 800b788:	e7ee      	b.n	800b768 <__libc_init_array+0xc>
 800b78a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b78e:	4798      	blx	r3
 800b790:	3601      	adds	r6, #1
 800b792:	e7f2      	b.n	800b77a <__libc_init_array+0x1e>
 800b794:	0800e55c 	.word	0x0800e55c
 800b798:	0800e55c 	.word	0x0800e55c
 800b79c:	0800e55c 	.word	0x0800e55c
 800b7a0:	0800e560 	.word	0x0800e560

0800b7a4 <__retarget_lock_init_recursive>:
 800b7a4:	4770      	bx	lr

0800b7a6 <__retarget_lock_acquire_recursive>:
 800b7a6:	4770      	bx	lr

0800b7a8 <__retarget_lock_release_recursive>:
 800b7a8:	4770      	bx	lr

0800b7aa <memcpy>:
 800b7aa:	440a      	add	r2, r1
 800b7ac:	4291      	cmp	r1, r2
 800b7ae:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7b2:	d100      	bne.n	800b7b6 <memcpy+0xc>
 800b7b4:	4770      	bx	lr
 800b7b6:	b510      	push	{r4, lr}
 800b7b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7c0:	4291      	cmp	r1, r2
 800b7c2:	d1f9      	bne.n	800b7b8 <memcpy+0xe>
 800b7c4:	bd10      	pop	{r4, pc}

0800b7c6 <quorem>:
 800b7c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ca:	6903      	ldr	r3, [r0, #16]
 800b7cc:	690c      	ldr	r4, [r1, #16]
 800b7ce:	42a3      	cmp	r3, r4
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	db7e      	blt.n	800b8d2 <quorem+0x10c>
 800b7d4:	3c01      	subs	r4, #1
 800b7d6:	f101 0814 	add.w	r8, r1, #20
 800b7da:	f100 0514 	add.w	r5, r0, #20
 800b7de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b7e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b7f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b7f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b7fc:	d331      	bcc.n	800b862 <quorem+0x9c>
 800b7fe:	f04f 0e00 	mov.w	lr, #0
 800b802:	4640      	mov	r0, r8
 800b804:	46ac      	mov	ip, r5
 800b806:	46f2      	mov	sl, lr
 800b808:	f850 2b04 	ldr.w	r2, [r0], #4
 800b80c:	b293      	uxth	r3, r2
 800b80e:	fb06 e303 	mla	r3, r6, r3, lr
 800b812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b816:	0c1a      	lsrs	r2, r3, #16
 800b818:	b29b      	uxth	r3, r3
 800b81a:	ebaa 0303 	sub.w	r3, sl, r3
 800b81e:	f8dc a000 	ldr.w	sl, [ip]
 800b822:	fa13 f38a 	uxtah	r3, r3, sl
 800b826:	fb06 220e 	mla	r2, r6, lr, r2
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	9b00      	ldr	r3, [sp, #0]
 800b82e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b832:	b292      	uxth	r2, r2
 800b834:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b838:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b83c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b840:	4581      	cmp	r9, r0
 800b842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b846:	f84c 3b04 	str.w	r3, [ip], #4
 800b84a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b84e:	d2db      	bcs.n	800b808 <quorem+0x42>
 800b850:	f855 300b 	ldr.w	r3, [r5, fp]
 800b854:	b92b      	cbnz	r3, 800b862 <quorem+0x9c>
 800b856:	9b01      	ldr	r3, [sp, #4]
 800b858:	3b04      	subs	r3, #4
 800b85a:	429d      	cmp	r5, r3
 800b85c:	461a      	mov	r2, r3
 800b85e:	d32c      	bcc.n	800b8ba <quorem+0xf4>
 800b860:	613c      	str	r4, [r7, #16]
 800b862:	4638      	mov	r0, r7
 800b864:	f001 f8f2 	bl	800ca4c <__mcmp>
 800b868:	2800      	cmp	r0, #0
 800b86a:	db22      	blt.n	800b8b2 <quorem+0xec>
 800b86c:	3601      	adds	r6, #1
 800b86e:	4629      	mov	r1, r5
 800b870:	2000      	movs	r0, #0
 800b872:	f858 2b04 	ldr.w	r2, [r8], #4
 800b876:	f8d1 c000 	ldr.w	ip, [r1]
 800b87a:	b293      	uxth	r3, r2
 800b87c:	1ac3      	subs	r3, r0, r3
 800b87e:	0c12      	lsrs	r2, r2, #16
 800b880:	fa13 f38c 	uxtah	r3, r3, ip
 800b884:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b888:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b892:	45c1      	cmp	r9, r8
 800b894:	f841 3b04 	str.w	r3, [r1], #4
 800b898:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b89c:	d2e9      	bcs.n	800b872 <quorem+0xac>
 800b89e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8a6:	b922      	cbnz	r2, 800b8b2 <quorem+0xec>
 800b8a8:	3b04      	subs	r3, #4
 800b8aa:	429d      	cmp	r5, r3
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	d30a      	bcc.n	800b8c6 <quorem+0x100>
 800b8b0:	613c      	str	r4, [r7, #16]
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	b003      	add	sp, #12
 800b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ba:	6812      	ldr	r2, [r2, #0]
 800b8bc:	3b04      	subs	r3, #4
 800b8be:	2a00      	cmp	r2, #0
 800b8c0:	d1ce      	bne.n	800b860 <quorem+0x9a>
 800b8c2:	3c01      	subs	r4, #1
 800b8c4:	e7c9      	b.n	800b85a <quorem+0x94>
 800b8c6:	6812      	ldr	r2, [r2, #0]
 800b8c8:	3b04      	subs	r3, #4
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	d1f0      	bne.n	800b8b0 <quorem+0xea>
 800b8ce:	3c01      	subs	r4, #1
 800b8d0:	e7eb      	b.n	800b8aa <quorem+0xe4>
 800b8d2:	2000      	movs	r0, #0
 800b8d4:	e7ee      	b.n	800b8b4 <quorem+0xee>
	...

0800b8d8 <_dtoa_r>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	ed2d 8b04 	vpush	{d8-d9}
 800b8e0:	69c5      	ldr	r5, [r0, #28]
 800b8e2:	b093      	sub	sp, #76	; 0x4c
 800b8e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b8e8:	ec57 6b10 	vmov	r6, r7, d0
 800b8ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b8f0:	9107      	str	r1, [sp, #28]
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	920a      	str	r2, [sp, #40]	; 0x28
 800b8f6:	930d      	str	r3, [sp, #52]	; 0x34
 800b8f8:	b975      	cbnz	r5, 800b918 <_dtoa_r+0x40>
 800b8fa:	2010      	movs	r0, #16
 800b8fc:	f7ff f826 	bl	800a94c <malloc>
 800b900:	4602      	mov	r2, r0
 800b902:	61e0      	str	r0, [r4, #28]
 800b904:	b920      	cbnz	r0, 800b910 <_dtoa_r+0x38>
 800b906:	4bae      	ldr	r3, [pc, #696]	; (800bbc0 <_dtoa_r+0x2e8>)
 800b908:	21ef      	movs	r1, #239	; 0xef
 800b90a:	48ae      	ldr	r0, [pc, #696]	; (800bbc4 <_dtoa_r+0x2ec>)
 800b90c:	f001 fbbe 	bl	800d08c <__assert_func>
 800b910:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b914:	6005      	str	r5, [r0, #0]
 800b916:	60c5      	str	r5, [r0, #12]
 800b918:	69e3      	ldr	r3, [r4, #28]
 800b91a:	6819      	ldr	r1, [r3, #0]
 800b91c:	b151      	cbz	r1, 800b934 <_dtoa_r+0x5c>
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	604a      	str	r2, [r1, #4]
 800b922:	2301      	movs	r3, #1
 800b924:	4093      	lsls	r3, r2
 800b926:	608b      	str	r3, [r1, #8]
 800b928:	4620      	mov	r0, r4
 800b92a:	f000 fe53 	bl	800c5d4 <_Bfree>
 800b92e:	69e3      	ldr	r3, [r4, #28]
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	1e3b      	subs	r3, r7, #0
 800b936:	bfbb      	ittet	lt
 800b938:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b93c:	9303      	strlt	r3, [sp, #12]
 800b93e:	2300      	movge	r3, #0
 800b940:	2201      	movlt	r2, #1
 800b942:	bfac      	ite	ge
 800b944:	f8c8 3000 	strge.w	r3, [r8]
 800b948:	f8c8 2000 	strlt.w	r2, [r8]
 800b94c:	4b9e      	ldr	r3, [pc, #632]	; (800bbc8 <_dtoa_r+0x2f0>)
 800b94e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b952:	ea33 0308 	bics.w	r3, r3, r8
 800b956:	d11b      	bne.n	800b990 <_dtoa_r+0xb8>
 800b958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b95a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b964:	4333      	orrs	r3, r6
 800b966:	f000 8593 	beq.w	800c490 <_dtoa_r+0xbb8>
 800b96a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b96c:	b963      	cbnz	r3, 800b988 <_dtoa_r+0xb0>
 800b96e:	4b97      	ldr	r3, [pc, #604]	; (800bbcc <_dtoa_r+0x2f4>)
 800b970:	e027      	b.n	800b9c2 <_dtoa_r+0xea>
 800b972:	4b97      	ldr	r3, [pc, #604]	; (800bbd0 <_dtoa_r+0x2f8>)
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	3308      	adds	r3, #8
 800b978:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b97a:	6013      	str	r3, [r2, #0]
 800b97c:	9800      	ldr	r0, [sp, #0]
 800b97e:	b013      	add	sp, #76	; 0x4c
 800b980:	ecbd 8b04 	vpop	{d8-d9}
 800b984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b988:	4b90      	ldr	r3, [pc, #576]	; (800bbcc <_dtoa_r+0x2f4>)
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	3303      	adds	r3, #3
 800b98e:	e7f3      	b.n	800b978 <_dtoa_r+0xa0>
 800b990:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b994:	2200      	movs	r2, #0
 800b996:	ec51 0b17 	vmov	r0, r1, d7
 800b99a:	eeb0 8a47 	vmov.f32	s16, s14
 800b99e:	eef0 8a67 	vmov.f32	s17, s15
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	f7f5 f898 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9a8:	4681      	mov	r9, r0
 800b9aa:	b160      	cbz	r0, 800b9c6 <_dtoa_r+0xee>
 800b9ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	6013      	str	r3, [r2, #0]
 800b9b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 8568 	beq.w	800c48a <_dtoa_r+0xbb2>
 800b9ba:	4b86      	ldr	r3, [pc, #536]	; (800bbd4 <_dtoa_r+0x2fc>)
 800b9bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	e7da      	b.n	800b97c <_dtoa_r+0xa4>
 800b9c6:	aa10      	add	r2, sp, #64	; 0x40
 800b9c8:	a911      	add	r1, sp, #68	; 0x44
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	eeb0 0a48 	vmov.f32	s0, s16
 800b9d0:	eef0 0a68 	vmov.f32	s1, s17
 800b9d4:	f001 f8e0 	bl	800cb98 <__d2b>
 800b9d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b9dc:	4682      	mov	sl, r0
 800b9de:	2d00      	cmp	r5, #0
 800b9e0:	d07f      	beq.n	800bae2 <_dtoa_r+0x20a>
 800b9e2:	ee18 3a90 	vmov	r3, s17
 800b9e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9ea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b9ee:	ec51 0b18 	vmov	r0, r1, d8
 800b9f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b9f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b9fa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b9fe:	4619      	mov	r1, r3
 800ba00:	2200      	movs	r2, #0
 800ba02:	4b75      	ldr	r3, [pc, #468]	; (800bbd8 <_dtoa_r+0x300>)
 800ba04:	f7f4 fc48 	bl	8000298 <__aeabi_dsub>
 800ba08:	a367      	add	r3, pc, #412	; (adr r3, 800bba8 <_dtoa_r+0x2d0>)
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	f7f4 fdfb 	bl	8000608 <__aeabi_dmul>
 800ba12:	a367      	add	r3, pc, #412	; (adr r3, 800bbb0 <_dtoa_r+0x2d8>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f7f4 fc40 	bl	800029c <__adddf3>
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	4628      	mov	r0, r5
 800ba20:	460f      	mov	r7, r1
 800ba22:	f7f4 fd87 	bl	8000534 <__aeabi_i2d>
 800ba26:	a364      	add	r3, pc, #400	; (adr r3, 800bbb8 <_dtoa_r+0x2e0>)
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	f7f4 fdec 	bl	8000608 <__aeabi_dmul>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4630      	mov	r0, r6
 800ba36:	4639      	mov	r1, r7
 800ba38:	f7f4 fc30 	bl	800029c <__adddf3>
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	460f      	mov	r7, r1
 800ba40:	f7f5 f892 	bl	8000b68 <__aeabi_d2iz>
 800ba44:	2200      	movs	r2, #0
 800ba46:	4683      	mov	fp, r0
 800ba48:	2300      	movs	r3, #0
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	f7f5 f84d 	bl	8000aec <__aeabi_dcmplt>
 800ba52:	b148      	cbz	r0, 800ba68 <_dtoa_r+0x190>
 800ba54:	4658      	mov	r0, fp
 800ba56:	f7f4 fd6d 	bl	8000534 <__aeabi_i2d>
 800ba5a:	4632      	mov	r2, r6
 800ba5c:	463b      	mov	r3, r7
 800ba5e:	f7f5 f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba62:	b908      	cbnz	r0, 800ba68 <_dtoa_r+0x190>
 800ba64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba68:	f1bb 0f16 	cmp.w	fp, #22
 800ba6c:	d857      	bhi.n	800bb1e <_dtoa_r+0x246>
 800ba6e:	4b5b      	ldr	r3, [pc, #364]	; (800bbdc <_dtoa_r+0x304>)
 800ba70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	ec51 0b18 	vmov	r0, r1, d8
 800ba7c:	f7f5 f836 	bl	8000aec <__aeabi_dcmplt>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d04e      	beq.n	800bb22 <_dtoa_r+0x24a>
 800ba84:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ba88:	2300      	movs	r3, #0
 800ba8a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba8e:	1b5b      	subs	r3, r3, r5
 800ba90:	1e5a      	subs	r2, r3, #1
 800ba92:	bf45      	ittet	mi
 800ba94:	f1c3 0301 	rsbmi	r3, r3, #1
 800ba98:	9305      	strmi	r3, [sp, #20]
 800ba9a:	2300      	movpl	r3, #0
 800ba9c:	2300      	movmi	r3, #0
 800ba9e:	9206      	str	r2, [sp, #24]
 800baa0:	bf54      	ite	pl
 800baa2:	9305      	strpl	r3, [sp, #20]
 800baa4:	9306      	strmi	r3, [sp, #24]
 800baa6:	f1bb 0f00 	cmp.w	fp, #0
 800baaa:	db3c      	blt.n	800bb26 <_dtoa_r+0x24e>
 800baac:	9b06      	ldr	r3, [sp, #24]
 800baae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bab2:	445b      	add	r3, fp
 800bab4:	9306      	str	r3, [sp, #24]
 800bab6:	2300      	movs	r3, #0
 800bab8:	9308      	str	r3, [sp, #32]
 800baba:	9b07      	ldr	r3, [sp, #28]
 800babc:	2b09      	cmp	r3, #9
 800babe:	d868      	bhi.n	800bb92 <_dtoa_r+0x2ba>
 800bac0:	2b05      	cmp	r3, #5
 800bac2:	bfc4      	itt	gt
 800bac4:	3b04      	subgt	r3, #4
 800bac6:	9307      	strgt	r3, [sp, #28]
 800bac8:	9b07      	ldr	r3, [sp, #28]
 800baca:	f1a3 0302 	sub.w	r3, r3, #2
 800bace:	bfcc      	ite	gt
 800bad0:	2500      	movgt	r5, #0
 800bad2:	2501      	movle	r5, #1
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	f200 8085 	bhi.w	800bbe4 <_dtoa_r+0x30c>
 800bada:	e8df f003 	tbb	[pc, r3]
 800bade:	3b2e      	.short	0x3b2e
 800bae0:	5839      	.short	0x5839
 800bae2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bae6:	441d      	add	r5, r3
 800bae8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800baec:	2b20      	cmp	r3, #32
 800baee:	bfc1      	itttt	gt
 800baf0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800baf4:	fa08 f803 	lslgt.w	r8, r8, r3
 800baf8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bafc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bb00:	bfd6      	itet	le
 800bb02:	f1c3 0320 	rsble	r3, r3, #32
 800bb06:	ea48 0003 	orrgt.w	r0, r8, r3
 800bb0a:	fa06 f003 	lslle.w	r0, r6, r3
 800bb0e:	f7f4 fd01 	bl	8000514 <__aeabi_ui2d>
 800bb12:	2201      	movs	r2, #1
 800bb14:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bb18:	3d01      	subs	r5, #1
 800bb1a:	920e      	str	r2, [sp, #56]	; 0x38
 800bb1c:	e76f      	b.n	800b9fe <_dtoa_r+0x126>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e7b3      	b.n	800ba8a <_dtoa_r+0x1b2>
 800bb22:	900c      	str	r0, [sp, #48]	; 0x30
 800bb24:	e7b2      	b.n	800ba8c <_dtoa_r+0x1b4>
 800bb26:	9b05      	ldr	r3, [sp, #20]
 800bb28:	eba3 030b 	sub.w	r3, r3, fp
 800bb2c:	9305      	str	r3, [sp, #20]
 800bb2e:	f1cb 0300 	rsb	r3, fp, #0
 800bb32:	9308      	str	r3, [sp, #32]
 800bb34:	2300      	movs	r3, #0
 800bb36:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb38:	e7bf      	b.n	800baba <_dtoa_r+0x1e2>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	dc52      	bgt.n	800bbea <_dtoa_r+0x312>
 800bb44:	2301      	movs	r3, #1
 800bb46:	9301      	str	r3, [sp, #4]
 800bb48:	9304      	str	r3, [sp, #16]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	920a      	str	r2, [sp, #40]	; 0x28
 800bb4e:	e00b      	b.n	800bb68 <_dtoa_r+0x290>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e7f3      	b.n	800bb3c <_dtoa_r+0x264>
 800bb54:	2300      	movs	r3, #0
 800bb56:	9309      	str	r3, [sp, #36]	; 0x24
 800bb58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb5a:	445b      	add	r3, fp
 800bb5c:	9301      	str	r3, [sp, #4]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	bfb8      	it	lt
 800bb66:	2301      	movlt	r3, #1
 800bb68:	69e0      	ldr	r0, [r4, #28]
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	2204      	movs	r2, #4
 800bb6e:	f102 0614 	add.w	r6, r2, #20
 800bb72:	429e      	cmp	r6, r3
 800bb74:	d93d      	bls.n	800bbf2 <_dtoa_r+0x31a>
 800bb76:	6041      	str	r1, [r0, #4]
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 fceb 	bl	800c554 <_Balloc>
 800bb7e:	9000      	str	r0, [sp, #0]
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d139      	bne.n	800bbf8 <_dtoa_r+0x320>
 800bb84:	4b16      	ldr	r3, [pc, #88]	; (800bbe0 <_dtoa_r+0x308>)
 800bb86:	4602      	mov	r2, r0
 800bb88:	f240 11af 	movw	r1, #431	; 0x1af
 800bb8c:	e6bd      	b.n	800b90a <_dtoa_r+0x32>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e7e1      	b.n	800bb56 <_dtoa_r+0x27e>
 800bb92:	2501      	movs	r5, #1
 800bb94:	2300      	movs	r3, #0
 800bb96:	9307      	str	r3, [sp, #28]
 800bb98:	9509      	str	r5, [sp, #36]	; 0x24
 800bb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb9e:	9301      	str	r3, [sp, #4]
 800bba0:	9304      	str	r3, [sp, #16]
 800bba2:	2200      	movs	r2, #0
 800bba4:	2312      	movs	r3, #18
 800bba6:	e7d1      	b.n	800bb4c <_dtoa_r+0x274>
 800bba8:	636f4361 	.word	0x636f4361
 800bbac:	3fd287a7 	.word	0x3fd287a7
 800bbb0:	8b60c8b3 	.word	0x8b60c8b3
 800bbb4:	3fc68a28 	.word	0x3fc68a28
 800bbb8:	509f79fb 	.word	0x509f79fb
 800bbbc:	3fd34413 	.word	0x3fd34413
 800bbc0:	0800e22d 	.word	0x0800e22d
 800bbc4:	0800e244 	.word	0x0800e244
 800bbc8:	7ff00000 	.word	0x7ff00000
 800bbcc:	0800e229 	.word	0x0800e229
 800bbd0:	0800e220 	.word	0x0800e220
 800bbd4:	0800e1fd 	.word	0x0800e1fd
 800bbd8:	3ff80000 	.word	0x3ff80000
 800bbdc:	0800e330 	.word	0x0800e330
 800bbe0:	0800e29c 	.word	0x0800e29c
 800bbe4:	2301      	movs	r3, #1
 800bbe6:	9309      	str	r3, [sp, #36]	; 0x24
 800bbe8:	e7d7      	b.n	800bb9a <_dtoa_r+0x2c2>
 800bbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	9304      	str	r3, [sp, #16]
 800bbf0:	e7ba      	b.n	800bb68 <_dtoa_r+0x290>
 800bbf2:	3101      	adds	r1, #1
 800bbf4:	0052      	lsls	r2, r2, #1
 800bbf6:	e7ba      	b.n	800bb6e <_dtoa_r+0x296>
 800bbf8:	69e3      	ldr	r3, [r4, #28]
 800bbfa:	9a00      	ldr	r2, [sp, #0]
 800bbfc:	601a      	str	r2, [r3, #0]
 800bbfe:	9b04      	ldr	r3, [sp, #16]
 800bc00:	2b0e      	cmp	r3, #14
 800bc02:	f200 80a8 	bhi.w	800bd56 <_dtoa_r+0x47e>
 800bc06:	2d00      	cmp	r5, #0
 800bc08:	f000 80a5 	beq.w	800bd56 <_dtoa_r+0x47e>
 800bc0c:	f1bb 0f00 	cmp.w	fp, #0
 800bc10:	dd38      	ble.n	800bc84 <_dtoa_r+0x3ac>
 800bc12:	4bc0      	ldr	r3, [pc, #768]	; (800bf14 <_dtoa_r+0x63c>)
 800bc14:	f00b 020f 	and.w	r2, fp, #15
 800bc18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc1c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bc20:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bc24:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bc28:	d019      	beq.n	800bc5e <_dtoa_r+0x386>
 800bc2a:	4bbb      	ldr	r3, [pc, #748]	; (800bf18 <_dtoa_r+0x640>)
 800bc2c:	ec51 0b18 	vmov	r0, r1, d8
 800bc30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc34:	f7f4 fe12 	bl	800085c <__aeabi_ddiv>
 800bc38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc3c:	f008 080f 	and.w	r8, r8, #15
 800bc40:	2503      	movs	r5, #3
 800bc42:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bf18 <_dtoa_r+0x640>
 800bc46:	f1b8 0f00 	cmp.w	r8, #0
 800bc4a:	d10a      	bne.n	800bc62 <_dtoa_r+0x38a>
 800bc4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc50:	4632      	mov	r2, r6
 800bc52:	463b      	mov	r3, r7
 800bc54:	f7f4 fe02 	bl	800085c <__aeabi_ddiv>
 800bc58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc5c:	e02b      	b.n	800bcb6 <_dtoa_r+0x3de>
 800bc5e:	2502      	movs	r5, #2
 800bc60:	e7ef      	b.n	800bc42 <_dtoa_r+0x36a>
 800bc62:	f018 0f01 	tst.w	r8, #1
 800bc66:	d008      	beq.n	800bc7a <_dtoa_r+0x3a2>
 800bc68:	4630      	mov	r0, r6
 800bc6a:	4639      	mov	r1, r7
 800bc6c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bc70:	f7f4 fcca 	bl	8000608 <__aeabi_dmul>
 800bc74:	3501      	adds	r5, #1
 800bc76:	4606      	mov	r6, r0
 800bc78:	460f      	mov	r7, r1
 800bc7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bc7e:	f109 0908 	add.w	r9, r9, #8
 800bc82:	e7e0      	b.n	800bc46 <_dtoa_r+0x36e>
 800bc84:	f000 809f 	beq.w	800bdc6 <_dtoa_r+0x4ee>
 800bc88:	f1cb 0600 	rsb	r6, fp, #0
 800bc8c:	4ba1      	ldr	r3, [pc, #644]	; (800bf14 <_dtoa_r+0x63c>)
 800bc8e:	4fa2      	ldr	r7, [pc, #648]	; (800bf18 <_dtoa_r+0x640>)
 800bc90:	f006 020f 	and.w	r2, r6, #15
 800bc94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9c:	ec51 0b18 	vmov	r0, r1, d8
 800bca0:	f7f4 fcb2 	bl	8000608 <__aeabi_dmul>
 800bca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bca8:	1136      	asrs	r6, r6, #4
 800bcaa:	2300      	movs	r3, #0
 800bcac:	2502      	movs	r5, #2
 800bcae:	2e00      	cmp	r6, #0
 800bcb0:	d17e      	bne.n	800bdb0 <_dtoa_r+0x4d8>
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1d0      	bne.n	800bc58 <_dtoa_r+0x380>
 800bcb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcb8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f000 8084 	beq.w	800bdca <_dtoa_r+0x4f2>
 800bcc2:	4b96      	ldr	r3, [pc, #600]	; (800bf1c <_dtoa_r+0x644>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	4640      	mov	r0, r8
 800bcc8:	4649      	mov	r1, r9
 800bcca:	f7f4 ff0f 	bl	8000aec <__aeabi_dcmplt>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d07b      	beq.n	800bdca <_dtoa_r+0x4f2>
 800bcd2:	9b04      	ldr	r3, [sp, #16]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d078      	beq.n	800bdca <_dtoa_r+0x4f2>
 800bcd8:	9b01      	ldr	r3, [sp, #4]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	dd39      	ble.n	800bd52 <_dtoa_r+0x47a>
 800bcde:	4b90      	ldr	r3, [pc, #576]	; (800bf20 <_dtoa_r+0x648>)
 800bce0:	2200      	movs	r2, #0
 800bce2:	4640      	mov	r0, r8
 800bce4:	4649      	mov	r1, r9
 800bce6:	f7f4 fc8f 	bl	8000608 <__aeabi_dmul>
 800bcea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcee:	9e01      	ldr	r6, [sp, #4]
 800bcf0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bcf4:	3501      	adds	r5, #1
 800bcf6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f7f4 fc1a 	bl	8000534 <__aeabi_i2d>
 800bd00:	4642      	mov	r2, r8
 800bd02:	464b      	mov	r3, r9
 800bd04:	f7f4 fc80 	bl	8000608 <__aeabi_dmul>
 800bd08:	4b86      	ldr	r3, [pc, #536]	; (800bf24 <_dtoa_r+0x64c>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f7f4 fac6 	bl	800029c <__adddf3>
 800bd10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bd14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd18:	9303      	str	r3, [sp, #12]
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	d158      	bne.n	800bdd0 <_dtoa_r+0x4f8>
 800bd1e:	4b82      	ldr	r3, [pc, #520]	; (800bf28 <_dtoa_r+0x650>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	4640      	mov	r0, r8
 800bd24:	4649      	mov	r1, r9
 800bd26:	f7f4 fab7 	bl	8000298 <__aeabi_dsub>
 800bd2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd2e:	4680      	mov	r8, r0
 800bd30:	4689      	mov	r9, r1
 800bd32:	f7f4 fef9 	bl	8000b28 <__aeabi_dcmpgt>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f040 8296 	bne.w	800c268 <_dtoa_r+0x990>
 800bd3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bd40:	4640      	mov	r0, r8
 800bd42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd46:	4649      	mov	r1, r9
 800bd48:	f7f4 fed0 	bl	8000aec <__aeabi_dcmplt>
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f040 8289 	bne.w	800c264 <_dtoa_r+0x98c>
 800bd52:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bd56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f2c0 814e 	blt.w	800bffa <_dtoa_r+0x722>
 800bd5e:	f1bb 0f0e 	cmp.w	fp, #14
 800bd62:	f300 814a 	bgt.w	800bffa <_dtoa_r+0x722>
 800bd66:	4b6b      	ldr	r3, [pc, #428]	; (800bf14 <_dtoa_r+0x63c>)
 800bd68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bd6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f280 80dc 	bge.w	800bf30 <_dtoa_r+0x658>
 800bd78:	9b04      	ldr	r3, [sp, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f300 80d8 	bgt.w	800bf30 <_dtoa_r+0x658>
 800bd80:	f040 826f 	bne.w	800c262 <_dtoa_r+0x98a>
 800bd84:	4b68      	ldr	r3, [pc, #416]	; (800bf28 <_dtoa_r+0x650>)
 800bd86:	2200      	movs	r2, #0
 800bd88:	4640      	mov	r0, r8
 800bd8a:	4649      	mov	r1, r9
 800bd8c:	f7f4 fc3c 	bl	8000608 <__aeabi_dmul>
 800bd90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd94:	f7f4 febe 	bl	8000b14 <__aeabi_dcmpge>
 800bd98:	9e04      	ldr	r6, [sp, #16]
 800bd9a:	4637      	mov	r7, r6
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f040 8245 	bne.w	800c22c <_dtoa_r+0x954>
 800bda2:	9d00      	ldr	r5, [sp, #0]
 800bda4:	2331      	movs	r3, #49	; 0x31
 800bda6:	f805 3b01 	strb.w	r3, [r5], #1
 800bdaa:	f10b 0b01 	add.w	fp, fp, #1
 800bdae:	e241      	b.n	800c234 <_dtoa_r+0x95c>
 800bdb0:	07f2      	lsls	r2, r6, #31
 800bdb2:	d505      	bpl.n	800bdc0 <_dtoa_r+0x4e8>
 800bdb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdb8:	f7f4 fc26 	bl	8000608 <__aeabi_dmul>
 800bdbc:	3501      	adds	r5, #1
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	1076      	asrs	r6, r6, #1
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	e773      	b.n	800bcae <_dtoa_r+0x3d6>
 800bdc6:	2502      	movs	r5, #2
 800bdc8:	e775      	b.n	800bcb6 <_dtoa_r+0x3de>
 800bdca:	9e04      	ldr	r6, [sp, #16]
 800bdcc:	465f      	mov	r7, fp
 800bdce:	e792      	b.n	800bcf6 <_dtoa_r+0x41e>
 800bdd0:	9900      	ldr	r1, [sp, #0]
 800bdd2:	4b50      	ldr	r3, [pc, #320]	; (800bf14 <_dtoa_r+0x63c>)
 800bdd4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bdd8:	4431      	add	r1, r6
 800bdda:	9102      	str	r1, [sp, #8]
 800bddc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdde:	eeb0 9a47 	vmov.f32	s18, s14
 800bde2:	eef0 9a67 	vmov.f32	s19, s15
 800bde6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bdea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bdee:	2900      	cmp	r1, #0
 800bdf0:	d044      	beq.n	800be7c <_dtoa_r+0x5a4>
 800bdf2:	494e      	ldr	r1, [pc, #312]	; (800bf2c <_dtoa_r+0x654>)
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	f7f4 fd31 	bl	800085c <__aeabi_ddiv>
 800bdfa:	ec53 2b19 	vmov	r2, r3, d9
 800bdfe:	f7f4 fa4b 	bl	8000298 <__aeabi_dsub>
 800be02:	9d00      	ldr	r5, [sp, #0]
 800be04:	ec41 0b19 	vmov	d9, r0, r1
 800be08:	4649      	mov	r1, r9
 800be0a:	4640      	mov	r0, r8
 800be0c:	f7f4 feac 	bl	8000b68 <__aeabi_d2iz>
 800be10:	4606      	mov	r6, r0
 800be12:	f7f4 fb8f 	bl	8000534 <__aeabi_i2d>
 800be16:	4602      	mov	r2, r0
 800be18:	460b      	mov	r3, r1
 800be1a:	4640      	mov	r0, r8
 800be1c:	4649      	mov	r1, r9
 800be1e:	f7f4 fa3b 	bl	8000298 <__aeabi_dsub>
 800be22:	3630      	adds	r6, #48	; 0x30
 800be24:	f805 6b01 	strb.w	r6, [r5], #1
 800be28:	ec53 2b19 	vmov	r2, r3, d9
 800be2c:	4680      	mov	r8, r0
 800be2e:	4689      	mov	r9, r1
 800be30:	f7f4 fe5c 	bl	8000aec <__aeabi_dcmplt>
 800be34:	2800      	cmp	r0, #0
 800be36:	d164      	bne.n	800bf02 <_dtoa_r+0x62a>
 800be38:	4642      	mov	r2, r8
 800be3a:	464b      	mov	r3, r9
 800be3c:	4937      	ldr	r1, [pc, #220]	; (800bf1c <_dtoa_r+0x644>)
 800be3e:	2000      	movs	r0, #0
 800be40:	f7f4 fa2a 	bl	8000298 <__aeabi_dsub>
 800be44:	ec53 2b19 	vmov	r2, r3, d9
 800be48:	f7f4 fe50 	bl	8000aec <__aeabi_dcmplt>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	f040 80b6 	bne.w	800bfbe <_dtoa_r+0x6e6>
 800be52:	9b02      	ldr	r3, [sp, #8]
 800be54:	429d      	cmp	r5, r3
 800be56:	f43f af7c 	beq.w	800bd52 <_dtoa_r+0x47a>
 800be5a:	4b31      	ldr	r3, [pc, #196]	; (800bf20 <_dtoa_r+0x648>)
 800be5c:	ec51 0b19 	vmov	r0, r1, d9
 800be60:	2200      	movs	r2, #0
 800be62:	f7f4 fbd1 	bl	8000608 <__aeabi_dmul>
 800be66:	4b2e      	ldr	r3, [pc, #184]	; (800bf20 <_dtoa_r+0x648>)
 800be68:	ec41 0b19 	vmov	d9, r0, r1
 800be6c:	2200      	movs	r2, #0
 800be6e:	4640      	mov	r0, r8
 800be70:	4649      	mov	r1, r9
 800be72:	f7f4 fbc9 	bl	8000608 <__aeabi_dmul>
 800be76:	4680      	mov	r8, r0
 800be78:	4689      	mov	r9, r1
 800be7a:	e7c5      	b.n	800be08 <_dtoa_r+0x530>
 800be7c:	ec51 0b17 	vmov	r0, r1, d7
 800be80:	f7f4 fbc2 	bl	8000608 <__aeabi_dmul>
 800be84:	9b02      	ldr	r3, [sp, #8]
 800be86:	9d00      	ldr	r5, [sp, #0]
 800be88:	930f      	str	r3, [sp, #60]	; 0x3c
 800be8a:	ec41 0b19 	vmov	d9, r0, r1
 800be8e:	4649      	mov	r1, r9
 800be90:	4640      	mov	r0, r8
 800be92:	f7f4 fe69 	bl	8000b68 <__aeabi_d2iz>
 800be96:	4606      	mov	r6, r0
 800be98:	f7f4 fb4c 	bl	8000534 <__aeabi_i2d>
 800be9c:	3630      	adds	r6, #48	; 0x30
 800be9e:	4602      	mov	r2, r0
 800bea0:	460b      	mov	r3, r1
 800bea2:	4640      	mov	r0, r8
 800bea4:	4649      	mov	r1, r9
 800bea6:	f7f4 f9f7 	bl	8000298 <__aeabi_dsub>
 800beaa:	f805 6b01 	strb.w	r6, [r5], #1
 800beae:	9b02      	ldr	r3, [sp, #8]
 800beb0:	429d      	cmp	r5, r3
 800beb2:	4680      	mov	r8, r0
 800beb4:	4689      	mov	r9, r1
 800beb6:	f04f 0200 	mov.w	r2, #0
 800beba:	d124      	bne.n	800bf06 <_dtoa_r+0x62e>
 800bebc:	4b1b      	ldr	r3, [pc, #108]	; (800bf2c <_dtoa_r+0x654>)
 800bebe:	ec51 0b19 	vmov	r0, r1, d9
 800bec2:	f7f4 f9eb 	bl	800029c <__adddf3>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4640      	mov	r0, r8
 800becc:	4649      	mov	r1, r9
 800bece:	f7f4 fe2b 	bl	8000b28 <__aeabi_dcmpgt>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d173      	bne.n	800bfbe <_dtoa_r+0x6e6>
 800bed6:	ec53 2b19 	vmov	r2, r3, d9
 800beda:	4914      	ldr	r1, [pc, #80]	; (800bf2c <_dtoa_r+0x654>)
 800bedc:	2000      	movs	r0, #0
 800bede:	f7f4 f9db 	bl	8000298 <__aeabi_dsub>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	4640      	mov	r0, r8
 800bee8:	4649      	mov	r1, r9
 800beea:	f7f4 fdff 	bl	8000aec <__aeabi_dcmplt>
 800beee:	2800      	cmp	r0, #0
 800bef0:	f43f af2f 	beq.w	800bd52 <_dtoa_r+0x47a>
 800bef4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bef6:	1e6b      	subs	r3, r5, #1
 800bef8:	930f      	str	r3, [sp, #60]	; 0x3c
 800befa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800befe:	2b30      	cmp	r3, #48	; 0x30
 800bf00:	d0f8      	beq.n	800bef4 <_dtoa_r+0x61c>
 800bf02:	46bb      	mov	fp, r7
 800bf04:	e04a      	b.n	800bf9c <_dtoa_r+0x6c4>
 800bf06:	4b06      	ldr	r3, [pc, #24]	; (800bf20 <_dtoa_r+0x648>)
 800bf08:	f7f4 fb7e 	bl	8000608 <__aeabi_dmul>
 800bf0c:	4680      	mov	r8, r0
 800bf0e:	4689      	mov	r9, r1
 800bf10:	e7bd      	b.n	800be8e <_dtoa_r+0x5b6>
 800bf12:	bf00      	nop
 800bf14:	0800e330 	.word	0x0800e330
 800bf18:	0800e308 	.word	0x0800e308
 800bf1c:	3ff00000 	.word	0x3ff00000
 800bf20:	40240000 	.word	0x40240000
 800bf24:	401c0000 	.word	0x401c0000
 800bf28:	40140000 	.word	0x40140000
 800bf2c:	3fe00000 	.word	0x3fe00000
 800bf30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bf34:	9d00      	ldr	r5, [sp, #0]
 800bf36:	4642      	mov	r2, r8
 800bf38:	464b      	mov	r3, r9
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	f7f4 fc8d 	bl	800085c <__aeabi_ddiv>
 800bf42:	f7f4 fe11 	bl	8000b68 <__aeabi_d2iz>
 800bf46:	9001      	str	r0, [sp, #4]
 800bf48:	f7f4 faf4 	bl	8000534 <__aeabi_i2d>
 800bf4c:	4642      	mov	r2, r8
 800bf4e:	464b      	mov	r3, r9
 800bf50:	f7f4 fb5a 	bl	8000608 <__aeabi_dmul>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4630      	mov	r0, r6
 800bf5a:	4639      	mov	r1, r7
 800bf5c:	f7f4 f99c 	bl	8000298 <__aeabi_dsub>
 800bf60:	9e01      	ldr	r6, [sp, #4]
 800bf62:	9f04      	ldr	r7, [sp, #16]
 800bf64:	3630      	adds	r6, #48	; 0x30
 800bf66:	f805 6b01 	strb.w	r6, [r5], #1
 800bf6a:	9e00      	ldr	r6, [sp, #0]
 800bf6c:	1bae      	subs	r6, r5, r6
 800bf6e:	42b7      	cmp	r7, r6
 800bf70:	4602      	mov	r2, r0
 800bf72:	460b      	mov	r3, r1
 800bf74:	d134      	bne.n	800bfe0 <_dtoa_r+0x708>
 800bf76:	f7f4 f991 	bl	800029c <__adddf3>
 800bf7a:	4642      	mov	r2, r8
 800bf7c:	464b      	mov	r3, r9
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460f      	mov	r7, r1
 800bf82:	f7f4 fdd1 	bl	8000b28 <__aeabi_dcmpgt>
 800bf86:	b9c8      	cbnz	r0, 800bfbc <_dtoa_r+0x6e4>
 800bf88:	4642      	mov	r2, r8
 800bf8a:	464b      	mov	r3, r9
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf94:	b110      	cbz	r0, 800bf9c <_dtoa_r+0x6c4>
 800bf96:	9b01      	ldr	r3, [sp, #4]
 800bf98:	07db      	lsls	r3, r3, #31
 800bf9a:	d40f      	bmi.n	800bfbc <_dtoa_r+0x6e4>
 800bf9c:	4651      	mov	r1, sl
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f000 fb18 	bl	800c5d4 <_Bfree>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfa8:	702b      	strb	r3, [r5, #0]
 800bfaa:	f10b 0301 	add.w	r3, fp, #1
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	f43f ace2 	beq.w	800b97c <_dtoa_r+0xa4>
 800bfb8:	601d      	str	r5, [r3, #0]
 800bfba:	e4df      	b.n	800b97c <_dtoa_r+0xa4>
 800bfbc:	465f      	mov	r7, fp
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	461d      	mov	r5, r3
 800bfc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfc6:	2a39      	cmp	r2, #57	; 0x39
 800bfc8:	d106      	bne.n	800bfd8 <_dtoa_r+0x700>
 800bfca:	9a00      	ldr	r2, [sp, #0]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d1f7      	bne.n	800bfc0 <_dtoa_r+0x6e8>
 800bfd0:	9900      	ldr	r1, [sp, #0]
 800bfd2:	2230      	movs	r2, #48	; 0x30
 800bfd4:	3701      	adds	r7, #1
 800bfd6:	700a      	strb	r2, [r1, #0]
 800bfd8:	781a      	ldrb	r2, [r3, #0]
 800bfda:	3201      	adds	r2, #1
 800bfdc:	701a      	strb	r2, [r3, #0]
 800bfde:	e790      	b.n	800bf02 <_dtoa_r+0x62a>
 800bfe0:	4ba3      	ldr	r3, [pc, #652]	; (800c270 <_dtoa_r+0x998>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f7f4 fb10 	bl	8000608 <__aeabi_dmul>
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2300      	movs	r3, #0
 800bfec:	4606      	mov	r6, r0
 800bfee:	460f      	mov	r7, r1
 800bff0:	f7f4 fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d09e      	beq.n	800bf36 <_dtoa_r+0x65e>
 800bff8:	e7d0      	b.n	800bf9c <_dtoa_r+0x6c4>
 800bffa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bffc:	2a00      	cmp	r2, #0
 800bffe:	f000 80ca 	beq.w	800c196 <_dtoa_r+0x8be>
 800c002:	9a07      	ldr	r2, [sp, #28]
 800c004:	2a01      	cmp	r2, #1
 800c006:	f300 80ad 	bgt.w	800c164 <_dtoa_r+0x88c>
 800c00a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c00c:	2a00      	cmp	r2, #0
 800c00e:	f000 80a5 	beq.w	800c15c <_dtoa_r+0x884>
 800c012:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c016:	9e08      	ldr	r6, [sp, #32]
 800c018:	9d05      	ldr	r5, [sp, #20]
 800c01a:	9a05      	ldr	r2, [sp, #20]
 800c01c:	441a      	add	r2, r3
 800c01e:	9205      	str	r2, [sp, #20]
 800c020:	9a06      	ldr	r2, [sp, #24]
 800c022:	2101      	movs	r1, #1
 800c024:	441a      	add	r2, r3
 800c026:	4620      	mov	r0, r4
 800c028:	9206      	str	r2, [sp, #24]
 800c02a:	f000 fb89 	bl	800c740 <__i2b>
 800c02e:	4607      	mov	r7, r0
 800c030:	b165      	cbz	r5, 800c04c <_dtoa_r+0x774>
 800c032:	9b06      	ldr	r3, [sp, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	dd09      	ble.n	800c04c <_dtoa_r+0x774>
 800c038:	42ab      	cmp	r3, r5
 800c03a:	9a05      	ldr	r2, [sp, #20]
 800c03c:	bfa8      	it	ge
 800c03e:	462b      	movge	r3, r5
 800c040:	1ad2      	subs	r2, r2, r3
 800c042:	9205      	str	r2, [sp, #20]
 800c044:	9a06      	ldr	r2, [sp, #24]
 800c046:	1aed      	subs	r5, r5, r3
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	9306      	str	r3, [sp, #24]
 800c04c:	9b08      	ldr	r3, [sp, #32]
 800c04e:	b1f3      	cbz	r3, 800c08e <_dtoa_r+0x7b6>
 800c050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c052:	2b00      	cmp	r3, #0
 800c054:	f000 80a3 	beq.w	800c19e <_dtoa_r+0x8c6>
 800c058:	2e00      	cmp	r6, #0
 800c05a:	dd10      	ble.n	800c07e <_dtoa_r+0x7a6>
 800c05c:	4639      	mov	r1, r7
 800c05e:	4632      	mov	r2, r6
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fc2d 	bl	800c8c0 <__pow5mult>
 800c066:	4652      	mov	r2, sl
 800c068:	4601      	mov	r1, r0
 800c06a:	4607      	mov	r7, r0
 800c06c:	4620      	mov	r0, r4
 800c06e:	f000 fb7d 	bl	800c76c <__multiply>
 800c072:	4651      	mov	r1, sl
 800c074:	4680      	mov	r8, r0
 800c076:	4620      	mov	r0, r4
 800c078:	f000 faac 	bl	800c5d4 <_Bfree>
 800c07c:	46c2      	mov	sl, r8
 800c07e:	9b08      	ldr	r3, [sp, #32]
 800c080:	1b9a      	subs	r2, r3, r6
 800c082:	d004      	beq.n	800c08e <_dtoa_r+0x7b6>
 800c084:	4651      	mov	r1, sl
 800c086:	4620      	mov	r0, r4
 800c088:	f000 fc1a 	bl	800c8c0 <__pow5mult>
 800c08c:	4682      	mov	sl, r0
 800c08e:	2101      	movs	r1, #1
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fb55 	bl	800c740 <__i2b>
 800c096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c098:	2b00      	cmp	r3, #0
 800c09a:	4606      	mov	r6, r0
 800c09c:	f340 8081 	ble.w	800c1a2 <_dtoa_r+0x8ca>
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	4601      	mov	r1, r0
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f000 fc0b 	bl	800c8c0 <__pow5mult>
 800c0aa:	9b07      	ldr	r3, [sp, #28]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	dd7a      	ble.n	800c1a8 <_dtoa_r+0x8d0>
 800c0b2:	f04f 0800 	mov.w	r8, #0
 800c0b6:	6933      	ldr	r3, [r6, #16]
 800c0b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0bc:	6918      	ldr	r0, [r3, #16]
 800c0be:	f000 faf1 	bl	800c6a4 <__hi0bits>
 800c0c2:	f1c0 0020 	rsb	r0, r0, #32
 800c0c6:	9b06      	ldr	r3, [sp, #24]
 800c0c8:	4418      	add	r0, r3
 800c0ca:	f010 001f 	ands.w	r0, r0, #31
 800c0ce:	f000 8094 	beq.w	800c1fa <_dtoa_r+0x922>
 800c0d2:	f1c0 0320 	rsb	r3, r0, #32
 800c0d6:	2b04      	cmp	r3, #4
 800c0d8:	f340 8085 	ble.w	800c1e6 <_dtoa_r+0x90e>
 800c0dc:	9b05      	ldr	r3, [sp, #20]
 800c0de:	f1c0 001c 	rsb	r0, r0, #28
 800c0e2:	4403      	add	r3, r0
 800c0e4:	9305      	str	r3, [sp, #20]
 800c0e6:	9b06      	ldr	r3, [sp, #24]
 800c0e8:	4403      	add	r3, r0
 800c0ea:	4405      	add	r5, r0
 800c0ec:	9306      	str	r3, [sp, #24]
 800c0ee:	9b05      	ldr	r3, [sp, #20]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	dd05      	ble.n	800c100 <_dtoa_r+0x828>
 800c0f4:	4651      	mov	r1, sl
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f000 fc3b 	bl	800c974 <__lshift>
 800c0fe:	4682      	mov	sl, r0
 800c100:	9b06      	ldr	r3, [sp, #24]
 800c102:	2b00      	cmp	r3, #0
 800c104:	dd05      	ble.n	800c112 <_dtoa_r+0x83a>
 800c106:	4631      	mov	r1, r6
 800c108:	461a      	mov	r2, r3
 800c10a:	4620      	mov	r0, r4
 800c10c:	f000 fc32 	bl	800c974 <__lshift>
 800c110:	4606      	mov	r6, r0
 800c112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c114:	2b00      	cmp	r3, #0
 800c116:	d072      	beq.n	800c1fe <_dtoa_r+0x926>
 800c118:	4631      	mov	r1, r6
 800c11a:	4650      	mov	r0, sl
 800c11c:	f000 fc96 	bl	800ca4c <__mcmp>
 800c120:	2800      	cmp	r0, #0
 800c122:	da6c      	bge.n	800c1fe <_dtoa_r+0x926>
 800c124:	2300      	movs	r3, #0
 800c126:	4651      	mov	r1, sl
 800c128:	220a      	movs	r2, #10
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 fa74 	bl	800c618 <__multadd>
 800c130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c132:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c136:	4682      	mov	sl, r0
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f000 81b0 	beq.w	800c49e <_dtoa_r+0xbc6>
 800c13e:	2300      	movs	r3, #0
 800c140:	4639      	mov	r1, r7
 800c142:	220a      	movs	r2, #10
 800c144:	4620      	mov	r0, r4
 800c146:	f000 fa67 	bl	800c618 <__multadd>
 800c14a:	9b01      	ldr	r3, [sp, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	4607      	mov	r7, r0
 800c150:	f300 8096 	bgt.w	800c280 <_dtoa_r+0x9a8>
 800c154:	9b07      	ldr	r3, [sp, #28]
 800c156:	2b02      	cmp	r3, #2
 800c158:	dc59      	bgt.n	800c20e <_dtoa_r+0x936>
 800c15a:	e091      	b.n	800c280 <_dtoa_r+0x9a8>
 800c15c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c15e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c162:	e758      	b.n	800c016 <_dtoa_r+0x73e>
 800c164:	9b04      	ldr	r3, [sp, #16]
 800c166:	1e5e      	subs	r6, r3, #1
 800c168:	9b08      	ldr	r3, [sp, #32]
 800c16a:	42b3      	cmp	r3, r6
 800c16c:	bfbf      	itttt	lt
 800c16e:	9b08      	ldrlt	r3, [sp, #32]
 800c170:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c172:	9608      	strlt	r6, [sp, #32]
 800c174:	1af3      	sublt	r3, r6, r3
 800c176:	bfb4      	ite	lt
 800c178:	18d2      	addlt	r2, r2, r3
 800c17a:	1b9e      	subge	r6, r3, r6
 800c17c:	9b04      	ldr	r3, [sp, #16]
 800c17e:	bfbc      	itt	lt
 800c180:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c182:	2600      	movlt	r6, #0
 800c184:	2b00      	cmp	r3, #0
 800c186:	bfb7      	itett	lt
 800c188:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c18c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c190:	1a9d      	sublt	r5, r3, r2
 800c192:	2300      	movlt	r3, #0
 800c194:	e741      	b.n	800c01a <_dtoa_r+0x742>
 800c196:	9e08      	ldr	r6, [sp, #32]
 800c198:	9d05      	ldr	r5, [sp, #20]
 800c19a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c19c:	e748      	b.n	800c030 <_dtoa_r+0x758>
 800c19e:	9a08      	ldr	r2, [sp, #32]
 800c1a0:	e770      	b.n	800c084 <_dtoa_r+0x7ac>
 800c1a2:	9b07      	ldr	r3, [sp, #28]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	dc19      	bgt.n	800c1dc <_dtoa_r+0x904>
 800c1a8:	9b02      	ldr	r3, [sp, #8]
 800c1aa:	b9bb      	cbnz	r3, 800c1dc <_dtoa_r+0x904>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1b2:	b99b      	cbnz	r3, 800c1dc <_dtoa_r+0x904>
 800c1b4:	9b03      	ldr	r3, [sp, #12]
 800c1b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1ba:	0d1b      	lsrs	r3, r3, #20
 800c1bc:	051b      	lsls	r3, r3, #20
 800c1be:	b183      	cbz	r3, 800c1e2 <_dtoa_r+0x90a>
 800c1c0:	9b05      	ldr	r3, [sp, #20]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	9305      	str	r3, [sp, #20]
 800c1c6:	9b06      	ldr	r3, [sp, #24]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	9306      	str	r3, [sp, #24]
 800c1cc:	f04f 0801 	mov.w	r8, #1
 800c1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f47f af6f 	bne.w	800c0b6 <_dtoa_r+0x7de>
 800c1d8:	2001      	movs	r0, #1
 800c1da:	e774      	b.n	800c0c6 <_dtoa_r+0x7ee>
 800c1dc:	f04f 0800 	mov.w	r8, #0
 800c1e0:	e7f6      	b.n	800c1d0 <_dtoa_r+0x8f8>
 800c1e2:	4698      	mov	r8, r3
 800c1e4:	e7f4      	b.n	800c1d0 <_dtoa_r+0x8f8>
 800c1e6:	d082      	beq.n	800c0ee <_dtoa_r+0x816>
 800c1e8:	9a05      	ldr	r2, [sp, #20]
 800c1ea:	331c      	adds	r3, #28
 800c1ec:	441a      	add	r2, r3
 800c1ee:	9205      	str	r2, [sp, #20]
 800c1f0:	9a06      	ldr	r2, [sp, #24]
 800c1f2:	441a      	add	r2, r3
 800c1f4:	441d      	add	r5, r3
 800c1f6:	9206      	str	r2, [sp, #24]
 800c1f8:	e779      	b.n	800c0ee <_dtoa_r+0x816>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	e7f4      	b.n	800c1e8 <_dtoa_r+0x910>
 800c1fe:	9b04      	ldr	r3, [sp, #16]
 800c200:	2b00      	cmp	r3, #0
 800c202:	dc37      	bgt.n	800c274 <_dtoa_r+0x99c>
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	2b02      	cmp	r3, #2
 800c208:	dd34      	ble.n	800c274 <_dtoa_r+0x99c>
 800c20a:	9b04      	ldr	r3, [sp, #16]
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	9b01      	ldr	r3, [sp, #4]
 800c210:	b963      	cbnz	r3, 800c22c <_dtoa_r+0x954>
 800c212:	4631      	mov	r1, r6
 800c214:	2205      	movs	r2, #5
 800c216:	4620      	mov	r0, r4
 800c218:	f000 f9fe 	bl	800c618 <__multadd>
 800c21c:	4601      	mov	r1, r0
 800c21e:	4606      	mov	r6, r0
 800c220:	4650      	mov	r0, sl
 800c222:	f000 fc13 	bl	800ca4c <__mcmp>
 800c226:	2800      	cmp	r0, #0
 800c228:	f73f adbb 	bgt.w	800bda2 <_dtoa_r+0x4ca>
 800c22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c22e:	9d00      	ldr	r5, [sp, #0]
 800c230:	ea6f 0b03 	mvn.w	fp, r3
 800c234:	f04f 0800 	mov.w	r8, #0
 800c238:	4631      	mov	r1, r6
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 f9ca 	bl	800c5d4 <_Bfree>
 800c240:	2f00      	cmp	r7, #0
 800c242:	f43f aeab 	beq.w	800bf9c <_dtoa_r+0x6c4>
 800c246:	f1b8 0f00 	cmp.w	r8, #0
 800c24a:	d005      	beq.n	800c258 <_dtoa_r+0x980>
 800c24c:	45b8      	cmp	r8, r7
 800c24e:	d003      	beq.n	800c258 <_dtoa_r+0x980>
 800c250:	4641      	mov	r1, r8
 800c252:	4620      	mov	r0, r4
 800c254:	f000 f9be 	bl	800c5d4 <_Bfree>
 800c258:	4639      	mov	r1, r7
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 f9ba 	bl	800c5d4 <_Bfree>
 800c260:	e69c      	b.n	800bf9c <_dtoa_r+0x6c4>
 800c262:	2600      	movs	r6, #0
 800c264:	4637      	mov	r7, r6
 800c266:	e7e1      	b.n	800c22c <_dtoa_r+0x954>
 800c268:	46bb      	mov	fp, r7
 800c26a:	4637      	mov	r7, r6
 800c26c:	e599      	b.n	800bda2 <_dtoa_r+0x4ca>
 800c26e:	bf00      	nop
 800c270:	40240000 	.word	0x40240000
 800c274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c276:	2b00      	cmp	r3, #0
 800c278:	f000 80c8 	beq.w	800c40c <_dtoa_r+0xb34>
 800c27c:	9b04      	ldr	r3, [sp, #16]
 800c27e:	9301      	str	r3, [sp, #4]
 800c280:	2d00      	cmp	r5, #0
 800c282:	dd05      	ble.n	800c290 <_dtoa_r+0x9b8>
 800c284:	4639      	mov	r1, r7
 800c286:	462a      	mov	r2, r5
 800c288:	4620      	mov	r0, r4
 800c28a:	f000 fb73 	bl	800c974 <__lshift>
 800c28e:	4607      	mov	r7, r0
 800c290:	f1b8 0f00 	cmp.w	r8, #0
 800c294:	d05b      	beq.n	800c34e <_dtoa_r+0xa76>
 800c296:	6879      	ldr	r1, [r7, #4]
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 f95b 	bl	800c554 <_Balloc>
 800c29e:	4605      	mov	r5, r0
 800c2a0:	b928      	cbnz	r0, 800c2ae <_dtoa_r+0x9d6>
 800c2a2:	4b83      	ldr	r3, [pc, #524]	; (800c4b0 <_dtoa_r+0xbd8>)
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c2aa:	f7ff bb2e 	b.w	800b90a <_dtoa_r+0x32>
 800c2ae:	693a      	ldr	r2, [r7, #16]
 800c2b0:	3202      	adds	r2, #2
 800c2b2:	0092      	lsls	r2, r2, #2
 800c2b4:	f107 010c 	add.w	r1, r7, #12
 800c2b8:	300c      	adds	r0, #12
 800c2ba:	f7ff fa76 	bl	800b7aa <memcpy>
 800c2be:	2201      	movs	r2, #1
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 fb56 	bl	800c974 <__lshift>
 800c2c8:	9b00      	ldr	r3, [sp, #0]
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	9304      	str	r3, [sp, #16]
 800c2ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	9308      	str	r3, [sp, #32]
 800c2d6:	9b02      	ldr	r3, [sp, #8]
 800c2d8:	f003 0301 	and.w	r3, r3, #1
 800c2dc:	46b8      	mov	r8, r7
 800c2de:	9306      	str	r3, [sp, #24]
 800c2e0:	4607      	mov	r7, r0
 800c2e2:	9b04      	ldr	r3, [sp, #16]
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	4650      	mov	r0, sl
 800c2ea:	9301      	str	r3, [sp, #4]
 800c2ec:	f7ff fa6b 	bl	800b7c6 <quorem>
 800c2f0:	4641      	mov	r1, r8
 800c2f2:	9002      	str	r0, [sp, #8]
 800c2f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c2f8:	4650      	mov	r0, sl
 800c2fa:	f000 fba7 	bl	800ca4c <__mcmp>
 800c2fe:	463a      	mov	r2, r7
 800c300:	9005      	str	r0, [sp, #20]
 800c302:	4631      	mov	r1, r6
 800c304:	4620      	mov	r0, r4
 800c306:	f000 fbbd 	bl	800ca84 <__mdiff>
 800c30a:	68c2      	ldr	r2, [r0, #12]
 800c30c:	4605      	mov	r5, r0
 800c30e:	bb02      	cbnz	r2, 800c352 <_dtoa_r+0xa7a>
 800c310:	4601      	mov	r1, r0
 800c312:	4650      	mov	r0, sl
 800c314:	f000 fb9a 	bl	800ca4c <__mcmp>
 800c318:	4602      	mov	r2, r0
 800c31a:	4629      	mov	r1, r5
 800c31c:	4620      	mov	r0, r4
 800c31e:	9209      	str	r2, [sp, #36]	; 0x24
 800c320:	f000 f958 	bl	800c5d4 <_Bfree>
 800c324:	9b07      	ldr	r3, [sp, #28]
 800c326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c328:	9d04      	ldr	r5, [sp, #16]
 800c32a:	ea43 0102 	orr.w	r1, r3, r2
 800c32e:	9b06      	ldr	r3, [sp, #24]
 800c330:	4319      	orrs	r1, r3
 800c332:	d110      	bne.n	800c356 <_dtoa_r+0xa7e>
 800c334:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c338:	d029      	beq.n	800c38e <_dtoa_r+0xab6>
 800c33a:	9b05      	ldr	r3, [sp, #20]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	dd02      	ble.n	800c346 <_dtoa_r+0xa6e>
 800c340:	9b02      	ldr	r3, [sp, #8]
 800c342:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c346:	9b01      	ldr	r3, [sp, #4]
 800c348:	f883 9000 	strb.w	r9, [r3]
 800c34c:	e774      	b.n	800c238 <_dtoa_r+0x960>
 800c34e:	4638      	mov	r0, r7
 800c350:	e7ba      	b.n	800c2c8 <_dtoa_r+0x9f0>
 800c352:	2201      	movs	r2, #1
 800c354:	e7e1      	b.n	800c31a <_dtoa_r+0xa42>
 800c356:	9b05      	ldr	r3, [sp, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	db04      	blt.n	800c366 <_dtoa_r+0xa8e>
 800c35c:	9907      	ldr	r1, [sp, #28]
 800c35e:	430b      	orrs	r3, r1
 800c360:	9906      	ldr	r1, [sp, #24]
 800c362:	430b      	orrs	r3, r1
 800c364:	d120      	bne.n	800c3a8 <_dtoa_r+0xad0>
 800c366:	2a00      	cmp	r2, #0
 800c368:	dded      	ble.n	800c346 <_dtoa_r+0xa6e>
 800c36a:	4651      	mov	r1, sl
 800c36c:	2201      	movs	r2, #1
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 fb00 	bl	800c974 <__lshift>
 800c374:	4631      	mov	r1, r6
 800c376:	4682      	mov	sl, r0
 800c378:	f000 fb68 	bl	800ca4c <__mcmp>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	dc03      	bgt.n	800c388 <_dtoa_r+0xab0>
 800c380:	d1e1      	bne.n	800c346 <_dtoa_r+0xa6e>
 800c382:	f019 0f01 	tst.w	r9, #1
 800c386:	d0de      	beq.n	800c346 <_dtoa_r+0xa6e>
 800c388:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c38c:	d1d8      	bne.n	800c340 <_dtoa_r+0xa68>
 800c38e:	9a01      	ldr	r2, [sp, #4]
 800c390:	2339      	movs	r3, #57	; 0x39
 800c392:	7013      	strb	r3, [r2, #0]
 800c394:	462b      	mov	r3, r5
 800c396:	461d      	mov	r5, r3
 800c398:	3b01      	subs	r3, #1
 800c39a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c39e:	2a39      	cmp	r2, #57	; 0x39
 800c3a0:	d06c      	beq.n	800c47c <_dtoa_r+0xba4>
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	e747      	b.n	800c238 <_dtoa_r+0x960>
 800c3a8:	2a00      	cmp	r2, #0
 800c3aa:	dd07      	ble.n	800c3bc <_dtoa_r+0xae4>
 800c3ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c3b0:	d0ed      	beq.n	800c38e <_dtoa_r+0xab6>
 800c3b2:	9a01      	ldr	r2, [sp, #4]
 800c3b4:	f109 0301 	add.w	r3, r9, #1
 800c3b8:	7013      	strb	r3, [r2, #0]
 800c3ba:	e73d      	b.n	800c238 <_dtoa_r+0x960>
 800c3bc:	9b04      	ldr	r3, [sp, #16]
 800c3be:	9a08      	ldr	r2, [sp, #32]
 800c3c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d043      	beq.n	800c450 <_dtoa_r+0xb78>
 800c3c8:	4651      	mov	r1, sl
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	220a      	movs	r2, #10
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f000 f922 	bl	800c618 <__multadd>
 800c3d4:	45b8      	cmp	r8, r7
 800c3d6:	4682      	mov	sl, r0
 800c3d8:	f04f 0300 	mov.w	r3, #0
 800c3dc:	f04f 020a 	mov.w	r2, #10
 800c3e0:	4641      	mov	r1, r8
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	d107      	bne.n	800c3f6 <_dtoa_r+0xb1e>
 800c3e6:	f000 f917 	bl	800c618 <__multadd>
 800c3ea:	4680      	mov	r8, r0
 800c3ec:	4607      	mov	r7, r0
 800c3ee:	9b04      	ldr	r3, [sp, #16]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	9304      	str	r3, [sp, #16]
 800c3f4:	e775      	b.n	800c2e2 <_dtoa_r+0xa0a>
 800c3f6:	f000 f90f 	bl	800c618 <__multadd>
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	4680      	mov	r8, r0
 800c3fe:	2300      	movs	r3, #0
 800c400:	220a      	movs	r2, #10
 800c402:	4620      	mov	r0, r4
 800c404:	f000 f908 	bl	800c618 <__multadd>
 800c408:	4607      	mov	r7, r0
 800c40a:	e7f0      	b.n	800c3ee <_dtoa_r+0xb16>
 800c40c:	9b04      	ldr	r3, [sp, #16]
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	9d00      	ldr	r5, [sp, #0]
 800c412:	4631      	mov	r1, r6
 800c414:	4650      	mov	r0, sl
 800c416:	f7ff f9d6 	bl	800b7c6 <quorem>
 800c41a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c41e:	9b00      	ldr	r3, [sp, #0]
 800c420:	f805 9b01 	strb.w	r9, [r5], #1
 800c424:	1aea      	subs	r2, r5, r3
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	4293      	cmp	r3, r2
 800c42a:	dd07      	ble.n	800c43c <_dtoa_r+0xb64>
 800c42c:	4651      	mov	r1, sl
 800c42e:	2300      	movs	r3, #0
 800c430:	220a      	movs	r2, #10
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f8f0 	bl	800c618 <__multadd>
 800c438:	4682      	mov	sl, r0
 800c43a:	e7ea      	b.n	800c412 <_dtoa_r+0xb3a>
 800c43c:	9b01      	ldr	r3, [sp, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	bfc8      	it	gt
 800c442:	461d      	movgt	r5, r3
 800c444:	9b00      	ldr	r3, [sp, #0]
 800c446:	bfd8      	it	le
 800c448:	2501      	movle	r5, #1
 800c44a:	441d      	add	r5, r3
 800c44c:	f04f 0800 	mov.w	r8, #0
 800c450:	4651      	mov	r1, sl
 800c452:	2201      	movs	r2, #1
 800c454:	4620      	mov	r0, r4
 800c456:	f000 fa8d 	bl	800c974 <__lshift>
 800c45a:	4631      	mov	r1, r6
 800c45c:	4682      	mov	sl, r0
 800c45e:	f000 faf5 	bl	800ca4c <__mcmp>
 800c462:	2800      	cmp	r0, #0
 800c464:	dc96      	bgt.n	800c394 <_dtoa_r+0xabc>
 800c466:	d102      	bne.n	800c46e <_dtoa_r+0xb96>
 800c468:	f019 0f01 	tst.w	r9, #1
 800c46c:	d192      	bne.n	800c394 <_dtoa_r+0xabc>
 800c46e:	462b      	mov	r3, r5
 800c470:	461d      	mov	r5, r3
 800c472:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c476:	2a30      	cmp	r2, #48	; 0x30
 800c478:	d0fa      	beq.n	800c470 <_dtoa_r+0xb98>
 800c47a:	e6dd      	b.n	800c238 <_dtoa_r+0x960>
 800c47c:	9a00      	ldr	r2, [sp, #0]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d189      	bne.n	800c396 <_dtoa_r+0xabe>
 800c482:	f10b 0b01 	add.w	fp, fp, #1
 800c486:	2331      	movs	r3, #49	; 0x31
 800c488:	e796      	b.n	800c3b8 <_dtoa_r+0xae0>
 800c48a:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <_dtoa_r+0xbdc>)
 800c48c:	f7ff ba99 	b.w	800b9c2 <_dtoa_r+0xea>
 800c490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c492:	2b00      	cmp	r3, #0
 800c494:	f47f aa6d 	bne.w	800b972 <_dtoa_r+0x9a>
 800c498:	4b07      	ldr	r3, [pc, #28]	; (800c4b8 <_dtoa_r+0xbe0>)
 800c49a:	f7ff ba92 	b.w	800b9c2 <_dtoa_r+0xea>
 800c49e:	9b01      	ldr	r3, [sp, #4]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	dcb5      	bgt.n	800c410 <_dtoa_r+0xb38>
 800c4a4:	9b07      	ldr	r3, [sp, #28]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	f73f aeb1 	bgt.w	800c20e <_dtoa_r+0x936>
 800c4ac:	e7b0      	b.n	800c410 <_dtoa_r+0xb38>
 800c4ae:	bf00      	nop
 800c4b0:	0800e29c 	.word	0x0800e29c
 800c4b4:	0800e1fc 	.word	0x0800e1fc
 800c4b8:	0800e220 	.word	0x0800e220

0800c4bc <_free_r>:
 800c4bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4be:	2900      	cmp	r1, #0
 800c4c0:	d044      	beq.n	800c54c <_free_r+0x90>
 800c4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4c6:	9001      	str	r0, [sp, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f1a1 0404 	sub.w	r4, r1, #4
 800c4ce:	bfb8      	it	lt
 800c4d0:	18e4      	addlt	r4, r4, r3
 800c4d2:	f7fe faeb 	bl	800aaac <__malloc_lock>
 800c4d6:	4a1e      	ldr	r2, [pc, #120]	; (800c550 <_free_r+0x94>)
 800c4d8:	9801      	ldr	r0, [sp, #4]
 800c4da:	6813      	ldr	r3, [r2, #0]
 800c4dc:	b933      	cbnz	r3, 800c4ec <_free_r+0x30>
 800c4de:	6063      	str	r3, [r4, #4]
 800c4e0:	6014      	str	r4, [r2, #0]
 800c4e2:	b003      	add	sp, #12
 800c4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4e8:	f7fe bae6 	b.w	800aab8 <__malloc_unlock>
 800c4ec:	42a3      	cmp	r3, r4
 800c4ee:	d908      	bls.n	800c502 <_free_r+0x46>
 800c4f0:	6825      	ldr	r5, [r4, #0]
 800c4f2:	1961      	adds	r1, r4, r5
 800c4f4:	428b      	cmp	r3, r1
 800c4f6:	bf01      	itttt	eq
 800c4f8:	6819      	ldreq	r1, [r3, #0]
 800c4fa:	685b      	ldreq	r3, [r3, #4]
 800c4fc:	1949      	addeq	r1, r1, r5
 800c4fe:	6021      	streq	r1, [r4, #0]
 800c500:	e7ed      	b.n	800c4de <_free_r+0x22>
 800c502:	461a      	mov	r2, r3
 800c504:	685b      	ldr	r3, [r3, #4]
 800c506:	b10b      	cbz	r3, 800c50c <_free_r+0x50>
 800c508:	42a3      	cmp	r3, r4
 800c50a:	d9fa      	bls.n	800c502 <_free_r+0x46>
 800c50c:	6811      	ldr	r1, [r2, #0]
 800c50e:	1855      	adds	r5, r2, r1
 800c510:	42a5      	cmp	r5, r4
 800c512:	d10b      	bne.n	800c52c <_free_r+0x70>
 800c514:	6824      	ldr	r4, [r4, #0]
 800c516:	4421      	add	r1, r4
 800c518:	1854      	adds	r4, r2, r1
 800c51a:	42a3      	cmp	r3, r4
 800c51c:	6011      	str	r1, [r2, #0]
 800c51e:	d1e0      	bne.n	800c4e2 <_free_r+0x26>
 800c520:	681c      	ldr	r4, [r3, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	6053      	str	r3, [r2, #4]
 800c526:	440c      	add	r4, r1
 800c528:	6014      	str	r4, [r2, #0]
 800c52a:	e7da      	b.n	800c4e2 <_free_r+0x26>
 800c52c:	d902      	bls.n	800c534 <_free_r+0x78>
 800c52e:	230c      	movs	r3, #12
 800c530:	6003      	str	r3, [r0, #0]
 800c532:	e7d6      	b.n	800c4e2 <_free_r+0x26>
 800c534:	6825      	ldr	r5, [r4, #0]
 800c536:	1961      	adds	r1, r4, r5
 800c538:	428b      	cmp	r3, r1
 800c53a:	bf04      	itt	eq
 800c53c:	6819      	ldreq	r1, [r3, #0]
 800c53e:	685b      	ldreq	r3, [r3, #4]
 800c540:	6063      	str	r3, [r4, #4]
 800c542:	bf04      	itt	eq
 800c544:	1949      	addeq	r1, r1, r5
 800c546:	6021      	streq	r1, [r4, #0]
 800c548:	6054      	str	r4, [r2, #4]
 800c54a:	e7ca      	b.n	800c4e2 <_free_r+0x26>
 800c54c:	b003      	add	sp, #12
 800c54e:	bd30      	pop	{r4, r5, pc}
 800c550:	200007fc 	.word	0x200007fc

0800c554 <_Balloc>:
 800c554:	b570      	push	{r4, r5, r6, lr}
 800c556:	69c6      	ldr	r6, [r0, #28]
 800c558:	4604      	mov	r4, r0
 800c55a:	460d      	mov	r5, r1
 800c55c:	b976      	cbnz	r6, 800c57c <_Balloc+0x28>
 800c55e:	2010      	movs	r0, #16
 800c560:	f7fe f9f4 	bl	800a94c <malloc>
 800c564:	4602      	mov	r2, r0
 800c566:	61e0      	str	r0, [r4, #28]
 800c568:	b920      	cbnz	r0, 800c574 <_Balloc+0x20>
 800c56a:	4b18      	ldr	r3, [pc, #96]	; (800c5cc <_Balloc+0x78>)
 800c56c:	4818      	ldr	r0, [pc, #96]	; (800c5d0 <_Balloc+0x7c>)
 800c56e:	216b      	movs	r1, #107	; 0x6b
 800c570:	f000 fd8c 	bl	800d08c <__assert_func>
 800c574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c578:	6006      	str	r6, [r0, #0]
 800c57a:	60c6      	str	r6, [r0, #12]
 800c57c:	69e6      	ldr	r6, [r4, #28]
 800c57e:	68f3      	ldr	r3, [r6, #12]
 800c580:	b183      	cbz	r3, 800c5a4 <_Balloc+0x50>
 800c582:	69e3      	ldr	r3, [r4, #28]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c58a:	b9b8      	cbnz	r0, 800c5bc <_Balloc+0x68>
 800c58c:	2101      	movs	r1, #1
 800c58e:	fa01 f605 	lsl.w	r6, r1, r5
 800c592:	1d72      	adds	r2, r6, #5
 800c594:	0092      	lsls	r2, r2, #2
 800c596:	4620      	mov	r0, r4
 800c598:	f000 fd96 	bl	800d0c8 <_calloc_r>
 800c59c:	b160      	cbz	r0, 800c5b8 <_Balloc+0x64>
 800c59e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c5a2:	e00e      	b.n	800c5c2 <_Balloc+0x6e>
 800c5a4:	2221      	movs	r2, #33	; 0x21
 800c5a6:	2104      	movs	r1, #4
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f000 fd8d 	bl	800d0c8 <_calloc_r>
 800c5ae:	69e3      	ldr	r3, [r4, #28]
 800c5b0:	60f0      	str	r0, [r6, #12]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e4      	bne.n	800c582 <_Balloc+0x2e>
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	bd70      	pop	{r4, r5, r6, pc}
 800c5bc:	6802      	ldr	r2, [r0, #0]
 800c5be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5c8:	e7f7      	b.n	800c5ba <_Balloc+0x66>
 800c5ca:	bf00      	nop
 800c5cc:	0800e22d 	.word	0x0800e22d
 800c5d0:	0800e2ad 	.word	0x0800e2ad

0800c5d4 <_Bfree>:
 800c5d4:	b570      	push	{r4, r5, r6, lr}
 800c5d6:	69c6      	ldr	r6, [r0, #28]
 800c5d8:	4605      	mov	r5, r0
 800c5da:	460c      	mov	r4, r1
 800c5dc:	b976      	cbnz	r6, 800c5fc <_Bfree+0x28>
 800c5de:	2010      	movs	r0, #16
 800c5e0:	f7fe f9b4 	bl	800a94c <malloc>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	61e8      	str	r0, [r5, #28]
 800c5e8:	b920      	cbnz	r0, 800c5f4 <_Bfree+0x20>
 800c5ea:	4b09      	ldr	r3, [pc, #36]	; (800c610 <_Bfree+0x3c>)
 800c5ec:	4809      	ldr	r0, [pc, #36]	; (800c614 <_Bfree+0x40>)
 800c5ee:	218f      	movs	r1, #143	; 0x8f
 800c5f0:	f000 fd4c 	bl	800d08c <__assert_func>
 800c5f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5f8:	6006      	str	r6, [r0, #0]
 800c5fa:	60c6      	str	r6, [r0, #12]
 800c5fc:	b13c      	cbz	r4, 800c60e <_Bfree+0x3a>
 800c5fe:	69eb      	ldr	r3, [r5, #28]
 800c600:	6862      	ldr	r2, [r4, #4]
 800c602:	68db      	ldr	r3, [r3, #12]
 800c604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c608:	6021      	str	r1, [r4, #0]
 800c60a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c60e:	bd70      	pop	{r4, r5, r6, pc}
 800c610:	0800e22d 	.word	0x0800e22d
 800c614:	0800e2ad 	.word	0x0800e2ad

0800c618 <__multadd>:
 800c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	690d      	ldr	r5, [r1, #16]
 800c61e:	4607      	mov	r7, r0
 800c620:	460c      	mov	r4, r1
 800c622:	461e      	mov	r6, r3
 800c624:	f101 0c14 	add.w	ip, r1, #20
 800c628:	2000      	movs	r0, #0
 800c62a:	f8dc 3000 	ldr.w	r3, [ip]
 800c62e:	b299      	uxth	r1, r3
 800c630:	fb02 6101 	mla	r1, r2, r1, r6
 800c634:	0c1e      	lsrs	r6, r3, #16
 800c636:	0c0b      	lsrs	r3, r1, #16
 800c638:	fb02 3306 	mla	r3, r2, r6, r3
 800c63c:	b289      	uxth	r1, r1
 800c63e:	3001      	adds	r0, #1
 800c640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c644:	4285      	cmp	r5, r0
 800c646:	f84c 1b04 	str.w	r1, [ip], #4
 800c64a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c64e:	dcec      	bgt.n	800c62a <__multadd+0x12>
 800c650:	b30e      	cbz	r6, 800c696 <__multadd+0x7e>
 800c652:	68a3      	ldr	r3, [r4, #8]
 800c654:	42ab      	cmp	r3, r5
 800c656:	dc19      	bgt.n	800c68c <__multadd+0x74>
 800c658:	6861      	ldr	r1, [r4, #4]
 800c65a:	4638      	mov	r0, r7
 800c65c:	3101      	adds	r1, #1
 800c65e:	f7ff ff79 	bl	800c554 <_Balloc>
 800c662:	4680      	mov	r8, r0
 800c664:	b928      	cbnz	r0, 800c672 <__multadd+0x5a>
 800c666:	4602      	mov	r2, r0
 800c668:	4b0c      	ldr	r3, [pc, #48]	; (800c69c <__multadd+0x84>)
 800c66a:	480d      	ldr	r0, [pc, #52]	; (800c6a0 <__multadd+0x88>)
 800c66c:	21ba      	movs	r1, #186	; 0xba
 800c66e:	f000 fd0d 	bl	800d08c <__assert_func>
 800c672:	6922      	ldr	r2, [r4, #16]
 800c674:	3202      	adds	r2, #2
 800c676:	f104 010c 	add.w	r1, r4, #12
 800c67a:	0092      	lsls	r2, r2, #2
 800c67c:	300c      	adds	r0, #12
 800c67e:	f7ff f894 	bl	800b7aa <memcpy>
 800c682:	4621      	mov	r1, r4
 800c684:	4638      	mov	r0, r7
 800c686:	f7ff ffa5 	bl	800c5d4 <_Bfree>
 800c68a:	4644      	mov	r4, r8
 800c68c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c690:	3501      	adds	r5, #1
 800c692:	615e      	str	r6, [r3, #20]
 800c694:	6125      	str	r5, [r4, #16]
 800c696:	4620      	mov	r0, r4
 800c698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c69c:	0800e29c 	.word	0x0800e29c
 800c6a0:	0800e2ad 	.word	0x0800e2ad

0800c6a4 <__hi0bits>:
 800c6a4:	0c03      	lsrs	r3, r0, #16
 800c6a6:	041b      	lsls	r3, r3, #16
 800c6a8:	b9d3      	cbnz	r3, 800c6e0 <__hi0bits+0x3c>
 800c6aa:	0400      	lsls	r0, r0, #16
 800c6ac:	2310      	movs	r3, #16
 800c6ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c6b2:	bf04      	itt	eq
 800c6b4:	0200      	lsleq	r0, r0, #8
 800c6b6:	3308      	addeq	r3, #8
 800c6b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c6bc:	bf04      	itt	eq
 800c6be:	0100      	lsleq	r0, r0, #4
 800c6c0:	3304      	addeq	r3, #4
 800c6c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6c6:	bf04      	itt	eq
 800c6c8:	0080      	lsleq	r0, r0, #2
 800c6ca:	3302      	addeq	r3, #2
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	db05      	blt.n	800c6dc <__hi0bits+0x38>
 800c6d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c6d4:	f103 0301 	add.w	r3, r3, #1
 800c6d8:	bf08      	it	eq
 800c6da:	2320      	moveq	r3, #32
 800c6dc:	4618      	mov	r0, r3
 800c6de:	4770      	bx	lr
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	e7e4      	b.n	800c6ae <__hi0bits+0xa>

0800c6e4 <__lo0bits>:
 800c6e4:	6803      	ldr	r3, [r0, #0]
 800c6e6:	f013 0207 	ands.w	r2, r3, #7
 800c6ea:	d00c      	beq.n	800c706 <__lo0bits+0x22>
 800c6ec:	07d9      	lsls	r1, r3, #31
 800c6ee:	d422      	bmi.n	800c736 <__lo0bits+0x52>
 800c6f0:	079a      	lsls	r2, r3, #30
 800c6f2:	bf49      	itett	mi
 800c6f4:	085b      	lsrmi	r3, r3, #1
 800c6f6:	089b      	lsrpl	r3, r3, #2
 800c6f8:	6003      	strmi	r3, [r0, #0]
 800c6fa:	2201      	movmi	r2, #1
 800c6fc:	bf5c      	itt	pl
 800c6fe:	6003      	strpl	r3, [r0, #0]
 800c700:	2202      	movpl	r2, #2
 800c702:	4610      	mov	r0, r2
 800c704:	4770      	bx	lr
 800c706:	b299      	uxth	r1, r3
 800c708:	b909      	cbnz	r1, 800c70e <__lo0bits+0x2a>
 800c70a:	0c1b      	lsrs	r3, r3, #16
 800c70c:	2210      	movs	r2, #16
 800c70e:	b2d9      	uxtb	r1, r3
 800c710:	b909      	cbnz	r1, 800c716 <__lo0bits+0x32>
 800c712:	3208      	adds	r2, #8
 800c714:	0a1b      	lsrs	r3, r3, #8
 800c716:	0719      	lsls	r1, r3, #28
 800c718:	bf04      	itt	eq
 800c71a:	091b      	lsreq	r3, r3, #4
 800c71c:	3204      	addeq	r2, #4
 800c71e:	0799      	lsls	r1, r3, #30
 800c720:	bf04      	itt	eq
 800c722:	089b      	lsreq	r3, r3, #2
 800c724:	3202      	addeq	r2, #2
 800c726:	07d9      	lsls	r1, r3, #31
 800c728:	d403      	bmi.n	800c732 <__lo0bits+0x4e>
 800c72a:	085b      	lsrs	r3, r3, #1
 800c72c:	f102 0201 	add.w	r2, r2, #1
 800c730:	d003      	beq.n	800c73a <__lo0bits+0x56>
 800c732:	6003      	str	r3, [r0, #0]
 800c734:	e7e5      	b.n	800c702 <__lo0bits+0x1e>
 800c736:	2200      	movs	r2, #0
 800c738:	e7e3      	b.n	800c702 <__lo0bits+0x1e>
 800c73a:	2220      	movs	r2, #32
 800c73c:	e7e1      	b.n	800c702 <__lo0bits+0x1e>
	...

0800c740 <__i2b>:
 800c740:	b510      	push	{r4, lr}
 800c742:	460c      	mov	r4, r1
 800c744:	2101      	movs	r1, #1
 800c746:	f7ff ff05 	bl	800c554 <_Balloc>
 800c74a:	4602      	mov	r2, r0
 800c74c:	b928      	cbnz	r0, 800c75a <__i2b+0x1a>
 800c74e:	4b05      	ldr	r3, [pc, #20]	; (800c764 <__i2b+0x24>)
 800c750:	4805      	ldr	r0, [pc, #20]	; (800c768 <__i2b+0x28>)
 800c752:	f240 1145 	movw	r1, #325	; 0x145
 800c756:	f000 fc99 	bl	800d08c <__assert_func>
 800c75a:	2301      	movs	r3, #1
 800c75c:	6144      	str	r4, [r0, #20]
 800c75e:	6103      	str	r3, [r0, #16]
 800c760:	bd10      	pop	{r4, pc}
 800c762:	bf00      	nop
 800c764:	0800e29c 	.word	0x0800e29c
 800c768:	0800e2ad 	.word	0x0800e2ad

0800c76c <__multiply>:
 800c76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c770:	4691      	mov	r9, r2
 800c772:	690a      	ldr	r2, [r1, #16]
 800c774:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c778:	429a      	cmp	r2, r3
 800c77a:	bfb8      	it	lt
 800c77c:	460b      	movlt	r3, r1
 800c77e:	460c      	mov	r4, r1
 800c780:	bfbc      	itt	lt
 800c782:	464c      	movlt	r4, r9
 800c784:	4699      	movlt	r9, r3
 800c786:	6927      	ldr	r7, [r4, #16]
 800c788:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	6861      	ldr	r1, [r4, #4]
 800c790:	eb07 060a 	add.w	r6, r7, sl
 800c794:	42b3      	cmp	r3, r6
 800c796:	b085      	sub	sp, #20
 800c798:	bfb8      	it	lt
 800c79a:	3101      	addlt	r1, #1
 800c79c:	f7ff feda 	bl	800c554 <_Balloc>
 800c7a0:	b930      	cbnz	r0, 800c7b0 <__multiply+0x44>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	4b44      	ldr	r3, [pc, #272]	; (800c8b8 <__multiply+0x14c>)
 800c7a6:	4845      	ldr	r0, [pc, #276]	; (800c8bc <__multiply+0x150>)
 800c7a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c7ac:	f000 fc6e 	bl	800d08c <__assert_func>
 800c7b0:	f100 0514 	add.w	r5, r0, #20
 800c7b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7b8:	462b      	mov	r3, r5
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	4543      	cmp	r3, r8
 800c7be:	d321      	bcc.n	800c804 <__multiply+0x98>
 800c7c0:	f104 0314 	add.w	r3, r4, #20
 800c7c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7c8:	f109 0314 	add.w	r3, r9, #20
 800c7cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c7d0:	9202      	str	r2, [sp, #8]
 800c7d2:	1b3a      	subs	r2, r7, r4
 800c7d4:	3a15      	subs	r2, #21
 800c7d6:	f022 0203 	bic.w	r2, r2, #3
 800c7da:	3204      	adds	r2, #4
 800c7dc:	f104 0115 	add.w	r1, r4, #21
 800c7e0:	428f      	cmp	r7, r1
 800c7e2:	bf38      	it	cc
 800c7e4:	2204      	movcc	r2, #4
 800c7e6:	9201      	str	r2, [sp, #4]
 800c7e8:	9a02      	ldr	r2, [sp, #8]
 800c7ea:	9303      	str	r3, [sp, #12]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d80c      	bhi.n	800c80a <__multiply+0x9e>
 800c7f0:	2e00      	cmp	r6, #0
 800c7f2:	dd03      	ble.n	800c7fc <__multiply+0x90>
 800c7f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d05b      	beq.n	800c8b4 <__multiply+0x148>
 800c7fc:	6106      	str	r6, [r0, #16]
 800c7fe:	b005      	add	sp, #20
 800c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c804:	f843 2b04 	str.w	r2, [r3], #4
 800c808:	e7d8      	b.n	800c7bc <__multiply+0x50>
 800c80a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c80e:	f1ba 0f00 	cmp.w	sl, #0
 800c812:	d024      	beq.n	800c85e <__multiply+0xf2>
 800c814:	f104 0e14 	add.w	lr, r4, #20
 800c818:	46a9      	mov	r9, r5
 800c81a:	f04f 0c00 	mov.w	ip, #0
 800c81e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c822:	f8d9 1000 	ldr.w	r1, [r9]
 800c826:	fa1f fb82 	uxth.w	fp, r2
 800c82a:	b289      	uxth	r1, r1
 800c82c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c830:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c834:	f8d9 2000 	ldr.w	r2, [r9]
 800c838:	4461      	add	r1, ip
 800c83a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c83e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c842:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c846:	b289      	uxth	r1, r1
 800c848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c84c:	4577      	cmp	r7, lr
 800c84e:	f849 1b04 	str.w	r1, [r9], #4
 800c852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c856:	d8e2      	bhi.n	800c81e <__multiply+0xb2>
 800c858:	9a01      	ldr	r2, [sp, #4]
 800c85a:	f845 c002 	str.w	ip, [r5, r2]
 800c85e:	9a03      	ldr	r2, [sp, #12]
 800c860:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c864:	3304      	adds	r3, #4
 800c866:	f1b9 0f00 	cmp.w	r9, #0
 800c86a:	d021      	beq.n	800c8b0 <__multiply+0x144>
 800c86c:	6829      	ldr	r1, [r5, #0]
 800c86e:	f104 0c14 	add.w	ip, r4, #20
 800c872:	46ae      	mov	lr, r5
 800c874:	f04f 0a00 	mov.w	sl, #0
 800c878:	f8bc b000 	ldrh.w	fp, [ip]
 800c87c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c880:	fb09 220b 	mla	r2, r9, fp, r2
 800c884:	4452      	add	r2, sl
 800c886:	b289      	uxth	r1, r1
 800c888:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c88c:	f84e 1b04 	str.w	r1, [lr], #4
 800c890:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c894:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c898:	f8be 1000 	ldrh.w	r1, [lr]
 800c89c:	fb09 110a 	mla	r1, r9, sl, r1
 800c8a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c8a4:	4567      	cmp	r7, ip
 800c8a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c8aa:	d8e5      	bhi.n	800c878 <__multiply+0x10c>
 800c8ac:	9a01      	ldr	r2, [sp, #4]
 800c8ae:	50a9      	str	r1, [r5, r2]
 800c8b0:	3504      	adds	r5, #4
 800c8b2:	e799      	b.n	800c7e8 <__multiply+0x7c>
 800c8b4:	3e01      	subs	r6, #1
 800c8b6:	e79b      	b.n	800c7f0 <__multiply+0x84>
 800c8b8:	0800e29c 	.word	0x0800e29c
 800c8bc:	0800e2ad 	.word	0x0800e2ad

0800c8c0 <__pow5mult>:
 800c8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	4615      	mov	r5, r2
 800c8c6:	f012 0203 	ands.w	r2, r2, #3
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	460f      	mov	r7, r1
 800c8ce:	d007      	beq.n	800c8e0 <__pow5mult+0x20>
 800c8d0:	4c25      	ldr	r4, [pc, #148]	; (800c968 <__pow5mult+0xa8>)
 800c8d2:	3a01      	subs	r2, #1
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8da:	f7ff fe9d 	bl	800c618 <__multadd>
 800c8de:	4607      	mov	r7, r0
 800c8e0:	10ad      	asrs	r5, r5, #2
 800c8e2:	d03d      	beq.n	800c960 <__pow5mult+0xa0>
 800c8e4:	69f4      	ldr	r4, [r6, #28]
 800c8e6:	b97c      	cbnz	r4, 800c908 <__pow5mult+0x48>
 800c8e8:	2010      	movs	r0, #16
 800c8ea:	f7fe f82f 	bl	800a94c <malloc>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	61f0      	str	r0, [r6, #28]
 800c8f2:	b928      	cbnz	r0, 800c900 <__pow5mult+0x40>
 800c8f4:	4b1d      	ldr	r3, [pc, #116]	; (800c96c <__pow5mult+0xac>)
 800c8f6:	481e      	ldr	r0, [pc, #120]	; (800c970 <__pow5mult+0xb0>)
 800c8f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c8fc:	f000 fbc6 	bl	800d08c <__assert_func>
 800c900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c904:	6004      	str	r4, [r0, #0]
 800c906:	60c4      	str	r4, [r0, #12]
 800c908:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c90c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c910:	b94c      	cbnz	r4, 800c926 <__pow5mult+0x66>
 800c912:	f240 2171 	movw	r1, #625	; 0x271
 800c916:	4630      	mov	r0, r6
 800c918:	f7ff ff12 	bl	800c740 <__i2b>
 800c91c:	2300      	movs	r3, #0
 800c91e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c922:	4604      	mov	r4, r0
 800c924:	6003      	str	r3, [r0, #0]
 800c926:	f04f 0900 	mov.w	r9, #0
 800c92a:	07eb      	lsls	r3, r5, #31
 800c92c:	d50a      	bpl.n	800c944 <__pow5mult+0x84>
 800c92e:	4639      	mov	r1, r7
 800c930:	4622      	mov	r2, r4
 800c932:	4630      	mov	r0, r6
 800c934:	f7ff ff1a 	bl	800c76c <__multiply>
 800c938:	4639      	mov	r1, r7
 800c93a:	4680      	mov	r8, r0
 800c93c:	4630      	mov	r0, r6
 800c93e:	f7ff fe49 	bl	800c5d4 <_Bfree>
 800c942:	4647      	mov	r7, r8
 800c944:	106d      	asrs	r5, r5, #1
 800c946:	d00b      	beq.n	800c960 <__pow5mult+0xa0>
 800c948:	6820      	ldr	r0, [r4, #0]
 800c94a:	b938      	cbnz	r0, 800c95c <__pow5mult+0x9c>
 800c94c:	4622      	mov	r2, r4
 800c94e:	4621      	mov	r1, r4
 800c950:	4630      	mov	r0, r6
 800c952:	f7ff ff0b 	bl	800c76c <__multiply>
 800c956:	6020      	str	r0, [r4, #0]
 800c958:	f8c0 9000 	str.w	r9, [r0]
 800c95c:	4604      	mov	r4, r0
 800c95e:	e7e4      	b.n	800c92a <__pow5mult+0x6a>
 800c960:	4638      	mov	r0, r7
 800c962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c966:	bf00      	nop
 800c968:	0800e3f8 	.word	0x0800e3f8
 800c96c:	0800e22d 	.word	0x0800e22d
 800c970:	0800e2ad 	.word	0x0800e2ad

0800c974 <__lshift>:
 800c974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c978:	460c      	mov	r4, r1
 800c97a:	6849      	ldr	r1, [r1, #4]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c982:	68a3      	ldr	r3, [r4, #8]
 800c984:	4607      	mov	r7, r0
 800c986:	4691      	mov	r9, r2
 800c988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c98c:	f108 0601 	add.w	r6, r8, #1
 800c990:	42b3      	cmp	r3, r6
 800c992:	db0b      	blt.n	800c9ac <__lshift+0x38>
 800c994:	4638      	mov	r0, r7
 800c996:	f7ff fddd 	bl	800c554 <_Balloc>
 800c99a:	4605      	mov	r5, r0
 800c99c:	b948      	cbnz	r0, 800c9b2 <__lshift+0x3e>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	4b28      	ldr	r3, [pc, #160]	; (800ca44 <__lshift+0xd0>)
 800c9a2:	4829      	ldr	r0, [pc, #164]	; (800ca48 <__lshift+0xd4>)
 800c9a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c9a8:	f000 fb70 	bl	800d08c <__assert_func>
 800c9ac:	3101      	adds	r1, #1
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	e7ee      	b.n	800c990 <__lshift+0x1c>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f100 0114 	add.w	r1, r0, #20
 800c9b8:	f100 0210 	add.w	r2, r0, #16
 800c9bc:	4618      	mov	r0, r3
 800c9be:	4553      	cmp	r3, sl
 800c9c0:	db33      	blt.n	800ca2a <__lshift+0xb6>
 800c9c2:	6920      	ldr	r0, [r4, #16]
 800c9c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9c8:	f104 0314 	add.w	r3, r4, #20
 800c9cc:	f019 091f 	ands.w	r9, r9, #31
 800c9d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9d8:	d02b      	beq.n	800ca32 <__lshift+0xbe>
 800c9da:	f1c9 0e20 	rsb	lr, r9, #32
 800c9de:	468a      	mov	sl, r1
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	fa00 f009 	lsl.w	r0, r0, r9
 800c9e8:	4310      	orrs	r0, r2
 800c9ea:	f84a 0b04 	str.w	r0, [sl], #4
 800c9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9f2:	459c      	cmp	ip, r3
 800c9f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9f8:	d8f3      	bhi.n	800c9e2 <__lshift+0x6e>
 800c9fa:	ebac 0304 	sub.w	r3, ip, r4
 800c9fe:	3b15      	subs	r3, #21
 800ca00:	f023 0303 	bic.w	r3, r3, #3
 800ca04:	3304      	adds	r3, #4
 800ca06:	f104 0015 	add.w	r0, r4, #21
 800ca0a:	4584      	cmp	ip, r0
 800ca0c:	bf38      	it	cc
 800ca0e:	2304      	movcc	r3, #4
 800ca10:	50ca      	str	r2, [r1, r3]
 800ca12:	b10a      	cbz	r2, 800ca18 <__lshift+0xa4>
 800ca14:	f108 0602 	add.w	r6, r8, #2
 800ca18:	3e01      	subs	r6, #1
 800ca1a:	4638      	mov	r0, r7
 800ca1c:	612e      	str	r6, [r5, #16]
 800ca1e:	4621      	mov	r1, r4
 800ca20:	f7ff fdd8 	bl	800c5d4 <_Bfree>
 800ca24:	4628      	mov	r0, r5
 800ca26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca2e:	3301      	adds	r3, #1
 800ca30:	e7c5      	b.n	800c9be <__lshift+0x4a>
 800ca32:	3904      	subs	r1, #4
 800ca34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca38:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca3c:	459c      	cmp	ip, r3
 800ca3e:	d8f9      	bhi.n	800ca34 <__lshift+0xc0>
 800ca40:	e7ea      	b.n	800ca18 <__lshift+0xa4>
 800ca42:	bf00      	nop
 800ca44:	0800e29c 	.word	0x0800e29c
 800ca48:	0800e2ad 	.word	0x0800e2ad

0800ca4c <__mcmp>:
 800ca4c:	b530      	push	{r4, r5, lr}
 800ca4e:	6902      	ldr	r2, [r0, #16]
 800ca50:	690c      	ldr	r4, [r1, #16]
 800ca52:	1b12      	subs	r2, r2, r4
 800ca54:	d10e      	bne.n	800ca74 <__mcmp+0x28>
 800ca56:	f100 0314 	add.w	r3, r0, #20
 800ca5a:	3114      	adds	r1, #20
 800ca5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca6c:	42a5      	cmp	r5, r4
 800ca6e:	d003      	beq.n	800ca78 <__mcmp+0x2c>
 800ca70:	d305      	bcc.n	800ca7e <__mcmp+0x32>
 800ca72:	2201      	movs	r2, #1
 800ca74:	4610      	mov	r0, r2
 800ca76:	bd30      	pop	{r4, r5, pc}
 800ca78:	4283      	cmp	r3, r0
 800ca7a:	d3f3      	bcc.n	800ca64 <__mcmp+0x18>
 800ca7c:	e7fa      	b.n	800ca74 <__mcmp+0x28>
 800ca7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca82:	e7f7      	b.n	800ca74 <__mcmp+0x28>

0800ca84 <__mdiff>:
 800ca84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca88:	460c      	mov	r4, r1
 800ca8a:	4606      	mov	r6, r0
 800ca8c:	4611      	mov	r1, r2
 800ca8e:	4620      	mov	r0, r4
 800ca90:	4690      	mov	r8, r2
 800ca92:	f7ff ffdb 	bl	800ca4c <__mcmp>
 800ca96:	1e05      	subs	r5, r0, #0
 800ca98:	d110      	bne.n	800cabc <__mdiff+0x38>
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	f7ff fd59 	bl	800c554 <_Balloc>
 800caa2:	b930      	cbnz	r0, 800cab2 <__mdiff+0x2e>
 800caa4:	4b3a      	ldr	r3, [pc, #232]	; (800cb90 <__mdiff+0x10c>)
 800caa6:	4602      	mov	r2, r0
 800caa8:	f240 2137 	movw	r1, #567	; 0x237
 800caac:	4839      	ldr	r0, [pc, #228]	; (800cb94 <__mdiff+0x110>)
 800caae:	f000 faed 	bl	800d08c <__assert_func>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabc:	bfa4      	itt	ge
 800cabe:	4643      	movge	r3, r8
 800cac0:	46a0      	movge	r8, r4
 800cac2:	4630      	mov	r0, r6
 800cac4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cac8:	bfa6      	itte	ge
 800caca:	461c      	movge	r4, r3
 800cacc:	2500      	movge	r5, #0
 800cace:	2501      	movlt	r5, #1
 800cad0:	f7ff fd40 	bl	800c554 <_Balloc>
 800cad4:	b920      	cbnz	r0, 800cae0 <__mdiff+0x5c>
 800cad6:	4b2e      	ldr	r3, [pc, #184]	; (800cb90 <__mdiff+0x10c>)
 800cad8:	4602      	mov	r2, r0
 800cada:	f240 2145 	movw	r1, #581	; 0x245
 800cade:	e7e5      	b.n	800caac <__mdiff+0x28>
 800cae0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cae4:	6926      	ldr	r6, [r4, #16]
 800cae6:	60c5      	str	r5, [r0, #12]
 800cae8:	f104 0914 	add.w	r9, r4, #20
 800caec:	f108 0514 	add.w	r5, r8, #20
 800caf0:	f100 0e14 	add.w	lr, r0, #20
 800caf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800caf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cafc:	f108 0210 	add.w	r2, r8, #16
 800cb00:	46f2      	mov	sl, lr
 800cb02:	2100      	movs	r1, #0
 800cb04:	f859 3b04 	ldr.w	r3, [r9], #4
 800cb08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cb0c:	fa11 f88b 	uxtah	r8, r1, fp
 800cb10:	b299      	uxth	r1, r3
 800cb12:	0c1b      	lsrs	r3, r3, #16
 800cb14:	eba8 0801 	sub.w	r8, r8, r1
 800cb18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb20:	fa1f f888 	uxth.w	r8, r8
 800cb24:	1419      	asrs	r1, r3, #16
 800cb26:	454e      	cmp	r6, r9
 800cb28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb2c:	f84a 3b04 	str.w	r3, [sl], #4
 800cb30:	d8e8      	bhi.n	800cb04 <__mdiff+0x80>
 800cb32:	1b33      	subs	r3, r6, r4
 800cb34:	3b15      	subs	r3, #21
 800cb36:	f023 0303 	bic.w	r3, r3, #3
 800cb3a:	3304      	adds	r3, #4
 800cb3c:	3415      	adds	r4, #21
 800cb3e:	42a6      	cmp	r6, r4
 800cb40:	bf38      	it	cc
 800cb42:	2304      	movcc	r3, #4
 800cb44:	441d      	add	r5, r3
 800cb46:	4473      	add	r3, lr
 800cb48:	469e      	mov	lr, r3
 800cb4a:	462e      	mov	r6, r5
 800cb4c:	4566      	cmp	r6, ip
 800cb4e:	d30e      	bcc.n	800cb6e <__mdiff+0xea>
 800cb50:	f10c 0203 	add.w	r2, ip, #3
 800cb54:	1b52      	subs	r2, r2, r5
 800cb56:	f022 0203 	bic.w	r2, r2, #3
 800cb5a:	3d03      	subs	r5, #3
 800cb5c:	45ac      	cmp	ip, r5
 800cb5e:	bf38      	it	cc
 800cb60:	2200      	movcc	r2, #0
 800cb62:	4413      	add	r3, r2
 800cb64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb68:	b17a      	cbz	r2, 800cb8a <__mdiff+0x106>
 800cb6a:	6107      	str	r7, [r0, #16]
 800cb6c:	e7a4      	b.n	800cab8 <__mdiff+0x34>
 800cb6e:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb72:	fa11 f288 	uxtah	r2, r1, r8
 800cb76:	1414      	asrs	r4, r2, #16
 800cb78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb7c:	b292      	uxth	r2, r2
 800cb7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb82:	f84e 2b04 	str.w	r2, [lr], #4
 800cb86:	1421      	asrs	r1, r4, #16
 800cb88:	e7e0      	b.n	800cb4c <__mdiff+0xc8>
 800cb8a:	3f01      	subs	r7, #1
 800cb8c:	e7ea      	b.n	800cb64 <__mdiff+0xe0>
 800cb8e:	bf00      	nop
 800cb90:	0800e29c 	.word	0x0800e29c
 800cb94:	0800e2ad 	.word	0x0800e2ad

0800cb98 <__d2b>:
 800cb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb9c:	460f      	mov	r7, r1
 800cb9e:	2101      	movs	r1, #1
 800cba0:	ec59 8b10 	vmov	r8, r9, d0
 800cba4:	4616      	mov	r6, r2
 800cba6:	f7ff fcd5 	bl	800c554 <_Balloc>
 800cbaa:	4604      	mov	r4, r0
 800cbac:	b930      	cbnz	r0, 800cbbc <__d2b+0x24>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	4b24      	ldr	r3, [pc, #144]	; (800cc44 <__d2b+0xac>)
 800cbb2:	4825      	ldr	r0, [pc, #148]	; (800cc48 <__d2b+0xb0>)
 800cbb4:	f240 310f 	movw	r1, #783	; 0x30f
 800cbb8:	f000 fa68 	bl	800d08c <__assert_func>
 800cbbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cbc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cbc4:	bb2d      	cbnz	r5, 800cc12 <__d2b+0x7a>
 800cbc6:	9301      	str	r3, [sp, #4]
 800cbc8:	f1b8 0300 	subs.w	r3, r8, #0
 800cbcc:	d026      	beq.n	800cc1c <__d2b+0x84>
 800cbce:	4668      	mov	r0, sp
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	f7ff fd87 	bl	800c6e4 <__lo0bits>
 800cbd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cbda:	b1e8      	cbz	r0, 800cc18 <__d2b+0x80>
 800cbdc:	f1c0 0320 	rsb	r3, r0, #32
 800cbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe4:	430b      	orrs	r3, r1
 800cbe6:	40c2      	lsrs	r2, r0
 800cbe8:	6163      	str	r3, [r4, #20]
 800cbea:	9201      	str	r2, [sp, #4]
 800cbec:	9b01      	ldr	r3, [sp, #4]
 800cbee:	61a3      	str	r3, [r4, #24]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	bf14      	ite	ne
 800cbf4:	2202      	movne	r2, #2
 800cbf6:	2201      	moveq	r2, #1
 800cbf8:	6122      	str	r2, [r4, #16]
 800cbfa:	b1bd      	cbz	r5, 800cc2c <__d2b+0x94>
 800cbfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cc00:	4405      	add	r5, r0
 800cc02:	603d      	str	r5, [r7, #0]
 800cc04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cc08:	6030      	str	r0, [r6, #0]
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	b003      	add	sp, #12
 800cc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc16:	e7d6      	b.n	800cbc6 <__d2b+0x2e>
 800cc18:	6161      	str	r1, [r4, #20]
 800cc1a:	e7e7      	b.n	800cbec <__d2b+0x54>
 800cc1c:	a801      	add	r0, sp, #4
 800cc1e:	f7ff fd61 	bl	800c6e4 <__lo0bits>
 800cc22:	9b01      	ldr	r3, [sp, #4]
 800cc24:	6163      	str	r3, [r4, #20]
 800cc26:	3020      	adds	r0, #32
 800cc28:	2201      	movs	r2, #1
 800cc2a:	e7e5      	b.n	800cbf8 <__d2b+0x60>
 800cc2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc34:	6038      	str	r0, [r7, #0]
 800cc36:	6918      	ldr	r0, [r3, #16]
 800cc38:	f7ff fd34 	bl	800c6a4 <__hi0bits>
 800cc3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc40:	e7e2      	b.n	800cc08 <__d2b+0x70>
 800cc42:	bf00      	nop
 800cc44:	0800e29c 	.word	0x0800e29c
 800cc48:	0800e2ad 	.word	0x0800e2ad

0800cc4c <__ssputs_r>:
 800cc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc50:	688e      	ldr	r6, [r1, #8]
 800cc52:	461f      	mov	r7, r3
 800cc54:	42be      	cmp	r6, r7
 800cc56:	680b      	ldr	r3, [r1, #0]
 800cc58:	4682      	mov	sl, r0
 800cc5a:	460c      	mov	r4, r1
 800cc5c:	4690      	mov	r8, r2
 800cc5e:	d82c      	bhi.n	800ccba <__ssputs_r+0x6e>
 800cc60:	898a      	ldrh	r2, [r1, #12]
 800cc62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc66:	d026      	beq.n	800ccb6 <__ssputs_r+0x6a>
 800cc68:	6965      	ldr	r5, [r4, #20]
 800cc6a:	6909      	ldr	r1, [r1, #16]
 800cc6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc70:	eba3 0901 	sub.w	r9, r3, r1
 800cc74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc78:	1c7b      	adds	r3, r7, #1
 800cc7a:	444b      	add	r3, r9
 800cc7c:	106d      	asrs	r5, r5, #1
 800cc7e:	429d      	cmp	r5, r3
 800cc80:	bf38      	it	cc
 800cc82:	461d      	movcc	r5, r3
 800cc84:	0553      	lsls	r3, r2, #21
 800cc86:	d527      	bpl.n	800ccd8 <__ssputs_r+0x8c>
 800cc88:	4629      	mov	r1, r5
 800cc8a:	f7fd fe8f 	bl	800a9ac <_malloc_r>
 800cc8e:	4606      	mov	r6, r0
 800cc90:	b360      	cbz	r0, 800ccec <__ssputs_r+0xa0>
 800cc92:	6921      	ldr	r1, [r4, #16]
 800cc94:	464a      	mov	r2, r9
 800cc96:	f7fe fd88 	bl	800b7aa <memcpy>
 800cc9a:	89a3      	ldrh	r3, [r4, #12]
 800cc9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cca4:	81a3      	strh	r3, [r4, #12]
 800cca6:	6126      	str	r6, [r4, #16]
 800cca8:	6165      	str	r5, [r4, #20]
 800ccaa:	444e      	add	r6, r9
 800ccac:	eba5 0509 	sub.w	r5, r5, r9
 800ccb0:	6026      	str	r6, [r4, #0]
 800ccb2:	60a5      	str	r5, [r4, #8]
 800ccb4:	463e      	mov	r6, r7
 800ccb6:	42be      	cmp	r6, r7
 800ccb8:	d900      	bls.n	800ccbc <__ssputs_r+0x70>
 800ccba:	463e      	mov	r6, r7
 800ccbc:	6820      	ldr	r0, [r4, #0]
 800ccbe:	4632      	mov	r2, r6
 800ccc0:	4641      	mov	r1, r8
 800ccc2:	f000 f9c9 	bl	800d058 <memmove>
 800ccc6:	68a3      	ldr	r3, [r4, #8]
 800ccc8:	1b9b      	subs	r3, r3, r6
 800ccca:	60a3      	str	r3, [r4, #8]
 800cccc:	6823      	ldr	r3, [r4, #0]
 800ccce:	4433      	add	r3, r6
 800ccd0:	6023      	str	r3, [r4, #0]
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccd8:	462a      	mov	r2, r5
 800ccda:	f000 fa1d 	bl	800d118 <_realloc_r>
 800ccde:	4606      	mov	r6, r0
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d1e0      	bne.n	800cca6 <__ssputs_r+0x5a>
 800cce4:	6921      	ldr	r1, [r4, #16]
 800cce6:	4650      	mov	r0, sl
 800cce8:	f7ff fbe8 	bl	800c4bc <_free_r>
 800ccec:	230c      	movs	r3, #12
 800ccee:	f8ca 3000 	str.w	r3, [sl]
 800ccf2:	89a3      	ldrh	r3, [r4, #12]
 800ccf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf8:	81a3      	strh	r3, [r4, #12]
 800ccfa:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfe:	e7e9      	b.n	800ccd4 <__ssputs_r+0x88>

0800cd00 <_svfiprintf_r>:
 800cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd04:	4698      	mov	r8, r3
 800cd06:	898b      	ldrh	r3, [r1, #12]
 800cd08:	061b      	lsls	r3, r3, #24
 800cd0a:	b09d      	sub	sp, #116	; 0x74
 800cd0c:	4607      	mov	r7, r0
 800cd0e:	460d      	mov	r5, r1
 800cd10:	4614      	mov	r4, r2
 800cd12:	d50e      	bpl.n	800cd32 <_svfiprintf_r+0x32>
 800cd14:	690b      	ldr	r3, [r1, #16]
 800cd16:	b963      	cbnz	r3, 800cd32 <_svfiprintf_r+0x32>
 800cd18:	2140      	movs	r1, #64	; 0x40
 800cd1a:	f7fd fe47 	bl	800a9ac <_malloc_r>
 800cd1e:	6028      	str	r0, [r5, #0]
 800cd20:	6128      	str	r0, [r5, #16]
 800cd22:	b920      	cbnz	r0, 800cd2e <_svfiprintf_r+0x2e>
 800cd24:	230c      	movs	r3, #12
 800cd26:	603b      	str	r3, [r7, #0]
 800cd28:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2c:	e0d0      	b.n	800ced0 <_svfiprintf_r+0x1d0>
 800cd2e:	2340      	movs	r3, #64	; 0x40
 800cd30:	616b      	str	r3, [r5, #20]
 800cd32:	2300      	movs	r3, #0
 800cd34:	9309      	str	r3, [sp, #36]	; 0x24
 800cd36:	2320      	movs	r3, #32
 800cd38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd40:	2330      	movs	r3, #48	; 0x30
 800cd42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cee8 <_svfiprintf_r+0x1e8>
 800cd46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd4a:	f04f 0901 	mov.w	r9, #1
 800cd4e:	4623      	mov	r3, r4
 800cd50:	469a      	mov	sl, r3
 800cd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd56:	b10a      	cbz	r2, 800cd5c <_svfiprintf_r+0x5c>
 800cd58:	2a25      	cmp	r2, #37	; 0x25
 800cd5a:	d1f9      	bne.n	800cd50 <_svfiprintf_r+0x50>
 800cd5c:	ebba 0b04 	subs.w	fp, sl, r4
 800cd60:	d00b      	beq.n	800cd7a <_svfiprintf_r+0x7a>
 800cd62:	465b      	mov	r3, fp
 800cd64:	4622      	mov	r2, r4
 800cd66:	4629      	mov	r1, r5
 800cd68:	4638      	mov	r0, r7
 800cd6a:	f7ff ff6f 	bl	800cc4c <__ssputs_r>
 800cd6e:	3001      	adds	r0, #1
 800cd70:	f000 80a9 	beq.w	800cec6 <_svfiprintf_r+0x1c6>
 800cd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd76:	445a      	add	r2, fp
 800cd78:	9209      	str	r2, [sp, #36]	; 0x24
 800cd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f000 80a1 	beq.w	800cec6 <_svfiprintf_r+0x1c6>
 800cd84:	2300      	movs	r3, #0
 800cd86:	f04f 32ff 	mov.w	r2, #4294967295
 800cd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd8e:	f10a 0a01 	add.w	sl, sl, #1
 800cd92:	9304      	str	r3, [sp, #16]
 800cd94:	9307      	str	r3, [sp, #28]
 800cd96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd9a:	931a      	str	r3, [sp, #104]	; 0x68
 800cd9c:	4654      	mov	r4, sl
 800cd9e:	2205      	movs	r2, #5
 800cda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda4:	4850      	ldr	r0, [pc, #320]	; (800cee8 <_svfiprintf_r+0x1e8>)
 800cda6:	f7f3 fa1b 	bl	80001e0 <memchr>
 800cdaa:	9a04      	ldr	r2, [sp, #16]
 800cdac:	b9d8      	cbnz	r0, 800cde6 <_svfiprintf_r+0xe6>
 800cdae:	06d0      	lsls	r0, r2, #27
 800cdb0:	bf44      	itt	mi
 800cdb2:	2320      	movmi	r3, #32
 800cdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb8:	0711      	lsls	r1, r2, #28
 800cdba:	bf44      	itt	mi
 800cdbc:	232b      	movmi	r3, #43	; 0x2b
 800cdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdc2:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc6:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc8:	d015      	beq.n	800cdf6 <_svfiprintf_r+0xf6>
 800cdca:	9a07      	ldr	r2, [sp, #28]
 800cdcc:	4654      	mov	r4, sl
 800cdce:	2000      	movs	r0, #0
 800cdd0:	f04f 0c0a 	mov.w	ip, #10
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdda:	3b30      	subs	r3, #48	; 0x30
 800cddc:	2b09      	cmp	r3, #9
 800cdde:	d94d      	bls.n	800ce7c <_svfiprintf_r+0x17c>
 800cde0:	b1b0      	cbz	r0, 800ce10 <_svfiprintf_r+0x110>
 800cde2:	9207      	str	r2, [sp, #28]
 800cde4:	e014      	b.n	800ce10 <_svfiprintf_r+0x110>
 800cde6:	eba0 0308 	sub.w	r3, r0, r8
 800cdea:	fa09 f303 	lsl.w	r3, r9, r3
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	9304      	str	r3, [sp, #16]
 800cdf2:	46a2      	mov	sl, r4
 800cdf4:	e7d2      	b.n	800cd9c <_svfiprintf_r+0x9c>
 800cdf6:	9b03      	ldr	r3, [sp, #12]
 800cdf8:	1d19      	adds	r1, r3, #4
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	9103      	str	r1, [sp, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	bfbb      	ittet	lt
 800ce02:	425b      	neglt	r3, r3
 800ce04:	f042 0202 	orrlt.w	r2, r2, #2
 800ce08:	9307      	strge	r3, [sp, #28]
 800ce0a:	9307      	strlt	r3, [sp, #28]
 800ce0c:	bfb8      	it	lt
 800ce0e:	9204      	strlt	r2, [sp, #16]
 800ce10:	7823      	ldrb	r3, [r4, #0]
 800ce12:	2b2e      	cmp	r3, #46	; 0x2e
 800ce14:	d10c      	bne.n	800ce30 <_svfiprintf_r+0x130>
 800ce16:	7863      	ldrb	r3, [r4, #1]
 800ce18:	2b2a      	cmp	r3, #42	; 0x2a
 800ce1a:	d134      	bne.n	800ce86 <_svfiprintf_r+0x186>
 800ce1c:	9b03      	ldr	r3, [sp, #12]
 800ce1e:	1d1a      	adds	r2, r3, #4
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	9203      	str	r2, [sp, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	bfb8      	it	lt
 800ce28:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce2c:	3402      	adds	r4, #2
 800ce2e:	9305      	str	r3, [sp, #20]
 800ce30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cef8 <_svfiprintf_r+0x1f8>
 800ce34:	7821      	ldrb	r1, [r4, #0]
 800ce36:	2203      	movs	r2, #3
 800ce38:	4650      	mov	r0, sl
 800ce3a:	f7f3 f9d1 	bl	80001e0 <memchr>
 800ce3e:	b138      	cbz	r0, 800ce50 <_svfiprintf_r+0x150>
 800ce40:	9b04      	ldr	r3, [sp, #16]
 800ce42:	eba0 000a 	sub.w	r0, r0, sl
 800ce46:	2240      	movs	r2, #64	; 0x40
 800ce48:	4082      	lsls	r2, r0
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	3401      	adds	r4, #1
 800ce4e:	9304      	str	r3, [sp, #16]
 800ce50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce54:	4825      	ldr	r0, [pc, #148]	; (800ceec <_svfiprintf_r+0x1ec>)
 800ce56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce5a:	2206      	movs	r2, #6
 800ce5c:	f7f3 f9c0 	bl	80001e0 <memchr>
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d038      	beq.n	800ced6 <_svfiprintf_r+0x1d6>
 800ce64:	4b22      	ldr	r3, [pc, #136]	; (800cef0 <_svfiprintf_r+0x1f0>)
 800ce66:	bb1b      	cbnz	r3, 800ceb0 <_svfiprintf_r+0x1b0>
 800ce68:	9b03      	ldr	r3, [sp, #12]
 800ce6a:	3307      	adds	r3, #7
 800ce6c:	f023 0307 	bic.w	r3, r3, #7
 800ce70:	3308      	adds	r3, #8
 800ce72:	9303      	str	r3, [sp, #12]
 800ce74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce76:	4433      	add	r3, r6
 800ce78:	9309      	str	r3, [sp, #36]	; 0x24
 800ce7a:	e768      	b.n	800cd4e <_svfiprintf_r+0x4e>
 800ce7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce80:	460c      	mov	r4, r1
 800ce82:	2001      	movs	r0, #1
 800ce84:	e7a6      	b.n	800cdd4 <_svfiprintf_r+0xd4>
 800ce86:	2300      	movs	r3, #0
 800ce88:	3401      	adds	r4, #1
 800ce8a:	9305      	str	r3, [sp, #20]
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	f04f 0c0a 	mov.w	ip, #10
 800ce92:	4620      	mov	r0, r4
 800ce94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce98:	3a30      	subs	r2, #48	; 0x30
 800ce9a:	2a09      	cmp	r2, #9
 800ce9c:	d903      	bls.n	800cea6 <_svfiprintf_r+0x1a6>
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d0c6      	beq.n	800ce30 <_svfiprintf_r+0x130>
 800cea2:	9105      	str	r1, [sp, #20]
 800cea4:	e7c4      	b.n	800ce30 <_svfiprintf_r+0x130>
 800cea6:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceaa:	4604      	mov	r4, r0
 800ceac:	2301      	movs	r3, #1
 800ceae:	e7f0      	b.n	800ce92 <_svfiprintf_r+0x192>
 800ceb0:	ab03      	add	r3, sp, #12
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	462a      	mov	r2, r5
 800ceb6:	4b0f      	ldr	r3, [pc, #60]	; (800cef4 <_svfiprintf_r+0x1f4>)
 800ceb8:	a904      	add	r1, sp, #16
 800ceba:	4638      	mov	r0, r7
 800cebc:	f7fd fea2 	bl	800ac04 <_printf_float>
 800cec0:	1c42      	adds	r2, r0, #1
 800cec2:	4606      	mov	r6, r0
 800cec4:	d1d6      	bne.n	800ce74 <_svfiprintf_r+0x174>
 800cec6:	89ab      	ldrh	r3, [r5, #12]
 800cec8:	065b      	lsls	r3, r3, #25
 800ceca:	f53f af2d 	bmi.w	800cd28 <_svfiprintf_r+0x28>
 800cece:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ced0:	b01d      	add	sp, #116	; 0x74
 800ced2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced6:	ab03      	add	r3, sp, #12
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	462a      	mov	r2, r5
 800cedc:	4b05      	ldr	r3, [pc, #20]	; (800cef4 <_svfiprintf_r+0x1f4>)
 800cede:	a904      	add	r1, sp, #16
 800cee0:	4638      	mov	r0, r7
 800cee2:	f7fe f933 	bl	800b14c <_printf_i>
 800cee6:	e7eb      	b.n	800cec0 <_svfiprintf_r+0x1c0>
 800cee8:	0800e404 	.word	0x0800e404
 800ceec:	0800e40e 	.word	0x0800e40e
 800cef0:	0800ac05 	.word	0x0800ac05
 800cef4:	0800cc4d 	.word	0x0800cc4d
 800cef8:	0800e40a 	.word	0x0800e40a

0800cefc <__sflush_r>:
 800cefc:	898a      	ldrh	r2, [r1, #12]
 800cefe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf02:	4605      	mov	r5, r0
 800cf04:	0710      	lsls	r0, r2, #28
 800cf06:	460c      	mov	r4, r1
 800cf08:	d458      	bmi.n	800cfbc <__sflush_r+0xc0>
 800cf0a:	684b      	ldr	r3, [r1, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dc05      	bgt.n	800cf1c <__sflush_r+0x20>
 800cf10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dc02      	bgt.n	800cf1c <__sflush_r+0x20>
 800cf16:	2000      	movs	r0, #0
 800cf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf1e:	2e00      	cmp	r6, #0
 800cf20:	d0f9      	beq.n	800cf16 <__sflush_r+0x1a>
 800cf22:	2300      	movs	r3, #0
 800cf24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf28:	682f      	ldr	r7, [r5, #0]
 800cf2a:	6a21      	ldr	r1, [r4, #32]
 800cf2c:	602b      	str	r3, [r5, #0]
 800cf2e:	d032      	beq.n	800cf96 <__sflush_r+0x9a>
 800cf30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf32:	89a3      	ldrh	r3, [r4, #12]
 800cf34:	075a      	lsls	r2, r3, #29
 800cf36:	d505      	bpl.n	800cf44 <__sflush_r+0x48>
 800cf38:	6863      	ldr	r3, [r4, #4]
 800cf3a:	1ac0      	subs	r0, r0, r3
 800cf3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf3e:	b10b      	cbz	r3, 800cf44 <__sflush_r+0x48>
 800cf40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf42:	1ac0      	subs	r0, r0, r3
 800cf44:	2300      	movs	r3, #0
 800cf46:	4602      	mov	r2, r0
 800cf48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf4a:	6a21      	ldr	r1, [r4, #32]
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	47b0      	blx	r6
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	d106      	bne.n	800cf64 <__sflush_r+0x68>
 800cf56:	6829      	ldr	r1, [r5, #0]
 800cf58:	291d      	cmp	r1, #29
 800cf5a:	d82b      	bhi.n	800cfb4 <__sflush_r+0xb8>
 800cf5c:	4a29      	ldr	r2, [pc, #164]	; (800d004 <__sflush_r+0x108>)
 800cf5e:	410a      	asrs	r2, r1
 800cf60:	07d6      	lsls	r6, r2, #31
 800cf62:	d427      	bmi.n	800cfb4 <__sflush_r+0xb8>
 800cf64:	2200      	movs	r2, #0
 800cf66:	6062      	str	r2, [r4, #4]
 800cf68:	04d9      	lsls	r1, r3, #19
 800cf6a:	6922      	ldr	r2, [r4, #16]
 800cf6c:	6022      	str	r2, [r4, #0]
 800cf6e:	d504      	bpl.n	800cf7a <__sflush_r+0x7e>
 800cf70:	1c42      	adds	r2, r0, #1
 800cf72:	d101      	bne.n	800cf78 <__sflush_r+0x7c>
 800cf74:	682b      	ldr	r3, [r5, #0]
 800cf76:	b903      	cbnz	r3, 800cf7a <__sflush_r+0x7e>
 800cf78:	6560      	str	r0, [r4, #84]	; 0x54
 800cf7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf7c:	602f      	str	r7, [r5, #0]
 800cf7e:	2900      	cmp	r1, #0
 800cf80:	d0c9      	beq.n	800cf16 <__sflush_r+0x1a>
 800cf82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf86:	4299      	cmp	r1, r3
 800cf88:	d002      	beq.n	800cf90 <__sflush_r+0x94>
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	f7ff fa96 	bl	800c4bc <_free_r>
 800cf90:	2000      	movs	r0, #0
 800cf92:	6360      	str	r0, [r4, #52]	; 0x34
 800cf94:	e7c0      	b.n	800cf18 <__sflush_r+0x1c>
 800cf96:	2301      	movs	r3, #1
 800cf98:	4628      	mov	r0, r5
 800cf9a:	47b0      	blx	r6
 800cf9c:	1c41      	adds	r1, r0, #1
 800cf9e:	d1c8      	bne.n	800cf32 <__sflush_r+0x36>
 800cfa0:	682b      	ldr	r3, [r5, #0]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d0c5      	beq.n	800cf32 <__sflush_r+0x36>
 800cfa6:	2b1d      	cmp	r3, #29
 800cfa8:	d001      	beq.n	800cfae <__sflush_r+0xb2>
 800cfaa:	2b16      	cmp	r3, #22
 800cfac:	d101      	bne.n	800cfb2 <__sflush_r+0xb6>
 800cfae:	602f      	str	r7, [r5, #0]
 800cfb0:	e7b1      	b.n	800cf16 <__sflush_r+0x1a>
 800cfb2:	89a3      	ldrh	r3, [r4, #12]
 800cfb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfb8:	81a3      	strh	r3, [r4, #12]
 800cfba:	e7ad      	b.n	800cf18 <__sflush_r+0x1c>
 800cfbc:	690f      	ldr	r7, [r1, #16]
 800cfbe:	2f00      	cmp	r7, #0
 800cfc0:	d0a9      	beq.n	800cf16 <__sflush_r+0x1a>
 800cfc2:	0793      	lsls	r3, r2, #30
 800cfc4:	680e      	ldr	r6, [r1, #0]
 800cfc6:	bf08      	it	eq
 800cfc8:	694b      	ldreq	r3, [r1, #20]
 800cfca:	600f      	str	r7, [r1, #0]
 800cfcc:	bf18      	it	ne
 800cfce:	2300      	movne	r3, #0
 800cfd0:	eba6 0807 	sub.w	r8, r6, r7
 800cfd4:	608b      	str	r3, [r1, #8]
 800cfd6:	f1b8 0f00 	cmp.w	r8, #0
 800cfda:	dd9c      	ble.n	800cf16 <__sflush_r+0x1a>
 800cfdc:	6a21      	ldr	r1, [r4, #32]
 800cfde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cfe0:	4643      	mov	r3, r8
 800cfe2:	463a      	mov	r2, r7
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	47b0      	blx	r6
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	dc06      	bgt.n	800cffa <__sflush_r+0xfe>
 800cfec:	89a3      	ldrh	r3, [r4, #12]
 800cfee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cff2:	81a3      	strh	r3, [r4, #12]
 800cff4:	f04f 30ff 	mov.w	r0, #4294967295
 800cff8:	e78e      	b.n	800cf18 <__sflush_r+0x1c>
 800cffa:	4407      	add	r7, r0
 800cffc:	eba8 0800 	sub.w	r8, r8, r0
 800d000:	e7e9      	b.n	800cfd6 <__sflush_r+0xda>
 800d002:	bf00      	nop
 800d004:	dfbffffe 	.word	0xdfbffffe

0800d008 <_fflush_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	690b      	ldr	r3, [r1, #16]
 800d00c:	4605      	mov	r5, r0
 800d00e:	460c      	mov	r4, r1
 800d010:	b913      	cbnz	r3, 800d018 <_fflush_r+0x10>
 800d012:	2500      	movs	r5, #0
 800d014:	4628      	mov	r0, r5
 800d016:	bd38      	pop	{r3, r4, r5, pc}
 800d018:	b118      	cbz	r0, 800d022 <_fflush_r+0x1a>
 800d01a:	6a03      	ldr	r3, [r0, #32]
 800d01c:	b90b      	cbnz	r3, 800d022 <_fflush_r+0x1a>
 800d01e:	f7fe fa43 	bl	800b4a8 <__sinit>
 800d022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0f3      	beq.n	800d012 <_fflush_r+0xa>
 800d02a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d02c:	07d0      	lsls	r0, r2, #31
 800d02e:	d404      	bmi.n	800d03a <_fflush_r+0x32>
 800d030:	0599      	lsls	r1, r3, #22
 800d032:	d402      	bmi.n	800d03a <_fflush_r+0x32>
 800d034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d036:	f7fe fbb6 	bl	800b7a6 <__retarget_lock_acquire_recursive>
 800d03a:	4628      	mov	r0, r5
 800d03c:	4621      	mov	r1, r4
 800d03e:	f7ff ff5d 	bl	800cefc <__sflush_r>
 800d042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d044:	07da      	lsls	r2, r3, #31
 800d046:	4605      	mov	r5, r0
 800d048:	d4e4      	bmi.n	800d014 <_fflush_r+0xc>
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	059b      	lsls	r3, r3, #22
 800d04e:	d4e1      	bmi.n	800d014 <_fflush_r+0xc>
 800d050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d052:	f7fe fba9 	bl	800b7a8 <__retarget_lock_release_recursive>
 800d056:	e7dd      	b.n	800d014 <_fflush_r+0xc>

0800d058 <memmove>:
 800d058:	4288      	cmp	r0, r1
 800d05a:	b510      	push	{r4, lr}
 800d05c:	eb01 0402 	add.w	r4, r1, r2
 800d060:	d902      	bls.n	800d068 <memmove+0x10>
 800d062:	4284      	cmp	r4, r0
 800d064:	4623      	mov	r3, r4
 800d066:	d807      	bhi.n	800d078 <memmove+0x20>
 800d068:	1e43      	subs	r3, r0, #1
 800d06a:	42a1      	cmp	r1, r4
 800d06c:	d008      	beq.n	800d080 <memmove+0x28>
 800d06e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d072:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d076:	e7f8      	b.n	800d06a <memmove+0x12>
 800d078:	4402      	add	r2, r0
 800d07a:	4601      	mov	r1, r0
 800d07c:	428a      	cmp	r2, r1
 800d07e:	d100      	bne.n	800d082 <memmove+0x2a>
 800d080:	bd10      	pop	{r4, pc}
 800d082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d08a:	e7f7      	b.n	800d07c <memmove+0x24>

0800d08c <__assert_func>:
 800d08c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d08e:	4614      	mov	r4, r2
 800d090:	461a      	mov	r2, r3
 800d092:	4b09      	ldr	r3, [pc, #36]	; (800d0b8 <__assert_func+0x2c>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4605      	mov	r5, r0
 800d098:	68d8      	ldr	r0, [r3, #12]
 800d09a:	b14c      	cbz	r4, 800d0b0 <__assert_func+0x24>
 800d09c:	4b07      	ldr	r3, [pc, #28]	; (800d0bc <__assert_func+0x30>)
 800d09e:	9100      	str	r1, [sp, #0]
 800d0a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0a4:	4906      	ldr	r1, [pc, #24]	; (800d0c0 <__assert_func+0x34>)
 800d0a6:	462b      	mov	r3, r5
 800d0a8:	f000 f872 	bl	800d190 <fiprintf>
 800d0ac:	f7fd fc46 	bl	800a93c <abort>
 800d0b0:	4b04      	ldr	r3, [pc, #16]	; (800d0c4 <__assert_func+0x38>)
 800d0b2:	461c      	mov	r4, r3
 800d0b4:	e7f3      	b.n	800d09e <__assert_func+0x12>
 800d0b6:	bf00      	nop
 800d0b8:	20000074 	.word	0x20000074
 800d0bc:	0800e41f 	.word	0x0800e41f
 800d0c0:	0800e42c 	.word	0x0800e42c
 800d0c4:	0800e45a 	.word	0x0800e45a

0800d0c8 <_calloc_r>:
 800d0c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0ca:	fba1 2402 	umull	r2, r4, r1, r2
 800d0ce:	b94c      	cbnz	r4, 800d0e4 <_calloc_r+0x1c>
 800d0d0:	4611      	mov	r1, r2
 800d0d2:	9201      	str	r2, [sp, #4]
 800d0d4:	f7fd fc6a 	bl	800a9ac <_malloc_r>
 800d0d8:	9a01      	ldr	r2, [sp, #4]
 800d0da:	4605      	mov	r5, r0
 800d0dc:	b930      	cbnz	r0, 800d0ec <_calloc_r+0x24>
 800d0de:	4628      	mov	r0, r5
 800d0e0:	b003      	add	sp, #12
 800d0e2:	bd30      	pop	{r4, r5, pc}
 800d0e4:	220c      	movs	r2, #12
 800d0e6:	6002      	str	r2, [r0, #0]
 800d0e8:	2500      	movs	r5, #0
 800d0ea:	e7f8      	b.n	800d0de <_calloc_r+0x16>
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	f7fe fa88 	bl	800b602 <memset>
 800d0f2:	e7f4      	b.n	800d0de <_calloc_r+0x16>

0800d0f4 <__ascii_mbtowc>:
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	b901      	cbnz	r1, 800d0fa <__ascii_mbtowc+0x6>
 800d0f8:	a901      	add	r1, sp, #4
 800d0fa:	b142      	cbz	r2, 800d10e <__ascii_mbtowc+0x1a>
 800d0fc:	b14b      	cbz	r3, 800d112 <__ascii_mbtowc+0x1e>
 800d0fe:	7813      	ldrb	r3, [r2, #0]
 800d100:	600b      	str	r3, [r1, #0]
 800d102:	7812      	ldrb	r2, [r2, #0]
 800d104:	1e10      	subs	r0, r2, #0
 800d106:	bf18      	it	ne
 800d108:	2001      	movne	r0, #1
 800d10a:	b002      	add	sp, #8
 800d10c:	4770      	bx	lr
 800d10e:	4610      	mov	r0, r2
 800d110:	e7fb      	b.n	800d10a <__ascii_mbtowc+0x16>
 800d112:	f06f 0001 	mvn.w	r0, #1
 800d116:	e7f8      	b.n	800d10a <__ascii_mbtowc+0x16>

0800d118 <_realloc_r>:
 800d118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d11c:	4680      	mov	r8, r0
 800d11e:	4614      	mov	r4, r2
 800d120:	460e      	mov	r6, r1
 800d122:	b921      	cbnz	r1, 800d12e <_realloc_r+0x16>
 800d124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d128:	4611      	mov	r1, r2
 800d12a:	f7fd bc3f 	b.w	800a9ac <_malloc_r>
 800d12e:	b92a      	cbnz	r2, 800d13c <_realloc_r+0x24>
 800d130:	f7ff f9c4 	bl	800c4bc <_free_r>
 800d134:	4625      	mov	r5, r4
 800d136:	4628      	mov	r0, r5
 800d138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d13c:	f000 f83a 	bl	800d1b4 <_malloc_usable_size_r>
 800d140:	4284      	cmp	r4, r0
 800d142:	4607      	mov	r7, r0
 800d144:	d802      	bhi.n	800d14c <_realloc_r+0x34>
 800d146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d14a:	d812      	bhi.n	800d172 <_realloc_r+0x5a>
 800d14c:	4621      	mov	r1, r4
 800d14e:	4640      	mov	r0, r8
 800d150:	f7fd fc2c 	bl	800a9ac <_malloc_r>
 800d154:	4605      	mov	r5, r0
 800d156:	2800      	cmp	r0, #0
 800d158:	d0ed      	beq.n	800d136 <_realloc_r+0x1e>
 800d15a:	42bc      	cmp	r4, r7
 800d15c:	4622      	mov	r2, r4
 800d15e:	4631      	mov	r1, r6
 800d160:	bf28      	it	cs
 800d162:	463a      	movcs	r2, r7
 800d164:	f7fe fb21 	bl	800b7aa <memcpy>
 800d168:	4631      	mov	r1, r6
 800d16a:	4640      	mov	r0, r8
 800d16c:	f7ff f9a6 	bl	800c4bc <_free_r>
 800d170:	e7e1      	b.n	800d136 <_realloc_r+0x1e>
 800d172:	4635      	mov	r5, r6
 800d174:	e7df      	b.n	800d136 <_realloc_r+0x1e>

0800d176 <__ascii_wctomb>:
 800d176:	b149      	cbz	r1, 800d18c <__ascii_wctomb+0x16>
 800d178:	2aff      	cmp	r2, #255	; 0xff
 800d17a:	bf85      	ittet	hi
 800d17c:	238a      	movhi	r3, #138	; 0x8a
 800d17e:	6003      	strhi	r3, [r0, #0]
 800d180:	700a      	strbls	r2, [r1, #0]
 800d182:	f04f 30ff 	movhi.w	r0, #4294967295
 800d186:	bf98      	it	ls
 800d188:	2001      	movls	r0, #1
 800d18a:	4770      	bx	lr
 800d18c:	4608      	mov	r0, r1
 800d18e:	4770      	bx	lr

0800d190 <fiprintf>:
 800d190:	b40e      	push	{r1, r2, r3}
 800d192:	b503      	push	{r0, r1, lr}
 800d194:	4601      	mov	r1, r0
 800d196:	ab03      	add	r3, sp, #12
 800d198:	4805      	ldr	r0, [pc, #20]	; (800d1b0 <fiprintf+0x20>)
 800d19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19e:	6800      	ldr	r0, [r0, #0]
 800d1a0:	9301      	str	r3, [sp, #4]
 800d1a2:	f000 f839 	bl	800d218 <_vfiprintf_r>
 800d1a6:	b002      	add	sp, #8
 800d1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1ac:	b003      	add	sp, #12
 800d1ae:	4770      	bx	lr
 800d1b0:	20000074 	.word	0x20000074

0800d1b4 <_malloc_usable_size_r>:
 800d1b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b8:	1f18      	subs	r0, r3, #4
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	bfbc      	itt	lt
 800d1be:	580b      	ldrlt	r3, [r1, r0]
 800d1c0:	18c0      	addlt	r0, r0, r3
 800d1c2:	4770      	bx	lr

0800d1c4 <__sfputc_r>:
 800d1c4:	6893      	ldr	r3, [r2, #8]
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	b410      	push	{r4}
 800d1cc:	6093      	str	r3, [r2, #8]
 800d1ce:	da08      	bge.n	800d1e2 <__sfputc_r+0x1e>
 800d1d0:	6994      	ldr	r4, [r2, #24]
 800d1d2:	42a3      	cmp	r3, r4
 800d1d4:	db01      	blt.n	800d1da <__sfputc_r+0x16>
 800d1d6:	290a      	cmp	r1, #10
 800d1d8:	d103      	bne.n	800d1e2 <__sfputc_r+0x1e>
 800d1da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1de:	f000 b935 	b.w	800d44c <__swbuf_r>
 800d1e2:	6813      	ldr	r3, [r2, #0]
 800d1e4:	1c58      	adds	r0, r3, #1
 800d1e6:	6010      	str	r0, [r2, #0]
 800d1e8:	7019      	strb	r1, [r3, #0]
 800d1ea:	4608      	mov	r0, r1
 800d1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1f0:	4770      	bx	lr

0800d1f2 <__sfputs_r>:
 800d1f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f4:	4606      	mov	r6, r0
 800d1f6:	460f      	mov	r7, r1
 800d1f8:	4614      	mov	r4, r2
 800d1fa:	18d5      	adds	r5, r2, r3
 800d1fc:	42ac      	cmp	r4, r5
 800d1fe:	d101      	bne.n	800d204 <__sfputs_r+0x12>
 800d200:	2000      	movs	r0, #0
 800d202:	e007      	b.n	800d214 <__sfputs_r+0x22>
 800d204:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d208:	463a      	mov	r2, r7
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ffda 	bl	800d1c4 <__sfputc_r>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d1f3      	bne.n	800d1fc <__sfputs_r+0xa>
 800d214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d218 <_vfiprintf_r>:
 800d218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d21c:	460d      	mov	r5, r1
 800d21e:	b09d      	sub	sp, #116	; 0x74
 800d220:	4614      	mov	r4, r2
 800d222:	4698      	mov	r8, r3
 800d224:	4606      	mov	r6, r0
 800d226:	b118      	cbz	r0, 800d230 <_vfiprintf_r+0x18>
 800d228:	6a03      	ldr	r3, [r0, #32]
 800d22a:	b90b      	cbnz	r3, 800d230 <_vfiprintf_r+0x18>
 800d22c:	f7fe f93c 	bl	800b4a8 <__sinit>
 800d230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d232:	07d9      	lsls	r1, r3, #31
 800d234:	d405      	bmi.n	800d242 <_vfiprintf_r+0x2a>
 800d236:	89ab      	ldrh	r3, [r5, #12]
 800d238:	059a      	lsls	r2, r3, #22
 800d23a:	d402      	bmi.n	800d242 <_vfiprintf_r+0x2a>
 800d23c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d23e:	f7fe fab2 	bl	800b7a6 <__retarget_lock_acquire_recursive>
 800d242:	89ab      	ldrh	r3, [r5, #12]
 800d244:	071b      	lsls	r3, r3, #28
 800d246:	d501      	bpl.n	800d24c <_vfiprintf_r+0x34>
 800d248:	692b      	ldr	r3, [r5, #16]
 800d24a:	b99b      	cbnz	r3, 800d274 <_vfiprintf_r+0x5c>
 800d24c:	4629      	mov	r1, r5
 800d24e:	4630      	mov	r0, r6
 800d250:	f000 f93a 	bl	800d4c8 <__swsetup_r>
 800d254:	b170      	cbz	r0, 800d274 <_vfiprintf_r+0x5c>
 800d256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d258:	07dc      	lsls	r4, r3, #31
 800d25a:	d504      	bpl.n	800d266 <_vfiprintf_r+0x4e>
 800d25c:	f04f 30ff 	mov.w	r0, #4294967295
 800d260:	b01d      	add	sp, #116	; 0x74
 800d262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d266:	89ab      	ldrh	r3, [r5, #12]
 800d268:	0598      	lsls	r0, r3, #22
 800d26a:	d4f7      	bmi.n	800d25c <_vfiprintf_r+0x44>
 800d26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d26e:	f7fe fa9b 	bl	800b7a8 <__retarget_lock_release_recursive>
 800d272:	e7f3      	b.n	800d25c <_vfiprintf_r+0x44>
 800d274:	2300      	movs	r3, #0
 800d276:	9309      	str	r3, [sp, #36]	; 0x24
 800d278:	2320      	movs	r3, #32
 800d27a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d27e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d282:	2330      	movs	r3, #48	; 0x30
 800d284:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d438 <_vfiprintf_r+0x220>
 800d288:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d28c:	f04f 0901 	mov.w	r9, #1
 800d290:	4623      	mov	r3, r4
 800d292:	469a      	mov	sl, r3
 800d294:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d298:	b10a      	cbz	r2, 800d29e <_vfiprintf_r+0x86>
 800d29a:	2a25      	cmp	r2, #37	; 0x25
 800d29c:	d1f9      	bne.n	800d292 <_vfiprintf_r+0x7a>
 800d29e:	ebba 0b04 	subs.w	fp, sl, r4
 800d2a2:	d00b      	beq.n	800d2bc <_vfiprintf_r+0xa4>
 800d2a4:	465b      	mov	r3, fp
 800d2a6:	4622      	mov	r2, r4
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	f7ff ffa1 	bl	800d1f2 <__sfputs_r>
 800d2b0:	3001      	adds	r0, #1
 800d2b2:	f000 80a9 	beq.w	800d408 <_vfiprintf_r+0x1f0>
 800d2b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2b8:	445a      	add	r2, fp
 800d2ba:	9209      	str	r2, [sp, #36]	; 0x24
 800d2bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 80a1 	beq.w	800d408 <_vfiprintf_r+0x1f0>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d2cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2d0:	f10a 0a01 	add.w	sl, sl, #1
 800d2d4:	9304      	str	r3, [sp, #16]
 800d2d6:	9307      	str	r3, [sp, #28]
 800d2d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2dc:	931a      	str	r3, [sp, #104]	; 0x68
 800d2de:	4654      	mov	r4, sl
 800d2e0:	2205      	movs	r2, #5
 800d2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e6:	4854      	ldr	r0, [pc, #336]	; (800d438 <_vfiprintf_r+0x220>)
 800d2e8:	f7f2 ff7a 	bl	80001e0 <memchr>
 800d2ec:	9a04      	ldr	r2, [sp, #16]
 800d2ee:	b9d8      	cbnz	r0, 800d328 <_vfiprintf_r+0x110>
 800d2f0:	06d1      	lsls	r1, r2, #27
 800d2f2:	bf44      	itt	mi
 800d2f4:	2320      	movmi	r3, #32
 800d2f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2fa:	0713      	lsls	r3, r2, #28
 800d2fc:	bf44      	itt	mi
 800d2fe:	232b      	movmi	r3, #43	; 0x2b
 800d300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d304:	f89a 3000 	ldrb.w	r3, [sl]
 800d308:	2b2a      	cmp	r3, #42	; 0x2a
 800d30a:	d015      	beq.n	800d338 <_vfiprintf_r+0x120>
 800d30c:	9a07      	ldr	r2, [sp, #28]
 800d30e:	4654      	mov	r4, sl
 800d310:	2000      	movs	r0, #0
 800d312:	f04f 0c0a 	mov.w	ip, #10
 800d316:	4621      	mov	r1, r4
 800d318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d31c:	3b30      	subs	r3, #48	; 0x30
 800d31e:	2b09      	cmp	r3, #9
 800d320:	d94d      	bls.n	800d3be <_vfiprintf_r+0x1a6>
 800d322:	b1b0      	cbz	r0, 800d352 <_vfiprintf_r+0x13a>
 800d324:	9207      	str	r2, [sp, #28]
 800d326:	e014      	b.n	800d352 <_vfiprintf_r+0x13a>
 800d328:	eba0 0308 	sub.w	r3, r0, r8
 800d32c:	fa09 f303 	lsl.w	r3, r9, r3
 800d330:	4313      	orrs	r3, r2
 800d332:	9304      	str	r3, [sp, #16]
 800d334:	46a2      	mov	sl, r4
 800d336:	e7d2      	b.n	800d2de <_vfiprintf_r+0xc6>
 800d338:	9b03      	ldr	r3, [sp, #12]
 800d33a:	1d19      	adds	r1, r3, #4
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	9103      	str	r1, [sp, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	bfbb      	ittet	lt
 800d344:	425b      	neglt	r3, r3
 800d346:	f042 0202 	orrlt.w	r2, r2, #2
 800d34a:	9307      	strge	r3, [sp, #28]
 800d34c:	9307      	strlt	r3, [sp, #28]
 800d34e:	bfb8      	it	lt
 800d350:	9204      	strlt	r2, [sp, #16]
 800d352:	7823      	ldrb	r3, [r4, #0]
 800d354:	2b2e      	cmp	r3, #46	; 0x2e
 800d356:	d10c      	bne.n	800d372 <_vfiprintf_r+0x15a>
 800d358:	7863      	ldrb	r3, [r4, #1]
 800d35a:	2b2a      	cmp	r3, #42	; 0x2a
 800d35c:	d134      	bne.n	800d3c8 <_vfiprintf_r+0x1b0>
 800d35e:	9b03      	ldr	r3, [sp, #12]
 800d360:	1d1a      	adds	r2, r3, #4
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	9203      	str	r2, [sp, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	bfb8      	it	lt
 800d36a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d36e:	3402      	adds	r4, #2
 800d370:	9305      	str	r3, [sp, #20]
 800d372:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d448 <_vfiprintf_r+0x230>
 800d376:	7821      	ldrb	r1, [r4, #0]
 800d378:	2203      	movs	r2, #3
 800d37a:	4650      	mov	r0, sl
 800d37c:	f7f2 ff30 	bl	80001e0 <memchr>
 800d380:	b138      	cbz	r0, 800d392 <_vfiprintf_r+0x17a>
 800d382:	9b04      	ldr	r3, [sp, #16]
 800d384:	eba0 000a 	sub.w	r0, r0, sl
 800d388:	2240      	movs	r2, #64	; 0x40
 800d38a:	4082      	lsls	r2, r0
 800d38c:	4313      	orrs	r3, r2
 800d38e:	3401      	adds	r4, #1
 800d390:	9304      	str	r3, [sp, #16]
 800d392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d396:	4829      	ldr	r0, [pc, #164]	; (800d43c <_vfiprintf_r+0x224>)
 800d398:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d39c:	2206      	movs	r2, #6
 800d39e:	f7f2 ff1f 	bl	80001e0 <memchr>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d03f      	beq.n	800d426 <_vfiprintf_r+0x20e>
 800d3a6:	4b26      	ldr	r3, [pc, #152]	; (800d440 <_vfiprintf_r+0x228>)
 800d3a8:	bb1b      	cbnz	r3, 800d3f2 <_vfiprintf_r+0x1da>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	3307      	adds	r3, #7
 800d3ae:	f023 0307 	bic.w	r3, r3, #7
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	9303      	str	r3, [sp, #12]
 800d3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b8:	443b      	add	r3, r7
 800d3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d3bc:	e768      	b.n	800d290 <_vfiprintf_r+0x78>
 800d3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3c2:	460c      	mov	r4, r1
 800d3c4:	2001      	movs	r0, #1
 800d3c6:	e7a6      	b.n	800d316 <_vfiprintf_r+0xfe>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	3401      	adds	r4, #1
 800d3cc:	9305      	str	r3, [sp, #20]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	f04f 0c0a 	mov.w	ip, #10
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3da:	3a30      	subs	r2, #48	; 0x30
 800d3dc:	2a09      	cmp	r2, #9
 800d3de:	d903      	bls.n	800d3e8 <_vfiprintf_r+0x1d0>
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d0c6      	beq.n	800d372 <_vfiprintf_r+0x15a>
 800d3e4:	9105      	str	r1, [sp, #20]
 800d3e6:	e7c4      	b.n	800d372 <_vfiprintf_r+0x15a>
 800d3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e7f0      	b.n	800d3d4 <_vfiprintf_r+0x1bc>
 800d3f2:	ab03      	add	r3, sp, #12
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	462a      	mov	r2, r5
 800d3f8:	4b12      	ldr	r3, [pc, #72]	; (800d444 <_vfiprintf_r+0x22c>)
 800d3fa:	a904      	add	r1, sp, #16
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f7fd fc01 	bl	800ac04 <_printf_float>
 800d402:	4607      	mov	r7, r0
 800d404:	1c78      	adds	r0, r7, #1
 800d406:	d1d6      	bne.n	800d3b6 <_vfiprintf_r+0x19e>
 800d408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d40a:	07d9      	lsls	r1, r3, #31
 800d40c:	d405      	bmi.n	800d41a <_vfiprintf_r+0x202>
 800d40e:	89ab      	ldrh	r3, [r5, #12]
 800d410:	059a      	lsls	r2, r3, #22
 800d412:	d402      	bmi.n	800d41a <_vfiprintf_r+0x202>
 800d414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d416:	f7fe f9c7 	bl	800b7a8 <__retarget_lock_release_recursive>
 800d41a:	89ab      	ldrh	r3, [r5, #12]
 800d41c:	065b      	lsls	r3, r3, #25
 800d41e:	f53f af1d 	bmi.w	800d25c <_vfiprintf_r+0x44>
 800d422:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d424:	e71c      	b.n	800d260 <_vfiprintf_r+0x48>
 800d426:	ab03      	add	r3, sp, #12
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	462a      	mov	r2, r5
 800d42c:	4b05      	ldr	r3, [pc, #20]	; (800d444 <_vfiprintf_r+0x22c>)
 800d42e:	a904      	add	r1, sp, #16
 800d430:	4630      	mov	r0, r6
 800d432:	f7fd fe8b 	bl	800b14c <_printf_i>
 800d436:	e7e4      	b.n	800d402 <_vfiprintf_r+0x1ea>
 800d438:	0800e404 	.word	0x0800e404
 800d43c:	0800e40e 	.word	0x0800e40e
 800d440:	0800ac05 	.word	0x0800ac05
 800d444:	0800d1f3 	.word	0x0800d1f3
 800d448:	0800e40a 	.word	0x0800e40a

0800d44c <__swbuf_r>:
 800d44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44e:	460e      	mov	r6, r1
 800d450:	4614      	mov	r4, r2
 800d452:	4605      	mov	r5, r0
 800d454:	b118      	cbz	r0, 800d45e <__swbuf_r+0x12>
 800d456:	6a03      	ldr	r3, [r0, #32]
 800d458:	b90b      	cbnz	r3, 800d45e <__swbuf_r+0x12>
 800d45a:	f7fe f825 	bl	800b4a8 <__sinit>
 800d45e:	69a3      	ldr	r3, [r4, #24]
 800d460:	60a3      	str	r3, [r4, #8]
 800d462:	89a3      	ldrh	r3, [r4, #12]
 800d464:	071a      	lsls	r2, r3, #28
 800d466:	d525      	bpl.n	800d4b4 <__swbuf_r+0x68>
 800d468:	6923      	ldr	r3, [r4, #16]
 800d46a:	b31b      	cbz	r3, 800d4b4 <__swbuf_r+0x68>
 800d46c:	6823      	ldr	r3, [r4, #0]
 800d46e:	6922      	ldr	r2, [r4, #16]
 800d470:	1a98      	subs	r0, r3, r2
 800d472:	6963      	ldr	r3, [r4, #20]
 800d474:	b2f6      	uxtb	r6, r6
 800d476:	4283      	cmp	r3, r0
 800d478:	4637      	mov	r7, r6
 800d47a:	dc04      	bgt.n	800d486 <__swbuf_r+0x3a>
 800d47c:	4621      	mov	r1, r4
 800d47e:	4628      	mov	r0, r5
 800d480:	f7ff fdc2 	bl	800d008 <_fflush_r>
 800d484:	b9e0      	cbnz	r0, 800d4c0 <__swbuf_r+0x74>
 800d486:	68a3      	ldr	r3, [r4, #8]
 800d488:	3b01      	subs	r3, #1
 800d48a:	60a3      	str	r3, [r4, #8]
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	1c5a      	adds	r2, r3, #1
 800d490:	6022      	str	r2, [r4, #0]
 800d492:	701e      	strb	r6, [r3, #0]
 800d494:	6962      	ldr	r2, [r4, #20]
 800d496:	1c43      	adds	r3, r0, #1
 800d498:	429a      	cmp	r2, r3
 800d49a:	d004      	beq.n	800d4a6 <__swbuf_r+0x5a>
 800d49c:	89a3      	ldrh	r3, [r4, #12]
 800d49e:	07db      	lsls	r3, r3, #31
 800d4a0:	d506      	bpl.n	800d4b0 <__swbuf_r+0x64>
 800d4a2:	2e0a      	cmp	r6, #10
 800d4a4:	d104      	bne.n	800d4b0 <__swbuf_r+0x64>
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	f7ff fdad 	bl	800d008 <_fflush_r>
 800d4ae:	b938      	cbnz	r0, 800d4c0 <__swbuf_r+0x74>
 800d4b0:	4638      	mov	r0, r7
 800d4b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f000 f806 	bl	800d4c8 <__swsetup_r>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d0d5      	beq.n	800d46c <__swbuf_r+0x20>
 800d4c0:	f04f 37ff 	mov.w	r7, #4294967295
 800d4c4:	e7f4      	b.n	800d4b0 <__swbuf_r+0x64>
	...

0800d4c8 <__swsetup_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4b2a      	ldr	r3, [pc, #168]	; (800d574 <__swsetup_r+0xac>)
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	6818      	ldr	r0, [r3, #0]
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	b118      	cbz	r0, 800d4dc <__swsetup_r+0x14>
 800d4d4:	6a03      	ldr	r3, [r0, #32]
 800d4d6:	b90b      	cbnz	r3, 800d4dc <__swsetup_r+0x14>
 800d4d8:	f7fd ffe6 	bl	800b4a8 <__sinit>
 800d4dc:	89a3      	ldrh	r3, [r4, #12]
 800d4de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4e2:	0718      	lsls	r0, r3, #28
 800d4e4:	d422      	bmi.n	800d52c <__swsetup_r+0x64>
 800d4e6:	06d9      	lsls	r1, r3, #27
 800d4e8:	d407      	bmi.n	800d4fa <__swsetup_r+0x32>
 800d4ea:	2309      	movs	r3, #9
 800d4ec:	602b      	str	r3, [r5, #0]
 800d4ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4f2:	81a3      	strh	r3, [r4, #12]
 800d4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f8:	e034      	b.n	800d564 <__swsetup_r+0x9c>
 800d4fa:	0758      	lsls	r0, r3, #29
 800d4fc:	d512      	bpl.n	800d524 <__swsetup_r+0x5c>
 800d4fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d500:	b141      	cbz	r1, 800d514 <__swsetup_r+0x4c>
 800d502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d506:	4299      	cmp	r1, r3
 800d508:	d002      	beq.n	800d510 <__swsetup_r+0x48>
 800d50a:	4628      	mov	r0, r5
 800d50c:	f7fe ffd6 	bl	800c4bc <_free_r>
 800d510:	2300      	movs	r3, #0
 800d512:	6363      	str	r3, [r4, #52]	; 0x34
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d51a:	81a3      	strh	r3, [r4, #12]
 800d51c:	2300      	movs	r3, #0
 800d51e:	6063      	str	r3, [r4, #4]
 800d520:	6923      	ldr	r3, [r4, #16]
 800d522:	6023      	str	r3, [r4, #0]
 800d524:	89a3      	ldrh	r3, [r4, #12]
 800d526:	f043 0308 	orr.w	r3, r3, #8
 800d52a:	81a3      	strh	r3, [r4, #12]
 800d52c:	6923      	ldr	r3, [r4, #16]
 800d52e:	b94b      	cbnz	r3, 800d544 <__swsetup_r+0x7c>
 800d530:	89a3      	ldrh	r3, [r4, #12]
 800d532:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d53a:	d003      	beq.n	800d544 <__swsetup_r+0x7c>
 800d53c:	4621      	mov	r1, r4
 800d53e:	4628      	mov	r0, r5
 800d540:	f000 f840 	bl	800d5c4 <__smakebuf_r>
 800d544:	89a0      	ldrh	r0, [r4, #12]
 800d546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d54a:	f010 0301 	ands.w	r3, r0, #1
 800d54e:	d00a      	beq.n	800d566 <__swsetup_r+0x9e>
 800d550:	2300      	movs	r3, #0
 800d552:	60a3      	str	r3, [r4, #8]
 800d554:	6963      	ldr	r3, [r4, #20]
 800d556:	425b      	negs	r3, r3
 800d558:	61a3      	str	r3, [r4, #24]
 800d55a:	6923      	ldr	r3, [r4, #16]
 800d55c:	b943      	cbnz	r3, 800d570 <__swsetup_r+0xa8>
 800d55e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d562:	d1c4      	bne.n	800d4ee <__swsetup_r+0x26>
 800d564:	bd38      	pop	{r3, r4, r5, pc}
 800d566:	0781      	lsls	r1, r0, #30
 800d568:	bf58      	it	pl
 800d56a:	6963      	ldrpl	r3, [r4, #20]
 800d56c:	60a3      	str	r3, [r4, #8]
 800d56e:	e7f4      	b.n	800d55a <__swsetup_r+0x92>
 800d570:	2000      	movs	r0, #0
 800d572:	e7f7      	b.n	800d564 <__swsetup_r+0x9c>
 800d574:	20000074 	.word	0x20000074

0800d578 <__swhatbuf_r>:
 800d578:	b570      	push	{r4, r5, r6, lr}
 800d57a:	460c      	mov	r4, r1
 800d57c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d580:	2900      	cmp	r1, #0
 800d582:	b096      	sub	sp, #88	; 0x58
 800d584:	4615      	mov	r5, r2
 800d586:	461e      	mov	r6, r3
 800d588:	da0d      	bge.n	800d5a6 <__swhatbuf_r+0x2e>
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d590:	f04f 0100 	mov.w	r1, #0
 800d594:	bf0c      	ite	eq
 800d596:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d59a:	2340      	movne	r3, #64	; 0x40
 800d59c:	2000      	movs	r0, #0
 800d59e:	6031      	str	r1, [r6, #0]
 800d5a0:	602b      	str	r3, [r5, #0]
 800d5a2:	b016      	add	sp, #88	; 0x58
 800d5a4:	bd70      	pop	{r4, r5, r6, pc}
 800d5a6:	466a      	mov	r2, sp
 800d5a8:	f000 f848 	bl	800d63c <_fstat_r>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	dbec      	blt.n	800d58a <__swhatbuf_r+0x12>
 800d5b0:	9901      	ldr	r1, [sp, #4]
 800d5b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d5b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d5ba:	4259      	negs	r1, r3
 800d5bc:	4159      	adcs	r1, r3
 800d5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5c2:	e7eb      	b.n	800d59c <__swhatbuf_r+0x24>

0800d5c4 <__smakebuf_r>:
 800d5c4:	898b      	ldrh	r3, [r1, #12]
 800d5c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5c8:	079d      	lsls	r5, r3, #30
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	d507      	bpl.n	800d5e0 <__smakebuf_r+0x1c>
 800d5d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	6123      	str	r3, [r4, #16]
 800d5d8:	2301      	movs	r3, #1
 800d5da:	6163      	str	r3, [r4, #20]
 800d5dc:	b002      	add	sp, #8
 800d5de:	bd70      	pop	{r4, r5, r6, pc}
 800d5e0:	ab01      	add	r3, sp, #4
 800d5e2:	466a      	mov	r2, sp
 800d5e4:	f7ff ffc8 	bl	800d578 <__swhatbuf_r>
 800d5e8:	9900      	ldr	r1, [sp, #0]
 800d5ea:	4605      	mov	r5, r0
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f7fd f9dd 	bl	800a9ac <_malloc_r>
 800d5f2:	b948      	cbnz	r0, 800d608 <__smakebuf_r+0x44>
 800d5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5f8:	059a      	lsls	r2, r3, #22
 800d5fa:	d4ef      	bmi.n	800d5dc <__smakebuf_r+0x18>
 800d5fc:	f023 0303 	bic.w	r3, r3, #3
 800d600:	f043 0302 	orr.w	r3, r3, #2
 800d604:	81a3      	strh	r3, [r4, #12]
 800d606:	e7e3      	b.n	800d5d0 <__smakebuf_r+0xc>
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	6020      	str	r0, [r4, #0]
 800d60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d610:	81a3      	strh	r3, [r4, #12]
 800d612:	9b00      	ldr	r3, [sp, #0]
 800d614:	6163      	str	r3, [r4, #20]
 800d616:	9b01      	ldr	r3, [sp, #4]
 800d618:	6120      	str	r0, [r4, #16]
 800d61a:	b15b      	cbz	r3, 800d634 <__smakebuf_r+0x70>
 800d61c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d620:	4630      	mov	r0, r6
 800d622:	f000 f81d 	bl	800d660 <_isatty_r>
 800d626:	b128      	cbz	r0, 800d634 <__smakebuf_r+0x70>
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	f023 0303 	bic.w	r3, r3, #3
 800d62e:	f043 0301 	orr.w	r3, r3, #1
 800d632:	81a3      	strh	r3, [r4, #12]
 800d634:	89a3      	ldrh	r3, [r4, #12]
 800d636:	431d      	orrs	r5, r3
 800d638:	81a5      	strh	r5, [r4, #12]
 800d63a:	e7cf      	b.n	800d5dc <__smakebuf_r+0x18>

0800d63c <_fstat_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4d07      	ldr	r5, [pc, #28]	; (800d65c <_fstat_r+0x20>)
 800d640:	2300      	movs	r3, #0
 800d642:	4604      	mov	r4, r0
 800d644:	4608      	mov	r0, r1
 800d646:	4611      	mov	r1, r2
 800d648:	602b      	str	r3, [r5, #0]
 800d64a:	f7f6 fcfe 	bl	800404a <_fstat>
 800d64e:	1c43      	adds	r3, r0, #1
 800d650:	d102      	bne.n	800d658 <_fstat_r+0x1c>
 800d652:	682b      	ldr	r3, [r5, #0]
 800d654:	b103      	cbz	r3, 800d658 <_fstat_r+0x1c>
 800d656:	6023      	str	r3, [r4, #0]
 800d658:	bd38      	pop	{r3, r4, r5, pc}
 800d65a:	bf00      	nop
 800d65c:	20000940 	.word	0x20000940

0800d660 <_isatty_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4d06      	ldr	r5, [pc, #24]	; (800d67c <_isatty_r+0x1c>)
 800d664:	2300      	movs	r3, #0
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	f7f6 fcfd 	bl	800406a <_isatty>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_isatty_r+0x1a>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_isatty_r+0x1a>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	20000940 	.word	0x20000940

0800d680 <_init>:
 800d680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d682:	bf00      	nop
 800d684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d686:	bc08      	pop	{r3}
 800d688:	469e      	mov	lr, r3
 800d68a:	4770      	bx	lr

0800d68c <_fini>:
 800d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68e:	bf00      	nop
 800d690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d692:	bc08      	pop	{r3}
 800d694:	469e      	mov	lr, r3
 800d696:	4770      	bx	lr
