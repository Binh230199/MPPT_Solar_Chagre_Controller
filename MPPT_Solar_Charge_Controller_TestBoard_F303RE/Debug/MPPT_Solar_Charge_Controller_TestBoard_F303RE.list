
MPPT_Solar_Charge_Controller_TestBoard_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006120  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080062c0  080062c0  000162c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006784  08006784  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006784  08006784  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006784  08006784  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006784  08006784  00016784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006788  08006788  00016788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800678c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000006ec  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000074c  2000074c  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b920  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000037b6  00000000  00000000  0003b9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f38  00000000  00000000  0003f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bab  00000000  00000000  000400e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002671c  00000000  00000000  00040c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017551  00000000  00000000  000673af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d647e  00000000  00000000  0007e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000045e0  00000000  00000000  00154d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000089  00000000  00000000  00159360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080062a8 	.word	0x080062a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080062a8 	.word	0x080062a8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <_ZN4blib6Logger5printEPKc>:
        private:
            static const uint16_t LOG_BUFFER_SIZE = 1024U;
            static UART_HandleTypeDef *mHuart;
            static char mBuffer[LOG_BUFFER_SIZE];

            static void print(const char *msg)
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
            {
                HAL_UART_Transmit(mHuart, (uint8_t*) const_cast<char*>(msg), strlen(msg), 1000);
 8000298:	4b08      	ldr	r3, [pc, #32]	; (80002bc <_ZN4blib6Logger5printEPKc+0x2c>)
 800029a:	681c      	ldr	r4, [r3, #0]
 800029c:	6878      	ldr	r0, [r7, #4]
 800029e:	f7ff ff9f 	bl	80001e0 <strlen>
 80002a2:	4603      	mov	r3, r0
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002aa:	6879      	ldr	r1, [r7, #4]
 80002ac:	4620      	mov	r0, r4
 80002ae:	f004 fd23 	bl	8004cf8 <HAL_UART_Transmit>
            }
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd90      	pop	{r4, r7, pc}
 80002ba:	bf00      	nop
 80002bc:	2000000c 	.word	0x2000000c

080002c0 <_ZN4blib7MonitorC1Ev>:
#include "Monitor.h"
#include "Button.h"

namespace blib
{
    Monitor::Monitor()
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 fb54 	bl	8000978 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>
 80002d0:	4a0c      	ldr	r2, [pc, #48]	; (8000304 <_ZN4blib7MonitorC1Ev+0x44>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2200      	movs	r2, #0
 80002da:	711a      	strb	r2, [r3, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	741a      	strb	r2, [r3, #16]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2200      	movs	r2, #0
 80002f2:	745a      	strb	r2, [r3, #17]
    {
//        mSettingMode = true;    // TODO: test
        showInit();
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f000 f829 	bl	800034c <_ZN4blib7Monitor8showInitEv>
    }
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4618      	mov	r0, r3
 80002fe:	3708      	adds	r7, #8
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	080066e0 	.word	0x080066e0

08000308 <_ZN4blib7MonitorD1Ev>:
    Monitor::~Monitor()
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <_ZN4blib7MonitorD1Ev+0x20>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	601a      	str	r2, [r3, #0]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fb3d 	bl	8000998 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
    {

    }
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4618      	mov	r0, r3
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	080066e0 	.word	0x080066e0

0800032c <_ZN4blib7MonitorD0Ev>:
    Monitor::~Monitor()
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    }
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f7ff ffe7 	bl	8000308 <_ZN4blib7MonitorD1Ev>
 800033a:	2114      	movs	r1, #20
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f005 fa81 	bl	8005844 <_ZdlPvj>
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4618      	mov	r0, r3
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <_ZN4blib7Monitor8showInitEv>:

    // Show when begin
    void Monitor::showInit()
    {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
        LOGI("MPPT INITIALIZED");
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <_ZN4blib7Monitor8showInitEv+0x28>)
 8000356:	221a      	movs	r2, #26
 8000358:	4907      	ldr	r1, [pc, #28]	; (8000378 <_ZN4blib7Monitor8showInitEv+0x2c>)
 800035a:	4808      	ldr	r0, [pc, #32]	; (800037c <_ZN4blib7Monitor8showInitEv+0x30>)
 800035c:	f000 fb3c 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("FIRMWARE V1.00");
 8000360:	4b04      	ldr	r3, [pc, #16]	; (8000374 <_ZN4blib7Monitor8showInitEv+0x28>)
 8000362:	221b      	movs	r2, #27
 8000364:	4904      	ldr	r1, [pc, #16]	; (8000378 <_ZN4blib7Monitor8showInitEv+0x2c>)
 8000366:	4806      	ldr	r0, [pc, #24]	; (8000380 <_ZN4blib7Monitor8showInitEv+0x34>)
 8000368:	f000 fb36 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
//        HAL_Delay(1500);
    }
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	080062c0 	.word	0x080062c0
 8000378:	080062cc 	.word	0x080062cc
 800037c:	080062d8 	.word	0x080062d8
 8000380:	080062f8 	.word	0x080062f8

08000384 <_ZN4blib7Monitor8showMenuEv>:

    // Show when button pressed
    void Monitor::showMenu()
    {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
        //TODO: need to add check is permission shown

        // Check whether in setting mode or not
        if (getSetttingMode() == true)
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	f000 f8b2 	bl	80004f6 <_ZNK4blib7Monitor15getSetttingModeEv>
 8000392:	4603      	mov	r3, r0
 8000394:	2b01      	cmp	r3, #1
 8000396:	bf0c      	ite	eq
 8000398:	2301      	moveq	r3, #1
 800039a:	2300      	movne	r3, #0
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d003      	beq.n	80003aa <_ZN4blib7Monitor8showMenuEv+0x26>
        {
            showSetting();
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f000 f808 	bl	80003b8 <_ZN4blib7Monitor11showSettingEv>
        }
        else    // Not in setting mode - Display mode
        {
            showDisplay();
        }
    }
 80003a8:	e002      	b.n	80003b0 <_ZN4blib7Monitor8showMenuEv+0x2c>
            showDisplay();
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f000 f85a 	bl	8000464 <_ZN4blib7Monitor11showDisplayEv>
    }
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}

080003b8 <_ZN4blib7Monitor11showSettingEv>:

    void Monitor::showSetting()
    {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
        switch (getSettingLevel())
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f000 f8f2 	bl	80005aa <_ZNK4blib7Monitor15getSettingLevelEv>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b0a      	cmp	r3, #10
 80003ca:	d845      	bhi.n	8000458 <_ZN4blib7Monitor11showSettingEv+0xa0>
 80003cc:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <_ZN4blib7Monitor11showSettingEv+0x1c>)
 80003ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d2:	bf00      	nop
 80003d4:	08000401 	.word	0x08000401
 80003d8:	08000409 	.word	0x08000409
 80003dc:	08000411 	.word	0x08000411
 80003e0:	08000419 	.word	0x08000419
 80003e4:	08000421 	.word	0x08000421
 80003e8:	08000429 	.word	0x08000429
 80003ec:	08000431 	.word	0x08000431
 80003f0:	08000439 	.word	0x08000439
 80003f4:	08000441 	.word	0x08000441
 80003f8:	08000449 	.word	0x08000449
 80003fc:	08000451 	.word	0x08000451
        {
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_0:
                showSettingSupplyAlgorithm();
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f000 f9d1 	bl	80007a8 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>
                break;
 8000406:	e028      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_1:
                showSettingChargerPsuMode();
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f000 f9e1 	bl	80007d0 <_ZN4blib7Monitor25showSettingChargerPsuModeEv>
                break;
 800040e:	e024      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_2:
                showSettingMaxBatteryVoltage();
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f000 f9f1 	bl	80007f8 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>
                break;
 8000416:	e020      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_3:
                showSettingMinBatteryVoltage();
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f000 fa01 	bl	8000820 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>
                break;
 800041e:	e01c      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_4:
                showSettingChargingCurrent();
 8000420:	6878      	ldr	r0, [r7, #4]
 8000422:	f000 fa11 	bl	8000848 <_ZN4blib7Monitor26showSettingChargingCurrentEv>
                break;
 8000426:	e018      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_5:
                showSettingCoolingFan();
 8000428:	6878      	ldr	r0, [r7, #4]
 800042a:	f000 fa21 	bl	8000870 <_ZN4blib7Monitor21showSettingCoolingFanEv>
                break;
 800042e:	e014      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_6:
                showSettingFanTriggerTemp();
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f000 fa33 	bl	800089c <_ZN4blib7Monitor25showSettingFanTriggerTempEv>
                break;
 8000436:	e010      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_7:
                showSettingShutdownTemp();
 8000438:	6878      	ldr	r0, [r7, #4]
 800043a:	f000 fa45 	bl	80008c8 <_ZN4blib7Monitor23showSettingShutdownTempEv>
                break;
 800043e:	e00c      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_8:
                showSettingAutoLoadFeature();
 8000440:	6878      	ldr	r0, [r7, #4]
 8000442:	f000 fa57 	bl	80008f4 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>
                break;
 8000446:	e008      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_9:
                showSettingBackligthSleep();
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f000 fa69 	bl	8000920 <_ZN4blib7Monitor25showSettingBackligthSleepEv>
                break;
 800044e:	e004      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            case Monitor::SettingLevel::SETTING_LEVEL_CONFIG_10:
                showSettingFactoryReset();
 8000450:	6878      	ldr	r0, [r7, #4]
 8000452:	f000 fa7b 	bl	800094c <_ZN4blib7Monitor23showSettingFactoryResetEv>
                break;
 8000456:	e000      	b.n	800045a <_ZN4blib7Monitor11showSettingEv+0xa2>
            default:
                break;
 8000458:	bf00      	nop
        }
    }
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop

08000464 <_ZN4blib7Monitor11showDisplayEv>:
    void Monitor::showDisplay()
    {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
        const Monitor::DisplayLevel displayLevel = getDisplayLevel();
 800046c:	6878      	ldr	r0, [r7, #4]
 800046e:	f000 f8bd 	bl	80005ec <_ZNK4blib7Monitor15getDisplayLevelEv>
 8000472:	60f8      	str	r0, [r7, #12]
        switch (displayLevel)
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2b06      	cmp	r3, #6
 8000478:	d828      	bhi.n	80004cc <_ZN4blib7Monitor11showDisplayEv+0x68>
 800047a:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <_ZN4blib7Monitor11showDisplayEv+0x1c>)
 800047c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000480:	080004cd 	.word	0x080004cd
 8000484:	0800049d 	.word	0x0800049d
 8000488:	080004a5 	.word	0x080004a5
 800048c:	080004ad 	.word	0x080004ad
 8000490:	080004b5 	.word	0x080004b5
 8000494:	080004bd 	.word	0x080004bd
 8000498:	080004c5 	.word	0x080004c5
        {
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_0:
                // Do not show anything - Maybe show display off
                break;
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_1:
                showDisplayLevel1();
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f000 f8b1 	bl	8000604 <_ZN4blib7Monitor17showDisplayLevel1Ev>
                break;
 80004a2:	e014      	b.n	80004ce <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_2:
                showDisplayLevel2();
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f000 f8c1 	bl	800062c <_ZN4blib7Monitor17showDisplayLevel2Ev>
                break;
 80004aa:	e010      	b.n	80004ce <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_3:
                showDisplayLevel3();
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f000 f8d1 	bl	8000654 <_ZN4blib7Monitor17showDisplayLevel3Ev>
                break;
 80004b2:	e00c      	b.n	80004ce <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_4:
                showDisplayLevel4();
 80004b4:	6878      	ldr	r0, [r7, #4]
 80004b6:	f000 f8e1 	bl	800067c <_ZN4blib7Monitor17showDisplayLevel4Ev>
                break;
 80004ba:	e008      	b.n	80004ce <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_5:
                showDisplayChooseSettingMode();
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f000 f8f1 	bl	80006a4 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>
                break;
 80004c2:	e004      	b.n	80004ce <_ZN4blib7Monitor11showDisplayEv+0x6a>
            case Monitor::DisplayLevel::DISPLAY_LEVEL_CONFIG_6:
                showDisplayFactoryReset();
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f000 f909 	bl	80006dc <_ZN4blib7Monitor23showDisplayFactoryResetEv>
                break;
 80004ca:	e000      	b.n	80004ce <_ZN4blib7Monitor11showDisplayEv+0x6a>
            default:
                break;
 80004cc:	bf00      	nop
        }
    }
 80004ce:	bf00      	nop
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop

080004d8 <_ZN4blib7Monitor14setSettingModeEb>:

    void Monitor::setSettingMode(const bool val)
    {
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	460b      	mov	r3, r1
 80004e2:	70fb      	strb	r3, [r7, #3]
        mSettingMode = val;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	78fa      	ldrb	r2, [r7, #3]
 80004e8:	711a      	strb	r2, [r3, #4]
    }
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <_ZNK4blib7Monitor15getSetttingModeEv>:
    bool Monitor::getSetttingMode() const
    {
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
        return mSettingMode;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	b2db      	uxtb	r3, r3
    }
 8000504:	4618      	mov	r0, r3
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <_ZN4blib7Monitor15setFactoryResetEb>:

    void Monitor::setFactoryReset(const bool val)
    {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]
        mFactoryResetEnable = val;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	741a      	strb	r2, [r3, #16]
    }
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_ZNK4blib7Monitor15getFactoryResetEv>:
    bool Monitor::getFactoryReset() const
    {
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
        return mFactoryResetEnable;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	7c1b      	ldrb	r3, [r3, #16]
 800053a:	b2db      	uxtb	r3, r3
    }
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr

08000548 <_ZN4blib7Monitor22setConfirmFactoryResetEb>:
    void Monitor::setConfirmFactoryReset(const bool val)
    {
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	460b      	mov	r3, r1
 8000552:	70fb      	strb	r3, [r7, #3]
        mConfirmFactoryReset = val;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	78fa      	ldrb	r2, [r7, #3]
 8000558:	745a      	strb	r2, [r3, #17]
    }
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <_ZNK4blib7Monitor22getConfirmFactoryResetEv>:
    bool Monitor::getConfirmFactoryReset() const
    {
 8000566:	b480      	push	{r7}
 8000568:	b083      	sub	sp, #12
 800056a:	af00      	add	r7, sp, #0
 800056c:	6078      	str	r0, [r7, #4]
        return mConfirmFactoryReset;
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	7c5b      	ldrb	r3, [r3, #17]
 8000572:	b2db      	uxtb	r3, r3
    }
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>:

    void Monitor::setSettingLevel(const SettingLevel val)
    {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
        uint8_t u8SettingLevel = (uint8_t) val;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	73fb      	strb	r3, [r7, #15]

        if (u8SettingLevel < 0)
        {
            u8SettingLevel = 0;
        }
        else if (u8SettingLevel >= (uint8_t) SettingLevel::SETTING_LEVEL_MAX)
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	2b0a      	cmp	r3, #10
 8000592:	d901      	bls.n	8000598 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE+0x18>
        {
            u8SettingLevel = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
        }

        mSettingLevel = (SettingLevel) u8SettingLevel;
 8000598:	7bfa      	ldrb	r2, [r7, #15]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	609a      	str	r2, [r3, #8]
    }
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <_ZNK4blib7Monitor15getSettingLevelEv>:
    Monitor::SettingLevel Monitor::getSettingLevel() const
    {
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
        return mSettingLevel;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
    }
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE>:

    void Monitor::setDisplayLevel(const DisplayLevel val)
    {
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
 80005ca:	6039      	str	r1, [r7, #0]
        uint8_t u8DisplayLevel = (uint8_t) val;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	73fb      	strb	r3, [r7, #15]

        if (u8DisplayLevel < 0)
        {
            u8DisplayLevel = 0;
        }
        else if (u8DisplayLevel >= (uint8_t) DisplayLevel::DISPLAY_LEVEL_MAX)
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	2b06      	cmp	r3, #6
 80005d4:	d901      	bls.n	80005da <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE+0x18>
        {
            u8DisplayLevel = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]
        }

        mDisplayLevel = (DisplayLevel) u8DisplayLevel;
 80005da:	7bfa      	ldrb	r2, [r7, #15]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	60da      	str	r2, [r3, #12]
    }
 80005e0:	bf00      	nop
 80005e2:	3714      	adds	r7, #20
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <_ZNK4blib7Monitor15getDisplayLevelEv>:
    Monitor::DisplayLevel Monitor::getDisplayLevel() const
    {
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
        return mDisplayLevel;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	68db      	ldr	r3, [r3, #12]
    }
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <_ZN4blib7Monitor17showDisplayLevel1Ev>:

    void Monitor::showDisplayLevel1()
    {
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
        LOGI();
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x1c>)
 800060e:	22bb      	movs	r2, #187	; 0xbb
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x20>)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <_ZN4blib7Monitor17showDisplayLevel1Ev+0x24>)
 8000614:	f000 f9e0 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	08006314 	.word	0x08006314
 8000624:	080062cc 	.word	0x080062cc
 8000628:	08006328 	.word	0x08006328

0800062c <_ZN4blib7Monitor17showDisplayLevel2Ev>:
    void Monitor::showDisplayLevel2()
    {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
        LOGI();
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x1c>)
 8000636:	22bf      	movs	r2, #191	; 0xbf
 8000638:	4904      	ldr	r1, [pc, #16]	; (800064c <_ZN4blib7Monitor17showDisplayLevel2Ev+0x20>)
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <_ZN4blib7Monitor17showDisplayLevel2Ev+0x24>)
 800063c:	f000 f9cc 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	08006338 	.word	0x08006338
 800064c:	080062cc 	.word	0x080062cc
 8000650:	08006328 	.word	0x08006328

08000654 <_ZN4blib7Monitor17showDisplayLevel3Ev>:
    void Monitor::showDisplayLevel3()
    {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
        LOGI();
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x1c>)
 800065e:	22c3      	movs	r2, #195	; 0xc3
 8000660:	4904      	ldr	r1, [pc, #16]	; (8000674 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x20>)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <_ZN4blib7Monitor17showDisplayLevel3Ev+0x24>)
 8000664:	f000 f9b8 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	0800634c 	.word	0x0800634c
 8000674:	080062cc 	.word	0x080062cc
 8000678:	08006328 	.word	0x08006328

0800067c <_ZN4blib7Monitor17showDisplayLevel4Ev>:
    void Monitor::showDisplayLevel4()
    {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
        LOGI();
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x1c>)
 8000686:	22c7      	movs	r2, #199	; 0xc7
 8000688:	4904      	ldr	r1, [pc, #16]	; (800069c <_ZN4blib7Monitor17showDisplayLevel4Ev+0x20>)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <_ZN4blib7Monitor17showDisplayLevel4Ev+0x24>)
 800068c:	f000 f9a4 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	08006360 	.word	0x08006360
 800069c:	080062cc 	.word	0x080062cc
 80006a0:	08006328 	.word	0x08006328

080006a4 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv>:
    void Monitor::showDisplayChooseSettingMode()
    {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
        LOGI("SETTINGS MENU");
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x28>)
 80006ae:	22cb      	movs	r2, #203	; 0xcb
 80006b0:	4907      	ldr	r1, [pc, #28]	; (80006d0 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x2c>)
 80006b2:	4808      	ldr	r0, [pc, #32]	; (80006d4 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x30>)
 80006b4:	f000 f990 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        LOGI("--PRESS SELECT--");
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x28>)
 80006ba:	22cc      	movs	r2, #204	; 0xcc
 80006bc:	4904      	ldr	r1, [pc, #16]	; (80006d0 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x2c>)
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <_ZN4blib7Monitor28showDisplayChooseSettingModeEv+0x34>)
 80006c0:	f000 f98a 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08006374 	.word	0x08006374
 80006d0:	080062cc 	.word	0x080062cc
 80006d4:	08006394 	.word	0x08006394
 80006d8:	080063b0 	.word	0x080063b0

080006dc <_ZN4blib7Monitor23showDisplayFactoryResetEv>:
    void Monitor::showDisplayFactoryReset()
    {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
        if (getFactoryReset() == false)
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff22 	bl	800052e <_ZNK4blib7Monitor15getFactoryResetEv>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	bf0c      	ite	eq
 80006f0:	2301      	moveq	r3, #1
 80006f2:	2300      	movne	r3, #0
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d00c      	beq.n	8000714 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x38>
        {
            LOGI("FACTORY RESET");
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 80006fc:	22d2      	movs	r2, #210	; 0xd2
 80006fe:	4924      	ldr	r1, [pc, #144]	; (8000790 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 8000700:	4824      	ldr	r0, [pc, #144]	; (8000794 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb8>)
 8000702:	f000 f969 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
            LOGI("--PRESS SELECT--");
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8000708:	22d3      	movs	r2, #211	; 0xd3
 800070a:	4921      	ldr	r1, [pc, #132]	; (8000790 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 800070c:	4822      	ldr	r0, [pc, #136]	; (8000798 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xbc>)
 800070e:	f000 f963 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                // Go to setting mode - show supply algorithm screen
                setSettingMode(true);
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
            }
        }
    }
 8000712:	e037      	b.n	8000784 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xa8>
            if (getConfirmFactoryReset() == false)
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ff26 	bl	8000566 <_ZNK4blib7Monitor22getConfirmFactoryResetEv>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	bf0c      	ite	eq
 8000720:	2301      	moveq	r3, #1
 8000722:	2300      	movne	r3, #0
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d00c      	beq.n	8000744 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0x68>
                LOGI("ARE YOU SURE?");
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 800072c:	22d9      	movs	r2, #217	; 0xd9
 800072e:	4918      	ldr	r1, [pc, #96]	; (8000790 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 8000730:	481a      	ldr	r0, [pc, #104]	; (800079c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc0>)
 8000732:	f000 f951 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI(" >NO   >YES");
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8000738:	22da      	movs	r2, #218	; 0xda
 800073a:	4915      	ldr	r1, [pc, #84]	; (8000790 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 800073c:	4818      	ldr	r0, [pc, #96]	; (80007a0 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc4>)
 800073e:	f000 f94b 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000742:	e01f      	b.n	8000784 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xa8>
                LOGI("FACTORY RESET");
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8000746:	22de      	movs	r2, #222	; 0xde
 8000748:	4911      	ldr	r1, [pc, #68]	; (8000790 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb8>)
 800074c:	f000 f944 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                LOGI("SUCCESSFULLY");
 8000750:	4b0e      	ldr	r3, [pc, #56]	; (800078c <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb0>)
 8000752:	22df      	movs	r2, #223	; 0xdf
 8000754:	490e      	ldr	r1, [pc, #56]	; (8000790 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xb4>)
 8000756:	4813      	ldr	r0, [pc, #76]	; (80007a4 <_ZN4blib7Monitor23showDisplayFactoryResetEv+0xc8>)
 8000758:	f000 f93e 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
                HAL_Delay(1500);
 800075c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000760:	f000 ff18 	bl	8001594 <HAL_Delay>
                setConfirmFactoryReset(false);
 8000764:	2100      	movs	r1, #0
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff feee 	bl	8000548 <_ZN4blib7Monitor22setConfirmFactoryResetEb>
                setFactoryReset(false);
 800076c:	2100      	movs	r1, #0
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff fece 	bl	8000510 <_ZN4blib7Monitor15setFactoryResetEb>
                setSettingMode(true);
 8000774:	2101      	movs	r1, #1
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f7ff feae 	bl	80004d8 <_ZN4blib7Monitor14setSettingModeEb>
                setSettingLevel(SettingLevel::SETTING_LEVEL_CONFIG_1);    // TODO: Check correct screen
 800077c:	2101      	movs	r1, #1
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fefe 	bl	8000580 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>
    }
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	080063d0 	.word	0x080063d0
 8000790:	080062cc 	.word	0x080062cc
 8000794:	080063e8 	.word	0x080063e8
 8000798:	080063b0 	.word	0x080063b0
 800079c:	08006404 	.word	0x08006404
 80007a0:	08006420 	.word	0x08006420
 80007a4:	0800643c 	.word	0x0800643c

080007a8 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv>:
    void Monitor::showSettingSupplyAlgorithm()
    {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
        LOGI();
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x1c>)
 80007b2:	22ee      	movs	r2, #238	; 0xee
 80007b4:	4904      	ldr	r1, [pc, #16]	; (80007c8 <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x20>)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <_ZN4blib7Monitor26showSettingSupplyAlgorithmEv+0x24>)
 80007b8:	f000 f90e 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	08006458 	.word	0x08006458
 80007c8:	080062cc 	.word	0x080062cc
 80007cc:	08006328 	.word	0x08006328

080007d0 <_ZN4blib7Monitor25showSettingChargerPsuModeEv>:
    void Monitor::showSettingChargerPsuMode()
    {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
        LOGI();
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x1c>)
 80007da:	22f2      	movs	r2, #242	; 0xf2
 80007dc:	4904      	ldr	r1, [pc, #16]	; (80007f0 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x20>)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <_ZN4blib7Monitor25showSettingChargerPsuModeEv+0x24>)
 80007e0:	f000 f8fa 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08006474 	.word	0x08006474
 80007f0:	080062cc 	.word	0x080062cc
 80007f4:	08006328 	.word	0x08006328

080007f8 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv>:
    void Monitor::showSettingMaxBatteryVoltage()
    {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
        LOGI();
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x1c>)
 8000802:	22f6      	movs	r2, #246	; 0xf6
 8000804:	4904      	ldr	r1, [pc, #16]	; (8000818 <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x20>)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <_ZN4blib7Monitor28showSettingMaxBatteryVoltageEv+0x24>)
 8000808:	f000 f8e6 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	08006490 	.word	0x08006490
 8000818:	080062cc 	.word	0x080062cc
 800081c:	08006328 	.word	0x08006328

08000820 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv>:
    void Monitor::showSettingMinBatteryVoltage()
    {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
        LOGI();
 8000828:	4b04      	ldr	r3, [pc, #16]	; (800083c <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x1c>)
 800082a:	22fa      	movs	r2, #250	; 0xfa
 800082c:	4904      	ldr	r1, [pc, #16]	; (8000840 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x20>)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <_ZN4blib7Monitor28showSettingMinBatteryVoltageEv+0x24>)
 8000830:	f000 f8d2 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	080064b0 	.word	0x080064b0
 8000840:	080062cc 	.word	0x080062cc
 8000844:	08006328 	.word	0x08006328

08000848 <_ZN4blib7Monitor26showSettingChargingCurrentEv>:
    void Monitor::showSettingChargingCurrent()
    {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
        LOGI();
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x1c>)
 8000852:	22fe      	movs	r2, #254	; 0xfe
 8000854:	4904      	ldr	r1, [pc, #16]	; (8000868 <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x20>)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <_ZN4blib7Monitor26showSettingChargingCurrentEv+0x24>)
 8000858:	f000 f8be 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	080064d0 	.word	0x080064d0
 8000868:	080062cc 	.word	0x080062cc
 800086c:	08006328 	.word	0x08006328

08000870 <_ZN4blib7Monitor21showSettingCoolingFanEv>:
    void Monitor::showSettingCoolingFan()
    {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
        LOGI();
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x20>)
 800087a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800087e:	4905      	ldr	r1, [pc, #20]	; (8000894 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x24>)
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <_ZN4blib7Monitor21showSettingCoolingFanEv+0x28>)
 8000882:	f000 f8a9 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	080064ec 	.word	0x080064ec
 8000894:	080062cc 	.word	0x080062cc
 8000898:	08006328 	.word	0x08006328

0800089c <_ZN4blib7Monitor25showSettingFanTriggerTempEv>:
    void Monitor::showSettingFanTriggerTemp()
    {
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
        LOGI();
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x20>)
 80008a6:	f44f 7283 	mov.w	r2, #262	; 0x106
 80008aa:	4905      	ldr	r1, [pc, #20]	; (80008c0 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x24>)
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <_ZN4blib7Monitor25showSettingFanTriggerTempEv+0x28>)
 80008ae:	f000 f893 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	08006504 	.word	0x08006504
 80008c0:	080062cc 	.word	0x080062cc
 80008c4:	08006328 	.word	0x08006328

080008c8 <_ZN4blib7Monitor23showSettingShutdownTempEv>:
    void Monitor::showSettingShutdownTemp()
    {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
        LOGI();
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x20>)
 80008d2:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80008d6:	4905      	ldr	r1, [pc, #20]	; (80008ec <_ZN4blib7Monitor23showSettingShutdownTempEv+0x24>)
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <_ZN4blib7Monitor23showSettingShutdownTempEv+0x28>)
 80008da:	f000 f87d 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	08006520 	.word	0x08006520
 80008ec:	080062cc 	.word	0x080062cc
 80008f0:	08006328 	.word	0x08006328

080008f4 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv>:
    void Monitor::showSettingAutoLoadFeature()
    {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
        LOGI();
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x20>)
 80008fe:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8000902:	4905      	ldr	r1, [pc, #20]	; (8000918 <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x24>)
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <_ZN4blib7Monitor26showSettingAutoLoadFeatureEv+0x28>)
 8000906:	f000 f867 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08006538 	.word	0x08006538
 8000918:	080062cc 	.word	0x080062cc
 800091c:	08006328 	.word	0x08006328

08000920 <_ZN4blib7Monitor25showSettingBackligthSleepEv>:
    void Monitor::showSettingBackligthSleep()
    {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
        LOGI();
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x20>)
 800092a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800092e:	4905      	ldr	r1, [pc, #20]	; (8000944 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x24>)
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <_ZN4blib7Monitor25showSettingBackligthSleepEv+0x28>)
 8000932:	f000 f851 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	08006554 	.word	0x08006554
 8000944:	080062cc 	.word	0x080062cc
 8000948:	08006328 	.word	0x08006328

0800094c <_ZN4blib7Monitor23showSettingFactoryResetEv>:
    void Monitor::showSettingFactoryReset()
    {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
        LOGI();
 8000954:	4b05      	ldr	r3, [pc, #20]	; (800096c <_ZN4blib7Monitor23showSettingFactoryResetEv+0x20>)
 8000956:	f44f 728b 	mov.w	r2, #278	; 0x116
 800095a:	4905      	ldr	r1, [pc, #20]	; (8000970 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x24>)
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <_ZN4blib7Monitor23showSettingFactoryResetEv+0x28>)
 800095e:	f000 f83b 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	08006570 	.word	0x08006570
 8000970:	080062cc 	.word	0x080062cc
 8000974:	08006328 	.word	0x08006328

08000978 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev>:
                        mInstance = nullptr;
                    }
                }

            protected:
                Singleton()
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
                {
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <_ZN4blib2dp9SingletonINS_7MonitorEEC1Ev+0x1c>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
                }
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	080066f0 	.word	0x080066f0

08000998 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>:
                virtual ~Singleton()
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
                {
                }
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev+0x1c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	080066f0 	.word	0x080066f0

080009b8 <_ZN4blib2dp9SingletonINS_7MonitorEED0Ev>:
                virtual ~Singleton()
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
                }
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ffe9 	bl	8000998 <_ZN4blib2dp9SingletonINS_7MonitorEED1Ev>
 80009c6:	2104      	movs	r1, #4
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f004 ff3b 	bl	8005844 <_ZdlPvj>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>:
            static void Log(const char *message, Args ... args)
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	603b      	str	r3, [r7, #0]
                print("[>]  ");
 80009e6:	480c      	ldr	r0, [pc, #48]	; (8000a18 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x40>)
 80009e8:	f7ff fc52 	bl	8000290 <_ZN4blib6Logger5printEPKc>
                snprintf(mBuffer, LOG_BUFFER_SIZE, message, args...);
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 80009fe:	f005 f803 	bl	8005a08 <sniprintf>
                print(mBuffer);
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x44>)
 8000a04:	f7ff fc44 	bl	8000290 <_ZN4blib6Logger5printEPKc>
                print("\n");
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_+0x48>)
 8000a0a:	f7ff fc41 	bl	8000290 <_ZN4blib6Logger5printEPKc>
            }
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08006588 	.word	0x08006588
 8000a1c:	20000200 	.word	0x20000200
 8000a20:	08006590 	.word	0x08006590

08000a24 <HAL_GPIO_EXTI_Callback>:
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_pin)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
    GPIO_TypeDef *pGPIOx = nullptr;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    static blib::Button::ButtonName lastedPressButton = blib::Button::ButtonName::UNDEFINED;
    uint32_t timedelay = 160000U;
 8000a32:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_GPIO_EXTI_Callback+0x148>)
 8000a34:	61bb      	str	r3, [r7, #24]

    for (volatile uint32_t i = 0; i < timedelay; i++);
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	e002      	b.n	8000a42 <HAL_GPIO_EXTI_Callback+0x1e>
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	bf8c      	ite	hi
 8000a4a:	2301      	movhi	r3, #1
 8000a4c:	2300      	movls	r3, #0
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1f3      	bne.n	8000a3c <HAL_GPIO_EXTI_Callback+0x18>

    volatile uint32_t i = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]

    if (GPIO_pin == BUT_LEFT_Pin)
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d10b      	bne.n	8000a76 <HAL_GPIO_EXTI_Callback+0x52>
    {
        LOGI("Button Left pin");
 8000a5e:	4b44      	ldr	r3, [pc, #272]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a60:	224c      	movs	r2, #76	; 0x4c
 8000a62:	4944      	ldr	r1, [pc, #272]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a64:	4844      	ldr	r0, [pc, #272]	; (8000b78 <HAL_GPIO_EXTI_Callback+0x154>)
 8000a66:	f7ff ffb7 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::LEFT;
 8000a6a:	4b44      	ldr	r3, [pc, #272]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x158>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_LEFT_GPIO_Port;
 8000a70:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a72:	61fb      	str	r3, [r7, #28]
 8000a74:	e032      	b.n	8000adc <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_RIGHT_Pin)
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d10b      	bne.n	8000a94 <HAL_GPIO_EXTI_Callback+0x70>
    {
        LOGI("Button Right pin");
 8000a7c:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a7e:	2252      	movs	r2, #82	; 0x52
 8000a80:	493c      	ldr	r1, [pc, #240]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x150>)
 8000a82:	4840      	ldr	r0, [pc, #256]	; (8000b84 <HAL_GPIO_EXTI_Callback+0x160>)
 8000a84:	f7ff ffa8 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::RIGHT;
 8000a88:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x158>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_RIGHT_GPIO_Port;
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000a90:	61fb      	str	r3, [r7, #28]
 8000a92:	e023      	b.n	8000adc <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_BACK_Pin)
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	d10b      	bne.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x8e>
    {
        LOGI("Button Back pin");
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000a9c:	2258      	movs	r2, #88	; 0x58
 8000a9e:	4935      	ldr	r1, [pc, #212]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x150>)
 8000aa0:	4839      	ldr	r0, [pc, #228]	; (8000b88 <HAL_GPIO_EXTI_Callback+0x164>)
 8000aa2:	f7ff ff99 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::BACK;
 8000aa6:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x158>)
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_BACK_GPIO_Port;
 8000aac:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	e014      	b.n	8000adc <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else if (GPIO_pin == BUT_SELECT_Pin)
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	2b08      	cmp	r3, #8
 8000ab6:	d10b      	bne.n	8000ad0 <HAL_GPIO_EXTI_Callback+0xac>
    {
        LOGI("Button Select pin");
 8000ab8:	4b2d      	ldr	r3, [pc, #180]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000aba:	225e      	movs	r2, #94	; 0x5e
 8000abc:	492d      	ldr	r1, [pc, #180]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x150>)
 8000abe:	4833      	ldr	r0, [pc, #204]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x168>)
 8000ac0:	f7ff ff8a 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
        lastedPressButton = blib::Button::ButtonName::SELECT;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x158>)
 8000ac6:	2204      	movs	r2, #4
 8000ac8:	601a      	str	r2, [r3, #0]
        pGPIOx = BUT_SELECT_GPIO_Port;
 8000aca:	4b2d      	ldr	r3, [pc, #180]	; (8000b80 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000acc:	61fb      	str	r3, [r7, #28]
 8000ace:	e005      	b.n	8000adc <HAL_GPIO_EXTI_Callback+0xb8>
    }
    else
    {
        LOGI("Undefined Exti Signal");
 8000ad0:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000ad2:	2264      	movs	r2, #100	; 0x64
 8000ad4:	4927      	ldr	r1, [pc, #156]	; (8000b74 <HAL_GPIO_EXTI_Callback+0x150>)
 8000ad6:	482e      	ldr	r0, [pc, #184]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000ad8:	f7ff ff7e 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    }

    blib::Button::getInstance().setLatestPressedButton(lastedPressButton);
 8000adc:	f000 faa2 	bl	8001024 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <HAL_GPIO_EXTI_Callback+0x158>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4610      	mov	r0, r2
 8000aea:	f004 fdad 	bl	8005648 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>
    blib::Button::getInstance().handleSignal();
 8000aee:	f000 fa99 	bl	8001024 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f004 fdc1 	bl	800567c <_ZN4blib6Button12handleSignalEv>
    if (pGPIOx != nullptr)
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d01e      	beq.n	8000b3e <HAL_GPIO_EXTI_Callback+0x11a>
    {
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 8000b00:	e002      	b.n	8000b08 <HAL_GPIO_EXTI_Callback+0xe4>
        {
            i++;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3301      	adds	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
        while ((HAL_GPIO_ReadPin(pGPIOx, GPIO_pin) == GPIO_PIN_RESET) & (i < (timedelay)))
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	69f8      	ldr	r0, [r7, #28]
 8000b0e:	f002 fa8f 	bl	8003030 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf0c      	ite	eq
 8000b18:	2301      	moveq	r3, #1
 8000b1a:	2300      	movne	r3, #0
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	69b9      	ldr	r1, [r7, #24]
 8000b22:	4299      	cmp	r1, r3
 8000b24:	bf8c      	ite	hi
 8000b26:	2301      	movhi	r3, #1
 8000b28:	2300      	movls	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1e1      	bne.n	8000b02 <HAL_GPIO_EXTI_Callback+0xde>
        }
    }

    for (volatile uint32_t i = 0; i < timedelay; i++);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e002      	b.n	8000b4a <HAL_GPIO_EXTI_Callback+0x126>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	bf8c      	ite	hi
 8000b52:	2301      	movhi	r3, #1
 8000b54:	2300      	movls	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f3      	bne.n	8000b44 <HAL_GPIO_EXTI_Callback+0x120>

    __HAL_GPIO_EXTI_CLEAR_FLAG(GPIO_pin);
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x170>)
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	6153      	str	r3, [r2, #20]
}
 8000b62:	bf00      	nop
 8000b64:	3720      	adds	r7, #32
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	00027100 	.word	0x00027100
 8000b70:	08006594 	.word	0x08006594
 8000b74:	080065ac 	.word	0x080065ac
 8000b78:	080065b8 	.word	0x080065b8
 8000b7c:	200001ec 	.word	0x200001ec
 8000b80:	48000800 	.word	0x48000800
 8000b84:	080065d8 	.word	0x080065d8
 8000b88:	080065f8 	.word	0x080065f8
 8000b8c:	08006618 	.word	0x08006618
 8000b90:	08006638 	.word	0x08006638
 8000b94:	40010400 	.word	0x40010400

08000b98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9e:	f000 fc93 	bl	80014c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ba2:	f000 f831 	bl	8000c08 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba6:	f000 f9bd 	bl	8000f24 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000baa:	f000 f99d 	bl	8000ee8 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000bae:	f000 f899 	bl	8000ce4 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000bb2:	f000 f917 	bl	8000de4 <_ZL12MX_I2C1_Initv>
  MX_USART2_UART_Init();
 8000bb6:	f000 f963 	bl	8000e80 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
    LOGI("MPPT SOLAR CHARGE CONTROLLER");
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <main+0x5c>)
 8000bbc:	229d      	movs	r2, #157	; 0x9d
 8000bbe:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <main+0x60>)
 8000bc0:	480e      	ldr	r0, [pc, #56]	; (8000bfc <main+0x64>)
 8000bc2:	f7ff ff09 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("DESIGNED BY ");
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <main+0x5c>)
 8000bc8:	229e      	movs	r2, #158	; 0x9e
 8000bca:	490b      	ldr	r1, [pc, #44]	; (8000bf8 <main+0x60>)
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <main+0x68>)
 8000bce:	f7ff ff03 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>
    LOGI("STARTING DEVICE...");
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <main+0x5c>)
 8000bd4:	229f      	movs	r2, #159	; 0x9f
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <main+0x60>)
 8000bd8:	480a      	ldr	r0, [pc, #40]	; (8000c04 <main+0x6c>)
 8000bda:	f7ff fefd 	bl	80009d8 <_ZN4blib6Logger3LogIJPKciS3_EEEvS3_DpT_>

    auto &monitor = blib::Monitor::getInstance();
 8000bde:	f000 fa37 	bl	8001050 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 8000be2:	6078      	str	r0, [r7, #4]
    while (1)
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        monitor.showMenu();
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff fbcd 	bl	8000384 <_ZN4blib7Monitor8showMenuEv>
        HAL_Delay(1000);
 8000bea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bee:	f000 fcd1 	bl	8001594 <HAL_Delay>
        monitor.showMenu();
 8000bf2:	e7f7      	b.n	8000be4 <main+0x4c>
 8000bf4:	0800665c 	.word	0x0800665c
 8000bf8:	080065ac 	.word	0x080065ac
 8000bfc:	08006664 	.word	0x08006664
 8000c00:	08006690 	.word	0x08006690
 8000c04:	080066ac 	.word	0x080066ac

08000c08 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0a6      	sub	sp, #152	; 0x98
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c12:	2228      	movs	r2, #40	; 0x28
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 ff2a 	bl	8005a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	2258      	movs	r2, #88	; 0x58
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f004 ff1c 	bl	8005a70 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c40:	2310      	movs	r3, #16
 8000c42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fb51 	bl	800330c <HAL_RCC_OscConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <_Z18SystemClock_Configv+0x76>
  {
    Error_Handler();
 8000c7a:	f000 f9cd 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c7e:	230f      	movs	r3, #15
 8000c80:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c82:	2302      	movs	r3, #2
 8000c84:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fb8b 	bl	80043b4 <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bf14      	ite	ne
 8000ca4:	2301      	movne	r3, #1
 8000ca6:	2300      	moveq	r3, #0
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <_Z18SystemClock_Configv+0xaa>
  {
    Error_Handler();
 8000cae:	f000 f9b3 	bl	8001018 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000cb2:	2322      	movs	r3, #34	; 0x22
 8000cb4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 fdad 	bl	8004820 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 8000cd6:	f000 f99f 	bl	8001018 <Error_Handler>
  }
}
 8000cda:	bf00      	nop
 8000cdc:	3798      	adds	r7, #152	; 0x98
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d10:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d14:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d28:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d42:	4b27      	ldr	r3, [pc, #156]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d52:	2204      	movs	r2, #4
 8000d54:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d56:	4b22      	ldr	r3, [pc, #136]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d62:	481f      	ldr	r0, [pc, #124]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d64:	f000 fc58 	bl	8001618 <HAL_ADC_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	bf14      	ite	ne
 8000d6e:	2301      	movne	r3, #1
 8000d70:	2300      	moveq	r3, #0
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <_ZL12MX_ADC1_Initv+0x98>
  {
    Error_Handler();
 8000d78:	f000 f94e 	bl	8001018 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4816      	ldr	r0, [pc, #88]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000d88:	f001 fc38 	bl	80025fc <HAL_ADCEx_MultiModeConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	bf14      	ite	ne
 8000d92:	2301      	movne	r3, #1
 8000d94:	2300      	moveq	r3, #0
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <_ZL12MX_ADC1_Initv+0xbc>
  {
    Error_Handler();
 8000d9c:	f000 f93c 	bl	8001018 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000dac:	2307      	movs	r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <_ZL12MX_ADC1_Initv+0xfc>)
 8000dbe:	f001 f933 	bl	8002028 <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	bf14      	ite	ne
 8000dc8:	2301      	movne	r3, #1
 8000dca:	2300      	moveq	r3, #0
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <_ZL12MX_ADC1_Initv+0xf2>
  {
    Error_Handler();
 8000dd2:	f000 f921 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3728      	adds	r7, #40	; 0x28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000007c 	.word	0x2000007c

08000de4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000dea:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <_ZL12MX_I2C1_Initv+0x94>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000df0:	4a22      	ldr	r2, [pc, #136]	; (8000e7c <_ZL12MX_I2C1_Initv+0x98>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e00:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e0c:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e12:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e18:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e1e:	4815      	ldr	r0, [pc, #84]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000e20:	f002 f94e 	bl	80030c0 <HAL_I2C_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2301      	movne	r3, #1
 8000e2c:	2300      	moveq	r3, #0
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8000e34:	f000 f8f0 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000e3c:	f002 f9cf 	bl	80031de <HAL_I2CEx_ConfigAnalogFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf14      	ite	ne
 8000e46:	2301      	movne	r3, #1
 8000e48:	2300      	moveq	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8000e50:	f000 f8e2 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <_ZL12MX_I2C1_Initv+0x90>)
 8000e58:	f002 fa0c 	bl	8003274 <HAL_I2CEx_ConfigDigitalFilter>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 f8d4 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000110 	.word	0x20000110
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	2000090e 	.word	0x2000090e

08000e80 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000e86:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000ec4:	f003 feca 	bl	8004c5c <HAL_UART_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf14      	ite	ne
 8000ece:	2301      	movne	r3, #1
 8000ed0:	2300      	moveq	r3, #0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000ed8:	f000 f89e 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000164 	.word	0x20000164
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <_ZL11MX_DMA_Initv+0x38>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <_ZL11MX_DMA_Initv+0x38>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <_ZL11MX_DMA_Initv+0x38>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	200b      	movs	r0, #11
 8000f0c:	f001 fda9 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f10:	200b      	movs	r0, #11
 8000f12:	f001 fdc2 	bl	8002a9a <HAL_NVIC_EnableIRQ>

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000

08000f24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b35      	ldr	r3, [pc, #212]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a34      	ldr	r2, [pc, #208]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a2e      	ldr	r2, [pc, #184]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a28      	ldr	r2, [pc, #160]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f74:	6153      	str	r3, [r2, #20]
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <_ZL12MX_GPIO_Initv+0xec>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_INDICATOR_GPIO_Port, LED_INDICATOR_Pin, GPIO_PIN_RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2120      	movs	r1, #32
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f002 f869 	bl	8003060 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUT_LEFT_Pin BUT_RIGHT_Pin BUT_BACK_Pin BUT_SELECT_Pin */
  GPIO_InitStruct.Pin = BUT_LEFT_Pin|BUT_RIGHT_Pin|BUT_BACK_Pin|BUT_SELECT_Pin;
 8000f8e:	230f      	movs	r3, #15
 8000f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f92:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	481c      	ldr	r0, [pc, #112]	; (8001014 <_ZL12MX_GPIO_Initv+0xf0>)
 8000fa4:	f001 feba 	bl	8002d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_INDICATOR_Pin */
  GPIO_InitStruct.Pin = LED_INDICATOR_Pin;
 8000fa8:	2320      	movs	r3, #32
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_INDICATOR_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f001 feab 	bl	8002d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f001 fd49 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fd0:	2006      	movs	r0, #6
 8000fd2:	f001 fd62 	bl	8002a9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f001 fd41 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fe0:	2007      	movs	r0, #7
 8000fe2:	f001 fd5a 	bl	8002a9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2008      	movs	r0, #8
 8000fec:	f001 fd39 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000ff0:	2008      	movs	r0, #8
 8000ff2:	f001 fd52 	bl	8002a9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2009      	movs	r0, #9
 8000ffc:	f001 fd31 	bl	8002a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001000:	2009      	movs	r0, #9
 8001002:	f001 fd4a 	bl	8002a9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000
 8001014:	48000800 	.word	0x48000800

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv>:
                static T& getInstance()
 8001024:	b598      	push	{r3, r4, r7, lr}
 8001026:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d109      	bne.n	8001044 <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x20>
                        mInstance = new T();
 8001030:	2008      	movs	r0, #8
 8001032:	f004 fc09 	bl	8005848 <_Znwj>
 8001036:	4603      	mov	r3, r0
 8001038:	461c      	mov	r4, r3
 800103a:	4620      	mov	r0, r4
 800103c:	f004 fad0 	bl	80055e0 <_ZN4blib6ButtonC1Ev>
 8001040:	4b02      	ldr	r3, [pc, #8]	; (800104c <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8001042:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001044:	4b01      	ldr	r3, [pc, #4]	; (800104c <_ZN4blib2dp9SingletonINS_6ButtonEE11getInstanceEv+0x28>)
 8001046:	681b      	ldr	r3, [r3, #0]
                }
 8001048:	4618      	mov	r0, r3
 800104a:	bd98      	pop	{r3, r4, r7, pc}
 800104c:	200001f4 	.word	0x200001f4

08001050 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>:
                static T& getInstance()
 8001050:	b598      	push	{r3, r4, r7, lr}
 8001052:	af00      	add	r7, sp, #0
                    if (mInstance == nullptr)
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x20>
                        mInstance = new T();
 800105c:	2014      	movs	r0, #20
 800105e:	f004 fbf3 	bl	8005848 <_Znwj>
 8001062:	4603      	mov	r3, r0
 8001064:	461c      	mov	r4, r3
 8001066:	4620      	mov	r0, r4
 8001068:	f7ff f92a 	bl	80002c0 <_ZN4blib7MonitorC1Ev>
 800106c:	4b02      	ldr	r3, [pc, #8]	; (8001078 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 800106e:	601c      	str	r4, [r3, #0]
                    return *mInstance;
 8001070:	4b01      	ldr	r3, [pc, #4]	; (8001078 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv+0x28>)
 8001072:	681b      	ldr	r3, [r3, #0]
                }
 8001074:	4618      	mov	r0, r3
 8001076:	bd98      	pop	{r3, r4, r7, pc}
 8001078:	200001f0 	.word	0x200001f0

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <HAL_MspInit+0x44>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_MspInit+0x44>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_MspInit+0x44>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_MspInit+0x44>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a08      	ldr	r2, [pc, #32]	; (80010c0 <HAL_MspInit+0x44>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_MspInit+0x44>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	; 0x28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010e4:	d154      	bne.n	8001190 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_ADC_MspInit+0xd4>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a2b      	ldr	r2, [pc, #172]	; (8001198 <HAL_ADC_MspInit+0xd4>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_ADC_MspInit+0xd4>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_ADC_MspInit+0xd4>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	4a25      	ldr	r2, [pc, #148]	; (8001198 <HAL_ADC_MspInit+0xd4>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	6153      	str	r3, [r2, #20]
 800110a:	4b23      	ldr	r3, [pc, #140]	; (8001198 <HAL_ADC_MspInit+0xd4>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001116:	2303      	movs	r3, #3
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800111a:	2303      	movs	r3, #3
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f001 fdf6 	bl	8002d1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_ADC_MspInit+0xd8>)
 8001132:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <HAL_ADC_MspInit+0xdc>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_ADC_MspInit+0xd8>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_ADC_MspInit+0xd8>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_ADC_MspInit+0xd8>)
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_ADC_MspInit+0xd8>)
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_ADC_MspInit+0xd8>)
 8001152:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001156:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_ADC_MspInit+0xd8>)
 800115a:	2220      	movs	r2, #32
 800115c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_ADC_MspInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <HAL_ADC_MspInit+0xd8>)
 8001166:	f001 fcb2 	bl	8002ace <HAL_DMA_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001170:	f7ff ff52 	bl	8001018 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_ADC_MspInit+0xd8>)
 8001178:	639a      	str	r2, [r3, #56]	; 0x38
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_ADC_MspInit+0xd8>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2012      	movs	r0, #18
 8001186:	f001 fc6c 	bl	8002a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800118a:	2012      	movs	r0, #18
 800118c:	f001 fc85 	bl	8002a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	200000cc 	.word	0x200000cc
 80011a0:	40020008 	.word	0x40020008

080011a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a26      	ldr	r2, [pc, #152]	; (800125c <HAL_I2C_MspInit+0xb8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d145      	bne.n	8001252 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a25      	ldr	r2, [pc, #148]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fc:	2312      	movs	r3, #18
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001208:	2304      	movs	r3, #4
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001216:	f001 fd81 	bl	8002d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121e:	2312      	movs	r3, #18
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122a:	2304      	movs	r3, #4
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <HAL_I2C_MspInit+0xc0>)
 8001236:	f001 fd71 	bl	8002d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 8001240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_I2C_MspInit+0xbc>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40005400 	.word	0x40005400
 8001260:	40021000 	.word	0x40021000
 8001264:	48000400 	.word	0x48000400

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a17      	ldr	r2, [pc, #92]	; (80012e4 <HAL_UART_MspInit+0x7c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d128      	bne.n	80012dc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <HAL_UART_MspInit+0x80>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a16      	ldr	r2, [pc, #88]	; (80012e8 <HAL_UART_MspInit+0x80>)
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	61d3      	str	r3, [r2, #28]
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_UART_MspInit+0x80>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_UART_MspInit+0x80>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_UART_MspInit+0x80>)
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	6153      	str	r3, [r2, #20]
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_UART_MspInit+0x80>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ba:	230c      	movs	r3, #12
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ca:	2307      	movs	r3, #7
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f001 fd20 	bl	8002d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40004400 	.word	0x40004400
 80012e8:	40021000 	.word	0x40021000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 f90c 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_LEFT_Pin);
 8001344:	2001      	movs	r0, #1
 8001346:	f001 fea3 	bl	8003090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}

0800134e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_RIGHT_Pin);
 8001352:	2002      	movs	r0, #2
 8001354:	f001 fe9c 	bl	8003090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller interrupts.
  */
void EXTI2_TSC_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_BACK_Pin);
 8001360:	2004      	movs	r0, #4
 8001362:	f001 fe95 	bl	8003090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}

0800136a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT_SELECT_Pin);
 800136e:	2008      	movs	r0, #8
 8001370:	f001 fe8e 	bl	8003090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <DMA1_Channel1_IRQHandler+0x10>)
 800137e:	f001 fbed 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000cc 	.word	0x200000cc

0800138c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <ADC1_2_IRQHandler+0x10>)
 8001392:	f000 fb3b 	bl	8001a0c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000007c 	.word	0x2000007c

080013a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_kill>:

int _kill(int pid, int sig)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ba:	f004 fbb5 	bl	8005b28 <__errno>
 80013be:	4603      	mov	r3, r0
 80013c0:	2216      	movs	r2, #22
 80013c2:	601a      	str	r2, [r3, #0]
  return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_exit>:

void _exit (int status)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffe7 	bl	80013b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013e2:	e7fe      	b.n	80013e2 <_exit+0x12>

080013e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ec:	4a14      	ldr	r2, [pc, #80]	; (8001440 <_sbrk+0x5c>)
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <_sbrk+0x60>)
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <_sbrk+0x64>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <_sbrk+0x64>)
 8001402:	4a12      	ldr	r2, [pc, #72]	; (800144c <_sbrk+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	429a      	cmp	r2, r3
 8001412:	d207      	bcs.n	8001424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001414:	f004 fb88 	bl	8005b28 <__errno>
 8001418:	4603      	mov	r3, r0
 800141a:	220c      	movs	r2, #12
 800141c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
 8001422:	e009      	b.n	8001438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <_sbrk+0x64>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <_sbrk+0x64>)
 8001434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001436:	68fb      	ldr	r3, [r7, #12]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20010000 	.word	0x20010000
 8001444:	00000400 	.word	0x00000400
 8001448:	200001f8 	.word	0x200001f8
 800144c:	20000750 	.word	0x20000750

08001450 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <SystemInit+0x20>)
 8001456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145a:	4a05      	ldr	r2, [pc, #20]	; (8001470 <SystemInit+0x20>)
 800145c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001474:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001478:	f7ff ffea 	bl	8001450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480c      	ldr	r0, [pc, #48]	; (80014b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800147e:	490d      	ldr	r1, [pc, #52]	; (80014b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <LoopForever+0xe>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001494:	4c0a      	ldr	r4, [pc, #40]	; (80014c0 <LoopForever+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a2:	f004 fb47 	bl	8005b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014a6:	f7ff fb77 	bl	8000b98 <main>

080014aa <LoopForever>:

LoopForever:
    b LoopForever
 80014aa:	e7fe      	b.n	80014aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80014b8:	0800678c 	.word	0x0800678c
  ldr r2, =_sbss
 80014bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80014c0:	2000074c 	.word	0x2000074c

080014c4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c4:	e7fe      	b.n	80014c4 <ADC3_IRQHandler>
	...

080014c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x28>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x28>)
 80014d2:	f043 0310 	orr.w	r3, r3, #16
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f001 fab7 	bl	8002a4c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	200f      	movs	r0, #15
 80014e0:	f000 f808 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fdca 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000

080014f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f001 facf 	bl	8002ab6 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f001 fa97 	bl	8002a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	200001fc 	.word	0x200001fc

0800157c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	200001fc 	.word	0x200001fc

08001594 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b09a      	sub	sp, #104	; 0x68
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e1e3      	b.n	8001a00 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	2b00      	cmp	r3, #0
 8001648:	d176      	bne.n	8001738 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	2b00      	cmp	r3, #0
 8001650:	d152      	bne.n	80016f8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fd29 	bl	80010c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d13b      	bne.n	80016f8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f001 f8ad 	bl	80027e0 <ADC_Disable>
 8001686:	4603      	mov	r3, r0
 8001688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	d12f      	bne.n	80016f8 <HAL_ADC_Init+0xe0>
 8001698:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800169c:	2b00      	cmp	r3, #0
 800169e:	d12b      	bne.n	80016f8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a8:	f023 0302 	bic.w	r3, r3, #2
 80016ac:	f043 0202 	orr.w	r2, r3, #2
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016c2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016d2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016d4:	4b92      	ldr	r3, [pc, #584]	; (8001920 <HAL_ADC_Init+0x308>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_ADC_Init+0x30c>)
 80016da:	fba2 2303 	umull	r2, r3, r2, r3
 80016de:	0c9a      	lsrs	r2, r3, #18
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016ea:	e002      	b.n	80016f2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f9      	bne.n	80016ec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001714:	d110      	bne.n	8001738 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	f023 0312 	bic.w	r3, r3, #18
 800171e:	f043 0210 	orr.w	r2, r3, #16
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f043 0201 	orr.w	r2, r3, #1
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	f040 8150 	bne.w	80019e6 <HAL_ADC_Init+0x3ce>
 8001746:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800174a:	2b00      	cmp	r3, #0
 800174c:	f040 814b 	bne.w	80019e6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 8143 	bne.w	80019e6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001768:	f043 0202 	orr.w	r2, r3, #2
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001778:	d004      	beq.n	8001784 <HAL_ADC_Init+0x16c>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6a      	ldr	r2, [pc, #424]	; (8001928 <HAL_ADC_Init+0x310>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d101      	bne.n	8001788 <HAL_ADC_Init+0x170>
 8001784:	4b69      	ldr	r3, [pc, #420]	; (800192c <HAL_ADC_Init+0x314>)
 8001786:	e000      	b.n	800178a <HAL_ADC_Init+0x172>
 8001788:	4b69      	ldr	r3, [pc, #420]	; (8001930 <HAL_ADC_Init+0x318>)
 800178a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001794:	d102      	bne.n	800179c <HAL_ADC_Init+0x184>
 8001796:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_ADC_Init+0x310>)
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	e01a      	b.n	80017d2 <HAL_ADC_Init+0x1ba>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a61      	ldr	r2, [pc, #388]	; (8001928 <HAL_ADC_Init+0x310>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d103      	bne.n	80017ae <HAL_ADC_Init+0x196>
 80017a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e011      	b.n	80017d2 <HAL_ADC_Init+0x1ba>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_ADC_Init+0x31c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d102      	bne.n	80017be <HAL_ADC_Init+0x1a6>
 80017b8:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_ADC_Init+0x320>)
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e009      	b.n	80017d2 <HAL_ADC_Init+0x1ba>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <HAL_ADC_Init+0x320>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d102      	bne.n	80017ce <HAL_ADC_Init+0x1b6>
 80017c8:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <HAL_ADC_Init+0x31c>)
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	e001      	b.n	80017d2 <HAL_ADC_Init+0x1ba>
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d108      	bne.n	80017f2 <HAL_ADC_Init+0x1da>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_Init+0x1da>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_ADC_Init+0x1dc>
 80017f2:	2300      	movs	r3, #0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d11c      	bne.n	8001832 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d010      	beq.n	8001820 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_ADC_Init+0x202>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_ADC_Init+0x202>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_ADC_Init+0x204>
 800181a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800181c:	2b00      	cmp	r3, #0
 800181e:	d108      	bne.n	8001832 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	431a      	orrs	r2, r3
 800182e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001830:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7e5b      	ldrb	r3, [r3, #25]
 8001836:	035b      	lsls	r3, r3, #13
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800183c:	2a01      	cmp	r2, #1
 800183e:	d002      	beq.n	8001846 <HAL_ADC_Init+0x22e>
 8001840:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001844:	e000      	b.n	8001848 <HAL_ADC_Init+0x230>
 8001846:	2200      	movs	r2, #0
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4313      	orrs	r3, r2
 8001856:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001858:	4313      	orrs	r3, r2
 800185a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d11b      	bne.n	800189e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7e5b      	ldrb	r3, [r3, #25]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	3b01      	subs	r3, #1
 8001874:	045a      	lsls	r2, r3, #17
 8001876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001878:	4313      	orrs	r3, r2
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	663b      	str	r3, [r7, #96]	; 0x60
 8001880:	e00d      	b.n	800189e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800188a:	f043 0220 	orr.w	r2, r3, #32
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d054      	beq.n	8001950 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <HAL_ADC_Init+0x31c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d004      	beq.n	80018ba <HAL_ADC_Init+0x2a2>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a20      	ldr	r2, [pc, #128]	; (8001938 <HAL_ADC_Init+0x320>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d140      	bne.n	800193c <HAL_ADC_Init+0x324>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80018c2:	d02a      	beq.n	800191a <HAL_ADC_Init+0x302>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018cc:	d022      	beq.n	8001914 <HAL_ADC_Init+0x2fc>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80018d6:	d01a      	beq.n	800190e <HAL_ADC_Init+0x2f6>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80018e0:	d012      	beq.n	8001908 <HAL_ADC_Init+0x2f0>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80018ea:	d00a      	beq.n	8001902 <HAL_ADC_Init+0x2ea>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80018f4:	d002      	beq.n	80018fc <HAL_ADC_Init+0x2e4>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	e023      	b.n	8001944 <HAL_ADC_Init+0x32c>
 80018fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001900:	e020      	b.n	8001944 <HAL_ADC_Init+0x32c>
 8001902:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001906:	e01d      	b.n	8001944 <HAL_ADC_Init+0x32c>
 8001908:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800190c:	e01a      	b.n	8001944 <HAL_ADC_Init+0x32c>
 800190e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001912:	e017      	b.n	8001944 <HAL_ADC_Init+0x32c>
 8001914:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001918:	e014      	b.n	8001944 <HAL_ADC_Init+0x32c>
 800191a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800191e:	e011      	b.n	8001944 <HAL_ADC_Init+0x32c>
 8001920:	20000000 	.word	0x20000000
 8001924:	431bde83 	.word	0x431bde83
 8001928:	50000100 	.word	0x50000100
 800192c:	50000300 	.word	0x50000300
 8001930:	50000700 	.word	0x50000700
 8001934:	50000400 	.word	0x50000400
 8001938:	50000500 	.word	0x50000500
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001948:	4313      	orrs	r3, r2
 800194a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800194c:	4313      	orrs	r3, r2
 800194e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b00      	cmp	r3, #0
 800195c:	d114      	bne.n	8001988 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800196c:	f023 0302 	bic.w	r3, r3, #2
 8001970:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7e1b      	ldrb	r3, [r3, #24]
 8001976:	039a      	lsls	r2, r3, #14
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4313      	orrs	r3, r2
 8001982:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001984:	4313      	orrs	r3, r2
 8001986:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_ADC_Init+0x3f0>)
 8001990:	4013      	ands	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001998:	430b      	orrs	r3, r1
 800199a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d10c      	bne.n	80019be <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f023 010f 	bic.w	r1, r3, #15
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	1e5a      	subs	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	631a      	str	r2, [r3, #48]	; 0x30
 80019bc:	e007      	b.n	80019ce <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 020f 	bic.w	r2, r2, #15
 80019cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f023 0303 	bic.w	r3, r3, #3
 80019dc:	f043 0201 	orr.w	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
 80019e4:	e00a      	b.n	80019fc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f023 0312 	bic.w	r3, r3, #18
 80019ee:	f043 0210 	orr.w	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80019fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3768      	adds	r7, #104	; 0x68
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	fff0c007 	.word	0xfff0c007

08001a0c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <HAL_ADC_IRQHandler+0x38>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10b      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80bc 	beq.w	8001bc8 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80b6 	beq.w	8001bc8 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7c:	d004      	beq.n	8001a88 <HAL_ADC_IRQHandler+0x7c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a90      	ldr	r2, [pc, #576]	; (8001cc4 <HAL_ADC_IRQHandler+0x2b8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d106      	bne.n	8001a96 <HAL_ADC_IRQHandler+0x8a>
 8001a88:	4b8f      	ldr	r3, [pc, #572]	; (8001cc8 <HAL_ADC_IRQHandler+0x2bc>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d03e      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x106>
 8001a94:	e005      	b.n	8001aa2 <HAL_ADC_IRQHandler+0x96>
 8001a96:	4b8d      	ldr	r3, [pc, #564]	; (8001ccc <HAL_ADC_IRQHandler+0x2c0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 031f 	and.w	r3, r3, #31
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d037      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x106>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aaa:	d004      	beq.n	8001ab6 <HAL_ADC_IRQHandler+0xaa>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a84      	ldr	r2, [pc, #528]	; (8001cc4 <HAL_ADC_IRQHandler+0x2b8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d106      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0xb8>
 8001ab6:	4b84      	ldr	r3, [pc, #528]	; (8001cc8 <HAL_ADC_IRQHandler+0x2bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2b05      	cmp	r3, #5
 8001ac0:	d027      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x106>
 8001ac2:	e005      	b.n	8001ad0 <HAL_ADC_IRQHandler+0xc4>
 8001ac4:	4b81      	ldr	r3, [pc, #516]	; (8001ccc <HAL_ADC_IRQHandler+0x2c0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 031f 	and.w	r3, r3, #31
 8001acc:	2b05      	cmp	r3, #5
 8001ace:	d020      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x106>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad8:	d004      	beq.n	8001ae4 <HAL_ADC_IRQHandler+0xd8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a79      	ldr	r2, [pc, #484]	; (8001cc4 <HAL_ADC_IRQHandler+0x2b8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_IRQHandler+0xe6>
 8001ae4:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <HAL_ADC_IRQHandler+0x2bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	d010      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x106>
 8001af0:	e005      	b.n	8001afe <HAL_ADC_IRQHandler+0xf2>
 8001af2:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <HAL_ADC_IRQHandler+0x2c0>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 031f 	and.w	r3, r3, #31
 8001afa:	2b09      	cmp	r3, #9
 8001afc:	d009      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x106>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_IRQHandler+0x106>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a70      	ldr	r2, [pc, #448]	; (8001cd0 <HAL_ADC_IRQHandler+0x2c4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d104      	bne.n	8001b1c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	e00f      	b.n	8001b3c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b24:	d004      	beq.n	8001b30 <HAL_ADC_IRQHandler+0x124>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a66      	ldr	r2, [pc, #408]	; (8001cc4 <HAL_ADC_IRQHandler+0x2b8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d102      	bne.n	8001b36 <HAL_ADC_IRQHandler+0x12a>
 8001b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b34:	e000      	b.n	8001b38 <HAL_ADC_IRQHandler+0x12c>
 8001b36:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_ADC_IRQHandler+0x2c4>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d137      	bne.n	8001bba <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d132      	bne.n	8001bba <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d02d      	beq.n	8001bba <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d11a      	bne.n	8001ba2 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020c 	bic.w	r2, r2, #12
 8001b7a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d112      	bne.n	8001bba <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	f043 0201 	orr.w	r2, r3, #1
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba0:	e00b      	b.n	8001bba <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f043 0210 	orr.w	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff fd0e 	bl	80015dc <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	220c      	movs	r2, #12
 8001bc6:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	f003 0320 	and.w	r3, r3, #32
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d004      	beq.n	8001bdc <HAL_ADC_IRQHandler+0x1d0>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10b      	bne.n	8001bf4 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8138 	beq.w	8001e58 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 8132 	beq.w	8001e58 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c08:	d004      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x208>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a2d      	ldr	r2, [pc, #180]	; (8001cc4 <HAL_ADC_IRQHandler+0x2b8>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d106      	bne.n	8001c22 <HAL_ADC_IRQHandler+0x216>
 8001c14:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <HAL_ADC_IRQHandler+0x2bc>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 031f 	and.w	r3, r3, #31
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d03e      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x292>
 8001c20:	e005      	b.n	8001c2e <HAL_ADC_IRQHandler+0x222>
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_ADC_IRQHandler+0x2c0>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d037      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x292>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c36:	d004      	beq.n	8001c42 <HAL_ADC_IRQHandler+0x236>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a21      	ldr	r2, [pc, #132]	; (8001cc4 <HAL_ADC_IRQHandler+0x2b8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d106      	bne.n	8001c50 <HAL_ADC_IRQHandler+0x244>
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_ADC_IRQHandler+0x2bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 031f 	and.w	r3, r3, #31
 8001c4a:	2b05      	cmp	r3, #5
 8001c4c:	d027      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x292>
 8001c4e:	e005      	b.n	8001c5c <HAL_ADC_IRQHandler+0x250>
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_ADC_IRQHandler+0x2c0>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d020      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x292>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c64:	d004      	beq.n	8001c70 <HAL_ADC_IRQHandler+0x264>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a16      	ldr	r2, [pc, #88]	; (8001cc4 <HAL_ADC_IRQHandler+0x2b8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d106      	bne.n	8001c7e <HAL_ADC_IRQHandler+0x272>
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_ADC_IRQHandler+0x2bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d010      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x292>
 8001c7c:	e005      	b.n	8001c8a <HAL_ADC_IRQHandler+0x27e>
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <HAL_ADC_IRQHandler+0x2c0>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	d009      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x292>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c92:	d004      	beq.n	8001c9e <HAL_ADC_IRQHandler+0x292>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_ADC_IRQHandler+0x2c4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d104      	bne.n	8001ca8 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	e018      	b.n	8001cda <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb0:	d004      	beq.n	8001cbc <HAL_ADC_IRQHandler+0x2b0>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a03      	ldr	r2, [pc, #12]	; (8001cc4 <HAL_ADC_IRQHandler+0x2b8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d10b      	bne.n	8001cd4 <HAL_ADC_IRQHandler+0x2c8>
 8001cbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cc0:	e009      	b.n	8001cd6 <HAL_ADC_IRQHandler+0x2ca>
 8001cc2:	bf00      	nop
 8001cc4:	50000100 	.word	0x50000100
 8001cc8:	50000300 	.word	0x50000300
 8001ccc:	50000700 	.word	0x50000700
 8001cd0:	50000400 	.word	0x50000400
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_ADC_IRQHandler+0x514>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 80b0 	bne.w	8001e4a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00d      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f040 80a3 	bne.w	8001e4a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 809d 	bne.w	8001e4a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 8097 	beq.w	8001e4a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d24:	d004      	beq.n	8001d30 <HAL_ADC_IRQHandler+0x324>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a7e      	ldr	r2, [pc, #504]	; (8001f24 <HAL_ADC_IRQHandler+0x518>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d106      	bne.n	8001d3e <HAL_ADC_IRQHandler+0x332>
 8001d30:	4b7d      	ldr	r3, [pc, #500]	; (8001f28 <HAL_ADC_IRQHandler+0x51c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 031f 	and.w	r3, r3, #31
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d03e      	beq.n	8001dba <HAL_ADC_IRQHandler+0x3ae>
 8001d3c:	e005      	b.n	8001d4a <HAL_ADC_IRQHandler+0x33e>
 8001d3e:	4b7b      	ldr	r3, [pc, #492]	; (8001f2c <HAL_ADC_IRQHandler+0x520>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f003 031f 	and.w	r3, r3, #31
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d037      	beq.n	8001dba <HAL_ADC_IRQHandler+0x3ae>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d52:	d004      	beq.n	8001d5e <HAL_ADC_IRQHandler+0x352>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a72      	ldr	r2, [pc, #456]	; (8001f24 <HAL_ADC_IRQHandler+0x518>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d106      	bne.n	8001d6c <HAL_ADC_IRQHandler+0x360>
 8001d5e:	4b72      	ldr	r3, [pc, #456]	; (8001f28 <HAL_ADC_IRQHandler+0x51c>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d027      	beq.n	8001dba <HAL_ADC_IRQHandler+0x3ae>
 8001d6a:	e005      	b.n	8001d78 <HAL_ADC_IRQHandler+0x36c>
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_ADC_IRQHandler+0x520>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	2b06      	cmp	r3, #6
 8001d76:	d020      	beq.n	8001dba <HAL_ADC_IRQHandler+0x3ae>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d80:	d004      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x380>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a67      	ldr	r2, [pc, #412]	; (8001f24 <HAL_ADC_IRQHandler+0x518>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d106      	bne.n	8001d9a <HAL_ADC_IRQHandler+0x38e>
 8001d8c:	4b66      	ldr	r3, [pc, #408]	; (8001f28 <HAL_ADC_IRQHandler+0x51c>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	d010      	beq.n	8001dba <HAL_ADC_IRQHandler+0x3ae>
 8001d98:	e005      	b.n	8001da6 <HAL_ADC_IRQHandler+0x39a>
 8001d9a:	4b64      	ldr	r3, [pc, #400]	; (8001f2c <HAL_ADC_IRQHandler+0x520>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2b07      	cmp	r3, #7
 8001da4:	d009      	beq.n	8001dba <HAL_ADC_IRQHandler+0x3ae>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dae:	d004      	beq.n	8001dba <HAL_ADC_IRQHandler+0x3ae>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a5a      	ldr	r2, [pc, #360]	; (8001f20 <HAL_ADC_IRQHandler+0x514>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d104      	bne.n	8001dc4 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e00f      	b.n	8001de4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dcc:	d004      	beq.n	8001dd8 <HAL_ADC_IRQHandler+0x3cc>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a54      	ldr	r2, [pc, #336]	; (8001f24 <HAL_ADC_IRQHandler+0x518>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d102      	bne.n	8001dde <HAL_ADC_IRQHandler+0x3d2>
 8001dd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_IRQHandler+0x3d4>
 8001dde:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_ADC_IRQHandler+0x514>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d12d      	bne.n	8001e4a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11a      	bne.n	8001e32 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e0a:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d112      	bne.n	8001e4a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e30:	e00b      	b.n	8001e4a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0210 	orr.w	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f043 0201 	orr.w	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f8c4 	bl	8001fd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2260      	movs	r2, #96	; 0x60
 8001e56:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d011      	beq.n	8001e86 <HAL_ADC_IRQHandler+0x47a>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00c      	beq.n	8001e86 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff fbb9 	bl	80015f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d012      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x4aa>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8aa 	bl	8002000 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eb4:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d012      	beq.n	8001ee6 <HAL_ADC_IRQHandler+0x4da>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f89c 	bl	8002014 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d04f      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x584>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d04a      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d102      	bne.n	8001f08 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
 8001f06:	e02d      	b.n	8001f64 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f10:	d004      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x510>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a03      	ldr	r2, [pc, #12]	; (8001f24 <HAL_ADC_IRQHandler+0x518>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d109      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x524>
 8001f1c:	4b02      	ldr	r3, [pc, #8]	; (8001f28 <HAL_ADC_IRQHandler+0x51c>)
 8001f1e:	e008      	b.n	8001f32 <HAL_ADC_IRQHandler+0x526>
 8001f20:	50000400 	.word	0x50000400
 8001f24:	50000100 	.word	0x50000100
 8001f28:	50000300 	.word	0x50000300
 8001f2c:	50000700 	.word	0x50000700
 8001f30:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <HAL_ADC_IRQHandler+0x5c8>)
 8001f32:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10a      	bne.n	8001f64 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	e007      	b.n	8001f64 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8001f60:	2301      	movs	r3, #1
 8001f62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10e      	bne.n	8001f88 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f043 0202 	orr.w	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fb3e 	bl	8001604 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d018      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x5c0>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d013      	beq.n	8001fcc <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f043 0208 	orr.w	r2, r3, #8
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f810 	bl	8001fec <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	50000700 	.word	0x50000700

08001fd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b09b      	sub	sp, #108	; 0x6c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x22>
 8002046:	2302      	movs	r3, #2
 8002048:	e2c8      	b.n	80025dc <HAL_ADC_ConfigChannel+0x5b4>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 82ac 	bne.w	80025ba <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d81c      	bhi.n	80020a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	461a      	mov	r2, r3
 800207e:	231f      	movs	r3, #31
 8002080:	4093      	lsls	r3, r2
 8002082:	43db      	mvns	r3, r3
 8002084:	4019      	ands	r1, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
 80020a2:	e063      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d81e      	bhi.n	80020ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	3b1e      	subs	r3, #30
 80020c0:	221f      	movs	r2, #31
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4019      	ands	r1, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	3b1e      	subs	r3, #30
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34
 80020e8:	e040      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b0e      	cmp	r3, #14
 80020f0:	d81e      	bhi.n	8002130 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	3b3c      	subs	r3, #60	; 0x3c
 8002106:	221f      	movs	r2, #31
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	4019      	ands	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	3b3c      	subs	r3, #60	; 0x3c
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
 800212e:	e01d      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	3b5a      	subs	r3, #90	; 0x5a
 8002144:	221f      	movs	r2, #31
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	4019      	ands	r1, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	3b5a      	subs	r3, #90	; 0x5a
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80e5 	bne.w	8002346 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b09      	cmp	r3, #9
 8002182:	d91c      	bls.n	80021be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6999      	ldr	r1, [r3, #24]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	3b1e      	subs	r3, #30
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	619a      	str	r2, [r3, #24]
 80021bc:	e019      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6898      	ldr	r0, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	3b01      	subs	r3, #1
 8002210:	2b03      	cmp	r3, #3
 8002212:	d84f      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x28c>
 8002214:	a201      	add	r2, pc, #4	; (adr r2, 800221c <HAL_ADC_ConfigChannel+0x1f4>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800224f 	.word	0x0800224f
 8002224:	08002271 	.word	0x08002271
 8002228:	08002293 	.word	0x08002293
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002232:	4b99      	ldr	r3, [pc, #612]	; (8002498 <HAL_ADC_ConfigChannel+0x470>)
 8002234:	4013      	ands	r3, r2
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	0691      	lsls	r1, r2, #26
 800223c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800223e:	430a      	orrs	r2, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800224a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800224c:	e07b      	b.n	8002346 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002254:	4b90      	ldr	r3, [pc, #576]	; (8002498 <HAL_ADC_ConfigChannel+0x470>)
 8002256:	4013      	ands	r3, r2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	0691      	lsls	r1, r2, #26
 800225e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002260:	430a      	orrs	r2, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800226c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800226e:	e06a      	b.n	8002346 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002276:	4b88      	ldr	r3, [pc, #544]	; (8002498 <HAL_ADC_ConfigChannel+0x470>)
 8002278:	4013      	ands	r3, r2
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	0691      	lsls	r1, r2, #26
 8002280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002282:	430a      	orrs	r2, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800228e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002290:	e059      	b.n	8002346 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002298:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <HAL_ADC_ConfigChannel+0x470>)
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	0691      	lsls	r1, r2, #26
 80022a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b2:	e048      	b.n	8002346 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	069b      	lsls	r3, r3, #26
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	069b      	lsls	r3, r3, #26
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022fa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800231e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002342:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002344:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d108      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x33e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x33e>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_ADC_ConfigChannel+0x340>
 8002366:	2300      	movs	r3, #0
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 8131 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d00f      	beq.n	8002396 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43da      	mvns	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	400a      	ands	r2, r1
 8002390:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002394:	e049      	b.n	800242a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2201      	movs	r2, #1
 80023a4:	409a      	lsls	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b09      	cmp	r3, #9
 80023b6:	d91c      	bls.n	80023f2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6999      	ldr	r1, [r3, #24]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	3b1b      	subs	r3, #27
 80023ca:	2207      	movs	r2, #7
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4019      	ands	r1, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6898      	ldr	r0, [r3, #8]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	3b1b      	subs	r3, #27
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]
 80023f0:	e01b      	b.n	800242a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6959      	ldr	r1, [r3, #20]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	2207      	movs	r2, #7
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	4019      	ands	r1, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6898      	ldr	r0, [r3, #8]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	fa00 f203 	lsl.w	r2, r0, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002432:	d004      	beq.n	800243e <HAL_ADC_ConfigChannel+0x416>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_ADC_ConfigChannel+0x474>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x41a>
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <HAL_ADC_ConfigChannel+0x478>)
 8002440:	e000      	b.n	8002444 <HAL_ADC_ConfigChannel+0x41c>
 8002442:	4b18      	ldr	r3, [pc, #96]	; (80024a4 <HAL_ADC_ConfigChannel+0x47c>)
 8002444:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b10      	cmp	r3, #16
 800244c:	d105      	bne.n	800245a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800244e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800245e:	2b11      	cmp	r3, #17
 8002460:	d105      	bne.n	800246e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002462:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00b      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002472:	2b12      	cmp	r3, #18
 8002474:	f040 80ac 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 80a5 	bne.w	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x480>
 8002490:	4b02      	ldr	r3, [pc, #8]	; (800249c <HAL_ADC_ConfigChannel+0x474>)
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e023      	b.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 8002496:	bf00      	nop
 8002498:	83fff000 	.word	0x83fff000
 800249c:	50000100 	.word	0x50000100
 80024a0:	50000300 	.word	0x50000300
 80024a4:	50000700 	.word	0x50000700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4e      	ldr	r2, [pc, #312]	; (80025e8 <HAL_ADC_ConfigChannel+0x5c0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d103      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x492>
 80024b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e011      	b.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_ADC_ConfigChannel+0x5c4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x4a2>
 80024c4:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e009      	b.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a48      	ldr	r2, [pc, #288]	; (80025f0 <HAL_ADC_ConfigChannel+0x5c8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <HAL_ADC_ConfigChannel+0x4b2>
 80024d4:	4b45      	ldr	r3, [pc, #276]	; (80025ec <HAL_ADC_ConfigChannel+0x5c4>)
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	e001      	b.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x4d6>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x4d6>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_ADC_ConfigChannel+0x4d8>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d150      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002504:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d010      	beq.n	800252c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x4fe>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x4fe>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_ADC_ConfigChannel+0x500>
 8002526:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002528:	2b00      	cmp	r3, #0
 800252a:	d13c      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2b10      	cmp	r3, #16
 8002532:	d11d      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x548>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800253c:	d118      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800253e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002548:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <HAL_ADC_ConfigChannel+0x5cc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	0c9a      	lsrs	r2, r3, #18
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002560:	e002      	b.n	8002568 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3b01      	subs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800256e:	e02e      	b.n	80025ce <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b11      	cmp	r3, #17
 8002576:	d10b      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x568>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002580:	d106      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800258a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800258c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800258e:	e01e      	b.n	80025ce <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b12      	cmp	r3, #18
 8002596:	d11a      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025a2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025a4:	e013      	b.n	80025ce <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025b8:	e00a      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f043 0220 	orr.w	r2, r3, #32
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80025cc:	e000      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80025ce:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80025d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80025dc:	4618      	mov	r0, r3
 80025de:	376c      	adds	r7, #108	; 0x6c
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	50000100 	.word	0x50000100
 80025ec:	50000400 	.word	0x50000400
 80025f0:	50000500 	.word	0x50000500
 80025f4:	20000000 	.word	0x20000000
 80025f8:	431bde83 	.word	0x431bde83

080025fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b099      	sub	sp, #100	; 0x64
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002614:	d102      	bne.n	800261c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002616:	4b6d      	ldr	r3, [pc, #436]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	e01a      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6a      	ldr	r2, [pc, #424]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d103      	bne.n	800262e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002626:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	e011      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a67      	ldr	r2, [pc, #412]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d102      	bne.n	800263e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002638:	4b66      	ldr	r3, [pc, #408]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	e009      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a64      	ldr	r2, [pc, #400]	; (80027d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d102      	bne.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002648:	4b61      	ldr	r3, [pc, #388]	; (80027d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	e001      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0b0      	b.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002666:	2302      	movs	r3, #2
 8002668:	e0a9      	b.n	80027be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 808d 	bne.w	800279c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	f040 8086 	bne.w	800279c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002698:	d004      	beq.n	80026a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a4b      	ldr	r2, [pc, #300]	; (80027cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80026a4:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80026a6:	e000      	b.n	80026aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80026a8:	4b4c      	ldr	r3, [pc, #304]	; (80027dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80026aa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d040      	beq.n	8002736 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80026b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6859      	ldr	r1, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c6:	035b      	lsls	r3, r3, #13
 80026c8:	430b      	orrs	r3, r1
 80026ca:	431a      	orrs	r2, r3
 80026cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ce:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d108      	bne.n	80026f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d15c      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d107      	bne.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800270e:	2301      	movs	r3, #1
 8002710:	e000      	b.n	8002714 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002712:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	d14b      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002720:	f023 030f 	bic.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	6811      	ldr	r1, [r2, #0]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	6892      	ldr	r2, [r2, #8]
 800272c:	430a      	orrs	r2, r1
 800272e:	431a      	orrs	r2, r3
 8002730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002732:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002734:	e03c      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800273e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002740:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d108      	bne.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d123      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d107      	bne.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002784:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002786:	2b00      	cmp	r3, #0
 8002788:	d112      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800278a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002792:	f023 030f 	bic.w	r3, r3, #15
 8002796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002798:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800279a:	e009      	b.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	f043 0220 	orr.w	r2, r3, #32
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80027ae:	e000      	b.n	80027b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027b0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80027ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80027be:	4618      	mov	r0, r3
 80027c0:	3764      	adds	r7, #100	; 0x64
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	50000100 	.word	0x50000100
 80027d0:	50000400 	.word	0x50000400
 80027d4:	50000500 	.word	0x50000500
 80027d8:	50000300 	.word	0x50000300
 80027dc:	50000700 	.word	0x50000700

080027e0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d108      	bne.n	800280c <ADC_Disable+0x2c>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <ADC_Disable+0x2c>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <ADC_Disable+0x2e>
 800280c:	2300      	movs	r3, #0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d047      	beq.n	80028a2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 030d 	and.w	r3, r3, #13
 800281c:	2b01      	cmp	r3, #1
 800281e:	d10f      	bne.n	8002840 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0202 	orr.w	r2, r2, #2
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2203      	movs	r2, #3
 8002836:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002838:	f7fe fea0 	bl	800157c <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800283e:	e029      	b.n	8002894 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f043 0210 	orr.w	r2, r3, #16
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e023      	b.n	80028a4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800285c:	f7fe fe8e 	bl	800157c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d914      	bls.n	8002894 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b01      	cmp	r3, #1
 8002876:	d10d      	bne.n	8002894 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f043 0210 	orr.w	r2, r3, #16
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	f043 0201 	orr.w	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e007      	b.n	80028a4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d0dc      	beq.n	800285c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c8:	4013      	ands	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028de:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <__NVIC_SetPriorityGrouping+0x44>)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	60d3      	str	r3, [r2, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	e000ed00 	.word	0xe000ed00

080028f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <__NVIC_GetPriorityGrouping+0x18>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	0a1b      	lsrs	r3, r3, #8
 80028fe:	f003 0307 	and.w	r3, r3, #7
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4907      	ldr	r1, [pc, #28]	; (8002948 <__NVIC_EnableIRQ+0x38>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	; (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	; (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f1c3 0307 	rsb	r3, r3, #7
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	bf28      	it	cs
 80029be:	2304      	movcs	r3, #4
 80029c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3304      	adds	r3, #4
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d902      	bls.n	80029d0 <NVIC_EncodePriority+0x30>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3b03      	subs	r3, #3
 80029ce:	e000      	b.n	80029d2 <NVIC_EncodePriority+0x32>
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d4:	f04f 32ff 	mov.w	r2, #4294967295
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43da      	mvns	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	401a      	ands	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	fa01 f303 	lsl.w	r3, r1, r3
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	4313      	orrs	r3, r2
         );
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a18:	d301      	bcc.n	8002a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00f      	b.n	8002a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <SysTick_Config+0x40>)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a26:	210f      	movs	r1, #15
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295
 8002a2c:	f7ff ff8e 	bl	800294c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <SysTick_Config+0x40>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a36:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <SysTick_Config+0x40>)
 8002a38:	2207      	movs	r2, #7
 8002a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	e000e010 	.word	0xe000e010

08002a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f7ff ff29 	bl	80028ac <__NVIC_SetPriorityGrouping>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b086      	sub	sp, #24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a74:	f7ff ff3e 	bl	80028f4 <__NVIC_GetPriorityGrouping>
 8002a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68b9      	ldr	r1, [r7, #8]
 8002a7e:	6978      	ldr	r0, [r7, #20]
 8002a80:	f7ff ff8e 	bl	80029a0 <NVIC_EncodePriority>
 8002a84:	4602      	mov	r2, r0
 8002a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff5d 	bl	800294c <__NVIC_SetPriority>
}
 8002a92:	bf00      	nop
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff31 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff ffa2 	bl	8002a08 <SysTick_Config>
 8002ac4:	4603      	mov	r3, r0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e037      	b.n	8002b54 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002afa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002afe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f8b4 	bl	8002ca4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}  
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2204      	movs	r2, #4
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d024      	beq.n	8002bce <HAL_DMA_IRQHandler+0x72>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d01f      	beq.n	8002bce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d107      	bne.n	8002bac <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0204 	bic.w	r2, r2, #4
 8002baa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002bba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d06a      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002bcc:	e065      	b.n	8002c9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d02c      	beq.n	8002c38 <HAL_DMA_IRQHandler+0xdc>
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d027      	beq.n	8002c38 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 020a 	bic.w	r2, r2, #10
 8002c04:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	2102      	movs	r1, #2
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d035      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002c36:	e030      	b.n	8002c9a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d028      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x13e>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d023      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 020e 	bic.w	r2, r2, #14
 8002c60:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c70:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
    }
  }
}  
 8002c98:	e7ff      	b.n	8002c9a <HAL_DMA_IRQHandler+0x13e>
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <DMA_CalcBaseAndBitshift+0x60>)
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d80f      	bhi.n	8002cd8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <DMA_CalcBaseAndBitshift+0x64>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <DMA_CalcBaseAndBitshift+0x68>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	009a      	lsls	r2, r3, #2
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <DMA_CalcBaseAndBitshift+0x6c>)
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002cd6:	e00e      	b.n	8002cf6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <DMA_CalcBaseAndBitshift+0x70>)
 8002ce0:	4413      	add	r3, r2
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <DMA_CalcBaseAndBitshift+0x68>)
 8002ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	009a      	lsls	r2, r3, #2
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <DMA_CalcBaseAndBitshift+0x74>)
 8002cf4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40020407 	.word	0x40020407
 8002d08:	bffdfff8 	.word	0xbffdfff8
 8002d0c:	cccccccd 	.word	0xcccccccd
 8002d10:	40020000 	.word	0x40020000
 8002d14:	bffdfbf8 	.word	0xbffdfbf8
 8002d18:	40020400 	.word	0x40020400

08002d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b087      	sub	sp, #28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d2a:	e160      	b.n	8002fee <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f000 8152 	beq.w	8002fe8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0303 	and.w	r3, r3, #3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d005      	beq.n	8002d5c <HAL_GPIO_Init+0x40>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d130      	bne.n	8002dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	2203      	movs	r2, #3
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d92:	2201      	movs	r2, #1
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 0201 	and.w	r2, r3, #1
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d017      	beq.n	8002dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4013      	ands	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d123      	bne.n	8002e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	08da      	lsrs	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	3208      	adds	r2, #8
 8002e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	220f      	movs	r2, #15
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	08da      	lsrs	r2, r3, #3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3208      	adds	r2, #8
 8002e48:	6939      	ldr	r1, [r7, #16]
 8002e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	2203      	movs	r2, #3
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0203 	and.w	r2, r3, #3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80ac 	beq.w	8002fe8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e90:	4b5e      	ldr	r3, [pc, #376]	; (800300c <HAL_GPIO_Init+0x2f0>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	4a5d      	ldr	r2, [pc, #372]	; (800300c <HAL_GPIO_Init+0x2f0>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6193      	str	r3, [r2, #24]
 8002e9c:	4b5b      	ldr	r3, [pc, #364]	; (800300c <HAL_GPIO_Init+0x2f0>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ea8:	4a59      	ldr	r2, [pc, #356]	; (8003010 <HAL_GPIO_Init+0x2f4>)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	220f      	movs	r2, #15
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ed2:	d025      	beq.n	8002f20 <HAL_GPIO_Init+0x204>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a4f      	ldr	r2, [pc, #316]	; (8003014 <HAL_GPIO_Init+0x2f8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d01f      	beq.n	8002f1c <HAL_GPIO_Init+0x200>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a4e      	ldr	r2, [pc, #312]	; (8003018 <HAL_GPIO_Init+0x2fc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d019      	beq.n	8002f18 <HAL_GPIO_Init+0x1fc>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a4d      	ldr	r2, [pc, #308]	; (800301c <HAL_GPIO_Init+0x300>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_GPIO_Init+0x1f8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a4c      	ldr	r2, [pc, #304]	; (8003020 <HAL_GPIO_Init+0x304>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00d      	beq.n	8002f10 <HAL_GPIO_Init+0x1f4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a4b      	ldr	r2, [pc, #300]	; (8003024 <HAL_GPIO_Init+0x308>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <HAL_GPIO_Init+0x1f0>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a4a      	ldr	r2, [pc, #296]	; (8003028 <HAL_GPIO_Init+0x30c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_GPIO_Init+0x1ec>
 8002f04:	2306      	movs	r3, #6
 8002f06:	e00c      	b.n	8002f22 <HAL_GPIO_Init+0x206>
 8002f08:	2307      	movs	r3, #7
 8002f0a:	e00a      	b.n	8002f22 <HAL_GPIO_Init+0x206>
 8002f0c:	2305      	movs	r3, #5
 8002f0e:	e008      	b.n	8002f22 <HAL_GPIO_Init+0x206>
 8002f10:	2304      	movs	r3, #4
 8002f12:	e006      	b.n	8002f22 <HAL_GPIO_Init+0x206>
 8002f14:	2303      	movs	r3, #3
 8002f16:	e004      	b.n	8002f22 <HAL_GPIO_Init+0x206>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e002      	b.n	8002f22 <HAL_GPIO_Init+0x206>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <HAL_GPIO_Init+0x206>
 8002f20:	2300      	movs	r3, #0
 8002f22:	697a      	ldr	r2, [r7, #20]
 8002f24:	f002 0203 	and.w	r2, r2, #3
 8002f28:	0092      	lsls	r2, r2, #2
 8002f2a:	4093      	lsls	r3, r2
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f32:	4937      	ldr	r1, [pc, #220]	; (8003010 <HAL_GPIO_Init+0x2f4>)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	3302      	adds	r3, #2
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f40:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_GPIO_Init+0x310>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f64:	4a31      	ldr	r2, [pc, #196]	; (800302c <HAL_GPIO_Init+0x310>)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_GPIO_Init+0x310>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f8e:	4a27      	ldr	r2, [pc, #156]	; (800302c <HAL_GPIO_Init+0x310>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_GPIO_Init+0x310>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002fb8:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_GPIO_Init+0x310>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <HAL_GPIO_Init+0x310>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fe2:	4a12      	ldr	r2, [pc, #72]	; (800302c <HAL_GPIO_Init+0x310>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3301      	adds	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f47f ae97 	bne.w	8002d2c <HAL_GPIO_Init+0x10>
  }
}
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40021000 	.word	0x40021000
 8003010:	40010000 	.word	0x40010000
 8003014:	48000400 	.word	0x48000400
 8003018:	48000800 	.word	0x48000800
 800301c:	48000c00 	.word	0x48000c00
 8003020:	48001000 	.word	0x48001000
 8003024:	48001400 	.word	0x48001400
 8003028:	48001800 	.word	0x48001800
 800302c:	40010400 	.word	0x40010400

08003030 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	887b      	ldrh	r3, [r7, #2]
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e001      	b.n	8003052 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003052:	7bfb      	ldrb	r3, [r7, #15]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	807b      	strh	r3, [r7, #2]
 800306c:	4613      	mov	r3, r2
 800306e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003070:	787b      	ldrb	r3, [r7, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800307c:	e002      	b.n	8003084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800307e:	887a      	ldrh	r2, [r7, #2]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800309a:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d006      	beq.n	80030b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030a6:	4a05      	ldr	r2, [pc, #20]	; (80030bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fcb8 	bl	8000a24 <HAL_GPIO_EXTI_Callback>
  }
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40010400 	.word	0x40010400

080030c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e081      	b.n	80031d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fe f85c 	bl	80011a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2224      	movs	r2, #36	; 0x24
 80030f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 0201 	bic.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003110:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003120:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	e006      	b.n	8003148 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003146:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b02      	cmp	r3, #2
 800314e:	d104      	bne.n	800315a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68da      	ldr	r2, [r3, #12]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800317c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69d9      	ldr	r1, [r3, #28]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b20      	cmp	r3, #32
 80031f2:	d138      	bne.n	8003266 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031fe:	2302      	movs	r3, #2
 8003200:	e032      	b.n	8003268 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2224      	movs	r2, #36	; 0x24
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003230:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	e000      	b.n	8003268 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003266:	2302      	movs	r3, #2
  }
}
 8003268:	4618      	mov	r0, r3
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	d139      	bne.n	80032fe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003294:	2302      	movs	r3, #2
 8003296:	e033      	b.n	8003300 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	; 0x24
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032c6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003312:	af00      	add	r7, sp, #0
 8003314:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003318:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800331c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800331e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003322:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f001 b83a 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003332:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003336:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 816f 	beq.w	8003626 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003348:	4bb5      	ldr	r3, [pc, #724]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b04      	cmp	r3, #4
 8003352:	d00c      	beq.n	800336e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003354:	4bb2      	ldr	r3, [pc, #712]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b08      	cmp	r3, #8
 800335e:	d15c      	bne.n	800341a <HAL_RCC_OscConfig+0x10e>
 8003360:	4baf      	ldr	r3, [pc, #700]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d155      	bne.n	800341a <HAL_RCC_OscConfig+0x10e>
 800336e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003372:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003382:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	095b      	lsrs	r3, r3, #5
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f043 0301 	orr.w	r3, r3, #1
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_RCC_OscConfig+0x94>
 800339a:	4ba1      	ldr	r3, [pc, #644]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e015      	b.n	80033cc <HAL_RCC_OscConfig+0xc0>
 80033a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80033b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80033bc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80033c8:	4b95      	ldr	r3, [pc, #596]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033d0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80033d4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80033d8:	fa92 f2a2 	rbit	r2, r2
 80033dc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80033e0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033e4:	fab2 f282 	clz	r2, r2
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f042 0220 	orr.w	r2, r2, #32
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	f002 021f 	and.w	r2, r2, #31
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f202 	lsl.w	r2, r1, r2
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8111 	beq.w	8003624 <HAL_RCC_OscConfig+0x318>
 8003402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003406:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	f040 8108 	bne.w	8003624 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f000 bfc6 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800341a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800341e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800342a:	d106      	bne.n	800343a <HAL_RCC_OscConfig+0x12e>
 800342c:	4b7c      	ldr	r3, [pc, #496]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a7b      	ldr	r2, [pc, #492]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	e036      	b.n	80034a8 <HAL_RCC_OscConfig+0x19c>
 800343a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800343e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x158>
 800344a:	4b75      	ldr	r3, [pc, #468]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a74      	ldr	r2, [pc, #464]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b72      	ldr	r3, [pc, #456]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a71      	ldr	r2, [pc, #452]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 800345c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e021      	b.n	80034a8 <HAL_RCC_OscConfig+0x19c>
 8003464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003468:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x184>
 8003476:	4b6a      	ldr	r3, [pc, #424]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a69      	ldr	r2, [pc, #420]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b67      	ldr	r3, [pc, #412]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a66      	ldr	r2, [pc, #408]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0x19c>
 8003490:	4b63      	ldr	r3, [pc, #396]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a62      	ldr	r2, [pc, #392]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b60      	ldr	r3, [pc, #384]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5f      	ldr	r2, [pc, #380]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d059      	beq.n	800356c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe f860 	bl	800157c <HAL_GetTick>
 80034bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c2:	f7fe f85b 	bl	800157c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d902      	bls.n	80034d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	f000 bf67 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>
 80034d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034dc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80034ec:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <HAL_RCC_OscConfig+0x1fe>
 8003504:	4b46      	ldr	r3, [pc, #280]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x22a>
 800350a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800350e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800351e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003522:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003526:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003532:	4b3b      	ldr	r3, [pc, #236]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800353a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800353e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003542:	fa92 f2a2 	rbit	r2, r2
 8003546:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800354a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800354e:	fab2 f282 	clz	r2, r2
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f042 0220 	orr.w	r2, r2, #32
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f002 021f 	and.w	r2, r2, #31
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0ab      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1b6>
 800356a:	e05c      	b.n	8003626 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe f806 	bl	800157c <HAL_GetTick>
 8003570:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003576:	f7fe f801 	bl	800157c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d902      	bls.n	800358c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	f000 bf0d 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>
 800358c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003590:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003594:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80035a0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a4:	fab3 f383 	clz	r3, r3
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d102      	bne.n	80035be <HAL_RCC_OscConfig+0x2b2>
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	e015      	b.n	80035ea <HAL_RCC_OscConfig+0x2de>
 80035be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80035ca:	fa93 f3a3 	rbit	r3, r3
 80035ce:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80035d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80035da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80035e6:	4b0e      	ldr	r3, [pc, #56]	; (8003620 <HAL_RCC_OscConfig+0x314>)
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035ee:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80035f2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80035f6:	fa92 f2a2 	rbit	r2, r2
 80035fa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80035fe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003602:	fab2 f282 	clz	r2, r2
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	f042 0220 	orr.w	r2, r2, #32
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f002 021f 	and.w	r2, r2, #31
 8003612:	2101      	movs	r1, #1
 8003614:	fa01 f202 	lsl.w	r2, r1, r2
 8003618:	4013      	ands	r3, r2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ab      	bne.n	8003576 <HAL_RCC_OscConfig+0x26a>
 800361e:	e002      	b.n	8003626 <HAL_RCC_OscConfig+0x31a>
 8003620:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 817f 	beq.w	800393a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800363c:	4ba7      	ldr	r3, [pc, #668]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00c      	beq.n	8003662 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003648:	4ba4      	ldr	r3, [pc, #656]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b08      	cmp	r3, #8
 8003652:	d173      	bne.n	800373c <HAL_RCC_OscConfig+0x430>
 8003654:	4ba1      	ldr	r3, [pc, #644]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800365c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003660:	d16c      	bne.n	800373c <HAL_RCC_OscConfig+0x430>
 8003662:	2302      	movs	r3, #2
 8003664:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003668:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003674:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003678:	fab3 f383 	clz	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	b2db      	uxtb	r3, r3
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d102      	bne.n	8003692 <HAL_RCC_OscConfig+0x386>
 800368c:	4b93      	ldr	r3, [pc, #588]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	e013      	b.n	80036ba <HAL_RCC_OscConfig+0x3ae>
 8003692:	2302      	movs	r3, #2
 8003694:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80036a4:	2302      	movs	r3, #2
 80036a6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80036aa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80036b6:	4b89      	ldr	r3, [pc, #548]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2202      	movs	r2, #2
 80036bc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80036c0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80036c4:	fa92 f2a2 	rbit	r2, r2
 80036c8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80036cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80036d0:	fab2 f282 	clz	r2, r2
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	f042 0220 	orr.w	r2, r2, #32
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	f002 021f 	and.w	r2, r2, #31
 80036e0:	2101      	movs	r1, #1
 80036e2:	fa01 f202 	lsl.w	r2, r1, r2
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCC_OscConfig+0x3f6>
 80036ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d002      	beq.n	8003702 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f000 be52 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003702:	4b76      	ldr	r3, [pc, #472]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800370e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	21f8      	movs	r1, #248	; 0xf8
 8003718:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003720:	fa91 f1a1 	rbit	r1, r1
 8003724:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003728:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800372c:	fab1 f181 	clz	r1, r1
 8003730:	b2c9      	uxtb	r1, r1
 8003732:	408b      	lsls	r3, r1
 8003734:	4969      	ldr	r1, [pc, #420]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373a:	e0fe      	b.n	800393a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800373c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003740:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8088 	beq.w	800385e <HAL_RCC_OscConfig+0x552>
 800374e:	2301      	movs	r3, #1
 8003750:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003758:	fa93 f3a3 	rbit	r3, r3
 800375c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003760:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003764:	fab3 f383 	clz	r3, r3
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800376e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	461a      	mov	r2, r3
 8003776:	2301      	movs	r3, #1
 8003778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7fd feff 	bl	800157c <HAL_GetTick>
 800377e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003784:	f7fd fefa 	bl	800157c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d902      	bls.n	800379a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	f000 be06 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>
 800379a:	2302      	movs	r3, #2
 800379c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80037a4:	fa93 f3a3 	rbit	r3, r3
 80037a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80037ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b0:	fab3 f383 	clz	r3, r3
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_OscConfig+0x4be>
 80037c4:	4b45      	ldr	r3, [pc, #276]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	e013      	b.n	80037f2 <HAL_RCC_OscConfig+0x4e6>
 80037ca:	2302      	movs	r3, #2
 80037cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80037dc:	2302      	movs	r3, #2
 80037de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80037e6:	fa93 f3a3 	rbit	r3, r3
 80037ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	2202      	movs	r2, #2
 80037f4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80037f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80037fc:	fa92 f2a2 	rbit	r2, r2
 8003800:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003804:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003808:	fab2 f282 	clz	r2, r2
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	f002 021f 	and.w	r2, r2, #31
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f202 	lsl.w	r2, r1, r2
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0af      	beq.n	8003784 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003824:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003830:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	21f8      	movs	r1, #248	; 0xf8
 800383a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003842:	fa91 f1a1 	rbit	r1, r1
 8003846:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800384a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800384e:	fab1 f181 	clz	r1, r1
 8003852:	b2c9      	uxtb	r1, r1
 8003854:	408b      	lsls	r3, r1
 8003856:	4921      	ldr	r1, [pc, #132]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 8003858:	4313      	orrs	r3, r2
 800385a:	600b      	str	r3, [r1, #0]
 800385c:	e06d      	b.n	800393a <HAL_RCC_OscConfig+0x62e>
 800385e:	2301      	movs	r3, #1
 8003860:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003870:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003874:	fab3 f383 	clz	r3, r3
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800387e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	461a      	mov	r2, r3
 8003886:	2300      	movs	r3, #0
 8003888:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7fd fe77 	bl	800157c <HAL_GetTick>
 800388e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003894:	f7fd fe72 	bl	800157c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d902      	bls.n	80038aa <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	f000 bd7e 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>
 80038aa:	2302      	movs	r3, #2
 80038ac:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80038bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c0:	fab3 f383 	clz	r3, r3
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d105      	bne.n	80038e0 <HAL_RCC_OscConfig+0x5d4>
 80038d4:	4b01      	ldr	r3, [pc, #4]	; (80038dc <HAL_RCC_OscConfig+0x5d0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	e016      	b.n	8003908 <HAL_RCC_OscConfig+0x5fc>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	2302      	movs	r3, #2
 80038e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80038f2:	2302      	movs	r3, #2
 80038f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003904:	4bbf      	ldr	r3, [pc, #764]	; (8003c04 <HAL_RCC_OscConfig+0x8f8>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2202      	movs	r2, #2
 800390a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800390e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003912:	fa92 f2a2 	rbit	r2, r2
 8003916:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800391a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800391e:	fab2 f282 	clz	r2, r2
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	f042 0220 	orr.w	r2, r2, #32
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	f002 021f 	and.w	r2, r2, #31
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1ac      	bne.n	8003894 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800393e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 8113 	beq.w	8003b76 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003954:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d07c      	beq.n	8003a5a <HAL_RCC_OscConfig+0x74e>
 8003960:	2301      	movs	r3, #1
 8003962:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003972:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003976:	fab3 f383 	clz	r3, r3
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	4ba2      	ldr	r3, [pc, #648]	; (8003c08 <HAL_RCC_OscConfig+0x8fc>)
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	461a      	mov	r2, r3
 8003986:	2301      	movs	r3, #1
 8003988:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398a:	f7fd fdf7 	bl	800157c <HAL_GetTick>
 800398e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003994:	f7fd fdf2 	bl	800157c <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d902      	bls.n	80039aa <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	f000 bcfe 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b4:	fa93 f2a3 	rbit	r2, r3
 80039b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039ca:	2202      	movs	r2, #2
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	fa93 f2a3 	rbit	r2, r3
 80039dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039ee:	2202      	movs	r2, #2
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f2a3 	rbit	r2, r3
 8003a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a04:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003a08:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	4b7e      	ldr	r3, [pc, #504]	; (8003c04 <HAL_RCC_OscConfig+0x8f8>)
 8003a0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a16:	2102      	movs	r1, #2
 8003a18:	6019      	str	r1, [r3, #0]
 8003a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f1a3 	rbit	r1, r3
 8003a28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a30:	6019      	str	r1, [r3, #0]
  return result;
 8003a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fab3 f383 	clz	r3, r3
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d09d      	beq.n	8003994 <HAL_RCC_OscConfig+0x688>
 8003a58:	e08d      	b.n	8003b76 <HAL_RCC_OscConfig+0x86a>
 8003a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	fa93 f2a3 	rbit	r2, r3
 8003a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a7c:	601a      	str	r2, [r3, #0]
  return result;
 8003a7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a82:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003a86:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	fab3 f383 	clz	r3, r3
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <HAL_RCC_OscConfig+0x8fc>)
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	461a      	mov	r2, r3
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9c:	f7fd fd6e 	bl	800157c <HAL_GetTick>
 8003aa0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003aa4:	e00a      	b.n	8003abc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aa6:	f7fd fd69 	bl	800157c <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	f000 bc75 	b.w	80043a6 <HAL_RCC_OscConfig+0x109a>
 8003abc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ac0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003acc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	fa93 f2a3 	rbit	r2, r3
 8003ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ada:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003ae8:	2202      	movs	r2, #2
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003af0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	fa93 f2a3 	rbit	r2, r3
 8003afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003afe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	fa93 f2a3 	rbit	r2, r3
 8003b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b22:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003b26:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b28:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCC_OscConfig+0x8f8>)
 8003b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b34:	2102      	movs	r1, #2
 8003b36:	6019      	str	r1, [r3, #0]
 8003b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	fa93 f1a3 	rbit	r1, r3
 8003b46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b4a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b4e:	6019      	str	r1, [r3, #0]
  return result;
 8003b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fab3 f383 	clz	r3, r3
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d197      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b7a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 81a5 	beq.w	8003ed6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b92:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <HAL_RCC_OscConfig+0x8f8>)
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_RCC_OscConfig+0x8f8>)
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <HAL_RCC_OscConfig+0x8f8>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	61d3      	str	r3, [r2, #28]
 8003baa:	4b16      	ldr	r3, [pc, #88]	; (8003c04 <HAL_RCC_OscConfig+0x8f8>)
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003bb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bcc:	4b0f      	ldr	r3, [pc, #60]	; (8003c0c <HAL_RCC_OscConfig+0x900>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d121      	bne.n	8003c1c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <HAL_RCC_OscConfig+0x900>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <HAL_RCC_OscConfig+0x900>)
 8003bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003be4:	f7fd fcca 	bl	800157c <HAL_GetTick>
 8003be8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bec:	e010      	b.n	8003c10 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bee:	f7fd fcc5 	bl	800157c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d908      	bls.n	8003c10 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e3d1      	b.n	80043a6 <HAL_RCC_OscConfig+0x109a>
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	10908120 	.word	0x10908120
 8003c0c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	4b8d      	ldr	r3, [pc, #564]	; (8003e48 <HAL_RCC_OscConfig+0xb3c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0e8      	beq.n	8003bee <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x92e>
 8003c2c:	4b87      	ldr	r3, [pc, #540]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	4a86      	ldr	r2, [pc, #536]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6213      	str	r3, [r2, #32]
 8003c38:	e035      	b.n	8003ca6 <HAL_RCC_OscConfig+0x99a>
 8003c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c3e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x958>
 8003c4a:	4b80      	ldr	r3, [pc, #512]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	4a7f      	ldr	r2, [pc, #508]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	6213      	str	r3, [r2, #32]
 8003c56:	4b7d      	ldr	r3, [pc, #500]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4a7c      	ldr	r2, [pc, #496]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	6213      	str	r3, [r2, #32]
 8003c62:	e020      	b.n	8003ca6 <HAL_RCC_OscConfig+0x99a>
 8003c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c68:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d10c      	bne.n	8003c8e <HAL_RCC_OscConfig+0x982>
 8003c74:	4b75      	ldr	r3, [pc, #468]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	4a74      	ldr	r2, [pc, #464]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c7a:	f043 0304 	orr.w	r3, r3, #4
 8003c7e:	6213      	str	r3, [r2, #32]
 8003c80:	4b72      	ldr	r3, [pc, #456]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4a71      	ldr	r2, [pc, #452]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c86:	f043 0301 	orr.w	r3, r3, #1
 8003c8a:	6213      	str	r3, [r2, #32]
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCC_OscConfig+0x99a>
 8003c8e:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	6213      	str	r3, [r2, #32]
 8003c9a:	4b6c      	ldr	r3, [pc, #432]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4a6b      	ldr	r2, [pc, #428]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003caa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 8081 	beq.w	8003dba <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fc60 	bl	800157c <HAL_GetTick>
 8003cbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc0:	e00b      	b.n	8003cda <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fd fc5b 	bl	800157c <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e365      	b.n	80043a6 <HAL_RCC_OscConfig+0x109a>
 8003cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cde:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cea:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	fa93 f2a3 	rbit	r2, r3
 8003cf4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cf8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d06:	2202      	movs	r2, #2
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	fa93 f2a3 	rbit	r2, r3
 8003d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d20:	601a      	str	r2, [r3, #0]
  return result;
 8003d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d26:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003d2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f043 0302 	orr.w	r3, r3, #2
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d102      	bne.n	8003d46 <HAL_RCC_OscConfig+0xa3a>
 8003d40:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	e013      	b.n	8003d6e <HAL_RCC_OscConfig+0xa62>
 8003d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d4e:	2202      	movs	r2, #2
 8003d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d56:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	fa93 f2a3 	rbit	r2, r3
 8003d60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d64:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d76:	2102      	movs	r1, #2
 8003d78:	6011      	str	r1, [r2, #0]
 8003d7a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d7e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	fa92 f1a2 	rbit	r1, r2
 8003d88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d8c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d90:	6011      	str	r1, [r2, #0]
  return result;
 8003d92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d96:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003d9a:	6812      	ldr	r2, [r2, #0]
 8003d9c:	fab2 f282 	clz	r2, r2
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	f002 021f 	and.w	r2, r2, #31
 8003dac:	2101      	movs	r1, #1
 8003dae:	fa01 f202 	lsl.w	r2, r1, r2
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d084      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x9b6>
 8003db8:	e083      	b.n	8003ec2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dba:	f7fd fbdf 	bl	800157c <HAL_GetTick>
 8003dbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fd fbda 	bl	800157c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e2e4      	b.n	80043a6 <HAL_RCC_OscConfig+0x109a>
 8003ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003de4:	2202      	movs	r2, #2
 8003de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dec:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	fa93 f2a3 	rbit	r2, r3
 8003df6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003dfa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e08:	2202      	movs	r2, #2
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e10:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	fa93 f2a3 	rbit	r2, r3
 8003e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e1e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e22:	601a      	str	r2, [r3, #0]
  return result;
 8003e24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e28:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003e2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d106      	bne.n	8003e50 <HAL_RCC_OscConfig+0xb44>
 8003e42:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <HAL_RCC_OscConfig+0xb40>)
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	e017      	b.n	8003e78 <HAL_RCC_OscConfig+0xb6c>
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e58:	2202      	movs	r2, #2
 8003e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e60:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	fa93 f2a3 	rbit	r2, r3
 8003e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e6e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	4bb3      	ldr	r3, [pc, #716]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e7c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e80:	2102      	movs	r1, #2
 8003e82:	6011      	str	r1, [r2, #0]
 8003e84:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e88:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	fa92 f1a2 	rbit	r1, r2
 8003e92:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003e96:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003e9a:	6011      	str	r1, [r2, #0]
  return result;
 8003e9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ea0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003ea4:	6812      	ldr	r2, [r2, #0]
 8003ea6:	fab2 f282 	clz	r2, r2
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	f002 021f 	and.w	r2, r2, #31
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d180      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ec2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b9e      	ldr	r3, [pc, #632]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4a9d      	ldr	r2, [pc, #628]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003eda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 825e 	beq.w	80043a4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ee8:	4b96      	ldr	r3, [pc, #600]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	f000 821f 	beq.w	8004334 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003efa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	f040 8170 	bne.w	80041e8 <HAL_RCC_OscConfig+0xedc>
 8003f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f0c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f1a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	fa93 f2a3 	rbit	r2, r3
 8003f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f28:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f2c:	601a      	str	r2, [r3, #0]
  return result;
 8003f2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f32:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003f36:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f38:	fab3 f383 	clz	r3, r3
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fd fb15 	bl	800157c <HAL_GetTick>
 8003f52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f56:	e009      	b.n	8003f6c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f58:	f7fd fb10 	bl	800157c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e21c      	b.n	80043a6 <HAL_RCC_OscConfig+0x109a>
 8003f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f7e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	fa93 f2a3 	rbit	r2, r3
 8003f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f8c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f90:	601a      	str	r2, [r3, #0]
  return result;
 8003f92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003f9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d102      	bne.n	8003fb6 <HAL_RCC_OscConfig+0xcaa>
 8003fb0:	4b64      	ldr	r3, [pc, #400]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	e027      	b.n	8004006 <HAL_RCC_OscConfig+0xcfa>
 8003fb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fc8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	fa93 f2a3 	rbit	r2, r3
 8003fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fe0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003fee:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	fa93 f2a3 	rbit	r2, r3
 8003ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003ffc:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800400a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800400e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004012:	6011      	str	r1, [r2, #0]
 8004014:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004018:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	fa92 f1a2 	rbit	r1, r2
 8004022:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004026:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800402a:	6011      	str	r1, [r2, #0]
  return result;
 800402c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004030:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	fab2 f282 	clz	r2, r2
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f042 0220 	orr.w	r2, r2, #32
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	f002 021f 	and.w	r2, r2, #31
 8004046:	2101      	movs	r1, #1
 8004048:	fa01 f202 	lsl.w	r2, r1, r2
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d182      	bne.n	8003f58 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004052:	4b3c      	ldr	r3, [pc, #240]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	f023 020f 	bic.w	r2, r3, #15
 800405a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800405e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	4937      	ldr	r1, [pc, #220]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8004068:	4313      	orrs	r3, r2
 800406a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800406c:	4b35      	ldr	r3, [pc, #212]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6a19      	ldr	r1, [r3, #32]
 8004080:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004084:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	430b      	orrs	r3, r1
 800408e:	492d      	ldr	r1, [pc, #180]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
 8004094:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004098:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800409c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040a6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	fa93 f2a3 	rbit	r2, r3
 80040b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040b4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040b8:	601a      	str	r2, [r3, #0]
  return result;
 80040ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040be:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80040c2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c4:	fab3 f383 	clz	r3, r3
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	461a      	mov	r2, r3
 80040d6:	2301      	movs	r3, #1
 80040d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040da:	f7fd fa4f 	bl	800157c <HAL_GetTick>
 80040de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e2:	e009      	b.n	80040f8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fd fa4a 	bl	800157c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e156      	b.n	80043a6 <HAL_RCC_OscConfig+0x109a>
 80040f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040fc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004100:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800410a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	fa93 f2a3 	rbit	r2, r3
 8004114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004118:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800411c:	601a      	str	r2, [r3, #0]
  return result;
 800411e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004122:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004126:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004128:	fab3 f383 	clz	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0xe3c>
 800413c:	4b01      	ldr	r3, [pc, #4]	; (8004144 <HAL_RCC_OscConfig+0xe38>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	e02a      	b.n	8004198 <HAL_RCC_OscConfig+0xe8c>
 8004142:	bf00      	nop
 8004144:	40021000 	.word	0x40021000
 8004148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800414c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004150:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004154:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004156:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800415a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	fa93 f2a3 	rbit	r2, r3
 8004164:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004168:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004172:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004180:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	fa93 f2a3 	rbit	r2, r3
 800418a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800418e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	4b86      	ldr	r3, [pc, #536]	; (80043b0 <HAL_RCC_OscConfig+0x10a4>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800419c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80041a0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041a4:	6011      	str	r1, [r2, #0]
 80041a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041aa:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	fa92 f1a2 	rbit	r1, r2
 80041b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041b8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80041bc:	6011      	str	r1, [r2, #0]
  return result;
 80041be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80041c2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	fab2 f282 	clz	r2, r2
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	f042 0220 	orr.w	r2, r2, #32
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	f002 021f 	and.w	r2, r2, #31
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f202 	lsl.w	r2, r1, r2
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f43f af7f 	beq.w	80040e4 <HAL_RCC_OscConfig+0xdd8>
 80041e6:	e0dd      	b.n	80043a4 <HAL_RCC_OscConfig+0x1098>
 80041e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80041fa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	fa93 f2a3 	rbit	r2, r3
 8004204:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004208:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800420c:	601a      	str	r2, [r3, #0]
  return result;
 800420e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004212:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004216:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004222:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	461a      	mov	r2, r3
 800422a:	2300      	movs	r3, #0
 800422c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422e:	f7fd f9a5 	bl	800157c <HAL_GetTick>
 8004232:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004236:	e009      	b.n	800424c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004238:	f7fd f9a0 	bl	800157c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e0ac      	b.n	80043a6 <HAL_RCC_OscConfig+0x109a>
 800424c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004250:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004254:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800425e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	fa93 f2a3 	rbit	r2, r3
 8004268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800426c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004270:	601a      	str	r2, [r3, #0]
  return result;
 8004272:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004276:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800427a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d102      	bne.n	8004296 <HAL_RCC_OscConfig+0xf8a>
 8004290:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCC_OscConfig+0x10a4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	e027      	b.n	80042e6 <HAL_RCC_OscConfig+0xfda>
 8004296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800429a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800429e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042a8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	fa93 f2a3 	rbit	r2, r3
 80042b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042b6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80042ba:	601a      	str	r2, [r3, #0]
 80042bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042c0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	fa93 f2a3 	rbit	r2, r3
 80042d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80042dc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	4b33      	ldr	r3, [pc, #204]	; (80043b0 <HAL_RCC_OscConfig+0x10a4>)
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042ea:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80042f2:	6011      	str	r1, [r2, #0]
 80042f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80042f8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80042fc:	6812      	ldr	r2, [r2, #0]
 80042fe:	fa92 f1a2 	rbit	r1, r2
 8004302:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004306:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800430a:	6011      	str	r1, [r2, #0]
  return result;
 800430c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004310:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f002 021f 	and.w	r2, r2, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d182      	bne.n	8004238 <HAL_RCC_OscConfig+0xf2c>
 8004332:	e037      	b.n	80043a4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004338:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e02e      	b.n	80043a6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <HAL_RCC_OscConfig+0x10a4>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004350:	4b17      	ldr	r3, [pc, #92]	; (80043b0 <HAL_RCC_OscConfig+0x10a4>)
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004358:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800435c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004364:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	429a      	cmp	r2, r3
 800436e:	d117      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004370:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004374:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800437c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004384:	429a      	cmp	r2, r3
 8004386:	d10b      	bne.n	80043a0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800438c:	f003 020f 	and.w	r2, r3, #15
 8004390:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004394:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800439c:	429a      	cmp	r2, r3
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	40021000 	.word	0x40021000

080043b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b09e      	sub	sp, #120	; 0x78
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e162      	b.n	8004692 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043cc:	4b90      	ldr	r3, [pc, #576]	; (8004610 <HAL_RCC_ClockConfig+0x25c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d910      	bls.n	80043fc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043da:	4b8d      	ldr	r3, [pc, #564]	; (8004610 <HAL_RCC_ClockConfig+0x25c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 0207 	bic.w	r2, r3, #7
 80043e2:	498b      	ldr	r1, [pc, #556]	; (8004610 <HAL_RCC_ClockConfig+0x25c>)
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ea:	4b89      	ldr	r3, [pc, #548]	; (8004610 <HAL_RCC_ClockConfig+0x25c>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e14a      	b.n	8004692 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004408:	4b82      	ldr	r3, [pc, #520]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	497f      	ldr	r1, [pc, #508]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 8004416:	4313      	orrs	r3, r2
 8004418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80dc 	beq.w	80045e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d13c      	bne.n	80044aa <HAL_RCC_ClockConfig+0xf6>
 8004430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004434:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800443e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004440:	fab3 f383 	clz	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	b2db      	uxtb	r3, r3
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d102      	bne.n	800445a <HAL_RCC_ClockConfig+0xa6>
 8004454:	4b6f      	ldr	r3, [pc, #444]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	e00f      	b.n	800447a <HAL_RCC_ClockConfig+0xc6>
 800445a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800445e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	667b      	str	r3, [r7, #100]	; 0x64
 8004468:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800446c:	663b      	str	r3, [r7, #96]	; 0x60
 800446e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004470:	fa93 f3a3 	rbit	r3, r3
 8004474:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004476:	4b67      	ldr	r3, [pc, #412]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800447e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004482:	fa92 f2a2 	rbit	r2, r2
 8004486:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800448a:	fab2 f282 	clz	r2, r2
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	f042 0220 	orr.w	r2, r2, #32
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f002 021f 	and.w	r2, r2, #31
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f202 	lsl.w	r2, r1, r2
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d17b      	bne.n	800459e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e0f3      	b.n	8004692 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d13c      	bne.n	800452c <HAL_RCC_ClockConfig+0x178>
 80044b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ba:	fa93 f3a3 	rbit	r3, r3
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c2:	fab3 f383 	clz	r3, r3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d102      	bne.n	80044dc <HAL_RCC_ClockConfig+0x128>
 80044d6:	4b4f      	ldr	r3, [pc, #316]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	e00f      	b.n	80044fc <HAL_RCC_ClockConfig+0x148>
 80044dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e4:	fa93 f3a3 	rbit	r3, r3
 80044e8:	647b      	str	r3, [r7, #68]	; 0x44
 80044ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ee:	643b      	str	r3, [r7, #64]	; 0x40
 80044f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f8:	4b46      	ldr	r3, [pc, #280]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004500:	63ba      	str	r2, [r7, #56]	; 0x38
 8004502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004504:	fa92 f2a2 	rbit	r2, r2
 8004508:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800450a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800450c:	fab2 f282 	clz	r2, r2
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	f042 0220 	orr.w	r2, r2, #32
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	f002 021f 	and.w	r2, r2, #31
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f202 	lsl.w	r2, r1, r2
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d13a      	bne.n	800459e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0b2      	b.n	8004692 <HAL_RCC_ClockConfig+0x2de>
 800452c:	2302      	movs	r3, #2
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	fa93 f3a3 	rbit	r3, r3
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d102      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1a0>
 800454e:	4b31      	ldr	r3, [pc, #196]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	e00d      	b.n	8004570 <HAL_RCC_ClockConfig+0x1bc>
 8004554:	2302      	movs	r3, #2
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	fa93 f3a3 	rbit	r3, r3
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
 8004560:	2302      	movs	r3, #2
 8004562:	623b      	str	r3, [r7, #32]
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	fa93 f3a3 	rbit	r3, r3
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	4b29      	ldr	r3, [pc, #164]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2202      	movs	r2, #2
 8004572:	61ba      	str	r2, [r7, #24]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	fa92 f2a2 	rbit	r2, r2
 800457a:	617a      	str	r2, [r7, #20]
  return result;
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	fab2 f282 	clz	r2, r2
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	f042 0220 	orr.w	r2, r2, #32
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	f002 021f 	and.w	r2, r2, #31
 800458e:	2101      	movs	r1, #1
 8004590:	fa01 f202 	lsl.w	r2, r1, r2
 8004594:	4013      	ands	r3, r2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e079      	b.n	8004692 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f023 0203 	bic.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	491a      	ldr	r1, [pc, #104]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b0:	f7fc ffe4 	bl	800157c <HAL_GetTick>
 80045b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b8:	f7fc ffe0 	bl	800157c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e061      	b.n	8004692 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_RCC_ClockConfig+0x260>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 020c 	and.w	r2, r3, #12
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1eb      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_ClockConfig+0x25c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d214      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <HAL_RCC_ClockConfig+0x25c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 0207 	bic.w	r2, r3, #7
 80045f6:	4906      	ldr	r1, [pc, #24]	; (8004610 <HAL_RCC_ClockConfig+0x25c>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b04      	ldr	r3, [pc, #16]	; (8004610 <HAL_RCC_ClockConfig+0x25c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d005      	beq.n	8004618 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e040      	b.n	8004692 <HAL_RCC_ClockConfig+0x2de>
 8004610:	40022000 	.word	0x40022000
 8004614:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b1d      	ldr	r3, [pc, #116]	; (800469c <HAL_RCC_ClockConfig+0x2e8>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	491a      	ldr	r1, [pc, #104]	; (800469c <HAL_RCC_ClockConfig+0x2e8>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004642:	4b16      	ldr	r3, [pc, #88]	; (800469c <HAL_RCC_ClockConfig+0x2e8>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4912      	ldr	r1, [pc, #72]	; (800469c <HAL_RCC_ClockConfig+0x2e8>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004656:	f000 f829 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 800465a:	4601      	mov	r1, r0
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <HAL_RCC_ClockConfig+0x2e8>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004664:	22f0      	movs	r2, #240	; 0xf0
 8004666:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	fa92 f2a2 	rbit	r2, r2
 800466e:	60fa      	str	r2, [r7, #12]
  return result;
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	fab2 f282 	clz	r2, r2
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	40d3      	lsrs	r3, r2
 800467a:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x2ec>)
 800467c:	5cd3      	ldrb	r3, [r2, r3]
 800467e:	fa21 f303 	lsr.w	r3, r1, r3
 8004682:	4a08      	ldr	r2, [pc, #32]	; (80046a4 <HAL_RCC_ClockConfig+0x2f0>)
 8004684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_RCC_ClockConfig+0x2f4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fc ff32 	bl	80014f4 <HAL_InitTick>
  
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3778      	adds	r7, #120	; 0x78
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	080066f8 	.word	0x080066f8
 80046a4:	20000000 	.word	0x20000000
 80046a8:	20000004 	.word	0x20000004

080046ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b08b      	sub	sp, #44	; 0x2c
 80046b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	2300      	movs	r3, #0
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
 80046be:	2300      	movs	r3, #0
 80046c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80046c6:	4b2a      	ldr	r3, [pc, #168]	; (8004770 <HAL_RCC_GetSysClockFreq+0xc4>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x30>
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x36>
 80046da:	e03f      	b.n	800475c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046de:	623b      	str	r3, [r7, #32]
      break;
 80046e0:	e03f      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80046e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80046ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	fa92 f2a2 	rbit	r2, r2
 80046f4:	607a      	str	r2, [r7, #4]
  return result;
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	fab2 f282 	clz	r2, r2
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	40d3      	lsrs	r3, r2
 8004700:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004702:	5cd3      	ldrb	r3, [r2, r3]
 8004704:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004706:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	220f      	movs	r2, #15
 8004710:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	fa92 f2a2 	rbit	r2, r2
 8004718:	60fa      	str	r2, [r7, #12]
  return result;
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	fab2 f282 	clz	r2, r2
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	40d3      	lsrs	r3, r2
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004726:	5cd3      	ldrb	r3, [r2, r3]
 8004728:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d008      	beq.n	8004746 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004734:	4a0f      	ldr	r2, [pc, #60]	; (8004774 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	fbb2 f2f3 	udiv	r2, r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	627b      	str	r3, [r7, #36]	; 0x24
 8004744:	e007      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	fbb2 f2f3 	udiv	r2, r2, r3
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	fb02 f303 	mul.w	r3, r2, r3
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	623b      	str	r3, [r7, #32]
      break;
 800475a:	e002      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCC_GetSysClockFreq+0xc8>)
 800475e:	623b      	str	r3, [r7, #32]
      break;
 8004760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004762:	6a3b      	ldr	r3, [r7, #32]
}
 8004764:	4618      	mov	r0, r3
 8004766:	372c      	adds	r7, #44	; 0x2c
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40021000 	.word	0x40021000
 8004774:	007a1200 	.word	0x007a1200
 8004778:	08006710 	.word	0x08006710
 800477c:	08006720 	.word	0x08006720

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b03      	ldr	r3, [pc, #12]	; (8004794 <HAL_RCC_GetHCLKFreq+0x14>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	4618      	mov	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	20000000 	.word	0x20000000

08004798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800479e:	f7ff ffef 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047a2:	4601      	mov	r1, r0
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80047b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	fa92 f2a2 	rbit	r2, r2
 80047b8:	603a      	str	r2, [r7, #0]
  return result;
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	fab2 f282 	clz	r2, r2
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	40d3      	lsrs	r3, r2
 80047c4:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80047c6:	5cd3      	ldrb	r3, [r2, r3]
 80047c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08006708 	.word	0x08006708

080047dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80047e2:	f7ff ffcd 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047e6:	4601      	mov	r1, r0
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80047f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80047f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	fa92 f2a2 	rbit	r2, r2
 80047fc:	603a      	str	r2, [r7, #0]
  return result;
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	fab2 f282 	clz	r2, r2
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	40d3      	lsrs	r3, r2
 8004808:	4a04      	ldr	r2, [pc, #16]	; (800481c <HAL_RCC_GetPCLK2Freq+0x40>)
 800480a:	5cd3      	ldrb	r3, [r2, r3]
 800480c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	08006708 	.word	0x08006708

08004820 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b092      	sub	sp, #72	; 0x48
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004830:	2300      	movs	r3, #0
 8004832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80d4 	beq.w	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004844:	4b4e      	ldr	r3, [pc, #312]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10e      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004850:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	4a4a      	ldr	r2, [pc, #296]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	61d3      	str	r3, [r2, #28]
 800485c:	4b48      	ldr	r3, [pc, #288]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004864:	60bb      	str	r3, [r7, #8]
 8004866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486e:	4b45      	ldr	r3, [pc, #276]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d118      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800487a:	4b42      	ldr	r3, [pc, #264]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a41      	ldr	r2, [pc, #260]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004884:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004886:	f7fc fe79 	bl	800157c <HAL_GetTick>
 800488a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488c:	e008      	b.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800488e:	f7fc fe75 	bl	800157c <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b64      	cmp	r3, #100	; 0x64
 800489a:	d901      	bls.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e1d6      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a0:	4b38      	ldr	r3, [pc, #224]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048ac:	4b34      	ldr	r3, [pc, #208]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8084 	beq.w	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d07c      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	fa93 f3a3 	rbit	r3, r3
 80048e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	461a      	mov	r2, r3
 80048f6:	2301      	movs	r3, #1
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800490a:	fab3 f383 	clz	r3, r3
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	461a      	mov	r2, r3
 800491a:	2300      	movs	r3, #0
 800491c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800491e:	4a18      	ldr	r2, [pc, #96]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004922:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d04b      	beq.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492e:	f7fc fe25 	bl	800157c <HAL_GetTick>
 8004932:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004934:	e00a      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004936:	f7fc fe21 	bl	800157c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f241 3288 	movw	r2, #5000	; 0x1388
 8004944:	4293      	cmp	r3, r2
 8004946:	d901      	bls.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e180      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800494c:	2302      	movs	r3, #2
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
 8004958:	2302      	movs	r3, #2
 800495a:	623b      	str	r3, [r7, #32]
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	fa93 f3a3 	rbit	r3, r3
 8004962:	61fb      	str	r3, [r7, #28]
  return result;
 8004964:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	fab3 f383 	clz	r3, r3
 800496a:	b2db      	uxtb	r3, r3
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	b2db      	uxtb	r3, r3
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d108      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800497a:	4b01      	ldr	r3, [pc, #4]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	e00d      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004980:	40021000 	.word	0x40021000
 8004984:	40007000 	.word	0x40007000
 8004988:	10908100 	.word	0x10908100
 800498c:	2302      	movs	r3, #2
 800498e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	4b9a      	ldr	r3, [pc, #616]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	2202      	movs	r2, #2
 800499e:	613a      	str	r2, [r7, #16]
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	fa92 f2a2 	rbit	r2, r2
 80049a6:	60fa      	str	r2, [r7, #12]
  return result;
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	fab2 f282 	clz	r2, r2
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	f002 021f 	and.w	r2, r2, #31
 80049ba:	2101      	movs	r1, #1
 80049bc:	fa01 f202 	lsl.w	r2, r1, r2
 80049c0:	4013      	ands	r3, r2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0b7      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049c6:	4b8f      	ldr	r3, [pc, #572]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	498c      	ldr	r1, [pc, #560]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d105      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e0:	4b88      	ldr	r3, [pc, #544]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	4a87      	ldr	r2, [pc, #540]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d008      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049f8:	4b82      	ldr	r3, [pc, #520]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fc:	f023 0203 	bic.w	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	497f      	ldr	r1, [pc, #508]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a16:	4b7b      	ldr	r3, [pc, #492]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	4978      	ldr	r1, [pc, #480]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a34:	4b73      	ldr	r3, [pc, #460]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	4970      	ldr	r1, [pc, #448]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a52:	4b6c      	ldr	r3, [pc, #432]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a56:	f023 0210 	bic.w	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	4969      	ldr	r1, [pc, #420]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a70:	4b64      	ldr	r3, [pc, #400]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7c:	4961      	ldr	r1, [pc, #388]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d008      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a8e:	4b5d      	ldr	r3, [pc, #372]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	f023 0220 	bic.w	r2, r3, #32
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	495a      	ldr	r1, [pc, #360]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aac:	4b55      	ldr	r3, [pc, #340]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	4952      	ldr	r1, [pc, #328]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d008      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004aca:	4b4e      	ldr	r3, [pc, #312]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	494b      	ldr	r1, [pc, #300]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	4943      	ldr	r1, [pc, #268]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d008      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b06:	4b3f      	ldr	r3, [pc, #252]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	493c      	ldr	r1, [pc, #240]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004b24:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	4934      	ldr	r1, [pc, #208]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004b42:	4b30      	ldr	r3, [pc, #192]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	492d      	ldr	r1, [pc, #180]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	4925      	ldr	r1, [pc, #148]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d008      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004b7e:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	491e      	ldr	r1, [pc, #120]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	4916      	ldr	r1, [pc, #88]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	490f      	ldr	r1, [pc, #60]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be4:	4907      	ldr	r1, [pc, #28]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00c      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004bf6:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	e002      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c0a:	4913      	ldr	r1, [pc, #76]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d008      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004c1c:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	490b      	ldr	r1, [pc, #44]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d008      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004c3a:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c46:	4904      	ldr	r1, [pc, #16]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3748      	adds	r7, #72	; 0x48
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000

08004c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e040      	b.n	8004cf0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc faf2 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	; 0x24
 8004c88:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8b6 	bl	8004e0c <UART_SetConfig>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e022      	b.n	8004cf0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa7e 	bl	80051b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb05 	bl	80052f8 <UART_CheckIdleState>
 8004cee:	4603      	mov	r3, r0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d0c:	2b20      	cmp	r3, #32
 8004d0e:	d178      	bne.n	8004e02 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_UART_Transmit+0x24>
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e071      	b.n	8004e04 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2221      	movs	r2, #33	; 0x21
 8004d2c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d2e:	f7fc fc25 	bl	800157c <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4c:	d108      	bne.n	8004d60 <HAL_UART_Transmit+0x68>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d104      	bne.n	8004d60 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	e003      	b.n	8004d68 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d68:	e030      	b.n	8004dcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f000 fb67 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d004      	beq.n	8004d8a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2220      	movs	r2, #32
 8004d84:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e03c      	b.n	8004e04 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d9c:	b292      	uxth	r2, r2
 8004d9e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	3302      	adds	r3, #2
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	e008      	b.n	8004dba <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	b292      	uxth	r2, r2
 8004db2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	3301      	adds	r3, #1
 8004db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1c8      	bne.n	8004d6a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	2200      	movs	r2, #0
 8004de0:	2140      	movs	r1, #64	; 0x40
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fb30 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e005      	b.n	8004e04 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3720      	adds	r7, #32
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b92      	ldr	r3, [pc, #584]	; (8005080 <UART_SetConfig+0x274>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	6979      	ldr	r1, [r7, #20]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a80      	ldr	r2, [pc, #512]	; (8005084 <UART_SetConfig+0x278>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d120      	bne.n	8004eca <UART_SetConfig+0xbe>
 8004e88:	4b7f      	ldr	r3, [pc, #508]	; (8005088 <UART_SetConfig+0x27c>)
 8004e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d817      	bhi.n	8004ec4 <UART_SetConfig+0xb8>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0x90>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ead 	.word	0x08004ead
 8004ea0:	08004eb9 	.word	0x08004eb9
 8004ea4:	08004ebf 	.word	0x08004ebf
 8004ea8:	08004eb3 	.word	0x08004eb3
 8004eac:	2301      	movs	r3, #1
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e0b5      	b.n	800501e <UART_SetConfig+0x212>
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	77fb      	strb	r3, [r7, #31]
 8004eb6:	e0b2      	b.n	800501e <UART_SetConfig+0x212>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e0af      	b.n	800501e <UART_SetConfig+0x212>
 8004ebe:	2308      	movs	r3, #8
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e0ac      	b.n	800501e <UART_SetConfig+0x212>
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e0a9      	b.n	800501e <UART_SetConfig+0x212>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6f      	ldr	r2, [pc, #444]	; (800508c <UART_SetConfig+0x280>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d124      	bne.n	8004f1e <UART_SetConfig+0x112>
 8004ed4:	4b6c      	ldr	r3, [pc, #432]	; (8005088 <UART_SetConfig+0x27c>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ee0:	d011      	beq.n	8004f06 <UART_SetConfig+0xfa>
 8004ee2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ee6:	d817      	bhi.n	8004f18 <UART_SetConfig+0x10c>
 8004ee8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eec:	d011      	beq.n	8004f12 <UART_SetConfig+0x106>
 8004eee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef2:	d811      	bhi.n	8004f18 <UART_SetConfig+0x10c>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <UART_SetConfig+0xf4>
 8004ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efc:	d006      	beq.n	8004f0c <UART_SetConfig+0x100>
 8004efe:	e00b      	b.n	8004f18 <UART_SetConfig+0x10c>
 8004f00:	2300      	movs	r3, #0
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e08b      	b.n	800501e <UART_SetConfig+0x212>
 8004f06:	2302      	movs	r3, #2
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e088      	b.n	800501e <UART_SetConfig+0x212>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e085      	b.n	800501e <UART_SetConfig+0x212>
 8004f12:	2308      	movs	r3, #8
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e082      	b.n	800501e <UART_SetConfig+0x212>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e07f      	b.n	800501e <UART_SetConfig+0x212>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a5b      	ldr	r2, [pc, #364]	; (8005090 <UART_SetConfig+0x284>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d124      	bne.n	8004f72 <UART_SetConfig+0x166>
 8004f28:	4b57      	ldr	r3, [pc, #348]	; (8005088 <UART_SetConfig+0x27c>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004f30:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f34:	d011      	beq.n	8004f5a <UART_SetConfig+0x14e>
 8004f36:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f3a:	d817      	bhi.n	8004f6c <UART_SetConfig+0x160>
 8004f3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f40:	d011      	beq.n	8004f66 <UART_SetConfig+0x15a>
 8004f42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f46:	d811      	bhi.n	8004f6c <UART_SetConfig+0x160>
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <UART_SetConfig+0x148>
 8004f4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f50:	d006      	beq.n	8004f60 <UART_SetConfig+0x154>
 8004f52:	e00b      	b.n	8004f6c <UART_SetConfig+0x160>
 8004f54:	2300      	movs	r3, #0
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e061      	b.n	800501e <UART_SetConfig+0x212>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	e05e      	b.n	800501e <UART_SetConfig+0x212>
 8004f60:	2304      	movs	r3, #4
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e05b      	b.n	800501e <UART_SetConfig+0x212>
 8004f66:	2308      	movs	r3, #8
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e058      	b.n	800501e <UART_SetConfig+0x212>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e055      	b.n	800501e <UART_SetConfig+0x212>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a47      	ldr	r2, [pc, #284]	; (8005094 <UART_SetConfig+0x288>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d124      	bne.n	8004fc6 <UART_SetConfig+0x1ba>
 8004f7c:	4b42      	ldr	r3, [pc, #264]	; (8005088 <UART_SetConfig+0x27c>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004f84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f88:	d011      	beq.n	8004fae <UART_SetConfig+0x1a2>
 8004f8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004f8e:	d817      	bhi.n	8004fc0 <UART_SetConfig+0x1b4>
 8004f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f94:	d011      	beq.n	8004fba <UART_SetConfig+0x1ae>
 8004f96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f9a:	d811      	bhi.n	8004fc0 <UART_SetConfig+0x1b4>
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <UART_SetConfig+0x19c>
 8004fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa4:	d006      	beq.n	8004fb4 <UART_SetConfig+0x1a8>
 8004fa6:	e00b      	b.n	8004fc0 <UART_SetConfig+0x1b4>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e037      	b.n	800501e <UART_SetConfig+0x212>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	77fb      	strb	r3, [r7, #31]
 8004fb2:	e034      	b.n	800501e <UART_SetConfig+0x212>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e031      	b.n	800501e <UART_SetConfig+0x212>
 8004fba:	2308      	movs	r3, #8
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e02e      	b.n	800501e <UART_SetConfig+0x212>
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e02b      	b.n	800501e <UART_SetConfig+0x212>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a33      	ldr	r2, [pc, #204]	; (8005098 <UART_SetConfig+0x28c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d124      	bne.n	800501a <UART_SetConfig+0x20e>
 8004fd0:	4b2d      	ldr	r3, [pc, #180]	; (8005088 <UART_SetConfig+0x27c>)
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004fd8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fdc:	d011      	beq.n	8005002 <UART_SetConfig+0x1f6>
 8004fde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fe2:	d817      	bhi.n	8005014 <UART_SetConfig+0x208>
 8004fe4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fe8:	d011      	beq.n	800500e <UART_SetConfig+0x202>
 8004fea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fee:	d811      	bhi.n	8005014 <UART_SetConfig+0x208>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <UART_SetConfig+0x1f0>
 8004ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff8:	d006      	beq.n	8005008 <UART_SetConfig+0x1fc>
 8004ffa:	e00b      	b.n	8005014 <UART_SetConfig+0x208>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e00d      	b.n	800501e <UART_SetConfig+0x212>
 8005002:	2302      	movs	r3, #2
 8005004:	77fb      	strb	r3, [r7, #31]
 8005006:	e00a      	b.n	800501e <UART_SetConfig+0x212>
 8005008:	2304      	movs	r3, #4
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e007      	b.n	800501e <UART_SetConfig+0x212>
 800500e:	2308      	movs	r3, #8
 8005010:	77fb      	strb	r3, [r7, #31]
 8005012:	e004      	b.n	800501e <UART_SetConfig+0x212>
 8005014:	2310      	movs	r3, #16
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e001      	b.n	800501e <UART_SetConfig+0x212>
 800501a:	2310      	movs	r3, #16
 800501c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005026:	d16b      	bne.n	8005100 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8005028:	7ffb      	ldrb	r3, [r7, #31]
 800502a:	2b08      	cmp	r3, #8
 800502c:	d838      	bhi.n	80050a0 <UART_SetConfig+0x294>
 800502e:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0x228>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	08005059 	.word	0x08005059
 8005038:	08005061 	.word	0x08005061
 800503c:	08005069 	.word	0x08005069
 8005040:	080050a1 	.word	0x080050a1
 8005044:	0800506f 	.word	0x0800506f
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050a1 	.word	0x080050a1
 8005050:	080050a1 	.word	0x080050a1
 8005054:	08005077 	.word	0x08005077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7ff fb9e 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 800505c:	61b8      	str	r0, [r7, #24]
        break;
 800505e:	e024      	b.n	80050aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005060:	f7ff fbbc 	bl	80047dc <HAL_RCC_GetPCLK2Freq>
 8005064:	61b8      	str	r0, [r7, #24]
        break;
 8005066:	e020      	b.n	80050aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <UART_SetConfig+0x290>)
 800506a:	61bb      	str	r3, [r7, #24]
        break;
 800506c:	e01d      	b.n	80050aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506e:	f7ff fb1d 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 8005072:	61b8      	str	r0, [r7, #24]
        break;
 8005074:	e019      	b.n	80050aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507a:	61bb      	str	r3, [r7, #24]
        break;
 800507c:	e015      	b.n	80050aa <UART_SetConfig+0x29e>
 800507e:	bf00      	nop
 8005080:	efff69f3 	.word	0xefff69f3
 8005084:	40013800 	.word	0x40013800
 8005088:	40021000 	.word	0x40021000
 800508c:	40004400 	.word	0x40004400
 8005090:	40004800 	.word	0x40004800
 8005094:	40004c00 	.word	0x40004c00
 8005098:	40005000 	.word	0x40005000
 800509c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	77bb      	strb	r3, [r7, #30]
        break;
 80050a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d073      	beq.n	8005198 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	005a      	lsls	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	085b      	lsrs	r3, r3, #1
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b0f      	cmp	r3, #15
 80050ca:	d916      	bls.n	80050fa <UART_SetConfig+0x2ee>
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d2:	d212      	bcs.n	80050fa <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f023 030f 	bic.w	r3, r3, #15
 80050dc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	89fb      	ldrh	r3, [r7, #14]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	89fa      	ldrh	r2, [r7, #14]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e04e      	b.n	8005198 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	77bb      	strb	r3, [r7, #30]
 80050fe:	e04b      	b.n	8005198 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005100:	7ffb      	ldrb	r3, [r7, #31]
 8005102:	2b08      	cmp	r3, #8
 8005104:	d827      	bhi.n	8005156 <UART_SetConfig+0x34a>
 8005106:	a201      	add	r2, pc, #4	; (adr r2, 800510c <UART_SetConfig+0x300>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005131 	.word	0x08005131
 8005110:	08005139 	.word	0x08005139
 8005114:	08005141 	.word	0x08005141
 8005118:	08005157 	.word	0x08005157
 800511c:	08005147 	.word	0x08005147
 8005120:	08005157 	.word	0x08005157
 8005124:	08005157 	.word	0x08005157
 8005128:	08005157 	.word	0x08005157
 800512c:	0800514f 	.word	0x0800514f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005130:	f7ff fb32 	bl	8004798 <HAL_RCC_GetPCLK1Freq>
 8005134:	61b8      	str	r0, [r7, #24]
        break;
 8005136:	e013      	b.n	8005160 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005138:	f7ff fb50 	bl	80047dc <HAL_RCC_GetPCLK2Freq>
 800513c:	61b8      	str	r0, [r7, #24]
        break;
 800513e:	e00f      	b.n	8005160 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005140:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <UART_SetConfig+0x3a4>)
 8005142:	61bb      	str	r3, [r7, #24]
        break;
 8005144:	e00c      	b.n	8005160 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005146:	f7ff fab1 	bl	80046ac <HAL_RCC_GetSysClockFreq>
 800514a:	61b8      	str	r0, [r7, #24]
        break;
 800514c:	e008      	b.n	8005160 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005152:	61bb      	str	r3, [r7, #24]
        break;
 8005154:	e004      	b.n	8005160 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	77bb      	strb	r3, [r7, #30]
        break;
 800515e:	bf00      	nop
    }

    if (pclk != 0U)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d018      	beq.n	8005198 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	085a      	lsrs	r2, r3, #1
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	441a      	add	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d909      	bls.n	8005194 <UART_SetConfig+0x388>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005186:	d205      	bcs.n	8005194 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	b29a      	uxth	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	e001      	b.n	8005198 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80051a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	007a1200 	.word	0x007a1200

080051b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	430a      	orrs	r2, r1
 8005264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	430a      	orrs	r2, r1
 8005286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01a      	beq.n	80052ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b2:	d10a      	bne.n	80052ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	605a      	str	r2, [r3, #4]
  }
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b098      	sub	sp, #96	; 0x60
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005308:	f7fc f938 	bl	800157c <HAL_GetTick>
 800530c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b08      	cmp	r3, #8
 800531a:	d12e      	bne.n	800537a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800531c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005324:	2200      	movs	r2, #0
 8005326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f88c 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d021      	beq.n	800537a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534a:	653b      	str	r3, [r7, #80]	; 0x50
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	461a      	mov	r2, r3
 8005352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005354:	647b      	str	r3, [r7, #68]	; 0x44
 8005356:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800535a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e6      	bne.n	8005336 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e062      	b.n	8005440 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	2b04      	cmp	r3, #4
 8005386:	d149      	bne.n	800541c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005390:	2200      	movs	r2, #0
 8005392:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f856 	bl	8005448 <UART_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d03c      	beq.n	800541c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	623b      	str	r3, [r7, #32]
   return(result);
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
 80053c2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e6      	bne.n	80053a2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	3308      	adds	r3, #8
 80053f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	69b9      	ldr	r1, [r7, #24]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	617b      	str	r3, [r7, #20]
   return(result);
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e011      	b.n	8005440 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2220      	movs	r2, #32
 8005420:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3758      	adds	r7, #88	; 0x58
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	603b      	str	r3, [r7, #0]
 8005454:	4613      	mov	r3, r2
 8005456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005458:	e049      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d045      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005462:	f7fc f88b 	bl	800157c <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	429a      	cmp	r2, r3
 8005470:	d302      	bcc.n	8005478 <UART_WaitOnFlagUntilTimeout+0x30>
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e048      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d031      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d110      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2208      	movs	r2, #8
 800549e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f838 	bl	8005516 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2208      	movs	r2, #8
 80054aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e029      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c8:	d111      	bne.n	80054ee <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f81e 	bl	8005516 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e00f      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	429a      	cmp	r2, r3
 800550a:	d0a6      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005516:	b480      	push	{r7}
 8005518:	b095      	sub	sp, #84	; 0x54
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005526:	e853 3f00 	ldrex	r3, [r3]
 800552a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	643b      	str	r3, [r7, #64]	; 0x40
 800553e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800554a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e6      	bne.n	800551e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	64bb      	str	r3, [r7, #72]	; 0x48
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e5      	bne.n	8005550 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005588:	2b01      	cmp	r3, #1
 800558a:	d118      	bne.n	80055be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	60bb      	str	r3, [r7, #8]
   return(result);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f023 0310 	bic.w	r3, r3, #16
 80055a0:	647b      	str	r3, [r7, #68]	; 0x44
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	461a      	mov	r2, r3
 80055a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	6979      	ldr	r1, [r7, #20]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	e841 2300 	strex	r3, r2, [r1]
 80055b6:	613b      	str	r3, [r7, #16]
   return(result);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1e6      	bne.n	800558c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055d2:	bf00      	nop
 80055d4:	3754      	adds	r7, #84	; 0x54
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
	...

080055e0 <_ZN4blib6ButtonC1Ev>:
#include "Button.h"
#include "Monitor.h"

namespace blib
{
    Button::Button()
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 f8fa 	bl	80057e4 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>
 80055f0:	4a03      	ldr	r2, [pc, #12]	; (8005600 <_ZN4blib6ButtonC1Ev+0x20>)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]
    {

    }
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	08006738 	.word	0x08006738

08005604 <_ZN4blib6ButtonD1Ev>:
    Button::~Button()
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	4a05      	ldr	r2, [pc, #20]	; (8005624 <_ZN4blib6ButtonD1Ev+0x20>)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 f8f5 	bl	8005804 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
    {

    }
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	08006738 	.word	0x08006738

08005628 <_ZN4blib6ButtonD0Ev>:
    Button::~Button()
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
    }
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff ffe7 	bl	8005604 <_ZN4blib6ButtonD1Ev>
 8005636:	2108      	movs	r1, #8
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f903 	bl	8005844 <_ZdlPvj>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <_ZN4blib6Button22setLatestPressedButtonENS0_10ButtonNameE>:
    void Button::setLatestPressedButton(const Button::ButtonName button)
    {
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
        mLatestPressedButton = button;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	605a      	str	r2, [r3, #4]
    }
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <_ZNK4blib6Button22getLatestPressedButtonEv>:
    Button::ButtonName Button::getLatestPressedButton() const
    {
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
        return mLatestPressedButton;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
    }
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <_ZN4blib6Button12handleSignalEv>:
    void Button::handleSignal()
    {
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
        auto &monitor = Monitor::getInstance();
 8005684:	f7fb fce4 	bl	8001050 <_ZN4blib2dp9SingletonINS_7MonitorEE11getInstanceEv>
 8005688:	60b8      	str	r0, [r7, #8]

        // In display mode
        if (monitor.getSetttingMode() == false)
 800568a:	68b8      	ldr	r0, [r7, #8]
 800568c:	f7fa ff33 	bl	80004f6 <_ZNK4blib7Monitor15getSetttingModeEv>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d06b      	beq.n	8005778 <_ZN4blib6Button12handleSignalEv+0xfc>
        {
            switch (monitor.getDisplayLevel())
 80056a0:	68b8      	ldr	r0, [r7, #8]
 80056a2:	f7fa ffa3 	bl	80005ec <_ZNK4blib7Monitor15getDisplayLevelEv>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b06      	cmp	r3, #6
 80056aa:	d019      	beq.n	80056e0 <_ZN4blib6Button12handleSignalEv+0x64>
 80056ac:	2b06      	cmp	r3, #6
 80056ae:	dc31      	bgt.n	8005714 <_ZN4blib6Button12handleSignalEv+0x98>
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	dc02      	bgt.n	80056ba <_ZN4blib6Button12handleSignalEv+0x3e>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	da2f      	bge.n	8005718 <_ZN4blib6Button12handleSignalEv+0x9c>

                    }

                default:

                    break;
 80056b8:	e02c      	b.n	8005714 <_ZN4blib6Button12handleSignalEv+0x98>
            switch (monitor.getDisplayLevel())
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d000      	beq.n	80056c0 <_ZN4blib6Button12handleSignalEv+0x44>
                    break;
 80056be:	e029      	b.n	8005714 <_ZN4blib6Button12handleSignalEv+0x98>
                    if (getLatestPressedButton() == ButtonName::SELECT)
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7ff ffcf 	bl	8005664 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d022      	beq.n	800571c <_ZN4blib6Button12handleSignalEv+0xa0>
                        monitor.setSettingMode(true);
 80056d6:	2101      	movs	r1, #1
 80056d8:	68b8      	ldr	r0, [r7, #8]
 80056da:	f7fa fefd 	bl	80004d8 <_ZN4blib7Monitor14setSettingModeEb>
                    break;
 80056de:	e01d      	b.n	800571c <_ZN4blib6Button12handleSignalEv+0xa0>
                    if (monitor.getFactoryReset() == false)
 80056e0:	68b8      	ldr	r0, [r7, #8]
 80056e2:	f7fa ff24 	bl	800052e <_ZNK4blib7Monitor15getFactoryResetEv>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00e      	beq.n	8005714 <_ZN4blib6Button12handleSignalEv+0x98>
                        if (getLatestPressedButton() == ButtonName::SELECT)
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f7ff ffb4 	bl	8005664 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b04      	cmp	r3, #4
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <_ZN4blib6Button12handleSignalEv+0x98>
                            monitor.setFactoryReset(true);
 800570c:	2101      	movs	r1, #1
 800570e:	68b8      	ldr	r0, [r7, #8]
 8005710:	f7fa fefe 	bl	8000510 <_ZN4blib7Monitor15setFactoryResetEb>
                    break;
 8005714:	bf00      	nop
 8005716:	e002      	b.n	800571e <_ZN4blib6Button12handleSignalEv+0xa2>
                    break;
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <_ZN4blib6Button12handleSignalEv+0xa2>
                    break;
 800571c:	bf00      	nop
            }

            uint8_t u8DisplayLevel = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	73fb      	strb	r3, [r7, #15]

            // Press left button - go to previous screen
            if (getLatestPressedButton() == ButtonName::LEFT)
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff ff9e 	bl	8005664 <_ZNK4blib6Button22getLatestPressedButtonEv>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	bf0c      	ite	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	2300      	movne	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d007      	beq.n	8005748 <_ZN4blib6Button12handleSignalEv+0xcc>
            {
                u8DisplayLevel = (uint8_t) monitor.getDisplayLevel() - 1;
 8005738:	68b8      	ldr	r0, [r7, #8]
 800573a:	f7fa ff57 	bl	80005ec <_ZNK4blib7Monitor15getDisplayLevelEv>
 800573e:	4603      	mov	r3, r0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	3b01      	subs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	e011      	b.n	800576c <_ZN4blib6Button12handleSignalEv+0xf0>
            }
            // Press right buton - go to next screen
            else if (getLatestPressedButton() == ButtonName::RIGHT)
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff8b 	bl	8005664 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800574e:	4603      	mov	r3, r0
 8005750:	2b02      	cmp	r3, #2
 8005752:	bf0c      	ite	eq
 8005754:	2301      	moveq	r3, #1
 8005756:	2300      	movne	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d006      	beq.n	800576c <_ZN4blib6Button12handleSignalEv+0xf0>
            {
                u8DisplayLevel = (uint8_t) monitor.getDisplayLevel() + 1;
 800575e:	68b8      	ldr	r0, [r7, #8]
 8005760:	f7fa ff44 	bl	80005ec <_ZNK4blib7Monitor15getDisplayLevelEv>
 8005764:	4603      	mov	r3, r0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	3301      	adds	r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
            }

            monitor.setDisplayLevel((Monitor::DisplayLevel) u8DisplayLevel);
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	4619      	mov	r1, r3
 8005770:	68b8      	ldr	r0, [r7, #8]
 8005772:	f7fa ff26 	bl	80005c2 <_ZN4blib7Monitor15setDisplayLevelENS0_12DisplayLevelE>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() + 1;
            }

            monitor.setSettingLevel((Monitor::SettingLevel) u8SettingLevel);
        }
    }
 8005776:	e031      	b.n	80057dc <_ZN4blib6Button12handleSignalEv+0x160>
            switch (monitor.getSettingLevel())
 8005778:	68b8      	ldr	r0, [r7, #8]
 800577a:	f7fa ff16 	bl	80005aa <_ZNK4blib7Monitor15getSettingLevelEv>
 800577e:	4603      	mov	r3, r0
 8005780:	2b07      	cmp	r3, #7
                    break;
 8005782:	bf00      	nop
            uint8_t u8SettingLevel = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	73bb      	strb	r3, [r7, #14]
            if (getLatestPressedButton() == ButtonName::LEFT)
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff6b 	bl	8005664 <_ZNK4blib6Button22getLatestPressedButtonEv>
 800578e:	4603      	mov	r3, r0
 8005790:	2b01      	cmp	r3, #1
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <_ZN4blib6Button12handleSignalEv+0x132>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() - 1;
 800579e:	68b8      	ldr	r0, [r7, #8]
 80057a0:	f7fa ff03 	bl	80005aa <_ZNK4blib7Monitor15getSettingLevelEv>
 80057a4:	4603      	mov	r3, r0
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	73bb      	strb	r3, [r7, #14]
 80057ac:	e011      	b.n	80057d2 <_ZN4blib6Button12handleSignalEv+0x156>
            else if (getLatestPressedButton() == ButtonName::RIGHT)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff ff58 	bl	8005664 <_ZNK4blib6Button22getLatestPressedButtonEv>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	bf0c      	ite	eq
 80057ba:	2301      	moveq	r3, #1
 80057bc:	2300      	movne	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d006      	beq.n	80057d2 <_ZN4blib6Button12handleSignalEv+0x156>
                u8SettingLevel = (uint8_t) monitor.getSettingLevel() + 1;
 80057c4:	68b8      	ldr	r0, [r7, #8]
 80057c6:	f7fa fef0 	bl	80005aa <_ZNK4blib7Monitor15getSettingLevelEv>
 80057ca:	4603      	mov	r3, r0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	3301      	adds	r3, #1
 80057d0:	73bb      	strb	r3, [r7, #14]
            monitor.setSettingLevel((Monitor::SettingLevel) u8SettingLevel);
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	4619      	mov	r1, r3
 80057d6:	68b8      	ldr	r0, [r7, #8]
 80057d8:	f7fa fed2 	bl	8000580 <_ZN4blib7Monitor15setSettingLevelENS0_12SettingLevelE>
    }
 80057dc:	bf00      	nop
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev>:
                Singleton()
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
                {
 80057ec:	4a04      	ldr	r2, [pc, #16]	; (8005800 <_ZN4blib2dp9SingletonINS_6ButtonEEC1Ev+0x1c>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
                }
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4618      	mov	r0, r3
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	08006748 	.word	0x08006748

08005804 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>:
                virtual ~Singleton()
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
                }
 800580c:	4a04      	ldr	r2, [pc, #16]	; (8005820 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev+0x1c>)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	08006748 	.word	0x08006748

08005824 <_ZN4blib2dp9SingletonINS_6ButtonEED0Ev>:
                virtual ~Singleton()
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
                }
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff ffe9 	bl	8005804 <_ZN4blib2dp9SingletonINS_6ButtonEED1Ev>
 8005832:	2104      	movs	r1, #4
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f805 	bl	8005844 <_ZdlPvj>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <_ZdlPvj>:
 8005844:	f000 b811 	b.w	800586a <_ZdlPv>

08005848 <_Znwj>:
 8005848:	2801      	cmp	r0, #1
 800584a:	bf38      	it	cc
 800584c:	2001      	movcc	r0, #1
 800584e:	b510      	push	{r4, lr}
 8005850:	4604      	mov	r4, r0
 8005852:	4620      	mov	r0, r4
 8005854:	f000 f81c 	bl	8005890 <malloc>
 8005858:	b100      	cbz	r0, 800585c <_Znwj+0x14>
 800585a:	bd10      	pop	{r4, pc}
 800585c:	f000 f808 	bl	8005870 <_ZSt15get_new_handlerv>
 8005860:	b908      	cbnz	r0, 8005866 <_Znwj+0x1e>
 8005862:	f000 f80d 	bl	8005880 <abort>
 8005866:	4780      	blx	r0
 8005868:	e7f3      	b.n	8005852 <_Znwj+0xa>

0800586a <_ZdlPv>:
 800586a:	f000 b819 	b.w	80058a0 <free>
	...

08005870 <_ZSt15get_new_handlerv>:
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <_ZSt15get_new_handlerv+0xc>)
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	f3bf 8f5b 	dmb	ish
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000600 	.word	0x20000600

08005880 <abort>:
 8005880:	b508      	push	{r3, lr}
 8005882:	2006      	movs	r0, #6
 8005884:	f000 f924 	bl	8005ad0 <raise>
 8005888:	2001      	movs	r0, #1
 800588a:	f7fb fda1 	bl	80013d0 <_exit>
	...

08005890 <malloc>:
 8005890:	4b02      	ldr	r3, [pc, #8]	; (800589c <malloc+0xc>)
 8005892:	4601      	mov	r1, r0
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	f000 b82b 	b.w	80058f0 <_malloc_r>
 800589a:	bf00      	nop
 800589c:	2000005c 	.word	0x2000005c

080058a0 <free>:
 80058a0:	4b02      	ldr	r3, [pc, #8]	; (80058ac <free+0xc>)
 80058a2:	4601      	mov	r1, r0
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	f000 b96b 	b.w	8005b80 <_free_r>
 80058aa:	bf00      	nop
 80058ac:	2000005c 	.word	0x2000005c

080058b0 <sbrk_aligned>:
 80058b0:	b570      	push	{r4, r5, r6, lr}
 80058b2:	4e0e      	ldr	r6, [pc, #56]	; (80058ec <sbrk_aligned+0x3c>)
 80058b4:	460c      	mov	r4, r1
 80058b6:	6831      	ldr	r1, [r6, #0]
 80058b8:	4605      	mov	r5, r0
 80058ba:	b911      	cbnz	r1, 80058c2 <sbrk_aligned+0x12>
 80058bc:	f000 f924 	bl	8005b08 <_sbrk_r>
 80058c0:	6030      	str	r0, [r6, #0]
 80058c2:	4621      	mov	r1, r4
 80058c4:	4628      	mov	r0, r5
 80058c6:	f000 f91f 	bl	8005b08 <_sbrk_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	d00a      	beq.n	80058e4 <sbrk_aligned+0x34>
 80058ce:	1cc4      	adds	r4, r0, #3
 80058d0:	f024 0403 	bic.w	r4, r4, #3
 80058d4:	42a0      	cmp	r0, r4
 80058d6:	d007      	beq.n	80058e8 <sbrk_aligned+0x38>
 80058d8:	1a21      	subs	r1, r4, r0
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 f914 	bl	8005b08 <_sbrk_r>
 80058e0:	3001      	adds	r0, #1
 80058e2:	d101      	bne.n	80058e8 <sbrk_aligned+0x38>
 80058e4:	f04f 34ff 	mov.w	r4, #4294967295
 80058e8:	4620      	mov	r0, r4
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
 80058ec:	20000608 	.word	0x20000608

080058f0 <_malloc_r>:
 80058f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058f4:	1ccd      	adds	r5, r1, #3
 80058f6:	f025 0503 	bic.w	r5, r5, #3
 80058fa:	3508      	adds	r5, #8
 80058fc:	2d0c      	cmp	r5, #12
 80058fe:	bf38      	it	cc
 8005900:	250c      	movcc	r5, #12
 8005902:	2d00      	cmp	r5, #0
 8005904:	4607      	mov	r7, r0
 8005906:	db01      	blt.n	800590c <_malloc_r+0x1c>
 8005908:	42a9      	cmp	r1, r5
 800590a:	d905      	bls.n	8005918 <_malloc_r+0x28>
 800590c:	230c      	movs	r3, #12
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	2600      	movs	r6, #0
 8005912:	4630      	mov	r0, r6
 8005914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005918:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059ec <_malloc_r+0xfc>
 800591c:	f000 f868 	bl	80059f0 <__malloc_lock>
 8005920:	f8d8 3000 	ldr.w	r3, [r8]
 8005924:	461c      	mov	r4, r3
 8005926:	bb5c      	cbnz	r4, 8005980 <_malloc_r+0x90>
 8005928:	4629      	mov	r1, r5
 800592a:	4638      	mov	r0, r7
 800592c:	f7ff ffc0 	bl	80058b0 <sbrk_aligned>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	4604      	mov	r4, r0
 8005934:	d155      	bne.n	80059e2 <_malloc_r+0xf2>
 8005936:	f8d8 4000 	ldr.w	r4, [r8]
 800593a:	4626      	mov	r6, r4
 800593c:	2e00      	cmp	r6, #0
 800593e:	d145      	bne.n	80059cc <_malloc_r+0xdc>
 8005940:	2c00      	cmp	r4, #0
 8005942:	d048      	beq.n	80059d6 <_malloc_r+0xe6>
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	4631      	mov	r1, r6
 8005948:	4638      	mov	r0, r7
 800594a:	eb04 0903 	add.w	r9, r4, r3
 800594e:	f000 f8db 	bl	8005b08 <_sbrk_r>
 8005952:	4581      	cmp	r9, r0
 8005954:	d13f      	bne.n	80059d6 <_malloc_r+0xe6>
 8005956:	6821      	ldr	r1, [r4, #0]
 8005958:	1a6d      	subs	r5, r5, r1
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ffa7 	bl	80058b0 <sbrk_aligned>
 8005962:	3001      	adds	r0, #1
 8005964:	d037      	beq.n	80059d6 <_malloc_r+0xe6>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	442b      	add	r3, r5
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	f8d8 3000 	ldr.w	r3, [r8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d038      	beq.n	80059e6 <_malloc_r+0xf6>
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	42a2      	cmp	r2, r4
 8005978:	d12b      	bne.n	80059d2 <_malloc_r+0xe2>
 800597a:	2200      	movs	r2, #0
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	e00f      	b.n	80059a0 <_malloc_r+0xb0>
 8005980:	6822      	ldr	r2, [r4, #0]
 8005982:	1b52      	subs	r2, r2, r5
 8005984:	d41f      	bmi.n	80059c6 <_malloc_r+0xd6>
 8005986:	2a0b      	cmp	r2, #11
 8005988:	d917      	bls.n	80059ba <_malloc_r+0xca>
 800598a:	1961      	adds	r1, r4, r5
 800598c:	42a3      	cmp	r3, r4
 800598e:	6025      	str	r5, [r4, #0]
 8005990:	bf18      	it	ne
 8005992:	6059      	strne	r1, [r3, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	bf08      	it	eq
 8005998:	f8c8 1000 	streq.w	r1, [r8]
 800599c:	5162      	str	r2, [r4, r5]
 800599e:	604b      	str	r3, [r1, #4]
 80059a0:	4638      	mov	r0, r7
 80059a2:	f104 060b 	add.w	r6, r4, #11
 80059a6:	f000 f829 	bl	80059fc <__malloc_unlock>
 80059aa:	f026 0607 	bic.w	r6, r6, #7
 80059ae:	1d23      	adds	r3, r4, #4
 80059b0:	1af2      	subs	r2, r6, r3
 80059b2:	d0ae      	beq.n	8005912 <_malloc_r+0x22>
 80059b4:	1b9b      	subs	r3, r3, r6
 80059b6:	50a3      	str	r3, [r4, r2]
 80059b8:	e7ab      	b.n	8005912 <_malloc_r+0x22>
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	6862      	ldr	r2, [r4, #4]
 80059be:	d1dd      	bne.n	800597c <_malloc_r+0x8c>
 80059c0:	f8c8 2000 	str.w	r2, [r8]
 80059c4:	e7ec      	b.n	80059a0 <_malloc_r+0xb0>
 80059c6:	4623      	mov	r3, r4
 80059c8:	6864      	ldr	r4, [r4, #4]
 80059ca:	e7ac      	b.n	8005926 <_malloc_r+0x36>
 80059cc:	4634      	mov	r4, r6
 80059ce:	6876      	ldr	r6, [r6, #4]
 80059d0:	e7b4      	b.n	800593c <_malloc_r+0x4c>
 80059d2:	4613      	mov	r3, r2
 80059d4:	e7cc      	b.n	8005970 <_malloc_r+0x80>
 80059d6:	230c      	movs	r3, #12
 80059d8:	603b      	str	r3, [r7, #0]
 80059da:	4638      	mov	r0, r7
 80059dc:	f000 f80e 	bl	80059fc <__malloc_unlock>
 80059e0:	e797      	b.n	8005912 <_malloc_r+0x22>
 80059e2:	6025      	str	r5, [r4, #0]
 80059e4:	e7dc      	b.n	80059a0 <_malloc_r+0xb0>
 80059e6:	605b      	str	r3, [r3, #4]
 80059e8:	deff      	udf	#255	; 0xff
 80059ea:	bf00      	nop
 80059ec:	20000604 	.word	0x20000604

080059f0 <__malloc_lock>:
 80059f0:	4801      	ldr	r0, [pc, #4]	; (80059f8 <__malloc_lock+0x8>)
 80059f2:	f000 b8c3 	b.w	8005b7c <__retarget_lock_acquire_recursive>
 80059f6:	bf00      	nop
 80059f8:	20000748 	.word	0x20000748

080059fc <__malloc_unlock>:
 80059fc:	4801      	ldr	r0, [pc, #4]	; (8005a04 <__malloc_unlock+0x8>)
 80059fe:	f000 b8be 	b.w	8005b7e <__retarget_lock_release_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000748 	.word	0x20000748

08005a08 <sniprintf>:
 8005a08:	b40c      	push	{r2, r3}
 8005a0a:	b530      	push	{r4, r5, lr}
 8005a0c:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <sniprintf+0x64>)
 8005a0e:	1e0c      	subs	r4, r1, #0
 8005a10:	681d      	ldr	r5, [r3, #0]
 8005a12:	b09d      	sub	sp, #116	; 0x74
 8005a14:	da08      	bge.n	8005a28 <sniprintf+0x20>
 8005a16:	238b      	movs	r3, #139	; 0x8b
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1e:	b01d      	add	sp, #116	; 0x74
 8005a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a24:	b002      	add	sp, #8
 8005a26:	4770      	bx	lr
 8005a28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a30:	bf14      	ite	ne
 8005a32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a36:	4623      	moveq	r3, r4
 8005a38:	9304      	str	r3, [sp, #16]
 8005a3a:	9307      	str	r3, [sp, #28]
 8005a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a40:	9002      	str	r0, [sp, #8]
 8005a42:	9006      	str	r0, [sp, #24]
 8005a44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a4a:	ab21      	add	r3, sp, #132	; 0x84
 8005a4c:	a902      	add	r1, sp, #8
 8005a4e:	4628      	mov	r0, r5
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	f000 f93b 	bl	8005ccc <_svfiprintf_r>
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	bfbc      	itt	lt
 8005a5a:	238b      	movlt	r3, #139	; 0x8b
 8005a5c:	602b      	strlt	r3, [r5, #0]
 8005a5e:	2c00      	cmp	r4, #0
 8005a60:	d0dd      	beq.n	8005a1e <sniprintf+0x16>
 8005a62:	9b02      	ldr	r3, [sp, #8]
 8005a64:	2200      	movs	r2, #0
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	e7d9      	b.n	8005a1e <sniprintf+0x16>
 8005a6a:	bf00      	nop
 8005a6c:	2000005c 	.word	0x2000005c

08005a70 <memset>:
 8005a70:	4402      	add	r2, r0
 8005a72:	4603      	mov	r3, r0
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d100      	bne.n	8005a7a <memset+0xa>
 8005a78:	4770      	bx	lr
 8005a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7e:	e7f9      	b.n	8005a74 <memset+0x4>

08005a80 <_raise_r>:
 8005a80:	291f      	cmp	r1, #31
 8005a82:	b538      	push	{r3, r4, r5, lr}
 8005a84:	4604      	mov	r4, r0
 8005a86:	460d      	mov	r5, r1
 8005a88:	d904      	bls.n	8005a94 <_raise_r+0x14>
 8005a8a:	2316      	movs	r3, #22
 8005a8c:	6003      	str	r3, [r0, #0]
 8005a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005a96:	b112      	cbz	r2, 8005a9e <_raise_r+0x1e>
 8005a98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005a9c:	b94b      	cbnz	r3, 8005ab2 <_raise_r+0x32>
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 f830 	bl	8005b04 <_getpid_r>
 8005aa4:	462a      	mov	r2, r5
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aae:	f000 b817 	b.w	8005ae0 <_kill_r>
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d00a      	beq.n	8005acc <_raise_r+0x4c>
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	d103      	bne.n	8005ac2 <_raise_r+0x42>
 8005aba:	2316      	movs	r3, #22
 8005abc:	6003      	str	r3, [r0, #0]
 8005abe:	2001      	movs	r0, #1
 8005ac0:	e7e7      	b.n	8005a92 <_raise_r+0x12>
 8005ac2:	2400      	movs	r4, #0
 8005ac4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ac8:	4628      	mov	r0, r5
 8005aca:	4798      	blx	r3
 8005acc:	2000      	movs	r0, #0
 8005ace:	e7e0      	b.n	8005a92 <_raise_r+0x12>

08005ad0 <raise>:
 8005ad0:	4b02      	ldr	r3, [pc, #8]	; (8005adc <raise+0xc>)
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	f7ff bfd3 	b.w	8005a80 <_raise_r>
 8005ada:	bf00      	nop
 8005adc:	2000005c 	.word	0x2000005c

08005ae0 <_kill_r>:
 8005ae0:	b538      	push	{r3, r4, r5, lr}
 8005ae2:	4d07      	ldr	r5, [pc, #28]	; (8005b00 <_kill_r+0x20>)
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	4608      	mov	r0, r1
 8005aea:	4611      	mov	r1, r2
 8005aec:	602b      	str	r3, [r5, #0]
 8005aee:	f7fb fc5f 	bl	80013b0 <_kill>
 8005af2:	1c43      	adds	r3, r0, #1
 8005af4:	d102      	bne.n	8005afc <_kill_r+0x1c>
 8005af6:	682b      	ldr	r3, [r5, #0]
 8005af8:	b103      	cbz	r3, 8005afc <_kill_r+0x1c>
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	bd38      	pop	{r3, r4, r5, pc}
 8005afe:	bf00      	nop
 8005b00:	20000744 	.word	0x20000744

08005b04 <_getpid_r>:
 8005b04:	f7fb bc4c 	b.w	80013a0 <_getpid>

08005b08 <_sbrk_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d06      	ldr	r5, [pc, #24]	; (8005b24 <_sbrk_r+0x1c>)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	602b      	str	r3, [r5, #0]
 8005b14:	f7fb fc66 	bl	80013e4 <_sbrk>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_sbrk_r+0x1a>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_sbrk_r+0x1a>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	20000744 	.word	0x20000744

08005b28 <__errno>:
 8005b28:	4b01      	ldr	r3, [pc, #4]	; (8005b30 <__errno+0x8>)
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	2000005c 	.word	0x2000005c

08005b34 <__libc_init_array>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4d0d      	ldr	r5, [pc, #52]	; (8005b6c <__libc_init_array+0x38>)
 8005b38:	4c0d      	ldr	r4, [pc, #52]	; (8005b70 <__libc_init_array+0x3c>)
 8005b3a:	1b64      	subs	r4, r4, r5
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	2600      	movs	r6, #0
 8005b40:	42a6      	cmp	r6, r4
 8005b42:	d109      	bne.n	8005b58 <__libc_init_array+0x24>
 8005b44:	4d0b      	ldr	r5, [pc, #44]	; (8005b74 <__libc_init_array+0x40>)
 8005b46:	4c0c      	ldr	r4, [pc, #48]	; (8005b78 <__libc_init_array+0x44>)
 8005b48:	f000 fbae 	bl	80062a8 <_init>
 8005b4c:	1b64      	subs	r4, r4, r5
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	2600      	movs	r6, #0
 8005b52:	42a6      	cmp	r6, r4
 8005b54:	d105      	bne.n	8005b62 <__libc_init_array+0x2e>
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5c:	4798      	blx	r3
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7ee      	b.n	8005b40 <__libc_init_array+0xc>
 8005b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b66:	4798      	blx	r3
 8005b68:	3601      	adds	r6, #1
 8005b6a:	e7f2      	b.n	8005b52 <__libc_init_array+0x1e>
 8005b6c:	08006784 	.word	0x08006784
 8005b70:	08006784 	.word	0x08006784
 8005b74:	08006784 	.word	0x08006784
 8005b78:	08006788 	.word	0x08006788

08005b7c <__retarget_lock_acquire_recursive>:
 8005b7c:	4770      	bx	lr

08005b7e <__retarget_lock_release_recursive>:
 8005b7e:	4770      	bx	lr

08005b80 <_free_r>:
 8005b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b82:	2900      	cmp	r1, #0
 8005b84:	d044      	beq.n	8005c10 <_free_r+0x90>
 8005b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8a:	9001      	str	r0, [sp, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b92:	bfb8      	it	lt
 8005b94:	18e4      	addlt	r4, r4, r3
 8005b96:	f7ff ff2b 	bl	80059f0 <__malloc_lock>
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <_free_r+0x94>)
 8005b9c:	9801      	ldr	r0, [sp, #4]
 8005b9e:	6813      	ldr	r3, [r2, #0]
 8005ba0:	b933      	cbnz	r3, 8005bb0 <_free_r+0x30>
 8005ba2:	6063      	str	r3, [r4, #4]
 8005ba4:	6014      	str	r4, [r2, #0]
 8005ba6:	b003      	add	sp, #12
 8005ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bac:	f7ff bf26 	b.w	80059fc <__malloc_unlock>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d908      	bls.n	8005bc6 <_free_r+0x46>
 8005bb4:	6825      	ldr	r5, [r4, #0]
 8005bb6:	1961      	adds	r1, r4, r5
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	bf01      	itttt	eq
 8005bbc:	6819      	ldreq	r1, [r3, #0]
 8005bbe:	685b      	ldreq	r3, [r3, #4]
 8005bc0:	1949      	addeq	r1, r1, r5
 8005bc2:	6021      	streq	r1, [r4, #0]
 8005bc4:	e7ed      	b.n	8005ba2 <_free_r+0x22>
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	b10b      	cbz	r3, 8005bd0 <_free_r+0x50>
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d9fa      	bls.n	8005bc6 <_free_r+0x46>
 8005bd0:	6811      	ldr	r1, [r2, #0]
 8005bd2:	1855      	adds	r5, r2, r1
 8005bd4:	42a5      	cmp	r5, r4
 8005bd6:	d10b      	bne.n	8005bf0 <_free_r+0x70>
 8005bd8:	6824      	ldr	r4, [r4, #0]
 8005bda:	4421      	add	r1, r4
 8005bdc:	1854      	adds	r4, r2, r1
 8005bde:	42a3      	cmp	r3, r4
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	d1e0      	bne.n	8005ba6 <_free_r+0x26>
 8005be4:	681c      	ldr	r4, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	6053      	str	r3, [r2, #4]
 8005bea:	440c      	add	r4, r1
 8005bec:	6014      	str	r4, [r2, #0]
 8005bee:	e7da      	b.n	8005ba6 <_free_r+0x26>
 8005bf0:	d902      	bls.n	8005bf8 <_free_r+0x78>
 8005bf2:	230c      	movs	r3, #12
 8005bf4:	6003      	str	r3, [r0, #0]
 8005bf6:	e7d6      	b.n	8005ba6 <_free_r+0x26>
 8005bf8:	6825      	ldr	r5, [r4, #0]
 8005bfa:	1961      	adds	r1, r4, r5
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	bf04      	itt	eq
 8005c00:	6819      	ldreq	r1, [r3, #0]
 8005c02:	685b      	ldreq	r3, [r3, #4]
 8005c04:	6063      	str	r3, [r4, #4]
 8005c06:	bf04      	itt	eq
 8005c08:	1949      	addeq	r1, r1, r5
 8005c0a:	6021      	streq	r1, [r4, #0]
 8005c0c:	6054      	str	r4, [r2, #4]
 8005c0e:	e7ca      	b.n	8005ba6 <_free_r+0x26>
 8005c10:	b003      	add	sp, #12
 8005c12:	bd30      	pop	{r4, r5, pc}
 8005c14:	20000604 	.word	0x20000604

08005c18 <__ssputs_r>:
 8005c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c1c:	688e      	ldr	r6, [r1, #8]
 8005c1e:	461f      	mov	r7, r3
 8005c20:	42be      	cmp	r6, r7
 8005c22:	680b      	ldr	r3, [r1, #0]
 8005c24:	4682      	mov	sl, r0
 8005c26:	460c      	mov	r4, r1
 8005c28:	4690      	mov	r8, r2
 8005c2a:	d82c      	bhi.n	8005c86 <__ssputs_r+0x6e>
 8005c2c:	898a      	ldrh	r2, [r1, #12]
 8005c2e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c32:	d026      	beq.n	8005c82 <__ssputs_r+0x6a>
 8005c34:	6965      	ldr	r5, [r4, #20]
 8005c36:	6909      	ldr	r1, [r1, #16]
 8005c38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c3c:	eba3 0901 	sub.w	r9, r3, r1
 8005c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c44:	1c7b      	adds	r3, r7, #1
 8005c46:	444b      	add	r3, r9
 8005c48:	106d      	asrs	r5, r5, #1
 8005c4a:	429d      	cmp	r5, r3
 8005c4c:	bf38      	it	cc
 8005c4e:	461d      	movcc	r5, r3
 8005c50:	0553      	lsls	r3, r2, #21
 8005c52:	d527      	bpl.n	8005ca4 <__ssputs_r+0x8c>
 8005c54:	4629      	mov	r1, r5
 8005c56:	f7ff fe4b 	bl	80058f0 <_malloc_r>
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	b360      	cbz	r0, 8005cb8 <__ssputs_r+0xa0>
 8005c5e:	6921      	ldr	r1, [r4, #16]
 8005c60:	464a      	mov	r2, r9
 8005c62:	f000 fadb 	bl	800621c <memcpy>
 8005c66:	89a3      	ldrh	r3, [r4, #12]
 8005c68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	6126      	str	r6, [r4, #16]
 8005c74:	6165      	str	r5, [r4, #20]
 8005c76:	444e      	add	r6, r9
 8005c78:	eba5 0509 	sub.w	r5, r5, r9
 8005c7c:	6026      	str	r6, [r4, #0]
 8005c7e:	60a5      	str	r5, [r4, #8]
 8005c80:	463e      	mov	r6, r7
 8005c82:	42be      	cmp	r6, r7
 8005c84:	d900      	bls.n	8005c88 <__ssputs_r+0x70>
 8005c86:	463e      	mov	r6, r7
 8005c88:	6820      	ldr	r0, [r4, #0]
 8005c8a:	4632      	mov	r2, r6
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	f000 faab 	bl	80061e8 <memmove>
 8005c92:	68a3      	ldr	r3, [r4, #8]
 8005c94:	1b9b      	subs	r3, r3, r6
 8005c96:	60a3      	str	r3, [r4, #8]
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	4433      	add	r3, r6
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	f000 fac7 	bl	8006238 <_realloc_r>
 8005caa:	4606      	mov	r6, r0
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d1e0      	bne.n	8005c72 <__ssputs_r+0x5a>
 8005cb0:	6921      	ldr	r1, [r4, #16]
 8005cb2:	4650      	mov	r0, sl
 8005cb4:	f7ff ff64 	bl	8005b80 <_free_r>
 8005cb8:	230c      	movs	r3, #12
 8005cba:	f8ca 3000 	str.w	r3, [sl]
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc4:	81a3      	strh	r3, [r4, #12]
 8005cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cca:	e7e9      	b.n	8005ca0 <__ssputs_r+0x88>

08005ccc <_svfiprintf_r>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	898b      	ldrh	r3, [r1, #12]
 8005cd4:	061b      	lsls	r3, r3, #24
 8005cd6:	b09d      	sub	sp, #116	; 0x74
 8005cd8:	4607      	mov	r7, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	4614      	mov	r4, r2
 8005cde:	d50e      	bpl.n	8005cfe <_svfiprintf_r+0x32>
 8005ce0:	690b      	ldr	r3, [r1, #16]
 8005ce2:	b963      	cbnz	r3, 8005cfe <_svfiprintf_r+0x32>
 8005ce4:	2140      	movs	r1, #64	; 0x40
 8005ce6:	f7ff fe03 	bl	80058f0 <_malloc_r>
 8005cea:	6028      	str	r0, [r5, #0]
 8005cec:	6128      	str	r0, [r5, #16]
 8005cee:	b920      	cbnz	r0, 8005cfa <_svfiprintf_r+0x2e>
 8005cf0:	230c      	movs	r3, #12
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	e0d0      	b.n	8005e9c <_svfiprintf_r+0x1d0>
 8005cfa:	2340      	movs	r3, #64	; 0x40
 8005cfc:	616b      	str	r3, [r5, #20]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9309      	str	r3, [sp, #36]	; 0x24
 8005d02:	2320      	movs	r3, #32
 8005d04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d0c:	2330      	movs	r3, #48	; 0x30
 8005d0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005eb4 <_svfiprintf_r+0x1e8>
 8005d12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d16:	f04f 0901 	mov.w	r9, #1
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	469a      	mov	sl, r3
 8005d1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d22:	b10a      	cbz	r2, 8005d28 <_svfiprintf_r+0x5c>
 8005d24:	2a25      	cmp	r2, #37	; 0x25
 8005d26:	d1f9      	bne.n	8005d1c <_svfiprintf_r+0x50>
 8005d28:	ebba 0b04 	subs.w	fp, sl, r4
 8005d2c:	d00b      	beq.n	8005d46 <_svfiprintf_r+0x7a>
 8005d2e:	465b      	mov	r3, fp
 8005d30:	4622      	mov	r2, r4
 8005d32:	4629      	mov	r1, r5
 8005d34:	4638      	mov	r0, r7
 8005d36:	f7ff ff6f 	bl	8005c18 <__ssputs_r>
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	f000 80a9 	beq.w	8005e92 <_svfiprintf_r+0x1c6>
 8005d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d42:	445a      	add	r2, fp
 8005d44:	9209      	str	r2, [sp, #36]	; 0x24
 8005d46:	f89a 3000 	ldrb.w	r3, [sl]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80a1 	beq.w	8005e92 <_svfiprintf_r+0x1c6>
 8005d50:	2300      	movs	r3, #0
 8005d52:	f04f 32ff 	mov.w	r2, #4294967295
 8005d56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d5a:	f10a 0a01 	add.w	sl, sl, #1
 8005d5e:	9304      	str	r3, [sp, #16]
 8005d60:	9307      	str	r3, [sp, #28]
 8005d62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d66:	931a      	str	r3, [sp, #104]	; 0x68
 8005d68:	4654      	mov	r4, sl
 8005d6a:	2205      	movs	r2, #5
 8005d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d70:	4850      	ldr	r0, [pc, #320]	; (8005eb4 <_svfiprintf_r+0x1e8>)
 8005d72:	f7fa fa3d 	bl	80001f0 <memchr>
 8005d76:	9a04      	ldr	r2, [sp, #16]
 8005d78:	b9d8      	cbnz	r0, 8005db2 <_svfiprintf_r+0xe6>
 8005d7a:	06d0      	lsls	r0, r2, #27
 8005d7c:	bf44      	itt	mi
 8005d7e:	2320      	movmi	r3, #32
 8005d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d84:	0711      	lsls	r1, r2, #28
 8005d86:	bf44      	itt	mi
 8005d88:	232b      	movmi	r3, #43	; 0x2b
 8005d8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d8e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d92:	2b2a      	cmp	r3, #42	; 0x2a
 8005d94:	d015      	beq.n	8005dc2 <_svfiprintf_r+0xf6>
 8005d96:	9a07      	ldr	r2, [sp, #28]
 8005d98:	4654      	mov	r4, sl
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f04f 0c0a 	mov.w	ip, #10
 8005da0:	4621      	mov	r1, r4
 8005da2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da6:	3b30      	subs	r3, #48	; 0x30
 8005da8:	2b09      	cmp	r3, #9
 8005daa:	d94d      	bls.n	8005e48 <_svfiprintf_r+0x17c>
 8005dac:	b1b0      	cbz	r0, 8005ddc <_svfiprintf_r+0x110>
 8005dae:	9207      	str	r2, [sp, #28]
 8005db0:	e014      	b.n	8005ddc <_svfiprintf_r+0x110>
 8005db2:	eba0 0308 	sub.w	r3, r0, r8
 8005db6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	9304      	str	r3, [sp, #16]
 8005dbe:	46a2      	mov	sl, r4
 8005dc0:	e7d2      	b.n	8005d68 <_svfiprintf_r+0x9c>
 8005dc2:	9b03      	ldr	r3, [sp, #12]
 8005dc4:	1d19      	adds	r1, r3, #4
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	9103      	str	r1, [sp, #12]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	bfbb      	ittet	lt
 8005dce:	425b      	neglt	r3, r3
 8005dd0:	f042 0202 	orrlt.w	r2, r2, #2
 8005dd4:	9307      	strge	r3, [sp, #28]
 8005dd6:	9307      	strlt	r3, [sp, #28]
 8005dd8:	bfb8      	it	lt
 8005dda:	9204      	strlt	r2, [sp, #16]
 8005ddc:	7823      	ldrb	r3, [r4, #0]
 8005dde:	2b2e      	cmp	r3, #46	; 0x2e
 8005de0:	d10c      	bne.n	8005dfc <_svfiprintf_r+0x130>
 8005de2:	7863      	ldrb	r3, [r4, #1]
 8005de4:	2b2a      	cmp	r3, #42	; 0x2a
 8005de6:	d134      	bne.n	8005e52 <_svfiprintf_r+0x186>
 8005de8:	9b03      	ldr	r3, [sp, #12]
 8005dea:	1d1a      	adds	r2, r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	9203      	str	r2, [sp, #12]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bfb8      	it	lt
 8005df4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005df8:	3402      	adds	r4, #2
 8005dfa:	9305      	str	r3, [sp, #20]
 8005dfc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005ec4 <_svfiprintf_r+0x1f8>
 8005e00:	7821      	ldrb	r1, [r4, #0]
 8005e02:	2203      	movs	r2, #3
 8005e04:	4650      	mov	r0, sl
 8005e06:	f7fa f9f3 	bl	80001f0 <memchr>
 8005e0a:	b138      	cbz	r0, 8005e1c <_svfiprintf_r+0x150>
 8005e0c:	9b04      	ldr	r3, [sp, #16]
 8005e0e:	eba0 000a 	sub.w	r0, r0, sl
 8005e12:	2240      	movs	r2, #64	; 0x40
 8005e14:	4082      	lsls	r2, r0
 8005e16:	4313      	orrs	r3, r2
 8005e18:	3401      	adds	r4, #1
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e20:	4825      	ldr	r0, [pc, #148]	; (8005eb8 <_svfiprintf_r+0x1ec>)
 8005e22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e26:	2206      	movs	r2, #6
 8005e28:	f7fa f9e2 	bl	80001f0 <memchr>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d038      	beq.n	8005ea2 <_svfiprintf_r+0x1d6>
 8005e30:	4b22      	ldr	r3, [pc, #136]	; (8005ebc <_svfiprintf_r+0x1f0>)
 8005e32:	bb1b      	cbnz	r3, 8005e7c <_svfiprintf_r+0x1b0>
 8005e34:	9b03      	ldr	r3, [sp, #12]
 8005e36:	3307      	adds	r3, #7
 8005e38:	f023 0307 	bic.w	r3, r3, #7
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	9303      	str	r3, [sp, #12]
 8005e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e42:	4433      	add	r3, r6
 8005e44:	9309      	str	r3, [sp, #36]	; 0x24
 8005e46:	e768      	b.n	8005d1a <_svfiprintf_r+0x4e>
 8005e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	2001      	movs	r0, #1
 8005e50:	e7a6      	b.n	8005da0 <_svfiprintf_r+0xd4>
 8005e52:	2300      	movs	r3, #0
 8005e54:	3401      	adds	r4, #1
 8005e56:	9305      	str	r3, [sp, #20]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f04f 0c0a 	mov.w	ip, #10
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e64:	3a30      	subs	r2, #48	; 0x30
 8005e66:	2a09      	cmp	r2, #9
 8005e68:	d903      	bls.n	8005e72 <_svfiprintf_r+0x1a6>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0c6      	beq.n	8005dfc <_svfiprintf_r+0x130>
 8005e6e:	9105      	str	r1, [sp, #20]
 8005e70:	e7c4      	b.n	8005dfc <_svfiprintf_r+0x130>
 8005e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e76:	4604      	mov	r4, r0
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e7f0      	b.n	8005e5e <_svfiprintf_r+0x192>
 8005e7c:	ab03      	add	r3, sp, #12
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	462a      	mov	r2, r5
 8005e82:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <_svfiprintf_r+0x1f4>)
 8005e84:	a904      	add	r1, sp, #16
 8005e86:	4638      	mov	r0, r7
 8005e88:	f3af 8000 	nop.w
 8005e8c:	1c42      	adds	r2, r0, #1
 8005e8e:	4606      	mov	r6, r0
 8005e90:	d1d6      	bne.n	8005e40 <_svfiprintf_r+0x174>
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	065b      	lsls	r3, r3, #25
 8005e96:	f53f af2d 	bmi.w	8005cf4 <_svfiprintf_r+0x28>
 8005e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e9c:	b01d      	add	sp, #116	; 0x74
 8005e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea2:	ab03      	add	r3, sp, #12
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	462a      	mov	r2, r5
 8005ea8:	4b05      	ldr	r3, [pc, #20]	; (8005ec0 <_svfiprintf_r+0x1f4>)
 8005eaa:	a904      	add	r1, sp, #16
 8005eac:	4638      	mov	r0, r7
 8005eae:	f000 f879 	bl	8005fa4 <_printf_i>
 8005eb2:	e7eb      	b.n	8005e8c <_svfiprintf_r+0x1c0>
 8005eb4:	08006750 	.word	0x08006750
 8005eb8:	0800675a 	.word	0x0800675a
 8005ebc:	00000000 	.word	0x00000000
 8005ec0:	08005c19 	.word	0x08005c19
 8005ec4:	08006756 	.word	0x08006756

08005ec8 <_printf_common>:
 8005ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ecc:	4616      	mov	r6, r2
 8005ece:	4699      	mov	r9, r3
 8005ed0:	688a      	ldr	r2, [r1, #8]
 8005ed2:	690b      	ldr	r3, [r1, #16]
 8005ed4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	bfb8      	it	lt
 8005edc:	4613      	movlt	r3, r2
 8005ede:	6033      	str	r3, [r6, #0]
 8005ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	b10a      	cbz	r2, 8005eee <_printf_common+0x26>
 8005eea:	3301      	adds	r3, #1
 8005eec:	6033      	str	r3, [r6, #0]
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	0699      	lsls	r1, r3, #26
 8005ef2:	bf42      	ittt	mi
 8005ef4:	6833      	ldrmi	r3, [r6, #0]
 8005ef6:	3302      	addmi	r3, #2
 8005ef8:	6033      	strmi	r3, [r6, #0]
 8005efa:	6825      	ldr	r5, [r4, #0]
 8005efc:	f015 0506 	ands.w	r5, r5, #6
 8005f00:	d106      	bne.n	8005f10 <_printf_common+0x48>
 8005f02:	f104 0a19 	add.w	sl, r4, #25
 8005f06:	68e3      	ldr	r3, [r4, #12]
 8005f08:	6832      	ldr	r2, [r6, #0]
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	dc26      	bgt.n	8005f5e <_printf_common+0x96>
 8005f10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f14:	1e13      	subs	r3, r2, #0
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	bf18      	it	ne
 8005f1a:	2301      	movne	r3, #1
 8005f1c:	0692      	lsls	r2, r2, #26
 8005f1e:	d42b      	bmi.n	8005f78 <_printf_common+0xb0>
 8005f20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f24:	4649      	mov	r1, r9
 8005f26:	4638      	mov	r0, r7
 8005f28:	47c0      	blx	r8
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d01e      	beq.n	8005f6c <_printf_common+0xa4>
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	6922      	ldr	r2, [r4, #16]
 8005f32:	f003 0306 	and.w	r3, r3, #6
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	bf02      	ittt	eq
 8005f3a:	68e5      	ldreq	r5, [r4, #12]
 8005f3c:	6833      	ldreq	r3, [r6, #0]
 8005f3e:	1aed      	subeq	r5, r5, r3
 8005f40:	68a3      	ldr	r3, [r4, #8]
 8005f42:	bf0c      	ite	eq
 8005f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f48:	2500      	movne	r5, #0
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	bfc4      	itt	gt
 8005f4e:	1a9b      	subgt	r3, r3, r2
 8005f50:	18ed      	addgt	r5, r5, r3
 8005f52:	2600      	movs	r6, #0
 8005f54:	341a      	adds	r4, #26
 8005f56:	42b5      	cmp	r5, r6
 8005f58:	d11a      	bne.n	8005f90 <_printf_common+0xc8>
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	e008      	b.n	8005f70 <_printf_common+0xa8>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4652      	mov	r2, sl
 8005f62:	4649      	mov	r1, r9
 8005f64:	4638      	mov	r0, r7
 8005f66:	47c0      	blx	r8
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d103      	bne.n	8005f74 <_printf_common+0xac>
 8005f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f74:	3501      	adds	r5, #1
 8005f76:	e7c6      	b.n	8005f06 <_printf_common+0x3e>
 8005f78:	18e1      	adds	r1, r4, r3
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	2030      	movs	r0, #48	; 0x30
 8005f7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f82:	4422      	add	r2, r4
 8005f84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f8c:	3302      	adds	r3, #2
 8005f8e:	e7c7      	b.n	8005f20 <_printf_common+0x58>
 8005f90:	2301      	movs	r3, #1
 8005f92:	4622      	mov	r2, r4
 8005f94:	4649      	mov	r1, r9
 8005f96:	4638      	mov	r0, r7
 8005f98:	47c0      	blx	r8
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	d0e6      	beq.n	8005f6c <_printf_common+0xa4>
 8005f9e:	3601      	adds	r6, #1
 8005fa0:	e7d9      	b.n	8005f56 <_printf_common+0x8e>
	...

08005fa4 <_printf_i>:
 8005fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	7e0f      	ldrb	r7, [r1, #24]
 8005faa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fac:	2f78      	cmp	r7, #120	; 0x78
 8005fae:	4691      	mov	r9, r2
 8005fb0:	4680      	mov	r8, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	469a      	mov	sl, r3
 8005fb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fba:	d807      	bhi.n	8005fcc <_printf_i+0x28>
 8005fbc:	2f62      	cmp	r7, #98	; 0x62
 8005fbe:	d80a      	bhi.n	8005fd6 <_printf_i+0x32>
 8005fc0:	2f00      	cmp	r7, #0
 8005fc2:	f000 80d4 	beq.w	800616e <_printf_i+0x1ca>
 8005fc6:	2f58      	cmp	r7, #88	; 0x58
 8005fc8:	f000 80c0 	beq.w	800614c <_printf_i+0x1a8>
 8005fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fd4:	e03a      	b.n	800604c <_printf_i+0xa8>
 8005fd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fda:	2b15      	cmp	r3, #21
 8005fdc:	d8f6      	bhi.n	8005fcc <_printf_i+0x28>
 8005fde:	a101      	add	r1, pc, #4	; (adr r1, 8005fe4 <_printf_i+0x40>)
 8005fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fe4:	0800603d 	.word	0x0800603d
 8005fe8:	08006051 	.word	0x08006051
 8005fec:	08005fcd 	.word	0x08005fcd
 8005ff0:	08005fcd 	.word	0x08005fcd
 8005ff4:	08005fcd 	.word	0x08005fcd
 8005ff8:	08005fcd 	.word	0x08005fcd
 8005ffc:	08006051 	.word	0x08006051
 8006000:	08005fcd 	.word	0x08005fcd
 8006004:	08005fcd 	.word	0x08005fcd
 8006008:	08005fcd 	.word	0x08005fcd
 800600c:	08005fcd 	.word	0x08005fcd
 8006010:	08006155 	.word	0x08006155
 8006014:	0800607d 	.word	0x0800607d
 8006018:	0800610f 	.word	0x0800610f
 800601c:	08005fcd 	.word	0x08005fcd
 8006020:	08005fcd 	.word	0x08005fcd
 8006024:	08006177 	.word	0x08006177
 8006028:	08005fcd 	.word	0x08005fcd
 800602c:	0800607d 	.word	0x0800607d
 8006030:	08005fcd 	.word	0x08005fcd
 8006034:	08005fcd 	.word	0x08005fcd
 8006038:	08006117 	.word	0x08006117
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	1d1a      	adds	r2, r3, #4
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	602a      	str	r2, [r5, #0]
 8006044:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006048:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800604c:	2301      	movs	r3, #1
 800604e:	e09f      	b.n	8006190 <_printf_i+0x1ec>
 8006050:	6820      	ldr	r0, [r4, #0]
 8006052:	682b      	ldr	r3, [r5, #0]
 8006054:	0607      	lsls	r7, r0, #24
 8006056:	f103 0104 	add.w	r1, r3, #4
 800605a:	6029      	str	r1, [r5, #0]
 800605c:	d501      	bpl.n	8006062 <_printf_i+0xbe>
 800605e:	681e      	ldr	r6, [r3, #0]
 8006060:	e003      	b.n	800606a <_printf_i+0xc6>
 8006062:	0646      	lsls	r6, r0, #25
 8006064:	d5fb      	bpl.n	800605e <_printf_i+0xba>
 8006066:	f9b3 6000 	ldrsh.w	r6, [r3]
 800606a:	2e00      	cmp	r6, #0
 800606c:	da03      	bge.n	8006076 <_printf_i+0xd2>
 800606e:	232d      	movs	r3, #45	; 0x2d
 8006070:	4276      	negs	r6, r6
 8006072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006076:	485a      	ldr	r0, [pc, #360]	; (80061e0 <_printf_i+0x23c>)
 8006078:	230a      	movs	r3, #10
 800607a:	e012      	b.n	80060a2 <_printf_i+0xfe>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	1d19      	adds	r1, r3, #4
 8006082:	6029      	str	r1, [r5, #0]
 8006084:	0605      	lsls	r5, r0, #24
 8006086:	d501      	bpl.n	800608c <_printf_i+0xe8>
 8006088:	681e      	ldr	r6, [r3, #0]
 800608a:	e002      	b.n	8006092 <_printf_i+0xee>
 800608c:	0641      	lsls	r1, r0, #25
 800608e:	d5fb      	bpl.n	8006088 <_printf_i+0xe4>
 8006090:	881e      	ldrh	r6, [r3, #0]
 8006092:	4853      	ldr	r0, [pc, #332]	; (80061e0 <_printf_i+0x23c>)
 8006094:	2f6f      	cmp	r7, #111	; 0x6f
 8006096:	bf0c      	ite	eq
 8006098:	2308      	moveq	r3, #8
 800609a:	230a      	movne	r3, #10
 800609c:	2100      	movs	r1, #0
 800609e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060a2:	6865      	ldr	r5, [r4, #4]
 80060a4:	60a5      	str	r5, [r4, #8]
 80060a6:	2d00      	cmp	r5, #0
 80060a8:	bfa2      	ittt	ge
 80060aa:	6821      	ldrge	r1, [r4, #0]
 80060ac:	f021 0104 	bicge.w	r1, r1, #4
 80060b0:	6021      	strge	r1, [r4, #0]
 80060b2:	b90e      	cbnz	r6, 80060b8 <_printf_i+0x114>
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	d04b      	beq.n	8006150 <_printf_i+0x1ac>
 80060b8:	4615      	mov	r5, r2
 80060ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80060be:	fb03 6711 	mls	r7, r3, r1, r6
 80060c2:	5dc7      	ldrb	r7, [r0, r7]
 80060c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060c8:	4637      	mov	r7, r6
 80060ca:	42bb      	cmp	r3, r7
 80060cc:	460e      	mov	r6, r1
 80060ce:	d9f4      	bls.n	80060ba <_printf_i+0x116>
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d10b      	bne.n	80060ec <_printf_i+0x148>
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	07de      	lsls	r6, r3, #31
 80060d8:	d508      	bpl.n	80060ec <_printf_i+0x148>
 80060da:	6923      	ldr	r3, [r4, #16]
 80060dc:	6861      	ldr	r1, [r4, #4]
 80060de:	4299      	cmp	r1, r3
 80060e0:	bfde      	ittt	le
 80060e2:	2330      	movle	r3, #48	; 0x30
 80060e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060ec:	1b52      	subs	r2, r2, r5
 80060ee:	6122      	str	r2, [r4, #16]
 80060f0:	f8cd a000 	str.w	sl, [sp]
 80060f4:	464b      	mov	r3, r9
 80060f6:	aa03      	add	r2, sp, #12
 80060f8:	4621      	mov	r1, r4
 80060fa:	4640      	mov	r0, r8
 80060fc:	f7ff fee4 	bl	8005ec8 <_printf_common>
 8006100:	3001      	adds	r0, #1
 8006102:	d14a      	bne.n	800619a <_printf_i+0x1f6>
 8006104:	f04f 30ff 	mov.w	r0, #4294967295
 8006108:	b004      	add	sp, #16
 800610a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	f043 0320 	orr.w	r3, r3, #32
 8006114:	6023      	str	r3, [r4, #0]
 8006116:	4833      	ldr	r0, [pc, #204]	; (80061e4 <_printf_i+0x240>)
 8006118:	2778      	movs	r7, #120	; 0x78
 800611a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	6829      	ldr	r1, [r5, #0]
 8006122:	061f      	lsls	r7, r3, #24
 8006124:	f851 6b04 	ldr.w	r6, [r1], #4
 8006128:	d402      	bmi.n	8006130 <_printf_i+0x18c>
 800612a:	065f      	lsls	r7, r3, #25
 800612c:	bf48      	it	mi
 800612e:	b2b6      	uxthmi	r6, r6
 8006130:	07df      	lsls	r7, r3, #31
 8006132:	bf48      	it	mi
 8006134:	f043 0320 	orrmi.w	r3, r3, #32
 8006138:	6029      	str	r1, [r5, #0]
 800613a:	bf48      	it	mi
 800613c:	6023      	strmi	r3, [r4, #0]
 800613e:	b91e      	cbnz	r6, 8006148 <_printf_i+0x1a4>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	f023 0320 	bic.w	r3, r3, #32
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	2310      	movs	r3, #16
 800614a:	e7a7      	b.n	800609c <_printf_i+0xf8>
 800614c:	4824      	ldr	r0, [pc, #144]	; (80061e0 <_printf_i+0x23c>)
 800614e:	e7e4      	b.n	800611a <_printf_i+0x176>
 8006150:	4615      	mov	r5, r2
 8006152:	e7bd      	b.n	80060d0 <_printf_i+0x12c>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	6826      	ldr	r6, [r4, #0]
 8006158:	6961      	ldr	r1, [r4, #20]
 800615a:	1d18      	adds	r0, r3, #4
 800615c:	6028      	str	r0, [r5, #0]
 800615e:	0635      	lsls	r5, r6, #24
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	d501      	bpl.n	8006168 <_printf_i+0x1c4>
 8006164:	6019      	str	r1, [r3, #0]
 8006166:	e002      	b.n	800616e <_printf_i+0x1ca>
 8006168:	0670      	lsls	r0, r6, #25
 800616a:	d5fb      	bpl.n	8006164 <_printf_i+0x1c0>
 800616c:	8019      	strh	r1, [r3, #0]
 800616e:	2300      	movs	r3, #0
 8006170:	6123      	str	r3, [r4, #16]
 8006172:	4615      	mov	r5, r2
 8006174:	e7bc      	b.n	80060f0 <_printf_i+0x14c>
 8006176:	682b      	ldr	r3, [r5, #0]
 8006178:	1d1a      	adds	r2, r3, #4
 800617a:	602a      	str	r2, [r5, #0]
 800617c:	681d      	ldr	r5, [r3, #0]
 800617e:	6862      	ldr	r2, [r4, #4]
 8006180:	2100      	movs	r1, #0
 8006182:	4628      	mov	r0, r5
 8006184:	f7fa f834 	bl	80001f0 <memchr>
 8006188:	b108      	cbz	r0, 800618e <_printf_i+0x1ea>
 800618a:	1b40      	subs	r0, r0, r5
 800618c:	6060      	str	r0, [r4, #4]
 800618e:	6863      	ldr	r3, [r4, #4]
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	2300      	movs	r3, #0
 8006194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006198:	e7aa      	b.n	80060f0 <_printf_i+0x14c>
 800619a:	6923      	ldr	r3, [r4, #16]
 800619c:	462a      	mov	r2, r5
 800619e:	4649      	mov	r1, r9
 80061a0:	4640      	mov	r0, r8
 80061a2:	47d0      	blx	sl
 80061a4:	3001      	adds	r0, #1
 80061a6:	d0ad      	beq.n	8006104 <_printf_i+0x160>
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	079b      	lsls	r3, r3, #30
 80061ac:	d413      	bmi.n	80061d6 <_printf_i+0x232>
 80061ae:	68e0      	ldr	r0, [r4, #12]
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	4298      	cmp	r0, r3
 80061b4:	bfb8      	it	lt
 80061b6:	4618      	movlt	r0, r3
 80061b8:	e7a6      	b.n	8006108 <_printf_i+0x164>
 80061ba:	2301      	movs	r3, #1
 80061bc:	4632      	mov	r2, r6
 80061be:	4649      	mov	r1, r9
 80061c0:	4640      	mov	r0, r8
 80061c2:	47d0      	blx	sl
 80061c4:	3001      	adds	r0, #1
 80061c6:	d09d      	beq.n	8006104 <_printf_i+0x160>
 80061c8:	3501      	adds	r5, #1
 80061ca:	68e3      	ldr	r3, [r4, #12]
 80061cc:	9903      	ldr	r1, [sp, #12]
 80061ce:	1a5b      	subs	r3, r3, r1
 80061d0:	42ab      	cmp	r3, r5
 80061d2:	dcf2      	bgt.n	80061ba <_printf_i+0x216>
 80061d4:	e7eb      	b.n	80061ae <_printf_i+0x20a>
 80061d6:	2500      	movs	r5, #0
 80061d8:	f104 0619 	add.w	r6, r4, #25
 80061dc:	e7f5      	b.n	80061ca <_printf_i+0x226>
 80061de:	bf00      	nop
 80061e0:	08006761 	.word	0x08006761
 80061e4:	08006772 	.word	0x08006772

080061e8 <memmove>:
 80061e8:	4288      	cmp	r0, r1
 80061ea:	b510      	push	{r4, lr}
 80061ec:	eb01 0402 	add.w	r4, r1, r2
 80061f0:	d902      	bls.n	80061f8 <memmove+0x10>
 80061f2:	4284      	cmp	r4, r0
 80061f4:	4623      	mov	r3, r4
 80061f6:	d807      	bhi.n	8006208 <memmove+0x20>
 80061f8:	1e43      	subs	r3, r0, #1
 80061fa:	42a1      	cmp	r1, r4
 80061fc:	d008      	beq.n	8006210 <memmove+0x28>
 80061fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006206:	e7f8      	b.n	80061fa <memmove+0x12>
 8006208:	4402      	add	r2, r0
 800620a:	4601      	mov	r1, r0
 800620c:	428a      	cmp	r2, r1
 800620e:	d100      	bne.n	8006212 <memmove+0x2a>
 8006210:	bd10      	pop	{r4, pc}
 8006212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800621a:	e7f7      	b.n	800620c <memmove+0x24>

0800621c <memcpy>:
 800621c:	440a      	add	r2, r1
 800621e:	4291      	cmp	r1, r2
 8006220:	f100 33ff 	add.w	r3, r0, #4294967295
 8006224:	d100      	bne.n	8006228 <memcpy+0xc>
 8006226:	4770      	bx	lr
 8006228:	b510      	push	{r4, lr}
 800622a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800622e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006232:	4291      	cmp	r1, r2
 8006234:	d1f9      	bne.n	800622a <memcpy+0xe>
 8006236:	bd10      	pop	{r4, pc}

08006238 <_realloc_r>:
 8006238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800623c:	4680      	mov	r8, r0
 800623e:	4614      	mov	r4, r2
 8006240:	460e      	mov	r6, r1
 8006242:	b921      	cbnz	r1, 800624e <_realloc_r+0x16>
 8006244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006248:	4611      	mov	r1, r2
 800624a:	f7ff bb51 	b.w	80058f0 <_malloc_r>
 800624e:	b92a      	cbnz	r2, 800625c <_realloc_r+0x24>
 8006250:	f7ff fc96 	bl	8005b80 <_free_r>
 8006254:	4625      	mov	r5, r4
 8006256:	4628      	mov	r0, r5
 8006258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800625c:	f000 f81b 	bl	8006296 <_malloc_usable_size_r>
 8006260:	4284      	cmp	r4, r0
 8006262:	4607      	mov	r7, r0
 8006264:	d802      	bhi.n	800626c <_realloc_r+0x34>
 8006266:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800626a:	d812      	bhi.n	8006292 <_realloc_r+0x5a>
 800626c:	4621      	mov	r1, r4
 800626e:	4640      	mov	r0, r8
 8006270:	f7ff fb3e 	bl	80058f0 <_malloc_r>
 8006274:	4605      	mov	r5, r0
 8006276:	2800      	cmp	r0, #0
 8006278:	d0ed      	beq.n	8006256 <_realloc_r+0x1e>
 800627a:	42bc      	cmp	r4, r7
 800627c:	4622      	mov	r2, r4
 800627e:	4631      	mov	r1, r6
 8006280:	bf28      	it	cs
 8006282:	463a      	movcs	r2, r7
 8006284:	f7ff ffca 	bl	800621c <memcpy>
 8006288:	4631      	mov	r1, r6
 800628a:	4640      	mov	r0, r8
 800628c:	f7ff fc78 	bl	8005b80 <_free_r>
 8006290:	e7e1      	b.n	8006256 <_realloc_r+0x1e>
 8006292:	4635      	mov	r5, r6
 8006294:	e7df      	b.n	8006256 <_realloc_r+0x1e>

08006296 <_malloc_usable_size_r>:
 8006296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800629a:	1f18      	subs	r0, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	bfbc      	itt	lt
 80062a0:	580b      	ldrlt	r3, [r1, r0]
 80062a2:	18c0      	addlt	r0, r0, r3
 80062a4:	4770      	bx	lr
	...

080062a8 <_init>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr

080062b4 <_fini>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr
